.BANK 12 SLOT 0
.ORG $0000

.SECTION "Bank12" FORCE

	ora ($0B.b,X)		; Logical OR ($0B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $2A.b		; Test and set bits $2A.b [Reads: Accumulator] [Flags: Z]
	brk $04.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $06.b		; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $22.b		; Arithmetic shift left $22.b [Reads: Direct Page] [Flags: ZCN]
	brk $07.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($06.b,X)		; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($83.b,X)		; Logical OR ($83.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $0D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01.b,S		; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($23.b,X)		; Logical OR ($23.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0123.w,Y		; OR accumulator with memory $0123.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $05.b,S		; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $07.b		; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor $00.b,S		; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($0F.b,X)		; Logical OR ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $19.b,X		; OR accumulator with memory $19.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $000D.w,Y		; OR accumulator with memory $000D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($05.b,X)		; Logical OR ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $06.b		; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $03.b		; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$0B.b]		; OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $0B0519.l		; Jump to subroutine long $0B0519.l [Writes: Stack Pointer] [Flow: call]
	ora [$04.b],Y		; OR accumulator with memory (long indexed) [$04.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $03.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $25.b		; Logical OR $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $0519.w,X		; Arithmetic shift left $0519.w,X [Reads: X Index] [Flags: ZCN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $0B.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($05.b,X)		; Logical OR ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$0B.b]		; OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $11.b,S		; OR accumulator with stack relative $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($19.b),Y		; OR accumulator with memory ($19.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $05.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$07.b]		; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora #$0101.w		; Logical OR #$0101.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	and [$0D.b]		; AND accumulator with memory (long) [$0D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $17.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$07.b]		; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $01.b		; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $19190B.l		; OR accumulator with memory (long) $19190B.l [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and $02.b		; Logical AND $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $08.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$08.b]		; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $19020B.l		; Jump to subroutine long $19020B.l [Writes: Stack Pointer] [Flow: call]
	ora $250B.w,Y		; OR accumulator with memory $250B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $09.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $06.b,S		; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cop $08.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0519.w,Y		; OR accumulator with memory $0519.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $02.b		; Logical AND $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$070C.w		; Logical OR #$070C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $080C.w		; Test and set bits $080C.w [Reads: Accumulator] [Flags: Z]
	tsb $1917.w		; Test and set bits $1917.w [Reads: Accumulator] [Flags: Z]
	ora [$22.b]		; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $22.b		; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
	tsb $0406.w		; Test and set bits $0406.w [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$00.b],Y		; OR accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$0222.w		; Logical OR #$0222.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $040808.l		; OR accumulator with memory (long) $040808.l [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $04.b		; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($00.b,X)		; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $00.b		; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZCN]
	ora ($88.b,X)		; Logical OR ($88.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $CA.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	tsb $0086.w		; Test and set bits $0086.w [Reads: Accumulator] [Flags: Z]
	cpy $0083.w		; Compare $0083.w with Y register [Reads: Y Index] [Flags: ZCN]
	cpy $0088.w		; Compare $0088.w with Y register [Reads: Y Index] [Flags: ZCN]
	sbc ($FF.b),Y		; Subtract with carry ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	cop $C8.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $09620B.l		; Jump to subroutine long $09620B.l [Writes: Stack Pointer] [Flow: call]
	ora ($09.b,X)		; Logical OR ($09.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	cop $04.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$0D8E.w		; Compare #$0D8E.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $30, $62		; Invalid branch target (bmi L060147) ; Branch if minus to $30, $62 [Flow: branch]
	asl $0F.b		; Arithmetic shift left $0F.b [Reads: Direct Page] [Flags: ZCN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
L0600E8:
	asl $B062.w		; Arithmetic shift left $B062.w [Flags: ZCN]
	and ($08.b),Y		; AND accumulator with memory ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $10.b		; Arithmetic shift left $10.b [Reads: Direct Page] [Flags: ZCN]
	wai		; Wait for interrupt
	stx $C80D.w		; Store X register to $C80D.w [Reads: X Index]
	ora $001A.w,Y		; OR accumulator with memory $001A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $63.b		; Test and set bits $63.b [Reads: Accumulator] [Flags: Z]
	sta $391B.w		; Store accumulator to $391B.w [Reads: Accumulator]
	dec A		; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $8E73.w		; Test and reset bits $8E73.w [Reads: Accumulator] [Flags: Z]
	.db $62, $CE, $99		; Bank wrapping branch target ; Push effective relative address $62, $CE, $99 [Writes: Stack Pointer]
	and [$09.b]		; AND accumulator with memory (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$E5.b]		; OR accumulator with memory (long) [$E5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; Store accumulator ($92.b),Y [Reads: Direct Page, Accumulator, Y Index]
	cpy #$8E91.w		; Compare #$8E91.w with Y register [Reads: Y Index] [Flags: ZCN]
	and [$29.b],Y		; AND accumulator with memory (long indexed) [$29.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	stx $920D.w		; Store X register to $920D.w [Reads: X Index]
	lda ($D2.b)		; Load accumulator (indirect) ($D2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pea $62D3.w		; Push absolute address $62D3.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sta ($08.b,S),Y		; Store accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $A1.b,S		; OR accumulator with stack relative $A1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$AA
	stx $C9.b,Y		; Store X register $C9.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ldx $65.b		; Load $65.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cld		; Clear decimal ; Clear decimal flag [Flags: D]
	cpx #$9630.w		; Compare #$9630.w with X register [Reads: X Index] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldy $E0AA.w		; Load $E0AA.w into Y register [Writes: Y Index] [Flags: ZN]
	sbc $239D.w		; Subtract $239D.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	sbc ($E2.b,X)		; Subtract with carry ($E2.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	inc $E409.w		; Increment $E409.w [Flags: ZN]
	lda ($02.b),Y		; Load accumulator ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $97.b,S		; OR accumulator with stack relative $97.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp #$7ACA.w		; Compare #$7ACA.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	adc ($22.b,S),Y		; Add with carry (stack relative indirect indexed) ($22.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	and $E8.b,S		; AND accumulator with stack relative $E8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc #$3023.w		; Subtract #$3023.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	asl $EBEA.w		; Arithmetic shift left $EBEA.w [Flags: ZCN]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $2222.w,Y		; Store accumulator to $2222.w,Y [Reads: Accumulator, Y Index]
	tsb $26.b		; Test and set bits $26.b [Reads: Accumulator] [Flags: Z]
	sbc $244973.l		; Subtract with carry (long) $244973.l [Writes: Accumulator] [Flags: VCNZ]
	adc ($CC.b)		; Add with carry (indirect) ($CC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ora ($F1.b),Y		; OR accumulator with memory ($F1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	txs		; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txy		; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sbc ($F4.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($F4.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	bit $E9.b		; Test bits $E9.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	ora $3E.b,S		; OR accumulator with stack relative $3E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc [$5A.b],Y		; Add with carry (long indexed) [$5A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	ora ($62.b)		; OR accumulator with memory (indirect) ($62.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $03.b,X		; Increment memory $03.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	stz $FA9D.w		; Store zero to $FA9D.w
	lda [$24.b]		; Load accumulator (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$FC09.w		; Subtract #$FC09.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	and ($0D.b)		; AND accumulator with memory (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$A7FD.w		; Add #$A7FD.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $089F9E.l,X		; Store accumulator (long,X) $089F9E.l,X [Reads: Accumulator, X Index]
	and $E9.b		; Logical AND $E9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$4002.w		; Logical OR #$4002.w with accumulator [Writes: Accumulator] [Flags: ZN]
	stz $0403.w		; Store zero to $0403.w
	cmp ($05.b,X)		; Compare accumulator ($05.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: ZCN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rol $2274.w,X		; Rotate left $2274.w,X [Reads: X Index] [Flags: ZCN]
	sbc #$C002.w		; Subtract #$C002.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	cmp ($32.b,X)		; Compare accumulator ($32.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: ZCN]
	.db $62, $07, $06		; Invalid branch target (per L06078F) ; Push effective relative address $62, $07, $06 [Writes: Stack Pointer]
	and $53A7.w,X		; AND accumulator with memory $53A7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $E922BA.l,X		; Logical OR long $E922BA.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	cmp $53.b		; Compare $53.b with accumulator [Reads: Direct Page, Accumulator] [Flags: ZCN]
	and $53A7.w,X		; AND accumulator with memory $53A7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $DA46.w,X		; AND accumulator with memory $DA46.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	.db $62, $1F, $61		; Invalid branch target (per L0662BD) ; Push effective relative address $62, $1F, $61 [Writes: Stack Pointer]
	.db $62, $74, $99		; Bank wrapping branch target ; Push effective relative address $62, $74, $99 [Writes: Stack Pointer]
	asl $5655.w,X		; Arithmetic shift left $5655.w,X [Reads: X Index] [Flags: ZCN]
	lsr $DA.b		; Logical shift right $DA.b [Reads: Direct Page] [Flags: ZCN]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	lsr $4E.b		; Logical shift right $4E.b [Reads: Direct Page] [Flags: ZCN]
	lda ($4C.b,X)		; Load accumulator ($4C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	.db $62, $0B, $00		; Invalid branch target (per L0601B9) ; Push effective relative address $62, $0B, $00 [Writes: Stack Pointer]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $62, $0E, $05		; Invalid branch target (per L0606C0) ; Push effective relative address $62, $0E, $05 [Writes: Stack Pointer]
	asl $4E0D.w		; Arithmetic shift left $4E0D.w [Flags: ZCN]
	lda ($4C.b,X)		; Load accumulator ($4C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $0083.w		; Logical shift right $0083.w [Flags: ZCN]
	cpy $A700.w		; Compare $A700.w with Y register [Reads: Y Index] [Flags: ZCN]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	wai		; Wait for interrupt
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	sbc ($FF.b),Y		; Subtract with carry ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	tsb $05.b		; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora [$17.b]		; OR accumulator with memory (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $4317.w,Y		; OR accumulator with memory $4317.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$19.b],Y		; OR accumulator with memory (long indexed) [$19.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($19.b,X)		; Logical OR ($19.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	bit $19.b		; Test bits $19.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	ora ($05.b,X)		; Logical OR ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$22.b]		; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1702.w,Y		; OR accumulator with memory $1702.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$18.b],Y		; OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $19.b		; Exclusive OR $19.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$06.b],Y		; OR accumulator with memory (long indexed) [$06.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$19.b],Y		; OR accumulator with memory (long indexed) [$19.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $07.b		; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $19.b,X		; OR accumulator with memory $19.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $06.b,S		; AND accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $19.b,S		; Exclusive OR accumulator with stack relative $19.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $22.b		; Arithmetic shift left $22.b [Reads: Direct Page] [Flags: ZCN]
	ora $0505.w,Y		; OR accumulator with memory $0505.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$08.b]		; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $19.b		; Arithmetic shift left $19.b [Reads: Direct Page] [Flags: ZCN]
	ora $0623.w,Y		; OR accumulator with memory $0623.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $09.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $008506.l		; Jump to subroutine long $008506.l [Writes: Stack Pointer] [Flow: call]
	rol $0601.w		; Rotate left $0601.w [Flags: ZCN]
	ora #$0624.w		; Logical OR #$0624.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $17.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $17.b,S		; Exclusive OR accumulator with stack relative $17.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0083.w,Y		; OR accumulator with memory $0083.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bpl L06020D.b		; Branch if plus to L06020D.b [Flow: branch]
	asl $0C.b		; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: ZCN]
L06020D:
	ora [$23.b]		; OR accumulator with memory (long) [$23.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	ora [$17.b],Y		; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $050519.l		; Jump to subroutine long $050519.l [Writes: Stack Pointer] [Flow: call]
	ora [$05.b]		; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0001.w,Y		; OR accumulator with memory $0001.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	bit $01.b,X		; Test bits $01.b,X [Reads: Direct Page, X Index] [Flags: VNZ] [Flow: branch]
	ora #$8307.w		; Logical OR #$8307.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $2B.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $05.b,S		; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $19.b		; Logical OR $19.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0C2B.w,Y		; OR accumulator with memory $0C2B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $070005.l		; Jump to subroutine long $070005.l [Writes: Stack Pointer] [Flow: call]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	cop $22.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $3C.b		; Logical OR $3C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$00.b]		; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $072E.w,Y		; OR accumulator with memory $072E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $060C.w		; Logical AND $060C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0404.w,Y		; OR accumulator with memory $0404.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($19.b,X)		; Logical OR ($19.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $06.b		; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZCN]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	tsb $190F.w		; Test and set bits $190F.w [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $040C.w		; Test and set bits $040C.w [Reads: Accumulator] [Flags: Z]
	brk $0C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $08.b		; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $08.b		; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $22.b		; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $04.b		; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $07.b		; Test and set bits $07.b [Reads: Accumulator] [Flags: Z]
	ora ($0B.b,X)		; Logical OR ($0B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $E7.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L060264:
	sbc $75E50C.l,X		; Subtract with carry (long,X) $75E50C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $82, $A0, $7F		; Bank wrapping branch target ; Branch always long to $82, $A0, $7F [Flow: branch]
	txy		; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda ($95.b,X)		; Load accumulator ($95.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ldx #$00A3.w		; Load #$00A3.w into X register [Writes: X Index] [Flags: ZN]
	ldy $A3.b		; Load $A3.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $62, $A5, $07		; Invalid branch target (per L060A1B) ; Push effective relative address $62, $A5, $07 [Writes: Stack Pointer]
	sbc $75.b		; Subtract $75.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$9CA3.w		; Load #$9CA3.w into accumulator [Writes: Accumulator] [Flags: ZN]
	txy		; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	brk $45.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $B5.b,S		; Load accumulator (stack relative) $B5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $81.b		; Arithmetic shift left $81.b [Reads: Direct Page] [Flags: ZCN]
	lda [$E5.b]		; Load accumulator (long) [$E5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $FD.b,X		; Add $FD.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $8023AA.l,X		; Subtract with carry (long,X) $8023AA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	mvp $80,$AB		; Move block positive $80,$AB [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora [$AC.b]		; OR accumulator with memory (long) [$AC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $75E5.w		; Load $75E5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $AE74.w,X		; Subtract with carry $AE74.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and $80.b,S		; AND accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $2D.b		; Test and set bits $2D.b [Reads: Accumulator] [Flags: Z]
	sta $94.b,X		; Store accumulator to $94.b,X [Reads: Accumulator, X Index]
	.db $80, $AD		; Invalid branch target (bra L06024C) ; Branch always to $80, $AD [Flow: branch]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	and $6A6A02.l		; AND accumulator with memory (long) $6A6A02.l [Writes: Accumulator] [Flags: ZN]
	bit $23.b		; Test bits $23.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	bra L0602B5.b		; Branch always to L0602B5.b [Flow: branch]
	cmp ($0C.b),Y		; Compare accumulator ($0C.b),Y [Reads: Direct Page, Accumulator, Y Index] [Flags: ZCN]
	ora $B5AF.w		; Logical OR $B5AF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $75E5.w		; Load $75E5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	bcs L060264.b		; Branch if carry set to L060264.b [Flow: branch]
	stz $2C.b,X		; Store zero to $2C.b,X [Reads: X Index]
L0602B5:
	jmp ($8023.w)		; Jump indirect to ($8023.w) [Flow: jump]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora $B3B210.l		; OR accumulator with memory (long) $B3B210.l [Writes: Accumulator] [Flags: ZN]
	lda $3CE5.w		; Load $3CE5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $AA1EB4.l,X		; Logical OR long $AA1EB4.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	bit $02.b,X		; Test bits $02.b,X [Reads: Direct Page, X Index] [Flags: VNZ] [Flow: branch]
	and $B554.w		; Logical AND $B554.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	and $AF02.w,X		; AND accumulator with memory $AF02.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldx $B7.b,Y		; Load X register $B7.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	and $E503.w,Y		; AND accumulator with memory $E503.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $AF.b		; Subtract $AF.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	eor $2B.b		; Exclusive OR $2B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	xce		; Exchange carry bit to set emulation or native mode ; Exchange carry and emulation bits [Flags: C]
	jsl $4A00E5.l		; Jump to subroutine long $4A00E5.l [Writes: Stack Pointer] [Flow: call]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	bra L060311.b		; Branch always to L060311.b [Flow: branch]
	rol $00.b		; Rotate left $00.b [Reads: Direct Page] [Flags: ZCN]
	clv		; Clear overflow ; Clear overflow flag [Flags: V]
	rol $002C.w		; Rotate left $002C.w [Flags: ZCN]
	rol $4062.w,X		; Rotate left $4062.w,X [Reads: X Index] [Flags: ZCN]
	brk $42.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$0643.w		; Logical AND #$0643.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $4847.w,Y		; Load $4847.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $62, $BA, $B7		; Bank wrapping branch target ; Push effective relative address $62, $BA, $B7 [Writes: Stack Pointer]
	sty $63.b,X		; Store Y register $63.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	eor $62.b		; Exclusive OR $62.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $E0.b		; Logical shift right $E0.b [Reads: Direct Page] [Flags: ZCN]
	jsl $BB4946.l		; Jump to subroutine long $BB4946.l [Writes: Stack Pointer] [Flow: call]
	lda ($4B.b,X)		; Load accumulator ($4B.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and ($1D.b,S),Y		; AND accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($C5.b),Y		; AND accumulator with memory ($C5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($3D.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($3D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda [$53.b]		; Load accumulator (long) [$53.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $53A7.w,X		; AND accumulator with memory $53A7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $A7A7.w,X		; AND accumulator with memory $A7A7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
L060311:
	eor ($3D.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($3D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $42A5.w,X		; Rotate left $42A5.w,X [Reads: X Index] [Flags: ZCN]
	eor $DA46DB.l		; Exclusive OR accumulator with memory (long) $DA46DB.l [Writes: Accumulator] [Flags: ZN]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	lsr $DA.b		; Logical shift right $DA.b [Reads: Direct Page] [Flags: ZCN]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	lsr $DA.b		; Logical shift right $DA.b [Reads: Direct Page] [Flags: ZCN]
	sbc $05192B.l,X		; Subtract with carry (long,X) $05192B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora [$03.b],Y		; OR accumulator with memory (long indexed) [$03.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $2419.w,Y		; OR accumulator with memory $2419.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$01.b],Y		; OR accumulator with memory (long indexed) [$01.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $2319.w,Y		; OR accumulator with memory $2319.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$02.b],Y		; OR accumulator with memory (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $05.b,S		; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($22.b),Y		; OR accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0605.w,Y		; OR accumulator with memory $0605.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1900.w,Y		; OR accumulator with memory $1900.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $2207.w,Y		; OR accumulator with memory $2207.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $04.b		; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: ZCN]
	ora $0908.w,Y		; OR accumulator with memory $0908.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$19.b]		; OR accumulator with memory (long) [$19.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $19.b,S		; Exclusive OR accumulator with stack relative $19.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	asl $19.b		; Arithmetic shift left $19.b [Reads: Direct Page] [Flags: ZCN]
	jsl $190206.l		; Jump to subroutine long $190206.l [Writes: Stack Pointer] [Flow: call]
	brk $19.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $19040C.l		; Jump to subroutine long $19040C.l [Writes: Stack Pointer] [Flow: call]
	ora [$06.b],Y		; OR accumulator with memory (long indexed) [$06.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$17.b],Y		; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $191006.l		; Jump to subroutine long $191006.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	asl $19.b		; Arithmetic shift left $19.b [Reads: Direct Page] [Flags: ZCN]
	tsb $1901.w		; Test and set bits $1901.w [Reads: Accumulator] [Flags: Z]
	ora $1706.w,Y		; OR accumulator with memory $1706.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$19.b],Y		; OR accumulator with memory (long indexed) [$19.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $19.b		; Arithmetic shift left $19.b [Reads: Direct Page] [Flags: ZCN]
	ora $23.b,S		; OR accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $84.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $04.b,S		; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $23.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L060380.b		; Branch if plus to L060380.b [Flow: branch]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0319.w,Y		; OR accumulator with memory $0319.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
L060380:
	ora $2B.b,S		; OR accumulator with stack relative $2B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $1903.w		; Test and set bits $1903.w [Reads: Accumulator] [Flags: Z]
	tsb $0606.w		; Test and set bits $0606.w [Reads: Accumulator] [Flags: Z]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	cop $05.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$05.b]		; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $11.b		; Logical OR $11.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb DMALEN0B.w		; DMA 0 Transfer Bank ; Test and set bits DMALEN0B.w [Reads: Accumulator] [Flags: Z]
	ora [$0C.b]		; OR accumulator with memory (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $0C0607.l		; Jump to subroutine long $0C0607.l [Writes: Stack Pointer] [Flow: call]
	tsb $0707.w		; Test and set bits $0707.w [Reads: Accumulator] [Flags: Z]
	ora ($05.b),Y		; OR accumulator with memory ($05.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $2C.b		; Logical OR $2C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$02.b]		; OR accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($29.b),Y		; OR accumulator with memory ($29.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $190C.w		; Test and set bits $190C.w [Reads: Accumulator] [Flags: Z]
	ora [$05.b]		; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0C.b		; Logical OR $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0C27.w,Y		; OR accumulator with memory $0C27.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $04.b		; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($19.b,X)		; Logical OR ($19.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$11.b]		; OR accumulator with memory (long) [$11.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $0C.b		; Test bits $0C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	eor $02.b,S		; Exclusive OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $0C0E.w		; Test and set bits $0C0E.w [Reads: Accumulator] [Flags: Z]
	asl $06.b		; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZCN]
	ora $0819.w,Y		; OR accumulator with memory $0819.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$08.b]		; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $08.b		; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $07.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($22.b,X)		; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $0604.w		; Test and set bits $0604.w [Reads: Accumulator] [Flags: Z]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	ora $05.b,S		; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	cpx #$010B.w		; Compare #$010B.w with X register [Reads: X Index] [Flags: ZCN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZCN]
	cop $0C.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b		; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF.b		; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $A7.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $BC.b		; Store zero to $BC.b
	per L0666AB.w		; Push effective relative address L0666AB.w [Writes: Stack Pointer]
	cpy #$E705.w		; Compare #$E705.w with Y register [Reads: Y Index] [Flags: ZCN]
	and ($C9.b)		; AND accumulator with memory (indirect) ($C9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $A7.b		; Subtract $A7.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	cmp $44.b,S		; Compare accumulator (stack relative) $44.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZCN]
	lda $98.b,X		; Load $98.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($C4.b,X)		; Logical OR ($C4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $0C9822.l,X		; Load long $0C9822.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and ($C9.b)		; AND accumulator with memory (indirect) ($C9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lda $ABC5.w		; Load $ABC5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $C6		; Invalid branch target (bra L0603CD) ; Branch always to $80, $C6 [Flow: branch]
	ora $C8C7.w,X		; OR accumulator with memory $C8C7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $0A8022.l,X		; AND accumulator with memory (long,X) $0A8022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$4E71.w		; Compare #$4E71.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	rol $AD.b		; Rotate left $AD.b [Reads: Direct Page] [Flags: ZCN]
	lda $CA80.w		; Load $CA80.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $78.b,X		; Store accumulator to $78.b,X [Reads: Accumulator, X Index]
	wai		; Wait for interrupt
	jsl $CC0280.l		; Jump to subroutine long $CC0280.l [Writes: Stack Pointer] [Flow: call]
	trb $62CD.w		; Test and reset bits $62CD.w [Reads: Accumulator] [Flags: Z]
	lsr $AD04.w,X		; Logical shift right $AD04.w,X [Reads: X Index] [Flags: ZCN]
	lda $80.b,X		; Load $80.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $220D.w		; Test and set bits $220D.w [Reads: Accumulator] [Flags: Z]
	.db $80, $11		; Invalid branch target (bra L06043B) ; Branch always to $80, $11 [Flow: branch]
	cpy $1DA5.w		; Compare $1DA5.w with Y register [Reads: Y Index] [Flags: ZCN]
	and ($6A.b)		; AND accumulator with memory (indirect) ($6A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $8B66.w		; Decrement $8B66.w [Flags: ZN]
	lda $87B3.w		; Load $87B3.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $80CF10.l		; OR accumulator with memory (long) $80CF10.l [Writes: Accumulator] [Flags: ZN]
	cpy $A5E6.w		; Compare $A5E6.w with Y register [Reads: Y Index] [Flags: ZCN]
	jsl $D0081D.l		; Jump to subroutine long $D0081D.l [Writes: Stack Pointer] [Flow: call]
	ror $ADAB.w		; Rotate right $ADAB.w [Flags: ZCN]
	lda $DF1D.w		; Load $DF1D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$431D.w		; Logical AND #$431D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	stx $058F.w		; Store X register to $058F.w [Reads: X Index]
	ora $D11D.w,X		; OR accumulator with memory $D11D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($C9.b)		; Compare accumulator (indirect) ($C9.b) [Reads: Direct Page, Accumulator] [Flags: ZCN]
	cmp #$7A2B.w		; Compare #$7A2B.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	ora $D3.b,S		; OR accumulator with stack relative $D3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jmp ($A4A4.w,X)		; Jump indirect indexed to ($A4A4.w,X) [Reads: X Index] [Flow: jump]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	xce		; Exchange carry bit to set emulation or native mode ; Exchange carry and emulation bits [Flags: C]
	ora $1F.b		; Logical OR $1F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $E5.b,S		; Load accumulator (stack relative) $E5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ror $4380.w,X		; Rotate right $4380.w,X [Reads: X Index] [Flags: ZCN]
	.db $80, $7E		; Invalid branch target (bra L0604E3) ; Branch always to $80, $7E [Flow: branch]
	jsl $7E0680.l		; Jump to subroutine long $7E0680.l [Writes: Stack Pointer] [Flow: call]
	ror $3680.w,X		; Rotate right $3680.w,X [Reads: X Index] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sbc $E5.b		; Subtract $E5.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	rol $03.b		; Rotate left $03.b [Reads: Direct Page] [Flags: ZCN]
	eor $E5.b,S		; Exclusive OR accumulator with stack relative $E5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $0A.b		; Subtract $0A.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	and #$082C.w		; Logical AND #$082C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $81		; Invalid branch target (bra L0603FC) ; Branch always to $80, $81 [Flow: branch]
	pei ($49.b)		; Push effective indirect address ($49.b) [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $E5.b		; Subtract $E5.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sty $D5.b		; Store Y register to $D5.b [Reads: Y Index]
	sta $25.b,S		; Store accumulator (stack relative) $25.b,S [Reads: Accumulator, Stack Pointer]
	sty $06.b		; Store Y register to $06.b [Reads: Y Index]
	sta $22.b		; Store accumulator to $22.b [Reads: Accumulator]
	stz $D6.b,X		; Store zero to $D6.b,X [Reads: X Index]
	adc ($49.b,S),Y		; Add with carry (stack relative indirect indexed) ($49.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	per L060617.w		; Push effective relative address L060617.w [Writes: Stack Pointer]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	phb		; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	eor $5B.b,S		; Exclusive OR accumulator with stack relative $5B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sty $8D0E.w		; Store Y register to $8D0E.w [Reads: Y Index]
	and ($34.b,S),Y		; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp [$D8.b],Y		; Compare accumulator (long indexed) [$D8.b],Y [Reads: Direct Page, Accumulator, Y Index] [Flags: ZCN]
	adc [$5A.b],Y		; Add with carry (long indexed) [$5A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	eor ($3D.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($3D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda [$53.b]		; Load accumulator (long) [$53.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ora $1ECC.w,X		; OR accumulator with memory $1ECC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	per L061938.w		; Push effective relative address L061938.w [Writes: Stack Pointer]
	stx $1E6A.w		; Store X register to $1E6A.w [Reads: X Index]
	and ($C9.b)		; AND accumulator with memory (indirect) ($C9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	lsr $DA.b		; Logical shift right $DA.b [Reads: Direct Page] [Flags: ZCN]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	per L0621D0.w		; Push effective relative address L0621D0.w [Writes: Stack Pointer]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
L0604B5:
	lsr $5394.w,X		; Logical shift right $5394.w,X [Reads: X Index] [Flags: ZCN]
	ora $32FB.w,X		; OR accumulator with memory $32FB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$03FF.w		; Compare #$03FF.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	ora [$01.b]		; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0B4302.l		; OR accumulator with memory (long) $0B4302.l [Writes: Accumulator] [Flags: ZN]
	ora $060B.w,Y		; OR accumulator with memory $060B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $07.b		; Test and set bits $07.b [Reads: Accumulator] [Flags: Z]
	tsb $03.b		; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora [$01.b]		; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $19.b		; Logical AND $19.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $000419.l		; OR accumulator with memory (long) $000419.l [Writes: Accumulator] [Flags: ZN]
	ora ($19.b,X)		; Logical OR ($19.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0207.w,Y		; OR accumulator with memory $0207.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $19.b		; Test bits $19.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	ora $01.b,S		; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0F0F.w,Y		; OR accumulator with memory $0F0F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	rol $01.b		; Rotate left $01.b [Reads: Direct Page] [Flags: ZCN]
	ora $2403.w,Y		; OR accumulator with memory $2403.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1000.w,Y		; OR accumulator with memory $1000.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $192201.l		; Jump to subroutine long $192201.l [Writes: Stack Pointer] [Flow: call]
	tsb $01.b		; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	ora $1903.w,Y		; OR accumulator with memory $1903.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $22.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1001.w,Y		; OR accumulator with memory $1001.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $1924.w		; Test and set bits $1924.w [Reads: Accumulator] [Flags: Z]
	ora $04.b		; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $00.b		; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cop $22.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1000.w,Y		; OR accumulator with memory $1000.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $19.b		; Rotate left $19.b [Reads: Direct Page] [Flags: ZCN]
	tsb $01.b		; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	ora ($19.b,X)		; Logical OR ($19.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1A.b,X)		; Logical OR ($1A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $19.b,S		; AND accumulator with stack relative $19.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $19.b		; Test bits $19.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	jsl $070201.l		; Jump to subroutine long $070201.l [Writes: Stack Pointer] [Flow: call]
	ora [$1A.b]		; OR accumulator with memory (long) [$1A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $19.b,S		; AND accumulator with stack relative $19.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $19.b,S		; AND accumulator with stack relative $19.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $06.b		; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $07.b		; Test and set bits $07.b [Reads: Accumulator] [Flags: Z]
	ora ($22.b,X)		; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($19.b,X)		; Logical OR ($19.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bpl L0604B5.b		; Branch if plus to L0604B5.b [Flow: branch]
	brk $61.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$10.b]		; OR accumulator with memory (long) [$10.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0119.w,Y		; OR accumulator with memory $0119.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $09.b		; Test and set bits $09.b [Reads: Accumulator] [Flags: Z]
	ora ($06.b,X)		; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($19.b,X)		; Logical OR ($19.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $24		; Invalid branch target (bpl L060568) ; Branch if plus to $10, $24 [Flow: branch]
	ora $0403.w,Y		; OR accumulator with memory $0403.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$01.b]		; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $86.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $93.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $100619.l		; Jump to subroutine long $100619.l [Writes: Stack Pointer] [Flow: call]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsb $1A.b		; Test and set bits $1A.b [Reads: Accumulator] [Flags: Z]
	ora ($09.b,X)		; Logical OR ($09.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jsl $010019.l		; Jump to subroutine long $010019.l [Writes: Stack Pointer] [Flow: call]
	and $19.b,S		; AND accumulator with stack relative $19.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora [$09.b]		; OR accumulator with memory (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($09.b,X)		; Logical OR ($09.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $19.b,S		; AND accumulator with stack relative $19.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $19.b,S		; AND accumulator with stack relative $19.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $01.b		; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	ora $0104.w,Y		; OR accumulator with memory $0104.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$84.b]		; OR accumulator with memory (long) [$84.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $B1.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	stx $85.b		; Store X register to $85.b [Reads: X Index]
	brk $CC.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1A.b		; Logical OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0D0E.w		; Arithmetic shift left $0D0E.w [Flags: ZCN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $0123.w		; Logical OR $0123.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$01.b]		; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($19.b,X)		; Logical OR ($19.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsl $0B0301.l		; Jump to subroutine long $0B0301.l [Writes: Stack Pointer] [Flow: call]
	ora $0104.w,Y		; OR accumulator with memory $0104.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $935213.l,X		; Subtract with carry (long,X) $935213.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	and ($4F.b,X)		; Logical AND ($4F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lsr $5ED9.w,X		; Logical shift right $5ED9.w,X [Reads: X Index] [Flags: ZCN]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sta ($91.b,S),Y		; Store accumulator (stack relative indirect indexed) ($91.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer]
	and $D9C6.w,X		; AND accumulator with memory $D9C6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $2E.b		; Load $2E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jmp $4FAA93.l		; Jump long to $4FAA93.l [Flow: jump]
	adc $DB.b,S		; Add with carry (stack relative) $DB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cmp $C8E04A.l,X		; Compare accumulator (long,X) $C8E04A.l,X [Reads: Accumulator, X Index] [Flags: ZCN]
	ora $E12E.w,X		; OR accumulator with memory $E12E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 8
	sep #$64
	adc $0FE364.l		; Add with carry (long) $0FE364.l [Writes: Accumulator] [Flags: VCNZ]
	asl $E8.b		; Arithmetic shift left $E8.b [Reads: Direct Page] [Flags: ZCN]
	lda $EAE9AC.l		; Load long $EAE9AC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	rol $ECEB.w		; Rotate left $ECEB.w [Flags: ZCN]
	eor #$ED.b		; Exclusive OR #$ED.b with accumulator [Writes: Accumulator] [Flags: ZN]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	inc $E8EF.w		; Increment $E8EF.w [Flags: ZN]
	cpy $0622.w		; Compare $0622.w with Y register [Reads: Y Index] [Flags: ZCN]
	tsb $F0E8.w		; Test and set bits $F0E8.w [Reads: Accumulator] [Flags: Z]
	sbc ($08.b),Y		; Subtract with carry ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($5E.b)		; Subtract with carry (indirect) ($5E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($4F.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($4F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	cpx $E5.b		; Compare $E5.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	pea $F5C1.w		; Push absolute address $F5C1.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	eor $F5.b,S		; Exclusive OR accumulator with stack relative $F5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $06.b,X		; Increment memory $06.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	sbc [$8A.b],Y		; Subtract with carry (long indexed) [$8A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	cpx $03.b		; Compare $03.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	sta $4F1D.w,Y		; Store accumulator to $4F1D.w,Y [Reads: Accumulator, Y Index]
	per L0607E4.w		; Push effective relative address L0607E4.w [Writes: Stack Pointer]
	cpy $FB.b		; Compare $FB.b with Y register [Reads: Direct Page, Y Index] [Flags: ZCN]
	eor $FC.b,S		; Exclusive OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $F706.w,X		; Subtract with carry $F706.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	inc $E4DB.w,X		; Increment memory $E4DB.w,X [Reads: X Index] [Flags: ZN]
	sbc $8300A0.l,X		; Subtract with carry (long,X) $8300A0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $14.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	trb $06.b		; Test and reset bits $06.b [Reads: Accumulator] [Flags: Z]
	jsr ($E603.w,X)		; Jump to subroutine indirect indexed ($E603.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	jsr $0173.w		; Jump to subroutine at $0173.w [Writes: Stack Pointer] [Flow: call]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	bit $83.b		; Test bits $83.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	brk $24.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $A6.b		; Logical OR $A6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b,X)		; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sty $52.b		; Store Y register to $52.b [Reads: Y Index]
	sta ($62.b,S),Y		; Store accumulator (stack relative indirect indexed) ($62.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer]
L060617:
	ora ($12.b,X)		; Logical OR ($12.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpy $0206.w		; Compare $0206.w with Y register [Reads: Y Index] [Flags: ZCN]
	sbc $DDCCE8.l		; Subtract with carry (long) $DDCCE8.l [Writes: Accumulator] [Flags: VCNZ]
	dec $8A0D.w,X		; Decrement memory $8A0D.w,X [Reads: X Index] [Flags: ZN]
	sbc $93.b,S		; Subtract stack-relative $93.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	.db $82, $F4, $C1		; Bank wrapping branch target ; Branch always long to $82, $F4, $C1 [Flow: branch]
	sbc $F6.b,X		; Subtract $F6.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	asl $83.b		; Arithmetic shift left $83.b [Reads: Direct Page] [Flags: ZCN]
	brk $93.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	inc $E7.b		; Increment $E7.b [Reads: Direct Page] [Flags: ZN]
	sbc [$8A.b],Y		; Subtract with carry (long indexed) [$8A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	jmp $FA4F93.l		; Jump long to $FA4F93.l [Flow: jump]
	cpy $FC.b		; Compare $FC.b with Y register [Reads: Direct Page, Y Index] [Flags: ZCN]
	sbc $8306.w,X		; Subtract with carry $8306.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $A3.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$E8.b]		; OR accumulator with memory (long) [$E8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $8A04.w		; Compare $8A04.w with Y register [Reads: Y Index] [Flags: ZCN]
	ora $93.b		; Logical OR $93.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clv		; Clear overflow ; Clear overflow flag [Flags: V]
	asl $87.b		; Arithmetic shift left $87.b [Reads: Direct Page] [Flags: ZCN]
	brk $64.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	per L060954.w		; Push effective relative address L060954.w [Writes: Stack Pointer]
	dec $93E3.w		; Decrement $93E3.w [Flags: ZN]
	clv		; Clear overflow ; Clear overflow flag [Flags: V]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $73.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$06.b]		; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$8A.b],Y		; Subtract with carry (long indexed) [$8A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	eor ($52.b)		; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($C9.b,S),Y		; Store accumulator (stack relative indirect indexed) ($C9.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer]
	ora #$83.b		; Logical OR #$83.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $35.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $F7.b		; Arithmetic shift left $F7.b [Reads: Direct Page] [Flags: ZCN]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc [$52.b],Y		; Add with carry (long indexed) [$52.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sta ($0A.b,S),Y		; Store accumulator (stack relative indirect indexed) ($0A.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer]
	bit $543D.w,X		; Test bits $543D.w,X [Reads: X Index] [Flags: VNZ] [Flow: branch]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and $06.b,S		; AND accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $D9.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	cmp $1D06.w,X		; Compare accumulator $1D06.w,X [Reads: X Index] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec A		; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lsr $FB06.w,X		; Logical shift right $FB06.w,X [Reads: X Index] [Flags: ZCN]
	lsr $0622.w,X		; Logical shift right $0622.w,X [Reads: X Index] [Flags: ZCN]
	ora $5E.b,S		; OR accumulator with stack relative $5E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc [$8A.b],Y		; Subtract with carry (long indexed) [$8A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	adc [$FF.b],Y		; Add with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	and [$18.b]		; AND accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $1A.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	bit $1A.b		; Test bits $1A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	ora ($18.b,X)		; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	and $001A.w		; Logical AND $001A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	and #$1A.b		; Logical AND #$1A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $1A,$18		; Move block positive $1A,$18 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cop $18.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b,S		; Exclusive OR accumulator with stack relative $1A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	asl $23.b		; Arithmetic shift left $23.b [Reads: Direct Page] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	cop $1A.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $1A24.w,Y		; OR accumulator with memory $1A24.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($18.b,X)		; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	jsl $18241A.l		; Jump to subroutine long $18241A.l [Writes: Stack Pointer] [Flow: call]
	brk $19.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $18.b		; Test bits $18.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	ora ($19.b,X)		; Logical OR ($19.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $18.b,S		; AND accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	asl $0B04.w		; Arithmetic shift left $0B04.w [Flags: ZCN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$26.b]		; OR accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	adc $021A23.l,X		; Add long $021A23.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	cop $1A.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	and $1A.b,S		; AND accumulator with stack relative $1A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $18.b,S		; OR accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsb $1A24.w		; Test and set bits $1A24.w [Reads: Accumulator] [Flags: Z]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	and $1A.b,S		; AND accumulator with stack relative $1A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $18.b,S		; OR accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $84.b,S		; OR accumulator with stack relative $84.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $52.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b,X)		; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $1A24.w		; Test and set bits $1A24.w [Reads: Accumulator] [Flags: Z]
	jsl $1A010B.l		; Jump to subroutine long $1A010B.l [Writes: Stack Pointer] [Flow: call]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jsl $1A0F0B.l		; Jump to subroutine long $1A0F0B.l [Writes: Stack Pointer] [Flow: call]
	brk $0C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $1A1A.w		; Test and set bits $1A1A.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0C.b		; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: ZCN]
	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $001A.w		; Test and set bits $001A.w [Reads: Accumulator] [Flags: Z]
	ora [$22.b]		; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $1A02.w		; Test and set bits $1A02.w [Reads: Accumulator] [Flags: Z]
	cop $06.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $02.b,S		; Exclusive OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cop $1A.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $0C0903.l		; Jump to subroutine long $0C0903.l [Writes: Stack Pointer] [Flow: call]
L060726:
	tsb $0200.w		; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	tsb $01.b		; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	ora ($0C.b,X)		; Logical OR ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $2206.w		; Test and set bits $2206.w [Reads: Accumulator] [Flags: Z]
	ora ($00.b,X)		; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $01FF.w		; Test and set bits $01FF.w [Reads: Accumulator] [Flags: Z]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $3E25.w,X		; Load $3E25.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$0C.b		; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0ED6.w		; Logical OR $0ED6.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $11100E.l		; OR accumulator with memory (long) $11100E.l [Writes: Accumulator] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc $12.b,S		; Add with carry (stack relative) $12.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	cop $13.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $15.b,X		; Arithmetic shift left $15.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	adc $17.b,S		; Add with carry (stack relative) $17.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	ora $19.b,S		; OR accumulator with stack relative $19.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $6960.w		; Test and reset bits $6960.w [Reads: Accumulator] [Flags: Z]
	ora $7905.w,X		; OR accumulator with memory $7905.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $5727.w,X		; Subtract with carry $5727.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and #$06.b		; Logical AND #$06.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $3283.w		; Logical shift right $3283.w [Flags: ZCN]
	and ($53.b,S),Y		; AND accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $60.b,X		; Test bits $60.b,X [Reads: Direct Page, X Index] [Flags: VNZ] [Flow: branch]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and $0F.b,X		; Logical AND $0F.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $3E53.w		; Logical shift right $3E53.w [Flags: ZCN]
	and $607E53.l,X		; AND accumulator with memory (long,X) $607E53.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($40.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($40.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($2B.b,X)		; Exclusive OR accumulator with memory ($2B.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $41		; opcode wdm $41 ; Reserved instruction
	eor $42.b,S		; Exclusive OR accumulator with stack relative $42.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	mvp $00,$83		; Move block positive $00,$83 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl $45.b		; Arithmetic shift left $45.b [Reads: Direct Page] [Flags: ZCN]
	lsr $8C66.w		; Logical shift right $8C66.w [Flags: ZCN]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sbc $2414.w,X		; Subtract with carry $2414.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ora $33.b,S		; OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc [$3E.b]		; Add with carry (long) [$3E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	and $624663.l,X		; AND accumulator with memory (long,X) $624663.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$02.b		; Exclusive OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $9722.w		; Jump to $9722.w [Flow: jump]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda #$3E.b		; Load #$3E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	and $4D3E5F.l,X		; AND accumulator with memory (long,X) $4D3E5F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $4FF8.w		; Logical shift right $4FF8.w [Flags: ZCN]
	.db $50, $F8		; Invalid branch target (bvc L060797) ; Branch if overflow clear to $50, $F8 [Flow: branch]
	tsb $66.b		; Test and set bits $66.b [Reads: Accumulator] [Flags: Z]
	eor ($0A.b),Y		; Exclusive OR accumulator with memory ($0A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($58.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($58.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $5A4E.w,Y		; Exclusive OR accumulator with memory $5A4E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	jmp $535D27.l		; Jump long to $535D27.l [Flow: jump]
	adc $5E.b,S		; Add with carry (stack relative) $5E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	ora $C7.b,S		; OR accumulator with stack relative $C7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($62.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($62.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $6364.w		; Increment $6364.w [Flags: ZN]
	cop $27.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	adc [$62.b]		; Add with carry (long) [$62.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	lsr $690A.w,X		; Logical shift right $690A.w,X [Reads: X Index] [Flags: ZCN]
	and $6A3F.w,X		; AND accumulator with memory $6A3F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
L0607C2:
	cmp $6C6B.w,Y		; Compare accumulator $6C6B.w,Y [Reads: Y Index] [Flags: ZCN]
	and ($6D.b,X)		; Logical AND ($6D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ror $6827.w		; Rotate right $6827.w [Flags: ZCN]
	adc $DFD901.l		; Add with carry (long) $DFD901.l [Writes: Accumulator] [Flags: VCNZ]
	.db $62, $78, $01		; Invalid branch target (per L060949) ; Push effective relative address $62, $78, $01 [Writes: Stack Pointer]
	adc [$7B.b]		; Add with carry (long) [$7B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	jsl $4F01F8.l		; Jump to subroutine long $4F01F8.l [Writes: Stack Pointer] [Flow: call]
	bvc L0607FB.b		; Branch if overflow clear to L0607FB.b [Flow: branch]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	ora $E51D7C.l		; OR accumulator with memory (long) $E51D7C.l [Writes: Accumulator] [Flags: ZN]
	inc $7D.b		; Increment $7D.b [Reads: Direct Page] [Flags: ZN]
	ror $B21D.w,X		; Rotate right $B21D.w,X [Reads: X Index] [Flags: ZCN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
L0607E4:
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	mvp $EC,$44		; Move block positive $EC,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	adc $62961D.l,X		; Add long $62961D.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	cpx $8019.w		; Compare $8019.w with X register [Reads: X Index] [Flags: ZCN]
	cmp ($6A.b,S),Y		; Compare accumulator (stack relative indirect indexed) ($6A.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer] [Flags: ZCN]
	sta $4C5B.w		; Store accumulator to $4C5B.w [Reads: Accumulator]
	jmp $4B4B81.l		; Jump long to $4B4B81.l [Flow: jump]
	.db $82, $4C, $83		; Bank wrapping branch target ; Branch always long to $82, $4C, $83 [Flow: branch]
L0607FB:
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sta $E5D9.w		; Store accumulator to $E5D9.w [Reads: Accumulator]
	sbc ($B2.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($B2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sta [$EA.b],Y		; Store accumulator (long indexed) [$EA.b],Y [Reads: Direct Page, Accumulator, Y Index]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	pea $A7F5.w		; Push absolute address $A7F5.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	.db $62, $EA, $00		; Invalid branch target (per L0608F5) ; Push effective relative address $62, $EA, $00 [Writes: Stack Pointer]
	inc $FF.b,X		; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	asl $05.b,X		; Arithmetic shift left $05.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $181A.w,Y		; OR accumulator with memory $181A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	ora $19.b		; Logical OR $19.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	ora $1A.b		; Logical OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $1A.b		; Logical OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($19.b,X)		; Logical OR ($19.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $1818.w,Y		; OR accumulator with memory $1818.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1A.b		; Logical OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	ora #$00.b		; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	and $1A.b		; Logical AND $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	jsl $18001A.l		; Jump to subroutine long $18001A.l [Writes: Stack Pointer] [Flow: call]
	rol $1A.b		; Rotate left $1A.b [Reads: Direct Page] [Flags: ZCN]
	ora $07.b,S		; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($28.b,X)		; Logical OR ($28.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cop $12.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZCN]
	jsl $01001A.l		; Jump to subroutine long $01001A.l [Writes: Stack Pointer] [Flow: call]
	bit $18.b		; Test bits $18.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	ora ($1A.b,X)		; Logical OR ($1A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$22.b]		; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $12.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1A.b,S		; AND accumulator with stack relative $1A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $1A.b		; Rotate left $1A.b [Reads: Direct Page] [Flags: ZCN]
	ora $00.b,S		; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $0D.b		; Arithmetic shift left $0D.b [Reads: Direct Page] [Flags: ZCN]
	asl $23.b		; Arithmetic shift left $23.b [Reads: Direct Page] [Flags: ZCN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	jsl $020B1A.l		; Jump to subroutine long $020B1A.l [Writes: Stack Pointer] [Flow: call]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0D07.w		; Logical OR $0D07.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $06.b		; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZCN]
	cop $1A.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $2301.w,Y		; OR accumulator with memory $2301.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $0D.b,S		; AND accumulator with stack relative $0D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $07.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $2306.w		; Logical OR $2306.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsb $01.b		; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cop $1A.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $0D.b,S		; AND accumulator with stack relative $0D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($24.b,X)		; Logical OR ($24.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $2206.w		; Logical OR $2206.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0602.w		; Logical OR $0602.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $2602.w		; Logical OR $2602.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $0D2206.l		; Jump to subroutine long $0D2206.l [Writes: Stack Pointer] [Flow: call]
	ora $06.b,S		; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $12.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($24.b)		; OR accumulator with memory (indirect) ($24.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $0D2206.l		; Jump to subroutine long $0D2206.l [Writes: Stack Pointer] [Flow: call]
	brk $06.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $020B1A.l		; Jump to subroutine long $020B1A.l [Writes: Stack Pointer] [Flow: call]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b,X)		; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$00.b]		; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($27.b,X)		; Logical OR ($27.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $03.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b,X)		; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$02.b		; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($09.b,X)		; Logical OR ($09.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $22.b		; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($22.b,X)		; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $01.b,S		; Exclusive OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $0D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	and $E0FF.w,X		; AND accumulator with memory $E0FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	sbc $C7841F.l,X		; Subtract with carry (long,X) $C7841F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $FFC80A.l,X		; Subtract with carry (long,X) $FFC80A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $86.b		; Store accumulator to $86.b [Reads: Accumulator]
	sbc $884887.l,X		; Subtract with carry (long,X) $884887.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc ($29.b),Y		; Add with carry ($29.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	and #$C7.b		; Logical AND #$C7.b with accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $8A1089.l,X		; Subtract with carry (long,X) $8A1089.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ldx $A9.b		; Load $A9.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	sbc $8B3E3D.l,X		; Subtract with carry (long,X) $8B3E3D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sty $2AFF.w		; Store Y register to $2AFF.w [Reads: Y Index]
	trb $0A.b		; Test and reset bits $0A.b [Reads: Accumulator] [Flags: Z]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $E8978D.l,X		; Subtract with carry (long,X) $E8978D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	cli		; Clear interupt ; Clear interrupt disable flag [Flags: I]
	stx $6275.w		; Store X register to $6275.w [Reads: X Index]
	sta $477101.l		; Store accumulator (long) $477101.l [Reads: Accumulator]
	per L060CA5.w		; Push effective relative address L060CA5.w [Writes: Stack Pointer]
	lda $95.b,X		; Load $95.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	stx $86.b,Y		; Store X register $86.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	adc $97.b,S		; Add with carry (stack relative) $97.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	ora $04.b,S		; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	txy		; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	stz $6671.w		; Store zero to $6671.w
	sta $700F.w,X		; Store accumulator to $700F.w,X [Reads: Accumulator, X Index]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stx $92.b,Y		; Store X register $92.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ora $51A4.w,X		; OR accumulator with memory $51A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc ($5F.b),Y		; Add with carry ($5F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	bvc L06097E.b		; Branch if overflow clear to L06097E.b [Flow: branch]
	rol $A53E.w,X		; Rotate left $A53E.w,X [Reads: X Index] [Flags: ZCN]
	asl $22.b		; Arithmetic shift left $22.b [Reads: Direct Page] [Flags: ZCN]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	brk $F6.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $A6.b,S		; Add with carry (stack relative) $A6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	brk $71.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $AA, $07		; Invalid branch target (per L0610E6) ; Push effective relative address $62, $AA, $07 [Writes: Stack Pointer]
	.db $90, $90		; Invalid branch target (bcc L0608CE) ; Branch if carry clear to $90, $90 [Flow: branch]
	lda $1DAE.w		; Load $1DAE.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lsr $AF63.w,X		; Logical shift right $AF63.w,X [Reads: X Index] [Flags: ZCN]
	ora ($71.b,X)		; Logical OR ($71.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $0FB362.l,X		; AND accumulator with memory (long,X) $0FB362.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	ldx $45.b,Y		; Load X register $45.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	trb $1DAC.w		; Test and reset bits $1DAC.w [Reads: Accumulator] [Flags: Z]
	adc $68.b		; Add $68.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
L060954:
	.db $42, $B7		; opcode wdm $B7 ; Reserved instruction
	asl $9071.w		; Arithmetic shift left $9071.w [Flags: ZCN]
	clv		; Clear overflow ; Clear overflow flag [Flags: V]
	ldy $B9.b,X		; Load Y register $B9.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: ZN]
	adc $23.b,S		; Add with carry (stack relative) $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda ($27.b,S),Y		; Load accumulator (stack relative indirect indexed) ($27.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $51BBBA.l		; Add with carry (long) $51BBBA.l [Writes: Accumulator] [Flags: VCNZ]
	ldy $F871.w,X		; Load Y register $F871.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $BE5B.w,X		; Load $BE5B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $2B.b,S		; Add with carry (stack relative) $2B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	ora ($58.b,X)		; Logical OR ($58.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $62.b		; Add $62.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	lda $C25D04.l,X		; Load long $C25D04.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc ($18.b),Y		; Add with carry ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	lsr $3162.w,X		; Logical shift right $3162.w,X [Reads: X Index] [Flags: ZCN]
	cop $65.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $6F.b,X		; Test bits $6F.b,X [Reads: Direct Page, X Index] [Flags: VNZ] [Flow: branch]
L06097E:
	ror $C3.b		; Rotate right $C3.b [Reads: Direct Page] [Flags: ZCN]
	ora $71.b,S		; OR accumulator with stack relative $71.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stz $65.b		; Store zero to $65.b
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $62, $3B, $0C		; Invalid branch target (per L0615C3) ; Push effective relative address $62, $3B, $0C [Writes: Stack Pointer]
	adc ($4F.b)		; Add with carry (indirect) ($4F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	stx $96.b,Y		; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	wai		; Wait for interrupt
	adc $A3.b,X		; Add $A3.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	cpy $6E71.w		; Compare $6E71.w with Y register [Reads: Y Index] [Flags: ZCN]
	adc $456272.l		; Add with carry (long) $456272.l [Writes: Accumulator] [Flags: VCNZ]
	ora ($6A.b)		; OR accumulator with memory (indirect) ($6A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $CE4E.w		; Compare $CE4E.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	lsr $F8F8.w		; Logical shift right $F8F8.w [Flags: ZCN]
	cmp $C24471.l		; Compare accumulator (long) $C24471.l [Reads: Accumulator] [Flags: ZCN]
	trb $371D.w		; Test and reset bits $371D.w [Reads: Accumulator] [Flags: Z]
	and #$1C.b		; Logical AND #$1C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $249F.w,X		; OR accumulator with memory $249F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $D003.w,X		; OR accumulator with memory $D003.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc ($4B.b),Y		; Add with carry ($4B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	brl L0655DB.w		; Branch always long to L0655DB.w [Flow: branch]
	ora $CC.b,S		; OR accumulator with stack relative $CC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp ($FC.b,S),Y		; Compare accumulator (stack relative indirect indexed) ($FC.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer] [Flags: ZCN]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	per L060B8D.w		; Push effective relative address L060B8D.w [Writes: Stack Pointer]
	nop		; No operation
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $62, $D4, $09		; Invalid branch target (per L061395) ; Push effective relative address $62, $D4, $09 [Writes: Stack Pointer]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $EB.b,X		; Compare accumulator $EB.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	cmp [$55.b],Y		; Compare accumulator (long indexed) [$55.b],Y [Reads: Direct Page, Accumulator, Y Index] [Flags: ZCN]
	cld		; Clear decimal ; Clear decimal flag [Flags: D]
	cmp $DAEB.w,Y		; Compare accumulator $DAEB.w,Y [Reads: Y Index] [Flags: ZCN]
	sbc $0D0D0A.l,X		; Subtract with carry (long,X) $0D0D0A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora ($0D.b,X)		; Logical OR ($0D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $08.b		; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $84.b		; Test and set bits $84.b [Reads: Accumulator] [Flags: Z]
	brk $05.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $0D.b		; Test bits $0D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $05.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0B.b,S		; OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0B0A.w		; Logical OR $0B0A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $07.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $04.b		; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: ZCN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $0A.b,S		; OR accumulator with stack relative $0A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $2801.w		; Logical OR $2801.w with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $0D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	rol $1A03.w		; Rotate left $1A03.w [Flags: ZCN]
	tsb $1A0C.w		; Test and set bits $1A0C.w [Reads: Accumulator] [Flags: Z]
	jsl $1A220C.l		; Jump to subroutine long $1A220C.l [Writes: Stack Pointer] [Flow: call]
L060A00:
	ora ($08.b,X)		; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsl $01090D.l		; Jump to subroutine long $01090D.l [Writes: Stack Pointer] [Flow: call]
	ora [$03.b]		; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $1A.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $1A.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $83.b		; Test and set bits $83.b [Reads: Accumulator] [Flags: Z]
	brk $2D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0D.b		; Logical OR $0D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora ($07.b,X)		; Logical OR ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $06.b		; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	jsl $1A0A00.l		; Jump to subroutine long $1A0A00.l [Writes: Stack Pointer] [Flow: call]
	brk $1A.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0808.w		; Logical OR $0808.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $1A1A.w		; Test and set bits $1A1A.w [Reads: Accumulator] [Flags: Z]
	ora $07.b,S		; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $1A0300.l		; Jump to subroutine long $1A0300.l [Writes: Stack Pointer] [Flow: call]
	asl $04.b		; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: ZCN]
	cop $83.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1A.b		; Logical OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $030D.w		; Logical OR $030D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $251A.w		; Logical OR $251A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0083.w		; Logical OR $0083.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp ($0104.w)		; Jump indirect to ($0104.w) [Flow: jump]
	ora $04.b,S		; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $1A010D.l		; Jump to subroutine long $1A010D.l [Writes: Stack Pointer] [Flow: call]
	ora $0022.w		; Logical OR $0022.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpx #$0121.w		; Compare #$0121.w with X register [Reads: X Index] [Flags: ZCN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($03.b,X)		; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($11.b),Y		; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $17.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($08.b,X)		; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0D.b,S		; OR accumulator with stack relative $0D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0101.w		; Logical OR $0101.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $16.b,X		; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0B.b,S		; OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1A1A.w		; Logical OR $1A1A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($22.b,X)		; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0C19.w		; Logical OR $0C19.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($08.b,X)		; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($03.b,X)		; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $00.b		; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZCN]
	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $020D.w		; Logical OR $020D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $010D.w		; Logical OR $010D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0702.w		; Logical OR $0702.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $070D.w		; Logical OR $070D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$03.b]		; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $25.b,S		; OR accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $240D.w		; Logical OR $240D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$24.b]		; OR accumulator with memory (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $05.b,S		; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($0B.b,X)		; Logical OR ($0B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $2401.w		; Logical OR $2401.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0324.w		; Logical OR $0324.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $58570A.l,X		; Subtract with carry (long,X) $58570A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	eor ($E3.b,X)		; Exclusive OR accumulator with memory ($E3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	eor $DBDA.w,Y		; Exclusive OR accumulator with memory $DBDA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $DA.b		; Logical shift right $DA.b [Reads: Direct Page] [Flags: ZCN]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	lsr $84.b		; Logical shift right $84.b [Reads: Direct Page] [Flags: ZCN]
	brk $05.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($5A.b,X)		; Logical OR ($5A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor [$62.b],Y		; Exclusive OR accumulator with memory (long indexed) [$62.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	ora $A1.b		; Logical OR $A1.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp L06214E.w		; Jump to L06214E.w [Flow: jump]
	jmp $844E.w		; Jump to $844E.w [Flow: jump]
	brk $15.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$55.b		; Logical OR #$55.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $6041.w,X		; Logical shift right $6041.w,X [Reads: X Index] [Flags: ZCN]
	and $53A7.w,X		; AND accumulator with memory $53A7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $53A7.w,X		; AND accumulator with memory $53A7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	bit $0F.b		; Test bits $0F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	adc $11.b,S		; Add with carry (stack relative) $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	sbc $A4.b,S		; Subtract stack-relative $A4.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	lda $A4AE.w		; Load $A4AE.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $A4AE.w		; Load $A4AE.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $59AE.w		; Load $59AE.w into accumulator [Writes: Accumulator] [Flags: ZN]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	bmi L060AE8.b		; Branch if minus to L060AE8.b [Flow: branch]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	.db $42, $42		; opcode wdm $42 ; Reserved instruction
L060AE8:
	jmp.w [$4222]		; Jump long indirect [$4222] [Flow: jump]
	.db $62, $DD, $18		; Invalid branch target (per L0623CB) ; Push effective relative address $62, $DD, $18 [Writes: Stack Pointer]
	lda ($4C.b,X)		; Load accumulator ($4C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	stz $65.b		; Store zero to $65.b
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	sbc $74.b,S		; Subtract stack-relative $74.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	cmp $E01D.w,Y		; Compare accumulator $E01D.w,Y [Reads: Y Index] [Flags: ZCN]
	dec $1DE1.w,X		; Decrement memory $1DE1.w,X [Reads: X Index] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	bit $A73D.w,X		; Test bits $A73D.w,X [Reads: X Index] [Flags: VNZ] [Flow: branch]
	eor ($9C.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($9C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jmp ($E341.w)		; Jump indirect to ($E341.w) [Flow: jump]
	stz $03.b,X		; Store zero to $03.b,X [Reads: X Index]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	jsl $E2011D.l		; Jump to subroutine long $E2011D.l [Writes: Stack Pointer] [Flow: call]
	ora $0083.w,X		; OR accumulator with memory $0083.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $04.b,S		; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx $E5.b		; Compare $E5.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	sta $74.b,X		; Store accumulator to $74.b,X [Reads: Accumulator, X Index]
	jsl $E20F1D.l		; Jump to subroutine long $E20F1D.l [Writes: Stack Pointer] [Flow: call]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lda $E7E6DE.l,X		; Load long $E7E6DE.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	jmp L0600E8.w		; Jump to L0600E8.w [Flow: jump]
	adc [$9D.b],Y		; Add with carry (long indexed) [$9D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $82, $E9, $60		; Invalid branch target (brl L066C10) ; Branch always long to $82, $E9, $60 [Flow: branch]
	adc ($22.b),Y		; Add with carry ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	stz $09.b,X		; [PATTERN: Memory clearing operation] Store zero to $09.b,X [Reads: X Index]
	sty $EA.b		; Store Y register to $EA.b [Reads: Y Index]
	bit #$52.b		; Test bits #$52.b with accumulator [Reads: Accumulator] [Flags: Z]
	eor ($F8.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($F8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stz $A888.w		; Store zero to $A888.w
	sta [$62.b],Y		; Store accumulator (long indexed) [$62.b],Y [Reads: Direct Page, Accumulator, Y Index]
	phb		; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora ($EB.b,X)		; Logical OR ($EB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	stx $1D22.w		; Store X register to $1D22.w [Reads: X Index]
	cpx #$423E.w		; Compare #$423E.w with X register [Reads: X Index] [Flags: ZCN]
	eor $BBE5DB.l		; Exclusive OR accumulator with memory (long) $BBE5DB.l [Writes: Accumulator] [Flags: ZN]
	cpx $6161.w		; Compare $6161.w with X register [Reads: X Index] [Flags: ZCN]
	cop $03.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($61.b,X)		; Add with carry ($61.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	jmp.w [$B2ED]		; Jump long indirect [$B2ED] [Flow: jump]
	.db $50, $EE		; Invalid branch target (bvc L060B3D) ; Branch if overflow clear to $50, $EE [Flow: branch]
	lsr $5C49.w		; Logical shift right $5C49.w [Flags: ZCN]
	sta $229A.w,Y		; Store accumulator to $229A.w,Y [Reads: Accumulator, Y Index]
	jsl $226160.l		; Jump to subroutine long $226160.l [Writes: Stack Pointer] [Flow: call]
	jsl $8EDCB1.l		; Jump to subroutine long $8EDCB1.l [Writes: Stack Pointer] [Flow: call]
	sbc $B758F0.l		; Subtract with carry (long) $B758F0.l [Writes: Accumulator] [Flags: VCNZ]
	sta $60E6A0.l,X		; Store accumulator (long,X) $60E6A0.l,X [Reads: Accumulator, X Index]
	and $1E.b,X		; Logical AND $1E.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $1D6A.w,Y		; Compare accumulator $1D6A.w,Y [Reads: Y Index] [Flags: ZCN]
	lsr $B1.b,X		; Logical shift right $B1.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	lda ($A5.b,X)		; Load accumulator ($A5.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $A5.b		; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $A6.b		; Arithmetic shift left $A6.b [Reads: Direct Page] [Flags: ZCN]
	cmp ($C6.b)		; Compare accumulator (indirect) ($C6.b) [Reads: Direct Page, Accumulator] [Flags: ZCN]
	lda [$A8.b]		; Load accumulator (long) [$A8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$44.b],Y		; Store accumulator (long indexed) [$44.b],Y [Reads: Direct Page, Accumulator, Y Index]
	mvp $56,$C2		; Move block positive $56,$C2 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsx		; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	and $E5.b,S		; AND accumulator with stack relative $E5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $06.b,S		; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $A6.b		; Arithmetic shift left $A6.b [Reads: Direct Page] [Flags: ZCN]
	lda #$24.b		; Load #$24.b into accumulator [Writes: Accumulator] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ora ($4D.b,X)		; Logical OR ($4D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	dec $24.b		; Decrement $24.b [Reads: Direct Page] [Flags: ZN]
	mvp $06,$02		; Move block positive $06,$02 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
L060B8D:
	eor ($06.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $06.b,S		; Exclusive OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora $AB.b,S		; OR accumulator with stack relative $AB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($A6.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($A6.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda #$24.b		; Load #$24.b into accumulator [Writes: Accumulator] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sbc $080406.l,X		; Subtract with carry (long,X) $080406.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $08.b		; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $23.b		; Test and set bits $23.b [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsl $00870D.l		; Jump to subroutine long $00870D.l [Writes: Stack Pointer] [Flow: call]
	ora ($08.b,X)		; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($08.b,X)		; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0D.b,X)		; Logical OR ($0D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0112.w		; Logical OR $0112.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($88.b,X)		; Logical OR ($88.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $0F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0D.b		; Test and set bits $0D.b [Reads: Accumulator] [Flags: Z]
	tsb $06.b		; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	tsb $02.b		; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	jsl $08250D.l		; Jump to subroutine long $08250D.l [Writes: Stack Pointer] [Flow: call]
	brk $1A.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $02.b,S		; AND accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $0103.w		; Test and set bits $0103.w [Reads: Accumulator] [Flags: Z]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $010D.w		; Logical OR $010D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $1A.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $16.b		; Logical OR $16.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $1A4301.l		; Jump to subroutine long $1A4301.l [Writes: Stack Pointer] [Flow: call]
	ora ($0E.b,X)		; Logical OR ($0E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $0402.w		; Logical OR $0402.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $16.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $06.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($1A.b),Y		; OR accumulator with memory ($1A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1A.b,S		; OR accumulator with stack relative $1A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $01230D.l		; Jump to subroutine long $01230D.l [Writes: Stack Pointer] [Flow: call]
	tsb $00.b		; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $09.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $230D.w		; Logical OR $230D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($0D.b),Y		; OR accumulator with memory ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $040C.w		; Logical OR $040C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($1A.b,X)		; Logical OR ($1A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$03.b]		; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $0D.b		; Arithmetic shift left $0D.b [Reads: Direct Page] [Flags: ZCN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($08.b,X)		; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsl $000504.l		; Jump to subroutine long $000504.l [Writes: Stack Pointer] [Flow: call]
	ora ($05.b,X)		; Logical OR ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $03.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	eor $1B.b		; Exclusive OR $1B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $0408.w		; Arithmetic shift left $0408.w [Flags: ZCN]
	tsb $01.b		; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	ora $06.b,S		; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0D.b,S		; OR accumulator with stack relative $0D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1B08.w		; Logical OR $1B08.w with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $0822.w		; Logical OR $0822.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jsl $0D0E0C.l		; Jump to subroutine long $0D0E0C.l [Writes: Stack Pointer] [Flow: call]
	ora $0D1B.w		; Logical OR $0D1B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $04.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $0405.w		; Test and set bits $0405.w [Reads: Accumulator] [Flags: Z]
	cop $62.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $01.b		; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	ora $22.b,S		; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1B08.w		; Logical OR $1B08.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $04.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $06.b,S		; AND accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $01.b,S		; AND accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cop $03.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b,X)		; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0D.b,S		; OR accumulator with stack relative $0D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZCN]
	brk $25.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($0C.b,X)		; Logical OR ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $00.b		; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $03.b		; Logical AND $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $06010D.l		; Jump to subroutine long $06010D.l [Writes: Stack Pointer] [Flow: call]
	asl $24.b		; Arithmetic shift left $24.b [Reads: Direct Page] [Flags: ZCN]
	brk $FF.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$462F.w		; Compare #$462F.w with X register [Reads: X Index] [Flags: ZCN]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	lsr $DA.b		; Logical shift right $DA.b [Reads: Direct Page] [Flags: ZCN]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	lsr $DA.b		; Logical shift right $DA.b [Reads: Direct Page] [Flags: ZCN]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	ldy $ACA5.w		; Load $ACA5.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $DA59.w		; Load $DA59.w into accumulator [Writes: Accumulator] [Flags: ZN]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	lsr $4CA1.w		; Logical shift right $4CA1.w [Flags: ZCN]
	lsr $4CA1.w		; Logical shift right $4CA1.w [Flags: ZCN]
	sbc ($4E.b),Y		; Subtract with carry ($4E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	eor #$68.b		; Exclusive OR #$68.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $F6AF.w		; Load $F6AF.w into X register [Writes: X Index] [Flags: ZN]
	eor $494E.w		; Exclusive OR $494E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $53A7.w,X		; AND accumulator with memory $53A7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $53A7.w,X		; AND accumulator with memory $53A7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($58.b)		; Subtract with carry (indirect) ($58.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	lda [$29.b],Y		; Load accumulator (long indexed) [$29.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sta $61.b		; Store accumulator to $61.b [Reads: Accumulator]
	dec $BCBB.w		; Decrement $BCBB.w [Flags: ZN]
L060CA5:
	per L061154.w		; Push effective relative address L061154.w [Writes: Stack Pointer]
	ldy $AD.b		; Load $AD.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx $60F3.w		; Load $60F3.w into X register [Writes: X Index] [Flags: ZN]
L060CAD:
	jsl $B40C61.l		; Jump to subroutine long $B40C61.l [Writes: Stack Pointer] [Flow: call]
	jsl $C5C4F4.l		; Jump to subroutine long $C5C4F4.l [Writes: Stack Pointer] [Flow: call]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $F6F5.w,Y		; Store accumulator to $F6F5.w,Y [Reads: Accumulator, Y Index]
	lsr $40.b,X		; Logical shift right $40.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	adc $2202.w,Y		; Add $2202.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	jsl $ABF71E.l		; Jump to subroutine long $ABF71E.l [Writes: Stack Pointer] [Flow: call]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	lsr $CC49.w		; Logical shift right $CC49.w [Flags: ZCN]
L060CC6:
	adc ($80.b,X)		; Add with carry ($80.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $481D.w,Y		; Subtract with carry $481D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sta $61.b		; Store accumulator to $61.b [Reads: Accumulator]
	cop $FA.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$FB.b		; Compare #$FB.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	tyx		; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldy $22CF.w,X		; Load Y register $22CF.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	and $E6.b,S		; AND accumulator with stack relative $E6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	ora $F5FB.w,X		; OR accumulator with memory $F5FB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txs		; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	cmp ($62.b),Y		; Compare accumulator ($62.b),Y [Reads: Direct Page, Accumulator, Y Index] [Flags: ZCN]
	jsr ($37E0.w,X)		; Jump to subroutine indirect indexed ($37E0.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pea $C5C4.w		; Push absolute address $C5C4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and ($1D.b,S),Y		; AND accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx $E6.b		; Compare $E6.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	sbc $00ABED.l,X		; Subtract with carry (long,X) $00ABED.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	bra L060CC6.b		; Branch always to L060CC6.b [Flow: branch]
	ora ($02.b,X)		; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor $4C4B.w		; Exclusive OR $4C4B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $033E.w,X		; AND accumulator with memory $033E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $5EE4.w,X		; OR accumulator with memory $5EE4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc ($B4.b,X)		; Add with carry ($B4.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora $04.b,S		; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$05.b],Y		; OR accumulator with memory (long indexed) [$05.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $5206.w,Y		; OR accumulator with memory $5206.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($46.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($46.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $1F6A.w,Y		; Load X register $1F6A.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsl $DFDEA8.l		; Jump to subroutine long $DFDEA8.l [Writes: Stack Pointer] [Flow: call]
	and $07.b,S		; AND accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $E0.b		; Logical AND $E0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $56.b,X		; Exclusive OR accumulator with memory $56.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr $0908.w		; Logical shift right $0908.w [Flags: ZCN]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	jsl $E51742.l		; Jump to subroutine long $E51742.l [Writes: Stack Pointer] [Flow: call]
	inc $0A.b		; Increment $0A.b [Reads: Direct Page] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx $676A.w,Y		; Load X register $676A.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	eor ($58.b),Y		; Exclusive OR accumulator with memory ($58.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $42.b		; Add $42.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	bpl L060CAD.b		; Branch if plus to L060CAD.b [Flow: branch]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($86.b,S),Y		; Load accumulator (stack relative indirect indexed) ($86.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $F9.b		; Subtract $F9.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc $C0.b		; Subtract $C0.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	asl $22DF.w,X		; Arithmetic shift left $22DF.w,X [Reads: X Index] [Flags: ZCN]
	lda $08.b		; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stx $E5.b		; Store X register to $E5.b [Reads: X Index]
	sbc $BB.b		; Subtract $BB.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ora $23EC.w,X		; OR accumulator with memory $23EC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$E523.w		; Load #$E523.w into Y register [Writes: Y Index] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cop $A8.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($44.b,X)		; Exclusive OR accumulator with memory ($44.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	mvp $A9,$F0		; Move block positive $A9,$F0 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ldx $B7.b,Y		; Load X register $B7.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	and $25B7B6.l,X		; AND accumulator with memory (long,X) $25B7B6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	mvp $48,$04		; Move block positive $48,$04 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $F0, $8C		; Invalid branch target (beq L060CE5) ; Branch if equal to $F0, $8C [Flow: branch]
	sta $62EE.w		; Store accumulator to $62EE.w [Reads: Accumulator]
	ora #$01.b		; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0A.b		; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $4B.b		; Logical AND $4B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $62, $F1, $03		; Invalid branch target (per L061156) ; Push effective relative address $62, $F1, $03 [Writes: Stack Pointer]
	eor $0749.w		; Exclusive OR $0749.w with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $62, $06, $FF		; Invalid branch target (per L060C72) ; Push effective relative address $62, $06, $FF [Writes: Stack Pointer]
	ora $04.b		; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $08.b		; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit #$00.b		; Test bits #$00.b with accumulator [Reads: Accumulator] [Flags: Z]
	brk $85.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $1A.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($1B.b,X)		; Logical OR ($1B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta [$00.b],Y		; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Accumulator, Y Index]
	ora #$24.b		; Logical OR #$24.b with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $1B.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($1B.b,X)		; Logical OR ($1B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $0D0008.l		; Jump to subroutine long $0D0008.l [Writes: Stack Pointer] [Flow: call]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	ora $0822.w		; Logical OR $0822.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $01.b,S		; AND accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	ora ($85.b,X)		; Logical OR ($85.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $0D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$1B.b		; Logical OR #$1B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($1B.b,X)		; Logical OR ($1B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($04.b,X)		; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $1B.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	ora $1605.w		; Logical OR $1605.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($09.b)		; OR accumulator with memory (indirect) ($09.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $010100.l		; Jump to subroutine long $010100.l [Writes: Stack Pointer] [Flow: call]
	asl $84.b		; Arithmetic shift left $84.b [Reads: Direct Page] [Flags: ZCN]
	brk $0D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $060201.l		; Jump to subroutine long $060201.l [Writes: Stack Pointer] [Flow: call]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $22.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b,X)		; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $08.b		; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZCN]
	ora ($0E.b,X)		; Logical OR ($0E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	ora $1B010B.l		; OR accumulator with memory (long) $1B010B.l [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $1B.b		; Arithmetic shift left $1B.b [Reads: Direct Page] [Flags: ZCN]
	ora $06.b,S		; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($1B.b,X)		; Logical OR ($1B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $240422.l		; OR accumulator with memory (long) $240422.l [Writes: Accumulator] [Flags: ZN]
	ora ($07.b,X)		; Logical OR ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	cop $01.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($07.b,X)		; Logical OR ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	.db $50, $02		; Invalid branch target (bvc L060DE8) ; Branch if overflow clear to $50, $02 [Flow: branch]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $00.b,S		; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $01.b		; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $2204.w		; Test and set bits $2204.w [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($1B.b,X)		; Logical OR ($1B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($83.b,X)		; Logical OR ($83.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $43.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0309.w		; Logical OR $0309.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $03.b		; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
L060E00:
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $07.b		; Test and set bits $07.b [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $01.b		; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	ora ($00.b,X)		; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $061101.l		; Jump to subroutine long $061101.l [Writes: Stack Pointer] [Flow: call]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $03.b		; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $1B.b,S		; OR accumulator with stack relative $1B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $0C.b		; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $040308.l		; Jump to subroutine long $040308.l [Writes: Stack Pointer] [Flow: call]
	ora ($00.b,X)		; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $22.b,S		; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($0B.b,X)		; Logical OR ($0B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $86.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $04.b,S		; AND accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($84.b,X)		; Logical OR ($84.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $9D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	brk $FF.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $46.b		; Logical OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	lsr $DA.b		; Logical shift right $DA.b [Reads: Direct Page] [Flags: ZCN]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	bit #$00.b		; Test bits #$00.b with accumulator [Reads: Accumulator] [Flags: Z]
	brk $08.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $4CA1.w		; Logical shift right $4CA1.w [Flags: ZCN]
	lsr $4CA1.w		; Logical shift right $4CA1.w [Flags: ZCN]
	sbc ($4E.b),Y		; Subtract with carry ($4E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	tsb $0085.w		; Test and set bits $0085.w [Reads: Accumulator] [Flags: Z]
	bpl L060E5C.b		; Branch if plus to L060E5C.b [Flow: branch]
	lsr $A73D.w		; Logical shift right $A73D.w [Flags: ZCN]
	eor ($3D.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($3D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda [$53.b]		; Load accumulator (long) [$53.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc ($58.b)		; Subtract with carry (indirect) ($58.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
L060E5C:
	ora $0085.w		; Logical OR $0085.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $3D03.w		; Jump to subroutine at $3D03.w [Writes: Stack Pointer] [Flow: call]
	lsr $DA.b		; Logical shift right $DA.b [Reads: Direct Page] [Flags: ZCN]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	per L061514.w		; Push effective relative address L061514.w [Writes: Stack Pointer]
	asl $0F43.w		; Arithmetic shift left $0F43.w [Flags: ZCN]
	ldy $AD.b		; Load $AD.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx $8559.w		; Load $8559.w into X register [Writes: X Index] [Flags: ZN]
	brk $0D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A2.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $1E.b,X		; Store zero to $1E.b,X [Reads: X Index]
	per L0612C6.w		; Push effective relative address L0612C6.w [Writes: Stack Pointer]
	ora $1E74.w,X		; OR accumulator with memory $1E74.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $844B.w		; Exclusive OR $844B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $1E.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	.db $10, $B6		; Invalid branch target (bpl L060E3A) ; Branch if plus to $10, $B6 [Flow: branch]
	rol $57.b		; Rotate left $57.b [Reads: Direct Page] [Flags: ZCN]
	ora ($65.b),Y		; OR accumulator with memory ($65.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldx $12.b,Y		; Load X register $12.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ora ($52.b,S),Y		; OR accumulator (stack relative indirect indexed) ($52.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	rol $30E0.w		; Rotate left $30E0.w [Flags: ZCN]
	ora #$14.b		; Logical OR #$14.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$2F.b		; Logical OR #$2F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($BC.b),Y		; AND accumulator with memory ($BC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $09EE.w,X		; OR accumulator with memory $09EE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $565574.l		; AND accumulator with memory (long) $565574.l [Writes: Accumulator] [Flags: ZN]
	lsr $4E.b		; Logical shift right $4E.b [Reads: Direct Page] [Flags: ZCN]
	cmp $4F.b,S		; Compare accumulator (stack relative) $4F.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZCN]
	.db $30, $0E		; Invalid branch target (bmi L060EB3) ; Branch if minus to $30, $0E [Flow: branch]
	and $1E9915.l		; AND accumulator with memory (long) $1E9915.l [Writes: Accumulator] [Flags: ZN]
	.db $30, $0E		; Invalid branch target (bmi L060EB9) ; Branch if minus to $30, $0E [Flow: branch]
	and $FF1E35.l		; AND accumulator with memory (long) $FF1E35.l [Writes: Accumulator] [Flags: ZN]
	lsr $C63D.w		; [PATTERN: Memory clearing operation] Logical shift right $C63D.w [Flags: ZCN]
	bne L060ED2.b		; Branch if not equal to L060ED2.b [Flow: branch]
	asl $9F.b,X		; Arithmetic shift left $9F.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	stz $35.b,X		; Store zero to $35.b,X [Reads: X Index]
	stz $17.b,X		; Store zero to $17.b,X [Reads: X Index]
	inc $6A.b		; Increment $6A.b [Reads: Direct Page] [Flags: ZN]
	bit $0018.w,X		; Test bits $0018.w,X [Reads: X Index] [Flags: VNZ] [Flow: branch]
	and $4746.w,X		; AND accumulator with memory $4746.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	mvp $42,$62		; Move block positive $42,$62 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $743C.w,Y		; OR accumulator with memory $743C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	dec $6261.w,X		; Decrement memory $6261.w,X [Reads: X Index] [Flags: ZN]
	lda $1D.b		; Load $1D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($46.b,X)		; Add with carry ($46.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
L060ED2:
	ora $4E1A.w,Y		; OR accumulator with memory $4E1A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $B21C1C.l		; Exclusive OR accumulator with memory (long) $B21C1C.l [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	adc [$68.b]		; Add with carry (long) [$68.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	lda $C0.b		; Load $C0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $624E.w		; Logical OR $624E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($E0.b),Y		; Exclusive OR accumulator with memory ($E0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $D0581B.l		; AND accumulator with memory (long) $D0581B.l [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	adc ($62.b,X)		; Add with carry ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	ldy $29DF.w,X		; Load Y register $29DF.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cmp $53C5.w,Y		; Compare accumulator $53C5.w,Y [Reads: Y Index] [Flags: ZCN]
	and $55ED.w,X		; AND accumulator with memory $55ED.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $49.b,X		; Logical shift right $49.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	eor $44.b,S		; Exclusive OR accumulator with stack relative $44.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $6867.w,X		; OR accumulator with memory $6867.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $6A74.w,X		; Test bits $6A74.w,X [Reads: X Index] [Flags: VNZ] [Flow: branch]
	.db $42, $4F		; opcode wdm $4F ; Reserved instruction
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	lsr $FF.b		; Logical shift right $FF.b [Reads: Direct Page] [Flags: ZCN]
	ora $4A67.w,X		; OR accumulator with memory $4A67.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	trb $DFD4.w		; Test and reset bits $DFD4.w [Reads: Accumulator] [Flags: Z]
	ora $0732.w,X		; OR accumulator with memory $0732.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $A1C2.w,X		; Arithmetic shift left $A1C2.w,X [Reads: X Index] [Flags: ZCN]
	jmp $744E.w		; Jump to $744E.w [Flow: jump]
	ora $62DF.w,X		; OR accumulator with memory $62DF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($02.b),Y		; Exclusive OR accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ora $863C.w,X		; OR accumulator with memory $863C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $29.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	stz $30.b		; Store zero to $30.b
	.db $42, $4F		; opcode wdm $4F ; Reserved instruction
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	.db $62, $AA, $61		; Invalid branch target (per L0670D1) ; Push effective relative address $62, $AA, $61 [Writes: Stack Pointer]
	stx $00.b		; Store X register to $00.b [Reads: X Index]
	brk $FF.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $08.b,S		; AND accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $08.b		; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $08.b		; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $23.b		; Test and set bits $23.b [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsl $00881B.l		; Jump to subroutine long $00881B.l [Writes: Stack Pointer] [Flow: call]
	asl $23.b		; Arithmetic shift left $23.b [Reads: Direct Page] [Flags: ZCN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $06.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($27.b,X)		; Logical OR ($27.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $04.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $010C08.l		; Jump to subroutine long $010C08.l [Writes: Stack Pointer] [Flow: call]
	ora ($04.b,X)		; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $0C.b		; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $01.b,X		; Arithmetic shift left $01.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora ($03.b,X)		; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $2204.w		; Arithmetic shift left $2204.w [Flags: ZCN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $0C.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tsb $83.b		; Test and set bits $83.b [Reads: Accumulator] [Flags: Z]
	brk $08.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $04.b		; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1B.b,S		; OR accumulator with stack relative $1B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($1B.b,X)		; Logical OR ($1B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $22.b		; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $04.b,S		; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $1B.b		; Test and set bits $1B.b [Reads: Accumulator] [Flags: Z]
	ora $0084.w		; Logical OR $0084.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $50, $02		; Invalid branch target (bvc L060F77) ; Branch if overflow clear to $50, $02 [Flow: branch]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($1B.b,X)		; Logical OR ($1B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $08.b		; Logical AND $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $1B.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $040708.l		; Jump to subroutine long $040708.l [Writes: Stack Pointer] [Flow: call]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZCN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $000008.l		; Jump to subroutine long $000008.l [Writes: Stack Pointer] [Flow: call]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	eor $0403.w		; Exclusive OR $0403.w with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($23.b,X)		; Logical OR ($23.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $000808.l		; Jump to subroutine long $000808.l [Writes: Stack Pointer] [Flow: call]
	ora ($04.b,X)		; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $08.b,X		; Arithmetic shift left $08.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $07.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $06101B.l		; Jump to subroutine long $06101B.l [Writes: Stack Pointer] [Flow: call]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($08.b,X)		; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $0804.w		; Test and set bits $0804.w [Reads: Accumulator] [Flags: Z]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $00.b		; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZCN]
	ora $1B.b,S		; OR accumulator with stack relative $1B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $00.b		; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZCN]
	bit $08.b		; Test bits $08.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	asl $04.b		; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: ZCN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	per L060FC5.w		; Push effective relative address L060FC5.w [Writes: Stack Pointer]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and [$08.b]		; AND accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
L060FC5:
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $0F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $01.b		; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $15.b,X		; Arithmetic shift left $15.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	eor $04.b,S		; Exclusive OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $22.b		; Arithmetic shift left $22.b [Reads: Direct Page] [Flags: ZCN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($05.b,X)		; Logical OR ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $22.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $08.b		; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tsb $04.b		; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1B.b,S		; AND accumulator with stack relative $1B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b,X)		; Logical OR ($11.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $23.b,X		; OR accumulator with memory $23.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	lsr $0A.b		; Logical shift right $0A.b [Reads: Direct Page] [Flags: ZCN]
	cop $1B.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($01.b),Y		; OR accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($0D.b,X)		; Logical OR ($0D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1A.b,X)		; Logical OR ($1A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($83.b,X)		; Logical OR ($83.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $05.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $07.b		; Test and set bits $07.b [Reads: Accumulator] [Flags: Z]
	asl $10.b		; Arithmetic shift left $10.b [Reads: Direct Page] [Flags: ZCN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $0C01.w		; Logical OR $0C01.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsl $1A0001.l		; Jump to subroutine long $1A0001.l [Writes: Stack Pointer] [Flow: call]
	sbc $DBDA09.l,X		; Subtract with carry (long,X) $DBDA09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ldy $6AA5.w		; Load $6AA5.w into Y register [Writes: Y Index] [Flags: ZN]
	eor $4C4B.w		; Exclusive OR $4C4B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $85A1.w		; Logical shift right $85A1.w [Flags: ZCN]
	brk $07.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A1.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $62A2.w		; Jump to $62A2.w [Flow: jump]
	ora $535203.l,X		; Logical OR long $535203.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $85A7.w,X		; AND accumulator with memory $85A7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $17.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $53A7.w,X		; OR accumulator with memory $53A7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	stz $35.b,X		; Store zero to $35.b,X [Reads: X Index]
	asl $AE55.w,X		; Arithmetic shift left $AE55.w,X [Reads: X Index] [Flags: ZCN]
	ldy $AD.b		; Load $AD.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lsr $AC.b,X		; Logical shift right $AC.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	lda $4656.w		; Load $4656.w into accumulator [Writes: Accumulator] [Flags: ZN]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	per L06415C.w		; Push effective relative address L06415C.w [Writes: Stack Pointer]
	and ($07.b)		; AND accumulator with memory (indirect) ($07.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $22		; opcode wdm $22 ; Reserved instruction
	and $67.b		; Logical AND $67.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	eor $0083FF.l,X		; Exclusive OR accumulator with memory (long,X) $0083FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $0B02.w		; Arithmetic shift left $0B02.w [Flags: ZCN]
	and $3C.b,S		; AND accumulator with stack relative $3C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	tsb $3E.b		; Test and set bits $3E.b [Reads: Accumulator] [Flags: Z]
	cmp $251E24.l,X		; Compare accumulator (long,X) $251E24.l,X [Reads: Accumulator, X Index] [Flags: ZCN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	asl $3D0D.w,X		; Arithmetic shift left $3D0D.w,X [Reads: X Index] [Flags: ZCN]
	rol $5926.w,X		; Rotate left $5926.w,X [Reads: X Index] [Flags: ZCN]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	lsr $47.b		; Logical shift right $47.b [Reads: Direct Page] [Flags: ZCN]
	and [$28.b]		; AND accumulator with memory (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $29.b		; Rotate left $29.b [Reads: Direct Page] [Flags: ZCN]
	ldy $AD.b		; Load $AD.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	brk $10.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
.ACCU 16
	rep #$A1
	jmp $C34E.w		; Jump to $C34E.w [Flow: jump]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora #$6A2F.w		; Logical OR #$6A2F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $4CA12C.l,X		; Store accumulator (long,X) $4CA12C.l,X [Reads: Accumulator, X Index]
	ldx #$2DAA.w		; Load #$2DAA.w into X register [Writes: X Index] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	cop $C6.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $630E.w		; Rotate left $630E.w [Flags: ZCN]
	and $53A70B.l		; AND accumulator with memory (long) $53A70B.l [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda ($61.b)		; Load accumulator (indirect) ($61.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $DA.b		; Logical shift right $DA.b [Reads: Direct Page] [Flags: ZCN]
	ora #$A5A4.w		; Logical OR #$A5A4.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldx $62.b		; Load $62.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	and ($14.b,S),Y		; AND accumulator (stack relative indirect indexed) ($14.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	.db $62, $C0, $0D		; Invalid branch target (per L061E5D) ; Push effective relative address $62, $C0, $0D [Writes: Stack Pointer]
	lsr $19A1.w		; Logical shift right $19A1.w [Flags: ZCN]
	pei ($6A.b)		; Push effective indirect address ($6A.b) [Reads: Direct Page] [Writes: Stack Pointer]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	stx $3736.w		; Store X register to $3736.w [Reads: X Index]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ldx $4CA1.w,Y		; Load X register $4CA1.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldx #$83C5.w		; Load #$83C5.w into X register [Writes: X Index] [Flags: ZN]
	brk $17.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sec		; Set carry ; Set carry flag [Flags: C]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $BEB239.l,X		; Store accumulator (long,X) $BEB239.l,X [Reads: Accumulator, X Index]
	eor $A73A.w,Y		; Exclusive OR accumulator with memory $A73A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($A8.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($A8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	rol $0B.b		; Rotate left $0B.b [Reads: Direct Page] [Flags: ZCN]
	ldx $A13B.w		; Load $A13B.w into X register [Writes: X Index] [Flags: ZN]
	bpl L06111A.b		; Branch if plus to L06111A.b [Flow: branch]
	tsx		; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	bit $E55D.w,X		; Test bits $E55D.w,X [Reads: X Index] [Flags: VNZ] [Flow: branch]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ora #$430B.w		; Logical OR #$430B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $1F.b		; Test bits $1F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	brk $F9.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	per L061210.w		; Push effective relative address L061210.w [Writes: Stack Pointer]
	sbc #$6257.w		; Subtract #$6257.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	ora $A1.b		; Logical OR $A1.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $3332.w,Y		; OR accumulator with memory $3332.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$63A2.w		; Load #$63A2.w into Y register [Writes: Y Index] [Flags: ZN]
	eor $01.b,S		; Exclusive OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($B7.b,X)		; Logical OR ($B7.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $47.b,S		; Add with carry (stack relative) $47.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	lsr $0B.b		; Logical shift right $0B.b [Reads: Direct Page] [Flags: ZCN]
	eor $014C4B.l		; Exclusive OR accumulator with memory (long) $014C4B.l [Writes: Accumulator] [Flags: ZN]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor $9F06.w		; Exclusive OR $9F06.w with accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $EB.b,X		; Compare accumulator $EB.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	lsr $07.b,X		; Logical shift right $07.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	lsr $92.b,X		; Logical shift right $92.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	adc $544E.w,Y		; Add $544E.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	asl $F5.b		; Arithmetic shift left $F5.b [Reads: Direct Page] [Flags: ZCN]
	lsr $0622.w,X		; Logical shift right $0622.w,X [Reads: X Index] [Flags: ZCN]
	brk $0B.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $040801.l,X		; Subtract with carry (long,X) $040801.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	jsl $000C08.l		; Jump to subroutine long $000C08.l [Writes: Stack Pointer] [Flow: call]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $00.b		; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZCN]
	brk $07.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $03.b		; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	asl $08.b		; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZCN]
	tsb $22.b		; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
L06111A:
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl $02.b		; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: ZCN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $00.b		; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZCN]
	tsb $0406.w		; Test and set bits $0406.w [Reads: Accumulator] [Flags: Z]
	tsb $08.b		; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	ora #$0823.w		; Logical OR #$0823.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $1B.b,S		; AND accumulator with stack relative $1B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $04071B.l		; Jump to subroutine long $04071B.l [Writes: Stack Pointer] [Flow: call]
	tsb $0C16.w		; Test and set bits $0C16.w [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $0E.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $1B2303.l		; Jump to subroutine long $1B2303.l [Writes: Stack Pointer] [Flow: call]
	tsb $05.b		; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($07.b),Y		; OR accumulator with memory ($07.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	jsl $0B0A22.l		; Jump to subroutine long $0B0A22.l [Writes: Stack Pointer] [Flow: call]
	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $0306.w		; Arithmetic shift left $0306.w [Flags: ZCN]
	ora $08.b		; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$08.b]		; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,X		; OR accumulator with memory $01.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
L061154:
	jsl $150A1B.l		; Jump to subroutine long $150A1B.l [Writes: Stack Pointer] [Flow: call]
	asl $03.b,X		; Arithmetic shift left $03.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $07.b,S		; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($08.b,X)		; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $07.b		; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $22.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and $15.b,S		; AND accumulator with stack relative $15.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$03.b]		; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $07.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$09.b]		; OR accumulator with memory (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $0D041B.l		; Jump to subroutine long $0D041B.l [Writes: Stack Pointer] [Flow: call]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $16.b,X		; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $1B23.w		; Logical OR $1B23.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $00.b		; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZCN]
	ora $05.b,S		; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$02.b]		; OR accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $1B23.w		; Logical OR $1B23.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($19.b,X)		; Logical OR ($19.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $43.b,S		; OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($16.b,X)		; Logical OR ($16.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $05.b,S		; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($07.b,X)		; Logical OR ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora [$07.b]		; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $10.b,S		; OR accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $0B.b		; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: ZCN]
	brk $07.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$1B.b]		; OR accumulator with memory (long) [$1B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $1B.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $008305.l		; OR accumulator with memory (long) $008305.l [Writes: Accumulator] [Flags: ZN]
	adc ($07.b),Y		; Add with carry ($07.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	ora [$1B.b]		; OR accumulator with memory (long) [$1B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $1B.b		; Arithmetic shift left $1B.b [Reads: Direct Page] [Flags: ZCN]
	ora [$0B.b]		; OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $1B.b		; Test bits $1B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	jsl $1B030F.l		; Jump to subroutine long $1B030F.l [Writes: Stack Pointer] [Flow: call]
	ora $0106.w,Y		; OR accumulator with memory $0106.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $0B091B.l		; Jump to subroutine long $0B091B.l [Writes: Stack Pointer] [Flow: call]
	asl $06.b		; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZCN]
	ora $1B0606.l		; OR accumulator with memory (long) $1B0606.l [Writes: Accumulator] [Flags: ZN]
	ora ($09.b,X)		; Logical OR ($09.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and $02.b,S		; AND accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $030306.l		; Jump to subroutine long $030306.l [Writes: Stack Pointer] [Flow: call]
	ora $1B.b,S		; OR accumulator with stack relative $1B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $24.b,S		; OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	rol $02.b		; Rotate left $02.b [Reads: Direct Page] [Flags: ZCN]
	ora [$0F.b]		; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($1B.b,X)		; Logical OR ($1B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $1511.w		; Logical OR $1511.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $06.b,S		; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $0A0001.l		; Jump to subroutine long $0A0001.l [Writes: Stack Pointer] [Flow: call]
	jsl $0E0801.l		; Jump to subroutine long $0E0801.l [Writes: Stack Pointer] [Flow: call]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $03010D.l		; OR accumulator with memory (long) $03010D.l [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	sbc $0D02.w		; Subtract $0D02.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $4C20E0.l,X		; Subtract with carry (long,X) $4C20E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	lsr $4CA1.w		; Logical shift right $4CA1.w [Flags: ZCN]
	ldx #$4F1C.w		; Load #$4F1C.w into X register [Writes: X Index] [Flags: ZN]
	stx $1D1D.w		; Store X register to $1D1D.w [Reads: X Index]
	eor [$1D.b]		; Exclusive OR accumulator with memory (long) [$1D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	stx $0D32.w		; Store X register to $0D32.w [Reads: X Index]
	eor ($3D.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($3D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda [$53.b]		; Load accumulator (long) [$53.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	rol $504F.w,X		; Rotate left $504F.w,X [Reads: X Index] [Flags: ZCN]
	rol $921D.w,X		; Rotate left $921D.w,X [Reads: X Index] [Flags: ZCN]
	sta ($8E.b,S),Y		; Store accumulator (stack relative indirect indexed) ($8E.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer]
L061210:
	ldx $8B90.w		; Load $8B90.w into X register [Writes: X Index] [Flags: ZN]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	.db $62, $AC, $63		; Invalid branch target (per L0675C3) ; Push effective relative address $62, $AC, $63 [Writes: Stack Pointer]
	eor ($0B.b),Y		; Exclusive OR accumulator with memory ($0B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bcc L061270.b		; Branch if carry clear to L061270.b [Flow: branch]
	lsr $4B.b,X		; Logical shift right $4B.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ldx $BA7C.w		; Load $BA7C.w into X register [Writes: X Index] [Flags: ZN]
	mvn $A2,$4C		; Move block negative $A2,$4C [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $2262.w,X		; OR accumulator with memory $2262.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc $57.b,S		; Add with carry (stack relative) $57.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor ($5B.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($5B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta [$04.b],Y		; Store accumulator (long indexed) [$04.b],Y [Reads: Direct Page, Accumulator, Y Index]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($A8.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($A8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jmp $092234.l		; Jump long to $092234.l [Flow: jump]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta ($92.b),Y		; Store accumulator ($92.b),Y [Reads: Direct Page, Accumulator, Y Index]
	eor $6A45.w,X		; Exclusive OR accumulator with memory $6A45.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($C9.b)		; AND accumulator with memory (indirect) ($C9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($3B.b)		; Load accumulator (indirect) ($3B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $770B.w		; Load $770B.w into X register [Writes: X Index] [Flags: ZN]
	.db $62, $5E, $0A		; Invalid branch target (per L061CA3) ; Push effective relative address $62, $5E, $0A [Writes: Stack Pointer]
	dec $98A7.w,X		; Decrement memory $98A7.w,X [Reads: X Index] [Flags: ZN]
	sta $1E47.w,Y		; Store accumulator to $1E47.w,Y [Reads: Accumulator, Y Index]
L06124B:
	adc ($72.b),Y		; Add with carry ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $1D.b		; Subtract $1D.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ora $6162.w,X		; OR accumulator with memory $6162.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $E1.b,S		; Add with carry (stack relative) $E1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	ora $47DDA1.l		; OR accumulator with memory (long) $47DDA1.l [Writes: Accumulator] [Flags: ZN]
	xce		; Exchange carry bit to set emulation or native mode ; Exchange carry and emulation bits [Flags: C]
	rol $5A77.w,X		; Rotate left $5A77.w,X [Reads: X Index] [Flags: ZCN]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($64.b)		; AND accumulator with memory (indirect) ($64.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $E5.b		; Add $E5.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ror $AC.b		; Rotate right $AC.b [Reads: Direct Page] [Flags: ZCN]
	lda $63C0.w		; Load $63C0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc [$06.b]		; Add with carry (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	xce		; Exchange carry bit to set emulation or native mode ; Exchange carry and emulation bits [Flags: C]
	and ($C9.b)		; AND accumulator with memory (indirect) ($C9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bcc L06124B.b		; Branch if carry clear to L06124B.b [Flow: branch]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $63.b		; Subtract $63.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
L061270:
	jmp ($28E0.w)		; Jump indirect to ($28E0.w) [Flow: jump]
	adc [$A1.b]		; Add with carry (long) [$A1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	bvs L06127D.b		; Branch if overflow set to L06127D.b [Flow: branch]
	adc ($1E.b),Y		; Add with carry ($1E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	and ($C9.b)		; AND accumulator with memory (indirect) ($C9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $A5.b		; Subtract $A5.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
L06127D:
	ora $CC4B6A.l,X		; Logical OR long $CC4B6A.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc ($ED.b)		; Add with carry (indirect) ($ED.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	cpy $CEA1.w		; Compare $CEA1.w with Y register [Reads: Y Index] [Flags: ZCN]
	ldx $3B.b		; Load $3B.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$4140.w		; Load #$4140.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($08.b,S),Y		; Add with carry (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	stz $9B.b,X		; Store zero to $9B.b,X [Reads: X Index]
	eor $7675.w,Y		; Exclusive OR accumulator with memory $7675.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$2B75.w		; Subtract #$2B75.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	adc [$53.b],Y		; Add with carry (long indexed) [$53.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sei		; Disable interrupts ; Set interrupt disable flag [Flags: I]
	stx $4079.w		; Store X register to $4079.w [Reads: X Index]
	stz $7A63.w		; Store zero to $7A63.w
	brk $7A.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $7E104C.l		; Jump to subroutine long $7E104C.l [Writes: Stack Pointer] [Flow: call]
	sbc $7F06A7.l		; Subtract with carry (long) $7F06A7.l [Writes: Accumulator] [Flags: VCNZ]
	.db $80, $79		; Invalid branch target (bra L061323) ; Branch always to $80, $79 [Flow: branch]
	lda [$A0.b]		; Load accumulator (long) [$A0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$9718.w		; Load #$9718.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$0681.w		; Load #$0681.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp $2382.w,X		; Compare accumulator $2382.w,X [Reads: X Index] [Flags: ZCN]
	eor $9706.w,Y		; Exclusive OR accumulator with memory $9706.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$88A0.w		; Load #$88A0.w into Y register [Writes: Y Index] [Flags: ZN]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta $5C.b,S		; Store accumulator (stack relative) $5C.b,S [Reads: Accumulator, Stack Pointer]
	per L061545.w		; Push effective relative address L061545.w [Writes: Stack Pointer]
	stx $87.b		; Store X register to $87.b [Reads: X Index]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	and $4C.b		; Logical AND $4C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
L0612C6:
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lsr $EB.b		; Logical shift right $EB.b [Reads: Direct Page] [Flags: ZCN]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta $5DB72F.l,X		; Store accumulator (long,X) $5DB72F.l,X [Reads: Accumulator, X Index]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor #$81EB.w		; Exclusive OR #$81EB.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $4310EB.l		; Jump to subroutine long $4310EB.l [Writes: Stack Pointer] [Flow: call]
	asl $06.b		; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZCN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor ($06.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $DD.b,S		; Add with carry (stack relative) $DD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	ora $002E.w,X		; OR accumulator with memory $002E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl $06.b		; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	asl $06.b		; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZCN]
	sbc $010704.l,X		; Subtract with carry (long,X) $010704.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	eor $1B.b,S		; Exclusive OR accumulator with stack relative $1B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($18.b)		; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	ora ($1B.b)		; OR accumulator with memory (indirect) ($1B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0701.w		; Logical OR $0701.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($06.b,X)		; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $0D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($07.b)		; OR accumulator with memory (indirect) ($07.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $0204.w		; Logical OR $0204.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$01.b]		; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $12431B.l		; Jump to subroutine long $12431B.l [Writes: Stack Pointer] [Flow: call]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $06.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $03080E.l		; Jump to subroutine long $03080E.l [Writes: Stack Pointer] [Flow: call]
	ora $01.b,S		; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$01.b]		; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $10, $1B		; Invalid branch target (bpl L061338) ; Branch if plus to $10, $1B [Flow: branch]
	cop $22.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and $0E.b,S		; AND accumulator with stack relative $0E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $070E.w		; Arithmetic shift left $070E.w [Flags: ZCN]
	and $1B.b,S		; AND accumulator with stack relative $1B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $01.b		; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	asl $020E.w		; Arithmetic shift left $020E.w [Flags: ZCN]
	cop $23.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $020B.w		; Arithmetic shift left $020B.w [Flags: ZCN]
	cop $07.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	ora ($06.b,X)		; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $0E.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0600.w		; Arithmetic shift left $0600.w [Flags: ZCN]
	and $0E.b,S		; AND accumulator with stack relative $0E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx #$0024.w		; Compare #$0024.w with X register [Reads: X Index] [Flags: ZCN]
	asl $05.b		; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: ZCN]
	ora [$06.b]		; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b,X)		; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $1B.b,S		; OR accumulator with stack relative $1B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $1B.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $16.b,S		; OR accumulator with stack relative $16.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $03.b,X		; Arithmetic shift left $03.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $05.b,S		; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $08.b		; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $02.b		; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: ZCN]
	cop $1B.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $0D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $02.b,S		; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $02020F.l		; OR accumulator with memory (long) $02020F.l [Writes: Accumulator] [Flags: ZN]
	asl $0C05.w		; Arithmetic shift left $0C05.w [Flags: ZCN]
	jsl $1B1007.l		; Jump to subroutine long $1B1007.l [Writes: Stack Pointer] [Flow: call]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cop $1B.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1B.b,S		; OR accumulator with stack relative $1B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0C071B.l		; OR accumulator with memory (long) $0C071B.l [Writes: Accumulator] [Flags: ZN]
	ora #$0507.w		; Logical OR #$0507.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $08.b		; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $07.b		; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $03051B.l		; Jump to subroutine long $03051B.l [Writes: Stack Pointer] [Flow: call]
	ora [$08.b]		; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $830725.l		; OR accumulator with memory (long) $830725.l [Writes: Accumulator] [Flags: ZN]
	brk $76.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $05271B.l		; Jump to subroutine long $05271B.l [Writes: Stack Pointer] [Flow: call]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	ror $01.b,X		; Rotate right $01.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $0743.w		; Arithmetic shift left $0743.w [Flags: ZCN]
	ora #$0622.w		; Logical OR #$0622.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1B.b,S		; AND accumulator with stack relative $1B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $001B06.l		; OR accumulator with memory (long) $001B06.l [Writes: Accumulator] [Flags: ZN]
	cop $07.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$07.b]		; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $121B.w		; Arithmetic shift left $121B.w [Flags: ZCN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $43.b		; Logical OR $43.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	and [$08.b],Y		; AND accumulator with memory (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($0E.b,X)		; Logical OR ($0E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $02.b,S		; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $00.b		; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $0E0601.l		; Jump to subroutine long $0E0601.l [Writes: Stack Pointer] [Flow: call]
	ora $0E.b,S		; OR accumulator with stack relative $0E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0B01.w		; Logical OR $0B01.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($25.b,X)		; Logical OR ($25.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $22.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $0E0B.w		; Arithmetic shift left $0E0B.w [Flags: ZCN]
	sbc $5221E0.l,X		; Subtract with carry (long,X) $5221E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta ($1C.b,S),Y		; Store accumulator (stack relative indirect indexed) ($1C.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer]
	ora $8A89.w,X		; OR accumulator with memory $8A89.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stx $8B.b,Y		; Store X register $8B.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $2F.b,Y		; Store X register $2F.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sty $962F.w		; Store Y register to $962F.w [Reads: Y Index]
	sta $FCF7.w		; Store accumulator to $FCF7.w [Reads: Accumulator]
	eor ($93.b)		; Exclusive OR accumulator with memory (indirect) ($93.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lda #$8EF8.w		; Load #$8EF8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stx $05.b,Y		; Store X register $05.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $BDF890.l		; Store accumulator (long) $BDF890.l [Reads: Accumulator]
	sbc $6192.w,Y		; Subtract with carry $6192.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	eor ($93.b)		; Exclusive OR accumulator with memory (indirect) ($93.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $62, $91, $04		; Invalid branch target (per L06188C) ; Push effective relative address $62, $91, $04 [Writes: Stack Pointer]
	sta $968A.w		; Store accumulator to $968A.w [Reads: Accumulator]
	sty $92.b,X		; Store Y register $92.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	.db $62, $00, $0B		; Invalid branch target (per L061F03) ; Push effective relative address $62, $00, $0B [Writes: Stack Pointer]
	lsr $57.b,X		; Logical shift right $57.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $5C.b,X		; OR accumulator with memory $5C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($95.b,S),Y		; Store accumulator (stack relative indirect indexed) ($95.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer]
	clv		; Clear overflow ; Clear overflow flag [Flags: V]
	stx $5E.b,Y		; Store X register $5E.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta [$98.b],Y		; Store accumulator (long indexed) [$98.b],Y [Reads: Direct Page, Accumulator, Y Index]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $09.b,S		; Add with carry (stack relative) $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	ora $A1.b,S		; OR accumulator with stack relative $A1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $520E.w		; Logical OR $520E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $99.b,S		; Add with carry (stack relative) $99.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	tsb $1E.b		; Test and set bits $1E.b [Reads: Accumulator] [Flags: Z]
	ora ($14.b,S),Y		; OR accumulator (stack relative indirect indexed) ($14.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	.db $62, $15, $0D		; Invalid branch target (per L062136) ; Push effective relative address $62, $15, $0D [Writes: Stack Pointer]
	ora $5B.b,X		; OR accumulator with memory $5B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $6AA0.w,Y		; Compare accumulator $6AA0.w,Y [Reads: Y Index] [Flags: ZCN]
	ora $1918.w,X		; OR accumulator with memory $1918.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($6A.b)		; Load accumulator (indirect) ($6A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $62, $18, $E0		; Bank wrapping branch target ; Push effective relative address $62, $18, $E0 [Writes: Stack Pointer]
	eor ($FB.b,X)		; Exclusive OR accumulator with memory ($FB.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sbc $18.b		; Subtract $18.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $C2C2.w,Y		; Compare accumulator $C2C2.w,Y [Reads: Y Index] [Flags: ZCN]
	sta $1D9E.w,X		; Store accumulator to $1D9E.w,X [Reads: Accumulator, X Index]
	sta $03C2A0.l,X		; Store accumulator (long,X) $03C2A0.l,X [Reads: Accumulator, X Index]
	tsb $C2.b		; Test and set bits $C2.b [Reads: Accumulator] [Flags: Z]
.ACCU 16
	rep #$E4
	sbc $BD.b		; Subtract $BD.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	xce		; Exchange carry bit to set emulation or native mode ; Exchange carry and emulation bits [Flags: C]
	xce		; Exchange carry bit to set emulation or native mode ; Exchange carry and emulation bits [Flags: C]
	lda ($A2.b,X)		; Load accumulator ($A2.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9A72.w,X		; OR accumulator with memory $9A72.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	xce		; Exchange carry bit to set emulation or native mode ; Exchange carry and emulation bits [Flags: C]
	adc [$68.b]		; Add with carry (long) [$68.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	xce		; Exchange carry bit to set emulation or native mode ; Exchange carry and emulation bits [Flags: C]
	xce		; Exchange carry bit to set emulation or native mode ; Exchange carry and emulation bits [Flags: C]
	bit $E5.b		; Test bits $E5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	mvn $80,$18		; Move block negative $80,$18 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $80, $A3		; Invalid branch target (bra L0613FF) ; Branch always to $80, $A3 [Flow: branch]
	ldy $DA.b		; Load $DA.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $32.b		; Load $32.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $72.b		; Load $72.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda [$80.b]		; Load accumulator (long) [$80.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $243E.w,X		; Rotate right $243E.w,X [Reads: X Index] [Flags: ZCN]
	sbc $E5.b		; Subtract $E5.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	lda ($E5.b)		; Load accumulator (indirect) ($E5.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $A4.b,X		; Add $A4.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$6232.w		; Load #$6232.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($AA.b)		; Load accumulator (indirect) ($AA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	dec $8B25.w,X		; Decrement memory $8B25.w,X [Reads: X Index] [Flags: ZN]
	tsb $AC.b		; Test and set bits $AC.b [Reads: Accumulator] [Flags: Z]
	lda $721D.w		; Load $721D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($62.b),Y		; Add with carry ($62.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	ldx $D901.w		; Load $D901.w into X register [Writes: X Index] [Flags: ZN]
	sbc $25.b		; Subtract $25.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	adc ($09.b),Y		; Add with carry ($09.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	lda ($B2.b),Y		; Load accumulator ($B2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $B379.w,X		; OR accumulator with memory $B379.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and [$41.b],Y		; AND accumulator with memory (long indexed) [$41.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $22.b		; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$0800.w		; Load #$0800.w into Y register [Writes: Y Index] [Flags: ZN]
	adc $B4.b,S		; Add with carry (stack relative) $B4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	cpx #$A037.w		; Compare #$A037.w with X register [Reads: X Index] [Flags: ZCN]
	clv		; Clear overflow ; Clear overflow flag [Flags: V]
	lda $30.b		; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	stz $8B8B.w		; Store zero to $8B8B.w
	jmp $3B4C.w		; Jump to $3B4C.w [Flow: jump]
	lda $BA8D.w,Y		; Load $BA8D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	eor ($FB.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($FB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $41B2.w,X		; Arithmetic shift left $41B2.w,X [Reads: X Index] [Flags: ZCN]
	and $42BDBC.l,X		; AND accumulator with memory (long,X) $42BDBC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $EB.b,S		; Exclusive OR accumulator with stack relative $EB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	mvp $5E,$8D		; Move block positive $5E,$8D [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	stx $53.b		; Store X register to $53.b [Reads: X Index]
	ora $DEAA.w,X		; OR accumulator with memory $DEAA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($48.b,X)		; Exclusive OR accumulator with memory ($48.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$4A43.w		; Exclusive OR #$4A43.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $FF.b		; Logical shift right $FF.b [Reads: Direct Page] [Flags: ZCN]
	asl $5F.b		; Arithmetic shift left $5F.b [Reads: Direct Page] [Flags: ZCN]
	sbc $1D.b,S		; Subtract stack-relative $1D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	lda #$1C1D.w		; Load #$1C1D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $521D.w,X		; OR accumulator with memory $521D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($6A.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($6A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor [$5E.b]		; Exclusive OR accumulator with memory (long) [$5E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $1B0206.l,X		; Subtract with carry (long,X) $1B0206.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	asl $02.b,X		; Arithmetic shift left $02.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	asl $04.b		; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: ZCN]
	ora $22.b		; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $02.b,S		; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($0F.b,X)		; Logical OR ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $0D0501.l		; Jump to subroutine long $0D0501.l [Writes: Stack Pointer] [Flow: call]
	ora #$0201.w		; Logical OR #$0201.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $04.b		; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: ZCN]
	jsl $1B030F.l		; Jump to subroutine long $1B030F.l [Writes: Stack Pointer] [Flow: call]
	ora $220F01.l		; OR accumulator with memory (long) $220F01.l [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $1B22.w		; Arithmetic shift left $1B22.w [Flags: ZCN]
	brk $08.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1B.b,S		; AND accumulator with stack relative $1B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora ($02.b,X)		; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $1B22.w		; Arithmetic shift left $1B22.w [Flags: ZCN]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $08051B.l		; Jump to subroutine long $08051B.l [Writes: Stack Pointer] [Flow: call]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($22.b,X)		; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $05.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora #$0101.w		; Logical OR #$0101.w with accumulator [Writes: Accumulator] [Flags: ZN]
L061514:
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $83.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $33.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $01.b,S		; Exclusive OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $04.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $10.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($45.b,X)		; Logical OR ($45.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1B.b,X)		; Logical OR ($1B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $02011B.l		; Jump to subroutine long $02011B.l [Writes: Stack Pointer] [Flow: call]
	cop $22.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($1B.b,X)		; Logical OR ($1B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $06.b		; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZCN]
	jsl $010A1B.l		; Jump to subroutine long $010A1B.l [Writes: Stack Pointer] [Flow: call]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($06.b,X)		; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $05.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1B0E.w		; Arithmetic shift left $1B0E.w [Flags: ZCN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $1B.b,S		; AND accumulator with stack relative $1B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
L061545:
	tsb $03.b		; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	asl $1B.b		; Arithmetic shift left $1B.b [Reads: Direct Page] [Flags: ZCN]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $060107.l		; Jump to subroutine long $060107.l [Writes: Stack Pointer] [Flow: call]
	ora #$1B24.w		; Logical OR #$1B24.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora $0301.w,Y		; OR accumulator with memory $0301.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $05.b,S		; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1B0507.l		; OR accumulator with memory (long) $1B0507.l [Writes: Accumulator] [Flags: ZN]
	ora [$09.b]		; OR accumulator with memory (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $06.b		; Test bits $06.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	ora $0107.w,Y		; OR accumulator with memory $0107.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $10.b,S		; OR accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $09.b		; Logical OR $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$0707.w		; Logical OR #$0707.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0809.w		; Logical OR #$0809.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	cop $07.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $07.b		; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$24.b]		; OR accumulator with memory (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($09.b,X)		; Logical OR ($09.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $22.b		; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tsb $01.b		; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora [$07.b]		; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	and ($03.b,S),Y		; AND accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0C050F.l		; OR accumulator with memory (long) $0C050F.l [Writes: Accumulator] [Flags: ZN]
	jsl $02011B.l		; Jump to subroutine long $02011B.l [Writes: Stack Pointer] [Flow: call]
	cop $22.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1B07.w		; Arithmetic shift left $1B07.w [Flags: ZCN]
	ora ($11.b,X)		; Logical OR ($11.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $1B.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $830807.l		; OR accumulator with memory (long) $830807.l [Writes: Accumulator] [Flags: ZN]
	brk $49.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $1B040E.l		; Jump to subroutine long $1B040E.l [Writes: Stack Pointer] [Flow: call]
	ora $01.b		; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cop $83.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $09.b		; Arithmetic shift left $09.b [Reads: Direct Page] [Flags: ZCN]
	ora ($02.b,X)		; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	eor $01.b,S		; Exclusive OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	sbc [$03.b]		; Subtract with carry (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($02.b,X)		; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $FF.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $7A.b		; Arithmetic shift left $7A.b [Reads: Direct Page] [Flags: ZCN]
	ldx $DDD3.w,Y		; Load X register $DDD3.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sta ($65.b),Y		; Store accumulator ($65.b),Y [Reads: Direct Page, Accumulator, Y Index]
L0615CC:
	jsl $BF0220.l		; Jump to subroutine long $BF0220.l [Writes: Stack Pointer] [Flow: call]
	ora $4B.b,S		; OR accumulator with stack relative $4B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $FA0C03.l		; Jump to subroutine long $FA0C03.l [Writes: Stack Pointer] [Flow: call]
	xce		; Exchange carry bit to set emulation or native mode ; Exchange carry and emulation bits [Flags: C]
	sbc $7491.w		; Subtract $7491.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	sta [$4A.b],Y		; Store accumulator (long indexed) [$4A.b],Y [Reads: Direct Page, Accumulator, Y Index]
L0615DC:
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	cpy #$034B.w		; Compare #$034B.w with Y register [Reads: Y Index] [Flags: ZCN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	and $03.b,S		; AND accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $62, $C1, $06		; Invalid branch target (per L061CA8) ; Push effective relative address $62, $C1, $06 [Writes: Stack Pointer]
	and $C4.b,X		; Logical AND $C4.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $7A.b		; Compare $7A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: ZCN]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sei		; Disable interrupts ; Set interrupt disable flag [Flags: I]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($75.b,X)		; Logical OR ($75.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $C662.w		; Arithmetic shift left $C662.w [Flags: ZCN]
	brk $43.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $C9, $E0		; Bank wrapping branch target ; Push effective relative address $62, $C9, $E0 [Writes: Stack Pointer]
	jsl $1E3535.l		; Jump to subroutine long $1E3535.l [Writes: Stack Pointer] [Flow: call]
	cpx $7A.b		; Compare $7A.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $75.b,S		; OR accumulator with stack relative $75.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $82, $5B, $CC		; Bank wrapping branch target ; Branch always long to $82, $5B, $CC [Flow: branch]
	sbc $4D.b		; Subtract $4D.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	lsr $092B.w		; Logical shift right $092B.w [Flags: ZCN]
	cmp $2743.w		; Compare $2743.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	dec $DE26.w		; Decrement $DE26.w [Flags: ZN]
	sbc ($82.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($82.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	.db $82, $7E, $A5		; Bank wrapping branch target ; Branch always long to $82, $7E, $A5 [Flow: branch]
	trb $5857.w		; Test and reset bits $5857.w [Reads: Accumulator] [Flags: Z]
	rol $CF0E.w		; Rotate left $CF0E.w [Flags: ZCN]
	lsr $092B.w		; Logical shift right $092B.w [Flags: ZCN]
	.db $62, $D0, $01		; Invalid branch target (per L0617F2) ; Push effective relative address $62, $D0, $01 [Writes: Stack Pointer]
	.db $82, $82, $22		; Invalid branch target (brl L0638A7) ; Branch always long to $82, $82, $22 [Flow: branch]
.INDEX 16
	rep #$1C
	ldy #$80D3.w		; Load #$80D3.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $80, $D4		; Invalid branch target (bra L061600) ; Branch always to $80, $D4 [Flow: branch]
	cmp $2E.b,X		; Compare accumulator $2E.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	asl $1BD6.w		; Arithmetic shift left $1BD6.w [Flags: ZCN]
	lda #$6482.w		; Load #$6482.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $D9D71F.l,X		; Logical OR long $D9D71F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cld		; Clear decimal ; Clear decimal flag [Flags: D]
	cmp $DAD9.w,Y		; Compare accumulator $DAD9.w,Y [Reads: Y Index] [Flags: ZCN]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sta $37D9.w,Y		; Store accumulator to $37D9.w,Y [Reads: Accumulator, Y Index]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	stz $67.b		; Store zero to $67.b
	jsl $1A0180.l		; Jump to subroutine long $1A0180.l [Writes: Stack Pointer] [Flow: call]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	bit $DC.b		; Test bits $DC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sbc $50E6A0.l,X		; Subtract with carry (long,X) $50E6A0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc [$C3.b]		; Add with carry (long) [$C3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $DD.b		; Subtract $DD.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sbc $1AA424.l,X		; Subtract with carry (long,X) $1AA424.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	jsr $BBD9.w		; Jump to subroutine at $BBD9.w [Writes: Stack Pointer] [Flow: call]
	lsr $76.b,X		; Logical shift right $76.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	dec $A5E5.w,X		; Decrement memory $A5E5.w,X [Reads: X Index] [Flags: ZN]
	sbc $E5.b		; Subtract $E5.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	cmp $26264F.l,X		; Compare accumulator (long,X) $26264F.l,X [Reads: Accumulator, X Index] [Flags: ZCN]
	eor ($98.b),Y		; Exclusive OR accumulator with memory ($98.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $E0DF.w,X		; Load $E0DF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $77.b		; Compare $77.b with accumulator [Reads: Direct Page, Accumulator] [Flags: ZCN]
	.db $82, $3B, $E5		; Bank wrapping branch target ; Branch always long to $82, $3B, $E5 [Flow: branch]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $22E1.w		; Rotate right $22E1.w [Flags: ZCN]
	sep #$02		; Set processor status bits #$02 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sbc $5A.b,S		; Subtract stack-relative $5A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	sbc $62.b		; Subtract $62.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	cpx $11.b		; Compare $11.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	sbc [$8B.b]		; Subtract with carry (long) [$8B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	phb		; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	tsb $E8.b		; Test and set bits $E8.b [Reads: Accumulator] [Flags: Z]
	mvn $EA,$E9		; Move block negative $EA,$E9 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	rol $E3D3.w,X		; Rotate left $E3D3.w,X [Reads: X Index] [Flags: ZCN]
	mvn $E5,$E4		; Move block negative $E5,$E4 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $EC0C42.l		; Jump to subroutine long $EC0C42.l [Writes: Stack Pointer] [Flow: call]
	eor $01.b,X		; Exclusive OR accumulator with memory $01.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($ED.b),Y		; Compare accumulator ($ED.b),Y [Reads: Direct Page, Accumulator, Y Index] [Flags: ZCN]
	eor $E4B295.l,X		; Exclusive OR accumulator with memory (long,X) $E4B295.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc $8277.w		; Increment $8277.w [Flags: ZN]
	.db $82, $22, $46		; Invalid branch target (brl L065CC4) ; Branch always long to $82, $22, $46 [Flow: branch]
	ora $06A1EF.l		; OR accumulator with memory (long) $06A1EF.l [Writes: Accumulator] [Flags: ZN]
	eor ($DC.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($DC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sta $E5.b,X		; Store accumulator to $E5.b,X [Reads: Accumulator, X Index]
	cpx $B9.b		; Compare $B9.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	adc [$82.b],Y		; Add with carry (long indexed) [$82.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $82, $06, $A6		; Bank wrapping branch target ; Branch always long to $82, $06, $A6 [Flow: branch]
	asl $43.b		; Arithmetic shift left $43.b [Reads: Direct Page] [Flags: ZCN]
	asl $53.b		; Arithmetic shift left $53.b [Reads: Direct Page] [Flags: ZCN]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	sbc [$03.b]		; Subtract with carry (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	lda $828277.l,X		; Load long $828277.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $220322.l,X		; Subtract with carry (long,X) $220322.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora ($09.b,X)		; Logical OR ($09.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($1B.b,X)		; Logical OR ($1B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $1B.b		; Logical OR $1B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $010403.l		; Jump to subroutine long $010403.l [Writes: Stack Pointer] [Flow: call]
	asl $0A.b		; Arithmetic shift left $0A.b [Reads: Direct Page] [Flags: ZCN]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $1B1E01.l		; Jump to subroutine long $1B1E01.l [Writes: Stack Pointer] [Flow: call]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $04.b,S		; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($1B.b,X)		; Logical OR ($1B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bpl L0616EF.b		; Branch if plus to L0616EF.b [Flow: branch]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($06.b,X)		; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $1B.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L0616EF:
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $06.b,S		; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($0A.b,X)		; Logical OR ($0A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora $0A.b		; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	jsl $1B1805.l		; Jump to subroutine long $1B1805.l [Writes: Stack Pointer] [Flow: call]
	ora ($02.b,X)		; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1B.b,X)		; Logical OR ($1B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $06.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0A.b,X)		; Logical OR ($0A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $05.b,X		; Arithmetic shift left $05.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $06.b		; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $0E01.w		; Test and reset bits $0E01.w [Reads: Accumulator] [Flags: Z]
	ora ($1C.b,X)		; Logical OR ($1C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $0101.w		; Test and reset bits $0101.w [Reads: Accumulator] [Flags: Z]
	trb $0522.w		; Test and reset bits $0522.w [Reads: Accumulator] [Flags: Z]
	ora $10100A.l		; OR accumulator with memory (long) $10100A.l [Writes: Accumulator] [Flags: ZN]
	trb $0101.w		; Test and reset bits $0101.w [Reads: Accumulator] [Flags: Z]
	ora $1C01.w,Y		; OR accumulator with memory $1C01.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $0110.w		; Test and reset bits $0110.w [Reads: Accumulator] [Flags: Z]
	trb $050C.w		; Test and reset bits $050C.w [Reads: Accumulator] [Flags: Z]
	asl $24.b		; Arithmetic shift left $24.b [Reads: Direct Page] [Flags: ZCN]
	trb $010D.w		; Test and reset bits $010D.w [Reads: Accumulator] [Flags: Z]
	tsb $0201.w		; Test and set bits $0201.w [Reads: Accumulator] [Flags: Z]
	trb $1C16.w		; Test and reset bits $1C16.w [Reads: Accumulator] [Flags: Z]
	trb $1C11.w		; Test and reset bits $1C11.w [Reads: Accumulator] [Flags: Z]
	asl $1C.b		; Arithmetic shift left $1C.b [Reads: Direct Page] [Flags: ZCN]
	trb $2203.w		; Test and reset bits $2203.w [Reads: Accumulator] [Flags: Z]
	ora ($08.b,X)		; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $0C01.w		; Test and reset bits $0C01.w [Reads: Accumulator] [Flags: Z]
	cop $07.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($1C.b)		; OR accumulator with memory (indirect) ($1C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $2216.w		; Test and reset bits $2216.w [Reads: Accumulator] [Flags: Z]
	trb $0343.w		; Test and reset bits $0343.w [Reads: Accumulator] [Flags: Z]
	ora ($04.b,X)		; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($05.b,X)		; Logical OR ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $0D1C.w		; Test and reset bits $0D1C.w [Reads: Accumulator] [Flags: Z]
	jsl $05061C.l		; Jump to subroutine long $05061C.l [Writes: Stack Pointer] [Flow: call]
	trb $121C.w		; Test and reset bits $121C.w [Reads: Accumulator] [Flags: Z]
	ora $231C01.l		; OR accumulator with memory (long) $231C01.l [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bit $1C.b		; Test bits $1C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	ora $0B.b,S		; OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $0202.w		; Test and reset bits $0202.w [Reads: Accumulator] [Flags: Z]
	and $01.b,S		; AND accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $041C.w		; Test and set bits $041C.w [Reads: Accumulator] [Flags: Z]
	asl $02.b		; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: ZCN]
	cop $1C.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $0006.w		; Test and reset bits $0006.w [Reads: Accumulator] [Flags: Z]
	cop $10.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $020001.l		; Jump to subroutine long $020001.l [Writes: Stack Pointer] [Flow: call]
	and $00.b,S		; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1C22.w		; Arithmetic shift left $1C22.w [Flags: ZCN]
	ora [$02.b]		; OR accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $0101.w		; Test and reset bits $0101.w [Reads: Accumulator] [Flags: Z]
	tsb $0200.w		; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	bpl L0617B0.b		; Branch if plus to L0617B0.b [Flow: branch]
	ora ($0B.b,X)		; Logical OR ($0B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $0207.w		; Arithmetic shift left $0207.w [Flags: ZCN]
	cop $1C.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01.b		; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $0702.w		; Test and reset bits $0702.w [Reads: Accumulator] [Flags: Z]
	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $1C0101.l		; Jump to subroutine long $1C0101.l [Writes: Stack Pointer] [Flow: call]
	trb $0123.w		; Test and reset bits $0123.w [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $101C.w		; Test and reset bits $101C.w [Reads: Accumulator] [Flags: Z]
	trb $030D.w		; Test and reset bits $030D.w [Reads: Accumulator] [Flags: Z]
	ora $0D.b,S		; OR accumulator with stack relative $0D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($24.b,X)		; Logical OR ($24.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $0F02.w		; Test and reset bits $0F02.w [Reads: Accumulator] [Flags: Z]
L0617B0:
	trb $FF1C.w		; Test and reset bits $FF1C.w [Reads: Accumulator] [Flags: Z]
	jsl $15226C.l		; Jump to subroutine long $15226C.l [Writes: Stack Pointer] [Flow: call]
	ora #$AAB5.w		; Logical OR #$AAB5.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $F0.b		; Arithmetic shift left $F0.b [Reads: Direct Page] [Flags: ZCN]
	sta $F2F1.w		; Store accumulator to $F2F1.w [Reads: Accumulator]
	adc ($06.b),Y		; Add with carry ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($22.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($22.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	jmp ($42E0.w)		; Jump indirect to ($42E0.w) [Flow: jump]
	ora $B1.b,X		; OR accumulator with memory $B1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $D4.b		; Logical AND $D4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $0A.b,X		; Load $0A.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $F4ED.w,X		; Subtract with carry $F4ED.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $16.b,X		; Subtract $16.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	tsb $F7F6.w		; Test and set bits $F7F6.w [Reads: Accumulator] [Flags: Z]
	jmp ($2288.w)		; Jump indirect to ($2288.w) [Flow: jump]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	sbc $D4E0.w,Y		; Subtract with carry $D4E0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	ora $01.b,X		; OR accumulator with memory $01.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	stx $FF.b,Y		; Store X register $FF.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	plx		; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ora $1F.b,S		; OR accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc #$FCFB.w		; Add #$FCFB.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	adc [$D7.b],Y		; Add with carry (long indexed) [$D7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	trb $E0.b		; Test and reset bits $E0.b [Reads: Accumulator] [Flags: Z]
	and $FD.b		; Logical AND $FD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FDECFF.l,X		; Subtract with carry (long,X) $FDECFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc ($69.b),Y		; Add with carry ($69.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	dec $FE.b,X		; Decrement memory $FE.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	lda $74.b		; Load $74.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$D7.b],Y		; Add with carry (long indexed) [$D7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	lda $ECFF.w,X		; Load $ECFF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$F9EC.w		; Logical OR #$F9EC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $E15C00.l,X		; Subtract with carry (long,X) $E15C00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	dec $01.b,X		; Decrement memory $01.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	cop $1E.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$03.b],Y		; Add with carry (long indexed) [$03.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	jsl $140FFF.l		; Jump to subroutine long $140FFF.l [Writes: Stack Pointer] [Flow: call]
	txs		; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $04.b		; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: ZCN]
	eor #$E86A.w		; Exclusive OR #$E86A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	dec $05.b,X		; [PATTERN: Memory clearing operation] Decrement memory $05.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	asl $7F.b		; Arithmetic shift left $7F.b [Reads: Direct Page] [Flags: ZCN]
	adc [$07.b],Y		; Add with carry (long indexed) [$07.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	stz $01EC.w,X		; Store zero to $01EC.w,X [Reads: X Index]
	stz $08.b		; Store zero to $08.b
	ora $F50C.w,Y		; OR accumulator with memory $F50C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $DD.b,X		; Decrement memory $DD.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	ora $0E1B.w		; Logical OR $0E1B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0A1021.l		; OR accumulator with memory (long) $0A1021.l [Writes: Accumulator] [Flags: ZN]
	ora ($12.b),Y		; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	ora [$13.b],Y		; OR accumulator with memory (long indexed) [$13.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $E6.b,X		; Decrement memory $E6.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	.db $42, $05		; opcode wdm $05 ; Reserved instruction
	stx $1514.w		; Store X register to $1514.w [Reads: X Index]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	per L062052.w		; Push effective relative address L062052.w [Writes: Stack Pointer]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	tda		; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $17.b,S		; OR accumulator with stack relative $17.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec $19.b,X		; Decrement memory $19.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc $1B62.w,X		; Increment memory $1B62.w,X [Reads: X Index] [Flags: ZN]
	ora $1EEC.w		; Logical OR $1EEC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $E5AF8E.l,X		; Logical OR long $E5AF8E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr $0303.w		; Jump to subroutine at $0303.w [Writes: Stack Pointer] [Flow: call]
	dec $D6.b,X		; Decrement memory $D6.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	cmp $4E5E.w,X		; Compare accumulator $4E5E.w,X [Reads: X Index] [Flags: ZCN]
	stz $21.b		; Store zero to $21.b
	cpx #$F820.w		; Compare #$F820.w with X register [Reads: X Index] [Flags: ZCN]
	rol $DA.b		; Rotate left $DA.b [Reads: Direct Page] [Flags: ZCN]
	pei ($E4.b)		; Push effective indirect address ($E4.b) [Reads: Direct Page] [Writes: Stack Pointer]
	bit $D6.b		; Test bits $D6.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	dec $27.b,X		; Decrement memory $27.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	lda $5B5E6A.l,X		; Load long $5B5E6A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	and #$1D6A.w		; Logical AND #$1D6A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc $0A.b		; Increment $0A.b [Reads: Direct Page] [Flags: ZN]
	inc $1D.b		; Increment $1D.b [Reads: Direct Page] [Flags: ZN]
	rol $D6D6.w		; Rotate left $D6D6.w [Flags: ZCN]
	cmp $FB1D.w,X		; Compare accumulator $FB1D.w,X [Reads: X Index] [Flags: ZCN]
	ora $41AA.w,X		; OR accumulator with memory $41AA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	jmp $623B.w		; Jump to $623B.w [Flow: jump]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	trb $2D8D.w		; Test and reset bits $2D8D.w [Reads: Accumulator] [Flags: Z]
	dec $D6.b,X		; Decrement memory $D6.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	inc $1D.b		; Increment $1D.b [Reads: Direct Page] [Flags: ZN]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $41.b		; Store Y register to $41.b [Reads: Y Index]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor #$44EB.w		; Exclusive OR #$44EB.w with accumulator [Writes: Accumulator] [Flags: ZN]
	dec $4C.b,X		; Decrement memory $4C.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	jmp L06212E.w		; Jump to L06212E.w [Flow: jump]
	dec $2F.b,X		; Decrement memory $2F.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	cmp ($C6.b)		; Compare accumulator (indirect) ($C6.b) [Reads: Direct Page, Accumulator] [Flags: ZCN]
	mvp $48,$44		; Move block positive $48,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$306A.w		; Exclusive OR #$306A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($22.b),Y		; AND accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	cpx $3230.w		; Compare $3230.w with X register [Reads: X Index] [Flags: ZCN]
	tda		; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($A9.b,S),Y		; AND accumulator (stack relative indirect indexed) ($A9.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sbc ($6A.b),Y		; Subtract with carry ($6A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $30, $63		; Invalid branch target (bmi L06190D) ; Branch if minus to $30, $63 [Flow: branch]
	bit $02.b,X		; Test bits $02.b,X [Reads: Direct Page, X Index] [Flags: VNZ] [Flow: branch]
	bit $38.b,X		; Test bits $38.b,X [Reads: Direct Page, X Index] [Flags: VNZ] [Flow: branch]
	and $02FF.w,Y		; AND accumulator with memory $02FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $0403.w		; Test and reset bits $0403.w [Reads: Accumulator] [Flags: Z]
	jsl $030001.l		; Jump to subroutine long $030001.l [Writes: Stack Pointer] [Flow: call]
	and $01.b		; Logical AND $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1C.b		; Logical OR $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $0122.w		; Arithmetic shift left $0122.w [Flags: ZCN]
	brk $03.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	ora ($06.b,X)		; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $190E.w		; Test and reset bits $190E.w [Reads: Accumulator] [Flags: Z]
	ora $1C.b,S		; OR accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tsb $0A28.w		; Test and set bits $0A28.w [Reads: Accumulator] [Flags: Z]
	ora $1C.b,S		; OR accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $101C.w,Y		; OR accumulator with memory $101C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $1C.b,S		; AND accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $05.b,S		; AND accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $1C.b,S		; AND accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $03.b		; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: ZCN]
	bit $021C.w		; Test bits $021C.w with accumulator [Reads: Accumulator] [Flags: VNZ]
	cop $01.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $25.b,S		; OR accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $0502.w		; Test and reset bits $0502.w [Reads: Accumulator] [Flags: Z]
	trb $2205.w		; Test and reset bits $2205.w [Reads: Accumulator] [Flags: Z]
	trb $0503.w		; Test and reset bits $0503.w [Reads: Accumulator] [Flags: Z]
	cop $01.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $22.b,S		; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $1100.w		; Test and reset bits $1100.w [Reads: Accumulator] [Flags: Z]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	trb $0206.w		; Test and reset bits $0206.w [Reads: Accumulator] [Flags: Z]
	tsb $1C10.w		; Test and set bits $1C10.w [Reads: Accumulator] [Flags: Z]
	trb $0710.w		; Test and reset bits $0710.w [Reads: Accumulator] [Flags: Z]
	and $1C.b,S		; AND accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $0F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1C.b,S		; AND accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $02.b		; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: ZCN]
	ora ($0F.b,X)		; Logical OR ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $0510.w		; Test and reset bits $0510.w [Reads: Accumulator] [Flags: Z]
	ora [$25.b]		; OR accumulator with memory (long) [$25.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $0504.w		; Test and reset bits $0504.w [Reads: Accumulator] [Flags: Z]
	ora $1C.b		; Logical OR $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $06.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	trb $0509.w		; Test and reset bits $0509.w [Reads: Accumulator] [Flags: Z]
	ora ($05.b),Y		; OR accumulator with memory ($05.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1C06.w		; Logical OR $1C06.w with accumulator [Writes: Accumulator] [Flags: ZN]
	trb $2405.w		; Test and reset bits $2405.w [Reads: Accumulator] [Flags: Z]
	trb $0504.w		; Test and reset bits $0504.w [Reads: Accumulator] [Flags: Z]
	.db $10, $07		; Invalid branch target (bpl L061931) ; Branch if plus to $10, $07 [Flow: branch]
	ora $1C240F.l		; OR accumulator with memory (long) $1C240F.l [Writes: Accumulator] [Flags: ZN]
	brk $05.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $1C.b		; Test bits $1C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	.db $10, $05		; Invalid branch target (bpl L06193A) ; Branch if plus to $10, $05 [Flow: branch]
	asl $0D1C.w		; Arithmetic shift left $0D1C.w [Flags: ZCN]
L061938:
	trb $0E1C.w		; Test and reset bits $0E1C.w [Reads: Accumulator] [Flags: Z]
	trb $051C.w		; Test and reset bits $051C.w [Reads: Accumulator] [Flags: Z]
	bit $1C.b		; Test bits $1C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora ($07.b),Y		; OR accumulator with memory ($07.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $0C1C.w		; Test and reset bits $0C1C.w [Reads: Accumulator] [Flags: Z]
	ora $1C.b,S		; OR accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $1C06.w		; Arithmetic shift left $1C06.w [Flags: ZCN]
	ora $22.b		; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $110A.w		; Test and reset bits $110A.w [Reads: Accumulator] [Flags: Z]
	trb $0511.w		; Test and reset bits $0511.w [Reads: Accumulator] [Flags: Z]
	trb $061C.w		; Test and reset bits $061C.w [Reads: Accumulator] [Flags: Z]
	ora $0E.b,S		; OR accumulator with stack relative $0E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $461C.w		; Arithmetic shift left $461C.w [Flags: ZCN]
	trb $0505.w		; Test and reset bits $0505.w [Reads: Accumulator] [Flags: Z]
	ora ($15.b),Y		; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $191C.w		; Test and reset bits $191C.w [Reads: Accumulator] [Flags: Z]
	ora $23.b,S		; OR accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $0500.w		; Test and reset bits $0500.w [Reads: Accumulator] [Flags: Z]
	bit $1C.b		; Test bits $1C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	cpx $02FF.w		; Compare $02FF.w with X register [Reads: X Index] [Flags: ZCN]
	dec A		; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	stx $22.b,Y		; Store X register $22.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	brk $9C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $15.b		; Logical AND $15.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$0A3B.w		; Logical OR #$0A3B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor [$02.b],Y		; Exclusive OR accumulator with memory (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $F8.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $1528.w		; Store zero to $1528.w
	asl $3C.b		; Arithmetic shift left $3C.b [Reads: Direct Page] [Flags: ZCN]
	lsr $6AEF.w,X		; Logical shift right $6AEF.w,X [Reads: X Index] [Flags: ZCN]
	and $9810.w,X		; AND accumulator with memory $9810.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	and $07.b		; Logical AND $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $3FEF.w,X		; Rotate left $3FEF.w,X [Reads: X Index] [Flags: ZCN]
	pei ($40.b)		; Push effective indirect address ($40.b) [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($41.b,X)		; Exclusive OR accumulator with memory ($41.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $23		; opcode wdm $23 ; Reserved instruction
	sbc $224300.l,X		; Subtract with carry (long,X) $224300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	eor ($02.b,X)		; Exclusive OR accumulator with memory ($02.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	jmp.w [$63A6]		; Jump long indirect [$63A6] [Flow: jump]
	stz $44.b		; Store zero to $44.b
	and $41.b,S		; AND accumulator with stack relative $41.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $49.b		; Arithmetic shift left $49.b [Reads: Direct Page] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr $4B.b		; Logical shift right $4B.b [Reads: Direct Page] [Flags: ZCN]
	jmp.w [$6306]		; Jump long indirect [$6306] [Flow: jump]
	adc $4C.b		; Add $4C.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	asl $A8.b		; Arithmetic shift left $A8.b [Reads: Direct Page] [Flags: ZCN]
	eor ($A8.b)		; Exclusive OR accumulator with memory (indirect) ($A8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4D.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($4D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr $83A8.w		; Logical shift right $83A8.w [Flags: ZCN]
	brk $50.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $54.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0C.b,X		; Exclusive OR accumulator with memory $0C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	adc $56.b,S		; Add with carry (stack relative) $56.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	ora ($56.b,X)		; Logical OR ($56.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lsr $62.b,X		; Logical shift right $62.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	mvn $DC,$06		; Move block negative $DC,$06 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc $6E.b,X		; Subtract $6E.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lda $6390.w,Y		; Load $6390.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	brk $A5.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $5F.b,S		; Add with carry (stack relative) $5F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	asl $DC.b		; Arithmetic shift left $DC.b [Reads: Direct Page] [Flags: ZCN]
	asl $2C.b		; Arithmetic shift left $2C.b [Reads: Direct Page] [Flags: ZCN]
	adc $C6.b,S		; Add with carry (stack relative) $C6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc $3B.b		; Subtract $3B.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	adc $64.b		; Add $64.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	tsb $A8.b		; Test and set bits $A8.b [Reads: Accumulator] [Flags: Z]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lsr $DC.b,X		; Logical shift right $DC.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ldx $69.b		; Load $69.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	eor ($A8.b)		; Exclusive OR accumulator with memory (indirect) ($A8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $DCCD.w		; Test and set bits $DCCD.w [Reads: Accumulator] [Flags: Z]
	asl $9F.b		; Arithmetic shift left $9F.b [Reads: Direct Page] [Flags: ZCN]
	ora ($74.b)		; OR accumulator with memory (indirect) ($74.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $A8.b,X		; Add $A8.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $76.b,S		; Add with carry (stack relative) $76.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	ora $73.b		; Logical OR $73.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $793B.w,Y		; Load $793B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($62.b)		; OR accumulator with memory (indirect) ($62.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	ora $4C.b,S		; OR accumulator with stack relative $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ror $62.b,X		; Rotate right $62.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	adc $730B.w,X		; Add $730B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	dec $E5.b		; Decrement $E5.b [Reads: Direct Page] [Flags: ZN]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	.db $80, $9F		; Invalid branch target (bra L0619AA) ; Branch always to $80, $9F [Flow: branch]
	sta ($82.b,X)		; Store accumulator ($82.b,X) [Reads: Direct Page, Accumulator, X Index]
	ldx #$8483.w		; Load #$8483.w into X register [Writes: X Index] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	stz $85.b		; Store zero to $85.b
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora $90.b,X		; OR accumulator with memory $90.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phb		; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sbc $63.b,X		; Subtract $63.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	sty $24A2.w		; Store Y register to $24A2.w [Reads: Y Index]
	sta $62A8.w		; Store accumulator to $62A8.w [Reads: Accumulator]
	stx $161C.w		; Store X register to $161C.w [Reads: X Index]
	stx $E515.w		; Store X register to $E515.w [Reads: X Index]
	sta ($92.b),Y		; Store accumulator ($92.b),Y [Reads: Direct Page, Accumulator, Y Index]
	ldx $63.b		; Load $63.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $A2.b,Y		; Load X register $A2.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	sta ($94.b,S),Y		; Store accumulator (stack relative indirect indexed) ($94.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lsr $A8.b,X		; Logical shift right $A8.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	sta $A8.b,X		; Store accumulator to $A8.b,X [Reads: Accumulator, X Index]
	lsr $15.b,X		; Logical shift right $15.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	bit #$9796.w		; Test bits #$9796.w with accumulator [Reads: Accumulator] [Flags: Z]
	cmp $9863.w,Y		; Compare accumulator $9863.w,Y [Reads: Y Index] [Flags: ZCN]
	sta $504C.w,Y		; Store accumulator to $504C.w,Y [Reads: Accumulator, Y Index]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	adc $9A.b,S		; Add with carry (stack relative) $9A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	tsb $9B.b		; Test and set bits $9B.b [Reads: Accumulator] [Flags: Z]
	ora $A2.b,X		; OR accumulator with memory $A2.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $26FF.w,X		; Store zero to $26FF.w,X [Reads: X Index]
	ora ($00.b,X)		; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $2E.b		; Logical OR $2E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $01.b		; Rotate left $01.b [Reads: Direct Page] [Flags: ZCN]
	rol $0A.b		; Rotate left $0A.b [Reads: Direct Page] [Flags: ZCN]
	ora ($1C.b,X)		; Logical OR ($1C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $0126.w		; Arithmetic shift left $0126.w [Flags: ZCN]
	and $1C.b,S		; AND accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $05.b,S		; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	bpl L061A7D.b		; Branch if plus to L061A7D.b [Flow: branch]
	and [$01.b]		; AND accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $1C.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $2210.w		; Test and reset bits $2210.w [Reads: Accumulator] [Flags: Z]
	trb $1001.w		; Test and reset bits $1001.w [Reads: Accumulator] [Flags: Z]
	ora $0127.w		; Logical OR $0127.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $05.b		; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	trb $1C15.w		; Test and reset bits $1C15.w [Reads: Accumulator] [Flags: Z]
	trb $012A.w		; Test and reset bits $012A.w [Reads: Accumulator] [Flags: Z]
	ora ($10.b,X)		; Logical OR ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $22.b,X		; OR accumulator with memory $22.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	trb $012A.w		; Test and reset bits $012A.w [Reads: Accumulator] [Flags: Z]
L061A7D:
	ora ($15.b,X)		; Logical OR ($15.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $22.b,X		; OR accumulator with memory $22.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	trb $0326.w		; Test and reset bits $0326.w [Reads: Accumulator] [Flags: Z]
	and $01.b,S		; AND accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$0F.b]		; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $1C05.w		; Test and reset bits $1C05.w [Reads: Accumulator] [Flags: Z]
	trb $0305.w		; Test and reset bits $0305.w [Reads: Accumulator] [Flags: Z]
	ora ($43.b,X)		; Logical OR ($43.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0E.b,X)		; Logical OR ($0E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $05.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $1C2201.l		; Jump to subroutine long $1C2201.l [Writes: Stack Pointer] [Flow: call]
	eor $05.b,S		; Exclusive OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $0A00.w		; Test and reset bits $0A00.w [Reads: Accumulator] [Flags: Z]
	eor $0A.b,S		; Exclusive OR accumulator with stack relative $0A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $0083.w		; Arithmetic shift left $0083.w [Flags: ZCN]
	ora [$22.b],Y		; OR accumulator with memory (long indexed) [$22.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $1003.w		; Test and reset bits $1003.w [Reads: Accumulator] [Flags: Z]
	trb $051C.w		; Test and reset bits $051C.w [Reads: Accumulator] [Flags: Z]
	and $1C.b,S		; AND accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $05.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	and [$00.b]		; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $1C43.w		; Test and reset bits $1C43.w [Reads: Accumulator] [Flags: Z]
	ora $22.b		; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $0083.w		; Test and reset bits $0083.w [Reads: Accumulator] [Flags: Z]
	.db $82, $03, $05		; Invalid branch target (brl L061FC0) ; Branch always long to $82, $03, $05 [Flow: branch]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	ora $021C23.l		; OR accumulator with memory (long) $021C23.l [Writes: Accumulator] [Flags: ZN]
	ora $1C.b		; Logical OR $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $25.b		; Logical OR $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $0122.w		; Test and reset bits $0122.w [Reads: Accumulator] [Flags: Z]
	jsl $10041C.l		; Jump to subroutine long $10041C.l [Writes: Stack Pointer] [Flow: call]
	trb $0511.w		; Test and reset bits $0511.w [Reads: Accumulator] [Flags: Z]
	ora ($84.b),Y		; OR accumulator with memory ($84.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $40.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	ldx $1C23.w		; Load $1C23.w into X register [Writes: X Index] [Flags: ZN]
	cop $15.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $2305.w		; Test and reset bits $2305.w [Reads: Accumulator] [Flags: Z]
	trb $0D01.w		; Test and reset bits $0D01.w [Reads: Accumulator] [Flags: Z]
	ora ($24.b,X)		; Logical OR ($24.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $0F01.w		; Test and reset bits $0F01.w [Reads: Accumulator] [Flags: Z]
	trb $1C43.w		; Test and reset bits $1C43.w [Reads: Accumulator] [Flags: Z]
	ora $04.b		; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1C.b		; Logical OR $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $1C0D.w		; Test and reset bits $1C0D.w [Reads: Accumulator] [Flags: Z]
	sbc $000A26.l,X		; Subtract with carry (long,X) $000A26.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and [$06.b]		; AND accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $15.b		; Rotate left $15.b [Reads: Direct Page] [Flags: ZCN]
	ora ($B5.b,X)		; Logical OR ($B5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rol $06.b		; Rotate left $06.b [Reads: Direct Page] [Flags: ZCN]
	rol $25.b		; Rotate left $25.b [Reads: Direct Page] [Flags: ZCN]
	ora ($9F.b,X)		; Logical OR ($9F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $26.b,X		; Increment memory $26.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	asl $22.b		; Arithmetic shift left $22.b [Reads: Direct Page] [Flags: ZCN]
	eor ($05.b,X)		; Exclusive OR accumulator with memory ($05.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $FF		; opcode wdm $FF ; Reserved instruction
	sbc $5C00F7.l,X		; Subtract with carry (long,X) $5C00F7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	rol $06.b		; Rotate left $06.b [Reads: Direct Page] [Flags: ZCN]
	cop $69.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lda $A062.w,Y		; Load $A062.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $5F.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($6A.b),Y		; Subtract with carry ($6A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	rol $06.b		; Rotate left $06.b [Reads: Direct Page] [Flags: ZCN]
	ora $A8.b		; Logical OR $A8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $86.b,S		; Load accumulator (stack relative) $86.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $A5.b		; Load $A5.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	eor ($29.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($29.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $05.b		; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: ZCN]
	lda $56A2.w,Y		; Load $56A2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$71A6.w		; Add #$71A6.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	and #$0106.w		; Logical AND #$0106.w with accumulator [Writes: Accumulator] [Flags: ZN]
	stx $86.b		; Store X register to $86.b [Reads: X Index]
	per L061CDE.w		; Push effective relative address L061CDE.w [Writes: Stack Pointer]
	eor ($52.b),Y		; Exclusive OR accumulator with memory ($52.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $20.b,S		; AND accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $21.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $06.b,S		; AND accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $AA8F.w		; Test and set bits $AA8F.w [Reads: Accumulator] [Flags: Z]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	pei ($5A.b)		; Push effective indirect address ($5A.b) [Reads: Direct Page] [Writes: Stack Pointer]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	cpx $EDF8.w		; Compare $EDF8.w with X register [Reads: X Index] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsl $AC0B06.l		; Jump to subroutine long $AC0B06.l [Writes: Stack Pointer] [Flow: call]
	ldy $95.b		; Load $95.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $AEE0.w		; Load $AEE0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	bpl L061B69.b		; Branch if plus to L061B69.b [Flow: branch]
	sbc ($10.b),Y		; Subtract with carry ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	phb		; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	ora [$0B.b],Y		; OR accumulator with memory (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $B8694B.l		; Load long $B8694B.l into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $42, $FF		; opcode wdm $FF ; Reserved instruction
	eor $41.b,S		; Exclusive OR accumulator with stack relative $41.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
L061B69:
	eor ($B0.b,X)		; Exclusive OR accumulator with memory ($B0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	cpx #$0083.w		; Compare #$0083.w with X register [Reads: X Index] [Flags: ZCN]
	and [$01.b]		; AND accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($53.b),Y		; Load accumulator ($53.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $B214A8.l		; Jump to subroutine long $B214A8.l [Writes: Stack Pointer] [Flow: call]
	eor ($49.b,X)		; Exclusive OR accumulator with memory ($49.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda ($B4.b,S),Y		; Load accumulator (stack relative indirect indexed) ($B4.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $0C16ED.l,X		; Subtract with carry (long,X) $0C16ED.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $B6.b,X		; Load $B6.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	stz $A8B7.w		; Store zero to $A8B7.w
	eor ($A8.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($A8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	clv		; Clear overflow ; Clear overflow flag [Flags: V]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $62, $B9, $E0		; Bank wrapping branch target ; Push effective relative address $62, $B9, $E0 [Writes: Stack Pointer]
	and ($03.b)		; AND accumulator with memory (indirect) ($03.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$0C.b],Y		; OR accumulator with memory (long indexed) [$0C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $69BD.w,X		; Load Y register $69BD.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	clv		; Clear overflow ; Clear overflow flag [Flags: V]
	ldx $CD0C.w,Y		; Load X register $CD0C.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ora $69BF.w		; Logical OR $69BF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clv		; Clear overflow ; Clear overflow flag [Flags: V]
	cpy #$96BA.w		; Compare #$96BA.w with Y register [Reads: Y Index] [Flags: ZCN]
	bit $00.b		; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	cmp ($5A.b,X)		; Compare accumulator ($5A.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	eor ($C2.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $A2.b,S		; Compare accumulator (stack relative) $A2.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZCN]
	cpy $A8.b		; Compare $A8.b with Y register [Reads: Direct Page, Y Index] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	cpy #$09BA.w		; Compare #$09BA.w with Y register [Reads: Y Index] [Flags: ZCN]
	brk $C5.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $4B.b		; Decrement $4B.b [Reads: Direct Page] [Flags: ZN]
	adc #$A7A8.w		; Add #$A7A8.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	adc $A8A4.w		; Add $A8A4.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	cmp [$A8.b]		; Compare accumulator (long) [$A8.b] [Reads: Direct Page, Accumulator] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$CA09.w		; Compare #$CA09.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	sbc $010003.l,X		; Subtract with carry (long,X) $010003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora [$01.b]		; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $020808.l		; Jump to subroutine long $020808.l [Writes: Stack Pointer] [Flow: call]
	asl $0804.w		; Arithmetic shift left $0804.w [Flags: ZCN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $08.b		; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $83.b		; Test and set bits $83.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $060108.l		; Jump to subroutine long $060108.l [Writes: Stack Pointer] [Flow: call]
	ora $090085.l		; OR accumulator with memory (long) $090085.l [Writes: Accumulator] [Flags: ZN]
	jsl $070604.l		; Jump to subroutine long $070604.l [Writes: Stack Pointer] [Flow: call]
	asl $08.b		; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZCN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($00.b,X)		; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($26.b,X)		; Logical OR ($26.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $0006.w		; Test and set bits $0006.w [Reads: Accumulator] [Flags: Z]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	ora ($06.b,X)		; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	asl $0300.w		; Arithmetic shift left $0300.w [Flags: ZCN]
	and $0F.b,S		; AND accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $0306.w		; Arithmetic shift left $0306.w [Flags: ZCN]
	tsb $00.b		; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ora $04.b,S		; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $000001.l		; OR accumulator with memory (long) $000001.l [Writes: Accumulator] [Flags: ZN]
	ora ($06.b,X)		; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $22.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $000C0D.l		; OR accumulator with memory (long) $000C0D.l [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$04.b]		; OR accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	asl $07.b		; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZCN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $0F.b		; Rotate left $0F.b [Reads: Direct Page] [Flags: ZCN]
	ora ($07.b,X)		; Logical OR ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $030022.l		; OR accumulator with memory (long) $030022.l [Writes: Accumulator] [Flags: ZN]
	asl $0206.w		; Arithmetic shift left $0206.w [Flags: ZCN]
	cop $23.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $021C.w		; Test and reset bits $021C.w [Reads: Accumulator] [Flags: Z]
	ora $0F060F.l		; OR accumulator with memory (long) $0F060F.l [Writes: Accumulator] [Flags: ZN]
	ora $010202.l		; OR accumulator with memory (long) $010202.l [Writes: Accumulator] [Flags: ZN]
	ora $06.b,S		; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1B.b,S		; OR accumulator with stack relative $1B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($15.b),Y		; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $06.b,S		; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $010000.l		; OR accumulator with memory (long) $010000.l [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $03.b		; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: ZCN]
	ora $04.b,S		; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1C.b,S		; OR accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $070203.l		; Jump to subroutine long $070203.l [Writes: Stack Pointer] [Flow: call]
	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	phb		; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora #$0F02.w		; Logical OR #$0F02.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $01.b,S		; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($1B.b,X)		; Logical OR ($1B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $0D1C.w		; Test and reset bits $0D1C.w [Reads: Accumulator] [Flags: Z]
	and $03.b,S		; AND accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $04.b		; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	asl $00.b		; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZCN]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $000701.l		; Jump to subroutine long $000701.l [Writes: Stack Pointer] [Flow: call]
	ora #$0510.w		; Logical OR #$0510.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $030E.w		; Logical OR $030E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $83.b,S		; OR accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $60.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0C.b,X		; OR accumulator with memory $0C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	asl $1B.b		; Arithmetic shift left $1B.b [Reads: Direct Page] [Flags: ZCN]
	tsb $03.b		; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	ora #$0C01.w		; Logical OR #$0C01.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($03.b,X)		; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $04.b		; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $0F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $07.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $0703.w		; Test and reset bits $0703.w [Reads: Accumulator] [Flags: Z]
	.db $10, $24		; Invalid branch target (bpl L061CB0) ; Branch if plus to $10, $24 [Flow: branch]
	ora $030B0B.l		; OR accumulator with memory (long) $030B0B.l [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $030D0F.l		; OR accumulator with memory (long) $030D0F.l [Writes: Accumulator] [Flags: ZN]
	ora $1C.b,S		; OR accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0F2201.l		; OR accumulator with memory (long) $0F2201.l [Writes: Accumulator] [Flags: ZN]
	ora ($0D.b,X)		; Logical OR ($0D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $080222.l		; OR accumulator with memory (long) $080222.l [Writes: Accumulator] [Flags: ZN]
	asl $0F0F.w		; Arithmetic shift left $0F0F.w [Flags: ZCN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $0F01.w		; Arithmetic shift left $0F01.w [Flags: ZCN]
	ora $0B4301.l		; OR accumulator with memory (long) $0B4301.l [Writes: Accumulator] [Flags: ZN]
	ora $010F02.l		; OR accumulator with memory (long) $010F02.l [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sbc $8328E0.l,X		; Subtract with carry (long,X) $8328E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	trb $4D47.w		; Test and reset bits $4D47.w [Reads: Accumulator] [Flags: Z]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	jmp $DEA2.w		; Jump to $DEA2.w [Flow: jump]
	sbc $4CA14E.l,X		; Subtract with carry (long,X) $4CA14E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	lsr $4CA1.w		; Logical shift right $4CA1.w [Flags: ZCN]
	lsr $298C.w		; Logical shift right $298C.w [Flags: ZCN]
	eor [$57.b]		; Exclusive OR accumulator with memory (long) [$57.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b)		; Exclusive OR accumulator with memory (indirect) ($53.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	brk $3D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda [$53.b]		; Load accumulator (long) [$53.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $53A7.w,X		; AND accumulator with memory $53A7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $640B.w,X		; AND accumulator with memory $640B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor [$6A.b]		; Exclusive OR accumulator with memory (long) [$6A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $56.b,X		; Exclusive OR accumulator with memory $56.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	.db $62, $1D, $61		; Invalid branch target (per L067DFB) ; Push effective relative address $62, $1D, $61 [Writes: Stack Pointer]
L061CDE:
	.db $62, $AC, $13		; Invalid branch target (per L06308D) ; Push effective relative address $62, $AC, $13 [Writes: Stack Pointer]
	ldy $AD.b		; Load $AD.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx $1BA4.w		; Load $1BA4.w into X register [Writes: X Index] [Flags: ZN]
L061CE6:
	trb $9392.w		; Test and reset bits $9392.w [Reads: Accumulator] [Flags: Z]
	ora $6867.w,X		; OR accumulator with memory $6867.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda [$67.b],Y		; Load accumulator (long indexed) [$67.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	stz $35.b,X		; Store zero to $35.b,X [Reads: X Index]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldx $26.b,Y		; Load X register $26.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	cmp $0163.w,Y		; Compare accumulator $0163.w,Y [Reads: Y Index] [Flags: ZCN]
	asl $DF93.w		; Arithmetic shift left $DF93.w [Flags: ZCN]
	and #$DF1F.w		; Logical AND #$DF1F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and #$1E05.w		; Logical AND #$1E05.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc $2F09.w		; Increment $2F09.w [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp ($D2.b),Y		; Compare accumulator ($D2.b),Y [Reads: Direct Page, Accumulator, Y Index] [Flags: ZCN]
	.db $62, $06, $0D		; Invalid branch target (per L062A10) ; Push effective relative address $62, $06, $0D [Writes: Stack Pointer]
	and ($1F.b),Y		; AND accumulator with memory ($1F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp L064C1C.w		; Jump to L064C1C.w [Flow: jump]
	ora $31.b,S		; OR accumulator with stack relative $31.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $302F.w		; Arithmetic shift left $302F.w [Flags: ZCN]
	asl $06.b		; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZCN]
	jmp.w [$66DD]		; Jump long indirect [$66DD] [Flow: jump]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora ($CC.b,X)		; Logical OR ($CC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($22.b),Y		; OR accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($03.b,X)		; Load accumulator ($03.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda [$DC.b]		; Load accumulator (long) [$DC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $CB63.w,X		; Compare accumulator $CB63.w,X [Reads: X Index] [Flags: ZCN]
	cpx #$5B5E.w		; Compare #$5B5E.w with X register [Reads: X Index] [Flags: ZCN]
L061D29:
	asl $17.b,X		; Arithmetic shift left $17.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ldy #$1918.w		; Load #$1918.w into Y register [Writes: Y Index] [Flags: ZN]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	asl $6A.b		; Arithmetic shift left $6A.b [Reads: Direct Page] [Flags: ZCN]
	ldx $4CAC.w		; Load $4CAC.w into X register [Writes: X Index] [Flags: ZN]
	ora ($B7.b,X)		; Logical OR ($B7.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor $216A.w,X		; Exclusive OR accumulator with memory $216A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $1D.b		; Load $1D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($62.b,X)		; Add with carry ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	lda ($6A.b)		; Load accumulator (indirect) ($6A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cmp $AC9420.l		; Compare accumulator (long) $AC9420.l [Reads: Accumulator] [Flags: ZCN]
	stx $44.b,Y		; Store X register $44.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $1D.b		; Store X register to $1D.b [Reads: X Index]
	adc [$68.b]		; Add with carry (long) [$68.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ora $F8DE.w,X		; OR accumulator with memory $F8DE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($2DA8.w,X)		; Jump to subroutine indirect indexed ($2DA8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpx $7A.b		; Compare $7A.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	bne L061D29.b		; Branch if not equal to L061D29.b [Flow: branch]
	bvc L061CE6.b		; Branch if overflow clear to L061CE6.b [Flow: branch]
	sta $DF86.w		; Store accumulator to $DF86.w [Reads: Accumulator]
	and #$1D6A.w		; Logical AND #$1D6A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp.w [$6DDD]		; Jump long indirect [$6DDD] [Flow: jump]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	and $FC1D.w		; Logical AND $FC1D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($9F.b,X)		; Load accumulator ($9F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	mvp $E6,$8D		; Move block positive $E6,$8D [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	asl $DCDE.w,X		; Arithmetic shift left $DCDE.w,X [Reads: X Index] [Flags: ZCN]
	inc $3D.b		; Increment $3D.b [Reads: Direct Page] [Flags: ZN]
	jmp ($E603.w)		; Jump indirect to ($E603.w) [Flow: jump]
	sbc ($71.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($71.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc $06.b,X		; Subtract $06.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $E3.b,S		; Add with carry (stack relative) $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	ora $0303.w,X		; OR accumulator with memory $0303.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	trb $D231.w		; Test and reset bits $D231.w [Reads: Accumulator] [Flags: Z]
	dec $D2.b		; Decrement $D2.b [Reads: Direct Page] [Flags: ZN]
	mvp $98,$C7		; Move block positive $98,$C7 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	stz $33.b		; Store zero to $33.b
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lsr $1DE6.w		; Logical shift right $1DE6.w [Flags: ZCN]
	cmp $3138.w,Y		; Compare accumulator $3138.w,Y [Reads: Y Index] [Flags: ZCN]
	lda #$4B4B.w		; Load #$4B4B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp ($33.b,S),Y		; Compare accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer] [Flags: ZCN]
	adc #$3C62.w		; Add #$3C62.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	ora ($A6.b,X)		; Logical OR ($A6.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	jsl $440F4C.l		; Jump to subroutine long $440F4C.l [Writes: Stack Pointer] [Flow: call]
	sec		; Set carry ; Set carry flag [Flags: C]
	eor ($53.b,X)		; Exclusive OR accumulator with memory ($53.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl $42.b		; Arithmetic shift left $42.b [Reads: Direct Page] [Flags: ZCN]
	eor $6A.b,S		; Exclusive OR accumulator with stack relative $6A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $44.b,X		; Exclusive OR accumulator with memory $44.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($45.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($45.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr $EB.b		; Logical shift right $EB.b [Reads: Direct Page] [Flags: ZCN]
	sta ($FF.b,X)		; Store accumulator ($FF.b,X) [Reads: Direct Page, Accumulator, X Index]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $08.b		; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	ora [$06.b]		; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $01		; Invalid branch target (bpl L061DB9) ; Branch if plus to $10, $01 [Flow: branch]
	ora ($10.b,X)		; Logical OR ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $2303.w		; Test and reset bits $2303.w [Reads: Accumulator] [Flags: Z]
	ora ($87.b,X)		; Logical OR ($87.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($1C.b,X)		; Logical OR ($1C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $0125.w		; Test and reset bits $0125.w [Reads: Accumulator] [Flags: Z]
	and $08.b,S		; AND accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $10.b		; Arithmetic shift left $10.b [Reads: Direct Page] [Flags: ZCN]
	and $1C.b,S		; AND accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($06.b),Y		; OR accumulator with memory ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $0305.w		; Test and reset bits $0305.w [Reads: Accumulator] [Flags: Z]
	ora $00.b,S		; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$06.b]		; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $19.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $10.b		; Arithmetic shift left $10.b [Reads: Direct Page] [Flags: ZCN]
	ora $1C.b,S		; OR accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $1C.b		; Arithmetic shift left $1C.b [Reads: Direct Page] [Flags: ZCN]
	asl $1C.b,X		; Arithmetic shift left $1C.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	jsl $0D071B.l		; Jump to subroutine long $0D071B.l [Writes: Stack Pointer] [Flow: call]
	trb $0D09.w		; Test and reset bits $0D09.w [Reads: Accumulator] [Flags: Z]
	trb $1005.w		; Test and reset bits $1005.w [Reads: Accumulator] [Flags: Z]
	ora $23.b,S		; OR accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $1605.w		; Test and reset bits $1605.w [Reads: Accumulator] [Flags: Z]
	trb $061B.w		; Test and reset bits $061B.w [Reads: Accumulator] [Flags: Z]
	brk $09.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $01021C.l		; Jump to subroutine long $01021C.l [Writes: Stack Pointer] [Flow: call]
	.db $10, $03		; Invalid branch target (bpl L061DFE) ; Branch if plus to $10, $03 [Flow: branch]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	trb $0006.w		; Test and reset bits $0006.w [Reads: Accumulator] [Flags: Z]
L061DFF:
	ora $1C1B.w,Y		; OR accumulator with memory $1C1B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $27.b,S		; OR accumulator with stack relative $27.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $1206.w		; Test and reset bits $1206.w [Reads: Accumulator] [Flags: Z]
	asl $091B.w		; Arithmetic shift left $091B.w [Flags: ZCN]
	brk $07.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($26.b,X)		; Logical OR ($26.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $0E09.w		; Test and reset bits $0E09.w [Reads: Accumulator] [Flags: Z]
	ora $06.b		; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $001C.w		; Test and reset bits $001C.w [Reads: Accumulator] [Flags: Z]
	asl $07.b		; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZCN]
	ora ($0F.b,X)		; Logical OR ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $1C.b,S		; AND accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1D051D.l,X		; Logical OR long $1D051D.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$00.b]		; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $1D02.w		; Test and set bits $1D02.w [Reads: Accumulator] [Flags: Z]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($10.b,X)		; Logical OR ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $1D101D.l		; OR accumulator with memory (long) $1D101D.l [Writes: Accumulator] [Flags: ZN]
	ora $07.b		; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $050C.w,X		; OR accumulator with memory $050C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $16.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1000.w,X		; OR accumulator with memory $1000.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1D.b,S		; OR accumulator with stack relative $1D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1C05.w,X		; OR accumulator with memory $1C05.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $1D.b,S		; AND accumulator with stack relative $1D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($16.b,X)		; Logical OR ($16.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($07.b,X)		; Logical OR ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bpl L061E4D.b		; Branch if plus to L061E4D.b [Flow: branch]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	rol $1D.b		; Rotate left $1D.b [Reads: Direct Page] [Flags: ZCN]
L061E4D:
	ora [$00.b]		; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $011601.l		; OR accumulator with memory (long) $011601.l [Writes: Accumulator] [Flags: ZN]
	brk $10.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $27.b,S		; OR accumulator with stack relative $27.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0084.w,X		; OR accumulator with memory $0084.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $03		; Invalid branch target (bcs L061E5F) ; Branch if carry set to $B0, $03 [Flow: branch]
	brk $10.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $1D.b		; Rotate left $1D.b [Reads: Direct Page] [Flags: ZCN]
	ora $010502.l		; OR accumulator with memory (long) $010502.l [Writes: Accumulator] [Flags: ZN]
	ora $0601.w,X		; OR accumulator with memory $0601.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $02.b,S		; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0607.w,X		; OR accumulator with memory $0607.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $071D.w,X		; OR accumulator with memory $071D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $221D.w,X		; OR accumulator with memory $221D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b,X)		; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $01.b,S		; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $2407.w,X		; OR accumulator with memory $2407.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $03.b		; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: ZCN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $1D.b		; Arithmetic shift left $1D.b [Reads: Direct Page] [Flags: ZCN]
	ora $0CFF.w,X		; OR accumulator with memory $0CFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($4C.b,X)		; Load accumulator ($4C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $5FC3.w		; Logical shift right $5FC3.w [Flags: ZCN]
	sta ($79.b)		; Store accumulator (indirect) ($79.b) [Reads: Direct Page, Accumulator]
	asl $06.b		; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZCN]
	cmp #$20D4.w		; Compare #$20D4.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	tsb $0622.w		; Test and set bits $0622.w [Reads: Accumulator] [Flags: Z]
	ora [$A7.b],Y		; OR accumulator with memory (long indexed) [$A7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($3D.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($3D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec $6A.b		; Decrement $6A.b [Reads: Direct Page] [Flags: ZN]
	sta ($79.b)		; Store accumulator (indirect) ($79.b) [Reads: Direct Page, Accumulator]
L061E9A:
	asl $D5.b		; Arithmetic shift left $D5.b [Reads: Direct Page] [Flags: ZCN]
	dec $E5.b,X		; Decrement memory $E5.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	sbc $17.b		; Subtract $17.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	tsb $0606.w		; Test and set bits $0606.w [Reads: Accumulator] [Flags: Z]
	lda $A4AE.w		; Load $A4AE.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $4F.b		; Load $4F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($79.b)		; Store accumulator (indirect) ($79.b) [Reads: Direct Page, Accumulator]
	and $E0D762.l,X		; AND accumulator with memory (long,X) $E0D762.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $D1.b		; Rotate left $D1.b [Reads: Direct Page] [Flags: ZCN]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
L061EB1:
	adc $20.b		; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	jsr L06641D.w		; Jump to subroutine at L06641D.w [Writes: Stack Pointer] [Flow: call]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ldy #$92E3.w		; Load #$92E3.w into Y register [Writes: Y Index] [Flags: ZN]
	adc $0163.w,Y		; Add $0163.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	bra L061E9A.b		; Branch always to L061E9A.b [Flow: branch]
	adc ($DC.b)		; Add with carry (indirect) ($DC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	cmp $7A.b		; Compare $7A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: ZCN]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	ldx $F1DD.w		; Load $F1DD.w into X register [Writes: X Index] [Flags: ZN]
	ldy $53DE.w		; Load $53DE.w into Y register [Writes: Y Index] [Flags: ZN]
	adc $0163.w,Y		; Add $0163.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cmp $E172E0.l,X		; Compare accumulator (long,X) $E172E0.l,X [Reads: Accumulator, X Index] [Flags: ZCN]
	cmp ($80.b,S),Y		; Compare accumulator (stack relative indirect indexed) ($80.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer] [Flags: ZCN]
	lda ($EC.b)		; Load accumulator (indirect) ($EC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $62, $E2, $07		; Invalid branch target (per L0626BB) ; Push effective relative address $62, $E2, $07 [Writes: Stack Pointer]
	cmp ($79.b)		; Compare accumulator (indirect) ($79.b) [Reads: Direct Page, Accumulator] [Flags: ZCN]
	adc $E5.b,S		; Add with carry (stack relative) $E5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	cmp $E0E7E6.l,X		; Compare accumulator (long,X) $E0E7E6.l,X [Reads: Accumulator, X Index] [Flags: ZCN]
	adc $E8.b,S		; Add with carry (stack relative) $E8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	asl $A1.b		; Arithmetic shift left $A1.b [Reads: Direct Page] [Flags: ZCN]
	sbc $82.b,S		; Subtract stack-relative $82.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	cpx $5E96.w		; Compare $5E96.w with X register [Reads: X Index] [Flags: ZCN]
	adc $62.b		; Add $62.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc $EF64.w		; Subtract $EF64.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	asl $98.b		; Arithmetic shift left $98.b [Reads: Direct Page] [Flags: ZCN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $82, $E5, $1D		; Invalid branch target (brl L063CDA) ; Branch always long to $82, $E5, $1D [Flow: branch]
	lda [$00.b],Y		; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $F4.b,S		; Add with carry (stack relative) $F4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	per L0628F3.w		; Push effective relative address L0628F3.w [Writes: Stack Pointer]
	and ($CD.b),Y		; AND accumulator with memory ($CD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	plx		; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	xce		; Exchange carry bit to set emulation or native mode ; Exchange carry and emulation bits [Flags: C]
	trb $B76A.w		; Test and reset bits $B76A.w [Reads: Accumulator] [Flags: Z]
	brk $8C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $FC.b,S		; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	cpx #$0020.w		; Compare #$0020.w with X register [Reads: X Index] [Flags: ZCN]
	sbc $01.b		; Subtract $01.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ora $02A5.w,X		; OR accumulator with memory $02A5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $4E02.w		; Store accumulator to $4E02.w [Reads: Accumulator]
	jsr ($D372.w,X)		; Jump to subroutine indirect indexed ($D372.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $C2.b,S		; OR accumulator with stack relative $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $E5.b		; Test and set bits $E5.b [Reads: Accumulator] [Flags: Z]
	.db $90, $05		; Invalid branch target (bcc L061F21) ; Branch if carry clear to $90, $05 [Flow: branch]
	mvn $E6,$E5		; Move block negative $E6,$E5 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	xce		; Exchange carry bit to set emulation or native mode ; Exchange carry and emulation bits [Flags: C]
	sta [$D8.b],Y		; Store accumulator (long indexed) [$D8.b],Y [Reads: Direct Page, Accumulator, Y Index]
	asl $1D.b		; Arithmetic shift left $1D.b [Reads: Direct Page] [Flags: ZCN]
	adc $0763.w,Y		; Add $0763.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp $00FF.w,Y		; Compare accumulator $00FF.w,Y [Reads: Y Index] [Flags: ZCN]
	.db $62, $09, $08		; Invalid branch target (per L062737) ; Push effective relative address $62, $09, $08 [Writes: Stack Pointer]
	lda #$2E1E.w		; Load #$2E1E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc ($E3.b,X)		; Subtract with carry ($E3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	ldx $79.b,Y		; Load X register $79.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	adc $FE.b,S		; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	.db $62, $0C, $63		; Bank wrapping branch target ; Push effective relative address $62, $0C, $63 [Writes: Stack Pointer]
	asl $1D07.w		; Arithmetic shift left $1D07.w [Flags: ZCN]
	ora $2E.b		; Logical OR $2E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc ($E3.b,X)		; Subtract with carry ($E3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora $6379.w,X		; OR accumulator with memory $6379.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc [$12.b]		; Add with carry (long) [$12.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ora ($9F.b,X)		; Logical OR ($9F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor ($83.b,X)		; Exclusive OR accumulator with memory ($83.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	brk $C2.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $82.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $6691.w,X		; Subtract with carry $6691.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $4C.b,X		; Arithmetic shift left $4C.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	jmp $E32149.l		; Jump long to $E32149.l [Flow: jump]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr $04.b,X		; Logical shift right $04.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	jsl $23D13F.l		; Jump to subroutine long $23D13F.l [Writes: Stack Pointer] [Flow: call]
	bit $3F.b		; Test bits $3F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	and $26.b		; Logical AND $26.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	adc $E3.b,S		; Add with carry (stack relative) $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	and [$3F.b]		; AND accumulator with memory (long) [$3F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $80.b,S		; AND accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $D3.b		; Test and set bits $D3.b [Reads: Accumulator] [Flags: Z]
	cmp ($80.b,S),Y		; Compare accumulator (stack relative indirect indexed) ($80.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer] [Flags: ZCN]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	and #$0AFF.w		; Logical AND #$0AFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0C0C.w,Y		; OR accumulator with memory $0C0C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0203.w,Y		; OR accumulator with memory $0203.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	ora ($0D.b,X)		; Logical OR ($0D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor $0E.b,S		; Exclusive OR accumulator with stack relative $0E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($E0.b,X)		; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $190D.w		; Jump to subroutine at $190D.w [Writes: Stack Pointer] [Flow: call]
	ora $0906.w,X		; OR accumulator with memory $0906.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b,X)		; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0408.w,X		; OR accumulator with memory $0408.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($0E.b),Y		; OR accumulator with memory ($0E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1C031D.l		; OR accumulator with memory (long) $1C031D.l [Writes: Accumulator] [Flags: ZN]
	asl $1D03.w		; Arithmetic shift left $1D03.w [Flags: ZCN]
	ora $1D03.w,X		; OR accumulator with memory $1D03.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0103.w,X		; OR accumulator with memory $0103.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $05.b		; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora $0F1B1D.l		; OR accumulator with memory (long) $0F1B1D.l [Writes: Accumulator] [Flags: ZN]
	ora ($1C.b,X)		; Logical OR ($1C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $1B.b,S		; AND accumulator with stack relative $1B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$1C.b]		; OR accumulator with memory (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1D.b,S		; OR accumulator with stack relative $1D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$1C.b]		; OR accumulator with memory (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0E.b,S		; OR accumulator with stack relative $0E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	eor $1D.b,S		; Exclusive OR accumulator with stack relative $1D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($0A.b,X)		; Logical OR ($0A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $19.b		; Arithmetic shift left $19.b [Reads: Direct Page] [Flags: ZCN]
	ora $061D01.l		; OR accumulator with memory (long) $061D01.l [Writes: Accumulator] [Flags: ZN]
	ora $061D.w,X		; OR accumulator with memory $061D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $01001D.l		; Jump to subroutine long $01001D.l [Writes: Stack Pointer] [Flow: call]
	jsl $19011D.l		; Jump to subroutine long $19011D.l [Writes: Stack Pointer] [Flow: call]
	asl $23.b		; Arithmetic shift left $23.b [Reads: Direct Page] [Flags: ZCN]
	ora $0700.w,X		; OR accumulator with memory $0700.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $06.b		; Test bits $06.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	tsb $05.b		; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora ($1D.b,X)		; Logical OR ($1D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $830E.w,X		; OR accumulator with memory $830E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $45.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$0706.w		; Logical OR #$0706.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $06.b		; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZCN]
	asl $0606.w		; Arithmetic shift left $0606.w [Flags: ZCN]
	ora $0501.w,X		; OR accumulator with memory $0501.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $0E051D.l		; Jump to subroutine long $0E051D.l [Writes: Stack Pointer] [Flow: call]
	ora $161C.w,X		; OR accumulator with memory $161C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $0E.b		; Arithmetic shift left $0E.b [Reads: Direct Page] [Flags: ZCN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	stz $05.b		; Store zero to $05.b
	ora $0701.w,X		; OR accumulator with memory $0701.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0606.w,X		; OR accumulator with memory $0606.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $1D.b		; Logical AND $1D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $1D2506.l		; Jump to subroutine long $1D2506.l [Writes: Stack Pointer] [Flow: call]
	brk $06.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1D.b		; Logical AND $1D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $06.b,S		; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$1B1D.w		; Logical OR #$1B1D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $1D.b		; Logical AND $1D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $0E.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1D.b,S		; AND accumulator with stack relative $1D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $0E.b		; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	asl $06.b		; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZCN]
	ora $01.b,S		; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $1D.b		; Logical AND $1D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1D.b,S		; AND accumulator with stack relative $1D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $1D0506.l		; Jump to subroutine long $1D0506.l [Writes: Stack Pointer] [Flow: call]
	ora ($19.b),Y		; OR accumulator with memory ($19.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bpl L06201E.b		; Branch if plus to L06201E.b [Flow: branch]
L06201E:
	ora [$87.b]		; OR accumulator with memory (long) [$87.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $72.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0606.w		; Test and set bits $0606.w [Reads: Accumulator] [Flags: Z]
	ora $0E.b,S		; OR accumulator with stack relative $0E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $02.b		; Logical OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0E06.w,X		; OR accumulator with memory $0E06.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $1D.b		; Arithmetic shift left $1D.b [Reads: Direct Page] [Flags: ZCN]
	asl $1C.b		; Arithmetic shift left $1C.b [Reads: Direct Page] [Flags: ZCN]
	eor $1D.b,S		; Exclusive OR accumulator with stack relative $1D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $02.b		; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: ZCN]
	asl $031D.w		; Arithmetic shift left $031D.w [Flags: ZCN]
L062037:
	bit $1D.b		; Test bits $1D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	and [$06.b]		; AND accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $1D.b		; Arithmetic shift left $1D.b [Reads: Direct Page] [Flags: ZCN]
	asl $06.b		; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZCN]
	.db $10, $01		; Invalid branch target (bpl L062042) ; Branch if plus to $10, $01 [Flow: branch]
	ora $2B1D.w,X		; OR accumulator with memory $2B1D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	.db $10, $0E		; Invalid branch target (bpl L062056) ; Branch if plus to $10, $0E [Flow: branch]
	sbc $D95E0A.l,X		; Subtract with carry (long,X) $D95E0A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $F5.b,X		; Subtract $F5.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	cmp $E863.w,Y		; Compare accumulator $E863.w,Y [Reads: Y Index] [Flags: ZCN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
L062052:
	rol $5400.w		; Rotate left $5400.w [Flags: ZCN]
	eor $48.b,S		; Exclusive OR accumulator with stack relative $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $E0.b		; Arithmetic shift left $E0.b [Reads: Direct Page] [Flags: ZCN]
	jsr $FB54.w		; Jump to subroutine at $FB54.w [Writes: Stack Pointer] [Flow: call]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lda [$DD.b]		; Load accumulator (long) [$DD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $65.b		; Arithmetic shift left $65.b [Reads: Direct Page] [Flags: ZCN]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	and $91.b,X		; Logical AND $91.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $48		; Invalid branch target (bpl L0620AE) ; Branch if plus to $10, $48 [Flow: branch]
	mvn $20,$2C		; Move block negative $20,$2C [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora ($48.b,S),Y		; OR accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr $2D2C.w		; Jump to subroutine at $2D2C.w [Writes: Stack Pointer] [Flow: call]
	jsr $2F2E.w		; Jump to subroutine at $2F2E.w [Writes: Stack Pointer] [Flow: call]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	asl $B597.w,X		; Arithmetic shift left $B597.w,X [Reads: X Index] [Flags: ZCN]
	eor [$30.b]		; Exclusive OR accumulator with memory (long) [$30.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy #$174C.w		; Compare #$174C.w with Y register [Reads: Y Index] [Flags: ZCN]
	ora ($23.b,S),Y		; OR accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	asl $D0.b,X		; Arithmetic shift left $D0.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsl $57DC3F.l		; Jump to subroutine long $57DC3F.l [Writes: Stack Pointer] [Flow: call]
	ora $C1.b,S		; OR accumulator with stack relative $C1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($17.b),Y		; AND accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($17.b)		; AND accumulator with memory (indirect) ($17.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
L06208A:
	.db $80, $CC		; Invalid branch target (bra L062058) ; Branch always to $80, $CC [Flow: branch]
	ora #$224C.w		; Logical OR #$224C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $13.b		; Compare $13.b with accumulator [Reads: Direct Page, Accumulator] [Flags: ZCN]
	and ($80.b,S),Y		; AND accumulator (stack relative indirect indexed) ($80.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr $22.b,X		; Logical shift right $22.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	per L0620CC.w		; Push effective relative address L0620CC.w [Writes: Stack Pointer]
	ora [$62.b],Y		; OR accumulator with memory (long indexed) [$62.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$02.b],Y		; AND accumulator with memory (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($80.b)		; Load accumulator (indirect) ($80.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $62, $3A, $00		; Invalid branch target (per L0620DC) ; Push effective relative address $62, $3A, $00 [Writes: Stack Pointer]
	jmp ($8023.w)		; Jump indirect to ($8023.w) [Flow: jump]
	ora ($D1.b,S),Y		; OR accumulator (stack relative indirect indexed) ($D1.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	mvn $3D,$25		; Move block negative $3D,$25 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	rol $8000.w,X		; Rotate left $8000.w,X [Reads: X Index] [Flags: ZCN]
	and $D1803F.l,X		; AND accumulator with memory (long,X) $D1803F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $008080.l,X		; AND accumulator with memory (long,X) $008080.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bra L062037.b		; Branch always to L062037.b [Flow: branch]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	and $CD.b		; Logical AND $CD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	per L0627FE.w		; Push effective relative address L0627FE.w [Writes: Stack Pointer]
	brk $44.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	adc ($80.b)		; Add with carry (indirect) ($80.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	brk $3F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $83		; opcode wdm $83 ; Reserved instruction
	brk $6C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $3B.b		; Test and set bits $3B.b [Reads: Accumulator] [Flags: Z]
	eor $80.b		; Exclusive OR $80.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
L0620CC:
	bra L062110.b		; Branch always to L062110.b [Flow: branch]
	adc $46.b,S		; Add with carry (stack relative) $46.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	brk $42.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $4A6380.l		; Jump to subroutine long $4A6380.l [Writes: Stack Pointer] [Flow: call]
	cop $45.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $6480.w		; Logical shift right $6480.w [Flags: ZCN]
	eor $804F04.l		; Exclusive OR accumulator with memory (long) $804F04.l [Writes: Accumulator] [Flags: ZN]
	and $4C54.w		; Logical AND $4C54.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $55.b		; Add $55.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ora ($1A.b,X)		; Logical OR ($1A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $50, $62		; Invalid branch target (bvc L06214A) ; Branch if overflow clear to $50, $62 [Flow: branch]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tsb $1A.b		; Test and set bits $1A.b [Reads: Accumulator] [Flags: Z]
	.db $80, $D1		; Invalid branch target (bra L0620BE) ; Branch always to $80, $D1 [Flow: branch]
	stx $5E.b,Y		; Store X register $5E.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	adc $5E.b,S		; Add with carry (stack relative) $5E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	cop $50.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $80, $63		; Bank wrapping branch target ; Push effective relative address $62, $80, $63 [Writes: Stack Pointer]
	adc $22.b,S		; Add with carry (stack relative) $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	bra L062103.b		; Branch always to L062103.b [Flow: branch]
	adc [$10.b]		; Add with carry (long) [$10.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
L0620FC:
	jsr ($1D72.w,X)		; Jump to subroutine indirect indexed ($1D72.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $006968.l,X		; AND accumulator with memory (long,X) $006968.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
L062103:
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	ror $18.b,X		; Rotate right $18.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	bra L06208A.b		; Branch always to L06208A.b [Flow: branch]
	lsr $C8.b,X		; Logical shift right $C8.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	adc #$806A.w		; Add #$806A.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
L062110:
	brk $80.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bra L0620FC.b		; Branch always to L0620FC.b [Flow: branch]
	jmp ($4280.w)		; Jump indirect to ($4280.w) [Flow: jump]
	bra L06211A.b		; Branch always to L06211A.b [Flow: branch]
L06211A:
	adc $6E56.w		; Add $6E56.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	adc $427026.l		; Add with carry (long) $427026.l [Writes: Accumulator] [Flags: VCNZ]
	and [$80.b]		; AND accumulator with memory (long) [$80.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $42.b		; Arithmetic shift left $42.b [Reads: Direct Page] [Flags: ZCN]
	.db $80, $C5		; Invalid branch target (bra L0620EC) ; Branch always to $80, $C5 [Flow: branch]
	adc $7101.w,Y		; Add $7101.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	adc ($2A.b)		; Add with carry (indirect) ($2A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	bra L062130.b		; Branch always to L062130.b [Flow: branch]
L06212E:
	cmp ($79.b),Y		; Compare accumulator ($79.b),Y [Reads: Direct Page, Accumulator, Y Index] [Flags: ZCN]
L062130:
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $0B0D03.l,X		; Subtract with carry (long,X) $0B0D03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora $01.b,S		; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $00.b		; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($25.b,X)		; Logical OR ($25.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $00.b,S		; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $44.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $07.b		; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZCN]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	jsl $030A01.l		; Jump to subroutine long $030A01.l [Writes: Stack Pointer] [Flow: call]
	ora $00.b,S		; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
L06214E:
	ora $02000F.l		; OR accumulator with memory (long) $02000F.l [Writes: Accumulator] [Flags: ZN]
	ora $1D0300.l		; OR accumulator with memory (long) $1D0300.l [Writes: Accumulator] [Flags: ZN]
	eor $01.b,S		; Exclusive OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $030718.l		; OR accumulator with memory (long) $030718.l [Writes: Accumulator] [Flags: ZN]
	ora $0F.b,S		; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$0F.b]		; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0F0907.l		; OR accumulator with memory (long) $0F0907.l [Writes: Accumulator] [Flags: ZN]
	ora $1D0405.l		; OR accumulator with memory (long) $1D0405.l [Writes: Accumulator] [Flags: ZN]
	ora ($03.b,X)		; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$0F.b]		; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $010222.l		; OR accumulator with memory (long) $010222.l [Writes: Accumulator] [Flags: ZN]
	ora $1D220C.l		; OR accumulator with memory (long) $1D220C.l [Writes: Accumulator] [Flags: ZN]
	jsl $040401.l		; Jump to subroutine long $040401.l [Writes: Stack Pointer] [Flow: call]
	ora $0F030F.l		; OR accumulator with memory (long) $0F030F.l [Writes: Accumulator] [Flags: ZN]
	jsl $070302.l		; Jump to subroutine long $070302.l [Writes: Stack Pointer] [Flow: call]
	ora $1D.b		; Logical OR $1D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $051D22.l		; OR accumulator with memory (long) $051D22.l [Writes: Accumulator] [Flags: ZN]
	ora ($0F.b,X)		; Logical OR ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0F0702.l		; OR accumulator with memory (long) $0F0702.l [Writes: Accumulator] [Flags: ZN]
	and $07.b,S		; AND accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1D1D.w		; Logical OR $1D1D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0B0B02.l		; OR accumulator with memory (long) $0B0B02.l [Writes: Accumulator] [Flags: ZN]
	brk $0F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $05.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$05.b]		; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1D.b,X		; OR accumulator with memory $1D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	eor $05.b,S		; Exclusive OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$05.b]		; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $08010F.l		; OR accumulator with memory (long) $08010F.l [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $010722.l		; OR accumulator with memory (long) $010722.l [Writes: Accumulator] [Flags: ZN]
	ora $4308.w,X		; OR accumulator with memory $4308.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0205.w,X		; OR accumulator with memory $0205.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $0D		; Invalid branch target (bpl L0621C6) ; Branch if plus to $10, $0D [Flow: branch]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	lsr $03.b		; Logical shift right $03.b [Reads: Direct Page] [Flags: ZCN]
	ora [$0C.b]		; OR accumulator with memory (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $0F051D.l		; Jump to subroutine long $0F051D.l [Writes: Stack Pointer] [Flow: call]
	ora $0F05.w,X		; OR accumulator with memory $0F05.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $830083.l		; OR accumulator with memory (long) $830083.l [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $08.b		; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
L0621D0:
	ora $051D.w,X		; OR accumulator with memory $051D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $05		; Invalid branch target (bpl L0621DA) ; Branch if plus to $10, $05 [Flow: branch]
	ora ($07.b),Y		; OR accumulator with memory ($07.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $00130F.l		; Jump to subroutine long $00130F.l [Writes: Stack Pointer] [Flow: call]
	brk $0F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$1D07.w		; Logical OR #$1D07.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $051D05.l		; OR accumulator with memory (long) $051D05.l [Writes: Accumulator] [Flags: ZN]
	.db $10, $07		; Invalid branch target (bpl L0621EE) ; Branch if plus to $10, $07 [Flow: branch]
	ora $000207.l		; OR accumulator with memory (long) $000207.l [Writes: Accumulator] [Flags: ZN]
	tsb $02.b		; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	tsb $22.b		; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
	ora $83.b		; Logical OR $83.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $B9.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L0621F3:
	tsb $071D.w		; Test and set bits $071D.w [Reads: Accumulator] [Flags: Z]
	ora $010502.l		; OR accumulator with memory (long) $010502.l [Writes: Accumulator] [Flags: ZN]
	ora $050F.w,X		; OR accumulator with memory $050F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1D4315.l		; OR accumulator with memory (long) $1D4315.l [Writes: Accumulator] [Flags: ZN]
	ora $0C.b		; Logical OR $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $0F0F1D.l		; OR accumulator with memory (long) $0F0F1D.l [Writes: Accumulator] [Flags: ZN]
	ora $0500.w		; Logical OR $0500.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$0E.b]		; OR accumulator with memory (long) [$0E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0F1D.w,X		; OR accumulator with memory $0F1D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	cmp $0E.b,X		; Compare accumulator $0E.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $031D02.l		; OR accumulator with memory (long) $031D02.l [Writes: Accumulator] [Flags: ZN]
	brk $0F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$10.b]		; OR accumulator with memory (long) [$10.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $1D		; Invalid branch target (bpl L06223D) ; Branch if plus to $10, $1D [Flow: branch]
	ora $11.b		; Logical OR $11.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF.b		; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $53.b		; Logical OR $53.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $E363.w,X		; Logical shift right $E363.w,X [Reads: X Index] [Flags: ZCN]
	ora $231C.w,X		; OR accumulator with memory $231C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $5004.w,X		; OR accumulator with memory $5004.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($0A.b),Y		; Exclusive OR accumulator with memory ($0A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	eor ($22.b)		; Exclusive OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $37E0.w		; Jump to subroutine at $37E0.w [Writes: Stack Pointer] [Flow: call]
	sty $95.b,X		; Store Y register $95.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ora $098F.w,X		; OR accumulator with memory $098F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$9308.w		; Load #$9308.w into Y register [Writes: Y Index] [Flags: ZN]
	lsr $57.b,X		; Logical shift right $57.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $15.b,X		; OR accumulator with memory $15.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $1D9D.w		; Store zero to $1D9D.w
	lsr $1D4F.w		; Logical shift right $1D4F.w [Flags: ZCN]
	lsr $1D50.w,X		; Logical shift right $1D50.w,X [Reads: X Index] [Flags: ZCN]
	lsr $73.b,X		; Logical shift right $73.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	jsl $540253.l		; Jump to subroutine long $540253.l [Writes: Stack Pointer] [Flow: call]
	ror $BB.b,X		; Rotate right $BB.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	eor $47.b,X		; Exclusive OR accumulator with memory $47.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $57.b,X		; Logical shift right $57.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $58BA.w		; Logical OR $58BA.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cli		; Clear interupt ; Clear interrupt disable flag [Flags: I]
	bpl L0621F3.b		; Branch if plus to L0621F3.b [Flow: branch]
	stz $0A.b,X		; Store zero to $0A.b,X [Reads: X Index]
	adc $86.b,S		; Add with carry (stack relative) $86.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	ora $551D.w,X		; OR accumulator with memory $551D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor [$56.b]		; Exclusive OR accumulator with memory (long) [$56.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $5B1D.w,X		; OR accumulator with memory $5B1D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $5E0108.l		; Jump to subroutine long $5E0108.l [Writes: Stack Pointer] [Flow: call]
	jmp ($7562.w,X)		; Jump indirect indexed to ($7562.w,X) [Reads: X Index] [Flow: jump]
	ora [$2B.b]		; OR accumulator with memory (long) [$2B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	bit $643B.w		; Test bits $643B.w with accumulator [Reads: Accumulator] [Flags: VNZ]
	adc $B3.b		; Add $B3.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ror $22.b		; Rotate right $22.b [Reads: Direct Page] [Flags: ZCN]
	xce		; Exchange carry bit to set emulation or native mode ; Exchange carry and emulation bits [Flags: C]
	ora $1F.b,S		; OR accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $78.b,S		; Load accumulator (stack relative) $78.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	per L062804.w		; Push effective relative address L062804.w [Writes: Stack Pointer]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	stz $6F.b		; Store zero to $6F.b
	adc $711F.w,Y		; Add $711F.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	jsl $92E080.l		; Jump to subroutine long $92E080.l [Writes: Stack Pointer] [Flow: call]
	rol $7C.b,X		; Rotate left $7C.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	adc $DD6A.w,X		; Add $DD6A.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	lsr $47.b		; Logical shift right $47.b [Reads: Direct Page] [Flags: ZCN]
	ora $796F.w,X		; OR accumulator with memory $796F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $E536.w,X		; Store accumulator to $E536.w,X [Reads: Accumulator, X Index]
	sta [$7E.b]		; Store accumulator (long) [$7E.b] [Reads: Direct Page, Accumulator]
	sbc $1D.b		; Subtract $1D.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc $3B.b		; Subtract $3B.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	jmp ($D57D.w,X)		; Jump indirect indexed to ($D57D.w,X) [Reads: X Index] [Flow: jump]
	and $35.b,X		; Logical AND $35.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
L0622AD:
	adc $902322.l,X		; Add long $902322.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $E580B2.l,X		; Add long $E580B2.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta ($E4.b,X)		; Store accumulator ($E4.b,X) [Reads: Direct Page, Accumulator, X Index]
	lda ($7B.b)		; Load accumulator (indirect) ($7B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $83.b		; Load $83.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ora $841D.w,X		; OR accumulator with memory $841D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $54.b,X		; Store accumulator to $54.b,X [Reads: Accumulator, X Index]
	sbc $E5.b		; Subtract $E5.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	adc $9F0B82.l,X		; Add long $9F0B82.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	bra L0622AD.b		; Branch always to L0622AD.b [Flow: branch]
	phb		; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lsr $358C.w,X		; Logical shift right $358C.w,X [Reads: X Index] [Flags: ZCN]
	and $8D.b,X		; Logical AND $8D.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	sta $E5.b,X		; Store accumulator to $E5.b,X [Reads: Accumulator, X Index]
	lda ($83.b)		; Load accumulator (indirect) ($83.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sty $C1.b		; Store Y register to $C1.b [Reads: Y Index]
	clv		; Clear overflow ; Clear overflow flag [Flags: V]
	cmp ($0E.b,X)		; Compare accumulator ($0E.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: ZCN]
	eor ($93.b),Y		; Exclusive OR accumulator with memory ($93.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $1D,$94		; Move block negative $1D,$94 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lda $95.b		; Load $95.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	bit $78.b		; Test bits $78.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	stx $85A8.w		; Store X register to $85A8.w [Reads: X Index]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda ($5B.b),Y		; Load accumulator ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	txs		; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ror $7A.b,X		; Rotate right $7A.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $3003.w,X		; OR accumulator with memory $3003.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$E3.b],Y		; Subtract with carry (long indexed) [$E3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $E5.b		; Subtract $E5.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	adc $86CD7B.l,X		; Add long $86CD7B.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $80, $24		; Invalid branch target (bra L06231C) ; Branch always to $80, $24 [Flow: branch]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	stx $4A.b		; Store X register to $4A.b [Reads: X Index]
	sbc ($87.b)		; Subtract with carry (indirect) ($87.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	txy		; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	adc ($95.b,S),Y		; Add with carry (stack relative indirect indexed) ($95.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	bit $79.b		; Test bits $79.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	stx $88.b		; Store X register to $88.b [Reads: X Index]
	sbc $7F.b		; Subtract $7F.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc $B2.b		; Subtract $B2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	bit #$9E9D.w		; Test bits #$9E9D.w with accumulator [Reads: Accumulator] [Flags: Z]
	cmp ($1D.b,X)		; Compare accumulator ($1D.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: ZCN]
	adc ($95.b,S),Y		; Add with carry (stack relative indirect indexed) ($95.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phb		; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda [$A8.b]		; Load accumulator (long) [$A8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $1D.b		; Subtract $1D.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	.db $90, $6A		; Invalid branch target (bcc L062383) ; Branch if carry clear to $90, $6A [Flow: branch]
	lda ($02.b,X)		; Load accumulator ($02.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	sty $1CA8.w		; Store Y register to $1CA8.w [Reads: Y Index]
	ldx #$E395.w		; Load #$E395.w into X register [Writes: X Index] [Flags: ZN]
	lda [$8D.b],Y		; Load accumulator (long indexed) [$8D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ora $3B.b,X		; OR accumulator with memory $3B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF.b		; Subtract $FF.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ora ($03.b)		; OR accumulator with memory (indirect) ($03.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0F.b		; Arithmetic shift left $0F.b [Reads: Direct Page] [Flags: ZCN]
	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($0B.b,X)		; Logical OR ($0B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $0F.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$05.b]		; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$08.b]		; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $0E.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $07.b,S		; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $070101.l		; Jump to subroutine long $070101.l [Writes: Stack Pointer] [Flow: call]
	asl $87.b		; Arithmetic shift left $87.b [Reads: Direct Page] [Flags: ZCN]
	brk $08.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0F.b,X)		; Logical OR ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $23.b,S		; OR accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($0E.b,X)		; Logical OR ($0E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0E.b,S		; OR accumulator with stack relative $0E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $090507.l		; OR accumulator with memory (long) $090507.l [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0F0F.w,X		; OR accumulator with memory $0F0F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $05140F.l		; Jump to subroutine long $05140F.l [Writes: Stack Pointer] [Flow: call]
	ora $0F0905.l		; OR accumulator with memory (long) $0F0905.l [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $07.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0F.b,X)		; Logical OR ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $06.b		; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZCN]
	ora $070501.l		; OR accumulator with memory (long) $070501.l [Writes: Accumulator] [Flags: ZN]
	ora [$04.b]		; OR accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($06.b,X)		; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	and $0900.w,X		; AND accumulator with memory $0900.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $05.b		; Test bits $05.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	jsl $090207.l		; Jump to subroutine long $090207.l [Writes: Stack Pointer] [Flow: call]
	asl $00.b		; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZCN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	and $0702.w,X		; AND accumulator with memory $0702.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $07.b		; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $05.b		; Test bits $05.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	asl $07.b		; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZCN]
	ora [$01.b]		; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $01.b		; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	ora $1D220F.l		; OR accumulator with memory (long) $1D220F.l [Writes: Accumulator] [Flags: ZN]
	tsb $0F05.w		; Test and set bits $0F05.w [Reads: Accumulator] [Flags: Z]
	ora $0911.w,X		; OR accumulator with memory $0911.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $07.b		; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$0F.b]		; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0F05.w,X		; OR accumulator with memory $0F05.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $1D.b		; Rotate left $1D.b [Reads: Direct Page] [Flags: ZCN]
	ora #$0F1C.w		; Logical OR #$0F1C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	trb $071D.w		; Test and reset bits $071D.w [Reads: Accumulator] [Flags: Z]
	ora $0F0F05.l		; OR accumulator with memory (long) $0F0F05.l [Writes: Accumulator] [Flags: ZN]
	ora $28.b		; Logical OR $28.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0F22.w,X		; OR accumulator with memory $0F22.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $0B.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1D2C02.l		; OR accumulator with memory (long) $1D2C02.l [Writes: Accumulator] [Flags: ZN]
	cop $07.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1D2C02.l		; OR accumulator with memory (long) $1D2C02.l [Writes: Accumulator] [Flags: ZN]
	cop $07.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1D2B0F.l		; OR accumulator with memory (long) $1D2B0F.l [Writes: Accumulator] [Flags: ZN]
	cop $07.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$0F.b]		; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $031D.w		; Test bits $031D.w with accumulator [Reads: Accumulator] [Flags: VNZ]
	ora $07.b		; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($0F.b,X)		; Logical OR ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora $1C03.w,X		; OR accumulator with memory $1C03.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$0F.b]		; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $021D2C.l		; OR accumulator with memory (long) $021D2C.l [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $18FF01.l		; OR accumulator with memory (long) $18FF01.l [Writes: Accumulator] [Flags: ZN]
	and ($A6.b,X)		; Logical AND ($A6.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	mvn $20,$20		; Move block negative $20,$20 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $DC53.w		; Test and set bits $DC53.w [Reads: Accumulator] [Flags: Z]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sta $E5.b,X		; Store accumulator to $E5.b,X [Reads: Accumulator, X Index]
	adc $BF.b,X		; Add $BF.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc [$82.b],Y		; Add with carry (long indexed) [$82.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	brl L0676DC.w		; Branch always long to L0676DC.w [Flow: branch]
	ror $F8.b,X		; Rotate right $F8.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	ora [$12.b],Y		; OR accumulator with memory (long indexed) [$12.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $86AB.w		; Load $86AB.w into X register [Writes: X Index] [Flags: ZN]
	brk $09.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$AC43.w		; Compare #$AC43.w with X register [Reads: X Index] [Flags: ZCN]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sbc $0202.w		; Subtract $0202.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	ora $9C.b,S		; OR accumulator with stack relative $9C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr $17AD.w,X		; Logical shift right $17AD.w,X [Reads: X Index] [Flags: ZCN]
	inc $1D.b		; Increment $1D.b [Reads: Direct Page] [Flags: ZN]
	eor ($77.b,X)		; Exclusive OR accumulator with memory ($77.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	.db $82, $82, $8E		; Bank wrapping branch target ; Branch always long to $82, $82, $8E [Flow: branch]
	lda $0A0AB0.l		; Load long $0A0AB0.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($B2.b),Y		; Load accumulator ($B2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $B39D.w		; Load $B39D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc ($23.b)		; Subtract with carry (indirect) ($23.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ldy $77.b,X		; Load Y register $77.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: ZN]
	.db $82, $82, $20		; Invalid branch target (brl L06449E) ; Branch always long to $82, $82, $20 [Flow: branch]
	ora #$A4B5.w		; Logical OR #$A4B5.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $B6.b		; Load $B6.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sbc $239D.w,X		; Subtract with carry $239D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	and [$FE.b],Y		; AND accumulator with memory (long indexed) [$FE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy $776A.w		; Compare $776A.w with Y register [Reads: Y Index] [Flags: ZCN]
	.db $82, $82, $18		; Invalid branch target (brl L063CAE) ; Branch always long to $82, $82, $18 [Flow: branch]
	sbc $E5E5A3.l,X		; Subtract with carry (long,X) $E5E5A3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	lda $3B1CB0.l		; Load long $3B1CB0.l into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $BF.b,X		; Add $BF.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lda #$8277.w		; Load #$8277.w into accumulator [Writes: Accumulator] [Flags: ZN]
	brl L0648CD.w		; Branch always long to L0648CD.w [Flow: branch]
	sbc $44.b		; Subtract $44.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	bit $E5.b		; Test bits $E5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	asl $3C.b		; Arithmetic shift left $3C.b [Reads: Direct Page] [Flags: ZCN]
	and $C6F0.w,X		; AND accumulator with memory $C6F0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc [$B8.b],Y		; Add with carry (long indexed) [$B8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	ldy $8F62.w,X		; Load Y register $8F62.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	tsb $79E5.w		; Test and set bits $79E5.w [Reads: Accumulator] [Flags: Z]
	sta ($0E.b)		; Store accumulator (indirect) ($0E.b) [Reads: Direct Page, Accumulator]
	lda $E8.b		; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $BE2D45.l		; Load long $BE2D45.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($67.b,S),Y		; Store accumulator (stack relative indirect indexed) ($67.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer]
	cpy #$9466.w		; Compare #$9466.w with Y register [Reads: Y Index] [Flags: ZCN]
	ora #$696D.w		; Logical OR #$696D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $359B.w		; Add $359B.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
.ACCU 16
	rep #$A6
	cmp $C4.b,S		; Compare accumulator (stack relative) $C4.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZCN]
	sbc $68.b		; Subtract $68.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	stz $A705.w		; Store zero to $A705.w
	sta $C7E1A0.l,X		; Store accumulator (long,X) $C7E1A0.l,X [Reads: Accumulator, X Index]
	.db $82, $63, $A5		; Bank wrapping branch target ; Branch always long to $82, $63, $A5 [Flow: branch]
	cop $A8.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$65A8.w		; Load #$65A8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cop $52.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $6682.w		; Compare $6682.w with Y register [Reads: Y Index] [Flags: ZCN]
	.db $B0, $01		; Invalid branch target (bcs L06247F) ; Branch if carry set to $B0, $01 [Flow: branch]
	ldy $B4.b,X		; Load Y register $B4.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: ZN]
	adc $B7.b,S		; Add with carry (stack relative) $B7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	ora [$52.b]		; OR accumulator with memory (long) [$52.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $BBD0.w		; Compare $BBD0.w with Y register [Reads: Y Index] [Flags: ZCN]
	ldy $BDB2.w,X		; Load Y register $BDB2.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldx $62.b,Y		; Load X register $62.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ldx $B609.w,Y		; Load X register $B609.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda [$C1.b],Y		; Load accumulator (long indexed) [$C1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$3B
	eor ($CC.b)		; Exclusive OR accumulator with memory (indirect) ($CC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $C4.b,S		; Compare accumulator (stack relative) $C4.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZCN]
	lda ($64.b),Y		; Load accumulator ($64.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $00.b		; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: ZCN]
	dec $63.b		; Decrement $63.b [Reads: Direct Page] [Flags: ZN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ora $E5.b,S		; OR accumulator with stack relative $E5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and [$53.b],Y		; AND accumulator with memory (long indexed) [$53.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cld		; Clear decimal ; Clear decimal flag [Flags: D]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $C206.w		; Decrement $C206.w [Flags: ZN]
	bit $DDDC.w,X		; Test bits $DDDC.w,X [Reads: X Index] [Flags: VNZ] [Flow: branch]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	.db $D0, $62		; Invalid branch target (bne L062510) ; Branch if not equal to $D0, $62 [Flow: branch]
	jmp.w [$DE62]		; Jump long indirect [$DE62] [Flow: jump]
	asl $D0.b		; Arithmetic shift left $D0.b [Reads: Direct Page] [Flags: ZCN]
	clv		; Clear overflow ; Clear overflow flag [Flags: V]
	sbc ($E2.b,X)		; Subtract with carry ($E2.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($C7.b,X)		; Subtract with carry ($C7.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	and $FF.b		; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($24.b,X)		; Logical OR ($24.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0E1D03.l		; OR accumulator with memory (long) $0E1D03.l [Writes: Accumulator] [Flags: ZN]
	ora $0E.b,S		; OR accumulator with stack relative $0E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $24E001.l		; Jump to subroutine long $24E001.l [Writes: Stack Pointer] [Flow: call]
	cop $05.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $0F1D1D.l		; OR accumulator with memory (long) $0F1D1D.l [Writes: Accumulator] [Flags: ZN]
	ora $040E.w,X		; OR accumulator with memory $040E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1D.b		; Logical OR $1D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1D01.w,X		; OR accumulator with memory $1D01.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $1B1D.w,X		; OR accumulator with memory $1B1D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $06.b,S		; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $1D.b		; Logical OR $1D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($02.b,X)		; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0623.w,Y		; OR accumulator with memory $0623.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($1D.b),Y		; OR accumulator with memory ($1D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $00.b		; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZCN]
	tsb $0F.b		; Test and set bits $0F.b [Reads: Accumulator] [Flags: Z]
	tsb $1D.b		; Test and set bits $1D.b [Reads: Accumulator] [Flags: Z]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cop $05.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0700.w,X		; OR accumulator with memory $0700.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $09.b		; Arithmetic shift left $09.b [Reads: Direct Page] [Flags: ZCN]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $1D.b,S		; AND accumulator with stack relative $1D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cop $05.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1B0315.l		; OR accumulator with memory (long) $1B0315.l [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0101.w,X		; OR accumulator with memory $0101.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $1D.b,S		; AND accumulator with stack relative $1D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cop $05.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($10.b,X)		; Logical OR ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $021D.w,X		; OR accumulator with memory $021D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora [$02.b]		; OR accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $1D.b,S		; AND accumulator with stack relative $1D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $05.b		; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: ZCN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bpl L06252B.b		; Branch if plus to L06252B.b [Flow: branch]
	ora $2205.w,X		; OR accumulator with memory $2205.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
L06252B:
	ora [$00.b]		; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $22.b		; Arithmetic shift left $22.b [Reads: Direct Page] [Flags: ZCN]
	ora $1C11.w,X		; OR accumulator with memory $1C11.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0101.w,Y		; OR accumulator with memory $0101.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1D.b,X		; OR accumulator with memory $1D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $06.b,S		; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$0507.w		; Logical OR #$0507.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $1E10.w,X		; Arithmetic shift left $1E10.w,X [Reads: X Index] [Flags: ZCN]
	ora #$2206.w		; Logical OR #$2206.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($0D.b,X)		; Logical OR ($0D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $051E.w,X		; Arithmetic shift left $051E.w,X [Reads: X Index] [Flags: ZCN]
	ora [$1E.b]		; OR accumulator with memory (long) [$1E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0509.w		; Arithmetic shift left $0509.w [Flags: ZCN]
	ora $1E1E06.l		; OR accumulator with memory (long) $1E1E06.l [Writes: Accumulator] [Flags: ZN]
	ora ($1C.b,X)		; Logical OR ($1C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $072201.l		; Jump to subroutine long $072201.l [Writes: Stack Pointer] [Flow: call]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $0F0F.w,X		; Arithmetic shift left $0F0F.w,X [Reads: X Index] [Flags: ZCN]
	ora #$1E05.w		; Logical OR #$1E05.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $1E.b		; Arithmetic shift left $1E.b [Reads: Direct Page] [Flags: ZCN]
	asl $0123.w,X		; Arithmetic shift left $0123.w,X [Reads: X Index] [Flags: ZCN]
	cop $07.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $07.b		; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $1E.b,S		; Exclusive OR accumulator with stack relative $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$85.b]		; OR accumulator with memory (long) [$85.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $A8.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0F.b,S		; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($07.b,X)		; Logical OR ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$22.b]		; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0B.b		; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: ZCN]
	.db $10, $07		; Invalid branch target (bpl L062581) ; Branch if plus to $10, $07 [Flow: branch]
	ora #$0B07.w		; Logical OR #$0B07.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $1E16.w,X		; Arithmetic shift left $1E16.w,X [Reads: X Index] [Flags: ZCN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $830F.w,X		; Arithmetic shift left $830F.w,X [Reads: X Index] [Flags: ZCN]
	brk $C1.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $0710.w,X		; Arithmetic shift left $0710.w,X [Reads: X Index] [Flags: ZCN]
	ora [$19.b]		; OR accumulator with memory (long) [$19.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0C05.w,X		; Arithmetic shift left $0C05.w,X [Reads: X Index] [Flags: ZCN]
	ora ($06.b,X)		; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0F.b,X)		; Logical OR ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	cmp ($0C.b),Y		; Compare accumulator ($0C.b),Y [Reads: Direct Page, Accumulator, Y Index] [Flags: ZCN]
	asl $1010.w,X		; Arithmetic shift left $1010.w,X [Reads: X Index] [Flags: ZCN]
	asl $051E.w,X		; Arithmetic shift left $051E.w,X [Reads: X Index] [Flags: ZCN]
	asl $1B1E.w,X		; Arithmetic shift left $1B1E.w,X [Reads: X Index] [Flags: ZCN]
	ora ($0C.b,X)		; Logical OR ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $05.b,S		; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $0A091E.l		; Jump to subroutine long $0A091E.l [Writes: Stack Pointer] [Flow: call]
	ora $10.b		; Logical OR $10.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $06.b		; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1E.b		; Logical OR $1E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0105.w,X		; Arithmetic shift left $0105.w,X [Reads: X Index] [Flags: ZCN]
	sbc $EDED01.l,X		; Subtract with carry (long,X) $EDED01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	bit $4B.b		; Test bits $4B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	cpx #$E32B.w		; Compare #$E32B.w with X register [Reads: X Index] [Flags: ZCN]
	ora $6C.b,S		; OR accumulator with stack relative $6C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $16.b,S		; OR accumulator with stack relative $16.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $24.b,S		; OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $82, $64, $ED		; Invalid branch target (brl L061328) ; Branch always long to $82, $64, $ED [Flow: branch]
	sbc $4BC0.w		; Subtract $4BC0.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	cpx $E5.b		; Compare $E5.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sbc $03.b,S		; Subtract stack-relative $03.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	jsl $827523.l		; Jump to subroutine long $827523.l [Writes: Stack Pointer] [Flow: call]
	stz $E6.b		; Store zero to $E6.b
	sbc [$ED.b]		; Subtract with carry (long) [$ED.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	and ($7A.b),Y		; AND accumulator with memory ($7A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc #$027A.w		; Subtract #$027A.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	jsl $1E6AA8.l		; Jump to subroutine long $1E6AA8.l [Writes: Stack Pointer] [Flow: call]
	rol $E664.w		; Rotate left $E664.w [Flags: ZCN]
	dec $86D6.w,X		; Decrement memory $86D6.w,X [Reads: X Index] [Flags: ZN]
	cmp $118023.l		; Compare accumulator (long) $118023.l [Reads: Accumulator] [Flags: ZCN]
	nop		; No operation
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sta $05C2.w,Y		; Store accumulator to $05C2.w,Y [Reads: Accumulator, Y Index]
	sta ($E6.b),Y		; Store accumulator ($E6.b),Y [Reads: Direct Page, Accumulator, Y Index]
	dec $8782.w,X		; Decrement memory $8782.w,X [Reads: X Index] [Flags: ZN]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $80B6.w,X		; OR accumulator with memory $80B6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $6087.w		; Logical AND $6087.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $63.b,X		; Logical AND $63.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	cpx $DE0B.w		; Compare $DE0B.w with X register [Reads: X Index] [Flags: ZCN]
	.db $82, $E2, $93		; Bank wrapping branch target ; Branch always long to $82, $E2, $93 [Flow: branch]
	lda [$5D.b],Y		; Load accumulator (long indexed) [$5D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $F008.w,Y		; Load X register $F008.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	.db $F0, $DB		; Invalid branch target (beq L0625E4) ; Branch if equal to $F0, $DB [Flow: branch]
	adc $63.b,X		; Add $63.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($0B.b),Y		; Subtract with carry ($0B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $82, $E2, $03		; Invalid branch target (brl L0629F2) ; Branch always long to $82, $E2, $03 [Flow: branch]
	dec $F6F5.w		; Decrement $F6F5.w [Flags: ZN]
	adc $2DD7.w,Y		; Add $2DD7.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	xce		; Exchange carry bit to set emulation or native mode ; Exchange carry and emulation bits [Flags: C]
	inc $DB.b		; Increment $DB.b [Reads: Direct Page] [Flags: ZN]
	adc $F7.b,S		; Add with carry (stack relative) $F7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sep #$03		; Set processor status bits #$03 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	ora $CE.b,S		; OR accumulator with stack relative $CE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $FB.b		; Add $FB.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sta $3580.w,X		; Store accumulator to $3580.w,X [Reads: Accumulator, X Index]
	.db $80, $1A		; Invalid branch target (bra L062641) ; Branch always to $80, $1A [Flow: branch]
	per L060726.w		; Push effective relative address L060726.w [Writes: Stack Pointer]
	and $FCE3.w,X		; AND accumulator with memory $FCE3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b,X)		; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora [$8B.b],Y		; OR accumulator with memory (long indexed) [$8B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $E5.b		; Test bits $E5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	dec A		; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor ($00.b)		; Exclusive OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $01.b		; Subtract $01.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	cmp $01A6.w,X		; Compare accumulator $01A6.w,X [Reads: X Index] [Flags: ZCN]
	bit $73.b		; Test bits $73.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	cop $03.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $3A.b,S		; Load accumulator (stack relative) $3A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $2F.b		; Test and set bits $2F.b [Reads: Accumulator] [Flags: Z]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	txy		; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sta [$0B.b],Y		; Store accumulator (long indexed) [$0B.b],Y [Reads: Direct Page, Accumulator, Y Index]
	ora $06.b		; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $37.b		; Arithmetic shift left $37.b [Reads: Direct Page] [Flags: ZCN]
	adc ($73.b,S),Y		; Add with carry (stack relative indirect indexed) ($73.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	dec $95.b,X		; Decrement memory $95.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	bit $6E.b		; Test bits $6E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	ora [$89.b]		; OR accumulator with memory (long) [$89.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $090B08.l		; Load long $090B08.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	adc #$7349.w		; Add #$7349.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	dec $95.b,X		; Decrement memory $95.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	sbc $75.b		; Subtract $75.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $3AC90C.l,X		; Subtract with carry (long,X) $3AC90C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cpx #$0D35.w		; Compare #$0D35.w with X register [Reads: X Index] [Flags: ZCN]
	brk $D0.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $95.b,X		; Decrement memory $95.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	dec A		; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $050F.w		; Arithmetic shift left $050F.w [Flags: ZCN]
	sbc $245A41.l		; Subtract with carry (long) $245A41.l [Writes: Accumulator] [Flags: VCNZ]
	sbc ($0E.b,X)		; Subtract with carry ($0E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	lda $170F.w,X		; Load $170F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($10.b,X)		; Logical OR ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $1A1849.l		; Compare accumulator (long) $1A1849.l [Reads: Accumulator] [Flags: ZCN]
	ora $41EF11.l		; OR accumulator with memory (long) $41EF11.l [Writes: Accumulator] [Flags: ZN]
	.db $42, $E2		; opcode wdm $E2 ; Reserved instruction
	ora ($FF.b)		; OR accumulator with memory (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $03.b,Y		; Store X register $03.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ora $D4D306.l,X		; Logical OR long $D4D306.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($EE.b,S),Y		; OR accumulator (stack relative indirect indexed) ($EE.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $F81514.l		; Subtract with carry (long) $F81514.l [Writes: Accumulator] [Flags: VCNZ]
	asl $17.b,X		; Arithmetic shift left $17.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	sbc $F571.w,X		; Subtract with carry $F571.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $8E.b,S		; Add with carry (stack relative) $8E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	.db $62, $18, $09		; Invalid branch target (per L062FBF) ; Push effective relative address $62, $18, $09 [Writes: Stack Pointer]
	tsb $EEFF.w		; Test and set bits $EEFF.w [Reads: Accumulator] [Flags: Z]
	inc $FF00.w,X		; Increment memory $FF00.w,X [Reads: X Index] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $71ED.w		; Test and reset bits $71ED.w [Reads: Accumulator] [Flags: Z]
	sbc $030D07.l,X		; Subtract with carry (long,X) $030D07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	bpl L0626BA.b		; Branch if plus to L0626BA.b [Flow: branch]
	trb $1C05.w		; Test and reset bits $1C05.w [Reads: Accumulator] [Flags: Z]
L0626BA:
	ora $081E22.l		; OR accumulator with memory (long) $081E22.l [Writes: Accumulator] [Flags: ZN]
	ora $11.b		; Logical OR $11.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $05.b,X		; OR accumulator with memory $05.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $0B		; Invalid branch target (bpl L0626CF) ; Branch if plus to $10, $0B [Flow: branch]
	ora $0F.b,S		; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1D1C22.l		; OR accumulator with memory (long) $1D1C22.l [Writes: Accumulator] [Flags: ZN]
	ora ($05.b),Y		; OR accumulator with memory ($05.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$1E.b]		; OR accumulator with memory (long) [$1E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $10.b		; Logical OR $10.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $0505.w		; Test and reset bits $0505.w [Reads: Accumulator] [Flags: Z]
	asl $1E10.w,X		; Arithmetic shift left $1E10.w,X [Reads: X Index] [Flags: ZCN]
	asl $1C1C.w,X		; Arithmetic shift left $1C1C.w,X [Reads: X Index] [Flags: ZCN]
	asl $0F1E.w,X		; Arithmetic shift left $0F1E.w,X [Reads: X Index] [Flags: ZCN]
	ora [$05.b]		; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1111.w,X		; OR accumulator with memory $1111.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1C.b		; Logical OR $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $06.b,S		; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $061E.w,X		; Arithmetic shift left $061E.w,X [Reads: X Index] [Flags: ZCN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	and $0D.b		; Logical AND $0D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0F1C.w,X		; OR accumulator with memory $0F1C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
L0626EF:
	asl $050F.w,X		; Arithmetic shift left $050F.w,X [Reads: X Index] [Flags: ZCN]
	ora $03.b		; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $06031E.l		; OR accumulator with memory (long) $06031E.l [Writes: Accumulator] [Flags: ZN]
	trb $2311.w		; Test and reset bits $2311.w [Reads: Accumulator] [Flags: Z]
	asl $20E0.w,X		; Arithmetic shift left $20E0.w,X [Reads: X Index] [Flags: ZCN]
	ora $1C.b		; Logical OR $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $11		; Invalid branch target (bpl L062713) ; Branch if plus to $10, $11 [Flow: branch]
	ora $03.b		; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $031E.w,X		; Arithmetic shift left $031E.w,X [Reads: X Index] [Flags: ZCN]
	asl $1E.b,X		; Arithmetic shift left $1E.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $15.b		; Logical OR $15.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0511.w,X		; Arithmetic shift left $0511.w,X [Reads: X Index] [Flags: ZCN]
	ora $1E.b		; Logical OR $1E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1C.b		; Logical OR $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $0F1E.w		; Test and reset bits $0F1E.w [Reads: Accumulator] [Flags: Z]
	ora $16.b,S		; OR accumulator with stack relative $16.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $151E.w,X		; Arithmetic shift left $151E.w,X [Reads: X Index] [Flags: ZCN]
	bpl L06272D.b		; Branch if plus to L06272D.b [Flow: branch]
	ora $22051E.l		; OR accumulator with memory (long) $22051E.l [Writes: Accumulator] [Flags: ZN]
	asl $050A.w,X		; Arithmetic shift left $050A.w,X [Reads: X Index] [Flags: ZCN]
	ora $1E.b,S		; OR accumulator with stack relative $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $1E.b,X		; Arithmetic shift left $1E.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	trb $151D.w		; Test and reset bits $151D.w [Reads: Accumulator] [Flags: Z]
	trb $051E.w		; Test and reset bits $051E.w [Reads: Accumulator] [Flags: Z]
L06272D:
	jsl $05221C.l		; Jump to subroutine long $05221C.l [Writes: Stack Pointer] [Flow: call]
	asl $0F.b		; Arithmetic shift left $0F.b [Reads: Direct Page] [Flags: ZCN]
	asl $1E0C.w,X		; Arithmetic shift left $1E0C.w,X [Reads: X Index] [Flags: ZCN]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $44.b,X		; OR accumulator with memory $44.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	asl $0A1C.w,X		; Arithmetic shift left $0A1C.w,X [Reads: X Index] [Flags: ZCN]
	asl $1C05.w,X		; Arithmetic shift left $1C05.w,X [Reads: X Index] [Flags: ZCN]
	ora $02.b		; Logical OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $1E.b		; Arithmetic shift left $1E.b [Reads: Direct Page] [Flags: ZCN]
	asl $1C10.w,X		; Arithmetic shift left $1C10.w,X [Reads: X Index] [Flags: ZCN]
	ora $43.b		; Logical OR $43.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $0D1E.w		; Test and reset bits $0D1E.w [Reads: Accumulator] [Flags: Z]
	asl $1E1C.w,X		; Arithmetic shift left $1E1C.w,X [Reads: X Index] [Flags: ZCN]
	ora $0F.b		; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $06.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1C10.w,X		; Arithmetic shift left $1C10.w,X [Reads: X Index] [Flags: ZCN]
	trb $1C10.w		; Test and reset bits $1C10.w [Reads: Accumulator] [Flags: Z]
	trb $1E2D.w		; Test and reset bits $1E2D.w [Reads: Accumulator] [Flags: Z]
	ora ($1C.b,X)		; Logical OR ($1C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $1E23.w		; Test and reset bits $1E23.w [Reads: Accumulator] [Flags: Z]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0F1E.w,X		; Arithmetic shift left $0F1E.w,X [Reads: X Index] [Flags: ZCN]
	tsb $220F.w		; Test and set bits $220F.w [Reads: Accumulator] [Flags: Z]
	bpl L0626EF.b		; Branch if plus to L0626EF.b [Flow: branch]
	brk $9A.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $1E.b		; Test bits $1E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	ora ($0F.b,X)		; Logical OR ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($23.b,X)		; Logical OR ($23.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $1E24.w		; Test and set bits $1E24.w [Reads: Accumulator] [Flags: Z]
	and $10.b,S		; AND accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0D.b,S		; OR accumulator with stack relative $0D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $220601.l		; OR accumulator with memory (long) $220601.l [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L062782:
	tsb $221E.w		; Test and set bits $221E.w [Reads: Accumulator] [Flags: Z]
	.db $10, $05		; Invalid branch target (bpl L06278C) ; Branch if plus to $10, $05 [Flow: branch]
	ora ($01.b),Y		; OR accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $251E.w,X		; Arithmetic shift left $251E.w,X [Reads: X Index] [Flags: ZCN]
	.db $10, $07		; Invalid branch target (bpl L062797) ; Branch if plus to $10, $07 [Flow: branch]
	asl $1010.w,X		; Arithmetic shift left $1010.w,X [Reads: X Index] [Flags: ZCN]
	ora $0B.b		; Logical OR $0B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($09.b,X)		; Logical OR ($09.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $635407.l,X		; Subtract with carry (long,X) $635407.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	dec $4C63.w		; Decrement $4C63.w [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	eor ($8F.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($8F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	per L0607C2.w		; Push effective relative address L0607C2.w [Writes: Stack Pointer]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ora $A2.b,X		; OR accumulator with memory $A2.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	clv		; Clear overflow ; Clear overflow flag [Flags: V]
	lsr $E765.w,X		; Logical shift right $E765.w,X [Reads: X Index] [Flags: ZCN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	jmp $B79C.w		; Jump to $B79C.w [Flow: jump]
	ora $E5.b,X		; OR accumulator with memory $E5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($20.b),Y		; Exclusive OR accumulator with memory ($20.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $A4D7.w		; Compare $A4D7.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	and ($D4.b,X)		; Logical AND ($D4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $848323.l		; Jump to subroutine long $848323.l [Writes: Stack Pointer] [Flow: call]
	bit $25.b		; Test bits $25.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	sbc $80.b		; Subtract $80.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ora ($12.b),Y		; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	adc $24.b,S		; Add with carry (stack relative) $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	rol $27.b		; Rotate left $27.b [Reads: Direct Page] [Flags: ZCN]
	bit $8D.b		; Test bits $8D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	and #$0BA7.w		; Logical AND #$0BA7.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $2A69.w		; Add $2A69.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	bra L062782.b		; Branch always to L062782.b [Flow: branch]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	adc $F1.b,S		; Add with carry (stack relative) $F1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	adc $24.b,S		; Add with carry (stack relative) $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sta $630C.w		; Store accumulator to $630C.w [Reads: Accumulator]
	bit $20E0.w		; Test bits $20E0.w with accumulator [Reads: Accumulator] [Flags: VNZ]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	eor ($B8.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($B8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$A8.b],Y		; OR accumulator with memory (long indexed) [$A8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $30.b,S		; Add with carry (stack relative) $30.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	and ($65.b),Y		; AND accumulator with memory ($65.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $32.b,X		; Load $32.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $86.b		; Subtract $86.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	jsr L062812.w		; Jump to subroutine at L062812.w [Writes: Stack Pointer] [Flow: call]
	cmp ($33.b,X)		; Compare accumulator ($33.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lsr $34.b,X		; Logical shift right $34.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	sbc $6A.b,X		; Subtract $6A.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
L0627FE:
	ldy $3635.w,X		; Load Y register $3635.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldx #$0EB8.w		; Load #$0EB8.w into X register [Writes: X Index] [Flags: ZN]
L062804:
	.db $80, $37		; Invalid branch target (bra L06283D) ; Branch always to $80, $37 [Flow: branch]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	.db $62, $38, $E0		; Invalid branch target (per L060842) ; Push effective relative address $62, $38, $E0 [Writes: Stack Pointer]
	and $65A8.w,X		; AND accumulator with memory $65A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $C635.w,X		; Load Y register $C635.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	tsx		; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
L062812:
	ldx #$3C95.w		; Load #$3C95.w into X register [Writes: X Index] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	stz $56B7.w		; Store zero to $56B7.w
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cmp ($F8.b,X)		; Compare accumulator ($F8.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: ZCN]
	and $3E99.w,X		; AND accumulator with memory $3E99.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx $3F86.w		; Load $3F86.w into X register [Writes: X Index] [Flags: ZN]
	ldy $40.b		; Load $40.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor ($33.b,X)		; Exclusive OR accumulator with memory ($33.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sta $C1.b,X		; Store accumulator to $C1.b,X [Reads: Accumulator, X Index]
	jmp.w [$4224]		; Jump long indirect [$4224] [Flow: jump]
	eor $B8.b,S		; Exclusive OR accumulator with stack relative $B8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	adc ($2E.b,X)		; Add with carry ($2E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	eor ($41.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($41.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	mvp $33,$53		; Move block positive $33,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $24DC.w,Y		; Load $24DC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $56B8.w,X		; Rotate left $56B8.w,X [Reads: X Index] [Flags: ZCN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	clv		; Clear overflow ; Clear overflow flag [Flags: V]
	eor ($95.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($95.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; Exclusive OR accumulator with memory ($41.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $62, $38, $62		; Bank wrapping branch target ; Push effective relative address $62, $38, $62 [Writes: Stack Pointer]
	lsr $23.b		; Logical shift right $23.b [Reads: Direct Page] [Flags: ZCN]
	eor #$840B.w		; Exclusive OR #$840B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($41.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($4A.b,S),Y		; AND accumulator (stack relative indirect indexed) ($4A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sec		; Set carry ; Set carry flag [Flags: C]
	and $EE8C.w,Y		; AND accumulator with memory $EE8C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $100022.l,X		; Subtract with carry (long,X) $100022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sty $44.b		; Store Y register to $44.b [Reads: Y Index]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jmp $494D.w		; Jump to $494D.w [Flow: jump]
	lsr $8C4F.w		; Logical shift right $8C4F.w [Flags: ZCN]
	cmp $9F.b,X		; Compare accumulator $9F.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	xce		; Exchange carry bit to set emulation or native mode ; Exchange carry and emulation bits [Flags: C]
	ora $EE9F.w,X		; OR accumulator with memory $EE9F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $62, $50, $02		; Invalid branch target (per L062AC3) ; Push effective relative address $62, $50, $02 [Writes: Stack Pointer]
	eor ($53.b)		; Exclusive OR accumulator with memory (indirect) ($53.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $22.b		; Arithmetic shift left $22.b [Reads: Direct Page] [Flags: ZCN]
	ora [$12.b]		; OR accumulator with memory (long) [$12.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $83.b		; Load $83.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cmp $6A.b,X		; Compare accumulator $6A.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	trb $1D1D.w		; Test and reset bits $1D1D.w [Reads: Accumulator] [Flags: Z]
	inc $F754.w		; Increment $F754.w [Flags: ZN]
	ldy $0E.b		; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ora ($EB.b,X)		; Logical OR ($EB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta ($D4.b,X)		; Store accumulator ($D4.b,X) [Reads: Direct Page, Accumulator, X Index]
	eor $56.b,X		; Exclusive OR accumulator with memory $56.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($24.b),Y		; OR accumulator with memory ($24.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($07.b)		; OR accumulator with memory (indirect) ($07.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$14.b],Y		; Exclusive OR accumulator with memory (long indexed) [$14.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $A1.b,X		; OR accumulator with memory $A1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $DD.b		; Arithmetic shift left $DD.b [Reads: Direct Page] [Flags: ZCN]
	sbc $051C08.l,X		; Subtract with carry (long,X) $051C08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora $1E.b		; Logical OR $1E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $051C.w,X		; Arithmetic shift left $051C.w,X [Reads: X Index] [Flags: ZCN]
	asl $2405.w,X		; Arithmetic shift left $2405.w,X [Reads: X Index] [Flags: ZCN]
	asl $0100.w,X		; Arithmetic shift left $0100.w,X [Reads: X Index] [Flags: ZCN]
	and $1E.b,S		; AND accumulator with stack relative $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($1C.b,X)		; Logical OR ($1C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $22.b		; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $0501.w		; Test and reset bits $0501.w [Reads: Accumulator] [Flags: Z]
	asl $1022.w,X		; Arithmetic shift left $1022.w,X [Reads: X Index] [Flags: ZCN]
	cop $0D.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	ora $07.b,S		; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1E.b		; Logical OR $1E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1C.b		; Logical OR $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $101E.w,X		; Arithmetic shift left $101E.w,X [Reads: X Index] [Flags: ZCN]
	asl $0123.w,X		; Arithmetic shift left $0123.w,X [Reads: X Index] [Flags: ZCN]
	and $1E.b,S		; AND accumulator with stack relative $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $1E10.w,X		; Arithmetic shift left $1E10.w,X [Reads: X Index] [Flags: ZCN]
	ora $0D.b		; Logical OR $0D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($19.b,X)		; Logical OR ($19.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $191E.w,X		; Arithmetic shift left $191E.w,X [Reads: X Index] [Flags: ZCN]
	and $1E.b		; Logical AND $1E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($05.b,X)		; Logical OR ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $0083.w,X		; Arithmetic shift left $0083.w,X [Reads: X Index] [Flags: ZCN]
	sec		; Set carry ; Set carry flag [Flags: C]
	ora [$1D.b]		; OR accumulator with memory (long) [$1D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $1E.b		; Test and set bits $1E.b [Reads: Accumulator] [Flags: Z]
	asl $1C10.w,X		; Arithmetic shift left $1C10.w,X [Reads: X Index] [Flags: ZCN]
	ora $008405.l		; OR accumulator with memory (long) $008405.l [Writes: Accumulator] [Flags: ZN]
	jsl $0D050B.l		; Jump to subroutine long $0D050B.l [Writes: Stack Pointer] [Flow: call]
	ora ($1E.b,X)		; Logical OR ($1E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($03.b,X)		; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bpl L0628FF.b		; Branch if plus to L0628FF.b [Flow: branch]
	trb $1C15.w		; Test and reset bits $1C15.w [Reads: Accumulator] [Flags: Z]
L0628F3:
	ora $550084.l		; OR accumulator with memory (long) $550084.l [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $11		; Invalid branch target (bpl L06290B) ; Branch if plus to $10, $11 [Flow: branch]
	ora $011E.w,Y		; OR accumulator with memory $011E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bpl L06291B.b		; Branch if plus to L06291B.b [Flow: branch]
L0628FF:
	ora $1E.b		; Logical OR $1E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $1C0005.l		; Jump to subroutine long $1C0005.l [Writes: Stack Pointer] [Flow: call]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	mvn $1A,$09		; Move block negative $1A,$09 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $10, $01		; Invalid branch target (bpl L06290D) ; Branch if plus to $10, $01 [Flow: branch]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $0510.w		; Test and reset bits $0510.w [Reads: Accumulator] [Flags: Z]
	asl $231C.w,X		; Arithmetic shift left $231C.w,X [Reads: X Index] [Flags: ZCN]
	asl $0522.w,X		; Arithmetic shift left $0522.w,X [Reads: X Index] [Flags: ZCN]
	ora $01.b,S		; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($1C.b,X)		; Logical OR ($1C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
L06291B:
	ora $22.b		; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $1C22.w,X		; Arithmetic shift left $1C22.w,X [Reads: X Index] [Flags: ZCN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	ora [$22.b]		; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($83.b,X)		; Logical OR ($83.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $24.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $1C.b,S		; Exclusive OR accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $1E02.w,X		; Arithmetic shift left $1E02.w,X [Reads: X Index] [Flags: ZCN]
	trb $840F.w		; Test and reset bits $840F.w [Reads: Accumulator] [Flags: Z]
	brk $44.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	and $22.b		; Logical AND $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $0504.w		; Test and reset bits $0504.w [Reads: Accumulator] [Flags: Z]
	asl $1E15.w,X		; Arithmetic shift left $1E15.w,X [Reads: X Index] [Flags: ZCN]
	ora $83.b		; Logical OR $83.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $0D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	lda ($83.b)		; Load accumulator (indirect) ($83.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $93.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	eor [$00.b]		; Exclusive OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bpl L062975.b		; Branch if plus to L062975.b [Flow: branch]
	asl $1C22.w,X		; Arithmetic shift left $1C22.w,X [Reads: X Index] [Flags: ZCN]
	cop $1E.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $2210.w,X		; Arithmetic shift left $2210.w,X [Reads: X Index] [Flags: ZCN]
	asl $0202.w,X		; Arithmetic shift left $0202.w,X [Reads: X Index] [Flags: ZCN]
	ora $2211.w		; Logical OR $2211.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $23		; Invalid branch target (bpl L062983) ; Branch if plus to $10, $23 [Flow: branch]
	asl $1023.w,X		; Arithmetic shift left $1023.w,X [Reads: X Index] [Flags: ZCN]
	ora $05.b,S		; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $1028.w		; Logical OR $1028.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $01.b		; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	asl $010D.w,X		; Arithmetic shift left $010D.w,X [Reads: X Index] [Flags: ZCN]
	ora ($FF.b,X)		; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr $A8.b,X		; Logical shift right $A8.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
L062975:
	cli		; Clear interupt ; Clear interrupt disable flag [Flags: I]
	dec A		; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor $A859A8.l		; Exclusive OR accumulator with memory (long) $A859A8.l [Writes: Accumulator] [Flags: ZN]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	eor ($62.b)		; Exclusive OR accumulator with memory (indirect) ($62.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	ora ($49.b,X)		; Logical OR ($49.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lsr $3862.w,X		; Logical shift right $3862.w,X [Reads: X Index] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	eor ($A8.b)		; Exclusive OR accumulator with memory (indirect) ($A8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $4F52.w,Y		; Load X register $4F52.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	eor $141B9A.l,X		; Exclusive OR accumulator with memory (long,X) $141B9A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($6A.b),Y		; Subtract with carry ($6A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	asl $60.b		; Arithmetic shift left $60.b [Reads: Direct Page] [Flags: ZCN]
	adc ($84.b,X)		; Add with carry ($84.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	per L067C42.w		; Push effective relative address L067C42.w [Writes: Stack Pointer]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	adc $1F.b,S		; Add with carry (stack relative) $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	stz $23.b		; Store zero to $23.b
	asl $63.b		; Arithmetic shift left $63.b [Reads: Direct Page] [Flags: ZCN]
	adc $0B.b		; Add $0B.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	adc #$5FC5.w		; Add #$5FC5.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sbc $DD0009.l,X		; Subtract with carry (long,X) $DD0009.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp.w [$6C62]		; Jump long indirect [$6C62] [Flow: jump]
	cpx #$1D21.w		; Compare #$1D21.w with X register [Reads: X Index] [Flags: ZCN]
	adc $5AA870.l		; Add with carry (long) $5AA870.l [Writes: Accumulator] [Flags: VCNZ]
	adc $FF.b,S		; Add with carry (stack relative) $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	ora #$5E00.w		; Logical OR #$5E00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	nop		; No operation
	adc ($72.b),Y		; Add with carry ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	dec $F7.b		; Decrement $F7.b [Reads: Direct Page] [Flags: ZN]
	stx $E5.b,Y		; Store X register $E5.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	adc ($FF.b,S),Y		; Add with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc $740009.l,X		; Subtract with carry (long,X) $740009.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $63.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $6DA7.w		; Decrement $6DA7.w [Flags: ZN]
	stx $6E.b		; Store X register to $6E.b [Reads: X Index]
	.db $80, $84		; Invalid branch target (bra L06295A) ; Branch always to $80, $84 [Flow: branch]
	brk $55.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $10.b		; Test bits $10.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	jsr ($FD75.w,X)		; Jump to subroutine indirect indexed ($FD75.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpy $52.b		; Compare $52.b with Y register [Reads: Direct Page, Y Index] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	jsl $4711A8.l		; Jump to subroutine long $4711A8.l [Writes: Stack Pointer] [Flow: call]
	lda $FFFF.w,Y		; Load $FFFF.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $B5.b,X		; Rotate right $B5.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cop $CC.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $A8.b		; Arithmetic shift left $A8.b [Reads: Direct Page] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	eor ($B8.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($B8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor ($62.b,X)		; Exclusive OR accumulator with memory ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	adc [$10.b],Y		; Add with carry (long indexed) [$10.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	pei ($B5.b)		; Push effective indirect address ($B5.b) [Reads: Direct Page] [Writes: Stack Pointer]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	asl $06.b		; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZCN]
	eor $587AA8.l		; Exclusive OR accumulator with memory (long) $587AA8.l [Writes: Accumulator] [Flags: ZN]
	dec A		; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lsr $53.b,X		; Logical shift right $53.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	lsr $7B.b,X		; Logical shift right $7B.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jmp ($837D.w,X)		; Jump indirect indexed to ($837D.w,X) [Reads: X Index] [Flow: jump]
	brk $8B.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$A83C.w		; Compare #$A83C.w with X register [Reads: X Index] [Flags: ZCN]
	ror $56A8.w,X		; Rotate right $56A8.w,X [Reads: X Index] [Flags: ZCN]
	lda [$7F.b],Y		; Load accumulator (long indexed) [$7F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $8180.w,X		; Store accumulator to $8180.w,X [Reads: Accumulator, X Index]
	lsr $8F.b,X		; Logical shift right $8F.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	.db $82, $83, $D4		; Bank wrapping branch target ; Branch always long to $82, $83, $D4 [Flow: branch]
	sty $85.b		; Store Y register to $85.b [Reads: Y Index]
	lda [$86.b],Y		; Load accumulator (long indexed) [$86.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda ($87.b,S),Y		; Load accumulator (stack relative indirect indexed) ($87.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor [$A8.b]		; Exclusive OR accumulator with memory (long) [$A8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	bit #$8AA2.w		; Test bits #$8AA2.w with accumulator [Reads: Accumulator] [Flags: Z]
	cpx #$008B.w		; Compare #$008B.w with X register [Reads: X Index] [Flags: ZCN]
	eor #$A88C.w		; Exclusive OR #$A88C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $8D.b,X		; Store accumulator to $8D.b,X [Reads: Accumulator, X Index]
	and $8E56.w,Y		; AND accumulator with memory $8E56.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $B795.w		; Store accumulator to $B795.w [Reads: Accumulator]
	sta $09FF90.l		; Store accumulator (long) $09FF90.l [Reads: Accumulator]
	brk $50.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($92.b),Y		; Store accumulator ($92.b),Y [Reads: Direct Page, Accumulator, Y Index]
	eor #$4D93.w		; Exclusive OR #$4D93.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sty $B79C.w		; Store Y register to $B79C.w [Reads: Y Index]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sty $5C.b,X		; Store Y register $5C.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sbc [$62.b],Y		; Subtract with carry (long indexed) [$62.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $02.b,X		; Store accumulator to $02.b,X [Reads: Accumulator, X Index]
	cmp ($5A.b),Y		; Compare accumulator ($5A.b),Y [Reads: Direct Page, Accumulator, Y Index] [Flags: ZCN]
	brk $22.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$0C.b],Y		; Subtract with carry (long indexed) [$0C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $5C99.w,Y		; Store accumulator to $5C99.w,Y [Reads: Accumulator, Y Index]
	lsr $145F.w,X		; Logical shift right $145F.w,X [Reads: X Index] [Flags: ZCN]
	ora $A1.b,X		; OR accumulator with memory $A1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	asl $06.b		; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZCN]
	ldx $61.b		; Load $61.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	rol $14.b		; Rotate left $14.b [Reads: Direct Page] [Flags: ZCN]
	ora $62.b		; Logical OR $62.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $9A.b		; Arithmetic shift left $9A.b [Reads: Direct Page] [Flags: ZCN]
	mvn $06,$06		; Move block negative $06,$06 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc $010102.l,X		; Subtract with carry (long,X) $010102.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora $29.b,S		; OR accumulator with stack relative $29.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($0C.b,X)		; Logical OR ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $1E.b		; Logical OR $1E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $10		; Invalid branch target (bpl L062A8E) ; Branch if plus to $10, $10 [Flow: branch]
	asl $101E.w,X		; Arithmetic shift left $101E.w,X [Reads: X Index] [Flags: ZCN]
	jsl $050401.l		; Jump to subroutine long $050401.l [Writes: Stack Pointer] [Flow: call]
	ora $01.b		; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $26E01E.l		; Jump to subroutine long $26E01E.l [Writes: Stack Pointer] [Flow: call]
	ora ($10.b,X)		; Logical OR ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bpl L062A94.b		; Branch if plus to L062A94.b [Flow: branch]
	.db $10, $01		; Invalid branch target (bpl L062A95) ; Branch if plus to $10, $01 [Flow: branch]
L062A94:
	ora ($10.b,X)		; Logical OR ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $010E.w		; Arithmetic shift left $010E.w [Flags: ZCN]
	cop $10.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($10.b,X)		; Logical OR ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $0B10.w		; Test and set bits $0B10.w [Reads: Accumulator] [Flags: Z]
	ora $000601.l		; OR accumulator with memory (long) $000601.l [Writes: Accumulator] [Flags: ZN]
	tsb $01.b		; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	ora ($06.b,X)		; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0E1E05.l		; OR accumulator with memory (long) $0E1E05.l [Writes: Accumulator] [Flags: ZN]
	asl $1010.w,X		; Arithmetic shift left $1010.w,X [Reads: X Index] [Flags: ZCN]
	asl $0F.b		; Arithmetic shift left $0F.b [Reads: Direct Page] [Flags: ZCN]
	bpl L062AB3.b		; Branch if plus to L062AB3.b [Flow: branch]
L062AB3:
	cop $23.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b,X)		; Logical OR ($0B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$01.b]		; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $1E.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $10.b,S		; OR accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($10.b,X)		; Logical OR ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $22		; Invalid branch target (bpl L062AE6) ; Branch if plus to $10, $22 [Flow: branch]
	ora ($0C.b,X)		; Logical OR ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $021E.w		; Test and set bits $021E.w [Reads: Accumulator] [Flags: Z]
	brk $1E.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $03.b		; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: ZCN]
	ora ($10.b,X)		; Logical OR ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $10.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $23.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0B.b,S		; OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($1E.b,X)		; Logical OR ($1E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $1E.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cop $10.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L062ADF.b		; Branch if plus to L062ADF.b [Flow: branch]
L062ADF:
	.db $10, $0F		; Invalid branch target (bpl L062AF0) ; Branch if plus to $10, $0F [Flow: branch]
	tsb $22.b		; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
	ora $01.b,S		; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $19021E.l		; Jump to subroutine long $19021E.l [Writes: Stack Pointer] [Flow: call]
	ora $0F.b,S		; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $0F0E10.l		; Jump to subroutine long $0F0E10.l [Writes: Stack Pointer] [Flow: call]
	bpl L062B03.b		; Branch if plus to L062B03.b [Flow: branch]
	ora #$0103.w		; Logical OR #$0103.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $1E.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $830006.l		; OR accumulator with memory (long) $830006.l [Writes: Accumulator] [Flags: ZN]
	brk $89.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
L062B03:
	cop $05.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $1E.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0201.w,Y		; OR accumulator with memory $0201.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $008300.l		; OR accumulator with memory (long) $008300.l [Writes: Accumulator] [Flags: ZN]
	sei		; Disable interrupts ; Set interrupt disable flag [Flags: I]
	ora $111009.l		; OR accumulator with memory (long) $111009.l [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora ($00.b,X)		; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $1C01.w,Y		; OR accumulator with memory $1C01.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $0B10.w,X		; Arithmetic shift left $0B10.w,X [Reads: X Index] [Flags: ZCN]
	ora ($10.b,X)		; Logical OR ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $014310.l		; OR accumulator with memory (long) $014310.l [Writes: Accumulator] [Flags: ZN]
	asl $00.b		; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZCN]
	bpl L062B6B.b		; Branch if plus to L062B6B.b [Flow: branch]
	trb $0701.w		; Test and reset bits $0701.w [Reads: Accumulator] [Flags: Z]
	.db $10, $02		; Invalid branch target (bpl L062B2F) ; Branch if plus to $10, $02 [Flow: branch]
	ora $101005.l		; OR accumulator with memory (long) $101005.l [Writes: Accumulator] [Flags: ZN]
	ora $10.b,S		; OR accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $0E0601.l		; Jump to subroutine long $0E0601.l [Writes: Stack Pointer] [Flow: call]
	.db $10, $1E		; Invalid branch target (bpl L062B57) ; Branch if plus to $10, $1E [Flow: branch]
	ora ($05.b,X)		; Logical OR ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0E.b,X)		; Logical OR ($0E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $0D0101.l		; Jump to subroutine long $0D0101.l [Writes: Stack Pointer] [Flow: call]
	asl $0083.w		; Arithmetic shift left $0083.w [Flags: ZCN]
	wai		; Wait for interrupt
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora $1B03.w		; Logical OR $1B03.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $01.b		; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($06.b,X)		; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	ora $0083.w		; Logical OR $0083.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	brk $10.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $01.b		; Test bits $01.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	ora [$0E.b]		; OR accumulator with memory (long) [$0E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	ora $0C06.w		; Logical OR $0C06.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($1E.b,X)		; Logical OR ($1E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $02FF03.l		; Jump to subroutine long $02FF03.l [Writes: Stack Pointer] [Flow: call]
	asl $06.b		; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZCN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	and #$0C0A.w		; Logical AND #$0C0A.w with accumulator [Writes: Accumulator] [Flags: ZN]
L062B6B:
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	txy		; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda [$06.b]		; Load accumulator (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $15.b,X		; OR accumulator with memory $15.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $699D.w		; Store zero to $699D.w
	jsl $B50415.l		; Jump to subroutine long $B50415.l [Writes: Stack Pointer] [Flow: call]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	asl $06.b		; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZCN]
	jmp.w [$9E62]		; Jump long indirect [$9E62] [Flow: jump]
	cpx #$2346.w		; Compare #$2346.w with X register [Reads: X Index] [Flags: ZCN]
	adc ($0B.b)		; Add with carry (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ror $7402.w		; Rotate right $7402.w [Flags: ZCN]
	jsl $F67622.l		; Jump to subroutine long $F67622.l [Writes: Stack Pointer] [Flow: call]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl $DC.b		; Arithmetic shift left $DC.b [Reads: Direct Page] [Flags: ZCN]
	dec $7806.w		; Decrement $7806.w [Flags: ZN]
	cop $79.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($8C.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($8C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $1D6A.w,X		; Arithmetic shift left $1D6A.w,X [Reads: X Index] [Flags: ZCN]
	lda $A67177.l,X		; Load long $A67177.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	mvn $A1,$8D		; Move block negative $A1,$8D [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and $7EA2.w,X		; AND accumulator with memory $7EA2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $8CA6.w,Y		; Add $8CA6.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $418A1D.l,X		; Add long $418A1D.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	jmp $ED7606.l		; Jump long to $ED7606.l [Flow: jump]
	sta ($A3.b),Y		; Store accumulator ($A3.b),Y [Reads: Direct Page, Accumulator, Y Index]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $82.b		; Increment $82.b [Reads: Direct Page] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sta $8A.b,S		; Store accumulator (stack relative) $8A.b,S [Reads: Accumulator, Stack Pointer]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $52.b		; Store Y register to $52.b [Reads: Y Index]
	eor ($6A.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($6A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $A4.b,X		; Subtract $A4.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	ora $3BA5.w,X		; OR accumulator with memory $3BA5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr $22.b,X		; Logical shift right $22.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	bit #$621D.w		; Test bits #$621D.w with accumulator [Reads: Accumulator] [Flags: Z]
	.db $50, $E0		; Invalid branch target (bvc L062BAE) ; Branch if overflow clear to $50, $E0 [Flow: branch]
	bra L062BF0.b		; Branch always to L062BF0.b [Flow: branch]
	sbc $A6.b,S		; Subtract stack-relative $A6.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	ora $3BA5.w,X		; OR accumulator with memory $3BA5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	bit #$1D8B.w		; Test bits #$1D8B.w with accumulator [Reads: Accumulator] [Flags: Z]
	adc $C58C.w,Y		; Add $C58C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	lsr $57.b,X		; Logical shift right $57.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	sbc $A7.b,S		; Subtract stack-relative $A7.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	lda [$A5.b]		; Load accumulator (long) [$A5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cop $8C.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $798F.w		; Store X register to $798F.w [Reads: X Index]
	sty $8F8E.w		; Store Y register to $8F8E.w [Reads: Y Index]
	cmp $E5BA.w,Y		; Compare accumulator $E5BA.w,Y [Reads: Y Index] [Flags: ZCN]
L062BF0:
	sbc $1D.b,S		; Subtract stack-relative $1D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	ora $06A5.w,X		; OR accumulator with memory $06A5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$6A8C.w		; Add #$6A8C.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	ora $8C79.w,X		; OR accumulator with memory $8C79.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($94.b,S),Y		; Store accumulator (stack relative indirect indexed) ($94.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer]
	sta $4C5B.w		; Store accumulator to $4C5B.w [Reads: Accumulator]
	sbc $D4.b,S		; Subtract stack-relative $D4.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sbc $06.b,S		; Subtract stack-relative $06.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	adc #$1D8C.w		; Add #$1D8C.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	ora $8C79.w,X		; OR accumulator with memory $8C79.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $0198FC.l,X		; Load long $0198FC.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($E3.b,X)		; Store accumulator ($E3.b,X) [Reads: Direct Page, Accumulator, X Index]
	lda ($E3.b,X)		; Load accumulator ($E3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	asl $30.b		; Arithmetic shift left $30.b [Reads: Direct Page] [Flags: ZCN]
	lda #$4E9C.w		; Load #$4E9C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($79.b,X)		; Exclusive OR accumulator with memory ($79.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	sty $779D.w		; Store Y register to $779D.w [Reads: Y Index]
	asl $0C.b,X		; Arithmetic shift left $0C.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ldx $87.b		; Load $87.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	sec		; Set carry ; Set carry flag [Flags: C]
	asl $30.b		; Arithmetic shift left $30.b [Reads: Direct Page] [Flags: ZCN]
	eor $9F.b,X		; Exclusive OR accumulator with memory $9F.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($40.b),Y		; Compare accumulator ($40.b),Y [Reads: Direct Page, Accumulator, Y Index] [Flags: ZCN]
	jmp $8DA1A0.l		; Jump long to $8DA1A0.l [Flow: jump]
	ldx #$0903.w		; Load #$0903.w into X register [Writes: X Index] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	mvp $AA,$81		; Move block positive $AA,$81 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $A1.b,X		; Exclusive OR accumulator with memory $A1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	asl $48.b		; Arithmetic shift left $48.b [Reads: Direct Page] [Flags: ZCN]
	nop		; No operation
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sta $A68D44.l,X		; Store accumulator (long,X) $A68D44.l,X [Reads: Accumulator, X Index]
	ora ($15.b,S),Y		; OR accumulator (stack relative indirect indexed) ($15.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $A1EF4A.l,X		; Store accumulator (long,X) $A1EF4A.l,X [Reads: Accumulator, X Index]
	asl $53.b		; Arithmetic shift left $53.b [Reads: Direct Page] [Flags: ZCN]
	asl $A6.b		; Arithmetic shift left $A6.b [Reads: Direct Page] [Flags: ZCN]
	lda [$06.b]		; Load accumulator (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sta $A98D44.l,X		; Store accumulator (long,X) $A98D44.l,X [Reads: Accumulator, X Index]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	bit $06.b		; Test bits $06.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	eor [$A6.b]		; Exclusive OR accumulator with memory (long) [$A6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $AA.b		; Arithmetic shift left $AA.b [Reads: Direct Page] [Flags: ZCN]
	ldx $F5.b		; Load $F5.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	asl $AB.b		; Arithmetic shift left $AB.b [Reads: Direct Page] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sbc $010606.l,X		; Subtract with carry (long,X) $010606.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	asl $0103.w,X		; Arithmetic shift left $0103.w,X [Reads: X Index] [Flags: ZCN]
	asl $07.b		; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZCN]
	bit $06.b		; Test bits $06.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora [$06.b]		; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0C1D.w,X		; Arithmetic shift left $0C1D.w,X [Reads: X Index] [Flags: ZCN]
	asl $0F.b		; Arithmetic shift left $0F.b [Reads: Direct Page] [Flags: ZCN]
	ora [$1E.b]		; OR accumulator with memory (long) [$1E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $09.b		; Test and set bits $09.b [Reads: Accumulator] [Flags: Z]
	bit $06.b		; Test bits $06.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	asl $1E.b		; Arithmetic shift left $1E.b [Reads: Direct Page] [Flags: ZCN]
	asl $0F06.w,X		; Arithmetic shift left $0F06.w,X [Reads: X Index] [Flags: ZCN]
	ora [$01.b]		; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $1E.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $2307.w,X		; Arithmetic shift left $2307.w,X [Reads: X Index] [Flags: ZCN]
	asl $1B.b		; Arithmetic shift left $1B.b [Reads: Direct Page] [Flags: ZCN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$0106.w		; Logical OR #$0106.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $1E.b,S		; OR accumulator with stack relative $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $000B.w,X		; Arithmetic shift left $000B.w,X [Reads: X Index] [Flags: ZCN]
	ora $0606.w,Y		; OR accumulator with memory $0606.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $0005.w,X		; Arithmetic shift left $0005.w,X [Reads: X Index] [Flags: ZCN]
	ora [$07.b]		; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $01.b,S		; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $1E.b		; Arithmetic shift left $1E.b [Reads: Direct Page] [Flags: ZCN]
	ora $000B.w,Y		; OR accumulator with memory $000B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $1E.b		; Rotate left $1E.b [Reads: Direct Page] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl $06.b		; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZCN]
	asl $0001.w,X		; Arithmetic shift left $0001.w,X [Reads: X Index] [Flags: ZCN]
	ora #$0902.w		; Logical OR #$0902.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $051E.w,X		; Arithmetic shift left $051E.w,X [Reads: X Index] [Flags: ZCN]
	and $1E.b,S		; AND accumulator with stack relative $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0306.w,X		; OR accumulator with memory $0306.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$1E.b]		; OR accumulator with memory (long) [$1E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1E01.w,Y		; OR accumulator with memory $1E01.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $2311.w,X		; Arithmetic shift left $2311.w,X [Reads: X Index] [Flags: ZCN]
	asl $1D0C.w,X		; Arithmetic shift left $1D0C.w,X [Reads: X Index] [Flags: ZCN]
	asl $0F.b		; Arithmetic shift left $0F.b [Reads: Direct Page] [Flags: ZCN]
	ora ($02.b,X)		; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora #$0C1E.w		; Logical OR #$0C1E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $1E.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $051C.w,X		; Arithmetic shift left $051C.w,X [Reads: X Index] [Flags: ZCN]
	and $1E.b,S		; AND accumulator with stack relative $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $021B.w,Y		; OR accumulator with memory $021B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $07.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZCN]
	ora [$06.b]		; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $1E.b		; Rotate left $1E.b [Reads: Direct Page] [Flags: ZCN]
	asl $19.b		; Arithmetic shift left $19.b [Reads: Direct Page] [Flags: ZCN]
	cop $0E.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $06.b,S		; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $07.b		; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZCN]
	jsl $1E2406.l		; Jump to subroutine long $1E2406.l [Writes: Stack Pointer] [Flow: call]
	ora [$1D.b]		; OR accumulator with memory (long) [$1D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	asl $0003.w		; Arithmetic shift left $0003.w [Flags: ZCN]
	cop $19.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $06.b,S		; AND accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx #$1D2F.w		; Compare #$1D2F.w with X register [Reads: X Index] [Flags: ZCN]
	asl $00.b		; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZCN]
	asl $0606.w,X		; Arithmetic shift left $0606.w,X [Reads: X Index] [Flags: ZCN]
	ora $031E.w,Y		; OR accumulator with memory $031E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $19.b		; Arithmetic shift left $19.b [Reads: Direct Page] [Flags: ZCN]
	ora [$06.b]		; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
L062D06:
	asl $0E.b		; Arithmetic shift left $0E.b [Reads: Direct Page] [Flags: ZCN]
	asl $00.b		; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZCN]
	asl $0606.w		; Arithmetic shift left $0606.w [Flags: ZCN]
	ora $000303.l		; OR accumulator with memory (long) $000303.l [Writes: Accumulator] [Flags: ZN]
	brk $1E.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$1E.b]		; OR accumulator with memory (long) [$1E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0303.w,X		; Arithmetic shift left $0303.w,X [Reads: X Index] [Flags: ZCN]
	ora [$19.b]		; OR accumulator with memory (long) [$19.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0E.b		; Arithmetic shift left $0E.b [Reads: Direct Page] [Flags: ZCN]
	tsb $03.b		; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	asl $00.b		; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZCN]
	tsb $0303.w		; Test and set bits $0303.w [Reads: Accumulator] [Flags: Z]
	ora [$0D.b]		; OR accumulator with memory (long) [$0D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $03.b		; Test bits $03.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	bpl L062D32.b		; Branch if plus to L062D32.b [Flow: branch]
	.db $10, $1E		; Invalid branch target (bpl L062D4B) ; Branch if plus to $10, $1E [Flow: branch]
	tsb $0303.w		; Test and set bits $0303.w [Reads: Accumulator] [Flags: Z]
	ora ($0C.b,X)		; Logical OR ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
L062D32:
	ora $1C.b,S		; OR accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1E1B17.l		; OR accumulator with memory (long) $1E1B17.l [Writes: Accumulator] [Flags: ZN]
	asl $0207.w		; Arithmetic shift left $0207.w [Flags: ZCN]
	bit $03.b		; Test bits $03.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora $1701.w		; Logical OR $1701.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $011E.w,X		; Arithmetic shift left $011E.w,X [Reads: X Index] [Flags: ZCN]
	cop $1B.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0101.w,X		; Arithmetic shift left $0101.w,X [Reads: X Index] [Flags: ZCN]
	sbc $06A606.l,X		; Subtract with carry (long,X) $06A606.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ldy $E363.w		; Load $E363.w into Y register [Writes: Y Index] [Flags: ZN]
	sty $6C.b,X		; Store Y register $6C.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
L062D52:
	and $80.b,S		; AND accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp ($39.b),Y		; Compare accumulator ($39.b),Y [Reads: Direct Page, Accumulator, Y Index] [Flags: ZCN]
	bra L062D06.b		; Branch always to L062D06.b [Flow: branch]
	adc ($F5.b),Y		; Add with carry ($F5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	lda [$54.b]		; Load accumulator (long) [$54.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $AE.b,X		; Rotate right $AE.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	.db $30, $24		; Invalid branch target (bmi L062D85) ; Branch if minus to $30, $24 [Flow: branch]
	bit $80.b		; Test bits $80.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and ($6A.b)		; AND accumulator with memory (indirect) ($6A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $54A6B0.l		; Load long $54A6B0.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ror $ED.b,X		; Rotate right $ED.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda ($B2.b),Y		; Load accumulator ($B2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($8023.w)		; Jump indirect to ($8023.w) [Flow: jump]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sta $80241D.l,X		; Store accumulator (long,X) $80241D.l,X [Reads: Accumulator, X Index]
	asl $63.b		; Arithmetic shift left $63.b [Reads: Direct Page] [Flags: ZCN]
	lda ($7A.b,S),Y		; Load accumulator (stack relative indirect indexed) ($7A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $3BB4.w,X		; OR accumulator with memory $3BB4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $8080CF.l,X		; Store accumulator (long,X) $8080CF.l,X [Reads: Accumulator, X Index]
	lda $CF.b,X		; Load $CF.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	trb $6C39.w		; Test and reset bits $6C39.w [Reads: Accumulator] [Flags: Z]
	lsr $E363.w,X		; Logical shift right $E363.w,X [Reads: X Index] [Flags: ZCN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ldx $E3.b,Y		; Load X register $E3.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $B766.w,X		; OR accumulator with memory $B766.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$78.b]		; OR accumulator with memory (long) [$78.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $BE.b		; Load $BE.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	sbc $A9.b,S		; Subtract stack-relative $A9.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	cmp #$E559.w		; Compare #$E559.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	.db $62, $BF, $63		; Bank wrapping branch target ; Push effective relative address $62, $BF, $63 [Writes: Stack Pointer]
	cmp ($0B.b,X)		; Compare accumulator ($0B.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: ZCN]
	.db $62, $80, $20		; Invalid branch target (per L064E22) ; Push effective relative address $62, $80, $20 [Writes: Stack Pointer]
	ror $AE.b,X		; Rotate right $AE.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $BA42.w,X		; OR accumulator with memory $BA42.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	cmp $C6.b		; Compare $C6.b with accumulator [Reads: Direct Page, Accumulator] [Flags: ZCN]
	tsb $C763.w		; Test and set bits $C763.w [Reads: Accumulator] [Flags: Z]
	tsb $8053.w		; Test and set bits $8053.w [Reads: Accumulator] [Flags: Z]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sbc $1E7A.w		; Subtract $1E7A.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	wai		; Wait for interrupt
	cop $1D.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $8FCD.w		; Compare $8FCD.w with Y register [Reads: Y Index] [Flags: ZCN]
	sbc $63.b		; Subtract $63.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	dec $AF07.w		; Decrement $AF07.w [Flags: ZN]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
L062DC1:
	dec $803F.w,X		; Decrement memory $803F.w,X [Reads: X Index] [Flags: ZN]
L062DC4:
	lda ($3F.b)		; Load accumulator (indirect) ($3F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$D1.b]		; Add with carry (long) [$D1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ora #$4CB2.w		; Logical OR #$4CB2.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stx $94.b		; Store X register to $94.b [Reads: X Index]
	sta [$31.b]		; Store accumulator (long) [$31.b] [Reads: Direct Page, Accumulator]
	bra L062D52.b		; Branch always to L062D52.b [Flow: branch]
	sbc ($64.b),Y		; Subtract with carry ($64.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	cmp $6107.w,Y		; Compare accumulator $6107.w,Y [Reads: Y Index] [Flags: ZCN]
	bra L062DC4.b		; Branch always to L062DC4.b [Flow: branch]
	mvp $1D,$8D		; Move block positive $1D,$8D [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($23.b)		; Load accumulator (indirect) ($23.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bra L062DC1.b		; Branch always to L062DC1.b [Flow: branch]
	eor $4F.b		; Exclusive OR $4F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $DE1D.w		; Store accumulator to $DE1D.w [Reads: Accumulator]
	.db $80, $80		; Invalid branch target (bra L062D68) ; Branch always to $80, $80 [Flow: branch]
	xce		; Exchange carry bit to set emulation or native mode ; Exchange carry and emulation bits [Flags: C]
	cmp $1DA595.l,X		; Compare accumulator (long,X) $1DA595.l,X [Reads: Accumulator, X Index] [Flags: ZCN]
	.db $80, $CA		; Invalid branch target (bra L062DB9) ; Branch always to $80, $CA [Flow: branch]
	jmp ($8080.w)		; Jump indirect to ($8080.w) [Flow: jump]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $1D.b,X		; Store accumulator to $1D.b,X [Reads: Accumulator, X Index]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $80, $80		; Invalid branch target (bra L062D78) ; Branch always to $80, $80 [Flow: branch]
	eor [$6B.b]		; Exclusive OR accumulator with memory (long) [$6B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1C1D.w,X		; Store accumulator to $1C1D.w,X [Reads: Accumulator, X Index]
	cpx #$A59F.w		; Compare #$A59F.w with X register [Reads: X Index] [Flags: ZCN]
	and $E2E1.w,Y		; AND accumulator with memory $E2E1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	mvp $D9,$44		; Move block positive $D9,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lda $880380.l		; Load long $880380.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	mvp $C7,$44		; Move block positive $C7,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $50, $4B		; Invalid branch target (bvc L062E5E) ; Branch if overflow clear to $50, $4B [Flow: branch]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sty $868D.w		; Store Y register to $868D.w [Reads: Y Index]
	jmp ($E3AA.w)		; Jump indirect to ($E3AA.w) [Flow: jump]
	cpx $4444.w		; Compare $4444.w with X register [Reads: X Index] [Flags: ZCN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $F0, $4B		; Invalid branch target (beq L062E6B) ; Branch if equal to $F0, $4B [Flow: branch]
	cmp ($33.b,S),Y		; Compare accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer] [Flags: ZCN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	nop		; No operation
	cpx $44.b		; Compare $44.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	dec $4C.b,X		; Decrement memory $4C.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	bit $4B.b		; Test bits $4B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sbc ($63.b),Y		; Subtract with carry ($63.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $E6.b		; Subtract $E6.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	eor #$EDD1.w		; Exclusive OR #$EDD1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpx $EB.b		; Compare $EB.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $1D1D01.l,X		; Subtract with carry (long,X) $1D1D01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl $07.b		; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZCN]
	ora $0D10.w,X		; OR accumulator with memory $0D10.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $061E.w,X		; Arithmetic shift left $061E.w,X [Reads: X Index] [Flags: ZCN]
	ora $431E.w,X		; OR accumulator with memory $431E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $1D.b		; Arithmetic shift left $1D.b [Reads: Direct Page] [Flags: ZCN]
	and $06.b,S		; AND accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $1E.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0B.b		; Logical OR $0B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $1E0206.l		; Jump to subroutine long $1E0206.l [Writes: Stack Pointer] [Flow: call]
	ora $06.b		; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $060B0E.l		; Jump to subroutine long $060B0E.l [Writes: Stack Pointer] [Flow: call]
	tsb $1E.b		; Test and set bits $1E.b [Reads: Accumulator] [Flags: Z]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $10, $0D		; Invalid branch target (bpl L062E6A) ; Branch if plus to $10, $0D [Flow: branch]
	ora ($06.b,X)		; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $0004.w,X		; Arithmetic shift left $0004.w,X [Reads: X Index] [Flags: ZCN]
	ora $1E22.w,X		; OR accumulator with memory $1E22.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,X		; OR accumulator with memory $00.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $02.b		; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora $011E.w,Y		; OR accumulator with memory $011E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($1E.b,X)		; Logical OR ($1E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $1D.b		; Test and set bits $1D.b [Reads: Accumulator] [Flags: Z]
	ora [$1E.b]		; OR accumulator with memory (long) [$1E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1E1D.w,X		; OR accumulator with memory $1E1D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $1E.b		; Test and set bits $1E.b [Reads: Accumulator] [Flags: Z]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl $2201.w,X		; Arithmetic shift left $2201.w,X [Reads: X Index] [Flags: ZCN]
	asl $1D.b		; Arithmetic shift left $1D.b [Reads: Direct Page] [Flags: ZCN]
	asl $0606.w,X		; Arithmetic shift left $0606.w,X [Reads: X Index] [Flags: ZCN]
	asl $1E1D.w,X		; Arithmetic shift left $1E1D.w,X [Reads: X Index] [Flags: ZCN]
	ora #$0C1E.w		; Logical OR #$0C1E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl $1E.b,X		; Arithmetic shift left $1E.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $05.b,S		; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($06.b,X)		; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $1E.b		; Arithmetic shift left $1E.b [Reads: Direct Page] [Flags: ZCN]
	asl $0609.w,X		; Arithmetic shift left $0609.w,X [Reads: X Index] [Flags: ZCN]
	tsb $03.b		; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	asl $0A.b		; Arithmetic shift left $0A.b [Reads: Direct Page] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	ora $1C.b		; Logical OR $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0084.w		; Arithmetic shift left $0084.w [Flags: ZCN]
	eor $1E060B.l,X		; Exclusive OR accumulator with memory (long,X) $1E060B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b,X)		; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $0A.b		; Arithmetic shift left $0A.b [Reads: Direct Page] [Flags: ZCN]
	asl $1816.w,X		; Arithmetic shift left $1816.w,X [Reads: X Index] [Flags: ZCN]
	ora $01.b		; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsl $041106.l		; Jump to subroutine long $041106.l [Writes: Stack Pointer] [Flow: call]
	tsb $1F.b		; Test and set bits $1F.b [Reads: Accumulator] [Flags: Z]
	asl $04.b,X		; Arithmetic shift left $04.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $1F0A05.l,X		; Logical OR long $1F0A05.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora $06.b		; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $06.b,S		; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $041F.w,Y		; OR accumulator with memory $041F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $22.b		; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
	ora $220500.l,X		; Logical OR long $220500.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($06.b),Y		; OR accumulator with memory ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $071D10.l,X		; Logical OR long $071D10.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $24.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $180C01.l,X		; Logical OR long $180C01.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $1E0411.l		; Jump to subroutine long $1E0411.l [Writes: Stack Pointer] [Flow: call]
	ora $00060C.l,X		; Logical OR long $00060C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $1F.b		; Logical AND $1F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $05050A.l,X		; Logical OR long $05050A.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $06.b,X		; Arithmetic shift left $06.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $1F.b		; Logical OR $1F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bpl L062EEF.b		; Branch if plus to L062EEF.b [Flow: branch]
	asl $1F.b		; Arithmetic shift left $1F.b [Reads: Direct Page] [Flags: ZCN]
	ora $051F05.l		; OR accumulator with memory (long) $051F05.l [Writes: Accumulator] [Flags: ZN]
L062EEF:
	ora $1F.b		; Logical OR $1F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl $0A1F.w,X		; Arithmetic shift left $0A1F.w,X [Reads: X Index] [Flags: ZCN]
	ora $060505.l,X		; Logical OR long $060505.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$1F07.w		; Logical OR #$1F07.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $1B0A0A.l		; OR accumulator with memory (long) $1B0A0A.l [Writes: Accumulator] [Flags: ZN]
	jsl $1F0610.l		; Jump to subroutine long $1F0610.l [Writes: Stack Pointer] [Flow: call]
	ora $0A.b		; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $06.b		; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $10251F.l		; Jump to subroutine long $10251F.l [Writes: Stack Pointer] [Flow: call]
	brk $1F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $10.b,S		; AND accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $011A1A.l		; OR accumulator with memory (long) $011A1A.l [Writes: Accumulator] [Flags: ZN]
	asl $101F.w,X		; Arithmetic shift left $101F.w,X [Reads: X Index] [Flags: ZCN]
	bpl L062F28.b		; Branch if plus to L062F28.b [Flow: branch]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
L062F1D:
	ora $0E01.w,Y		; OR accumulator with memory $0E01.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($1F.b),Y		; OR accumulator with memory ($1F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $01FF.w		; Arithmetic shift left $01FF.w [Flags: ZCN]
	adc ($72.b),Y		; Add with carry ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
L062F28:
	.db $80, $07		; Invalid branch target (bra L062F31) ; Branch always to $80, $07 [Flow: branch]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	adc $B0AA.w,Y		; Add $B0AA.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc [$80.b]		; Subtract with carry (long) [$80.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	eor $43E8.w,Y		; Exclusive OR accumulator with memory $43E8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bra L062F84.b		; Branch always to L062F84.b [Flow: branch]
	and $80.b,S		; AND accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $E9.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L062F39:
	lda ($53.b,X)		; Load accumulator ($53.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $EA1080.l		; Jump to subroutine long $EA1080.l [Writes: Stack Pointer] [Flow: call]
	tsx		; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	bra L062F5C.b		; Branch always to L062F5C.b [Flow: branch]
	brk $1A.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta [$BF.b]		; Store accumulator (long) [$BF.b] [Reads: Direct Page, Accumulator]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	adc $06AA.w,Y		; Add $06AA.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	bra L062F39.b		; Branch always to L062F39.b [Flow: branch]
.INDEX 16
	rep #$1D
	adc $EC.b,S		; Add with carry (stack relative) $EC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	cpx #$1D5C.w		; Compare #$1D5C.w with X register [Reads: X Index] [Flags: ZCN]
	sta $61.b		; Store accumulator to $61.b [Reads: Accumulator]
	sta [$F0.b],Y		; Store accumulator (long indexed) [$F0.b],Y [Reads: Direct Page, Accumulator, Y Index]
	adc ($53.b),Y		; Add with carry ($53.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	asl $CB.b		; Arithmetic shift left $CB.b [Reads: Direct Page] [Flags: ZCN]
L062F5C:
.ACCU 16
	rep #$22
	and $F371F1.l,X		; AND accumulator with memory (long,X) $F371F1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($85.b)		; Subtract with carry (indirect) ($85.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($25.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($25.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
L062F66:
	and $F4.b		; Logical AND $F4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($A6.b),Y		; Add with carry ($A6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	ldx $80.b		; Load $80.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	sbc $80.b,X		; Subtract $80.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	bra L062F66.b		; Branch always to L062F66.b [Flow: branch]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	sbc [$F5.b],Y		; Subtract with carry (long indexed) [$F5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	sta $BD15.w,Y		; Store accumulator to $BD15.w,Y [Reads: Accumulator, Y Index]
L062F77:
	sbc $AA51.w,Y		; Subtract with carry $AA51.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	asl $80.b		; Arithmetic shift left $80.b [Reads: Direct Page] [Flags: ZCN]
	.db $80, $FA		; Invalid branch target (bra L062F78) ; Branch always to $80, $FA [Flow: branch]
	xce		; Exchange carry bit to set emulation or native mode ; Exchange carry and emulation bits [Flags: C]
	and $BF3D.w		; Logical AND $BF3D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($24.b,X)		; Load accumulator ($24.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
L062F84:
	ora $5A.b,X		; OR accumulator with memory $5A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	cpx #$F69F.w		; Compare #$F69F.w with X register [Reads: X Index] [Flags: ZCN]
L062F8A:
	asl $80.b		; Arithmetic shift left $80.b [Reads: Direct Page] [Flags: ZCN]
	bra L062F8A.b		; Branch always to L062F8A.b [Flow: branch]
	sbc $FE3D.w,X		; Subtract with carry $FE3D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	lda ($24.b,X)		; Load accumulator ($24.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	sta $5ACCFF.l,X		; Store accumulator (long,X) $5ACCFF.l,X [Reads: Accumulator, X Index]
	sbc $5371.w		; Subtract $5371.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	bra L062F1D.b		; Branch always to L062F1D.b [Flow: branch]
	cmp ($B9.b),Y		; Compare accumulator ($B9.b),Y [Reads: Direct Page, Accumulator, Y Index] [Flags: ZCN]
	tsx		; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	brk $11.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$FF01.w		; Compare #$FF01.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	sta $ED1302.l,X		; Store accumulator (long,X) $ED1302.l,X [Reads: Accumulator, X Index]
L062FA9:
	asl $20.b,X		; Arithmetic shift left $20.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	bra L062F77.b		; Branch always to L062F77.b [Flow: branch]
	ora $BB.b,S		; OR accumulator with stack relative $BB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $0462.w,X		; Load Y register $0462.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sbc $2C2C2E.l,X		; Subtract with carry (long,X) $2C2C2E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	cpx $07ED.w		; Compare $07ED.w with X register [Reads: X Index] [Flags: ZCN]
	.db $D0, $43		; Invalid branch target (bne L062FFF) ; Branch if not equal to $D0, $43 [Flow: branch]
	ldx $65.b,Y		; Load X register $65.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	stz $08.b		; Store zero to $08.b
	ora #$5A9E.w		; Logical OR #$5A9E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $2C2C.w		; Rotate left $2C2C.w [Flags: ZCN]
	sbc $B50D.w,Y		; Subtract with carry $B50D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $80, $1D		; Invalid branch target (bra L062FE8) ; Branch always to $80, $1D [Flow: branch]
	adc $0E.b		; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ora $ECFFF0.l,X		; Logical OR long $ECFFF0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $E009.w,X		; Load $E009.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	trb $D0.b		; Test and reset bits $D0.b [Reads: Accumulator] [Flags: Z]
	bra L062FA9.b		; Branch always to L062FA9.b [Flow: branch]
	ora $2F.b,X		; OR accumulator with memory $2F.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FFFF16.l,X		; Subtract with carry (long,X) $FFFF16.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora [$15.b],Y		; OR accumulator with memory (long indexed) [$15.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $191518.l,X		; Subtract with carry (long,X) $191518.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	cpx $80FF.w		; Compare $80FF.w with X register [Reads: X Index] [Flags: ZCN]
	and $1A40.w		; Logical AND $1A40.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $FF1313.l		; AND accumulator with memory (long) $FF1313.l [Writes: Accumulator] [Flags: ZN]
	jsl $1B06F7.l		; Jump to subroutine long $1B06F7.l [Writes: Stack Pointer] [Flow: call]
	sbc $09FF14.l,X		; Subtract with carry (long,X) $09FF14.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	jmp $624C.w		; Jump to $624C.w [Flow: jump]
	trb $F706.w		; Test and reset bits $F706.w [Reads: Accumulator] [Flags: Z]
	sbc [$5E.b],Y		; Subtract with carry (long indexed) [$5E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	eor $1F1414.l,X		; Exclusive OR accumulator with memory (long,X) $1F1414.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $07.b,S		; AND accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $EBD5D5.l		; OR accumulator with memory (long) $EBD5D5.l [Writes: Accumulator] [Flags: ZN]
	adc ($20.b),Y		; Add with carry ($20.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	trb $14.b		; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	sbc ($6A.b),Y		; Subtract with carry ($6A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	asl $FB.b		; Arithmetic shift left $FB.b [Reads: Direct Page] [Flags: ZCN]
	nop		; No operation
	eor $2F.b,S		; Exclusive OR accumulator with stack relative $2F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($43.b,X)		; Logical AND ($43.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $0F0F15.l,X		; Subtract with carry (long,X) $0F0F15.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $06.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $10.b,S		; OR accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $10111E.l,X		; Logical OR long $10111E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $070910.l		; OR accumulator with memory (long) $070910.l [Writes: Accumulator] [Flags: ZN]
	ora $10.b		; Logical OR $10.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bpl L06302C.b		; Branch if plus to L06302C.b [Flow: branch]
	ora [$03.b]		; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
L06302C:
	ora $22.b,S		; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1B27E0.l,X		; Logical OR long $1B27E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $05090F.l,X		; Logical OR long $05090F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $07.b		; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0D10.w		; Logical OR $0D10.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0303.w		; Logical OR $0303.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $10		; Invalid branch target (bpl L063050) ; Branch if plus to $10, $10 [Flow: branch]
	ora $0F.b		; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $090705.l,X		; Logical OR long $090705.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($10.b,X)		; Logical OR ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $1010.w		; Arithmetic shift left $1010.w [Flags: ZCN]
	cop $0A.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $050F0F.l,X		; Logical OR long $050F0F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $10090F.l		; OR accumulator with memory (long) $10090F.l [Writes: Accumulator] [Flags: ZN]
	eor $0E.b,S		; Exclusive OR accumulator with stack relative $0E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($04.b,X)		; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($10.b,X)		; Logical OR ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $0A.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $0083.w		; Test and reset bits $0083.w [Reads: Accumulator] [Flags: Z]
	and $0500.w,Y		; AND accumulator with memory $0500.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $10.b		; Rotate left $10.b [Reads: Direct Page] [Flags: ZCN]
	trb $0F.b		; Test and reset bits $0F.b [Reads: Accumulator] [Flags: Z]
L06306B:
	ora $0A.b		; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1F111C.l,X		; Logical OR long $1F111C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $1F1F.w,X		; Arithmetic shift left $1F1F.w,X [Reads: X Index] [Flags: ZCN]
	bpl L063079.b		; Branch if plus to L063079.b [Flow: branch]
	trb $1F0A.w		; Test and reset bits $1F0A.w [Reads: Accumulator] [Flags: Z]
L063079:
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $1F050A.l,X		; Logical OR long $1F050A.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $1C061E.l		; Jump to subroutine long $1C061E.l [Writes: Stack Pointer] [Flow: call]
	ora $0D1010.l,X		; Logical OR long $0D1010.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $10.b		; Arithmetic shift left $10.b [Reads: Direct Page] [Flags: ZCN]
	and $0A.b,S		; AND accumulator with stack relative $0A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora $050A1F.l,X		; Logical OR long $050A1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1F.b		; Logical OR $1F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b),Y		; OR accumulator with memory ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $1F		; Invalid branch target (bpl L0630B5) ; Branch if plus to $10, $1F [Flow: branch]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	jsl $1C1306.l		; Jump to subroutine long $1C1306.l [Writes: Stack Pointer] [Flow: call]
	ora $1C1C1F.l,X		; Logical OR long $1C1C1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1C.b		; Logical OR $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $100C10.l,X		; Logical OR long $100C10.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $06.b		; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZCN]
	ora $0A.b		; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora $150507.l,X		; Logical OR long $150507.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $11081C.l		; Jump to subroutine long $11081C.l [Writes: Stack Pointer] [Flow: call]
	ora $0C.b		; Logical OR $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $06051F.l		; OR accumulator with memory (long) $06051F.l [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	sta [$0F.b],Y		; Store accumulator (long indexed) [$0F.b],Y [Reads: Direct Page, Accumulator, Y Index]
	ora $11.b		; Logical OR $11.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $10		; Invalid branch target (bpl L0630D2) ; Branch if plus to $10, $10 [Flow: branch]
	ora [$0A.b]		; OR accumulator with memory (long) [$0A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $0A		; Invalid branch target (bpl L0630D0) ; Branch if plus to $10, $0A [Flow: branch]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl $0A.b		; Arithmetic shift left $0A.b [Reads: Direct Page] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	.db $10, $08		; Invalid branch target (bpl L0630D4) ; Branch if plus to $10, $08 [Flow: branch]
	ora #$220F.w		; Logical OR #$220F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bpl L0630D5.b		; Branch if plus to L0630D5.b [Flow: branch]
	ora $09.b		; Logical OR $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
L0630D5:
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	jsl $102205.l		; Jump to subroutine long $102205.l [Writes: Stack Pointer] [Flow: call]
	ora #$1B07.w		; Logical OR #$1B07.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$1C.b]		; OR accumulator with memory (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$0605.w		; Logical OR #$0605.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $22.b		; Arithmetic shift left $22.b [Reads: Direct Page] [Flags: ZCN]
	bpl L06306B.b		; Branch if plus to L06306B.b [Flow: branch]
	brk $4D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $09.b,S		; Exclusive OR accumulator with stack relative $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$26.b]		; OR accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $05		; Invalid branch target (bpl L0630F9) ; Branch if plus to $10, $05 [Flow: branch]
	ora $1F1F10.l,X		; Logical OR long $1F1F10.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0F.b		; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $01231F.l		; Jump to subroutine long $01231F.l [Writes: Stack Pointer] [Flow: call]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $1003.w		; Logical OR $1003.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $1003.w		; Logical OR $1003.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($1F.b),Y		; OR accumulator with memory ($1F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $01111F.l		; OR accumulator with memory (long) $01111F.l [Writes: Accumulator] [Flags: ZN]
	sbc $377C15.l,X		; Subtract with carry (long,X) $377C15.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	lsr $6AB2.w		; Logical shift right $6AB2.w [Flags: ZCN]
	ldx $AF.b,Y		; Load X register $AF.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	jsl $B81220.l		; Jump to subroutine long $B81220.l [Writes: Stack Pointer] [Flow: call]
	sta $2498D7.l		; Store accumulator (long) $2498D7.l [Reads: Accumulator]
	sbc $B2.b		; Subtract $B2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	lda ($D2.b,S),Y		; Load accumulator (stack relative indirect indexed) ($D2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec $44.b		; Decrement $44.b [Reads: Direct Page] [Flags: ZN]
	mvp $23,$62		; Move block positive $23,$62 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cpx #$B036.w		; Compare #$B036.w with X register [Reads: X Index] [Flags: ZCN]
	rol $96.b		; Rotate left $96.b [Reads: Direct Page] [Flags: ZCN]
	rol $E5E5.w,X		; Rotate left $E5E5.w,X [Reads: X Index] [Flags: ZCN]
	ora $BAA6.w,X		; OR accumulator with memory $BAA6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldx $A9.b		; Load $A9.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	tyx		; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldy $69D7.w,X		; Load Y register $69D7.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	and [$E5.b]		; AND accumulator with memory (long) [$E5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $90, $3E		; Invalid branch target (bcc L06317A) ; Branch if carry clear to $90, $3E [Flow: branch]
	sbc $E5.b		; Subtract $E5.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	asl $F2.b		; Arithmetic shift left $F2.b [Reads: Direct Page] [Flags: ZCN]
	asl $BF.b		; Arithmetic shift left $BF.b [Reads: Direct Page] [Flags: ZCN]
	dec $C0.b,X		; Decrement memory $C0.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	cmp ($DC.b,X)		; Compare accumulator ($DC.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: ZCN]
	ora ($28.b),Y		; OR accumulator with memory ($28.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$A8.b]		; Load accumulator (long) [$A8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $69.b		; Subtract $69.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sta $7CC352.l,X		; Store accumulator (long,X) $7CC352.l,X [Reads: Accumulator, X Index]
	asl $E1.b		; Arithmetic shift left $E1.b [Reads: Direct Page] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sbc $DCC4.w,X		; Subtract with carry $DCC4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora ($8D.b),Y		; OR accumulator with memory ($8D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$A6A7.w		; Logical AND #$A6A7.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$65
	cmp [$E0.b]		; Compare accumulator (long) [$E0.b] [Reads: Direct Page, Accumulator] [Flags: ZCN]
	adc $118D54.l		; Add with carry (long) $118D54.l [Writes: Accumulator] [Flags: VCNZ]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sty $17.b		; Store Y register to $17.b [Reads: Y Index]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	adc ($2C.b,X)		; Add with carry ($2C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	and $6ACE.w		; Logical AND $6ACE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $2E10.w,X		; AND accumulator with memory $2E10.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sbc $112F.w,X		; Subtract with carry $112F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $934D30.l,X		; Subtract with carry (long,X) $934D30.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $43.b,S		; Add with carry (stack relative) $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	and ($D3.b),Y		; AND accumulator with memory ($D3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pei ($76.b)		; Push effective indirect address ($76.b) [Reads: Direct Page] [Writes: Stack Pointer]
	lda $25D6.w,Y		; Load $25D6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $1141.w,X		; Subtract with carry $1141.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	and ($33.b)		; AND accumulator with memory (indirect) ($33.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $FF.b		; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	sbc $941534.l,X		; Subtract with carry (long,X) $941534.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	cld		; Clear decimal ; Clear decimal flag [Flags: D]
	and $25.b,X		; Logical AND $25.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	trb $B9.b		; Test and reset bits $B9.b [Reads: Accumulator] [Flags: Z]
	lda $36C1.w,Y		; Load $36C1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$A0.b],Y		; AND accumulator with memory (long indexed) [$A0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $FF		; opcode wdm $FF ; Reserved instruction
	eor $38.b,S		; Exclusive OR accumulator with stack relative $38.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp [$98.b],Y		; Compare accumulator (long indexed) [$98.b],Y [Reads: Direct Page, Accumulator, Y Index] [Flags: ZCN]
	dec $0924.w,X		; Decrement memory $0924.w,X [Reads: X Index] [Flags: ZN]
	cpx #$2525.w		; Compare #$2525.w with X register [Reads: X Index] [Flags: ZCN]
	and $E522.w,Y		; AND accumulator with memory $E522.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx #$4148.w		; Load #$4148.w into X register [Writes: X Index] [Flags: ZN]
	eor #$E515.w		; Exclusive OR #$E515.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $EC.b,X		; Load $EC.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b,X)		; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora #$ECFF.w		; Logical OR #$ECFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	dec A		; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $E5.b,X		; Store accumulator to $E5.b,X [Reads: Accumulator, X Index]
	ldx #$17A8.w		; Load #$17A8.w into X register [Writes: X Index] [Flags: ZN]
	cmp $B1.b		; Compare $B1.b with accumulator [Reads: Direct Page, Accumulator] [Flags: ZCN]
	ora $9610.w,X		; OR accumulator with memory $9610.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	trb $14.b		; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora #$14F0.w		; Logical OR #$14F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	nop		; No operation
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tyx		; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldx $C5.b,Y		; Load X register $C5.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	lda $52E5.w,Y		; Load $52E5.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FF14EC.l,X		; Subtract with carry (long,X) $FF14EC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	cpx $62FF.w		; Compare $62FF.w with X register [Reads: X Index] [Flags: ZCN]
	sbc $4109.w		; Subtract $4109.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	adc ($90.b,S),Y		; Add with carry (stack relative indirect indexed) ($90.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc [$E5.b],Y		; Subtract with carry (long indexed) [$E5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $A5.b		; Subtract $A5.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc $620909.l,X		; Subtract with carry (long,X) $620909.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	inc $09.b,X		; Increment memory $09.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	sbc $EFEEFF.l,X		; Subtract with carry (long,X) $EFEEFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	eor ($5A.b,X)		; Exclusive OR accumulator with memory ($5A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $13.b		; Subtract $13.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc $1D.b		; Subtract $1D.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	jsl $FB6207.l		; Jump to subroutine long $FB6207.l [Writes: Stack Pointer] [Flow: call]
	asl $F7.b		; Arithmetic shift left $F7.b [Reads: Direct Page] [Flags: ZCN]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $D73D3C.l,X		; Subtract with carry (long,X) $D73D3C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	cmp $62.b		; Compare $62.b with accumulator [Reads: Direct Page, Accumulator] [Flags: ZCN]
	rol $EB22.w,X		; Rotate left $EB22.w,X [Reads: X Index] [Flags: ZCN]
	tsb $9FEC.w		; Test and set bits $9FEC.w [Reads: Accumulator] [Flags: Z]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	trb $F1.b		; Test and reset bits $F1.b [Reads: Accumulator] [Flags: Z]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora $01.b,X		; OR accumulator with memory $01.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($CA.b,X)		; Exclusive OR accumulator with memory ($CA.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $01		; opcode wdm $01 ; Reserved instruction
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $1D1F05.l,X		; Subtract with carry (long,X) $1D1F05.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora $1F1D1F.l,X		; Logical OR long $1F1D1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stx $00.b		; Store X register to $00.b [Reads: X Index]
	brk $04.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$0F.b]		; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($1D.b,X)		; Logical OR ($1D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $1F2A.w,X		; OR accumulator with memory $1F2A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0F.b,S		; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b,X)		; Logical OR ($11.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $1F2A.w,X		; Arithmetic shift left $1F2A.w,X [Reads: X Index] [Flags: ZCN]
	ora $0F.b		; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($07.b),Y		; OR accumulator with memory ($07.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bpl L063254.b		; Branch if plus to L063254.b [Flow: branch]
	ora $0F0701.l,X		; Logical OR long $0F0701.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $01.b,S		; Exclusive OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $1D02.w		; Arithmetic shift left $1D02.w [Flags: ZCN]
	ora $1F2405.l,X		; Logical OR long $1F2405.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora $1F1F.w,X		; OR accumulator with memory $1F1F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($0C.b,X)		; Logical OR ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0F1F1F.l		; OR accumulator with memory (long) $0F1F1F.l [Writes: Accumulator] [Flags: ZN]
	and $1F.b		; Logical AND $1F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b,X)		; Logical OR ($11.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0B0522.l,X		; Logical OR long $0B0522.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $0F07.w		; Arithmetic shift left $0F07.w [Flags: ZCN]
	ora ($10.b),Y		; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $09.b		; Logical OR $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
L063254:
	asl $1F11.w,X		; Arithmetic shift left $1F11.w,X [Reads: X Index] [Flags: ZCN]
	bpl L06326A.b		; Branch if plus to L06326A.b [Flow: branch]
	and $05.b,S		; AND accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b)		; OR accumulator with memory (indirect) ($03.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $07.b		; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$0905.w		; Logical OR #$0905.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $1F1009.l,X		; Logical OR long $1F1009.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1F1C0F.l,X		; Logical OR long $1F1C0F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
L06326A:
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $07.b,S		; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$23.b]		; OR accumulator with memory (long) [$23.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1E1001.l,X		; Logical OR long $1E1001.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ora $1F.b		; Logical OR $1F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $071F.w,X		; OR accumulator with memory $071F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$05.b]		; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $05221F.l		; Jump to subroutine long $05221F.l [Writes: Stack Pointer] [Flow: call]
	ora #$051E.w		; Logical OR #$051E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $10.b		; Logical OR $10.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $07101F.l,X		; Logical OR long $07101F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $08.b		; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $1F.b,S		; AND accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $05.b		; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: ZCN]
	ora $07.b		; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1B.b		; Logical OR $1B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($1F.b),Y		; OR accumulator with memory ($1F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $07000F.l		; Jump to subroutine long $07000F.l [Writes: Stack Pointer] [Flow: call]
	jsl $090605.l		; Jump to subroutine long $090605.l [Writes: Stack Pointer] [Flow: call]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $08.b		; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$24.b]		; OR accumulator with memory (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($05.b),Y		; OR accumulator with memory ($05.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $07.b		; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$0708.w		; Logical OR #$0708.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0522.w,X		; OR accumulator with memory $0522.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $1F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $050111.l		; Jump to subroutine long $050111.l [Writes: Stack Pointer] [Flow: call]
	ora $051F43.l,X		; Logical OR long $051F43.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0C05.w,X		; OR accumulator with memory $0C05.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $07.b		; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $10031F.l		; Jump to subroutine long $10031F.l [Writes: Stack Pointer] [Flow: call]
	ora $1F.b		; Logical OR $1F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($23.b),Y		; OR accumulator with memory ($23.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $040F22.l,X		; Logical OR long $040F22.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $11051F.l,X		; Logical OR long $11051F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $1023.w		; Arithmetic shift left $1023.w [Flags: ZCN]
	ora $0F.b,S		; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $080F22.l,X		; Logical OR long $080F22.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $060505.l,X		; Logical OR long $060505.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1003.w		; Logical OR $1003.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $FF01.w		; Logical OR $FF01.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($43.b,S),Y		; OR accumulator (stack relative indirect indexed) ($43.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stp		; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	mvp $A8,$45		; Move block positive $A8,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $47.b		; Logical shift right $47.b [Reads: Direct Page] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor #$4AC1.w		; Exclusive OR #$4AC1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor ($CC.b)		; Exclusive OR accumulator with memory (indirect) ($CC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $C4.b		; Logical AND $C4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($4C.b),Y		; Load accumulator ($4C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $4D62.w		; Exclusive OR $4D62.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($4D.b,X)		; Logical OR ($4D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor $5063.w		; Exclusive OR $5063.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $C8.b,S		; OR accumulator with stack relative $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor #$2005.w		; Exclusive OR #$2005.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	mvn $C8,$05		; Move block negative $C8,$05 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$076A.w		; Exclusive OR #$076A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $E3.b		; Test bits $E3.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	eor $CC5208.l,X		; Exclusive OR accumulator with memory (long,X) $CC5208.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $48.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($2B.b,X)		; Logical OR ($2B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	stz $69.b		; Store zero to $69.b
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	cmp $6F6E.w,Y		; Compare accumulator $6F6E.w,Y [Reads: Y Index] [Flags: ZCN]
	ora $F50610.l		; OR accumulator with memory (long) $F50610.l [Writes: Accumulator] [Flags: ZN]
	stx $7170.w		; Store X register to $7170.w [Reads: X Index]
	sta $E07265.l		; Store accumulator (long) $E07265.l [Reads: Accumulator]
L06332D:
	and [$15.b],Y		; AND accumulator with memory (long indexed) [$15.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sei		; Disable interrupts ; Set interrupt disable flag [Flags: I]
	stz $AAB5.w		; Store zero to $AAB5.w
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	bit $7B.b		; Test bits $7B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	ora $E5B1.w		; Logical OR $E5B1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $1220.w,X		; Rotate left $1220.w,X [Reads: X Index] [Flags: ZCN]
	adc $15B8.w,Y		; Add $15B8.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $AF.b		; Subtract $AF.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ldx $B5.b		; Load $B5.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	eor ($E5.b)		; Exclusive OR accumulator with memory (indirect) ($E5.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bcc L063399.b		; Branch if carry clear to L063399.b [Flow: branch]
	sbc $52.b		; Subtract $52.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	rol $7BE3.w,X		; Rotate left $7BE3.w,X [Reads: X Index] [Flags: ZCN]
	jmp ($6DA7.w,X)		; Jump indirect indexed to ($6DA7.w,X) [Reads: X Index] [Flow: jump]
	adc $A6AF.w,X		; Add $A6AF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	.db $90, $24		; Invalid branch target (bcc L06337A) ; Branch if carry clear to $90, $24 [Flow: branch]
	ror $7F7D.w,X		; Rotate right $7F7D.w,X [Reads: X Index] [Flags: ZCN]
	.db $80, $E9		; Invalid branch target (bra L063344) ; Branch always to $80, $E9 [Flow: branch]
	jsr $6512.w		; Jump to subroutine at $6512.w [Writes: Stack Pointer] [Flow: call]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sta ($0B.b,X)		; Store accumulator ($0B.b,X) [Reads: Direct Page, Accumulator, X Index]
	brl L0657AA.w		; Branch always long to L0657AA.w [Flow: branch]
	sbc $62.b		; Subtract $62.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sta $22.b,S		; Store accumulator (stack relative) $22.b,S [Reads: Accumulator, Stack Pointer]
	sbc $09.b		; Subtract $09.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	jsr $B7CD.w		; Jump to subroutine at $B7CD.w [Writes: Stack Pointer] [Flow: call]
	cmp $86.b		; Compare $86.b with accumulator [Reads: Direct Page, Accumulator] [Flags: ZCN]
	sta [$B1.b]		; Store accumulator (long) [$B1.b] [Reads: Direct Page, Accumulator]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sbc $B2.b		; Subtract $B2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	adc $88.b,S		; Add with carry (stack relative) $88.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	asl $E4.b		; Arithmetic shift left $E4.b [Reads: Direct Page] [Flags: ZCN]
	sbc $24.b		; Subtract $24.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc $B0.b		; Subtract $B0.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sty $C522.w		; Store Y register to $C522.w [Reads: Y Index]
	brk $24.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $A508E5.l		; Jump to subroutine long $A508E5.l [Writes: Stack Pointer] [Flow: call]
	cmp $B2E5.w,X		; Compare accumulator $B2E5.w,X [Reads: X Index] [Flags: ZCN]
L06338A:
	sbc $E5.b		; Subtract $E5.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ror $1A19.w		; Rotate right $1A19.w [Flags: ZCN]
	jsl $E5051B.l		; Jump to subroutine long $E5051B.l [Writes: Stack Pointer] [Flow: call]
	bcc L06332D.b		; Branch if carry clear to L06332D.b [Flow: branch]
	lda ($24.b)		; Load accumulator (indirect) ($24.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bra L0633BB.b		; Branch always to L0633BB.b [Flow: branch]
L063399:
	sbc $00.b		; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sta $1D62.w		; Store accumulator to $1D62.w [Reads: Accumulator]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $E58F8E.l,X		; Subtract with carry (long,X) $E58F8E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	bcc L06338A.b		; Branch if carry clear to L06338A.b [Flow: branch]
	sbc $7F.b		; Subtract $7F.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc $54.b		; Subtract $54.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc $6E.b		; Subtract $6E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	per L06383F.w		; Push effective relative address L06383F.w [Writes: Stack Pointer]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	sbc $402C94.l,X		; Subtract with carry (long,X) $402C94.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $62, $95, $22		; Invalid branch target (per L06564B) ; Push effective relative address $62, $95, $22 [Writes: Stack Pointer]
	cmp $0C.b		; Compare $0C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: ZCN]
	rol $A091.w,X		; Rotate left $A091.w,X [Reads: X Index] [Flags: ZCN]
L0633BB:
	ora ($44.b,X)		; Logical OR ($44.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $FEF7.w,X		; Subtract with carry $FEF7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora [$46.b]		; OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $229830.l		; AND accumulator with memory (long) $229830.l [Writes: Accumulator] [Flags: ZN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $A1A0.w,Y		; Store accumulator to $A1A0.w,Y [Reads: Accumulator, Y Index]
	lda [$9F.b]		; Load accumulator (long) [$9F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	trb $F1.b		; Test and reset bits $F1.b [Reads: Accumulator] [Flags: Z]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $0141E0.l,X		; Subtract with carry (long,X) $0141E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora $05.b,S		; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0A1F15.l,X		; Logical OR long $0A1F15.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $11.b		; Logical OR $11.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($1F.b),Y		; OR accumulator with memory ($1F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $05.b,X		; Arithmetic shift left $05.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $01.b,S		; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $110A11.l,X		; Logical OR long $110A11.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($1F.b),Y		; OR accumulator with memory ($1F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1C1B05.l,X		; Logical OR long $1C1B05.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b,X)		; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$01.b]		; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $111F07.l,X		; Logical OR long $111F07.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1F.b		; Logical OR $1F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $01101B.l,X		; Logical OR long $01101B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($0F.b,X)		; Logical OR ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $050701.l,X		; Logical OR long $050701.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$06.b]		; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $05.b		; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: ZCN]
	ora $1F111E.l,X		; Logical OR long $1F111E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $0201.w		; Test and set bits $0201.w [Reads: Accumulator] [Flags: Z]
	jsl $060D07.l		; Jump to subroutine long $060D07.l [Writes: Stack Pointer] [Flow: call]
	ora ($1F.b,X)		; Logical OR ($1F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $1F.b		; Logical OR $1F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $05.b		; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: ZCN]
	ora $06.b		; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($0E.b,X)		; Logical OR ($0E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $830702.l,X		; Logical OR long $830702.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $33.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $060201.l		; Jump to subroutine long $060201.l [Writes: Stack Pointer] [Flow: call]
	ora $01221C.l,X		; Logical OR long $01221C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	eor #$080C.w		; Exclusive OR #$080C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0907.w		; Logical OR #$0907.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $1C0107.l,X		; Logical OR long $1C0107.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $0C.b,X		; Arithmetic shift left $0C.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $000523.l		; OR accumulator with memory (long) $000523.l [Writes: Accumulator] [Flags: ZN]
	ora $220F22.l,X		; Logical OR long $220F22.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $100508.l,X		; Logical OR long $100508.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $071E.w,X		; Arithmetic shift left $071E.w,X [Reads: X Index] [Flags: ZCN]
	asl $07.b,X		; Arithmetic shift left $07.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $07.b		; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $1F0711.l		; Jump to subroutine long $1F0711.l [Writes: Stack Pointer] [Flow: call]
	ora $100511.l,X		; Logical OR long $100511.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bpl L063464.b		; Branch if plus to L063464.b [Flow: branch]
	trb $0722.w		; Test and reset bits $0722.w [Reads: Accumulator] [Flags: Z]
	brk $08.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L063464:
	stx $00.b		; Store X register to $00.b [Reads: X Index]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $0A.b		; Test and set bits $0A.b [Reads: Accumulator] [Flags: Z]
	bpl L06346C.b		; Branch if plus to L06346C.b [Flow: branch]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
L06346C:
	ora ($22.b,X)		; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $051F26.l		; OR accumulator with memory (long) $051F26.l [Writes: Accumulator] [Flags: ZN]
	ora ($05.b),Y		; OR accumulator with memory ($05.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1901.w		; Logical OR $1901.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($22.b,X)		; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b),Y		; OR accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $220511.l,X		; Logical OR long $220511.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $051109.l,X		; Logical OR long $051109.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora $1F01.w		; Logical OR $1F01.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($11.b,X)		; Logical OR ($11.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1F.b),Y		; OR accumulator with memory ($1F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $1E0805.l		; Jump to subroutine long $1E0805.l [Writes: Stack Pointer] [Flow: call]
	ora $1F051F.l,X		; Logical OR long $1F051F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $1A01.w		; Logical OR $1A01.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	lsr $05.b		; Logical shift right $05.b [Reads: Direct Page] [Flags: ZCN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $10, $10		; Invalid branch target (bpl L0634AE) ; Branch if plus to $10, $10 [Flow: branch]
	ora $1B05.w		; Logical OR $1B05.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $012210.l		; Jump to subroutine long $012210.l [Writes: Stack Pointer] [Flow: call]
	brk $05.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $1C1C10.l		; Jump to subroutine long $1C1C10.l [Writes: Stack Pointer] [Flow: call]
	ora ($11.b,X)		; Logical OR ($11.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $101C10.l,X		; Logical OR long $101C10.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $0D		; Invalid branch target (bpl L0634C0) ; Branch if plus to $10, $0D [Flow: branch]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0B.b		; Logical OR $0B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl $1F1A.w		; Arithmetic shift left $1F1A.w [Flags: ZCN]
	ora $110106.l,X		; Logical OR long $110106.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($1F.b,X)		; Logical OR ($1F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $1C.b		; Arithmetic shift left $1C.b [Reads: Direct Page] [Flags: ZCN]
	ora ($11.b,X)		; Logical OR ($11.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $FF0D.w		; Logical OR $FF0D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpx #$0641.w		; Compare #$0641.w with X register [Reads: X Index] [Flags: ZCN]
	adc $8E.b,S		; Add with carry (stack relative) $8E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	txs		; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sta [$9B.b]		; Store accumulator (long) [$9B.b] [Reads: Direct Page, Accumulator]
	tsb $23FF.w		; Test and set bits $23FF.w [Reads: Accumulator] [Flags: Z]
	bit $FF02.w		; Test bits $FF02.w with accumulator [Reads: Accumulator] [Flags: VNZ]
	sbc $71EDBD.l,X		; Subtract with carry (long,X) $71EDBD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	asl $63.b		; Arithmetic shift left $63.b [Reads: Direct Page] [Flags: ZCN]
	dec $0F.b,X		; Decrement memory $0F.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	.db $10, $9C		; Invalid branch target (bpl L06347C) ; Branch if plus to $10, $9C [Flow: branch]
	jsr $2C13.w		; Jump to subroutine at $2C13.w [Writes: Stack Pointer] [Flow: call]
	bit $029D.w		; Test bits $029D.w with accumulator [Reads: Accumulator] [Flags: VNZ]
	sbc $5C00FF.l,X		; Subtract with carry (long,X) $5C00FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	jsr $E276.w		; Jump to subroutine at $E276.w [Writes: Stack Pointer] [Flow: call]
	stz $9F81.w,X		; Store zero to $9F81.w,X [Reads: X Index]
	jsr L061DFF.w		; Jump to subroutine at L061DFF.w [Writes: Stack Pointer] [Flow: call]
	bit $9D2C.w		; Test bits $9D2C.w with accumulator [Reads: Accumulator] [Flags: VNZ]
	sbc $6A495E.l,X		; Subtract with carry (long,X) $6A495E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	jmp $EDA0.w		; Jump to $EDA0.w [Flow: jump]
	ora [$E5.b],Y		; OR accumulator with memory (long indexed) [$E5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $04.b,X		; Add $04.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora $FF.b		; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($1B.b,X)		; Load accumulator ($1B.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	bit $53A2.w		; Test bits $53A2.w with accumulator [Reads: Accumulator] [Flags: VNZ]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sbc $06.b,X		; Subtract $06.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	jmp.w [$2262]		; Jump long indirect [$2262] [Flow: jump]
	cpx #$0E30.w		; Compare #$0E30.w with X register [Reads: X Index] [Flags: ZCN]
	ora $A3.b,S		; OR accumulator with stack relative $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp ($A4.b),Y		; Compare accumulator ($A4.b),Y [Reads: Direct Page, Accumulator, Y Index] [Flags: ZCN]
	ora $FF.b		; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0C16.w		; Subtract $0C16.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	eor [$A5.b]		; Exclusive OR accumulator with memory (long) [$A5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp.w [$2495]		; Jump long indirect [$2495] [Flow: jump]
	sbc $18.b		; Subtract $18.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($F9.b,S),Y		; OR accumulator (stack relative indirect indexed) ($F9.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $0F.b,X		; Arithmetic shift left $0F.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ldx $BB.b		; Load $BB.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ora $17.b,S		; OR accumulator with stack relative $17.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $AEA7.w		; Test and set bits $AEA7.w [Reads: Accumulator] [Flags: Z]
	txs		; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sbc $B2.b		; Subtract $B2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	rol $FF18.w,X		; Rotate left $FF18.w,X [Reads: X Index] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsr $0724.w		; Jump to subroutine at $0724.w [Writes: Stack Pointer] [Flow: call]
	lda $2496.w,X		; Load $2496.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $4D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx #$E5A3.w		; Load #$E5A3.w into X register [Writes: X Index] [Flags: ZN]
	sbc $A9.b		; Subtract $A9.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	jsl $AA62C5.l		; Jump to subroutine long $AA62C5.l [Writes: Stack Pointer] [Flow: call]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $97969A.l,X		; Subtract with carry (long,X) $97969A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora $E524BA.l,X		; Logical OR long $E524BA.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $1962.w		; Rotate right $1962.w [Flags: ZCN]
	ora [$AD.b],Y		; OR accumulator with memory (long indexed) [$AD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $FE1E.w		; Load $FE1E.w into X register [Writes: X Index] [Flags: ZN]
	txs		; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $30A1.w		; Arithmetic shift left $30A1.w [Flags: ZCN]
	rol $24.b,X		; Rotate left $24.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp #$B0AF.w		; Compare #$B0AF.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	ora $F9EEFF.l,X		; Logical OR long $F9EEFF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc $1F15.w,X		; Increment memory $1F15.w,X [Reads: X Index] [Flags: ZN]
	lsr $5507.w,X		; Logical shift right $5507.w,X [Reads: X Index] [Flags: ZCN]
	jsl $AA62C5.l		; Jump to subroutine long $AA62C5.l [Writes: Stack Pointer] [Flow: call]
	adc $B1.b,S		; Add with carry (stack relative) $B1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	ora $2B.b		; Logical OR $2B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $F70009.l,X		; Subtract with carry (long,X) $F70009.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc ($22.b),Y		; Add with carry ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $1EB5.w		; Test and reset bits $1EB5.w [Reads: Accumulator] [Flags: Z]
	inc $0BB6.w,X		; Increment memory $0BB6.w,X [Reads: X Index] [Flags: ZN]
	lda [$24.b],Y		; Load accumulator (long indexed) [$24.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $000915.l,X		; Subtract with carry (long,X) $000915.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	clv		; Clear overflow ; Clear overflow flag [Flags: V]
	adc ($2C.b),Y		; Add with carry ($2C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	bit $C602.w		; Test bits $C602.w with accumulator [Reads: Accumulator] [Flags: VNZ]
	inc $09FF.w,X		; Increment memory $09FF.w,X [Reads: X Index] [Flags: ZN]
	lda $FFBA.w,Y		; Load $FFBA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc $040009.l,X		; Subtract with carry (long,X) $040009.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc ($43.b),Y		; Add with carry ($43.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	ldy $0BFF.w,X		; Load Y register $0BFF.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	inc $5750.w,X		; Increment memory $5750.w,X [Reads: X Index] [Flags: ZN]
	sbc $F7F7FF.l,X		; Subtract with carry (long,X) $F7F7FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	lsr $5449.w,X		; Logical shift right $5449.w,X [Reads: X Index] [Flags: ZCN]
	eor $A1.b,X		; Exclusive OR accumulator with memory $A1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $041C07.l		; Jump to subroutine long $041C07.l [Writes: Stack Pointer] [Flow: call]
	eor #$BD30.w		; Exclusive OR #$BD30.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$04.b]		; OR accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $54F114.l,X		; Exclusive OR accumulator with memory (long,X) $54F114.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $A1.b,X		; Exclusive OR accumulator with memory $A1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($81.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($81.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $D4.b,S		; Exclusive OR accumulator with stack relative $D4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($BE.b,X)		; Logical AND ($BE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda [$EA.b]		; Load accumulator (long) [$EA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $A7BEEB.l		; AND accumulator with memory (long) $A7BEEB.l [Writes: Accumulator] [Flags: ZN]
	.db $30, $55		; Invalid branch target (bmi L063619) ; Branch if minus to $30, $55 [Flow: branch]
	and ($53.b),Y		; AND accumulator with memory ($53.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($FF.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($FF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx $FF.b		; Compare $FF.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $D822FF.l,X		; Logical OR long $D822FF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($D9.b,X)		; Logical OR ($D9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	and $D8.b		; Logical AND $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($D9.b,X)		; Logical OR ($D9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	and $D8.b		; Logical AND $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $DB.b,S		; Add with carry (stack relative) $DB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	and $D8.b,S		; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	ora ($01.b,S),Y		; OR accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $22DA.w,Y		; Compare accumulator $22DA.w,Y [Reads: Y Index] [Flags: ZCN]
	cld		; Clear decimal ; Clear decimal flag [Flags: D]
	ora ($DB.b,X)		; Logical OR ($DB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jmp.w [$D862]		; Jump long indirect [$D862] [Flow: jump]
	jsl $DB04D8.l		; Jump to subroutine long $DB04D8.l [Writes: Stack Pointer] [Flow: call]
	jmp.w [$DBD8]		; Jump long indirect [$DBD8] [Flow: jump]
	jmp.w [$D823]		; Jump long indirect [$D823] [Flow: jump]
	ora $DD.b,S		; OR accumulator with stack relative $DD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec $DCDB.w,X		; Decrement memory $DCDB.w,X [Reads: X Index] [Flags: ZN]
	and $D8.b,S		; AND accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	ora $D822.w,X		; OR accumulator with memory $D822.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($DF.b,X)		; Logical OR ($DF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpx #$D862.w		; Compare #$D862.w with X register [Reads: X Index] [Flags: ZCN]
	jsl $DF04D8.l		; Jump to subroutine long $DF04D8.l [Writes: Stack Pointer] [Flow: call]
	cpx #$DBD8.w		; Compare #$DBD8.w with X register [Reads: X Index] [Flags: ZCN]
	jmp.w [$D822]		; Jump long indirect [$D822] [Flow: jump]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	and $D822.w		; Logical AND $D822.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($DB.b,X)		; Logical OR ($DB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jmp.w [$D823]		; Jump long indirect [$D823] [Flow: jump]
	ora ($D9.b,X)		; Logical OR ($D9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	and $D8.b		; Logical AND $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($D9.b,X)		; Logical OR ($D9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	and $D8.b		; Logical AND $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($DB.b,X)		; Logical OR ($DB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jmp.w [$D825]		; Jump long indirect [$D825] [Flow: jump]
	ora ($DB.b,X)		; Logical OR ($DB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jmp.w [$D824]		; Jump long indirect [$D824] [Flow: jump]
	ora ($D9.b,X)		; Logical OR ($D9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	and $D8.b		; Logical AND $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($D9.b,X)		; Logical OR ($D9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	and $D8.b		; Logical AND $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	ora ($23.b,S),Y		; OR accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cld		; Clear decimal ; Clear decimal flag [Flags: D]
	stx $00.b		; Store X register to $00.b [Reads: X Index]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $0084D8.l		; Jump to subroutine long $0084D8.l [Writes: Stack Pointer] [Flow: call]
	and $22.b		; Logical AND $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cld		; Clear decimal ; Clear decimal flag [Flags: D]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	and $D823.w		; Logical AND $D823.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	rol $23.b,X		; Rotate left $23.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	cld		; Clear decimal ; Clear decimal flag [Flags: D]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	ora $D822.w,X		; OR accumulator with memory $D822.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	lsr $22.b		; Logical shift right $22.b [Reads: Direct Page] [Flags: ZCN]
	cld		; Clear decimal ; Clear decimal flag [Flags: D]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	lsr $D822.w		; Logical shift right $D822.w [Flags: ZCN]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	and $D822.w		; Logical AND $D822.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($DB.b,X)		; Logical OR ($DB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jmp.w [$D823]		; Jump long indirect [$D823] [Flow: jump]
	ora ($D9.b,X)		; Logical OR ($D9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	and $D8.b		; Logical AND $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($D9.b,X)		; Logical OR ($D9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	and $D8.b		; Logical AND $D8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($DB.b,X)		; Logical OR ($DB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jmp.w [$D825]		; Jump long indirect [$D825] [Flow: jump]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	.db $30, $FF		; Invalid branch target (bmi L06367A) ; Branch if minus to $30, $FF [Flow: branch]
	cpx $FF.b		; Compare $FF.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $BF67FF.l,X		; Logical OR long $BF67FF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$00.b]		; Store accumulator (long) [$00.b] [Reads: Direct Page, Accumulator]
	brk $66.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$00.b]		; Compare accumulator (long) [$00.b] [Reads: Direct Page, Accumulator] [Flags: ZCN]
	cmp $0087.w		; Compare $0087.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	.db $10, $62		; Invalid branch target (bpl L0636EE) ; Branch if plus to $10, $62 [Flow: branch]
	dec $CD01.w		; Decrement $CD01.w [Flags: ZN]
	lda $87D162.l,X		; Load long $87D162.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $20.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$D4.b]		; OR accumulator with memory (long) [$D4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $C6.b,X		; Compare accumulator $C6.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	lda $D7D6C0.l,X		; Load long $D7D6C0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$0087.w		; Compare #$0087.w with Y register [Reads: Y Index] [Flags: ZCN]
	.db $30, $8B		; Invalid branch target (bmi L06362D) ; Branch if minus to $30, $8B [Flow: branch]
	brk $04.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	brk $8B.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	.db $10, $8B		; Invalid branch target (bpl L063639) ; Branch if plus to $10, $8B [Flow: branch]
	brk $24.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	jsr $008B.w		; Jump to subroutine at $008B.w [Writes: Stack Pointer] [Flow: call]
	bit $83.b,X		; Test bits $83.b,X [Reads: Direct Page, X Index] [Flags: VNZ] [Flow: branch]
	brk $30.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $7F		; Invalid branch target (beq L06373A) ; Branch if equal to $F0, $7F [Flow: branch]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $1F38E4.l,X		; Subtract with carry (long,X) $1F38E4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $20.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $20031F.l		; Jump to subroutine long $20031F.l [Writes: Stack Pointer] [Flow: call]
	jsr $1F1F.w		; Jump to subroutine at $1F1F.w [Writes: Stack Pointer] [Flow: call]
	and $20.b,S		; AND accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($1F.b,X)		; Logical OR ($1F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $2044.w		; Jump to subroutine at $2044.w [Writes: Stack Pointer] [Flow: call]
	ora $1F2043.l,X		; Logical OR long $1F2043.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($1F.b,X)		; Logical OR ($1F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $2045.w		; Jump to subroutine at $2045.w [Writes: Stack Pointer] [Flow: call]
	ora $201F01.l,X		; Logical OR long $201F01.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $20.b,S		; Exclusive OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $452022.l,X		; Logical OR long $452022.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1F2220.l,X		; Logical OR long $1F2220.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	eor $43.b,S		; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr $011F.w		; Jump to subroutine at $011F.w [Writes: Stack Pointer] [Flow: call]
	ora $1F2320.l,X		; Logical OR long $1F2320.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	rol $1F34.w,X		; Rotate left $1F34.w,X [Reads: X Index] [Flags: ZCN]
	brk $20.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $1F.b		; Test bits $1F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	brk $20.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $00841F.l		; Jump to subroutine long $00841F.l [Writes: Stack Pointer] [Flow: call]
	and $1F22.w,X		; AND accumulator with memory $1F22.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($20.b,X)		; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $1F24.w		; Jump to subroutine at $1F24.w [Writes: Stack Pointer] [Flow: call]
	jsl $008320.l		; Jump to subroutine long $008320.l [Writes: Stack Pointer] [Flow: call]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $1F.b		; Rotate left $1F.b [Reads: Direct Page] [Flags: ZCN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	and $2022.w,X		; AND accumulator with memory $2022.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($1F.b,X)		; Logical OR ($1F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $232023.l,X		; Logical OR long $232023.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $482000.l,X		; Logical OR long $482000.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr $221F.w		; Jump to subroutine at $221F.w [Writes: Stack Pointer] [Flow: call]
	ora $202001.l,X		; Logical OR long $202001.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $20021F.l		; Jump to subroutine long $20021F.l [Writes: Stack Pointer] [Flow: call]
	ora $1F2320.l,X		; Logical OR long $1F2320.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($20.b,X)		; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $832022.l,X		; Logical OR long $832022.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $3C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $008520.l		; Jump to subroutine long $008520.l [Writes: Stack Pointer] [Flow: call]
	ror $26.b,X		; Rotate right $26.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
L06373D:
	ora $232000.l,X		; Logical OR long $232000.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $E166FF.l,X		; Logical OR long $E166FF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $E4.b		; Arithmetic shift left $E4.b [Reads: Direct Page] [Flags: ZCN]
	inc $E8.b		; Increment $E8.b [Reads: Direct Page] [Flags: ZN]
	sbc #$E6E7.w		; Subtract #$E6E7.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	nop		; No operation
	eor $E5.b,S		; Exclusive OR accumulator with stack relative $E5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc [$00.b]		; Subtract with carry (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	cpx $64.b		; Compare $64.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $E6.b,X		; OR accumulator with memory $E6.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	beq L06373D.b		; Branch if equal to L06373D.b [Flow: branch]
	sbc ($E7.b),Y		; Subtract with carry ($E7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($E5.b)		; Subtract with carry (indirect) ($E5.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($E2.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($E2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc $E3.b,S		; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	pea $E7F5.w		; Push absolute address $E7F5.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	cpx $E4.b		; Compare $E4.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc #$F6EE.w		; Subtract #$F6EE.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	sbc [$E1.b],Y		; Subtract with carry (long indexed) [$E1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $F8.b		; Add $F8.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	tsb $FEED.w		; Test and set bits $FEED.w [Reads: Accumulator] [Flags: Z]
	sbc $00F0EA.l,X		; Subtract with carry (long,X) $00F0EA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($E6.b),Y		; Subtract with carry ($E6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	inc $01.b		; Increment $01.b [Reads: Direct Page] [Flags: ZN]
	cop $E4.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $63.b		; Compare $63.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $18.b,S		; OR accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx $07.b		; Compare $07.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
L063780:
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc [$09.b]		; Subtract with carry (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	inc $0A.b,X		; Increment memory $0A.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsb $FAE7.w		; Test and set bits $FAE7.w [Reads: Accumulator] [Flags: Z]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0EE8.w		; Logical OR $0EE8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc ($0F.b)		; Subtract with carry (indirect) ($0F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	inc $F9.b		; Increment $F9.b [Reads: Direct Page] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	bpl L063780.b		; Branch if plus to L063780.b [Flow: branch]
	ora ($EE.b),Y		; OR accumulator with memory ($EE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $62, $12, $E0		; Invalid branch target (per L0617AC) ; Push effective relative address $62, $12, $E0 [Writes: Stack Pointer]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $00.b		; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ora $EB.b,X		; OR accumulator with memory $EB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	asl $E4.b,X		; Arithmetic shift left $E4.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	sbc [$E6.b]		; Subtract with carry (long) [$E6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $FF1817.l,X		; Subtract with carry (long,X) $FF1817.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc [$E7.b]		; Subtract with carry (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ora $E1E7.w,Y		; OR accumulator with memory $E1E7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $E7.b		; Increment $E7.b [Reads: Direct Page] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sbc [$EB.b]		; Subtract with carry (long) [$EB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc [$E7.b]		; Subtract with carry (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	.db $F0, $E7		; Invalid branch target (beq L0637A1) ; Branch if equal to $F0, $E7 [Flow: branch]
	sbc [$FF.b]		; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	inc $E7.b		; Increment $E7.b [Reads: Direct Page] [Flags: ZN]
.ACCU 8
	sep #$EE
	inc $E5.b		; Increment $E5.b [Reads: Direct Page] [Flags: ZN]
	sbc [$E4.b]		; Subtract with carry (long) [$E4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	nop		; No operation
	sbc $E7E5E8.l,X		; Subtract with carry (long,X) $E7E5E8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($FF.b)		; Subtract with carry (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	inc $F0.b		; Increment $F0.b [Reads: Direct Page] [Flags: ZN]
	sbc $1CE6E4.l,X		; Subtract with carry (long,X) $1CE6E4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	inc $FFE6.w		; Increment $FFE6.w [Flags: ZN]
	trb $F81D.w		; Test and reset bits $F81D.w [Reads: Accumulator] [Flags: Z]
	sbc $E6FF0B.l,X		; Subtract with carry (long,X) $E6FF0B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $1E.b		; Subtract $1E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	trb $F2.b		; Test and reset bits $F2.b [Reads: Accumulator] [Flags: Z]
	sbc $E4E7.w		; Subtract $E4E7.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	nop		; No operation
	.db $62, $1F, $E0		; Invalid branch target (per L061806) ; Push effective relative address $62, $1F, $E0 [Writes: Stack Pointer]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cpx $F2.b		; Compare $F2.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	jsl $F8E523.l		; Jump to subroutine long $F8E523.l [Writes: Stack Pointer] [Flow: call]
	sbc $E6E6E7.l,X		; Subtract with carry (long,X) $E6E6E7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
.ACCU 8
	sep #$24
	and $E8.b		; Logical AND $E8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc ($0A.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($0A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	rol $0B.b		; Rotate left $0B.b [Reads: Direct Page] [Flags: ZCN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc [$27.b]		; Subtract with carry (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	asl $2603.w,X		; Arithmetic shift left $2603.w,X [Reads: X Index] [Flags: ZCN]
	sbc #$F0.b		; Subtract #$F0.b from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	sbc [$EA.b]		; Subtract with carry (long) [$EA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	jsr $29E4.w		; Jump to subroutine at $29E4.w [Writes: Stack Pointer] [Flow: call]
	sbc ($2A.b)		; Subtract with carry (indirect) ($2A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bit $E6F1.w		; Test bits $E6F1.w with accumulator [Reads: Accumulator] [Flags: VNZ]
	sbc $1E.b		; Subtract $1E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	trb $E7F5.w		; Test and reset bits $E7F5.w [Reads: Accumulator] [Flags: Z]
	sbc ($0A.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($0A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc $2D.b		; Subtract $2D.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc $F8.b		; Subtract $F8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc $E72E.w,Y		; Subtract with carry $E72E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	and $E4301D.l		; AND accumulator with memory (long) $E4301D.l [Writes: Accumulator] [Flags: ZN]
	and ($0B.b),Y		; AND accumulator with memory ($0B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	xce		; Exchange carry bit to set emulation or native mode ; Exchange carry and emulation bits [Flags: C]
	asl $3332.w,X		; Arithmetic shift left $3332.w,X [Reads: X Index] [Flags: ZCN]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	nop		; No operation
	jsr $E7FF.w		; Jump to subroutine at $E7FF.w [Writes: Stack Pointer] [Flow: call]
	bit $E7.b,X		; Test bits $E7.b,X [Reads: Direct Page, X Index] [Flags: VNZ] [Flow: branch]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	jsl $F806E7.l		; Jump to subroutine long $F806E7.l [Writes: Stack Pointer] [Flow: call]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	and $E5.b,X		; Logical AND $E5.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc ($E7.b,X)		; Subtract with carry ($E7.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $072027.l,X		; Subtract with carry (long,X) $072027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
L06383F:
	ora ($20.b,X)		; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $0101.w		; Jump to subroutine at $0101.w [Writes: Stack Pointer] [Flow: call]
	jsr $0120.w		; Jump to subroutine at $0120.w [Writes: Stack Pointer] [Flow: call]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	jsr $0000.w		; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	bit $20.b		; Test bits $20.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	cop $00.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2300.w		; Jump to subroutine at $2300.w [Writes: Stack Pointer] [Flow: call]
	jsr $0506.w		; Jump to subroutine at $0506.w [Writes: Stack Pointer] [Flow: call]
	tsb $00.b		; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	jsr $0204.w		; Jump to subroutine at $0204.w [Writes: Stack Pointer] [Flow: call]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	jsr $0905.w		; Jump to subroutine at $0905.w [Writes: Stack Pointer] [Flow: call]
	tsb $1111.w		; Test and set bits $1111.w [Reads: Accumulator] [Flags: Z]
	ora $202905.l		; OR accumulator with memory (long) $202905.l [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0A.b		; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora $202907.l		; OR accumulator with memory (long) $202907.l [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $08.b		; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $29.b		; Logical OR $29.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $0705.w		; Jump to subroutine at $0705.w [Writes: Stack Pointer] [Flow: call]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $231F.w		; Jump to subroutine at $231F.w [Writes: Stack Pointer] [Flow: call]
	jsr $0022.w		; Jump to subroutine at $0022.w [Writes: Stack Pointer] [Flow: call]
	bit $0220.w		; Test bits $0220.w with accumulator [Reads: Accumulator] [Flags: VNZ]
	tsb $00.b		; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ora $2B.b,S		; OR accumulator with stack relative $2B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr $0603.w		; Jump to subroutine at $0603.w [Writes: Stack Pointer] [Flow: call]
	jsr $0000.w		; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	jsr $0E02.w		; Jump to subroutine at $0E02.w [Writes: Stack Pointer] [Flow: call]
	jsr $2C06.w		; Jump to subroutine at $2C06.w [Writes: Stack Pointer] [Flow: call]
	jsr $0003.w		; Jump to subroutine at $0003.w [Writes: Stack Pointer] [Flow: call]
	cop $1A.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $1B01.w		; Jump to subroutine at $1B01.w [Writes: Stack Pointer] [Flow: call]
	brk $2C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0E02.w		; Jump to subroutine at $0E02.w [Writes: Stack Pointer] [Flow: call]
	ora ($03.b)		; OR accumulator with memory (indirect) ($03.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx $29.b		; Compare $29.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	jsr $01FF.w		; Jump to subroutine at $01FF.w [Writes: Stack Pointer] [Flow: call]
	rol $37.b,X		; Rotate left $37.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	jsl $390C38.l		; Jump to subroutine long $390C38.l [Writes: Stack Pointer] [Flow: call]
	rol $36.b,X		; Rotate left $36.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $3A.b,X		; OR accumulator with memory $3A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $E5.b		; Subtract $E5.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	bit $153D.w,X		; Test bits $153D.w,X [Reads: X Index] [Flags: VNZ] [Flow: branch]
	and [$3E.b],Y		; AND accumulator with memory (long indexed) [$3E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $40023F.l		; Jump to subroutine long $40023F.l [Writes: Stack Pointer] [Flow: call]
	and $6336.w,Y		; AND accumulator with memory $6336.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($00.b,X)		; Exclusive OR accumulator with memory ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $4564.w,X		; OR accumulator with memory $4564.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $4AAA.w		; Logical OR $4AAA.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $404B.w,X		; OR accumulator with memory $404B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $5E4C.w,Y		; AND accumulator with memory $5E4C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora $814D.w,X		; OR accumulator with memory $814D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $656B.w,Y		; Add $656B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	lsr $4B08.w		; Logical shift right $4B08.w [Flags: ZCN]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	mvn $37,$FF		; Move block negative $37,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $03.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $9D.b		; Rotate right $9D.b [Reads: Direct Page] [Flags: ZCN]
	adc #$55.b		; Add #$55.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	ora [$E5.b]		; OR accumulator with memory (long) [$E5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $710100.l		; Load long $710100.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $5F.b,S		; AND accumulator with stack relative $5F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr $6067.w		; Logical shift right $6067.w [Flags: ZCN]
	ora [$E5.b]		; OR accumulator with memory (long) [$E5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $DF.b		; Subtract $DF.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	rol $43.b		; Rotate left $43.b [Reads: Direct Page] [Flags: ZCN]
	sbc $5F.b		; Subtract $5F.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	lsr $67.b,X		; Logical shift right $67.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ora $8A.b		; Logical OR $8A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $E1.b		; Test and set bits $E1.b [Reads: Accumulator] [Flags: Z]
.ACCU 8
.INDEX 8
	sep #$70
	sta [$63.b],Y		; Store accumulator (long indexed) [$63.b],Y [Reads: Direct Page, Accumulator, Y Index]
	adc ($22.b),Y		; Add with carry ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	ora $7568.w,X		; OR accumulator with memory $7568.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $77.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $7E, $06		; Invalid branch target (per L063F8E) ; Push effective relative address $62, $7E, $06 [Writes: Stack Pointer]
	bmi L06392F.b		; Branch if minus to L06392F.b [Flow: branch]
	cmp $5D5C.w,Y		; Compare accumulator $5D5C.w,Y [Reads: Y Index] [Flags: ZCN]
	sta ($82.b,X)		; Store accumulator ($82.b,X) [Reads: Direct Page, Accumulator, X Index]
	and $83.b,S		; AND accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sty $81.b		; Store Y register to $81.b [Reads: Y Index]
	sta $86.b		; Store accumulator to $86.b [Reads: Accumulator]
	sta $1D1D87.l		; Store accumulator (long) $1D1D87.l [Reads: Accumulator]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit #$81.b		; Test bits #$81.b with accumulator [Reads: Accumulator] [Flags: Z]
	sta ($24.b,X)		; Store accumulator ($24.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta $0B.b,S		; Store accumulator (stack relative) $0B.b,S [Reads: Accumulator, Stack Pointer]
	sta ($8A.b,X)		; Store accumulator ($8A.b,X) [Reads: Direct Page, Accumulator, X Index]
	phb		; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	bit $938C.w,X		; Test bits $938C.w,X [Reads: X Index] [Flags: VNZ] [Flow: branch]
L06392F:
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sta $816E.w		; Store accumulator to $816E.w [Reads: Accumulator]
	sta ($8E.b,X)		; Store accumulator ($8E.b,X) [Reads: Direct Page, Accumulator, X Index]
	and $83.b,S		; AND accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	per L0642C9.w		; Push effective relative address L0642C9.w [Writes: Stack Pointer]
	ora $AE27.w,X		; OR accumulator with memory $AE27.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $7675.w,X		; OR accumulator with memory $7675.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($81.b,X)		; Store accumulator ($81.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($93.b)		; Store accumulator (indirect) ($93.b) [Reads: Direct Page, Accumulator]
	jsl $946483.l		; Jump to subroutine long $946483.l [Writes: Stack Pointer] [Flow: call]
	ora $4B.b,S		; OR accumulator with stack relative $4B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $5D5C.w,X		; OR accumulator with memory $5D5C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $990081.l		; Jump to subroutine long $990081.l [Writes: Stack Pointer] [Flow: call]
	jsl $940083.l		; Jump to subroutine long $940083.l [Writes: Stack Pointer] [Flow: call]
	.db $62, $9A, $04		; Invalid branch target (per L063DF2) ; Push effective relative address $62, $9A, $04 [Writes: Stack Pointer]
	bit $D9F6.w,X		; Test bits $D9F6.w,X [Reads: X Index] [Flags: VNZ] [Flow: branch]
	sta $2289.w,X		; Store accumulator to $2289.w,X [Reads: Accumulator, X Index]
	sta ($00.b,X)		; Store accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index]
	stz $8322.w,X		; Store zero to $8322.w,X [Reads: X Index]
	brk $94.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $9F.b,S		; Add with carry (stack relative) $9F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	adc $A2.b,S		; Add with carry (stack relative) $A2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	ora $81.b,S		; OR accumulator with stack relative $81.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta ($A6.b,X)		; Store accumulator ($A6.b,X) [Reads: Direct Page, Accumulator, X Index]
	lda [$22.b]		; Load accumulator (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $68.b,S		; Store accumulator (stack relative) $68.b,S [Reads: Accumulator, Stack Pointer]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cop $81.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($B1.b,X)		; Store accumulator ($B1.b,X) [Reads: Direct Page, Accumulator, X Index]
	jsl $B20183.l		; Jump to subroutine long $B20183.l [Writes: Stack Pointer] [Flow: call]
	lda ($FF.b,S),Y		; Load accumulator (stack relative indirect indexed) ($FF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx $2B.b		; Compare $2B.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	jsr $0600.w		; Jump to subroutine at $0600.w [Writes: Stack Pointer] [Flow: call]
	bit $0020.w		; Test bits $0020.w with accumulator [Reads: Accumulator] [Flags: VNZ]
	trb $202A.w		; Test and reset bits $202A.w [Reads: Accumulator] [Flags: Z]
	cop $06.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $07.b		; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZCN]
	jsl $1C0220.l		; Jump to subroutine long $1C0220.l [Writes: Stack Pointer] [Flow: call]
	jsr $2505.w		; Jump to subroutine at $2505.w [Writes: Stack Pointer] [Flow: call]
	jsr $0704.w		; Jump to subroutine at $0704.w [Writes: Stack Pointer] [Flow: call]
	jsr $0520.w		; Jump to subroutine at $0520.w [Writes: Stack Pointer] [Flow: call]
	ora $83.b		; Logical OR $83.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $4B.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $20.b		; Rotate left $20.b [Reads: Direct Page] [Flags: ZCN]
	ora #$07.b		; Logical OR #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $09.b,S		; OR accumulator with stack relative $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $2020.w		; Arithmetic shift left $2020.w [Flags: ZCN]
	ora $250520.l		; OR accumulator with memory (long) $250520.l [Writes: Accumulator] [Flags: ZN]
	jsr $0604.w		; Jump to subroutine at $0604.w [Writes: Stack Pointer] [Flow: call]
	tsb $20.b		; Test and set bits $20.b [Reads: Accumulator] [Flags: Z]
	ora $10.b		; Logical OR $10.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $20.b,S		; AND accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $05.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $20.b,S		; AND accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1C.b		; Logical OR $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $0707.w		; Jump to subroutine at $0707.w [Writes: Stack Pointer] [Flow: call]
	jsr $2207.w		; Jump to subroutine at $2207.w [Writes: Stack Pointer] [Flow: call]
	jsr $0500.w		; Jump to subroutine at $0500.w [Writes: Stack Pointer] [Flow: call]
	and [$20.b]		; AND accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	sta $05.b		; Store accumulator to $05.b [Reads: Accumulator]
	ora $20.b		; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $051C.w		; Jump to subroutine at $051C.w [Writes: Stack Pointer] [Flow: call]
	ora $25.b		; Logical OR $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $0701.w		; Jump to subroutine at $0701.w [Writes: Stack Pointer] [Flow: call]
	ora [$83.b]		; OR accumulator with memory (long) [$83.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $93.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $050020.l		; Jump to subroutine long $050020.l [Writes: Stack Pointer] [Flow: call]
	and $20.b		; Logical AND $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $07.b		; Test and set bits $07.b [Reads: Accumulator] [Flags: Z]
	ora [$20.b]		; OR accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $2220.w		; Test and set bits $2220.w [Reads: Accumulator] [Flags: Z]
	ora [$02.b]		; OR accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$21.b		; Logical OR #$21.b with accumulator [Writes: Accumulator] [Flags: ZN]
	trb CGDATA.w		; CGRAM Data Write ; Test and reset bits CGDATA.w [Reads: Accumulator] [Flags: Z]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	sta $28.b,S		; Store accumulator (stack relative) $28.b,S [Reads: Accumulator, Stack Pointer]
	and ($05.b,X)		; Logical AND ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $2005.w		; Jump to subroutine at $2005.w [Writes: Stack Pointer] [Flow: call]
	ora [$21.b]		; OR accumulator with memory (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $27.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($0A.b,X)		; Logical AND ($0A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$21.b]		; OR accumulator with memory (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($05.b,X)		; Logical AND ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $21.b		; Logical OR $21.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $02.b		; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: ZCN]
	ora ($21.b,X)		; Logical OR ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $2125.w		; Jump to subroutine at $2125.w [Writes: Stack Pointer] [Flow: call]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $1C		; Invalid branch target (bpl L063A26) ; Branch if plus to $10, $1C [Flow: branch]
	ora $20.b		; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($07.b,X)		; Logical AND ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	and ($20.b,X)		; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $2122.w		; Jump to subroutine at $2122.w [Writes: Stack Pointer] [Flow: call]
	sbc $623662.l,X		; Subtract with carry (long,X) $623662.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ldy $62.b,X		; Load Y register $62.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: ZN]
	ldy $85.b,X		; Load Y register $85.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: ZN]
	brk $03.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $38.b,S		; OR accumulator with stack relative $38.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and [$3E.b],Y		; AND accumulator with memory (long indexed) [$3E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $62B762.l,X		; AND accumulator with memory (long,X) $62B762.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda [$85.b],Y		; Load accumulator (long indexed) [$85.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $13.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($3F.b,X)		; Logical OR ($3F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $BA64.w,X		; Rotate left $BA64.w,X [Reads: X Index] [Flags: ZCN]
	jsl $BF62BC.l		; Jump to subroutine long $BF62BC.l [Writes: Stack Pointer] [Flow: call]
	ora $3D.b,S		; OR accumulator with stack relative $3D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$BE
	ldy $C369.w,X		; Load Y register $C369.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	brk $51.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $CD, $00		; Invalid branch target (per L063B0D) ; Push effective relative address $62, $CD, $00 [Writes: Stack Pointer]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ror $D0.b		; Rotate right $D0.b [Reads: Direct Page] [Flags: ZCN]
	cop $21.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $D76249.l		; Jump to subroutine long $D76249.l [Writes: Stack Pointer] [Flow: call]
	cop $51.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $63.b		; Subtract $63.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	cmp $C8.b		; Compare $C8.b with accumulator [Reads: Direct Page, Accumulator] [Flags: ZCN]
	adc $DE.b,S		; Add with carry (stack relative) $DE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	cmp $E0E59A.l,X		; Compare accumulator (long,X) $E0E59A.l,X [Reads: Accumulator, X Index] [Flags: ZCN]
	eor ($E1.b),Y		; Exclusive OR accumulator with memory ($E1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $66.b		; Subtract $66.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
.ACCU 8
	sep #$E0
	rol $A075.w		; Rotate left $A075.w [Flags: ZCN]
	sta ($97.b,S),Y		; Store accumulator (stack relative indirect indexed) ($97.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	sbc #$E3.b		; Subtract #$E3.b from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	lda [$EA.b]		; Load accumulator (long) [$EA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp ($D2.b),Y		; Compare accumulator ($D2.b),Y [Reads: Direct Page, Accumulator, Y Index] [Flags: ZCN]
	cpx $E8D9.w		; Compare $E8D9.w with X register [Reads: X Index] [Flags: ZCN]
	asl $ED84.w		; Arithmetic shift left $ED84.w [Flags: ZCN]
	sbc $E3.b,S		; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	dec $C7.b		; Decrement $C7.b [Reads: Direct Page] [Flags: ZN]
	inc $A8EF.w		; Increment $A8EF.w [Flags: ZN]
	.db $F0, $DB		; Invalid branch target (beq L063A56) ; Branch if equal to $F0, $DB [Flow: branch]
	jmp.w [$51D3]		; Jump long indirect [$51D3] [Flow: jump]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	eor ($53.b)		; Exclusive OR accumulator with memory (indirect) ($53.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc ($95.b),Y		; Subtract with carry ($95.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($D4.b)		; Subtract with carry (indirect) ($D4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	cmp $AE.b,X		; Compare accumulator $AE.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	sbc ($F4.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($F4.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	cpy $E5E4.w		; Compare $E5E4.w with Y register [Reads: Y Index] [Flags: ZCN]
	cmp $84C5.w,X		; Compare accumulator $84C5.w,X [Reads: X Index] [Flags: ZCN]
	brk $84.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($E5.b),Y		; OR accumulator with memory ($E5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E3.b,X		; Subtract $E3.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	eor ($A8.b),Y		; Exclusive OR accumulator with memory ($A8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $D1F6.w		; Load $D1F6.w into X register [Writes: X Index] [Flags: ZN]
	cmp ($4A.b)		; Compare accumulator (indirect) ($4A.b) [Reads: Direct Page, Accumulator] [Flags: ZCN]
	cpx $52E8.w		; Compare $52E8.w with X register [Reads: X Index] [Flags: ZCN]
	eor ($F7.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($F7.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	.db $42, $26		; opcode wdm $26 ; Reserved instruction
	.db $62, $F9, $0B		; Invalid branch target (per L0646A0) ; Push effective relative address $62, $F9, $0B [Writes: Stack Pointer]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsr ($DCDB.w,X)		; Jump to subroutine indirect indexed ($DCDB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $E8FE.w,X		; Subtract with carry $E8FE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	eor ($53.b)		; Exclusive OR accumulator with memory (indirect) ($53.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	inc $22FF.w		; Increment $22FF.w [Flags: ZN]
	bit $5902.w		; Test bits $5902.w with accumulator [Reads: Accumulator] [Flags: VNZ]
	brk $51.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $01, $83		; Bank wrapping branch target ; Push effective relative address $62, $01, $83 [Writes: Stack Pointer]
	brk $83.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $4A.b,S		; OR accumulator with stack relative $4A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $04.b		; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $66.b		; Logical OR $66.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $A8.b,S		; Subtract stack-relative $A8.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	eor ($0C.b)		; Exclusive OR accumulator with memory (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $0D.b		; Add $0D.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	tsb $1307.w		; Test and set bits $1307.w [Reads: Accumulator] [Flags: Z]
	adc ($14.b,X)		; Add with carry ($14.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora $A8.b,X		; OR accumulator with memory $A8.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ldx $1A16.w		; Load $1A16.w into X register [Writes: X Index] [Flags: ZN]
	xce		; Exchange carry bit to set emulation or native mode ; Exchange carry and emulation bits [Flags: C]
	inc $17.b		; Increment $17.b [Reads: Direct Page] [Flags: ZN]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	per L064BF7.w		; Push effective relative address L064BF7.w [Writes: Stack Pointer]
	ora ($1B.b)		; OR accumulator with memory (indirect) ($1B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $E372.w		; Test and reset bits $E372.w [Reads: Accumulator] [Flags: Z]
	eor ($A8.b),Y		; Exclusive OR accumulator with memory ($A8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $1D.b,S		; Subtract stack-relative $1D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	bra L063B04.b		; Branch always to L063B04.b [Flow: branch]
	inc $17.b		; Increment $17.b [Reads: Direct Page] [Flags: ZN]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	and $1A19.w,Y		; AND accumulator with memory $1A19.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $25FF.w,X		; Arithmetic shift left $25FF.w,X [Reads: X Index] [Flags: ZCN]
	jsr $2105.w		; Jump to subroutine at $2105.w [Writes: Stack Pointer] [Flow: call]
	and ($20.b,X)		; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($03.b,X)		; Logical AND ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($22.b,X)		; Logical AND ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$00.b]		; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $852025.l,X		; Logical OR long $852025.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L063B04:
	brk $21.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	ora $0100.w		; Logical OR $0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $210020.l		; Jump to subroutine long $210020.l [Writes: Stack Pointer] [Flow: call]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	tsb $01.b		; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	ora $07.b,S		; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $070005.l		; Jump to subroutine long $070005.l [Writes: Stack Pointer] [Flow: call]
	jsl $202521.l		; Jump to subroutine long $202521.l [Writes: Stack Pointer] [Flow: call]
	cop $21.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $09.b		; Logical OR $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $070421.l		; Jump to subroutine long $070421.l [Writes: Stack Pointer] [Flow: call]
	and ($0F.b,X)		; Logical AND ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0E.b		; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	and ($07.b),Y		; AND accumulator with memory ($07.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $07.b		; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$05.b		; Logical OR #$05.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $21.b,X		; OR accumulator with memory $21.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and ($07.b,X)		; Logical AND ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	mvp $0F,$21		; Move block positive $0F,$21 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $20.b		; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $2005.w		; Jump to subroutine at $2005.w [Writes: Stack Pointer] [Flow: call]
	and ($05.b,X)		; Logical AND ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $20.b,X		; OR accumulator with memory $20.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and ($07.b,X)		; Logical AND ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $2123.w		; Jump to subroutine at $2123.w [Writes: Stack Pointer] [Flow: call]
	eor $20.b,S		; Exclusive OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($03.b,X)		; Logical AND ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($0F.b,X)		; Logical AND ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $008305.l		; OR accumulator with memory (long) $008305.l [Writes: Accumulator] [Flags: ZN]
	and $2001.w,X		; AND accumulator with memory $2001.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr $0522.w		; Jump to subroutine at $0522.w [Writes: Stack Pointer] [Flow: call]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	ora $01.b		; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $8321.w		; Jump to subroutine at $8321.w [Writes: Stack Pointer] [Flow: call]
	brk $6C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($20.b,X)		; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $212A.w		; Jump to subroutine at $212A.w [Writes: Stack Pointer] [Flow: call]
	brk $0F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	ror OBJSEL.w		; Object Size and Chr Address ; Rotate right OBJSEL.w [Flags: ZCN]
	trb $0083.w		; Test and reset bits $0083.w [Reads: Accumulator] [Flags: Z]
	ror $23.b		; Rotate right $23.b [Reads: Direct Page] [Flags: ZCN]
	jsr $2101.w		; Jump to subroutine at $2101.w [Writes: Stack Pointer] [Flow: call]
	jsr $0083.w		; Jump to subroutine at $0083.w [Writes: Stack Pointer] [Flow: call]
	ror $1C05.w		; Rotate right $1C05.w [Flags: ZCN]
	and ($20.b,X)		; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $0E07.w,X		; Arithmetic shift left $0E07.w,X [Reads: X Index] [Flags: ZCN]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	adc $0083.w		; Add $0083.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	adc $2122.w,X		; Add $2122.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $07.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $21.b,S		; AND accumulator with stack relative $21.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $07.b		; Test and set bits $07.b [Reads: Accumulator] [Flags: Z]
	ora $07.b,S		; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($15.b,X)		; Logical AND ($15.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $21.b		; Test bits $21.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	brk $07.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $21.b		; Test bits $21.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	cop $07.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($0C.b,X)		; Logical AND ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
L063B9E:
	ora ($07.b,X)		; Logical OR ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	and $21.b,S		; AND accumulator with stack relative $21.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $20.b,S		; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($05.b,X)		; Logical AND ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $43.b,S		; OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($07.b,X)		; Logical AND ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	and ($83.b,X)		; Logical AND ($83.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $DA.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($21.b,X)		; Logical OR ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$2B.b]		; OR accumulator with memory (long) [$2B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($83.b,X)		; Logical AND ($83.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $EC.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $62B462.l,X		; Subtract with carry (long,X) $62B462.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ldy $05.b,X		; Load Y register $05.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: ZN]
	ora $20B41F.l,X		; Logical OR long $20B41F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$2221.w		; Load #$2221.w into Y register [Writes: Y Index] [Flags: ZN]
	bpl L063BC7.b		; Branch if plus to L063BC7.b [Flow: branch]
L063BC7:
	stz $B762.w		; Store zero to $B762.w
	per L065584.w		; Push effective relative address L065584.w [Writes: Stack Pointer]
	jsl $23B722.l		; Jump to subroutine long $23B722.l [Writes: Stack Pointer] [Flow: call]
	ldy #$2524.w		; Load #$2524.w into Y register [Writes: Y Index] [Flags: ZN]
	sta ($81.b,X)		; Store accumulator ($81.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta $FD4BC1.l,X		; Store accumulator (long,X) $FD4BC1.l,X [Reads: Accumulator, X Index]
	ldy $26BF.w,X		; Load Y register $26BF.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$27BF.w		; Compare #$27BF.w with Y register [Reads: Y Index] [Flags: ZCN]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	ldy #$C961.w		; Load #$C961.w into Y register [Writes: Y Index] [Flags: ZN]
	sbc $E5.b		; Subtract $E5.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	adc $62.b,X		; Add $62.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	and #$25.b		; Logical AND #$25.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $02		; Invalid branch target (bne L063BEE) ; Branch if not equal to $D0, $02 [Flow: branch]
	bit $8A5E.w		; Test bits $8A5E.w with accumulator [Reads: Accumulator] [Flags: VNZ]
	.db $62, $2D, $E0		; Invalid branch target (per L061C1F) ; Push effective relative address $62, $2D, $E0 [Writes: Stack Pointer]
	and ($75.b,X)		; Logical AND ($75.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bmi L063B9E.b		; Branch if minus to L063B9E.b [Flow: branch]
	cmp $302B.w,Y		; Compare accumulator $302B.w,Y [Reads: Y Index] [Flags: ZCN]
	and ($F3.b),Y		; AND accumulator with memory ($F3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($E5.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($E5.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sbc $32A2A3.l,X		; Subtract with carry (long,X) $32A2A3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	and ($75.b,S),Y		; AND accumulator (stack relative indirect indexed) ($75.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $A7.b,X		; Test bits $A7.b,X [Reads: Direct Page, X Index] [Flags: VNZ] [Flow: branch]
	and $80.b,X		; Logical AND $80.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	rol $A8.b,X		; Rotate left $A8.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	dec $C7.b		; Decrement $C7.b [Reads: Direct Page] [Flags: ZN]
	ldx $37F3.w		; Load $37F3.w into X register [Writes: X Index] [Flags: ZN]
	sbc $A2.b		; Subtract $A2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc $38.b,S		; Subtract stack-relative $38.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	adc $CB.b,X		; Add $CB.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $39.b,S		; Add with carry (stack relative) $39.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	ora $3DCB.w		; Logical OR $3DCB.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $3E.b,X		; Compare accumulator $3E.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	and $E5A8A7.l,X		; AND accumulator with memory (long,X) $E5A8A7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	eor ($75.b,X)		; Exclusive OR accumulator with memory ($75.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $F3		; opcode wdm $F3 ; Reserved instruction
	sbc ($22.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($22.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc $E0.b		; Subtract $E0.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	rol $43F6.w,X		; Rotate left $43F6.w,X [Reads: X Index] [Flags: ZCN]
	bit $F5D0.w,X		; Test bits $F5D0.w,X [Reads: X Index] [Flags: VNZ] [Flow: branch]
	mvp $45,$E5		; Move block positive $45,$E5 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($75.b,X)		; Exclusive OR accumulator with memory ($75.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	dec $C7.b		; Decrement $C7.b [Reads: Direct Page] [Flags: ZN]
	lsr $47.b		; Logical shift right $47.b [Reads: Direct Page] [Flags: ZCN]
	.db $30, $30		; Invalid branch target (bmi L063C6A) ; Branch if minus to $30, $30 [Flow: branch]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	bmi L063C6E.b		; Branch if minus to L063C6E.b [Flow: branch]
	and ($49.b),Y		; AND accumulator with memory ($49.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	.db $80, $4B		; Invalid branch target (bra L063C8E) ; Branch always to $80, $4B [Flow: branch]
	adc $3D.b,X		; Add $3D.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	cmp $4C.b,X		; Compare accumulator $4C.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ldy $32.b		; Load $32.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	inc $3B4D.w		; Increment $3B4D.w [Flags: ZN]
	cpy $EEE3.w		; Compare $EEE3.w with Y register [Reads: Y Index] [Flags: ZCN]
	cpy $E332.w		; Compare $E332.w with Y register [Reads: Y Index] [Flags: ZCN]
	eor ($75.b,X)		; Exclusive OR accumulator with memory ($75.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $A4D0.w		; Logical shift right $A4D0.w [Flags: ZCN]
	eor $8B04C8.l		; Exclusive OR accumulator with memory (long) $8B04C8.l [Writes: Accumulator] [Flags: ZN]
	and $8A5150.l		; AND accumulator with memory (long) $8A5150.l [Writes: Accumulator] [Flags: ZN]
	eor ($D0.b)		; Exclusive OR accumulator with memory (indirect) ($D0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($54.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $E3.b,X		; Add $E3.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	eor $32.b,X		; Exclusive OR accumulator with memory $32.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $6E.b,X		; Logical shift right $6E.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	per L0648C3.w		; Push effective relative address L0648C3.w [Writes: Stack Pointer]
	ora ($9D.b,S),Y		; OR accumulator (stack relative indirect indexed) ($9D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
L063C6E:
	sta $7E5A59.l		; Store accumulator (long) $7E5A59.l [Reads: Accumulator]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	jmp $5D3B3B.l		; Jump long to $5D3B3B.l [Flow: jump]
	ror $6357.w		; Rotate right $6357.w [Flags: ZCN]
	lsr $A416.w,X		; Logical shift right $A416.w,X [Reads: X Index] [Flags: ZCN]
	.db $62, $E5, $93		; Bank wrapping branch target ; Push effective relative address $62, $E5, $93 [Writes: Stack Pointer]
	bra L063CE5.b		; Branch always to L063CE5.b [Flow: branch]
	stz $8B.b		; Store zero to $8B.b
	phb		; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	tsb $57.b		; Test and set bits $57.b [Reads: Accumulator] [Flags: Z]
	lsr $6665.w,X		; Logical shift right $6665.w,X [Reads: X Index] [Flags: ZCN]
	cmp $60.b,S		; Compare accumulator (stack relative) $60.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZCN]
	eor $67B3.w,Y		; Exclusive OR accumulator with memory $67B3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $68.b,X		; Store accumulator to $68.b,X [Reads: Accumulator, X Index]
	eor ($69.b)		; Exclusive OR accumulator with memory (indirect) ($69.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $6B016A.l		; Jump to subroutine long $6B016A.l [Writes: Stack Pointer] [Flow: call]
	adc $64.b		; Add $64.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	jmp ($BB0C.w)		; Jump indirect to ($BB0C.w) [Flow: jump]
	adc ($95.b),Y		; Add with carry ($95.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	adc ($73.b)		; Add with carry (indirect) ($73.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	eor ($1E.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($1E.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $7574.w,X		; Arithmetic shift left $7574.w,X [Reads: X Index] [Flags: ZCN]
	jmp ($6D6D.w)		; Jump indirect to ($6D6D.w) [Flow: jump]
	stz $76.b		; Store zero to $76.b
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	cpx $01FF.w		; Compare $01FF.w with X register [Reads: X Index] [Flags: ZCN]
	and ($20.b,X)		; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $21.b,S		; AND accumulator with stack relative $21.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$20.b]		; OR accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $01.b		; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZCN]
	and ($20.b,X)		; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $2123.w		; Jump to subroutine at $2123.w [Writes: Stack Pointer] [Flow: call]
	asl $20.b		; Arithmetic shift left $20.b [Reads: Direct Page] [Flags: ZCN]
	ora [$21.b]		; OR accumulator with memory (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$0E.b]		; OR accumulator with memory (long) [$0E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($0F.b,X)		; Logical AND ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	and ($03.b,X)		; Logical AND ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $040621.l		; OR accumulator with memory (long) $040621.l [Writes: Accumulator] [Flags: ZN]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	and ($05.b,X)		; Logical AND ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $20.b		; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $070721.l		; OR accumulator with memory (long) $070721.l [Writes: Accumulator] [Flags: ZN]
	and #$21.b		; Logical AND #$21.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $05.b		; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	trb CGADD.w		; CGRAM Address ; Test and reset bits CGADD.w [Reads: Accumulator] [Flags: Z]
	jsr $212A.w		; Jump to subroutine at $212A.w [Writes: Stack Pointer] [Flow: call]
	brk $05.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L063CE5:
	and #$21.b		; Logical AND #$21.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $050521.l		; Jump to subroutine long $050521.l [Writes: Stack Pointer] [Flow: call]
	ora $2120.w,X		; OR accumulator with memory $2120.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$21.b]		; OR accumulator with memory (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $20,$21		; Move block positive $20,$21 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora [$02.b]		; OR accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$07.b]		; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $21.b		; Logical OR $21.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $21241C.l		; OR accumulator with memory (long) $21241C.l [Writes: Accumulator] [Flags: ZN]
	brk $20.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $050321.l		; Jump to subroutine long $050321.l [Writes: Stack Pointer] [Flow: call]
	ora [$21.b]		; OR accumulator with memory (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $2022.w		; Test and reset bits $2022.w [Reads: Accumulator] [Flags: Z]
	ora $05.b,S		; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $07.b		; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $83.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1B.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $1C.b		; Test and set bits $1C.b [Reads: Accumulator] [Flags: Z]
	jsr $2120.w		; Jump to subroutine at $2120.w [Writes: Stack Pointer] [Flow: call]
	asl $2122.w,X		; Arithmetic shift left $2122.w,X [Reads: X Index] [Flags: ZCN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $05.b		; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: ZCN]
	jsr $0721.w		; Jump to subroutine at $0721.w [Writes: Stack Pointer] [Flow: call]
	.db $10, $20		; Invalid branch target (bpl L063D46) ; Branch if plus to $10, $20 [Flow: branch]
	trb M7Y.w		; Mode 7 Center Y ; Test and reset bits M7Y.w [Reads: Accumulator] [Flags: Z]
	trb $2220.w		; Test and reset bits $2220.w [Reads: Accumulator] [Flags: Z]
	and ($0D.b,X)		; Logical AND ($0D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $210921.l		; OR accumulator with memory (long) $210921.l [Writes: Accumulator] [Flags: ZN]
	and ($07.b,X)		; Logical AND ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($11.b,X)		; Logical AND ($11.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($1E.b,X)		; Logical AND ($1E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $2121.w		; Arithmetic shift left $2121.w [Flags: ZCN]
	ora [$83.b]		; OR accumulator with memory (long) [$83.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $15.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $21.b,S		; AND accumulator with stack relative $21.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($08.b,X)		; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $22		; Invalid branch target (bpl L063D67) ; Branch if plus to $10, $22 [Flow: branch]
	and ($01.b,X)		; Logical AND ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $2707.w		; Jump to subroutine at $2707.w [Writes: Stack Pointer] [Flow: call]
	and ($01.b,X)		; Logical AND ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $07.b,S		; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	and ($00.b,X)		; Logical AND ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$83.b]		; OR accumulator with memory (long) [$83.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $D0.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $0021.w		; Test bits $0021.w with accumulator [Reads: Accumulator] [Flags: VNZ]
	ora $2C.b,S		; OR accumulator with stack relative $2C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($FF.b,X)		; Logical AND ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($7B.b,X)		; Logical OR ($7B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	adc $7C.b,S		; Add with carry (stack relative) $7C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	ora ($EF.b)		; OR accumulator with memory (indirect) ($EF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $1A80.w		; Rotate left $1A80.w [Flags: ZCN]
	inc $17.b		; Increment $17.b [Reads: Direct Page] [Flags: ZN]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	and $8119.w,Y		; AND accumulator with memory $8119.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($07.b)		; OR accumulator with memory (indirect) ($07.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $8B822C.l,X		; Subtract with carry (long,X) $8B822C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	and $84A783.l		; AND accumulator with memory (long) $84A783.l [Writes: Accumulator] [Flags: ZN]
	brk $08.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $84.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $1A.b		; Store accumulator to $1A.b [Reads: Accumulator]
	per L064107.w		; Push effective relative address L064107.w [Writes: Stack Pointer]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	bit #$8A.b		; Test bits #$8A.b with accumulator [Reads: Accumulator] [Flags: Z]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	ora [$00.b],Y		; OR accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $62.b		; Store Y register to $62.b [Reads: Y Index]
	phb		; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	brk $19.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	per L063E1F.w		; Push effective relative address L063E1F.w [Writes: Stack Pointer]
	stz $62.b,X		; Store zero to $62.b,X [Reads: X Index]
	sta ($05.b),Y		; Store accumulator ($05.b),Y [Reads: Direct Page, Accumulator, Y Index]
	sbc $F5.b,S		; Subtract stack-relative $F5.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	lda [$94.b]		; Load accumulator (long) [$94.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($74.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($74.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc #$95.b		; Add #$95.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	tsb $9A.b		; Test and set bits $9A.b [Reads: Accumulator] [Flags: Z]
	ldy $46.b		; Load $46.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sta $A067DE.l,X		; Store accumulator (long,X) $A067DE.l,X [Reads: Accumulator, X Index]
	ora $9D.b,S		; OR accumulator with stack relative $9D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$A3.b		; Load #$A3.b into accumulator [Writes: Accumulator] [Flags: ZN]
	per L063E57.w		; Push effective relative address L063E57.w [Writes: Stack Pointer]
	lsr $AD63.w,X		; Logical shift right $AD63.w,X [Reads: X Index] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lda $B1.b		; Load $B1.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda ($B3.b)		; Load accumulator (indirect) ($B3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda #$A3.b		; Load #$A3.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sty $E3.b		; Store Y register to $E3.b [Reads: Y Index]
	adc ($53.b,S),Y		; Add with carry (stack relative indirect indexed) ($53.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	.db $62, $B4, $10		; Invalid branch target (per L064E73) ; Push effective relative address $62, $B4, $10 [Writes: Stack Pointer]
	clc		; Clear carry ; Clear carry flag [Flags: C]
L063DC0:
	rol $65B6.w,X		; Rotate left $65B6.w,X [Reads: X Index] [Flags: ZCN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L063DC4:
	eor $1F.b		; Exclusive OR $1F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $B7.b,S		; Load accumulator (stack relative) $B7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $80, $51		; Invalid branch target (bra L063E1B) ; Branch always to $80, $51 [Flow: branch]
	clv		; Clear overflow ; Clear overflow flag [Flags: V]
	lda $BAB2.w,Y		; Load $BAB2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	.db $62, $BC, $03		; Invalid branch target (per L06418F) ; Push effective relative address $62, $BC, $03 [Writes: Stack Pointer]
	cmp #$4A.b		; Compare #$4A.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	lda $C662A4.l,X		; Load long $C662A4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bpl L063DC0.b		; Branch if plus to L063DC0.b [Flow: branch]
	lda $E6FB45.l		; Load long $E6FB45.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$56.b],Y		; OR accumulator with memory (long indexed) [$56.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$C122.w		; Compare #$C122.w with Y register [Reads: Y Index] [Flags: ZCN]
.ACCU 16
	rep #$E3
	eor ($D4.b),Y		; Exclusive OR accumulator with memory ($D4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $2E.b,X		; Compare accumulator $2E.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	per L061EB1.w		; Push effective relative address L061EB1.w [Writes: Stack Pointer]
	and $1A.b,X		; Logical AND $1A.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $C04E.w,X		; Logical shift right $C04E.w,X [Reads: X Index] [Flags: ZCN]
	sta $E3.b,X		; Store accumulator to $E3.b,X [Reads: Accumulator, X Index]
	sbc $51.b,S		; Subtract stack-relative $51.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	inc $51C6.w		; Increment $51C6.w [Flags: ZN]
	sbc $C7.b,S		; Subtract stack-relative $C7.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec $A7.b		; Decrement $A7.b [Reads: Direct Page] [Flags: ZN]
	.db $80, $FF		; Invalid branch target (bra L063E00) ; Branch always to $80, $FF [Flow: branch]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$1459.w		; Compare #$1459.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	ora ($CA.b)		; OR accumulator with memory (indirect) ($CA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $2F.b		; Test and set bits $2F.b [Reads: Accumulator] [Flags: Z]
	wai		; Wait for interrupt
	cpy $8B8A.w		; Compare $8B8A.w with Y register [Reads: Y Index] [Flags: ZCN]
	and $31A7CD.l		; AND accumulator with memory (long) $31A7CD.l [Writes: Accumulator] [Flags: ZN]
	dec $1CCF.w		; Decrement $1CCF.w [Flags: ZN]
	adc ($E3.b)		; Add with carry (indirect) ($E3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	bne L063DC4.b		; Branch if not equal to L063DC4.b [Flow: branch]
	cmp ($FF.b),Y		; Compare accumulator ($FF.b),Y [Reads: Direct Page, Accumulator, Y Index] [Flags: ZCN]
	sta ($D2.b)		; Store accumulator (indirect) ($D2.b) [Reads: Direct Page, Accumulator]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
L063E1F:
	cmp ($3B.b,S),Y		; Compare accumulator (stack relative indirect indexed) ($3B.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer] [Flags: ZCN]
	pei ($D5.b)		; Push effective indirect address ($D5.b) [Reads: Direct Page] [Writes: Stack Pointer]
	lda ($95.b,X)		; Load accumulator ($95.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	stz $D6.b		; Store zero to $D6.b
	tsb $DB79.w		; Test and set bits $DB79.w [Reads: Accumulator] [Flags: Z]
	asl $0712.w,X		; Arithmetic shift left $0712.w,X [Reads: X Index] [Flags: ZCN]
	ora ($8B.b,S),Y		; OR accumulator (stack relative indirect indexed) ($8B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jmp.w [$A1DD]		; Jump long indirect [$A1DD] [Flow: jump]
	sta $E3.b,X		; Store accumulator to $E3.b,X [Reads: Accumulator, X Index]
	cmp [$65.b],Y		; Compare accumulator (long indexed) [$65.b],Y [Reads: Direct Page, Accumulator, Y Index] [Flags: ZCN]
	dec $1A06.w,X		; Decrement memory $1A06.w,X [Reads: X Index] [Flags: ZN]
	ora ($1B.b)		; OR accumulator with memory (indirect) ($1B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	dec $A1CF.w		; Decrement $A1CF.w [Flags: ZN]
	stz $E4.b		; Store zero to $E4.b
	brk $DB.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $E9, $03		; Invalid branch target (per L06422F) ; Push effective relative address $62, $E9, $03 [Writes: Stack Pointer]
	ora $1E1A.w,Y		; OR accumulator with memory $1E1A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $2BFF.w,X		; Arithmetic shift left $2BFF.w,X [Reads: X Index] [Flags: ZCN]
	and ($03.b,X)		; Logical AND ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$21.b]		; OR accumulator with memory (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($07.b,X)		; Logical AND ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	and ($00.b,X)		; Logical AND ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$22.b]		; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
L063E57:
	and ($22.b,X)		; Logical AND ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $2101.w		; Jump to subroutine at $2101.w [Writes: Stack Pointer] [Flow: call]
	and ($25.b,X)		; Logical AND ($25.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $052104.l		; Jump to subroutine long $052104.l [Writes: Stack Pointer] [Flow: call]
	jsl $220721.l		; Jump to subroutine long $220721.l [Writes: Stack Pointer] [Flow: call]
	jsr $2215.w		; Jump to subroutine at $2215.w [Writes: Stack Pointer] [Flow: call]
	tsb $22.b		; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
	jsl $020302.l		; Jump to subroutine long $020302.l [Writes: Stack Pointer] [Flow: call]
	cop $21.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $072122.l		; Jump to subroutine long $072122.l [Writes: Stack Pointer] [Flow: call]
	jsl $220D22.l		; Jump to subroutine long $220D22.l [Writes: Stack Pointer] [Flow: call]
	tsb $04.b		; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	asl $01.b,X		; Arithmetic shift left $01.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $23.b,S		; OR accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $212102.l		; Jump to subroutine long $212102.l [Writes: Stack Pointer] [Flow: call]
	ora [$22.b]		; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $220200.l		; Jump to subroutine long $220200.l [Writes: Stack Pointer] [Flow: call]
	jsl $202101.l		; Jump to subroutine long $202101.l [Writes: Stack Pointer] [Flow: call]
	bit $22.b		; Test bits $22.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	cop $21.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$20.b]		; OR accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $22.b,S		; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $21.b,S		; AND accumulator with stack relative $21.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$22.b]		; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0521.w		; Arithmetic shift left $0521.w [Flags: ZCN]
	jsr $0705.w		; Jump to subroutine at $0705.w [Writes: Stack Pointer] [Flow: call]
	jsr $2223.w		; Jump to subroutine at $2223.w [Writes: Stack Pointer] [Flow: call]
	jsl $220115.l		; Jump to subroutine long $220115.l [Writes: Stack Pointer] [Flow: call]
	and ($22.b,X)		; Logical AND ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $770083.l		; Jump to subroutine long $770083.l [Writes: Stack Pointer] [Flow: call]
	ora $1F.b,S		; OR accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $220622.l		; Jump to subroutine long $220622.l [Writes: Stack Pointer] [Flow: call]
	ora $E0.b,X		; OR accumulator with memory $E0.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	asl $19.b		; Arithmetic shift left $19.b [Reads: Direct Page] [Flags: ZCN]
	ora [$22.b]		; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $15.b		; Arithmetic shift left $15.b [Reads: Direct Page] [Flags: ZCN]
	and ($22.b,X)		; Logical AND ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $02.b		; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	jsl $210522.l		; Jump to subroutine long $210522.l [Writes: Stack Pointer] [Flow: call]
	jsr $0621.w		; Jump to subroutine at $0621.w [Writes: Stack Pointer] [Flow: call]
	ora ($03.b,X)		; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $071F09.l		; Jump to subroutine long $071F09.l [Writes: Stack Pointer] [Flow: call]
	ora $020207.l		; OR accumulator with memory (long) $020207.l [Writes: Accumulator] [Flags: ZN]
	ora $22.b		; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $21221C.l		; OR accumulator with memory (long) $21221C.l [Writes: Accumulator] [Flags: ZN]
	asl $07.b		; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZCN]
	ora $1C.b		; Logical OR $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $0F21.w		; Test and reset bits $0F21.w [Reads: Accumulator] [Flags: Z]
	and ($22.b,X)		; Logical AND ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $050F01.l		; Jump to subroutine long $050F01.l [Writes: Stack Pointer] [Flow: call]
	and $22.b,S		; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $21.b		; Logical OR $21.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $201C.w		; Test and reset bits $201C.w [Reads: Accumulator] [Flags: Z]
	and ($0F.b,X)		; Logical AND ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	and ($04.b,X)		; Logical AND ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $2220.w		; Jump to subroutine at $2220.w [Writes: Stack Pointer] [Flow: call]
	ora [$22.b]		; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $0107.w		; Logical AND $0107.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $212C22.l		; Jump to subroutine long $212C22.l [Writes: Stack Pointer] [Flow: call]
	ora ($22.b,X)		; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $02212D.l		; Jump to subroutine long $02212D.l [Writes: Stack Pointer] [Flow: call]
	jsl $FF2121.l		; Jump to subroutine long $FF2121.l [Writes: Stack Pointer] [Flow: call]
	brk $EC.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $EC, $22		; Invalid branch target (per L0661F6) ; Push effective relative address $62, $EC, $22 [Writes: Stack Pointer]
	adc $EF00.w		; Add $EF00.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	adc $EF.b,S		; Add with carry (stack relative) $EF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	ora $95.b,S		; OR accumulator with stack relative $95.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($73.b)		; Add with carry (indirect) ($73.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	eor ($62.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($62.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc ($00.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($66.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($66.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	inc $09.b,X		; Increment memory $09.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	sbc ($95.b)		; Subtract with carry (indirect) ($95.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	adc ($B8.b)		; Add with carry (indirect) ($B8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc $B6B5.w,X		; Subtract with carry $B6B5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ldy $FE.b,X		; Load Y register $FE.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: ZN]
	sbc $1D0065.l,X		; Subtract with carry (long,X) $1D0065.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	stz $069A.w,X		; Store zero to $069A.w,X [Reads: X Index]
	sec		; Set carry ; Set carry flag [Flags: C]
	adc $B8.b,X		; Add $B8.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	lda $07B7.w,Y		; Load $07B7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $0908.w,Y		; Load $0908.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($61.b,S),Y		; Load accumulator (stack relative indirect indexed) ($61.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($A9.b,X)		; Add with carry ($A9.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	adc $0C.b,X		; Add $0C.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora $0E71.w		; Logical OR $0E71.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tyx		; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldy $E548.w,X		; Load Y register $E548.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	tyx		; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	adc $0F.b,S		; Add with carry (stack relative) $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	cop $4F.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	adc $62.b,X		; Add $62.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora ($00.b,S),Y		; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $1662.w,Y		; Add $1662.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	ora ($26.b,X)		; Logical OR ($26.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$1964.w		; Compare #$1964.w with Y register [Reads: Y Index] [Flags: ZCN]
	cop $4C.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $95.b,X		; Add $95.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $1E.b,S		; Add with carry (stack relative) $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
L063F5F:
	bit $7F53.w,X		; Test bits $7F53.w,X [Reads: X Index] [Flags: VNZ] [Flow: branch]
	jsl $E5502F.l		; Jump to subroutine long $E5502F.l [Writes: Stack Pointer] [Flow: call]
	cmp [$E5.b],Y		; Compare accumulator (long indexed) [$E5.b],Y [Reads: Direct Page, Accumulator, Y Index] [Flags: ZCN]
	adc $3E.b,X		; Add $3E.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $23.b,S		; Add with carry (stack relative) $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	jsl $27017E.l		; Jump to subroutine long $27017E.l [Writes: Stack Pointer] [Flow: call]
	ldy $2862.w		; Load $2862.w into Y register [Writes: Y Index] [Flags: ZN]
	ora [$7E.b]		; OR accumulator with memory (long) [$7E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	jmp $2D002C.l		; Jump long to $2D002C.l [Flow: jump]
	rol $2202.w		; Rotate left $2202.w [Flags: ZCN]
	bra L063F5F.b		; Branch always to L063F5F.b [Flow: branch]
	and [$03.b],Y		; AND accumulator with memory (long indexed) [$03.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $2F2B.w,X		; Increment memory $2F2B.w,X [Reads: X Index] [Flags: ZN]
	cop $80.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $30.b,S		; Add with carry (stack relative) $30.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	.db $80, $08		; Invalid branch target (bra L063F92) ; Branch always to $80, $08 [Flow: branch]
	and ($32.b),Y		; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$F368.w		; Compare #$F368.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	and [$0E.b],Y		; AND accumulator with memory (long indexed) [$0E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $9C.b,S		; OR accumulator with stack relative $9C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($8B.b,S),Y		; AND accumulator (stack relative indirect indexed) ($8B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	eor ($CC.b)		; Exclusive OR accumulator with memory (indirect) ($CC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $FBFB.w		; Jump to subroutine at $FBFB.w [Writes: Stack Pointer] [Flow: call]
	sta $8034.w,X		; Store accumulator to $8034.w,X [Reads: Accumulator, X Index]
	eor ($35.b),Y		; Exclusive OR accumulator with memory ($35.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $1A		; Invalid branch target (bra L063FBC) ; Branch always to $80, $1A [Flow: branch]
	ora $51A4A3.l,X		; Logical OR long $51A4A3.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc ($CC.b,S),Y		; Add with carry (stack relative indirect indexed) ($CC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	asl $36.b,X		; Arithmetic shift left $36.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	rol $37.b,X		; Rotate left $37.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	.db $80, $A8		; Invalid branch target (bra L063F56) ; Branch always to $80, $A8 [Flow: branch]
	sec		; Set carry ; Set carry flag [Flags: C]
	and $3A35.w,Y		; AND accumulator with memory $3A35.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $E351A4.l,X		; Load long $E351A4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc ($CC.b,S),Y		; Add with carry (stack relative indirect indexed) ($CC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	rol $3B.b		; Rotate left $3B.b [Reads: Direct Page] [Flags: ZCN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $7F7F3B.l,X		; Add long $7F7F3B.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $2E3BEE.l		; Subtract with carry (long) $2E3BEE.l [Writes: Accumulator] [Flags: VCNZ]
	bit $8B2C.w,X		; Test bits $8B2C.w,X [Reads: X Index] [Flags: VNZ] [Flow: branch]
	cop $9D.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $2C3E.w,X		; AND accumulator with memory $2C3E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	cop $3F.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	eor $021E2C.l,X		; Exclusive OR accumulator with memory (long,X) $021E2C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($65.b,X)		; Exclusive OR accumulator with memory ($65.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	cpx $E4FF.w		; Compare $E4FF.w with X register [Reads: X Index] [Flags: ZCN]
	eor $9FE422.l,X		; Exclusive OR accumulator with memory (long,X) $9FE422.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$42.b]		; AND accumulator with memory (long) [$42.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($43.b,X)		; Logical OR ($43.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	mvp $42,$25		; Move block positive $42,$25 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ror $45.b		; Rotate right $45.b [Reads: Direct Page] [Flags: ZCN]
	brk $48.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $4C.b,S		; Add with carry (stack relative) $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	ora $47.b,S		; OR accumulator with stack relative $47.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor [$50.b]		; Exclusive OR accumulator with memory (long) [$50.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $512F.w		; Exclusive OR $512F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $532F52.l,X		; AND accumulator with memory (long,X) $532F52.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpx $9F.b		; Compare $9F.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $E4FF.w,X		; OR accumulator with memory $E4FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr $0122.w		; Jump to subroutine at $0122.w [Writes: Stack Pointer] [Flow: call]
	ora ($12.b,S),Y		; OR accumulator (stack relative indirect indexed) ($12.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $22.b		; Logical AND $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($13.b,X)		; Logical OR ($13.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($25.b)		; OR accumulator with memory (indirect) ($25.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $261300.l		; Jump to subroutine long $261300.l [Writes: Stack Pointer] [Flow: call]
	jsl $261300.l		; Jump to subroutine long $261300.l [Writes: Stack Pointer] [Flow: call]
	jsl $261300.l		; Jump to subroutine long $261300.l [Writes: Stack Pointer] [Flow: call]
	jsl $261300.l		; Jump to subroutine long $261300.l [Writes: Stack Pointer] [Flow: call]
	jsl $261300.l		; Jump to subroutine long $261300.l [Writes: Stack Pointer] [Flow: call]
	jsl $E41300.l		; Jump to subroutine long $E41300.l [Writes: Stack Pointer] [Flow: call]
	lsr $22.b		; Logical shift right $22.b [Reads: Direct Page] [Flags: ZCN]
	ora ($13.b,X)		; Logical OR ($13.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($25.b)		; OR accumulator with memory (indirect) ($25.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $121301.l		; Jump to subroutine long $121301.l [Writes: Stack Pointer] [Flow: call]
	and $22.b		; Logical AND $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $13.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $22.b		; Rotate left $22.b [Reads: Direct Page] [Flags: ZCN]
	brk $13.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $22.b		; Rotate left $22.b [Reads: Direct Page] [Flags: ZCN]
	brk $13.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $22.b		; Rotate left $22.b [Reads: Direct Page] [Flags: ZCN]
	brk $13.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $22.b		; Rotate left $22.b [Reads: Direct Page] [Flags: ZCN]
	brk $13.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $22.b		; Rotate left $22.b [Reads: Direct Page] [Flags: ZCN]
	brk $13.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $25.b		; Compare $25.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	jsl $5467FF.l		; Jump to subroutine long $5467FF.l [Writes: Stack Pointer] [Flow: call]
	sta [$00.b]		; Store accumulator (long) [$00.b] [Reads: Direct Page, Accumulator]
	brk $64.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $615402.l		; Jump long to $615402.l [Flow: jump]
	.db $62, $87, $00		; Invalid branch target (per L0640D8) ; Push effective relative address $62, $87, $00 [Writes: Stack Pointer]
	bpl L06405A.b		; Branch if plus to L06405A.b [Flow: branch]
	eor $6364F2.l,X		; Exclusive OR accumulator with memory (long,X) $6364F2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $62, $64, $65		; Bank wrapping branch target ; Push effective relative address $62, $64, $65 [Writes: Stack Pointer]
L06405A:
	eor $200087.l,X		; Exclusive OR accumulator with memory (long,X) $200087.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$66.b]		; OR accumulator with memory (long) [$66.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($67.b,S),Y		; AND accumulator (stack relative indirect indexed) ($67.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	eor $6A695B.l,X		; Exclusive OR accumulator with memory (long,X) $6A695B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$00.b]		; Store accumulator (long) [$00.b] [Reads: Direct Page, Accumulator]
	bmi L064072.b		; Branch if minus to L064072.b [Flow: branch]
	adc ($F2.b,X)		; Add with carry ($F2.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	jmp ($5C62.w)		; Jump indirect to ($5C62.w) [Flow: jump]
L064072:
	cli		; Clear interupt ; Clear interrupt disable flag [Flags: I]
	sta [$00.b]		; Store accumulator (long) [$00.b] [Reads: Direct Page, Accumulator]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	ora [$65.b]		; OR accumulator with memory (long) [$65.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($6D.b,S),Y		; AND accumulator (stack relative indirect indexed) ($6D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ror $5F5F.w		; Rotate right $5F5F.w [Flags: ZCN]
	adc $500087.l		; Add with carry (long) $500087.l [Writes: Accumulator] [Flags: VCNZ]
	ora [$5F.b]		; OR accumulator with memory (long) [$5F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $697170.l,X		; Exclusive OR accumulator with memory (long,X) $697170.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ror $6C.b		; Rotate right $6C.b [Reads: Direct Page] [Flags: ZCN]
	sta [$00.b]		; Store accumulator (long) [$00.b] [Reads: Direct Page, Accumulator]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($72.b,X)		; Logical OR ($72.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc #$5423.w		; Add #$5423.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	ora $61.b,S		; OR accumulator with stack relative $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $6972.w		; Rotate right $6972.w [Flags: ZCN]
	and $54.b,S		; AND accumulator with stack relative $54.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($61.b,X)		; Logical OR ($61.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ror $71F0.w		; Rotate right $71F0.w [Flags: ZCN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $54.b,S		; AND accumulator with stack relative $54.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	ror $23.b,X		; Rotate right $23.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	mvn $61,$01		; Move block negative $61,$01 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ror $E4FF.w		; Rotate right $E4FF.w [Flags: ZCN]
	sbc $E4FF22.l,X		; [PATTERN: Memory clearing operation] Subtract with carry (long,X) $E4FF22.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $E4FF73.l,X		; Subtract with carry (long,X) $E4FF73.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $00FF22.l,X		; Subtract with carry (long,X) $00FF22.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	stz $64.b,X		; Store zero to $64.b,X [Reads: X Index]
	stz $01.b,X		; Store zero to $01.b,X [Reads: X Index]
	stz $74.b,X		; Store zero to $74.b,X [Reads: X Index]
	adc $79.b,S		; Add with carry (stack relative) $79.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	adc $7C.b,S		; Add with carry (stack relative) $7C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	ora #$7474.w		; Logical OR #$7474.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bra L064144.b		; Branch always to L064144.b [Flow: branch]
	jmp ($7481.w,X)		; Jump indirect indexed to ($7481.w,X) [Reads: X Index] [Flow: jump]
	stz $79.b,X		; [PATTERN: Memory clearing operation] Store zero to $79.b,X [Reads: X Index]
	.db $82, $23, $7C		; Bank wrapping branch target ; Branch always long to $82, $23, $7C [Flow: branch]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta $7F.b,S		; Store accumulator (stack relative) $7F.b,S [Reads: Accumulator, Stack Pointer]
	stz $84.b,X		; Store zero to $84.b,X [Reads: X Index]
	sta $7C.b		; Store accumulator to $7C.b [Reads: Accumulator]
	jmp ($8486.w,X)		; Jump indirect indexed to ($8486.w,X) [Reads: X Index] [Flow: jump]
	stz $87.b,X		; Store zero to $87.b,X [Reads: X Index]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and $7C.b,S		; AND accumulator with stack relative $7C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $89.b,S		; Add with carry (stack relative) $89.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	and $7C.b,S		; AND accumulator with stack relative $7C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $8C.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	.db $82, $25, $7C		; Bank wrapping branch target ; Branch always long to $82, $25, $7C [Flow: branch]
	brk $83.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$7C.b]		; AND accumulator with memory (long) [$7C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $88.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $7C.b		; Logical AND $7C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $89.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $8D.b		; Rotate right $8D.b [Reads: Direct Page] [Flags: ZCN]
	brk $8D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$7C.b]		; AND accumulator with memory (long) [$7C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $94.b		; Add $94.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ora ($95.b,X)		; Logical OR ($95.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sty $27.b,X		; Store Y register $27.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
L0640FF:
	jmp ($9401.w,X)		; Jump indirect indexed to ($9401.w,X) [Reads: X Index] [Flow: jump]
	sty $63.b,X		; Store Y register $63.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	txs		; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora ($94.b,X)		; Logical OR ($94.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
L064107:
	sty $E4.b,X		; Store Y register $E4.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta [$7C.b]		; Store accumulator (long) [$7C.b] [Reads: Direct Page, Accumulator]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $C911A5.l,X		; Subtract with carry (long,X) $C911A5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bcc L064133.b		; Branch if carry clear to L064133.b [Flow: branch]
	lda $F6.b		; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$05C0.w		; Logical AND #$05C0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	pea $D029.w		; Push absolute address $D029.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	beq L064133.b		; Branch if equal to L064133.b [Flow: branch]
	jmp L0642F0.w		; Jump to L0642F0.w [Flow: jump]
L064133:
	lda $11.b		; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $00879C.l		; Jump to subroutine long $00879C.l [Writes: Stack Pointer] [Flow: call]
	eor $0CC1.w,X		; Exclusive OR accumulator with memory $0CC1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bvs L0640FF.b		; Branch if overflow set to L0640FF.b [Flow: branch]
	tsb $C33C.w		; Test and set bits $C33C.w [Reads: Accumulator] [Flags: Z]
	tsb $C404.w		; Test and set bits $C404.w [Reads: Accumulator] [Flags: Z]
L064144:
	tsb $C404.w		; Test and set bits $C404.w [Reads: Accumulator] [Flags: Z]
	tsb $C25C.w		; Test and set bits $C25C.w [Reads: Accumulator] [Flags: Z]
	tsb $C2AE.w		; Test and set bits $C2AE.w [Reads: Accumulator] [Flags: Z]
	tsb $C284.w		; Test and set bits $C284.w [Reads: Accumulator] [Flags: Z]
	tsb $C2D4.w		; Test and set bits $C2D4.w [Reads: Accumulator] [Flags: Z]
	tsb $C404.w		; Test and set bits $C404.w [Reads: Accumulator] [Flags: Z]
	tsb $C33C.w		; Test and set bits $C33C.w [Reads: Accumulator] [Flags: Z]
	tsb $C404.w		; Test and set bits $C404.w [Reads: Accumulator] [Flags: Z]
L06415C:
	tsb $0022.w		; Test and set bits $0022.w [Reads: Accumulator] [Flags: Z]
	.db $80, $02		; Invalid branch target (bra L064163) ; Branch always to $80, $02 [Flow: branch]
	lda #$850F.w		; Load #$850F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($64.b,S),Y		; OR accumulator (stack relative indirect indexed) ($64.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $E6		; Invalid branch target (bcs L06414E) ; Branch if carry set to $B0, $E6 [Flow: branch]
	ora $E6.b,X		; OR accumulator with memory $E6.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($A9.b),Y		; OR accumulator with memory ($A9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sta $012F.w		; Store accumulator to $012F.w [Reads: Accumulator]
	jsr $ED82.w		; Jump to subroutine at $ED82.w [Writes: Stack Pointer] [Flow: call]
	lda $B0.b		; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $B0.b		; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	cmp #$B00B.w		; Compare #$B00B.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	jsl $00879C.l		; Jump to subroutine long $00879C.l [Writes: Stack Pointer] [Flow: call]
	ldy #$0CC1.w		; Load #$0CC1.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$0CC1.w		; Load #$0CC1.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$0CC1.w		; Load #$0CC1.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$0CC1.w		; Load #$0CC1.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$0CC1.w		; Load #$0CC1.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$0CC1.w		; Load #$0CC1.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$0CC1.w		; Load #$0CC1.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$0CC1.w		; Load #$0CC1.w into Y register [Writes: Y Index] [Flags: ZN]
	asl $81.b,X		; Arithmetic shift left $81.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	cop $31.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($00.b)		; Compare accumulator (indirect) ($00.b) [Reads: Direct Page, Accumulator] [Flags: ZCN]
	and $D4.b,S		; AND accumulator with stack relative $D4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $C2.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $A6		; Invalid branch target (bmi L064149) ; Branch if minus to $30, $A6 [Flow: branch]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda #$0000.w		; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
L0641A7:
	sta $7E2000.l,X		; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	sta $7E4000.l,X		; Store accumulator (long,X) $7E4000.l,X [Reads: Accumulator, X Index]
	sta $7E6000.l,X		; Store accumulator (long,X) $7E6000.l,X [Reads: Accumulator, X Index]
	sta $7E8000.l,X		; Store accumulator (long,X) $7E8000.l,X [Reads: Accumulator, X Index]
	sta $7EA000.l,X		; Store accumulator (long,X) $7EA000.l,X [Reads: Accumulator, X Index]
	sta $7EC000.l,X		; Store accumulator (long,X) $7EC000.l,X [Reads: Accumulator, X Index]
	sta $7EE000.l,X		; Store accumulator (long,X) $7EE000.l,X [Reads: Accumulator, X Index]
	sta $7F0000.l,X		; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	sta $7F2000.l,X		; Store accumulator (long,X) $7F2000.l,X [Reads: Accumulator, X Index]
	sta $7F4000.l,X		; Store accumulator (long,X) $7F4000.l,X [Reads: Accumulator, X Index]
	sta $7F6000.l,X		; Store accumulator (long,X) $7F6000.l,X [Reads: Accumulator, X Index]
	sta $7F8000.l,X		; Store accumulator (long,X) $7F8000.l,X [Reads: Accumulator, X Index]
	sta $7FA000.l,X		; Store accumulator (long,X) $7FA000.l,X [Reads: Accumulator, X Index]
	sta $7FC000.l,X		; Store accumulator (long,X) $7FC000.l,X [Reads: Accumulator, X Index]
	sta $7FE000.l,X		; Store accumulator (long,X) $7FE000.l,X [Reads: Accumulator, X Index]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx $CA.b		; Compare $CA.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	bne L0641A7.b		; Branch if not equal to L0641A7.b [Flow: branch]
	stx $C8.b		; Store X register to $C8.b [Reads: X Index]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; Set carry ; Set carry flag [Flags: C]
	sbc #$0400.w		; Subtract #$0400.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	sta $CA.b		; Store accumulator to $CA.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $13.b		; [PATTERN: Memory countdown loop] Decrement $13.b [Reads: Direct Page] [Flags: ZN]
	bne L06425B.b		; Branch if not equal to L06425B.b [Flow: branch]
L0641F9:
	jsl $00893D.l		; Jump to subroutine long $00893D.l [Writes: Stack Pointer] [Flow: call]
	jsl $00834B.l		; Jump to subroutine long $00834B.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta OBJSEL.w		; Object Size and Chr Address ; Store accumulator to OBJSEL.w [Reads: Accumulator]
	lda #$23.b		; Load #$23.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AA1.w		; Store accumulator to $0AA1.w [Reads: Accumulator]
	lda #$7D.b		; Load #$7D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AA3.w		; Store accumulator to $0AA3.w [Reads: Accumulator]
	lda #$51.b		; Load #$51.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AA2.w		; Store accumulator to $0AA2.w [Reads: Accumulator]
	lda #$08.b		; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AA4.w		; Store accumulator to $0AA4.w [Reads: Accumulator]
	jsl $00E2D0.l		; Jump to subroutine long $00E2D0.l [Writes: Stack Pointer] [Flow: call]
	jsl $00E19B.l		; Jump to subroutine long $00E19B.l [Writes: Stack Pointer] [Flow: call]
	ldy #$5D.b		; Load #$5D.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $00D337.l		; Jump to subroutine long $00D337.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC00D.l		; [PATTERN: Memory clearing operation] Store accumulator (long) $7EC00D.l [Reads: Accumulator]
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC00E.l		; Store accumulator (long) $7EC00E.l [Reads: Accumulator]
	stz $8A.b		; Store zero to $8A.b
	stz $0AB6.w		; Store zero to $0AB6.w
	stz $0AB8.w		; [PATTERN: Memory clearing operation] Store zero to $0AB8.w
	stz $C8.b		; Store zero to $C8.b
	stz $C9.b		; Store zero to $C9.b
	stz $CA.b		; Store zero to $CA.b
	stz $CB.b		; Store zero to $CB.b
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC009.l		; Store accumulator (long) $7EC009.l [Reads: Accumulator]
	lda #$1F.b		; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC007.l		; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC00B.l		; Store accumulator (long) $7EC00B.l [Reads: Accumulator]
	stz $0AA6.w		; Store zero to $0AA6.w
	inc $11.b		; Increment $11.b [Reads: Direct Page] [Flags: ZN]
L06425B:
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl L064404.l		; Jump to subroutine long L064404.l [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	bcc L064278.b		; Branch if carry clear to L064278.b [Flow: branch]
	jsl $00ED7C.l		; Jump to subroutine long $00ED7C.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC007.l		; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: ZN]
	bne L064279.b		; Branch if not equal to L064279.b [Flow: branch]
	lda #$2A.b		; Load #$2A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $B0.b		; Store accumulator to $B0.b [Reads: Accumulator]
	inc $11.b		; Increment $11.b [Reads: Direct Page] [Flags: ZN]
	jsr L067E45.w		; Jump to subroutine at L067E45.w [Writes: Stack Pointer] [Flow: call]
L064278:
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L064279:
	cmp #$0D.b		; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L064283.b		; Branch if not equal to L064283.b [Flow: branch]
	lda #$15.b		; Load #$15.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1C.b		; Store accumulator to $1C.b [Reads: Accumulator]
	stz $1D.b		; Store zero to $1D.b
L064283:
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr L067E56.w		; Jump to subroutine at L067E56.w [Writes: Stack Pointer] [Flow: call]
	jsl L064404.l		; Jump to subroutine long L064404.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC007.l		; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: ZN]
	beq L06429A.b		; Branch if equal to L06429A.b [Flow: branch]
	lda $1A.b		; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	bcc L0642AD.b		; Branch if carry clear to L0642AD.b [Flow: branch]
	jmp $00ED8F.l		; Jump long to $00ED8F.l [Flow: jump]
L06429A:
	lda $F6.b		; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$C0.b		; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $F4.b		; Logical OR $F4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$D0.b		; Logical AND #$D0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L0642A7.b		; Branch if equal to L0642A7.b [Flow: branch]
	jmp L0642F0.w		; Jump to L0642F0.w [Flow: jump]
L0642A7:
	dec $B0.b		; [PATTERN: Memory countdown loop] Decrement $B0.b [Reads: Direct Page] [Flags: ZN]
	bne L0642AD.b		; Branch if not equal to L0642AD.b [Flow: branch]
	inc $11.b		; [PATTERN: Memory clearing operation] Increment $11.b [Reads: Direct Page] [Flags: ZN]
L0642AD:
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl L064404.l		; Jump to subroutine long L064404.l [Writes: Stack Pointer] [Flow: call]
	stz $1F00.w		; Store zero to $1F00.w
	stz $012A.w		; Store zero to $012A.w
	jsr L067E56.w		; Jump to subroutine at L067E56.w [Writes: Stack Pointer] [Flow: call]
	dec $B0.b		; [PATTERN: Memory countdown loop] Decrement $B0.b [Reads: Direct Page] [Flags: ZN]
	bne L0642D3.b		; Branch if not equal to L0642D3.b [Flow: branch]
	inc $11.b		; Increment $11.b [Reads: Direct Page] [Flags: ZN]
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $99.b		; Store accumulator to $99.b [Reads: Accumulator]
	lda #$22.b		; Load #$22.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9A.b		; Store accumulator to $9A.b [Reads: Accumulator]
L0642C9:
	lda #$1F.b		; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC007.l		; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1D.b		; [PATTERN: Memory clearing operation] Store accumulator to $1D.b [Reads: Accumulator]
L0642D3:
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl L064404.l		; Jump to subroutine long L064404.l [Writes: Stack Pointer] [Flow: call]
	stz $1F00.w		; Store zero to $1F00.w
	stz $012A.w		; Store zero to $012A.w
	jsr L067E56.w		; Jump to subroutine at L067E56.w [Writes: Stack Pointer] [Flow: call]
	dec $B0.b		; [PATTERN: Memory countdown loop] Decrement $B0.b [Reads: Direct Page] [Flags: ZN]
	bne L0642EF.b		; Branch if not equal to L0642EF.b [Flow: branch]
	inc $11.b		; [PATTERN: Memory clearing operation] Increment $11.b [Reads: Direct Page] [Flags: ZN]
	lda #$14.b		; Load #$14.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $10.b		; Store accumulator to $10.b [Reads: Accumulator]
	stz $11.b		; Store zero to $11.b
	stz $22.b		; Store zero to $22.b
L0642EF:
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L0642F0:
	lda #$FF.b		; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0128.w		; [PATTERN: Memory clearing operation] Store accumulator to $0128.w [Reads: Accumulator]
	lda #$15.b		; Load #$15.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1C.b		; Store accumulator to $1C.b [Reads: Accumulator]
	stz $1D.b		; Store zero to $1D.b
	stz $1B.b		; Store zero to $1B.b
	lda #$F1.b		; Load #$F1.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; Store accumulator to $012C.w [Reads: Accumulator]
	jsl $0ED60B.l		; Jump to subroutine long $0ED60B.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30
	ldx #$006E.w		; Load #$006E.w into X register [Writes: X Index] [Flags: ZN]
L06430B:
	stz $20.b,X		; Store zero to $20.b,X [Reads: X Index]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bpl L06430B.b		; Branch if plus to L06430B.b [Flow: branch]
	ldx #$0000.w		; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
L064315:
	sta $7EF000.l,X		; Store accumulator (long,X) $7EF000.l,X [Reads: Accumulator, X Index]
	sta $7EF100.l,X		; Store accumulator (long,X) $7EF100.l,X [Reads: Accumulator, X Index]
	sta $7EF200.l,X		; Store accumulator (long,X) $7EF200.l,X [Reads: Accumulator, X Index]
	sta $7EF300.l,X		; Store accumulator (long,X) $7EF300.l,X [Reads: Accumulator, X Index]
	sta $7EF400.l,X		; Store accumulator (long,X) $7EF400.l,X [Reads: Accumulator, X Index]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$0100.w		; Compare #$0100.w with X register [Reads: X Index] [Flags: ZCN]
	bne L064315.b		; Branch if not equal to L064315.b [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $10.b		; Store accumulator to $10.b [Reads: Accumulator]
	sta $04AA.w		; Store accumulator to $04AA.w [Reads: Accumulator]
	stz $11.b		; Store zero to $11.b
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$08.b		; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AA4.w		; Store accumulator to $0AA4.w [Reads: Accumulator]
	jsl $00E384.l		; Jump to subroutine long $00E384.l [Writes: Stack Pointer] [Flow: call]
	jsr L06436F.w		; Jump to subroutine at L06436F.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E10.w		; Store accumulator to $1E10.w [Reads: Accumulator]
	sta $1E11.w		; Store accumulator to $1E11.w [Reads: Accumulator]
	sta $1E12.w		; Store accumulator to $1E12.w [Reads: Accumulator]
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E18.w		; Store accumulator to $1E18.w [Reads: Accumulator]
	sta $1E19.w		; Store accumulator to $1E19.w [Reads: Accumulator]
	sta $1E1A.w		; Store accumulator to $1E1A.w [Reads: Accumulator]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E14.w		; Store accumulator to $1E14.w [Reads: Accumulator]
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E1C.w		; Store accumulator to $1E1C.w [Reads: Accumulator]
	lda #$0F.b		; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $13.b		; Store accumulator to $13.b [Reads: Accumulator]
	inc $11.b		; Increment $11.b [Reads: Direct Page] [Flags: ZN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L06436F:
	jsl $09F7DE.l		; Jump to subroutine long $09F7DE.l [Writes: Stack Pointer] [Flow: call]
	jsr L0643BD.w		; Jump to subroutine at L0643BD.w [Writes: Stack Pointer] [Flow: call]
	lda #$90.b		; Load #$90.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $FF.b		; Store accumulator to $FF.b [Reads: Accumulator]
	lda #$FF.b		; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1F02.w		; Store accumulator to $1F02.w [Reads: Accumulator]
	lda #$20.b		; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1F06.w		; Store accumulator to $1F06.w [Reads: Accumulator]
	sta $1F07.w		; Store accumulator to $1F07.w [Reads: Accumulator]
	sta $1F08.w		; Store accumulator to $1F08.w [Reads: Accumulator]
	lda #$A0.b		; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1F04.w		; Store accumulator to $1F04.w [Reads: Accumulator]
	lda #$60.b		; Load #$60.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1F05.w		; Store accumulator to $1F05.w [Reads: Accumulator]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1F01.w		; Store accumulator to $1F01.w [Reads: Accumulator]
	sta $1F03.w		; Store accumulator to $1F03.w [Reads: Accumulator]
	sta $012A.w		; [PATTERN: Memory clearing operation] Store accumulator to $012A.w [Reads: Accumulator]
	sta $1F00.w		; Store accumulator to $1F00.w [Reads: Accumulator]
	ldx #$0F.b		; Load #$0F.b into X register [Writes: X Index] [Flags: ZN]
L0643A4:
	stz $1E00.w,X		; Store zero to $1E00.w,X [Reads: X Index]
	stz $1E10.w,X		; Store zero to $1E10.w,X [Reads: X Index]
	stz $1E20.w,X		; [PATTERN: Memory clearing operation] Store zero to $1E20.w,X [Reads: X Index]
	stz $1E30.w,X		; Store zero to $1E30.w,X [Reads: X Index]
	stz $1E40.w,X		; Store zero to $1E40.w,X [Reads: X Index]
	stz $1E50.w,X		; Store zero to $1E50.w,X [Reads: X Index]
	stz $1E60.w,X		; Store zero to $1E60.w,X [Reads: X Index]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bpl L0643A4.b		; Branch if plus to L0643A4.b [Flow: branch]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L0643BD:
.ACCU 16
	rep #$20
	lda $0CC425.l		; Load long $0CC425.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC6A0.l		; Store accumulator (long) $7EC6A0.l [Reads: Accumulator]
	lda $0CC427.l		; Load long $0CC427.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC6A2.l		; Store accumulator (long) $7EC6A2.l [Reads: Accumulator]
	lda $0CC429.l		; Load long $0CC429.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC6A4.l		; Store accumulator (long) $7EC6A4.l [Reads: Accumulator]
	lda $0CC42B.l		; Load long $0CC42B.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC6A6.l		; Store accumulator (long) $7EC6A6.l [Reads: Accumulator]
	lda $0CC42D.l		; Load long $0CC42D.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC6A8.l		; Store accumulator (long) $7EC6A8.l [Reads: Accumulator]
	lda $0CC42F.l		; Load long $0CC42F.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC6AA.l		; Store accumulator (long) $7EC6AA.l [Reads: Accumulator]
	lda $0CC431.l		; Load long $0CC431.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC6AC.l		; Store accumulator (long) $7EC6AC.l [Reads: Accumulator]
	lda $0CC433.l		; Load long $0CC433.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC6AE.l		; Store accumulator (long) $7EC6AE.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30
	inc $15.b		; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L064404:
	phb		; [PATTERN: Function entry: Data bank preservation prologue] Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	inc $1E0A.w		; Increment $1E0A.w [Flags: ZN]
	jsr $C435.w		; Jump to subroutine at $C435.w [Writes: Stack Pointer] [Flow: call]
	jsr L064412.w		; Jump to subroutine at L064412.w [Writes: Stack Pointer] [Flow: call]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L064412:
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E08.w		; Store accumulator to $1E08.w [Reads: Accumulator]
	lda #$08.b		; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E09.w		; Store accumulator to $1E09.w [Reads: Accumulator]
	ldx #$07.b		; Load #$07.b into X register [Writes: X Index] [Flags: ZN]
L06441E:
	jsr L064534.w		; Jump to subroutine at L064534.w [Writes: Stack Pointer] [Flow: call]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bpl L06441E.b		; Branch if plus to L06441E.b [Flow: branch]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $B001.w		; Exclusive OR $B001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($F3.b,X)		; Logical OR ($F3.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($56.b,X)		; Logical OR ($56.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $79.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FD.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $5F.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $A9.b,S		; OR accumulator with stack relative $A9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($8D.b,X)		; Logical OR ($8D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora ($AD.b,X)		; Logical OR ($AD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $1F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bne L064447.b		; Branch if not equal to L064447.b [Flow: branch]
	jsr L064448.w		; Jump to subroutine at L064448.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1F00.w		; Store accumulator to $1F00.w [Reads: Accumulator]
L064447:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L064448:
	lda $1E00.w		; Load $1E00.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	cpy $7B.b		; Compare $7B.b with Y register [Reads: Direct Page, Y Index] [Flags: ZCN]
	cpy $BA.b		; Compare $BA.b with Y register [Reads: Direct Page, Y Index] [Flags: ZCN]
	cpy $D6.b		; Compare $D6.b with Y register [Reads: Direct Page, Y Index] [Flags: ZCN]
	cpy $00.b		; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: ZCN]
	cmp $33.b		; Compare $33.b with accumulator [Reads: Direct Page, Accumulator] [Flags: ZCN]
	cmp $EE.b		; Compare $EE.b with accumulator [Reads: Direct Page, Accumulator] [Flags: ZCN]
	ora ($1E.b,X)		; Logical OR ($1E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $1E01.w		; Load $1E01.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$40.b		; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L064468.b		; Branch if not equal to L064468.b [Flow: branch]
	inc $1E00.w		; Increment $1E00.w [Flags: ZN]
L064468:
	lda $1F05.w		; Load $1F05.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$05.b		; Add #$05.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1F05.w		; Store accumulator to $1F05.w [Reads: Accumulator]
	lda $1F04.w		; Load $1F04.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$03.b		; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1F04.w		; Store accumulator to $1F04.w [Reads: Accumulator]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1F02.w		; Load $1F02.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcs L06448E.b		; Branch if carry set to L06448E.b [Flow: branch]
	stz $1F02.w		; Store zero to $1F02.w
	inc $1E00.w		; Increment $1E00.w [Flags: ZN]
	lda #$40.b		; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E01.w		; Store accumulator to $1E01.w [Reads: Accumulator]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L06448E:
	sbc #$02.b		; Subtract #$02.b from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	sta $1F02.w		; Store accumulator to $1F02.w [Reads: Accumulator]
	lda $1F05.w		; Load $1F05.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$05.b		; Add #$05.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1F05.w		; Store accumulator to $1F05.w [Reads: Accumulator]
	lda $1F04.w		; Load $1F04.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$03.b		; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1F04.w		; Store accumulator to $1F04.w [Reads: Accumulator]
	lda $1F02.w		; Load $1F02.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$E1.b		; Compare #$E1.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcs L0644B0.b		; Branch if carry set to L0644B0.b [Flow: branch]
	ldx #$04.b		; Load #$04.b into X register [Writes: X Index] [Flags: ZN]
	stx $11.b		; Store X register to $11.b [Reads: X Index]
L0644B0:
	cmp #$71.b		; Compare #$71.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L0644B9.b		; Branch if not equal to L0644B9.b [Flow: branch]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; Store accumulator to $012C.w [Reads: Accumulator]
L0644B9:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $1E01.w		; [PATTERN: Memory countdown loop] Decrement $1E01.w [Flags: ZN]
	bne L0644C3.b		; Branch if not equal to L0644C3.b [Flow: branch]
	inc $1E00.w		; Increment $1E00.w [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L0644C3:
	lda $1F05.w		; Load $1F05.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$05.b		; Add #$05.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1F05.w		; Store accumulator to $1F05.w [Reads: Accumulator]
	lda $1F04.w		; Load $1F04.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$03.b		; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1F04.w		; Store accumulator to $1F04.w [Reads: Accumulator]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1F05.w		; Load $1F05.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$FA.b		; Compare #$FA.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcc L0644ED.b		; Branch if carry clear to L0644ED.b [Flow: branch]
	lda $1F04.w		; Load $1F04.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$FC.b		; Compare #$FC.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcc L0644ED.b		; Branch if carry clear to L0644ED.b [Flow: branch]
	inc $1E00.w		; Increment $1E00.w [Flags: ZN]
	lda #$20.b		; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E01.w		; Store accumulator to $1E01.w [Reads: Accumulator]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L0644ED:
	lda $1F05.w		; Load $1F05.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$05.b		; Add #$05.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1F05.w		; Store accumulator to $1F05.w [Reads: Accumulator]
	lda $1F04.w		; Load $1F04.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$03.b		; [PATTERN: Memory clearing operation] Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1F04.w		; Store accumulator to $1F04.w [Reads: Accumulator]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $1F05.w		; Store zero to $1F05.w
	stz $1F04.w		; Store zero to $1F04.w
	dec $1E01.w		; [PATTERN: Memory countdown loop] Decrement $1E01.w [Flags: ZN]
	bne L064532.b		; Branch if not equal to L064532.b [Flow: branch]
	inc $1E00.w		; Increment $1E00.w [Flags: ZN]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E15.w		; Store accumulator to $1E15.w [Reads: Accumulator]
	lda #$03.b		; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E1D.w		; Store accumulator to $1E1D.w [Reads: Accumulator]
	lda #$10.b		; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1C.b		; Store accumulator to $1C.b [Reads: Accumulator]
	lda #$05.b		; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1D.b		; Store accumulator to $1D.b [Reads: Accumulator]
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $99.b		; Store accumulator to $99.b [Reads: Accumulator]
	lda #$31.b		; Load #$31.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9A.b		; Store accumulator to $9A.b [Reads: Accumulator]
	stz $B0.b		; Store zero to $B0.b
	inc $15.b		; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	lda #$03.b		; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
L06452E:
	sta $14.b		; Store accumulator to $14.b [Reads: Accumulator]
	inc $11.b		; Increment $11.b [Reads: Direct Page] [Flags: ZN]
L064532:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L064534:
	lda $1E10.w,X		; Load $1E10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0A		; Invalid branch target (beq L064543) ; Branch if equal to $F0, $0A [Flow: branch]
	jsl $008781.l		; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	eor $C5.b,S		; Exclusive OR accumulator with stack relative $C5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	mvp $5B,$C5		; Move block positive $5B,$C5 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cmp $60.b		; Compare $60.b with accumulator [Reads: Direct Page, Accumulator] [Flags: ZCN]
	lda $1E18.w,X		; Load $1E18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	ror $4FC5.w,X		; Rotate right $4FC5.w,X [Reads: X Index] [Flags: ZCN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $50, $C8		; Invalid branch target (bvc L064519) ; Branch if overflow clear to $50, $C8 [Flow: branch]
	sep #$C8		; Set processor status bits #$C8 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	wai		; Wait for interrupt
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	wai		; Wait for interrupt
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	wai		; Wait for interrupt
	ora $BDCD.w,Y		; OR accumulator with memory $BDCD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	asl $8122.w,X		; Arithmetic shift left $8122.w,X [Reads: X Index] [Flags: ZCN]
	sta [$00.b]		; Store accumulator (long) [$00.b] [Reads: Direct Page, Accumulator]
	lda ($C5.b),Y		; Load accumulator ($C5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $C864C8.l		; Exclusive OR accumulator with memory (long) $C864C8.l [Writes: Accumulator] [Flags: ZN]
	ora $13C9.w		; Logical OR $13C9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpy $CC13.w		; Compare $CC13.w with Y register [Reads: Y Index] [Flags: ZCN]
	ora ($CC.b,S),Y		; OR accumulator (stack relative indirect indexed) ($CC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $DACD.w,X		; Rotate left $DACD.w,X [Reads: X Index] [Flags: ZCN]
	sbc $E6005F.l,X		; Subtract with carry (long,X) $E6005F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $C8.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BD.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8A00C8.l,X		; Subtract with carry (long,X) $8A00C8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $C572.w,Y		; Load $C572.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1E30.w,X		; Store accumulator to $1E30.w,X [Reads: Accumulator, X Index]
	lda $C573.w,Y		; Load $C573.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1E38.w,X		; Store accumulator to $1E38.w,X [Reads: Accumulator, X Index]
	lda $C578.w,Y		; Load $C578.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1E48.w,X		; Store accumulator to $1E48.w,X [Reads: Accumulator, X Index]
	lda $C579.w,Y		; Load $C579.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1E50.w,X		; Store accumulator to $1E50.w,X [Reads: Accumulator, X Index]
	lda $C5CA.w,X		; Load $C5CA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $1E58.w,X		; Add $1E58.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $1E58.w,X		; Store accumulator to $1E58.w,X [Reads: Accumulator, X Index]
	lda $C5CD.w,X		; Load $C5CD.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $1E60.w,X		; Add $1E60.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $1E60.w,X		; Store accumulator to $1E60.w,X [Reads: Accumulator, X Index]
	inc $1E10.w,X		; Increment memory $1E10.w,X [Reads: X Index] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr L06470F.w		; Jump to subroutine at L06470F.w [Writes: Stack Pointer] [Flow: call]
	jsr L0649F1.w		; Jump to subroutine at L0649F1.w [Writes: Stack Pointer] [Flow: call]
	lda $1E00.w		; Load $1E00.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	dec $C5.b,X		; Decrement memory $C5.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	dec $C5.b,X		; Decrement memory $C5.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	dec $C5.b,X		; Decrement memory $C5.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	dec $C5.b,X		; Decrement memory $C5.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	dec $C5.b,X		; Decrement memory $C5.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dec $01.b		; Decrement $01.b [Reads: Direct Page] [Flags: ZN]
	brk $FF.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $4BFF01.l,X		; Subtract with carry (long,X) $4BFF01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	eor $305875.l,X		; Exclusive OR accumulator with memory (long,X) $305875.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cli		; Clear interupt ; Clear interrupt disable flag [Flags: I]
	lda $1E0A.w		; Load $1E0A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$1F.b		; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bne L0645F1.b		; Branch if not equal to L0645F1.b [Flow: branch]
	lda $C5CA.w,X		; Load $C5CA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $1E58.w,X		; Add $1E58.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $1E58.w,X		; Store accumulator to $1E58.w,X [Reads: Accumulator, X Index]
	lda $C5CD.w,X		; Load $C5CD.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $1E60.w,X		; Add $1E60.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $1E60.w,X		; Store accumulator to $1E60.w,X [Reads: Accumulator, X Index]
L0645F1:
	lda $C5D0.w,X		; Load $C5D0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $1E30.w,X		; Compare accumulator $1E30.w,X [Reads: X Index] [Flags: ZCN]
	bne L0645FC.b		; Branch if not equal to L0645FC.b [Flow: branch]
	stz $1E58.w,X		; [PATTERN: Memory clearing operation] Store zero to $1E58.w,X [Reads: X Index]
L0645FC:
	lda $C5D3.w,X		; Load $C5D3.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $1E48.w,X		; Compare accumulator $1E48.w,X [Reads: X Index] [Flags: ZCN]
	bne L064607.b		; Branch if not equal to L064607.b [Flow: branch]
	stz $1E60.w,X		; Store zero to $1E60.w,X [Reads: X Index]
L064607:
	rts		; [PATTERN: Memory clearing operation] Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $1E58.w,X		; Store zero to $1E58.w,X [Reads: X Index]
	stz $1E60.w,X		; Store zero to $1E60.w,X [Reads: X Index]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $1B		; Invalid branch target (bra L064630) ; Branch always to $80, $1B [Flow: branch]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L064619.b		; Branch if plus to L064619.b [Flow: branch]
L064619:
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brl L064639.w		; Branch always long to L064639.w [Flow: branch]
	cop $20.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bmi L064629.b		; Branch if minus to L064629.b [Flow: branch]
L064629:
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $1B.b		; Store X register to $1B.b [Reads: X Index]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L064633.b		; Branch if plus to L064633.b [Flow: branch]
L064633:
	ldy #$1B.b		; Load #$1B.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L064639.b		; Branch if plus to L064639.b [Flow: branch]
L064639:
	bpl L06463B.b		; Branch if plus to L06463B.b [Flow: branch]
L06463B:
	ldx #$1B.b		; Load #$1B.b into X register [Writes: X Index] [Flags: ZN]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $1000.w		; Jump to subroutine at $1000.w [Writes: Stack Pointer] [Flow: call]
	brk $A4.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bmi L064649.b		; Branch if minus to L064649.b [Flow: branch]
L064649:
	bpl L06464B.b		; Branch if plus to L06464B.b [Flow: branch]
L06464B:
	ldx $1B.b		; Load $1B.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $8800.w		; Jump to subroutine at $8800.w [Writes: Stack Pointer] [Flow: call]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L064659.b		; Branch if plus to L064659.b [Flow: branch]
L064659:
	jsr L060A00.w		; Jump to subroutine at L060A00.w [Writes: Stack Pointer] [Flow: call]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2000.w		; Jump to subroutine at $2000.w [Writes: Stack Pointer] [Flow: call]
	brk $8C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bmi L064669.b		; Branch if minus to L064669.b [Flow: branch]
L064669:
	jsr L060E00.w		; Jump to subroutine at L060E00.w [Writes: Stack Pointer] [Flow: call]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bmi L064673.b		; Branch if minus to L064673.b [Flow: branch]
L064673:
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L064679.b		; Branch if plus to L064679.b [Flow: branch]
L064679:
	bmi L06467B.b		; Branch if minus to L06467B.b [Flow: branch]
L06467B:
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $3000.w		; Jump to subroutine at $3000.w [Writes: Stack Pointer] [Flow: call]
	brk $AC.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bmi L064689.b		; Branch if minus to L064689.b [Flow: branch]
L064689:
	bmi L06468B.b		; Branch if minus to L06468B.b [Flow: branch]
L06468B:
	ldx $001B.w		; Load $001B.w into X register [Writes: X Index] [Flags: ZN]
	cop $30.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0000.w		; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	brk $82.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L0646A1.b		; Branch if plus to L0646A1.b [Flow: branch]
L0646A1:
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $5B.b		; Store Y register to $5B.b [Reads: Y Index]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $5B.b		; Store X register to $5B.b [Reads: X Index]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bmi L0646B1.b		; Branch if minus to L0646B1.b [Flow: branch]
L0646B1:
	bpl L0646B3.b		; Branch if plus to L0646B3.b [Flow: branch]
L0646B3:
	ldy #$5B.b		; Load #$5B.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $1000.w		; Jump to subroutine at $1000.w [Writes: Stack Pointer] [Flow: call]
	brk $A2.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L0646C1.b		; Branch if plus to L0646C1.b [Flow: branch]
L0646C1:
	bpl L0646C3.b		; Branch if plus to L0646C3.b [Flow: branch]
L0646C3:
	ldy $5B.b		; Load $5B.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L0646CB.b		; Branch if plus to L0646CB.b [Flow: branch]
L0646CB:
	ldx $5B.b		; Load $5B.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bmi L0646D1.b		; Branch if minus to L0646D1.b [Flow: branch]
L0646D1:
	jsr $8800.w		; Jump to subroutine at $8800.w [Writes: Stack Pointer] [Flow: call]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2000.w		; Jump to subroutine at $2000.w [Writes: Stack Pointer] [Flow: call]
	brk $8A.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L0646E1.b		; Branch if plus to L0646E1.b [Flow: branch]
L0646E1:
	jsr $8C00.w		; Jump to subroutine at $8C00.w [Writes: Stack Pointer] [Flow: call]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr L060E00.w		; Jump to subroutine at L060E00.w [Writes: Stack Pointer] [Flow: call]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bmi L0646F1.b		; Branch if minus to L0646F1.b [Flow: branch]
L0646F1:
	bmi L0646F3.b		; Branch if minus to L0646F3.b [Flow: branch]
L0646F3:
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $3000.w		; Jump to subroutine at $3000.w [Writes: Stack Pointer] [Flow: call]
	brk $AA.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L064701.b		; Branch if plus to L064701.b [Flow: branch]
L064701:
	bmi L064703.b		; Branch if minus to L064703.b [Flow: branch]
L064703:
	ldy $005B.w		; Load $005B.w into Y register [Writes: Y Index] [Flags: ZN]
	cop $00.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AE.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L06470F:
	lda #$10.b		; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; Store zero to $07.b
	cpx #$02.b		; Compare #$02.b with X register [Reads: X Index] [Flags: ZCN]
	beq L064723.b		; Branch if equal to L064723.b [Flow: branch]
	lda #$0F.b		; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; Store accumulator to $08.b [Reads: Accumulator]
	lda #$C6.b		; Load #$C6.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $09.b		; Store accumulator to $09.b [Reads: Accumulator]
	bra L06472B.b		; Branch always to L06472B.b [Flow: branch]
L064723:
	lda #$8F.b		; Load #$8F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; Store accumulator to $08.b [Reads: Accumulator]
	lda #$C6.b		; Load #$C6.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $09.b		; Store accumulator to $09.b [Reads: Accumulator]
L06472B:
	jsr L064972.w		; Jump to subroutine at L064972.w [Writes: Stack Pointer] [Flow: call]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $2B		; Invalid branch target (bra L064760) ; Branch always to $80, $2B [Flow: branch]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L064739.b		; Branch if plus to L064739.b [Flow: branch]
L064739:
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brl L064769.w		; Branch always long to L064769.w [Flow: branch]
	cop $20.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bmi L064749.b		; Branch if minus to L064749.b [Flow: branch]
L064749:
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $2B.b		; Store X register to $2B.b [Reads: X Index]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L064753.b		; Branch if plus to L064753.b [Flow: branch]
L064753:
	ldy #$2B.b		; Load #$2B.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L064759.b		; Branch if plus to L064759.b [Flow: branch]
L064759:
	bpl L06475B.b		; Branch if plus to L06475B.b [Flow: branch]
L06475B:
	ldx #$2B.b		; Load #$2B.b into X register [Writes: X Index] [Flags: ZN]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $1000.w		; Jump to subroutine at $1000.w [Writes: Stack Pointer] [Flow: call]
	brk $A4.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bmi L064769.b		; Branch if minus to L064769.b [Flow: branch]
L064769:
	bpl L06476B.b		; Branch if plus to L06476B.b [Flow: branch]
L06476B:
	ldx $2B.b		; Load $2B.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $8800.w		; Jump to subroutine at $8800.w [Writes: Stack Pointer] [Flow: call]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L064779.b		; Branch if plus to L064779.b [Flow: branch]
L064779:
	jsr L060A00.w		; Jump to subroutine at L060A00.w [Writes: Stack Pointer] [Flow: call]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2000.w		; Jump to subroutine at $2000.w [Writes: Stack Pointer] [Flow: call]
	brk $8C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bmi L064789.b		; Branch if minus to L064789.b [Flow: branch]
L064789:
	jsr L060E00.w		; Jump to subroutine at L060E00.w [Writes: Stack Pointer] [Flow: call]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bmi L064793.b		; Branch if minus to L064793.b [Flow: branch]
L064793:
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L064799.b		; Branch if plus to L064799.b [Flow: branch]
L064799:
	bmi L06479B.b		; Branch if minus to L06479B.b [Flow: branch]
L06479B:
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $3000.w		; Jump to subroutine at $3000.w [Writes: Stack Pointer] [Flow: call]
	brk $AC.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bmi L0647A9.b		; Branch if minus to L0647A9.b [Flow: branch]
L0647A9:
	bmi L0647AB.b		; Branch if minus to L0647AB.b [Flow: branch]
L0647AB:
	ldx $002B.w		; Load $002B.w into X register [Writes: X Index] [Flags: ZN]
	cop $30.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0000.w		; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	brk $82.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L0647C1.b		; Branch if plus to L0647C1.b [Flow: branch]
L0647C1:
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $6B.b		; Store Y register to $6B.b [Reads: Y Index]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $6B.b		; Store X register to $6B.b [Reads: X Index]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bmi L0647D1.b		; Branch if minus to L0647D1.b [Flow: branch]
L0647D1:
	bpl L0647D3.b		; Branch if plus to L0647D3.b [Flow: branch]
L0647D3:
	ldy #$6B.b		; Load #$6B.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $1000.w		; Jump to subroutine at $1000.w [Writes: Stack Pointer] [Flow: call]
	brk $A2.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L0647E1.b		; Branch if plus to L0647E1.b [Flow: branch]
L0647E1:
	bpl L0647E3.b		; Branch if plus to L0647E3.b [Flow: branch]
L0647E3:
	ldy $6B.b		; Load $6B.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L0647EB.b		; Branch if plus to L0647EB.b [Flow: branch]
L0647EB:
	ldx $6B.b		; Load $6B.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bmi L0647F1.b		; Branch if minus to L0647F1.b [Flow: branch]
L0647F1:
	jsr $8800.w		; Jump to subroutine at $8800.w [Writes: Stack Pointer] [Flow: call]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2000.w		; Jump to subroutine at $2000.w [Writes: Stack Pointer] [Flow: call]
	brk $8A.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L064801.b		; Branch if plus to L064801.b [Flow: branch]
L064801:
	jsr $8C00.w		; Jump to subroutine at $8C00.w [Writes: Stack Pointer] [Flow: call]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr L060E00.w		; Jump to subroutine at L060E00.w [Writes: Stack Pointer] [Flow: call]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bmi L064811.b		; Branch if minus to L064811.b [Flow: branch]
L064811:
	bmi L064813.b		; Branch if minus to L064813.b [Flow: branch]
L064813:
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $3000.w		; Jump to subroutine at $3000.w [Writes: Stack Pointer] [Flow: call]
	brk $AA.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L064821.b		; Branch if plus to L064821.b [Flow: branch]
L064821:
	bmi L064823.b		; Branch if minus to L064823.b [Flow: branch]
L064823:
	ldy $006B.w		; Load $006B.w into Y register [Writes: Y Index] [Flags: ZN]
	cop $00.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AE.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L06482F:
	lda #$10.b		; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; Store zero to $07.b
	cpx #$02.b		; Compare #$02.b with X register [Reads: X Index] [Flags: ZCN]
	beq L064843.b		; Branch if equal to L064843.b [Flow: branch]
	lda #$2F.b		; Load #$2F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; Store accumulator to $08.b [Reads: Accumulator]
	lda #$C7.b		; Load #$C7.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $09.b		; Store accumulator to $09.b [Reads: Accumulator]
	bra L06484B.b		; Branch always to L06484B.b [Flow: branch]
L064843:
	lda #$AF.b		; Load #$AF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; Store accumulator to $08.b [Reads: Accumulator]
	lda #$C7.b		; Load #$C7.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $09.b		; Store accumulator to $09.b [Reads: Accumulator]
L06484B:
	jsr L064972.w		; Jump to subroutine at L064972.w [Writes: Stack Pointer] [Flow: call]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$4C.b		; Load #$4C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E30.w,X		; [PATTERN: Memory clearing operation] Store accumulator to $1E30.w,X [Reads: Accumulator, X Index]
	stz $1E38.w,X		; Store zero to $1E38.w,X [Reads: X Index]
	lda #$B8.b		; Load #$B8.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E48.w,X		; Store accumulator to $1E48.w,X [Reads: Accumulator, X Index]
	stz $1E50.w,X		; Store zero to $1E50.w,X [Reads: X Index]
	inc $1E10.w,X		; Increment memory $1E10.w,X [Reads: X Index] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr L0648D0.w		; Jump to subroutine at L0648D0.w [Writes: Stack Pointer] [Flow: call]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $41.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L06487A.b		; Branch if plus to L06487A.b [Flow: branch]
L06487A:
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $0A		; opcode wdm $0A ; Reserved instruction
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $68.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0000.w		; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	brk $41.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $42.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bmi L06489A.b		; Branch if minus to L06489A.b [Flow: branch]
L06489A:
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0A.b,S		; Exclusive OR accumulator with stack relative $0A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; Set carry ; Set carry flag [Flags: C]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $44.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $50.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $51.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bvc L0648BA.b		; Branch if overflow clear to L0648BA.b [Flow: branch]
L0648BA:
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($0A.b)		; Exclusive OR accumulator with memory (indirect) ($0A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cli		; Clear interupt ; Clear interrupt disable flag [Flags: I]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L0648C3:
	brk $53.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $54.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L0648CD:
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L0648D0:
	lda #$0D.b		; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; Store zero to $07.b
	lda #$68.b		; Load #$68.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; Store accumulator to $08.b [Reads: Accumulator]
	lda #$C8.b		; Load #$C8.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $09.b		; Store accumulator to $09.b [Reads: Accumulator]
	jsr L064972.w		; Jump to subroutine at L064972.w [Writes: Stack Pointer] [Flow: call]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1E0A.w		; Load $1E0A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	and #$03.b		; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $C8FD.w,Y		; Load $C8FD.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1E30.w,X		; Store accumulator to $1E30.w,X [Reads: Accumulator, X Index]
	lda $C901.w,Y		; Load $C901.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1E48.w,X		; Store accumulator to $1E48.w,X [Reads: Accumulator, X Index]
	inc $1E10.w,X		; Increment memory $1E10.w,X [Reads: X Index] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.INDEX 16
	rep #$98
	adc $547C34.l		; Add with carry (long) $547C34.l [Writes: Accumulator] [Flags: VCNZ]
	jmp ($0057.w,X)		; Jump indirect indexed to ($0057.w,X) [Reads: X Index] [Flow: jump]
	ora ($02.b,X)		; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $02.b,S		; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b,X)		; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $C95620.l,X		; Subtract with carry (long,X) $C95620.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	lda $1E0A.w		; Load $1E0A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	and #$07.b		; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $C905.w,Y		; Load $C905.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1E20.w,X		; Store accumulator to $1E20.w,X [Reads: Accumulator, X Index]
	lda $1E0A.w		; Load $1E0A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	and #$03.b		; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $C8FD.w,Y		; Load $C8FD.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1E30.w,X		; Store accumulator to $1E30.w,X [Reads: Accumulator, X Index]
	lda $C901.w,Y		; Load $C901.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1E48.w,X		; Store accumulator to $1E48.w,X [Reads: Accumulator, X Index]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $34		; Invalid branch target (bra L064970) ; Branch always to $80, $34 [Flow: branch]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda [$34.b],Y		; Load accumulator (long indexed) [$34.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($FDFF.w,X)		; Jump to subroutine indirect indexed ($FDFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $003864.l,X		; Subtract with carry (long,X) $003864.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	cop $FC.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $62FFFD.l,X		; Subtract with carry (long,X) $62FFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	bit $00.b,X		; Test bits $00.b,X [Reads: Direct Page, X Index] [Flags: VNZ] [Flow: branch]
	cop $A9.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($85.b,X)		; Logical OR ($85.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $64.b		; Arithmetic shift left $64.b [Reads: Direct Page] [Flags: ZCN]
	ora [$BD.b]		; OR accumulator with memory (long) [$BD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $301E.w		; Jump to subroutine at $301E.w [Writes: Stack Pointer] [Flow: call]
	bpl L06496C.b		; Branch if plus to L06496C.b [Flow: branch]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	adc #$36.b		; Add #$36.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $08.b		; Store accumulator to $08.b [Reads: Accumulator]
	lda #$C9.b		; Load #$C9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
L06496C:
	sta $09.b		; Store accumulator to $09.b [Reads: Accumulator]
	jsr L064972.w		; Jump to subroutine at L064972.w [Writes: Stack Pointer] [Flow: call]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L064972:
	lda $1E30.w,X		; Load $1E30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	lda $1E38.w,X		; Load $1E38.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; Store accumulator to $01.b [Reads: Accumulator]
	lda $1E48.w,X		; Load $1E48.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; [PATTERN: Memory clearing operation] Store accumulator to $02.b [Reads: Accumulator]
	lda $1E50.w,X		; Load $1E50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; Store accumulator to $03.b [Reads: Accumulator]
	stz $04.b		; Store zero to $04.b
	stz $05.b		; Store zero to $05.b
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
.ACCU 16
.INDEX 16
	rep #$30
	ldy #$0000.w		; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $1E08.w		; Load $1E08.w into X register [Writes: X Index] [Flags: ZN]
	lda $06.b		; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	adc $1E08.w		; Add $1E08.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1E08.w		; Store accumulator to $1E08.w [Reads: Accumulator]
L06499D:
	lda ($08.b),Y		; Load accumulator ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $00.b		; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sta $0000.w,X		; Store accumulator to $0000.w,X [Reads: Accumulator, X Index]
	and #$0100.w		; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; Store accumulator to $0C.b [Reads: Accumulator]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($08.b),Y		; Load accumulator ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $02.b		; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sta $0001.w,X		; Store accumulator to $0001.w,X [Reads: Accumulator, X Index]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$0010.w		; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	cmp #$0100.w		; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcc L0649C3.b		; Branch if carry clear to L0649C3.b [Flow: branch]
	lda #$00F0.w		; Load #$00F0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0001.w,X		; Store accumulator to $0001.w,X [Reads: Accumulator, X Index]
L0649C3:
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($08.b),Y		; Load accumulator ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $04.b		; Exclusive OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0002.w,X		; Store accumulator to $0002.w,X [Reads: Accumulator, X Index]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; Set carry ; Set carry flag [Flags: C]
	sbc #$0800.w		; Subtract #$0800.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 8
	sep #$20
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($08.b),Y		; Load accumulator ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0D.b		; Logical OR $0D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0A20.w,X		; Store accumulator to $0A20.w,X [Reads: Accumulator, X Index]
	plx		; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
.ACCU 16
	rep #$20
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $06.b		; [PATTERN: Memory countdown loop] Decrement $06.b [Reads: Direct Page] [Flags: ZN]
	bne L06499D.b		; Branch if not equal to L06499D.b [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30
	plx		; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L0649F1:
	lda $1E58.w,X		; Load $1E58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	beq L064A1E.b		; Branch if equal to L064A1E.b [Flow: branch]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $1E28.w,X		; Add $1E28.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $1E28.w,X		; Store accumulator to $1E28.w,X [Reads: Accumulator, X Index]
	lda $1E58.w,X		; Load $1E58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ldy #$00.b		; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	bpl L064A11.b		; Branch if plus to L064A11.b [Flow: branch]
	ora #$F0.b		; Logical OR #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
L064A11:
	adc $1E30.w,X		; Add $1E30.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $1E30.w,X		; Store accumulator to $1E30.w,X [Reads: Accumulator, X Index]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $1E38.w,X		; Add $1E38.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $1E38.w,X		; Store accumulator to $1E38.w,X [Reads: Accumulator, X Index]
L064A1E:
	lda $1E60.w,X		; Load $1E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	beq L064A4B.b		; Branch if equal to L064A4B.b [Flow: branch]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $1E40.w,X		; Add $1E40.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $1E40.w,X		; Store accumulator to $1E40.w,X [Reads: Accumulator, X Index]
	lda $1E60.w,X		; Load $1E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ldy #$00.b		; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	bpl L064A3E.b		; Branch if plus to L064A3E.b [Flow: branch]
	ora #$F0.b		; Logical OR #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
L064A3E:
	adc $1E48.w,X		; Add $1E48.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $1E48.w,X		; Store accumulator to $1E48.w,X [Reads: Accumulator, X Index]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $1E50.w,X		; Add $1E50.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $1E50.w,X		; Store accumulator to $1E50.w,X [Reads: Accumulator, X Index]
L064A4B:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L064A4C:
	lda $1E02.w		; Load $1E02.w into accumulator [Writes: Accumulator] [Flags: ZN]
	beq L064A53.b		; Branch if equal to L064A53.b [Flow: branch]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
L064A53:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$08.b		; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AA4.w		; Store accumulator to $0AA4.w [Reads: Accumulator]
	jsl $00E384.l		; Jump to subroutine long $00E384.l [Writes: Stack Pointer] [Flow: call]
	jsr L06436F.w		; Jump to subroutine at L06436F.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E10.w		; Store accumulator to $1E10.w [Reads: Accumulator]
	sta $1E11.w		; Store accumulator to $1E11.w [Reads: Accumulator]
	sta $1E12.w		; Store accumulator to $1E12.w [Reads: Accumulator]
	lda #$04.b		; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E18.w		; Store accumulator to $1E18.w [Reads: Accumulator]
	lda #$05.b		; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E19.w		; Store accumulator to $1E19.w [Reads: Accumulator]
	lda #$06.b		; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E1A.w		; Store accumulator to $1E1A.w [Reads: Accumulator]
	lda #$0F.b		; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $13.b		; Store accumulator to $13.b [Reads: Accumulator]
	inc $11.b		; Increment $11.b [Reads: Direct Page] [Flags: ZN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$08.b		; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AA4.w		; Store accumulator to $0AA4.w [Reads: Accumulator]
	jsl $00E384.l		; Jump to subroutine long $00E384.l [Writes: Stack Pointer] [Flow: call]
	jsr L06436F.w		; Jump to subroutine at L06436F.w [Writes: Stack Pointer] [Flow: call]
	stz $1F02.w		; Store zero to $1F02.w
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E10.w		; Store accumulator to $1E10.w [Reads: Accumulator]
	sta $1E11.w		; Store accumulator to $1E11.w [Reads: Accumulator]
	sta $1E12.w		; Store accumulator to $1E12.w [Reads: Accumulator]
	lda #$07.b		; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E18.w		; Store accumulator to $1E18.w [Reads: Accumulator]
	lda #$07.b		; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E19.w		; Store accumulator to $1E19.w [Reads: Accumulator]
	lda #$07.b		; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E1A.w		; Store accumulator to $1E1A.w [Reads: Accumulator]
	lda #$0F.b		; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $13.b		; Store accumulator to $13.b [Reads: Accumulator]
	inc $11.b		; Increment $11.b [Reads: Direct Page] [Flags: ZN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr L064ABC.w		; Jump to subroutine at L064ABC.w [Writes: Stack Pointer] [Flow: call]
	jsr L064412.w		; Jump to subroutine at L064412.w [Writes: Stack Pointer] [Flow: call]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L064ABC:
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012A.w		; Store accumulator to $012A.w [Reads: Accumulator]
	sta $1E02.w		; Store accumulator to $1E02.w [Reads: Accumulator]
	lda $1F00.w		; Load $1F00.w into accumulator [Writes: Accumulator] [Flags: ZN]
	bne L064AD7.b		; Branch if not equal to L064AD7.b [Flow: branch]
	jsr L064AD8.w		; Jump to subroutine at L064AD8.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1F00.w		; Store accumulator to $1F00.w [Reads: Accumulator]
	stz $1E02.w		; Store zero to $1E02.w
	inc $1E0A.w		; Increment $1E0A.w [Flags: ZN]
L064AD7:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L064AD8:
	lda $1E00.w		; Load $1E00.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	sbc #$CA.b		; Subtract #$CA.b from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	inc $1FCA.w,X		; Increment memory $1FCA.w,X [Reads: X Index] [Flags: ZN]
	wai		; Wait for interrupt
	sty $CB.b		; Store Y register to $CB.b [Reads: Y Index]
	lda ($CB.b,X)		; Load accumulator ($CB.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	lda $1F02.w		; Load $1F02.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; Set carry ; Set carry flag [Flags: C]
	sbc #$02.b		; Subtract #$02.b from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	sta $1F02.w		; Store accumulator to $1F02.w [Reads: Accumulator]
	cmp #$02.b		; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcs L064AFE.b		; Branch if carry set to L064AFE.b [Flow: branch]
	stz $1F02.w		; Store zero to $1F02.w
	inc $1E00.w		; Increment $1E00.w [Flags: ZN]
	inc $B0.b		; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
L064AFE:
	lda $B0.b		; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0A.b		; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcc L064B0C.b		; Branch if carry clear to L064B0C.b [Flow: branch]
	inc $1E00.w		; Increment $1E00.w [Flags: ZN]
	lda #$05.b		; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E61.w		; Store accumulator to $1E61.w [Reads: Accumulator]
L064B0C:
	lda $1F05.w		; Load $1F05.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$02.b		; Add #$02.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1F05.w		; Store accumulator to $1F05.w [Reads: Accumulator]
	lda $1F04.w		; Load $1F04.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$01.b		; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1F04.w		; Store accumulator to $1F04.w [Reads: Accumulator]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$C0.b		; Load #$C0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E0C.w		; Store accumulator to $1E0C.w [Reads: Accumulator]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E0D.w		; Store accumulator to $1E0D.w [Reads: Accumulator]
	lda $1F02.w		; Load $1F02.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$80.b		; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcs L064B37.b		; Branch if carry set to L064B37.b [Flow: branch]
	adc #$01.b		; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1F02.w		; Store accumulator to $1F02.w [Reads: Accumulator]
	bra L064B71.b		; Branch always to L064B71.b [Flow: branch]
L064B37:
	lda $1F05.w		; Load $1F05.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; Set carry ; Set carry flag [Flags: C]
	sbc #$0A.b		; Subtract #$0A.b from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	and #$7F.b		; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$5C.b		; Compare #$5C.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcc L064B71.b		; Branch if carry clear to L064B71.b [Flow: branch]
	lda $1F04.w		; Load $1F04.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; Set carry ; Set carry flag [Flags: C]
	sbc #$0B.b		; [PATTERN: Memory clearing operation] Subtract #$0B.b from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	cmp #$DC.b		; Compare #$DC.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcc L064B71.b		; Branch if carry clear to L064B71.b [Flow: branch]
	stz $1F04.w		; Store zero to $1F04.w
	stz $1F05.w		; Store zero to $1F05.w
	inc $B0.b		; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $1E00.w		; Increment $1E00.w [Flags: ZN]
	lda #$2C.b		; Load #$2C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; Store accumulator to $012E.w [Reads: Accumulator]
	lda #$FF.b		; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC6AE.l		; Store accumulator (long) $7EC6AE.l [Reads: Accumulator]
	lda #$7F.b		; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC6AF.l		; Store accumulator (long) $7EC6AF.l [Reads: Accumulator]
	inc $15.b		; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	lda #$06.b		; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E01.w		; Store accumulator to $1E01.w [Reads: Accumulator]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L064B71:
	lda $1F05.w		; Load $1F05.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$05.b		; Add #$05.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1F05.w		; Store accumulator to $1F05.w [Reads: Accumulator]
	lda $1F04.w		; Load $1F04.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$03.b		; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1F04.w		; Store accumulator to $1F04.w [Reads: Accumulator]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $1E01.w		; Decrement $1E01.w [Flags: ZN]
	lda $1E01.w		; Load $1E01.w into accumulator [Writes: Accumulator] [Flags: ZN]
	bne L064BA1.b		; Branch if not equal to L064BA1.b [Flow: branch]
	lda $0CC433.l		; Load long $0CC433.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC6AE.l		; Store accumulator (long) $7EC6AE.l [Reads: Accumulator]
	lda $0CC434.l		; Load long $0CC434.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC6AF.l		; Store accumulator (long) $7EC6AF.l [Reads: Accumulator]
	inc $15.b		; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	inc $1E00.w		; Increment $1E00.w [Flags: ZN]
L064BA1:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	inc $1E0A.w		; Increment $1E0A.w [Flags: ZN]
	jsr L064BB0.w		; Jump to subroutine at L064BB0.w [Writes: Stack Pointer] [Flow: call]
	jsr L064412.w		; Jump to subroutine at L064412.w [Writes: Stack Pointer] [Flow: call]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L064BB0:
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012A.w		; Store accumulator to $012A.w [Reads: Accumulator]
	lda $1F00.w		; Load $1F00.w into accumulator [Writes: Accumulator] [Flags: ZN]
	bne L064BC2.b		; Branch if not equal to L064BC2.b [Flow: branch]
	jsr L064BC3.w		; Jump to subroutine at L064BC3.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1F00.w		; Store accumulator to $1F00.w [Reads: Accumulator]
L064BC2:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L064BC3:
	lda $1F05.w		; Load $1F05.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$03.b		; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1F05.w		; Store accumulator to $1F05.w [Reads: Accumulator]
	lda $1F04.w		; Load $1F04.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$01.b		; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1F04.w		; Store accumulator to $1F04.w [Reads: Accumulator]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lsr $5F00.w		; Logical shift right $5F00.w [Flags: ZCN]
	brk $72.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $FC.b		; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	tsb $8A.b		; Test and set bits $8A.b [Reads: Accumulator] [Flags: Z]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $CBD6.w,Y		; Load $CBD6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1E30.w,X		; Store accumulator to $1E30.w,X [Reads: Accumulator, X Index]
	lda $CBD7.w,Y		; Load $CBD7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1E38.w,X		; Store accumulator to $1E38.w,X [Reads: Accumulator, X Index]
L064BF7:
	lda $CBDC.w,Y		; Load $CBDC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1E48.w,X		; Store accumulator to $1E48.w,X [Reads: Accumulator, X Index]
	lda $CBDD.w,Y		; Load $CBDD.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1E50.w,X		; Store accumulator to $1E50.w,X [Reads: Accumulator, X Index]
	lda $CBE2.w,X		; Load $CBE2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1E58.w,X		; Store accumulator to $1E58.w,X [Reads: Accumulator, X Index]
	lda $CBE5.w,X		; Load $CBE5.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1E60.w,X		; Store accumulator to $1E60.w,X [Reads: Accumulator, X Index]
	inc $1E10.w,X		; Increment memory $1E10.w,X [Reads: X Index] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr L06482F.w		; Jump to subroutine at L06482F.w [Writes: Stack Pointer] [Flow: call]
	jsr L064A4C.w		; Jump to subroutine at L064A4C.w [Writes: Stack Pointer] [Flow: call]
	jsr L0649F1.w		; Jump to subroutine at L0649F1.w [Writes: Stack Pointer] [Flow: call]
L064C1C:
	lda $1E00.w		; Load $1E00.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	and ($CC.b,S),Y		; AND accumulator (stack relative indirect indexed) ($CC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr $CC.b,X		; Logical shift right $CC.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpy $CC8F.w		; Compare $CC8F.w with Y register [Reads: Y Index] [Flags: ZCN]
	sta $00FFCC.l		; Store accumulator (long) $00FFCC.l [Reads: Accumulator]
	ora ($FF.b,X)		; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $0AADFF.l,X		; Subtract with carry (long,X) $0AADFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	asl $0729.w,X		; Arithmetic shift left $0729.w,X [Reads: X Index] [Flags: ZCN]
	bne L064C44.b		; Branch if not equal to L064C44.b [Flow: branch]
	lda $CC2D.w,X		; Load $CC2D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $1E58.w,X		; Add $1E58.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $1E58.w,X		; Store accumulator to $1E58.w,X [Reads: Accumulator, X Index]
L064C44:
	lda $1E0A.w		; Load $1E0A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bne L064C55.b		; Branch if not equal to L064C55.b [Flow: branch]
	lda $CC30.w,X		; Load $CC30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $1E60.w,X		; [PATTERN: Memory clearing operation] Add $1E60.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $1E60.w,X		; Store accumulator to $1E60.w,X [Reads: Accumulator, X Index]
L064C55:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $1E58.w,X		; Store zero to $1E58.w,X [Reads: X Index]
	stz $1E60.w,X		; Store zero to $1E60.w,X [Reads: X Index]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $01FFFF.l,X		; Subtract with carry (long,X) $01FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $5F5911.l		; Subtract with carry (long) $5F5911.l [Writes: Accumulator] [Flags: VCNZ]
	adc [$74.b]		; Add with carry (long) [$74.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	stz $AD.b,X		; Store zero to $AD.b,X [Reads: X Index]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl $0329.w,X		; Arithmetic shift left $0329.w,X [Reads: X Index] [Flags: ZCN]
	bne L064C75.b		; Branch if not equal to L064C75.b [Flow: branch]
	jsr L064CB0.w		; Jump to subroutine at L064CB0.w [Writes: Stack Pointer] [Flow: call]
L064C75:
	lda $CC65.w,X		; Load $CC65.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $1E30.w,X		; Compare accumulator $1E30.w,X [Reads: X Index] [Flags: ZCN]
	bne L064C80.b		; Branch if not equal to L064C80.b [Flow: branch]
	stz $1E58.w,X		; [PATTERN: Memory clearing operation] Store zero to $1E58.w,X [Reads: X Index]
L064C80:
	lda $CC68.w,X		; Load $CC68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $1E48.w,X		; Compare accumulator $1E48.w,X [Reads: X Index] [Flags: ZCN]
	bne L064C8B.b		; Branch if not equal to L064C8B.b [Flow: branch]
	stz $1E60.w,X		; Store zero to $1E60.w,X [Reads: X Index]
L064C8B:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($66.b)		; Add with carry (indirect) ($66.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	adc ($AD.b)		; Add with carry (indirect) ($AD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	tsb $0D1E.w		; Test and set bits $0D1E.w [Reads: Accumulator] [Flags: Z]
	ora $D01E.w		; Logical OR $D01E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$BD.b]		; OR accumulator with memory (long) [$BD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sty $9DCC.w		; Store Y register to $9DCC.w [Reads: Y Index]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl $AD60.w,X		; Arithmetic shift left $AD60.w,X [Reads: X Index] [Flags: ZCN]
	tsb $381E.w		; Test and set bits $381E.w [Reads: Accumulator] [Flags: Z]
	sbc #$01.b		; Subtract #$01.b from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	sta $1E0C.w		; Store accumulator to $1E0C.w [Reads: Accumulator]
	lda $1E0D.w		; Load $1E0D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	sta $1E0D.w		; Store accumulator to $1E0D.w [Reads: Accumulator]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L064CB0:
	lda $CC65.w,X		; Load $CC65.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $1E30.w,X		; Compare accumulator $1E30.w,X [Reads: X Index] [Flags: ZCN]
	bcc L064CBD.b		; Branch if carry clear to L064CBD.b [Flow: branch]
	lda $CC60.w,X		; Load $CC60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bra L064CC0.b		; Branch always to L064CC0.b [Flow: branch]
L064CBD:
	lda $CC5D.w,X		; Load $CC5D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
L064CC0:
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $1E58.w,X		; Add $1E58.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $1E58.w,X		; Store accumulator to $1E58.w,X [Reads: Accumulator, X Index]
	cmp $CC63.w		; Compare $CC63.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L064CD2.b		; Branch if not equal to L064CD2.b [Flow: branch]
	lda $CC63.w		; Load $CC63.w into accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bra L064CDB.b		; Branch always to L064CDB.b [Flow: branch]
L064CD2:
	cmp $CC64.w		; Compare $CC64.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L064CDE.b		; Branch if not equal to L064CDE.b [Flow: branch]
	lda $CC64.w		; Load $CC64.w into accumulator [Writes: Accumulator] [Flags: ZN]
	dec A		; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
L064CDB:
	sta $1E58.w,X		; Store accumulator to $1E58.w,X [Reads: Accumulator, X Index]
L064CDE:
	lda $CC68.w,X		; Load $CC68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $1E48.w,X		; Compare accumulator $1E48.w,X [Reads: X Index] [Flags: ZCN]
	bcc L064CEB.b		; Branch if carry clear to L064CEB.b [Flow: branch]
	lda $CC60.w,X		; Load $CC60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bra L064CEE.b		; Branch always to L064CEE.b [Flow: branch]
L064CEB:
	lda $CC5D.w,X		; Load $CC5D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
L064CEE:
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $1E60.w,X		; Add $1E60.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $1E60.w,X		; Store accumulator to $1E60.w,X [Reads: Accumulator, X Index]
	cmp $CC63.w		; Compare $CC63.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L064D00.b		; Branch if not equal to L064D00.b [Flow: branch]
	lda $CC63.w		; Load $CC63.w into accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bra L064D09.b		; Branch always to L064D09.b [Flow: branch]
L064D00:
	cmp $CC64.w		; Compare $CC64.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L064D0C.b		; Branch if not equal to L064D0C.b [Flow: branch]
	lda $CC64.w		; Load $CC64.w into accumulator [Writes: Accumulator] [Flags: ZN]
	dec A		; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
L064D09:
	sta $1E60.w,X		; Store accumulator to $1E60.w,X [Reads: Accumulator, X Index]
L064D0C:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and #$00.b		; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $009700.l,X		; Exclusive OR accumulator with memory (long,X) $009700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bvs L064D15.b		; Branch if overflow set to L064D15.b [Flow: branch]
L064D15:
	jsr $7000.w		; Jump to subroutine at $7000.w [Writes: Stack Pointer] [Flow: call]
	brk $8A.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $CD0D.w,Y		; Load $CD0D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1E30.w,X		; Store accumulator to $1E30.w,X [Reads: Accumulator, X Index]
	lda $CD0E.w,Y		; Load $CD0E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1E38.w,X		; Store accumulator to $1E38.w,X [Reads: Accumulator, X Index]
	lda $CD13.w,Y		; Load $CD13.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1E48.w,X		; Store accumulator to $1E48.w,X [Reads: Accumulator, X Index]
	lda $CD14.w,Y		; Load $CD14.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1E50.w,X		; Store accumulator to $1E50.w,X [Reads: Accumulator, X Index]
	inc $1E10.w,X		; Increment memory $1E10.w,X [Reads: X Index] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $010100.l,X		; Subtract with carry (long,X) $010100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $BD2001.l,X		; Subtract with carry (long,X) $BD2001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	cmp $20.b,S		; Compare accumulator (stack relative) $20.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZCN]
	and $F120C8.l		; AND accumulator with memory (long) $F120C8.l [Writes: Accumulator] [Flags: ZN]
	cmp #$A5.b		; Compare #$A5.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	ora ($C9.b),Y		; OR accumulator with memory ($C9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $D0.b		; Test bits $D0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	ora $1E20BD.l,X		; Logical OR long $1E20BD.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$50.b		; Compare #$50.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L064D6B.b		; Branch if equal to L064D6B.b [Flow: branch]
	inc $1E20.w,X		; Increment memory $1E20.w,X [Reads: X Index] [Flags: ZN]
	lda $CD38.w,X		; Load $CD38.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $1E58.w,X		; Add $1E58.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $1E58.w,X		; Store accumulator to $1E58.w,X [Reads: Accumulator, X Index]
	lda $CD3B.w,X		; Load $CD3B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $1E60.w,X		; Add $1E60.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $1E60.w,X		; Store accumulator to $1E60.w,X [Reads: Accumulator, X Index]
L064D6B:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $1E20.w,X		; Store zero to $1E20.w,X [Reads: X Index]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvn $A8,$00		; Move block negative $A8,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $8F.b		; [PATTERN: Memory clearing operation] Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8A6A4A.l,X		; Subtract with carry (long,X) $8A6A4A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	lda $E464BF.l		; Load long $E464BF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	stz $E5.b		; Store zero to $E5.b
	stz $EA.b		; Store zero to $EA.b
	stz $EB.b		; Store zero to $EB.b
	lda $11.b		; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $00879C.l		; Jump to subroutine long $00879C.l [Writes: Stack Pointer] [Flow: call]
	sta $0CCD.w,X		; Store accumulator to $0CCD.w,X [Reads: Accumulator, X Index]
	sbc ($CD.b)		; Subtract with carry (indirect) ($CD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	tsb $CE53.w		; Test and set bits $CE53.w [Reads: Accumulator] [Flags: Z]
	tsb $CEA5.w		; Test and set bits $CEA5.w [Reads: Accumulator] [Flags: Z]
	tsb $CEB1.w		; Test and set bits $CEB1.w [Reads: Accumulator] [Flags: Z]
	tsb $CEBD.w		; [PATTERN: Memory clearing operation] Test and set bits $CEBD.w [Reads: Accumulator] [Flags: Z]
	tsb $3D22.w		; Test and set bits $3D22.w [Reads: Accumulator] [Flags: Z]
	bit #$00.b		; Test bits #$00.b with accumulator [Reads: Accumulator] [Flags: Z]
	stz $012A.w		; Store zero to $012A.w
	stz $1F0C.w		; Store zero to $1F0C.w
	lda #$0B.b		; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; Store accumulator to $012C.w [Reads: Accumulator]
	inc $11.b		; Increment $11.b [Reads: Direct Page] [Flags: ZN]
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AA9.w		; Store accumulator to $0AA9.w [Reads: Accumulator]
	lda #$06.b		; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AB6.w		; Store accumulator to $0AB6.w [Reads: Accumulator]
	sta $0710.w		; Store accumulator to $0710.w [Reads: Accumulator]
	jsl $1BEE74.l		; Jump to subroutine long $1BEE74.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEEA8.l		; Jump to subroutine long $1BEEA8.l [Writes: Stack Pointer] [Flow: call]
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AB2.w		; Store accumulator to $0AB2.w [Reads: Accumulator]
	jsl $1BEE52.l		; Jump to subroutine long $1BEE52.l [Writes: Stack Pointer] [Flow: call]
	stz $0202.w		; Store zero to $0202.w
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AA4.w		; Store accumulator to $0AA4.w [Reads: Accumulator]
	lda #$23.b		; Load #$23.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AA1.w		; Store accumulator to $0AA1.w [Reads: Accumulator]
	lda #$51.b		; Load #$51.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AA2.w		; Store accumulator to $0AA2.w [Reads: Accumulator]
	jsl $00E2D0.l		; Jump to subroutine long $00E2D0.l [Writes: Stack Pointer] [Flow: call]
	jsl $00E19B.l		; Jump to subroutine long $00E19B.l [Writes: Stack Pointer] [Flow: call]
	jsl $00E4E9.l		; Jump to subroutine long $00E4E9.l [Writes: Stack Pointer] [Flow: call]
	jsl $028054.l		; Jump to subroutine long $028054.l [Writes: Stack Pointer] [Flow: call]
	jmp $02FE71.l		; Jump long to $02FE71.l [Flow: jump]
	ldx #$05.b		; Load #$05.b into X register [Writes: X Index] [Flags: ZN]
L064DF4:
	stz $BF.b,X		; Store zero to $BF.b,X [Reads: X Index]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bpl L064DF4.b		; Branch if plus to L064DF4.b [Flow: branch]
	lda #$80.b		; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0710.w		; Store accumulator to $0710.w [Reads: Accumulator]
	jsl $00893D.l		; Jump to subroutine long $00893D.l [Writes: Stack Pointer] [Flow: call]
	jsl $008333.l		; Jump to subroutine long $008333.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEF96.l		; Jump to subroutine long $1BEF96.l [Writes: Stack Pointer] [Flow: call]
	inc $15.b		; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	inc $11.b		; Increment $11.b [Reads: Direct Page] [Flags: ZN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta ($35.b,X)		; Store accumulator ($35.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $82, $35, $91		; Bank wrapping branch target ; Branch always long to $82, $35, $91 [Flow: branch]
	and $92.b,X		; Logical AND $92.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $0F.b,X		; Logical AND $0F.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	dec $CE13.w		; Decrement $CE13.w [Flags: ZN]
L064E1B:
	lda #$10.b		; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $8D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $10.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$07.b		; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $10048D.l,X		; Subtract with carry (long,X) $10048D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	stz $00.b		; Store zero to $00.b
	ldx #$00.b		; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	brk $A5.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$20.b		; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $4A.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $CE17.w,Y		; Load $CE17.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and #$01.b		; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $0A.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda ($02.b),Y		; Load accumulator ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1006.w,X		; Store accumulator to $1006.w,X [Reads: Accumulator, X Index]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inc $00.b		; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	lda $00.b		; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$00.b		; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	tsb $D0.b		; Test and set bits $D0.b [Reads: Accumulator] [Flags: Z]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30
	jsr L064E1B.w		; Jump to subroutine at L064E1B.w [Writes: Stack Pointer] [Flow: call]
	ldy #$00DE.w		; Load #$00DE.w into Y register [Writes: Y Index] [Flags: ZN]
L064E5E:
	lda $E1C8.w,Y		; Load $E1C8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1806.w,Y		; Store accumulator to $1806.w,Y [Reads: Accumulator, Y Index]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bpl L064E5E.b		; Branch if plus to L064E5E.b [Flow: branch]
	lda #$1103.w		; Load #$1103.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	lda #$0011.w		; Load #$0011.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
L064E74:
	lda $00.b		; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $1006.w,X		; Store accumulator to $1006.w,X [Reads: Accumulator, X Index]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$0020.w		; Add #$0020.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda #$3240.w		; Load #$3240.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1006.w,X		; Store accumulator to $1006.w,X [Reads: Accumulator, X Index]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda #$347F.w		; Load #$347F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1006.w,X		; Store accumulator to $1006.w,X [Reads: Accumulator, X Index]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $02.b		; Decrement $02.b [Reads: Direct Page] [Flags: ZN]
	bpl L064E74.b		; Branch if plus to L064E74.b [Flow: branch]
.ACCU 8
	sep #$20
	lda #$FF.b		; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1006.w,X		; Store accumulator to $1006.w,X [Reads: Accumulator, X Index]
.INDEX 8
	sep #$10
	inc $11.b		; Increment $11.b [Reads: Direct Page] [Flags: ZN]
	jmp L06509C.w		; Jump to L06509C.w [Flow: jump]
	lda $0B9D.w		; Load $0B9D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $C8.b		; Store accumulator to $C8.b [Reads: Accumulator]
L064EAA:
	inc $11.b		; Increment $11.b [Reads: Direct Page] [Flags: ZN]
	lda #$06.b		; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; Store accumulator to $14.b [Reads: Accumulator]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr L064EC7.w		; Jump to subroutine at L064EC7.w [Writes: Stack Pointer] [Flow: call]
	lda #$0F.b		; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $13.b		; Store accumulator to $13.b [Reads: Accumulator]
	stz $0710.w		; Store zero to $0710.w
	bra L064EAA.b		; Branch always to L064EAA.b [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsl L064EDC.l		; Jump to subroutine long L064EDC.l [Writes: Stack Pointer] [Flow: call]
	jmp L06509C.w		; Jump to L06509C.w [Flow: jump]
L064EC7:
	phb		; [PATTERN: Function entry: Data bank preservation prologue] Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.INDEX 16
	rep #$10
	ldx #$00FD.w		; Load #$00FD.w into X register [Writes: X Index] [Flags: ZN]
L064ECF:
	lda $E358.w,X		; Load $E358.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1001.w,X		; Store accumulator to $1001.w,X [Reads: Accumulator, X Index]
	dex		; [PATTERN: X register countdown loop] Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bne L064ECF.b		; Branch if not equal to L064ECF.b [Flow: branch]
.INDEX 8
	sep #$10
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L064EDC:
	lda $C8.b		; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcs L064EE5.b		; Branch if carry set to L064EE5.b [Flow: branch]
	sta $0B9D.w		; Store accumulator to $0B9D.w [Reads: Accumulator]
L064EE5:
.ACCU 16
.INDEX 16
	rep #$30
	ldx #$0000.w		; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
L064EEA:
	stx $00.b		; Store X register to $00.b [Reads: X Index]
	lda $00848C.l,X		; Load long $00848C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7003E5.l,X		; Load long $7003E5.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$55AA.w		; Compare #$55AA.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L064F18.b		; Branch if not equal to L064F18.b [Flow: branch]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $00.b		; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$0001.w		; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $BF.b,X		; Store accumulator to $BF.b,X [Reads: Accumulator, X Index]
	plx		; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$D698.w		; Load #$D698.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; Store accumulator to $04.b [Reads: Accumulator]
	lda #$D699.w		; Load #$D699.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr L0656AF.w		; Jump to subroutine at L0656AF.w [Writes: Stack Pointer] [Flow: call]
	jsr $D7DB.w		; Jump to subroutine at $D7DB.w [Writes: Stack Pointer] [Flow: call]
	plx		; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsr $D63C.w		; Jump to subroutine at $D63C.w [Writes: Stack Pointer] [Flow: call]
L064F18:
	ldx $00.b		; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; [PATTERN: X register count-up loop] Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$0006.w		; Compare #$0006.w with X register [Reads: X Index] [Flags: ZCN]
	bcc L064EEA.b		; Branch if carry clear to L064EEA.b [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30
	ldx $C8.b		; Load $C8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$1C.b		; Load #$1C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	lda $CD78.w,X		; Load $CD78.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; Store accumulator to $01.b [Reads: Accumulator]
	jsr L0657A5.w		; Jump to subroutine at L0657A5.w [Writes: Stack Pointer] [Flow: call]
	ldy #$02.b		; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $F6.b		; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$C0.b		; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $F4.b		; Logical OR $F4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$FC.b		; Logical AND #$FC.b with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L064FBA.b		; Branch if equal to L064FBA.b [Flow: branch]
	and #$2C.b		; Logical AND #$2C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L064F65.b		; Branch if equal to L064F65.b [Flow: branch]
	and #$08.b		; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L064F54.b		; Branch if equal to L064F54.b [Flow: branch]
	lda #$20.b		; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; Store accumulator to $012F.w [Reads: Accumulator]
	dec $C8.b		; Decrement $C8.b [Reads: Direct Page] [Flags: ZN]
	bpl L064F63.b		; Branch if plus to L064F63.b [Flow: branch]
	lda #$04.b		; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $C8.b		; Store accumulator to $C8.b [Reads: Accumulator]
	bra L064F63.b		; Branch always to L064F63.b [Flow: branch]
L064F54:
	lda #$20.b		; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; Store accumulator to $012F.w [Reads: Accumulator]
	inc $C8.b		; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$05.b		; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L064F63.b		; Branch if not equal to L064F63.b [Flow: branch]
	stz $C8.b		; Store zero to $C8.b
L064F63:
	bra L064FBA.b		; Branch always to L064FBA.b [Flow: branch]
L064F65:
	lda #$2C.b		; Load #$2C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; Store accumulator to $012E.w [Reads: Accumulator]
	lda $C8.b		; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L064F9D.b		; Branch if equal to L064F9D.b [Flow: branch]
	bcs L064FA1.b		; Branch if carry set to L064FA1.b [Flow: branch]
	lda $C8.b		; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $BF.b,X		; Load $BF.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	beq L064F97.b		; Branch if equal to L064F97.b [Flow: branch]
	lda #$F1.b		; Load #$F1.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; Store accumulator to $012C.w [Reads: Accumulator]
	stz $C9.b		; Store zero to $C9.b
.ACCU 16
	rep #$20
	lda $00848C.l,X		; Load long $00848C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	lda $C8.b		; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $701FFE.l		; Store accumulator (long) $701FFE.l [Reads: Accumulator]
.ACCU 8
	sep #$20
	brl L064FBB.w		; Branch always long to L064FBB.w [Flow: branch]
L064F97:
	stz $C9.b		; Store zero to $C9.b
	ldy #$04.b		; Load #$04.b into Y register [Writes: Y Index] [Flags: ZN]
	bra L064FB4.b		; Branch always to L064FB4.b [Flow: branch]
L064F9D:
	ldy #$02.b		; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	bra L064FA3.b		; Branch always to L064FA3.b [Flow: branch]
L064FA1:
	ldy #$03.b		; Load #$03.b into Y register [Writes: Y Index] [Flags: ZN]
L064FA3:
	lda $BF.b		; Load $BF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $C1.b		; Logical OR $C1.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $C3.b		; Logical OR $C3.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bne L064FB2.b		; Branch if not equal to L064FB2.b [Flow: branch]
	lda #$3C.b		; Load #$3C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; [PATTERN: Memory clearing operation] Store accumulator to $012E.w [Reads: Accumulator]
	bra L064FBA.b		; Branch always to L064FBA.b [Flow: branch]
L064FB2:
	stz $C8.b		; Store zero to $C8.b
L064FB4:
	sty $10.b		; Store Y register to $10.b [Reads: Y Index]
	stz $11.b		; Store zero to $11.b
	stz $B0.b		; Store zero to $B0.b
L064FBA:
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L064FBB:
	ldx #$0F.b		; Load #$0F.b into X register [Writes: X Index] [Flags: ZN]
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $001AC0.l,X		; Store accumulator (long,X) $001AC0.l,X [Reads: Accumulator, X Index]
	sta $001AE0.l,X		; Store accumulator (long,X) $001AE0.l,X [Reads: Accumulator, X Index]
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $001AB0.l,X		; Store accumulator (long,X) $001AB0.l,X [Reads: Accumulator, X Index]
	sta $001AD0.l,X		; Store accumulator (long,X) $001AD0.l,X [Reads: Accumulator, X Index]
	sta $001AF0.l,X		; Store accumulator (long,X) $001AF0.l,X [Reads: Accumulator, X Index]
	phb		; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$7E.b		; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30
	ldy #$0000.w		; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $00.b		; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
L064FE1:
	lda $700000.l,X		; Load long $700000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $F000.w,Y		; Store accumulator to $F000.w,Y [Reads: Accumulator, Y Index]
	lda $700100.l,X		; Load long $700100.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $F100.w,Y		; Store accumulator to $F100.w,Y [Reads: Accumulator, Y Index]
	lda $700200.l,X		; Load long $700200.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $F200.w,Y		; Store accumulator to $F200.w,Y [Reads: Accumulator, Y Index]
	lda $700300.l,X		; Load long $700300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $F300.w,Y		; Store accumulator to $F300.w,Y [Reads: Accumulator, Y Index]
	lda $700400.l,X		; Load long $700400.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $F400.w,Y		; Store accumulator to $F400.w,Y [Reads: Accumulator, Y Index]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy #$0100.w		; Compare #$0100.w with Y register [Reads: Y Index] [Flags: ZCN]
	bne L064FE1.b		; Branch if not equal to L064FE1.b [Flow: branch]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda #$0007.w		; Load #$0007.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC00D.l		; Store accumulator (long) $7EC00D.l [Reads: Accumulator]
	sta $7EC013.l		; Store accumulator (long) $7EC013.l [Reads: Accumulator]
	lda #$0000.w		; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC00F.l		; Store accumulator (long) $7EC00F.l [Reads: Accumulator]
	sta $7EC015.l		; Store accumulator (long) $7EC015.l [Reads: Accumulator]
	lda #$6040.w		; Load #$6040.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0219.w		; Store accumulator to $0219.w [Reads: Accumulator]
	lda #$4841.w		; Load #$4841.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $021D.w		; Store accumulator to $021D.w [Reads: Accumulator]
	lda #$007F.w		; Load #$007F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $021F.w		; Store accumulator to $021F.w [Reads: Accumulator]
	lda #$FFFF.w		; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0221.w		; Store accumulator to $0221.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30
	lda #$80.b		; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0204.w		; [PATTERN: Memory clearing operation] Store accumulator to $0204.w [Reads: Accumulator]
	lda #$05.b		; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $10.b		; Store accumulator to $10.b [Reads: Accumulator]
	stz $11.b		; Store zero to $11.b
	stz $010E.w		; Store zero to $010E.w
	stz $0710.w		; [PATTERN: Memory clearing operation] Store zero to $0710.w
	stz $0AB2.w		; Store zero to $0AB2.w
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0B9D.w		; Store zero to $0B9D.w
	lda $11.b		; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $00879C.l		; Jump to subroutine long $00879C.l [Writes: Stack Pointer] [Flow: call]
	sbc $0CCD.w,Y		; Subtract with carry $0CCD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	eor ($CE.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($CE.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $D06E.w		; Test and set bits $D06E.w [Reads: Accumulator] [Flags: Z]
	tsb $D087.w		; Test and set bits $D087.w [Reads: Accumulator] [Flags: Z]
	tsb $D0A2.w		; Test and set bits $D0A2.w [Reads: Accumulator] [Flags: Z]
	tsb $D0B9.w		; Test and set bits $D0B9.w [Reads: Accumulator] [Flags: Z]
	tsb $07A9.w		; Test and set bits $07A9.w [Reads: Accumulator] [Flags: Z]
L065070:
	jsr L06452E.w		; Jump to subroutine at L06452E.w [Writes: Stack Pointer] [Flow: call]
	lda #$0F.b		; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $13.b		; Store accumulator to $13.b [Reads: Accumulator]
	stz $0710.w		; Store zero to $0710.w
	ldx #$FE.b		; Load #$FE.b into X register [Writes: X Index] [Flags: ZN]
L06507C:
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $BF.b,X		; Load $BF.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	beq L06507C.b		; Branch if equal to L06507C.b [Flow: branch]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sta $C8.b		; Store accumulator to $C8.b [Reads: Accumulator]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $D13F.w		; Jump to subroutine at $D13F.w [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L06509C.b		; Branch if not equal to L06509C.b [Flow: branch]
	lda $1A.b		; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$30.b		; Logical AND #$30.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bne L06509C.b		; Branch if not equal to L06509C.b [Flow: branch]
	jsr $D0C6.w		; Jump to subroutine at $D0C6.w [Writes: Stack Pointer] [Flow: call]
L06509C:
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; Store accumulator to $14.b [Reads: Accumulator]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $D27B.w		; Jump to subroutine at $D27B.w [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L0650B7.b		; Branch if not equal to L0650B7.b [Flow: branch]
	lda $1A.b		; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$30.b		; Logical AND #$30.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bne L06509C.b		; Branch if not equal to L06509C.b [Flow: branch]
	jsr $D0C6.w		; Jump to subroutine at $D0C6.w [Writes: Stack Pointer] [Flow: call]
L0650B7:
	bra L06509C.b		; Branch always to L06509C.b [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $D371.w		; Jump to subroutine at $D371.w [Writes: Stack Pointer] [Flow: call]
	jmp L06509C.w		; Jump to L06509C.w [Flow: jump]
	tsb $00.b		; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	asl $C200.w,X		; Arithmetic shift left $C200.w,X [Reads: X Index] [Flags: ZCN]
	.db $30, $A2		; Invalid branch target (bmi L06506B) ; Branch if minus to $30, $A2 [Flow: branch]
	cop $00.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$A9.b		; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $A0.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $84.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BC.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
.INDEX 16
	rep #$D0
L0650D6:
	sta $1002.w,Y		; Store accumulator to $1002.w,Y [Reads: Accumulator, Y Index]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $00.b		; [PATTERN: Memory countdown loop] Decrement $00.b [Reads: Direct Page] [Flags: ZN]
	bne L0650D6.b		; Branch if not equal to L0650D6.b [Flow: branch]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $EB		; Invalid branch target (bpl L0650CE) ; Branch if plus to $10, $EB [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $24.b		; Test bits $24.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	bit $1C.b		; Test bits $1C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	eor [$6F.b],Y		; Exclusive OR accumulator with memory (long indexed) [$6F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$BF.b]		; Store accumulator (long) [$BF.b] [Reads: Direct Page, Accumulator]
	adc ($67.b,X)		; Add with carry ($67.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	asl $00A9.w		; Arithmetic shift left $00A9.w [Flags: ZCN]
	adc ($87.b,X)		; Add with carry ($87.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	asl $00A9.w		; Arithmetic shift left $00A9.w [Flags: ZCN]
	adc ($C7.b,X)		; Add with carry ($C7.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	asl $00A9.w		; Arithmetic shift left $00A9.w [Flags: ZCN]
	adc ($E7.b,X)		; Add with carry ($E7.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	asl $00A9.w		; Arithmetic shift left $00A9.w [Flags: ZCN]
	ora ($30.b),Y		; OR accumulator with memory ($30.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $35.b,S		; Store accumulator (stack relative) $35.b,S [Reads: Accumulator, Stack Pointer]
	ora ($31.b),Y		; OR accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	trb $85.b		; Test and reset bits $85.b [Reads: Accumulator] [Flags: Z]
	and $11.b,X		; Logical AND $11.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	bit $0100.w,X		; Test bits $0100.w,X [Reads: X Index] [Flags: VNZ] [Flow: branch]
	sty $35.b		; Store Y register to $35.b [Reads: Y Index]
	ora ($50.b),Y		; OR accumulator with memory ($50.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$0E.b		; Compare #$0E.b with Y register [Reads: Y Index] [Flags: ZCN]
	stx $35.b		; Store X register to $35.b [Reads: X Index]
	ora ($5C.b),Y		; OR accumulator with memory ($5C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$0E.b		; Compare #$0E.b with Y register [Reads: Y Index] [Flags: ZCN]
	stx $35.b,Y		; Store X register $35.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ora ($50.b)		; OR accumulator with memory (indirect) ($50.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($35.b,S),Y		; Store accumulator (stack relative indirect indexed) ($35.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer]
	ora ($51.b)		; OR accumulator with memory (indirect) ($51.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	trb $95.b		; Test and reset bits $95.b [Reads: Accumulator] [Flags: Z]
	and $12.b,X		; Logical AND $12.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	jmp $940100.l		; Jump long to $940100.l [Flow: jump]
	and $FF.b,X		; Logical AND $FF.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	brk $0C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L065139:
	bit $6400.w,X		; Test bits $6400.w,X [Reads: X Index] [Flags: VNZ] [Flow: branch]
	brk $8C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C2.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $A2		; Invalid branch target (bpl L0650E4) ; Branch if plus to $10, $A2 [Flow: branch]
	ldy $8E00.w		; Load $8E00.w into Y register [Writes: Y Index] [Flags: ZN]
	brk $10.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L065147:
	lda $E68D.w,X		; Load $E68D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1002.w,X		; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bpl L065147.b		; Branch if plus to L065147.b [Flow: branch]
.ACCU 16
	rep #$20
	ldx #$00.b		; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	brk $86.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B5.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $000129.l,X		; Load long $000129.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	beq L065187.b		; Branch if equal to L065187.b [Flow: branch]
	lda $00848C.l,X		; Load long $00848C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txy		; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $D139.w,Y		; Load $D139.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$0006.w		; Load #$0006.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
L06516D:
	lda $7003D9.l,X		; Load long $7003D9.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$1800.w		; Add #$1800.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1002.w,Y		; Store accumulator to $1002.w,Y [Reads: Accumulator, Y Index]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$0010.w		; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1016.w,Y		; Store accumulator to $1016.w,Y [Reads: Accumulator, Y Index]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $02.b		; [PATTERN: Memory countdown loop] Decrement $02.b [Reads: Direct Page] [Flags: ZN]
	bne L06516D.b		; Branch if not equal to L06516D.b [Flow: branch]
L065187:
	ldx $00.b		; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$06.b		; Compare #$06.b with X register [Reads: X Index] [Flags: ZCN]
	brk $90.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $E2.b		; Compare $E2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: ZCN]
	bmi L065139.b		; Branch if minus to L065139.b [Flow: branch]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $D0E6.w,X		; Load $D0E6.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	lda $D0EA.w,X		; Load $D0EA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; Store accumulator to $01.b [Reads: Accumulator]
	jsr L0657A5.w		; Jump to subroutine at L0657A5.w [Writes: Stack Pointer] [Flow: call]
	lda $F6.b		; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$05C0.w		; Logical AND #$05C0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	pea $FC29.w		; Push absolute address $FC29.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	bne L0651AE.b		; Branch if not equal to L0651AE.b [Flow: branch]
	brl L065239.w		; Branch always long to L065239.w [Flow: branch]
L0651AE:
	and #$F02C.w		; Logical AND #$F02C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $F00829.l,X		; AND accumulator with memory (long,X) $F00829.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	trb $A6.b		; Test and reset bits $A6.b [Reads: Accumulator] [Flags: Z]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bmi L0651C6.b		; Branch if minus to L0651C6.b [Flow: branch]
L0651BB:
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $00BF.w,Y		; Load $00BF.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bne L0651E8.b		; Branch if not equal to L0651E8.b [Flow: branch]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bpl L0651BB.b		; Branch if plus to L0651BB.b [Flow: branch]
L0651C6:
	ldx #$03.b		; Load #$03.b into X register [Writes: X Index] [Flags: ZN]
	bra L0651E8.b		; Branch always to L0651E8.b [Flow: branch]
	ldx $C8.b		; Load $C8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$03.b		; Compare #$03.b with X register [Reads: X Index] [Flags: ZCN]
	bcs L0651E0.b		; Branch if carry set to L0651E0.b [Flow: branch]
L0651D1:
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $00BF.w,Y		; Load $00BF.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bne L0651E8.b		; Branch if not equal to L0651E8.b [Flow: branch]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$03.b		; Compare #$03.b with X register [Reads: X Index] [Flags: ZCN]
	bne L0651D1.b		; Branch if not equal to L0651D1.b [Flow: branch]
	bra L0651E8.b		; Branch always to L0651E8.b [Flow: branch]
L0651E0:
	cpx #$04.b		; Compare #$04.b with X register [Reads: X Index] [Flags: ZCN]
	bne L0651E8.b		; Branch if not equal to L0651E8.b [Flow: branch]
	ldx #$00.b		; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	bra L0651D1.b		; Branch always to L0651D1.b [Flow: branch]
L0651E8:
	lda #$8D20.w		; Load #$8D20.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $C88601.l		; AND accumulator with memory (long) $C88601.l [Writes: Accumulator] [Flags: ZN]
	bra L065239.b		; Branch always to L065239.b [Flow: branch]
	lda #$8D2C.w		; Load #$8D2C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	rol $A501.w		; Rotate left $A501.w [Flags: ZCN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$F003.w		; Compare #$F003.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	and ($0A.b),Y		; AND accumulator with memory ($0A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $CC.b		; Store accumulator to $CC.b [Reads: Accumulator]
	stz $CD.b		; Store zero to $CD.b
	ldx #$49.b		; Load #$49.b into X register [Writes: X Index] [Flags: ZN]
L065203:
	lda $D0ED.w,X		; Load $D0ED.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1035.w,X		; Store accumulator to $1035.w,X [Reads: Accumulator, X Index]
	dex		; [PATTERN: X register countdown loop] Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bne L065203.b		; Branch if not equal to L065203.b [Flow: branch]
	ldx $C8.b		; Load $C8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cpx #$02.b		; Compare #$02.b with X register [Reads: X Index] [Flags: ZCN]
	.db $F0, $17		; Invalid branch target (beq L065229) ; Branch if equal to $F0, $17 [Flow: branch]
	lda $D137.w,X		; Load $D137.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$9D62.w		; Load #$9D62.w into accumulator [Writes: Accumulator] [Flags: ZN]
	rol $10.b,X		; Rotate left $10.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	sta $103C.w,X		; Store accumulator to $103C.w,X [Reads: Accumulator, X Index]
	lda #$9D27.w		; Load #$9D27.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and [$10.b],Y		; AND accumulator with memory (long indexed) [$10.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$9D20.w		; Add #$9D20.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	and $E610.w,X		; AND accumulator with memory $E610.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($80.b),Y		; OR accumulator with memory ($80.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
L06522D:
	lda #$8501.w		; Load #$8501.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $A9		; Invalid branch target (bpl L0651DB) ; Branch if plus to $10, $A9 [Flow: branch]
	ora ($85.b,X)		; Logical OR ($85.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($64.b),Y		; OR accumulator with memory ($64.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bcs L06529C.b		; Branch if carry set to L06529C.b [Flow: branch]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
L065239:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($B4.b,X)		; Add with carry ($B4.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	asl $00A9.w		; Arithmetic shift left $00A9.w [Flags: ZCN]
	adc ($D4.b,X)		; Add with carry ($D4.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	asl $00A9.w		; Arithmetic shift left $00A9.w [Flags: ZCN]
	per L06530F.w		; Push effective relative address L06530F.w [Writes: Stack Pointer]
	ora $1802.w		; Logical OR $1802.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $0F18.w		; Arithmetic shift left $0F18.w [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$0E18.w		; Load #$0E18.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	per L065341.w		; Push effective relative address L065341.w [Writes: Stack Pointer]
	ora $1812.w		; Logical OR $1812.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $1F18.w,X		; Arithmetic shift left $1F18.w,X [Reads: X Index] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sec		; Set carry ; Set carry flag [Flags: C]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$1E18.w		; Load #$1E18.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sbc $1C8C8C.l,X		; Subtract with carry (long,X) $1C8C8C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc [$7F.b]		; Add with carry (long) [$7F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	lda $600038.l,X		; Load long $600038.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $E7.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sbc #$A918.w		; Subtract #$A918.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	tsb $A2.b		; Test and set bits $A2.b [Reads: Accumulator] [Flags: Z]
	ora ($C5.b,X)		; Logical OR ($C5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy $03F0.w		; Compare $03F0.w with Y register [Reads: Y Index] [Flags: ZCN]
	sta $CA.b,X		; Store accumulator to $CA.b,X [Reads: Accumulator, X Index]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec A		; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $10, $F5		; Invalid branch target (bpl L06527F) ; Branch if plus to $10, $F5 [Flow: branch]
.INDEX 16
	rep #$10
	ldx #$0084.w		; Load #$0084.w into X register [Writes: X Index] [Flags: ZN]
	stx $0E.b		; Store X register to $0E.b [Reads: X Index]
L065291:
	lda $E73A.w,X		; Load $E73A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1002.w,X		; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bpl L065291.b		; Branch if plus to L065291.b [Flow: branch]
.ACCU 16
	rep #$20
L06529C:
	ldx #$0000.w		; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	stx $04.b		; Store X register to $04.b [Reads: X Index]
L0652A1:
	stx $00.b		; Store X register to $00.b [Reads: X Index]
	cpx $CC.b		; Compare $CC.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	beq L0652E6.b		; Branch if equal to L0652E6.b [Flow: branch]
	ldy $04.b		; Load $04.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $D271.w,Y		; Load $D271.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inc $04.b		; Increment $04.b [Reads: Direct Page] [Flags: ZN]
	inc $04.b		; Increment $04.b [Reads: Direct Page] [Flags: ZN]
	lda $D275.w,X		; Load $D275.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1002.w,Y		; Store accumulator to $1002.w,Y [Reads: Accumulator, Y Index]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$0010.w		; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1016.w,Y		; Store accumulator to $1016.w,Y [Reads: Accumulator, Y Index]
	lda $BF.b,X		; Load $BF.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	beq L0652E6.b		; Branch if equal to L0652E6.b [Flow: branch]
	lda #$0006.w		; Load #$0006.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	lda $00848C.l,X		; Load long $00848C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
L0652CC:
	lda $7003D9.l,X		; Load long $7003D9.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$1800.w		; Add #$1800.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1006.w,Y		; Store accumulator to $1006.w,Y [Reads: Accumulator, Y Index]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$0010.w		; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $101A.w,Y		; Store accumulator to $101A.w,Y [Reads: Accumulator, Y Index]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $02.b		; [PATTERN: Memory countdown loop] Decrement $02.b [Reads: Direct Page] [Flags: ZN]
	bne L0652CC.b		; Branch if not equal to L0652CC.b [Flow: branch]
L0652E6:
	ldx $00.b		; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; [PATTERN: X register count-up loop] Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$0006.w		; Compare #$0006.w with X register [Reads: X Index] [Flags: ZCN]
	bcc L0652A1.b		; Branch if carry clear to L0652A1.b [Flow: branch]
	ldx $0E.b		; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stx $1000.w		; Store X register to $1000.w [Reads: X Index]
.ACCU 8
.INDEX 8
	sep #$30
	ldx $C8.b		; Load $C8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $D26B.w,X		; Load $D26B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	lda $D26E.w,X		; Load $D26E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; Store accumulator to $01.b [Reads: Accumulator]
	jsr L0657A5.w		; Jump to subroutine at L0657A5.w [Writes: Stack Pointer] [Flow: call]
	lda $F6.b		; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$C0.b		; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $F4.b		; Logical OR $F4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$FC.b		; Logical AND #$FC.b with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L06536E.b		; Branch if equal to L06536E.b [Flow: branch]
L06530F:
	and #$2C.b		; Logical AND #$2C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L065332.b		; Branch if equal to L065332.b [Flow: branch]
	and #$08.b		; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L065320.b		; Branch if equal to L065320.b [Flow: branch]
	ldx $C8.b		; Load $C8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bpl L065329.b		; Branch if plus to L065329.b [Flow: branch]
	ldx #$02.b		; Load #$02.b into X register [Writes: X Index] [Flags: ZN]
	bra L065329.b		; Branch always to L065329.b [Flow: branch]
L065320:
	ldx $C8.b		; Load $C8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	inx		; [PATTERN: X register count-up loop] Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$03.b		; Compare #$03.b with X register [Reads: X Index] [Flags: ZCN]
	bcc L065329.b		; Branch if carry clear to L065329.b [Flow: branch]
	ldx #$00.b		; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
L065329:
	lda #$20.b		; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; Store accumulator to $012F.w [Reads: Accumulator]
	stx $C8.b		; Store X register to $C8.b [Reads: X Index]
	bra L06536E.b		; Branch always to L06536E.b [Flow: branch]
L065332:
	lda #$2C.b		; Load #$2C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; Store accumulator to $012E.w [Reads: Accumulator]
	ldx $C8.b		; Load $C8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cpx #$02.b		; Compare #$02.b with X register [Reads: X Index] [Flags: ZCN]
	beq L065369.b		; Branch if equal to L065369.b [Flow: branch]
	lda $CA.b,X		; Load $CA.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	sta $CA.b		; Store accumulator to $CA.b [Reads: Accumulator]
L065341:
	stz $CB.b		; Store zero to $CB.b
	ldx #$30.b		; Load #$30.b into X register [Writes: X Index] [Flags: ZN]
L065345:
	lda $D23A.w,X		; Load $D23A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1036.w,X		; Store accumulator to $1036.w,X [Reads: Accumulator, X Index]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bpl L065345.b		; Branch if plus to L065345.b [Flow: branch]
	lda $C8.b		; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bne L065365.b		; Branch if not equal to L065365.b [Flow: branch]
	lda #$62.b		; Load #$62.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1036.w		; Store accumulator to $1036.w [Reads: Accumulator]
	sta $103C.w		; Store accumulator to $103C.w [Reads: Accumulator]
	lda #$14.b		; Load #$14.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1037.w		; Store accumulator to $1037.w [Reads: Accumulator]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$20.b		; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $103D.w		; Store accumulator to $103D.w [Reads: Accumulator]
L065365:
	inc $11.b		; Increment $11.b [Reads: Direct Page] [Flags: ZN]
	bra L06536C.b		; Branch always to L06536C.b [Flow: branch]
L065369:
	jsr L06522D.w		; Jump to subroutine at L06522D.w [Writes: Stack Pointer] [Flow: call]
L06536C:
	stz $C8.b		; Store zero to $C8.b
L06536E:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $C8A6BF.l		; Load long $C8A6BF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$1C.b		; Load #$1C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	lda $D36F.w,X		; Load $D36F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; Store accumulator to $01.b [Reads: Accumulator]
	jsr L0657A5.w		; Jump to subroutine at L0657A5.w [Writes: Stack Pointer] [Flow: call]
	lda $F6.b		; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$C0.b		; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $F4.b		; Logical OR $F4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$FC.b		; Logical AND #$FC.b with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L0653DB.b		; Branch if equal to L0653DB.b [Flow: branch]
	and #$2C.b		; Logical AND #$2C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L0653B1.b		; Branch if equal to L0653B1.b [Flow: branch]
	and #$24.b		; Logical AND #$24.b with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L0653A2.b		; Branch if equal to L0653A2.b [Flow: branch]
	lda #$20.b		; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; Store accumulator to $012F.w [Reads: Accumulator]
	inc $C8.b		; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcc L0653DB.b		; Branch if carry clear to L0653DB.b [Flow: branch]
	stz $C8.b		; Store zero to $C8.b
	bra L0653DB.b		; Branch always to L0653DB.b [Flow: branch]
L0653A2:
	lda #$20.b		; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; Store accumulator to $012F.w [Reads: Accumulator]
	dec $C8.b		; Decrement $C8.b [Reads: Direct Page] [Flags: ZN]
	bpl L0653DB.b		; Branch if plus to L0653DB.b [Flow: branch]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $C8.b		; Store accumulator to $C8.b [Reads: Accumulator]
	bra L0653DB.b		; Branch always to L0653DB.b [Flow: branch]
L0653B1:
	lda #$2C.b		; Load #$2C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; Store accumulator to $012E.w [Reads: Accumulator]
	lda $C8.b		; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bne L0653D6.b		; Branch if not equal to L0653D6.b [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30
	ldx $CA.b		; Load $CA.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $00848C.l,X		; Load long $00848C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx $CC.b		; Load $CC.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $00848C.l,X		; Load long $00848C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsr L0653DC.w		; Jump to subroutine at L0653DC.w [Writes: Stack Pointer] [Flow: call]
	ldx $CA.b		; Load $CA.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$0001.w		; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $BF.b,X		; Store accumulator to $BF.b,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30
L0653D6:
	jsr L06522D.w		; Jump to subroutine at L06522D.w [Writes: Stack Pointer] [Flow: call]
	stz $C8.b		; Store zero to $C8.b
L0653DB:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L0653DC:
.ACCU 8
	sep #$20
	phb		; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$70.b		; Load #$70.b into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.ACCU 16
	rep #$20
	lda #$0080.w		; Load #$0080.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
L0653EA:
	lda $0000.w,X		; Load $0000.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0000.w,Y		; Store accumulator to $0000.w,Y [Reads: Accumulator, Y Index]
	lda $0100.w,X		; Load $0100.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0100.w,Y		; Store accumulator to $0100.w,Y [Reads: Accumulator, Y Index]
	lda $0200.w,X		; Load $0200.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0200.w,Y		; Store accumulator to $0200.w,Y [Reads: Accumulator, Y Index]
	lda $0300.w,X		; Load $0300.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0300.w,Y		; Store accumulator to $0300.w,Y [Reads: Accumulator, Y Index]
	lda $0400.w,X		; Load $0400.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0400.w,Y		; Store accumulator to $0400.w,Y [Reads: Accumulator, Y Index]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $00.b		; [PATTERN: Memory countdown loop] Decrement $00.b [Reads: Direct Page] [Flags: ZN]
	bne L0653EA.b		; Branch if not equal to L0653EA.b [Flow: branch]
.ACCU 8
	sep #$20
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.ACCU 16
	rep #$20
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $24.b		; Test bits $24.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	bit $1C.b		; Test bits $1C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	adc [$7F.b]		; Add with carry (long) [$7F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sta [$BF.b],Y		; Store accumulator (long indexed) [$BF.b],Y [Reads: Direct Page, Accumulator, Y Index]
	adc ($A7.b,X)		; Add with carry ($A7.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	bit $A9.b		; Test bits $A9.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	brk $61.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$40.b]		; Compare accumulator (long) [$40.b] [Reads: Direct Page, Accumulator] [Flags: ZCN]
	bit $A9.b		; Test bits $A9.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	brk $62.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$40.b]		; OR accumulator with memory (long) [$40.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $A9.b		; Test bits $A9.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	brk $62.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$40.b]		; AND accumulator with memory (long) [$40.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $A9.b		; Test bits $A9.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	brk $62.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $00.b		; Decrement $00.b [Reads: Direct Page] [Flags: ZN]
	and ($04.b,X)		; Logical AND ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	and ($18.b,X)		; Logical AND ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $18.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $180418.l		; Jump to subroutine long $180418.l [Writes: Stack Pointer] [Flow: call]
	lda #$2318.w		; Load #$2318.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	ora [$18.b]		; OR accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $182218.l		; Load long $182218.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$0F18.w		; Load #$0F18.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	brk $18.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	tsb $18.b		; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	and ($18.b,X)		; Logical AND ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $62, $E6, $00		; Invalid branch target (per L065545) ; Push effective relative address $62, $E6, $00 [Writes: Stack Pointer]
	and ($14.b,X)		; Logical AND ($14.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	and ($18.b),Y		; AND accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bpl L06547E.b		; Branch if plus to L06547E.b [Flow: branch]
	and ($18.b)		; AND accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $18.b		; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	lda #$3318.w		; Load #$3318.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	ora [$18.b],Y		; OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $183218.l,X		; Load long $183218.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda #$1F18.w		; Load #$1F18.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	.db $10, $18		; Invalid branch target (bpl L065494) ; Branch if plus to $10, $18 [Flow: branch]
	sec		; Set carry ; Set carry flag [Flags: C]
	clc		; Clear carry ; Clear carry flag [Flags: C]
L06547E:
	trb $18.b		; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	and ($18.b),Y		; AND accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $A50C00.l,X		; Subtract with carry (long,X) $A50C00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora ($22.b),Y		; OR accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $0087.w		; Store zero to $0087.w
	sbc $0CCD.w,Y		; Subtract with carry $0CCD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	eor ($CE.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($CE.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $D49A.w		; Test and set bits $D49A.w [Reads: Accumulator] [Flags: Z]
	tsb $D49F.w		; Test and set bits $D49F.w [Reads: Accumulator] [Flags: Z]
	tsb $D4B1.w		; Test and set bits $D4B1.w [Reads: Accumulator] [Flags: Z]
	tsb $08A9.w		; Test and set bits $08A9.w [Reads: Accumulator] [Flags: Z]
	jmp L065070.w		; Jump to L065070.w [Flow: jump]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $C8.b		; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$B003.w		; Compare #$B003.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	ora $8D.b,S		; OR accumulator with stack relative $8D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $200B.w,X		; Store accumulator to $200B.w,X [Reads: Accumulator, X Index]
	tsx		; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	pei ($4C.b)		; Push effective indirect address ($4C.b) [Reads: Direct Page] [Writes: Stack Pointer]
	stz $8BD0.w		; Store zero to $8BD0.w
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $D599.w		; Jump to subroutine at $D599.w [Writes: Stack Pointer] [Flow: call]
	jmp L06509C.w		; Jump to L06509C.w [Flow: jump]
.INDEX 16
	rep #$10
	ldx #$00FD.w		; Load #$00FD.w into X register [Writes: X Index] [Flags: ZN]
L0654BF:
	lda $E53E.w,X		; Load $E53E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1001.w,X		; Store accumulator to $1001.w,X [Reads: Accumulator, X Index]
	dex		; [PATTERN: X register countdown loop] Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bne L0654BF.b		; Branch if not equal to L0654BF.b [Flow: branch]
.ACCU 16
	rep #$20
	ldx #$0000.w		; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
L0654CD:
	stx $00.b		; Store X register to $00.b [Reads: X Index]
	lda $BF.b,X		; Load $BF.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0001.w		; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L0654DE.b		; Branch if equal to L0654DE.b [Flow: branch]
	lda $00848C.l,X		; Load long $00848C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsr $D63C.w		; Jump to subroutine at $D63C.w [Writes: Stack Pointer] [Flow: call]
L0654DE:
	ldx $00.b		; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; [PATTERN: X register count-up loop] Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$0006.w		; Compare #$0006.w with X register [Reads: X Index] [Flags: ZCN]
	bcc L0654CD.b		; Branch if carry clear to L0654CD.b [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30
	ldx $C8.b		; Load $C8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $D416.w,X		; Load $D416.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	lda $D41A.w,X		; Load $D41A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; Store accumulator to $01.b [Reads: Accumulator]
	jsr L0657A5.w		; Jump to subroutine at L0657A5.w [Writes: Stack Pointer] [Flow: call]
	ldy #$02.b		; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $F4.b		; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$20.b		; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bne L065525.b		; Branch if not equal to L065525.b [Flow: branch]
	lda $F4.b		; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0C.b		; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L065548.b		; Branch if equal to L065548.b [Flow: branch]
	and #$04.b		; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bne L065525.b		; Branch if not equal to L065525.b [Flow: branch]
	lda #$20.b		; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; Store accumulator to $012F.w [Reads: Accumulator]
	ldy #$FE.b		; Load #$FE.b into Y register [Writes: Y Index] [Flags: ZN]
	ldx $C8.b		; Load $C8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bmi L065521.b		; Branch if minus to L065521.b [Flow: branch]
L065516:
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $00BF.w,Y		; Load $00BF.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bne L065548.b		; Branch if not equal to L065548.b [Flow: branch]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bpl L065516.b		; Branch if plus to L065516.b [Flow: branch]
L065521:
	ldx #$03.b		; Load #$03.b into X register [Writes: X Index] [Flags: ZN]
	bra L065548.b		; Branch always to L065548.b [Flow: branch]
L065525:
	lda #$20.b		; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; Store accumulator to $012F.w [Reads: Accumulator]
	ldx $C8.b		; Load $C8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$03.b		; Compare #$03.b with X register [Reads: X Index] [Flags: ZCN]
	bcs L065540.b		; Branch if carry set to L065540.b [Flow: branch]
L065531:
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $00BF.w,Y		; Load $00BF.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bne L065548.b		; Branch if not equal to L065548.b [Flow: branch]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$03.b		; Compare #$03.b with X register [Reads: X Index] [Flags: ZCN]
	bne L065531.b		; Branch if not equal to L065531.b [Flow: branch]
	bra L065548.b		; Branch always to L065548.b [Flow: branch]
L065540:
	cpx #$04.b		; Compare #$04.b with X register [Reads: X Index] [Flags: ZCN]
	bne L065548.b		; Branch if not equal to L065548.b [Flow: branch]
	ldx #$00.b		; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	bra L065531.b		; Branch always to L065531.b [Flow: branch]
L065548:
	stx $C8.b		; Store X register to $C8.b [Reads: X Index]
	lda $F6.b		; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$C0.b		; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $F4.b		; Logical OR $F4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$D0.b		; Logical AND #$D0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L065596.b		; Branch if equal to L065596.b [Flow: branch]
	lda #$2C.b		; Load #$2C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; Store accumulator to $012E.w [Reads: Accumulator]
	lda $C8.b		; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L065591.b		; Branch if equal to L065591.b [Flow: branch]
	ldx #$64.b		; Load #$64.b into X register [Writes: X Index] [Flags: ZN]
L065561:
	lda $D41E.w,X		; Load $D41E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1002.w,X		; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bpl L065561.b		; Branch if plus to L065561.b [Flow: branch]
	inc $11.b		; Increment $11.b [Reads: Direct Page] [Flags: ZN]
	ldx $C8.b		; Load $C8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cpx #$02.b		; Compare #$02.b with X register [Reads: X Index] [Flags: ZCN]
	beq L065589.b		; Branch if equal to L065589.b [Flow: branch]
	lda $D483.w,X		; Load $D483.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$62.b		; Load #$62.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1002.w,X		; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	sta $1008.w,X		; Store accumulator to $1008.w,X [Reads: Accumulator, X Index]
	lda #$67.b		; Load #$67.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1003.w,X		; Store accumulator to $1003.w,X [Reads: Accumulator, X Index]
	clc		; Clear carry ; Clear carry flag [Flags: C]
L065584:
	adc #$20.b		; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1009.w,X		; Store accumulator to $1009.w,X [Reads: Accumulator, X Index]
L065589:
	lda $C8.b		; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $B0.b		; Store accumulator to $B0.b [Reads: Accumulator]
	stz $C8.b		; Store zero to $C8.b
	bra L065596.b		; Branch always to L065596.b [Flow: branch]
L065591:
.ACCU 8
.INDEX 8
	sep #$30
	jsr L06522D.w		; Jump to subroutine at L06522D.w [Writes: Stack Pointer] [Flow: call]
L065596:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B0A5BF.l		; Load long $B0A5BF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30
	ldx $C8.b		; Load $C8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$1C.b		; Load #$1C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	lda $D597.w,X		; Load $D597.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; Store accumulator to $01.b [Reads: Accumulator]
	jsr L0657A5.w		; Jump to subroutine at L0657A5.w [Writes: Stack Pointer] [Flow: call]
	ldy #$02.b		; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $F4.b		; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$2C.b		; Logical AND #$2C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L0655C8.b		; Branch if equal to L0655C8.b [Flow: branch]
	and #$24.b		; Logical AND #$24.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bne L0655BD.b		; Branch if not equal to L0655BD.b [Flow: branch]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bra L0655BE.b		; Branch always to L0655BE.b [Flow: branch]
L0655BD:
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
L0655BE:
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $C8.b		; Store accumulator to $C8.b [Reads: Accumulator]
	lda #$20.b		; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; Store accumulator to $012F.w [Reads: Accumulator]
L0655C8:
	lda $F6.b		; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$C0.b		; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $F4.b		; Logical OR $F4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$D0.b		; Logical AND #$D0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L06562F.b		; Branch if equal to L06562F.b [Flow: branch]
	lda #$2C.b		; Load #$2C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; Store accumulator to $012E.w [Reads: Accumulator]
	lda $C8.b		; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bne L06562A.b		; Branch if not equal to L06562A.b [Flow: branch]
L0655DB:
	lda #$22.b		; Load #$22.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; Store accumulator to $012F.w [Reads: Accumulator]
	stz $012E.w		; Store zero to $012E.w
.ACCU 16
.INDEX 16
	rep #$30
	lda $B0.b		; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	stz $BF.b,X		; Store zero to $BF.b,X [Reads: X Index]
	lda $00848C.l,X		; Load long $00848C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy #$0000.w		; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
L0655F7:
	sta $700000.l,X		; Store accumulator (long,X) $700000.l,X [Reads: Accumulator, X Index]
	sta $700100.l,X		; Store accumulator (long,X) $700100.l,X [Reads: Accumulator, X Index]
	sta $700200.l,X		; Store accumulator (long,X) $700200.l,X [Reads: Accumulator, X Index]
	sta $700300.l,X		; Store accumulator (long,X) $700300.l,X [Reads: Accumulator, X Index]
	sta $700400.l,X		; Store accumulator (long,X) $700400.l,X [Reads: Accumulator, X Index]
	sta $700F00.l,X		; Store accumulator (long,X) $700F00.l,X [Reads: Accumulator, X Index]
	sta $701000.l,X		; Store accumulator (long,X) $701000.l,X [Reads: Accumulator, X Index]
	sta $701100.l,X		; Store accumulator (long,X) $701100.l,X [Reads: Accumulator, X Index]
	sta $701200.l,X		; Store accumulator (long,X) $701200.l,X [Reads: Accumulator, X Index]
	sta $701300.l,X		; Store accumulator (long,X) $701300.l,X [Reads: Accumulator, X Index]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy #$0100.w		; Compare #$0100.w with Y register [Reads: Y Index] [Flags: ZCN]
	bne L0655F7.b		; Branch if not equal to L0655F7.b [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30
L06562A:
	jsr L06522D.w		; Jump to subroutine at L06522D.w [Writes: Stack Pointer] [Flow: call]
	stz $B0.b		; Store zero to $B0.b
L06562F:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $5C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B0.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $16.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6A.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BE.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DA.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $00.b		; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $D630.w,Y		; Load $D630.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$06.b		; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $BF.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $7003.w,Y		; Compare accumulator $7003.w,Y [Reads: Y Index] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$00.b		; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sta $1002.w,Y		; Store accumulator to $1002.w,Y [Reads: Accumulator, Y Index]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$10.b		; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	brk $99.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $E810.w		; Test bits $E810.w with accumulator [Reads: Accumulator] [Flags: VNZ]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $02.b		; Decrement $02.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $E6		; Invalid branch target (bne L065648) ; Branch if not equal to $D0, $E6 [Flow: branch]
	plx		; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ldy #$01.b		; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $BF.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($7003.w)		; Jump indirect to ($7003.w) [Flow: jump]
	and #$FF.b		; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $4A.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	ldx $00.b		; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldy $D636.w,X		; Load Y register $D636.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sty $04.b		; Store Y register to $04.b [Reads: Y Index]
	lda #$20.b		; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $A2.b		; Logical OR $A2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	brk $99.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $10.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dex		; [PATTERN: X register countdown loop] Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bne L065690.b		; Branch if not equal to L065690.b [Flow: branch]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $04.b		; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$2A.b		; Add #$2A.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	brk $A8.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
L065690:
	dec $02.b		; Decrement $02.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EB		; Invalid branch target (bne L06567F) ; Branch if not equal to $D0, $EB [Flow: branch]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($06.b,X)		; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $43.b,X		; Test bits $43.b,X [Reads: Direct Page, X Index] [Flags: VNZ] [Flow: branch]
	adc $83.b,S		; Add with carry (stack relative) $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	bit $8550.w,X		; Test bits $8550.w,X [Reads: X Index] [Flags: VNZ] [Flow: branch]
	lda ($A1.b,X)		; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($C4.b,X)		; Load accumulator ($C4.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$72.b		; Compare #$72.b with X register [Reads: X Index] [Flags: ZCN]
	ror $7A.b,X		; Rotate right $7A.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	and ($36.b)		; AND accumulator with memory (indirect) ($36.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bmi L0656E2.b		; Branch if minus to L0656E2.b [Flow: branch]
	sec		; Set carry ; Set carry flag [Flags: C]
L0656AF:
.ACCU 16
.INDEX 16
	rep #$30
	lda #$0116.w		; Load #$0116.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	sta $0100.w		; Store accumulator to $0100.w [Reads: Accumulator]
	lda $00.b		; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00848C.l,X		; Load long $00848C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; Store accumulator to $0E.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30
	lda $00.b		; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $D69C.w,Y		; Load $D69C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda ($04.b)		; Load accumulator (indirect) ($04.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$0C.b		; Add #$0C.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $0800.w,X		; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	sta $0804.w,X		; Store accumulator to $0804.w,X [Reads: Accumulator, X Index]
	lda ($02.b),Y		; Load accumulator ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$FB.b		; Add #$FB.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $0801.w,X		; Store accumulator to $0801.w,X [Reads: Accumulator, X Index]
	clc		; Clear carry ; Clear carry flag [Flags: C]
L0656E2:
	adc #$08.b		; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $0805.w,X		; Store accumulator to $0805.w,X [Reads: Accumulator, X Index]
	lda $D6A6.w,Y		; Load $D6A6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0803.w,X		; Store accumulator to $0803.w,X [Reads: Accumulator, X Index]
	sta $0807.w,X		; Store accumulator to $0807.w,X [Reads: Accumulator, X Index]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
.INDEX 16
	rep #$10
	ldx $0E.b		; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $700359.l,X		; Load long $700359.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.INDEX 8
	sep #$10
	plx		; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bpl L06570A.b		; Branch if plus to L06570A.b [Flow: branch]
	lda #$F0.b		; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0801.w,X		; Store accumulator to $0801.w,X [Reads: Accumulator, X Index]
	sta $0805.w,X		; Store accumulator to $0805.w,X [Reads: Accumulator, X Index]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
L06570A:
	lda $D69F.w,Y		; Load $D69F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0802.w,X		; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$10.b		; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $0806.w,X		; Store accumulator to $0806.w,X [Reads: Accumulator, X Index]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A20.w,X		; Store accumulator to $0A20.w,X [Reads: Accumulator, X Index]
	sta $0A21.w,X		; Store accumulator to $0A21.w,X [Reads: Accumulator, X Index]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$08.b		; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda ($04.b)		; Load accumulator (indirect) ($04.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$FB.b		; Add #$FB.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $0800.w,X		; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	lda ($02.b),Y		; Load accumulator ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$0A.b		; Add #$0A.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $0801.w,X		; Store accumulator to $0801.w,X [Reads: Accumulator, X Index]
	lda $D6A9.w,Y		; Load $D6A9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0803.w,X		; Store accumulator to $0803.w,X [Reads: Accumulator, X Index]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
.INDEX 16
	rep #$10
	ldx $0E.b		; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $70035A.l,X		; Load long $70035A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.INDEX 8
	sep #$10
	plx		; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bpl L065756.b		; Branch if plus to L065756.b [Flow: branch]
	lda #$F0.b		; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0801.w,X		; Store accumulator to $0801.w,X [Reads: Accumulator, X Index]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
L065756:
	lda $D6A3.w,Y		; Load $D6A3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0802.w,X		; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A20.w,X		; Store accumulator to $0A20.w,X [Reads: Accumulator, X Index]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$04.b		; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda ($04.b)		; Load accumulator (indirect) ($04.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0800.w,X		; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	sta $0804.w,X		; Store accumulator to $0804.w,X [Reads: Accumulator, X Index]
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0802.w,X		; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
L065779:
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0806.w,X		; Store accumulator to $0806.w,X [Reads: Accumulator, X Index]
	lda $D6AC.w,Y		; Load $D6AC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0803.w,X		; Store accumulator to $0803.w,X [Reads: Accumulator, X Index]
	ora #$40.b		; Logical OR #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0807.w,X		; Store accumulator to $0807.w,X [Reads: Accumulator, X Index]
	lda ($02.b),Y		; Load accumulator ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0801.w,X		; Store accumulator to $0801.w,X [Reads: Accumulator, X Index]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$08.b		; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $0805.w,X		; Store accumulator to $0805.w,X [Reads: Accumulator, X Index]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A20.w,X		; Store accumulator to $0A20.w,X [Reads: Accumulator, X Index]
	sta $0A21.w,X		; Store accumulator to $0A21.w,X [Reads: Accumulator, X Index]
.ACCU 16
.INDEX 16
	rep #$30
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
L0657A5:
	lda $00.b		; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0800.w		; Store accumulator to $0800.w [Reads: Accumulator]
L0657AA:
	lda $01.b		; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0801.w		; Store accumulator to $0801.w [Reads: Accumulator]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$A500.w		; Load #$A500.w into X register [Writes: X Index] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$F008.w		; Logical AND #$F008.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($E8.b,X)		; Logical OR ($E8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $D7A3.w,X		; Load $D7A3.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0802.w		; Store accumulator to $0802.w [Reads: Accumulator]
	plx		; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$8D7E.w		; Load #$8D7E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $08.b,S		; OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda #$8D02.w		; Load #$8D02.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $600A.w		; Jump to subroutine at $600A.w [Writes: Stack Pointer] [Flow: call]
	bne L065779.b		; Branch if not equal to L065779.b [Flow: branch]
	lda $BDBC.w		; Load $BDBC.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $BEAF.w		; Load $BEAF.w into X register [Writes: X Index] [Flags: ZN]
	lda $1004C0.l,X		; Load long $1004C0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	trb $040C.w		; Test and reset bits $040C.w [Reads: Accumulator] [Flags: Z]
	jsr ($30C2.w,X)		; Jump to subroutine indirect indexed ($30C2.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	lda $02.b		; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $08.b		; Store accumulator to $08.b [Reads: Accumulator]
	lda $04.b		; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $0A.b		; Store accumulator to $0A.b [Reads: Accumulator]
	ldx $0E.b		; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $700405.l,X		; Load long $700405.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$FFFF.w		; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L0657F5.b		; Branch if not equal to L0657F5.b [Flow: branch]
	jmp L065883.w		; Jump to L065883.w [Flow: jump]
L0657F5:
	cmp #$03E8.w		; Compare #$03E8.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcc L065805.b		; Branch if carry clear to L065805.b [Flow: branch]
	lda #$0009.w		; Load #$0009.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	sta $04.b		; Store accumulator to $04.b [Reads: Accumulator]
	sta $06.b		; Store accumulator to $06.b [Reads: Accumulator]
	bra L06582A.b		; Branch always to L06582A.b [Flow: branch]
L065805:
	ldy #$0000.w		; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
L065808:
	cmp #$000A.w		; Compare #$000A.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcc L065814.b		; Branch if carry clear to L065814.b [Flow: branch]
	sec		; Set carry ; Set carry flag [Flags: C]
	sbc #$000A.w		; Subtract #$000A.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bra L065808.b		; Branch always to L065808.b [Flow: branch]
L065814:
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$0000.w		; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
L06581A:
	cmp #$000A.w		; Compare #$000A.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcc L065826.b		; Branch if carry clear to L065826.b [Flow: branch]
	sec		; Set carry ; Set carry flag [Flags: C]
	sbc #$000A.w		; Subtract #$000A.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bra L06581A.b		; Branch always to L06581A.b [Flow: branch]
L065826:
	sta $04.b		; Store accumulator to $04.b [Reads: Accumulator]
	sty $06.b		; Store Y register to $06.b [Reads: Y Index]
L06582A:
	ldx #$0004.w		; Load #$0004.w into X register [Writes: X Index] [Flags: ZN]
	lda $06.b		; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bne L065839.b		; Branch if not equal to L065839.b [Flow: branch]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $04.b		; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bne L065839.b		; Branch if not equal to L065839.b [Flow: branch]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
L065839:
.ACCU 8
.INDEX 8
	sep #$30
	lda $00.b		; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $D7D5.w,Y		; Load $D7D5.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
L065843:
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $02.b,X		; Load $02.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $D7CB.w,X		; Load $D7CB.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0802.w,Y		; Store accumulator to $0802.w,Y [Reads: Accumulator, Y Index]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $00.b		; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda ($08.b),Y		; Load accumulator ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$10.b		; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sta $0801.w,Y		; Store accumulator to $0801.w,Y [Reads: Accumulator, Y Index]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda ($0A.b)		; Load accumulator (indirect) ($0A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $D7D8.w,X		; Add $D7D8.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $0800.w,Y		; Store accumulator to $0800.w,Y [Reads: Accumulator, Y Index]
	lda #$3C.b		; Load #$3C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0803.w,Y		; Store accumulator to $0803.w,Y [Reads: Accumulator, Y Index]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A20.w,Y		; Store accumulator to $0A20.w,Y [Reads: Accumulator, Y Index]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	plx		; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bpl L065843.b		; Branch if plus to L065843.b [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30
L065883:
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $04.b		; Store accumulator to $04.b [Reads: Accumulator]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $11.b		; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $00879C.l		; Jump to subroutine long $00879C.l [Writes: Stack Pointer] [Flow: call]
	stz $0CD8.w		; Store zero to $0CD8.w
	ora ($D9.b),Y		; OR accumulator with memory ($D9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $D928.w		; Test and set bits $D928.w [Reads: Accumulator] [Flags: Z]
	tsb $DA4D.w		; Test and set bits $DA4D.w [Reads: Accumulator] [Flags: Z]
	tsb $F922.w		; Test and set bits $F922.w [Reads: Accumulator] [Flags: Z]
	cmp $A90C.w		; Compare $A90C.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	ora ($8D.b,X)		; Logical OR ($8D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	plp		; [PATTERN: Memory clearing operation] Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	ora ($9C.b,X)		; Logical OR ($9C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $0B		; Invalid branch target (bpl L0658B3) ; Branch if plus to $10, $0B [Flow: branch]
	stz $0B12.w		; Store zero to $0B12.w
	stz $0B15.w		; Store zero to $0B15.w
	stz $00CA.w		; [PATTERN: Memory clearing operation] Store zero to $00CA.w
	stz $00CC.w		; Store zero to $00CC.w
	lda #$8D83.w		; Load #$8D83.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($0B.b),Y		; OR accumulator with memory ($0B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30
	lda #$01F0.w		; Load #$01F0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0630.w		; Store accumulator to $0630.w [Reads: Accumulator]
	stz $E4.b		; Store zero to $E4.b
	lda $C8.b		; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00848C.l,X		; Load long $00848C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0200.w		; Store accumulator to $0200.w [Reads: Accumulator]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy #$0000.w		; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
L0658D3:
	sta $700000.l,X		; Store accumulator (long,X) $700000.l,X [Reads: Accumulator, X Index]
	sta $700100.l,X		; Store accumulator (long,X) $700100.l,X [Reads: Accumulator, X Index]
	sta $700200.l,X		; Store accumulator (long,X) $700200.l,X [Reads: Accumulator, X Index]
	sta $700300.l,X		; Store accumulator (long,X) $700300.l,X [Reads: Accumulator, X Index]
	sta $700400.l,X		; Store accumulator (long,X) $700400.l,X [Reads: Accumulator, X Index]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy #$0100.w		; Compare #$0100.w with Y register [Reads: Y Index] [Flags: ZCN]
	bne L0658D3.b		; Branch if not equal to L0658D3.b [Flow: branch]
	ldx $0200.w		; Load $0200.w into X register [Writes: X Index] [Flags: ZN]
	lda #$00A9.w		; Load #$00A9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7003D9.l,X		; Store accumulator (long,X) $7003D9.l,X [Reads: Accumulator, X Index]
	sta $7003DB.l,X		; Store accumulator (long,X) $7003DB.l,X [Reads: Accumulator, X Index]
	sta $7003DD.l,X		; Store accumulator (long,X) $7003DD.l,X [Reads: Accumulator, X Index]
	sta $7003DF.l,X		; Store accumulator (long,X) $7003DF.l,X [Reads: Accumulator, X Index]
	sta $7003E1.l,X		; Store accumulator (long,X) $7003E1.l,X [Reads: Accumulator, X Index]
	sta $7003E3.l,X		; Store accumulator (long,X) $7003E3.l,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30
	jsr L064E1B.w		; Jump to subroutine at L064E1B.w [Writes: Stack Pointer] [Flow: call]
	lda #$FFFF.w		; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1006.w,X		; Store accumulator to $1006.w,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr L06452E.w		; Jump to subroutine at L06452E.w [Writes: Stack Pointer] [Flow: call]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$05.b		; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr L06452E.w		; Jump to subroutine at L06452E.w [Writes: Stack Pointer] [Flow: call]
	lda #$0F.b		; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $13.b		; Store accumulator to $13.b [Reads: Accumulator]
	stz $0710.w		; Store zero to $0710.w
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $07.b		; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZCN]
	eor $595909.l,X		; Exclusive OR accumulator with memory (long,X) $595909.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $1E1D.w		; Test and reset bits $1E1D.w [Reads: Accumulator] [Flags: Z]
	ora $602120.l,X		; Logical OR long $602120.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $59.b,S		; AND accumulator with stack relative $59.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $7776.w,Y		; Exclusive OR accumulator with memory $7776.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sei		; Disable interrupts ; Set interrupt disable flag [Flags: I]
	adc $597A.w,Y		; Add $597A.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	eor $0059.w,Y		; Exclusive OR accumulator with memory $0059.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $04.b,S		; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $10.b		; Logical OR $10.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b),Y		; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($59.b,S),Y		; OR accumulator (stack relative indirect indexed) ($59.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $5F24.w,Y		; Exclusive OR accumulator with memory $5F24.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $27.b		; Rotate left $27.b [Reads: Direct Page] [Flags: ZCN]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	and #$2A.b		; Logical AND #$2A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	bit $592D.w		; Test bits $592D.w with accumulator [Reads: Accumulator] [Flags: VNZ]
	eor $7C7B.w,Y		; Exclusive OR accumulator with memory $7C7B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $7F7E.w,X		; Add $7F7E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	eor $5959.w,Y		; Exclusive OR accumulator with memory $5959.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0E0D.w		; Test and set bits $0E0D.w [Reads: Accumulator] [Flags: Z]
	ora $424140.l		; OR accumulator with memory (long) $424140.l [Writes: Accumulator] [Flags: ZN]
	eor $5959.w,Y		; Exclusive OR accumulator with memory $5959.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $302F.w		; Rotate left $302F.w [Flags: ZCN]
	and ($32.b),Y		; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($40.b,S),Y		; AND accumulator (stack relative indirect indexed) ($40.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($42.b,X)		; Exclusive OR accumulator with memory ($42.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	eor $5959.w,Y		; Exclusive OR accumulator with memory $5959.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($3F.b,X)		; Add with carry ($3F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	eor $46.b		; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $5959.w,Y		; Exclusive OR accumulator with memory $5959.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $1514.w,Y		; Exclusive OR accumulator with memory $1514.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $17.b,X		; Arithmetic shift left $17.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	ora $5944.w,Y		; OR accumulator with memory $5944.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $59596F.l		; Add with carry (long) $59596F.l [Writes: Accumulator] [Flags: VCNZ]
	eor $5959.w,Y		; Exclusive OR accumulator with memory $5959.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5A59.w,Y		; Exclusive OR accumulator with memory $5A59.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	mvp $6F,$59		; Move block positive $6F,$59 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	adc $5A5959.l		; Add with carry (long) $5A5959.l [Writes: Accumulator] [Flags: VCNZ]
	mvp $6F,$59		; Move block positive $6F,$59 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	adc $595959.l		; Add with carry (long) $595959.l [Writes: Accumulator] [Flags: VCNZ]
	eor $5959.w,Y		; Exclusive OR accumulator with memory $5959.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5A59.w,Y		; Exclusive OR accumulator with memory $5A59.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $01		; Invalid branch target (beq L0659B8) ; Branch if equal to $F0, $01 [Flow: branch]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L0659BB.b		; Branch if plus to L0659BB.b [Flow: branch]
L0659BB:
	jsr $3000.w		; Jump to subroutine at $3000.w [Writes: Stack Pointer] [Flow: call]
	brk $40.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $50.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $90.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B0.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D0.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($10.b,X)		; Logical OR ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($20.b,X)		; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($30.b,X)		; Logical OR ($30.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($40.b,X)		; Logical OR ($40.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($50.b,X)		; Logical OR ($50.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($60.b,X)		; Logical OR ($60.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($70.b,X)		; Logical OR ($70.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($80.b,X)		; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($90.b,X)		; Logical OR ($90.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($A0.b,X)		; Logical OR ($A0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($B0.b,X)		; Logical OR ($B0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($C0.b,X)		; Logical OR ($C0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($D0.b,X)		; Logical OR ($D0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($E0.b,X)		; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $FF.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $83.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($A3.b,S),Y		; Store accumulator (stack relative indirect indexed) ($A3.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer]
	lda ($01.b,S),Y		; Load accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $00FF04.l,X		; Subtract with carry (long,X) $00FF04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora $00.b,S		; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $20.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $5F4F3F.l		; AND accumulator with memory (long) $5F4F3F.l [Writes: Accumulator] [Flags: ZN]
	adc $01FFFF.l		; Add with carry (long) $01FFFF.l [Writes: Accumulator] [Flags: VCNZ]
	brk $FF.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0001.l,X		; Subtract with carry (long,X) $FF0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FF0001.l,X		; Subtract with carry (long,X) $FF0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FF0001.l,X		; Subtract with carry (long,X) $FF0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FF0001.l,X		; Subtract with carry (long,X) $FF0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FF0001.l,X		; Subtract with carry (long,X) $FF0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FF0001.l,X		; Subtract with carry (long,X) $FF0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FE0001.l,X		; Subtract with carry (long,X) $FE0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FE0002.l,X		; Subtract with carry (long,X) $FE0002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FE0002.l,X		; Subtract with carry (long,X) $FE0002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FE0002.l,X		; Subtract with carry (long,X) $FE0002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FC0002.l,X		; Subtract with carry (long,X) $FC0002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $AC0004.l,X		; Subtract with carry (long,X) $AC0004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora ($0B.b,S),Y		; OR accumulator (stack relative indirect indexed) ($0B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	beq L065A9F.b		; Branch if equal to L065A9F.b [Flow: branch]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$31.b		; Compare #$31.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L065A5D.b		; Branch if equal to L065A5D.b [Flow: branch]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$04.b		; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $0B13.w		; Store accumulator to $0B13.w [Reads: Accumulator]
L065A5D:
	lda $0B10.w		; Load $0B10.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $0630.w		; Load $0630.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $0CD9B5.l,X		; Compare accumulator (long,X) $0CD9B5.l,X [Reads: Accumulator, X Index] [Flags: ZCN]
	bne L065A83.b		; Branch if not equal to L065A83.b [Flow: branch]
.ACCU 8
	sep #$20
	lda #$30.b		; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B13.w		; Store accumulator to $0B13.w [Reads: Accumulator]
	lda $F0.b		; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bne L065A7E.b		; Branch if not equal to L065A7E.b [Flow: branch]
	stz $0B13.w		; Store zero to $0B13.w
L065A7E:
	jsr L065C8C.w		; Jump to subroutine at L065C8C.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $CA		; Invalid branch target (bra L065A4D) ; Branch always to $80, $CA [Flow: branch]
L065A83:
.ACCU 16
	rep #$20
	ldx $0B16.w		; Load $0B16.w into X register [Writes: X Index] [Flags: ZN]
	bne L065A8C.b		; Branch if not equal to L065A8C.b [Flow: branch]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
L065A8C:
	lda $0630.w		; Load $0630.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tyx		; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $0CDA19.l,X		; Add long $0CDA19.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	and #$01FF.w		; Logical AND #$01FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0630.w		; Store accumulator to $0630.w [Reads: Accumulator]
.ACCU 8
	sep #$20
	bra L065AA2.b		; Branch always to L065AA2.b [Flow: branch]
L065A9F:
	jsr L065C8C.w		; Jump to subroutine at L065C8C.w [Writes: Stack Pointer] [Flow: call]
L065AA2:
	lda $0B14.w		; Load $0B14.w into accumulator [Writes: Accumulator] [Flags: ZN]
	beq L065ACB.b		; Branch if equal to L065ACB.b [Flow: branch]
	ldx $0B15.w		; Load $0B15.w into X register [Writes: X Index] [Flags: ZN]
	ldy #$02.b		; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0B11.w		; Load $0B11.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $0CDA01.l,X		; Compare accumulator (long,X) $0CDA01.l,X [Reads: Accumulator, X Index] [Flags: ZCN]
	bne L065ABD.b		; Branch if not equal to L065ABD.b [Flow: branch]
	stz $0B14.w		; Store zero to $0B14.w
	jsr L065CBF.w		; Jump to subroutine at L065CBF.w [Writes: Stack Pointer] [Flow: call]
	bra L065AA2.b		; Branch always to L065AA2.b [Flow: branch]
L065ABD:
	bmi L065AC1.b		; Branch if minus to L065AC1.b [Flow: branch]
	ldy #$FE.b		; Load #$FE.b into Y register [Writes: Y Index] [Flags: ZN]
L065AC1:
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $0B11.w		; Add $0B11.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $0B11.w		; Store accumulator to $0B11.w [Reads: Accumulator]
	bra L065ACE.b		; Branch always to L065ACE.b [Flow: branch]
L065ACB:
	jsr L065CBF.w		; Jump to subroutine at L065CBF.w [Writes: Stack Pointer] [Flow: call]
L065ACE:
	ldx #$00.b		; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	txy		; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
L065AD5:
	lda $00.b		; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0800.w,Y		; Store accumulator to $0800.w,Y [Reads: Accumulator, Y Index]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$08.b		; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	lda $0B11.w		; Load $0B11.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0801.w,Y		; Store accumulator to $0801.w,Y [Reads: Accumulator, Y Index]
	lda #$2E.b		; Load #$2E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0802.w,Y		; Store accumulator to $0802.w,Y [Reads: Accumulator, Y Index]
	lda #$3C.b		; Load #$3C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0803.w,Y		; Store accumulator to $0803.w,Y [Reads: Accumulator, Y Index]
	stz $0A20.w,X		; Store zero to $0A20.w,X [Reads: X Index]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$1A.b		; Compare #$1A.b with X register [Reads: X Index] [Flags: ZCN]
	bne L065AD5.b		; Branch if not equal to L065AD5.b [Flow: branch]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0B12.w		; Load $0B12.w into X register [Writes: X Index] [Flags: ZN]
	lda $0CDA13.l,X		; Load long $0CDA13.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0800.w,Y		; Store accumulator to $0800.w,Y [Reads: Accumulator, Y Index]
	lda #$58.b		; Load #$58.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0801.w,Y		; Store accumulator to $0801.w,Y [Reads: Accumulator, Y Index]
	plx		; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$29.b		; Load #$29.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0802.w,Y		; Store accumulator to $0802.w,Y [Reads: Accumulator, Y Index]
	lda #$0C.b		; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0803.w,Y		; Store accumulator to $0803.w,Y [Reads: Accumulator, Y Index]
	stz $0A20.w,X		; Store zero to $0A20.w,X [Reads: X Index]
	lda $0B13.w		; Load $0B13.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0B14.w		; Logical OR $0B14.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bne L065B36.b		; Branch if not equal to L065B36.b [Flow: branch]
	lda $F4.b		; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L065B2A.b		; Branch if equal to L065B2A.b [Flow: branch]
	jmp L065BB1.w		; Jump to L065BB1.w [Flow: jump]
L065B2A:
	lda $F4.b		; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$C0.b		; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bne L065B39.b		; Branch if not equal to L065B39.b [Flow: branch]
	lda $F6.b		; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$C0.b		; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bne L065B39.b		; Branch if not equal to L065B39.b [Flow: branch]
L065B36:
	jmp L065BD9.w		; Jump to L065BD9.w [Flow: jump]
L065B39:
	lda #$2B.b		; Load #$2B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; Store accumulator to $012E.w [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30
	lda $0B15.w		; Load $0B15.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0CDA0B.l,X		; Load long $0CDA0B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $0B10.w		; Add $0B10.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	and #$00FF.w		; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 8
	sep #$20
	lda $0CD935.l,X		; Load long $0CD935.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$5A.b		; Compare #$5A.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L065B6C.b		; Branch if equal to L065B6C.b [Flow: branch]
	cmp #$44.b		; Compare #$44.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L065B7D.b		; Branch if equal to L065B7D.b [Flow: branch]
	cmp #$6F.b		; Compare #$6F.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L065BB1.b		; Branch if equal to L065BB1.b [Flow: branch]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	stz $01.b		; Store zero to $01.b
	bra L065B8C.b		; Branch always to L065B8C.b [Flow: branch]
L065B6C:
	lda $0B12.w		; Load $0B12.w into accumulator [Writes: Accumulator] [Flags: ZN]
	bne L065B78.b		; Branch if not equal to L065B78.b [Flow: branch]
	lda #$05.b		; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B12.w		; Store accumulator to $0B12.w [Reads: Accumulator]
	bra L065BD9.b		; Branch always to L065BD9.b [Flow: branch]
L065B78:
	dec $0B12.w		; Decrement $0B12.w [Flags: ZN]
	bra L065BD9.b		; Branch always to L065BD9.b [Flow: branch]
L065B7D:
	inc $0B12.w		; Increment $0B12.w [Flags: ZN]
	lda $0B12.w		; Load $0B12.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L065B8A.b		; Branch if not equal to L065B8A.b [Flow: branch]
	stz $0B12.w		; Store zero to $0B12.w
L065B8A:
	bra L065BD9.b		; Branch always to L065BD9.b [Flow: branch]
L065B8C:
.ACCU 16
.INDEX 16
	rep #$30
	and #$000F.w		; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	lda $0B12.w		; Load $0B12.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $0200.w		; Add $0200.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$FFF0.w		; Logical AND #$FFF0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora $02.b		; Logical OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7003D9.l,X		; Store accumulator (long,X) $7003D9.l,X [Reads: Accumulator, X Index]
	jsr $DD30.w		; Jump to subroutine at $DD30.w [Writes: Stack Pointer] [Flow: call]
	bra L065B7D.b		; Branch always to L065B7D.b [Flow: branch]
L065BB1:
.ACCU 16
.INDEX 16
	rep #$30
	stz $02.b		; Store zero to $02.b
L065BB5:
	lda $0200.w		; Load $0200.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $02.b		; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7003D9.l,X		; Load long $7003D9.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$00A9.w		; Compare #$00A9.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L065BDC.b		; Branch if not equal to L065BDC.b [Flow: branch]
	lda $02.b		; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$000A.w		; Compare #$000A.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L065BD2.b		; Branch if equal to L065BD2.b [Flow: branch]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	bra L065BB5.b		; Branch always to L065BB5.b [Flow: branch]
L065BD2:
.ACCU 8
	sep #$20
	lda #$3C.b		; Load #$3C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; Store accumulator to $012E.w [Reads: Accumulator]
L065BD9:
.ACCU 8
.INDEX 8
	sep #$30
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L065BDC:
.ACCU 8
.INDEX 8
	sep #$30
	phb		; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$04.b		; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30
	lda $C8.b		; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $701FFE.l		; Store accumulator (long) $701FFE.l [Reads: Accumulator]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00848A.l,X		; Load long $00848A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$55AA.w		; Load #$55AA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7003E5.l,X		; Store accumulator (long,X) $7003E5.l,X [Reads: Accumulator, X Index]
	lda #$F000.w		; Load #$F000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $70020C.l,X		; Store accumulator (long,X) $70020C.l,X [Reads: Accumulator, X Index]
	sta $70020E.l,X		; Store accumulator (long,X) $70020E.l,X [Reads: Accumulator, X Index]
	lda #$FFFF.w		; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $700405.l,X		; Store accumulator (long,X) $700405.l,X [Reads: Accumulator, X Index]
	lda #$001D.w		; Load #$001D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	ldy #$003C.w		; Load #$003C.w into Y register [Writes: Y Index] [Flags: ZN]
	cpx #$0000.w		; Compare #$0000.w with X register [Reads: X Index] [Flags: ZCN]
	bne L065C49.b		; Branch if not equal to L065C49.b [Flow: branch]
	lda $0083F8.l		; Load long $0083F8.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0060.w		; Compare #$0060.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L065C49.b		; Branch if equal to L065C49.b [Flow: branch]
	lda $7003D9.l		; Load long $7003D9.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0001.w		; Compare #$0001.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L065C49.b		; Branch if not equal to L065C49.b [Flow: branch]
	lda #$00F0.w		; Load #$00F0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $700212.l,X		; Store accumulator (long,X) $700212.l,X [Reads: Accumulator, X Index]
	lda #$1502.w		; Load #$1502.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7003C5.l,X		; Store accumulator (long,X) $7003C5.l,X [Reads: Accumulator, X Index]
	lda #$0100.w		; Load #$0100.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7003C7.l,X		; Store accumulator (long,X) $7003C7.l,X [Reads: Accumulator, X Index]
	ldy #$0000.w		; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
L065C49:
	lda $F48A.w,Y		; Load $F48A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $700340.l,X		; Store accumulator (long,X) $700340.l,X [Reads: Accumulator, X Index]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $02.b		; Decrement $02.b [Reads: Direct Page] [Flags: ZN]
	bpl L065C49.b		; Branch if plus to L065C49.b [Flow: branch]
	ldx $00.b		; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldy #$0000.w		; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
L065C5E:
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $700000.l,X		; Add long $700000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy #$027F.w		; Compare #$027F.w with Y register [Reads: Y Index] [Flags: ZCN]
	bne L065C5E.b		; Branch if not equal to L065C5E.b [Flow: branch]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	ldx $00.b		; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$5A5A.w		; Load #$5A5A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; Set carry ; Set carry flag [Flags: C]
	sbc $02.b		; Subtract $02.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sta $7004FE.l,X		; Store accumulator (long,X) $7004FE.l,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr L06522D.w		; Jump to subroutine at L06522D.w [Writes: Stack Pointer] [Flow: call]
	lda #$FF.b		; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0128.w		; Store accumulator to $0128.w [Reads: Accumulator]
	lda #$2C.b		; Load #$2C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; Store accumulator to $012E.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L065C8C:
.ACCU 8
.INDEX 8
	sep #$30
	lda $F0.b		; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L065CBC.b		; Branch if equal to L065CBC.b [Flow: branch]
	inc $0B13.w		; Increment $0B13.w [Flags: ZN]
	dec A		; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0B16.w		; Store accumulator to $0B16.w [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30
	and #$00FF.w		; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0B10.w		; Load $0B10.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $0CD9F5.l,X		; Add long $0CD9F5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	cmp $0CD9F9.l,X		; Compare accumulator (long,X) $0CD9F9.l,X [Reads: Accumulator, X Index] [Flags: ZCN]
	bne L065CB7.b		; Branch if not equal to L065CB7.b [Flow: branch]
	lda $0CD9FD.l,X		; Load long $0CD9FD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
L065CB7:
.ACCU 8
.INDEX 8
	sep #$30
	sta $0B10.w		; Store accumulator to $0B10.w [Reads: Accumulator]
L065CBC:
.ACCU 8
.INDEX 8
	sep #$30
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L065CBF:
	lda $F0.b		; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0C.b		; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L065D1A.b		; Branch if equal to L065D1A.b [Flow: branch]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora $0B15.w		; Logical OR $0B15.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$10.b		; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L065D1D.b		; Branch if equal to L065D1D.b [Flow: branch]
	lda $02.b		; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora $0B15.w		; Logical OR $0B15.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $0B10.w		; Load $0B10.w into X register [Writes: X Index] [Flags: ZN]
	cmp #$13.b		; Compare #$13.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L065D1D.b		; Branch if equal to L065D1D.b [Flow: branch]
	lda $02.b		; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
L065CE1:
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0B15.w		; Load $0B15.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $0CDA04.l,X		; Add long $0CDA04.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	cmp $0CDA06.l,X		; Compare accumulator (long,X) $0CDA06.l,X [Reads: Accumulator, X Index] [Flags: ZCN]
	bne L065CF4.b		; Branch if not equal to L065CF4.b [Flow: branch]
	lda $0CDA08.l,X		; Load long $0CDA08.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
L065CF4:
	sta $0B15.w		; Store accumulator to $0B15.w [Reads: Accumulator]
	bra L065D15.b		; Branch always to L065D15.b [Flow: branch]
	stx $01.b		; Store X register to $01.b [Reads: X Index]
	ldx $0B15.w		; Load $0B15.w into X register [Writes: X Index] [Flags: ZN]
	lda $0CDA0B.l,X		; Load long $0CDA0B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $0B10.w		; Add $0B10.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	and #$FF.b		; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0CD935.l,X		; Load long $0CD935.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$59.b		; Compare #$59.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L065D15.b		; Branch if not equal to L065D15.b [Flow: branch]
	lda $01.b		; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bra L065CE1.b		; Branch always to L065CE1.b [Flow: branch]
L065D15:
	inc $0B14.w		; Increment $0B14.w [Flags: ZN]
	bra L065D1D.b		; Branch always to L065D1D.b [Flow: branch]
L065D1A:
	stz $00CA.w		; Store zero to $00CA.w
L065D1D:
	lda $0002.w		; Load $0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00CB.w		; Store accumulator to $00CB.w [Reads: Accumulator]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $00.b		; Store Y register to $00.b [Reads: Y Index]
	stx $00.b		; Store X register to $00.b [Reads: X Index]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $8A.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8E.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($19.b,X)		; Add with carry ($19.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	bit $DD.b		; Test bits $DD.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $1002.w		; Store accumulator to $1002.w [Reads: Accumulator]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$20.b		; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	brk $EB.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $1008.w		; Store accumulator to $1008.w [Reads: Accumulator]
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($8D.b,X)		; Logical OR ($8D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $10.b		; Test and set bits $10.b [Reads: Accumulator] [Flags: Z]
	sta $100A.w		; Store accumulator to $100A.w [Reads: Accumulator]
	lda $7003D9.l,X		; Load long $7003D9.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$00.b		; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sta $1006.w		; Store accumulator to $1006.w [Reads: Accumulator]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$10.b		; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	brk $8D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $E210.w		; Test and set bits $E210.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A9		; Invalid branch target (bmi L065D0C) ; Branch if minus to $30, $A9 [Flow: branch]
	sbc $100E8D.l,X		; Subtract with carry (long,X) $100E8D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; Store accumulator to $14.b [Reads: Accumulator]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($0B.b),Y		; OR accumulator with memory ($0B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $19.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ora $1D69.w,X		; OR accumulator with memory $1D69.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora $1D6B.w,X		; OR accumulator with memory $1D6B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $5E1D.w,X		; Exclusive OR accumulator with memory $5E1D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1C30.w,X		; OR accumulator with memory $1C30.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($1C.b),Y		; AND accumulator with memory ($1C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($1C.b)		; AND accumulator with memory (indirect) ($1C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($1C.b,S),Y		; AND accumulator (stack relative indirect indexed) ($1C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $1C.b,X		; Test bits $1C.b,X [Reads: Direct Page, X Index] [Flags: VNZ] [Flow: branch]
	and $1C.b,X		; Logical AND $1C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	rol $1C.b,X		; Rotate left $1C.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora ($2B.b),Y		; OR accumulator with memory ($2B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $19.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; Disable interrupts ; Set interrupt disable flag [Flags: I]
	ora $1D79.w,X		; OR accumulator with memory $1D79.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	ora $1D7B.w,X		; OR accumulator with memory $1D7B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and [$1C.b],Y		; AND accumulator with memory (long indexed) [$1C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; Set carry ; Set carry flag [Flags: C]
	trb $1C39.w		; Test and reset bits $1C39.w [Reads: Accumulator] [Flags: Z]
	dec A		; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	trb $1C3B.w		; Test and reset bits $1C3B.w [Reads: Accumulator] [Flags: Z]
	bit $3D1C.w,X		; Test bits $3D1C.w,X [Reads: X Index] [Flags: VNZ] [Flow: branch]
	trb $1C3E.w		; Test and reset bits $1C3E.w [Reads: Accumulator] [Flags: Z]
	and $46111C.l,X		; AND accumulator with memory (long,X) $46111C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $25.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$18.b],Y		; Subtract with carry (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $19.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($19.b,X)		; Logical OR ($19.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $19.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $19.b,S		; OR accumulator with stack relative $19.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $19.b		; Test and set bits $19.b [Reads: Accumulator] [Flags: Z]
	ora $19.b		; Logical OR $19.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $19.b		; Logical OR $19.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $19.b		; Arithmetic shift left $19.b [Reads: Direct Page] [Flags: ZCN]
	ora $19.b		; Logical OR $19.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$19.b]		; OR accumulator with memory (long) [$19.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$59.b]		; OR accumulator with memory (long) [$59.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $19.b		; Logical OR $19.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $1909.w,Y		; OR accumulator with memory $1909.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora $190B.w,Y		; OR accumulator with memory $190B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $F019.w		; Test and set bits $F019.w [Reads: Accumulator] [Flags: Z]
	trb $6611.w		; Test and reset bits $6611.w [Reads: Accumulator] [Flags: Z]
	brk $23.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0E19.w		; Logical OR $0E19.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $18F9.w,Y		; OR accumulator with memory $18F9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $191039.l		; OR accumulator with memory (long) $191039.l [Writes: Accumulator] [Flags: ZN]
	ora ($19.b),Y		; OR accumulator with memory ($19.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($19.b)		; OR accumulator with memory (indirect) ($19.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($19.b,S),Y		; OR accumulator (stack relative indirect indexed) ($19.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $19.b		; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	ora $19.b,X		; OR accumulator with memory $19.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	plx		; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cli		; Clear interupt ; Clear interrupt disable flag [Flags: I]
	asl $19.b,X		; Arithmetic shift left $19.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora [$19.b],Y		; OR accumulator with memory (long indexed) [$19.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	ora $18FB.w,Y		; OR accumulator with memory $18FB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1A19.w,Y		; OR accumulator with memory $1A19.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $8611.w,Y		; OR accumulator with memory $8611.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $23.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	eor $391B19.l,X		; Exclusive OR accumulator with memory (long,X) $391B19.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	trb $1D39.w		; Test and reset bits $1D39.w [Reads: Accumulator] [Flags: Z]
	ora $191E.w,Y		; OR accumulator with memory $191E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $192019.l,X		; Logical OR long $192019.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($19.b,X)		; Logical AND ($19.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $195F19.l		; Jump to subroutine long $195F19.l [Writes: Stack Pointer] [Flow: call]
	eor $192319.l,X		; Exclusive OR accumulator with memory (long,X) $192319.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $19.b		; Test bits $19.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	and $19.b		; Logical AND $19.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $19.b		; Rotate left $19.b [Reads: Direct Page] [Flags: ZCN]
	and [$19.b]		; AND accumulator with memory (long) [$19.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	ora $A811.w,Y		; OR accumulator with memory $A811.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $1F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$39.b		; Logical AND #$39.b with accumulator [Writes: Accumulator] [Flags: ZN]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	and $192B.w,Y		; AND accumulator with memory $192B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $2C19.w,X		; Arithmetic shift left $2C19.w,X [Reads: X Index] [Flags: ZCN]
	ora $192D.w,Y		; OR accumulator with memory $192D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; Set carry ; Set carry flag [Flags: C]
	ora $1922.w,Y		; OR accumulator with memory $1922.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $195F19.l,X		; Exclusive OR accumulator with memory (long,X) $195F19.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $19.b,S		; AND accumulator with stack relative $19.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr ($2E18.w,X)		; Jump to subroutine indirect indexed ($2E18.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $192F.w,Y		; OR accumulator with memory $192F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $19		; Invalid branch target (bmi L065E5E) ; Branch if minus to $30, $19 [Flow: branch]
	and ($19.b),Y		; AND accumulator with memory ($19.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($C7.b),Y		; OR accumulator with memory ($C7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $23.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($19.b)		; AND accumulator with memory (indirect) ($19.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($39.b,S),Y		; AND accumulator (stack relative indirect indexed) ($39.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $39.b,X		; Test bits $39.b,X [Reads: Direct Page, X Index] [Flags: VNZ] [Flow: branch]
	eor $191E19.l,X		; Exclusive OR accumulator with memory (long,X) $191E19.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $193619.l,X		; Logical OR long $193619.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and [$19.b],Y		; AND accumulator with memory (long indexed) [$19.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $195F19.l		; Jump to subroutine long $195F19.l [Writes: Stack Pointer] [Flow: call]
	and $2319.w,Y		; AND accumulator with memory $2319.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $9924.w,Y		; OR accumulator with memory $9924.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $193B.w,Y		; OR accumulator with memory $193B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $3D19.w,X		; Test bits $3D19.w,X [Reads: X Index] [Flags: VNZ] [Flow: branch]
	ora $193E.w,Y		; OR accumulator with memory $193E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($E7.b),Y		; OR accumulator with memory ($E7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $23.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $394019.l,X		; AND accumulator with memory (long,X) $394019.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($39.b,X)		; Exclusive OR accumulator with memory ($39.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	eor $194219.l,X		; Exclusive OR accumulator with memory (long,X) $194219.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $19.b,S		; Exclusive OR accumulator with stack relative $19.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$19		; Move block positive $45,$19 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $1946.w,Y		; OR accumulator with memory $1946.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$19.b]		; Exclusive OR accumulator with memory (long) [$19.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora $1949.w,Y		; OR accumulator with memory $1949.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora $194B.w,Y		; OR accumulator with memory $194B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $4D19.w		; Jump to $4D19.w [Flow: jump]
	ora $194E.w,Y		; OR accumulator with memory $194E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $061219.l		; Exclusive OR accumulator with memory (long) $061219.l [Writes: Accumulator] [Flags: ZN]
	brk $25.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $5018.w,X		; Subtract with carry $5018.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora $3951.w,Y		; OR accumulator with memory $3951.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $5298.w,Y		; Subtract with carry $5298.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	ora $1953.w,Y		; OR accumulator with memory $1953.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$19		; Move block negative $54,$19 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $1955.w,Y		; OR accumulator with memory $1955.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$19		; Move block negative $54,$19 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $1956.w,Y		; OR accumulator with memory $1956.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $57,$19		; Move block negative $57,$19 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $1958.w,Y		; OR accumulator with memory $1958.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5A19.w,Y		; Exclusive OR accumulator with memory $5A19.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $195B.w,Y		; OR accumulator with memory $195B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $261219.l		; Jump long to $261219.l [Flow: jump]
	brk $2B.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($18.b),Y		; Subtract with carry ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($18.b)		; Subtract with carry (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($18.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	pea $F518.w		; Push absolute address $F518.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	inc $18.b,X		; Increment memory $18.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $1D61.w,X		; OR accumulator with memory $1D61.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $62, $1D, $63		; Bank wrapping branch target ; Push effective relative address $62, $1D, $63 [Writes: Stack Pointer]
	ora $1D64.w,X		; OR accumulator with memory $1D64.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $1D.b		; Add $1D.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ror $1D.b		; Rotate right $1D.b [Reads: Direct Page] [Flags: ZCN]
	adc [$1D.b]		; Add with carry (long) [$1D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ora $1D69.w,X		; OR accumulator with memory $1D69.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora $1D6B.w,X		; OR accumulator with memory $1D6B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($6D1D.w)		; Jump indirect to ($6D1D.w) [Flow: jump]
	ora $1D6E.w,X		; OR accumulator with memory $1D6E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $4C121D.l		; Add with carry (long) $4C121D.l [Writes: Accumulator] [Flags: VCNZ]
	brk $1F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $1D		; Invalid branch target (bvs L065F14) ; Branch if overflow set to $70, $1D [Flow: branch]
	adc ($1D.b),Y		; Add with carry ($1D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	adc ($1D.b)		; Add with carry (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	adc ($1D.b,S),Y		; Add with carry (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
L065EFD:
	stz $1D.b,X		; Store zero to $1D.b,X [Reads: X Index]
	adc $1D.b,X		; Add $1D.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	ror $1D.b,X		; Rotate right $1D.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	adc [$1D.b],Y		; Add with carry (long indexed) [$1D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sei		; Disable interrupts ; Set interrupt disable flag [Flags: I]
	ora $1D79.w,X		; OR accumulator with memory $1D79.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	ora $1D7B.w,X		; OR accumulator with memory $1D7B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($7D1D.w,X)		; Jump indirect indexed to ($7D1D.w,X) [Reads: X Index] [Flow: jump]
	ora $1D7E.w,X		; OR accumulator with memory $1D7E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $80001D.l,X		; Add long $80001D.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	eor ($BE.b,X)		; Exclusive OR accumulator with memory ($BE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	lda $0110.w,X		; Load $0110.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $40.b		; Add $40.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ldx $0110.w,Y		; Load X register $0110.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	bit $BF.b		; Test bits $BF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	bpl L065F2A.b		; Branch if plus to L065F2A.b [Flow: branch]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

L065F2A:
	bit $BF.b		; Test bits $BF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	bcc L065F30.b		; Branch if carry clear to L065F30.b [Flow: branch]
	eor $40.b		; Exclusive OR $40.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
L065F30:
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ldx $0290.w,Y		; Load X register $0290.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ror A		; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
L065F35:
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0190.w,X		; Load $0190.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	brk $13.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($11.b,S),Y		; Load accumulator (stack relative indirect indexed) ($11.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $11.b,X		; Load Y register $11.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: ZN]
	ldy $51.b,X		; Load Y register $51.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: ZN]
	lda ($51.b,S),Y		; Load accumulator (stack relative indirect indexed) ($51.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $BD10.w,X		; Load $BD10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bpl L065EFD.b		; Branch if plus to L065EFD.b [Flow: branch]
	ora ($B4.b),Y		; OR accumulator with memory ($B4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($B4.b),Y		; OR accumulator with memory ($B4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($B3.b),Y		; Exclusive OR accumulator with memory ($B3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($01.b),Y		; Exclusive OR accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cli		; Clear interupt ; Clear interrupt disable flag [Flags: I]
	brk $05.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($11.b,S),Y		; Load accumulator (stack relative indirect indexed) ($11.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $11.b,X		; Load Y register $11.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: ZN]
	ldy $51.b,X		; Load Y register $51.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: ZN]
	ora ($60.b,X)		; Logical OR ($60.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $09.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bcs L065F71.b		; Branch if carry set to L065F71.b [Flow: branch]
	lda ($10.b),Y		; Load accumulator ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($10.b)		; Load accumulator (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($10.b,S),Y		; Load accumulator (stack relative indirect indexed) ($10.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $10.b,X		; Load Y register $10.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: ZN]
	ora ($80.b,X)		; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $0F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $10.b,X		; Load $10.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ldx $10.b,Y		; Load X register $10.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
L065F71:
	lda [$10.b],Y		; Load accumulator (long indexed) [$10.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clv		; Clear overflow ; Clear overflow flag [Flags: V]
	.db $10, $B9		; Invalid branch target (bpl L065F2F) ; Branch if plus to $10, $B9 [Flow: branch]
	.db $10, $BA		; Invalid branch target (bpl L065F32) ; Branch if plus to $10, $BA [Flow: branch]
	bpl L065F35.b		; Branch if plus to L065F35.b [Flow: branch]
	.db $10, $BC		; Invalid branch target (bpl L065F38) ; Branch if plus to $10, $BC [Flow: branch]
	.db $10, $01		; Invalid branch target (bpl L065F7F) ; Branch if plus to $10, $01 [Flow: branch]
	ldy #$00.b		; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	and $C9.b,X		; Logical AND $C9.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$CA.b		; Logical OR #$CA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$C9.b		; Logical OR #$C9.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$CA.b		; Logical OR #$CA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$C9.b		; Logical OR #$C9.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$CA.b		; Logical OR #$CA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$C9.b		; Logical OR #$C9.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$CA.b		; Logical OR #$CA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$FF.b		; Logical OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$E7.b		; Logical OR #$E7.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$E8.b		; Logical OR #$E8.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$E7.b		; Logical OR #$E7.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$E8.b		; Logical OR #$E8.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$E7.b		; Logical OR #$E7.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$E8.b		; Logical OR #$E8.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$E7.b		; Logical OR #$E7.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$E8.b		; Logical OR #$E8.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$E7.b		; Logical OR #$E7.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$E8.b		; Logical OR #$E8.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$E7.b		; Logical OR #$E7.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$E8.b		; Logical OR #$E8.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$E7.b		; Logical OR #$E7.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$E8.b		; Logical OR #$E8.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$E7.b		; Logical OR #$E7.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$E8.b		; Logical OR #$E8.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$E7.b		; Logical OR #$E7.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$E8.b		; Logical OR #$E8.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$01.b		; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$00.b		; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZCN]
	and $D9.b,X		; Logical AND $D9.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$DA.b		; Logical OR #$DA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$D9.b		; Logical OR #$D9.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$DA.b		; Logical OR #$DA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$D9.b		; Logical OR #$D9.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$DA.b		; Logical OR #$DA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$D9.b		; Logical OR #$D9.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$DA.b		; Logical OR #$DA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$D9.b		; Logical OR #$D9.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$DA.b		; Logical OR #$DA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$D9.b		; Logical OR #$D9.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$DA.b		; Logical OR #$DA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$D9.b		; Logical OR #$D9.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$DA.b		; Logical OR #$DA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$D9.b		; Logical OR #$D9.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$DA.b		; Logical OR #$DA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$D9.b		; Logical OR #$D9.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$DA.b		; Logical OR #$DA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$D9.b		; Logical OR #$D9.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$DA.b		; Logical OR #$DA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$D9.b		; Logical OR #$D9.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$DA.b		; Logical OR #$DA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$D9.b		; Logical OR #$D9.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$DA.b		; Logical OR #$DA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$D9.b		; Logical OR #$D9.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$DA.b		; Logical OR #$DA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$D9.b		; Logical OR #$D9.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$01.b		; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cpx #$00.b		; Compare #$00.b with X register [Reads: X Index] [Flags: ZCN]
	and $B1.b,X		; Logical AND $B1.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0DB2.w		; Logical OR $0DB2.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b),Y		; Load accumulator ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b)		; Load accumulator (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b),Y		; Load accumulator ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b)		; Load accumulator (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b),Y		; Load accumulator ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b)		; Load accumulator (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b),Y		; Load accumulator ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b)		; Load accumulator (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b),Y		; Load accumulator ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b)		; Load accumulator (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b),Y		; Load accumulator ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
L06600F:
	lda ($0D.b)		; Load accumulator (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b),Y		; Load accumulator ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b)		; Load accumulator (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b),Y		; Load accumulator ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b)		; Load accumulator (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b),Y		; Load accumulator ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b)		; Load accumulator (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b),Y		; Load accumulator ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b)		; Load accumulator (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b),Y		; Load accumulator ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b)		; Load accumulator (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b),Y		; Load accumulator ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b)		; Load accumulator (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($0D.b),Y		; Load accumulator ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
L06602B:
	cop $00.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $35.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$8D.b		; Compare #$8D.b with accumulator [Reads: Accumulator] [Flags: ZCN]
L066031:
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta $8DC9.w		; Store accumulator to $8DC9.w [Reads: Accumulator]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta $8DC9.w		; Store accumulator to $8DC9.w [Reads: Accumulator]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta $8DC9.w		; Store accumulator to $8DC9.w [Reads: Accumulator]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta $8DFF.w		; Store accumulator to $8DFF.w [Reads: Accumulator]
	sbc [$8D.b]		; Subtract with carry (long) [$8D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta $8DE7.w		; Store accumulator to $8DE7.w [Reads: Accumulator]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta $8DE7.w		; Store accumulator to $8DE7.w [Reads: Accumulator]
L06604B:
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta $8DE7.w		; Store accumulator to $8DE7.w [Reads: Accumulator]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta $8DE7.w		; Store accumulator to $8DE7.w [Reads: Accumulator]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta $8DE7.w		; Store accumulator to $8DE7.w [Reads: Accumulator]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta $8DE7.w		; Store accumulator to $8DE7.w [Reads: Accumulator]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta $8DE7.w		; Store accumulator to $8DE7.w [Reads: Accumulator]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta $8DE7.w		; Store accumulator to $8DE7.w [Reads: Accumulator]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta $2002.w		; Store accumulator to $2002.w [Reads: Accumulator]
	brk $0F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $90.b,X		; Load $90.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ldx $90.b,Y		; Load X register $90.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	lda [$90.b],Y		; Load accumulator (long indexed) [$90.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clv		; Clear overflow ; Clear overflow flag [Flags: V]
	bcc L06602B.b		; Branch if carry clear to L06602B.b [Flow: branch]
	.db $90, $BA		; Invalid branch target (bcc L06602E) ; Branch if carry clear to $90, $BA [Flow: branch]
	bcc L066031.b		; Branch if carry clear to L066031.b [Flow: branch]
	.db $90, $BC		; Invalid branch target (bcc L066034) ; Branch if carry clear to $90, $BC [Flow: branch]
	.db $90, $02		; Invalid branch target (bcc L06607C) ; Branch if carry clear to $90, $02 [Flow: branch]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	brk $09.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bcs L06600F.b		; Branch if carry set to L06600F.b [Flow: branch]
	lda ($90.b),Y		; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($90.b)		; Load accumulator (indirect) ($90.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($90.b,S),Y		; Load accumulator (stack relative indirect indexed) ($90.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $90.b,X		; Load Y register $90.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: ZN]
	cop $60.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $13.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($91.b,S),Y		; Load accumulator (stack relative indirect indexed) ($91.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $91.b,X		; Load Y register $91.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: ZN]
	ldy $D1.b,X		; Load Y register $D1.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: ZN]
	lda ($D1.b,S),Y		; Load accumulator (stack relative indirect indexed) ($D1.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $BD90.w,X		; Load $BD90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bcc L06604B.b		; Branch if carry clear to L06604B.b [Flow: branch]
	sta ($B4.b),Y		; Store accumulator ($B4.b),Y [Reads: Direct Page, Accumulator, Y Index]
	sta ($B4.b),Y		; Store accumulator ($B4.b),Y [Reads: Direct Page, Accumulator, Y Index]
	cmp ($B3.b),Y		; Compare accumulator ($B3.b),Y [Reads: Direct Page, Accumulator, Y Index] [Flags: ZCN]
	cmp ($02.b),Y		; Compare accumulator ($02.b),Y [Reads: Direct Page, Accumulator, Y Index] [Flags: ZCN]
	sei		; Disable interrupts ; Set interrupt disable flag [Flags: I]
	brk $05.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($91.b,S),Y		; Load accumulator (stack relative indirect indexed) ($91.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $91.b,X		; Load Y register $91.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: ZN]
	ldy $D1.b,X		; Load Y register $D1.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: ZN]
	cop $80.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $35.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $11		; Invalid branch target (beq L0660C0) ; Branch if equal to $F0, $11 [Flow: branch]
	sbc ($11.b),Y		; Subtract with carry ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $F0, $11		; Invalid branch target (beq L0660C4) ; Branch if equal to $F0, $11 [Flow: branch]
	sbc ($11.b),Y		; Subtract with carry ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $F0, $11		; Invalid branch target (beq L0660C8) ; Branch if equal to $F0, $11 [Flow: branch]
	sbc ($11.b),Y		; Subtract with carry ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $F0, $11		; Invalid branch target (beq L0660CC) ; Branch if equal to $F0, $11 [Flow: branch]
	sbc ($11.b),Y		; Subtract with carry ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $F0, $11		; Invalid branch target (beq L0660D0) ; Branch if equal to $F0, $11 [Flow: branch]
	sbc ($11.b),Y		; Subtract with carry ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $F0, $11		; Invalid branch target (beq L0660D4) ; Branch if equal to $F0, $11 [Flow: branch]
	sbc ($11.b),Y		; Subtract with carry ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $F0, $11		; Invalid branch target (beq L0660D8) ; Branch if equal to $F0, $11 [Flow: branch]
	sbc ($11.b),Y		; Subtract with carry ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $F0, $11		; Invalid branch target (beq L0660DC) ; Branch if equal to $F0, $11 [Flow: branch]
	sbc ($11.b),Y		; Subtract with carry ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $F0, $11		; Invalid branch target (beq L0660E0) ; Branch if equal to $F0, $11 [Flow: branch]
	sbc ($11.b),Y		; Subtract with carry ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $F0, $11		; Invalid branch target (beq L0660E4) ; Branch if equal to $F0, $11 [Flow: branch]
	sbc ($11.b),Y		; Subtract with carry ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $F0, $11		; Invalid branch target (beq L0660E8) ; Branch if equal to $F0, $11 [Flow: branch]
	sbc ($11.b),Y		; Subtract with carry ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $F0, $11		; Invalid branch target (beq L0660EC) ; Branch if equal to $F0, $11 [Flow: branch]
	sbc ($11.b),Y		; Subtract with carry ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $F0, $11		; Invalid branch target (beq L0660F0) ; Branch if equal to $F0, $11 [Flow: branch]
	sbc ($11.b),Y		; Subtract with carry ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $F0, $11		; Invalid branch target (beq L0660F4) ; Branch if equal to $F0, $11 [Flow: branch]
	cop $A0.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $35.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($11.b)		; Subtract with carry (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($11.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b)		; Subtract with carry (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($11.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b)		; Subtract with carry (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($11.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b)		; Subtract with carry (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($11.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b)		; Subtract with carry (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($11.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b)		; Subtract with carry (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($11.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b)		; Subtract with carry (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($11.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b)		; Subtract with carry (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($11.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b)		; Subtract with carry (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($11.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b)		; Subtract with carry (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($11.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b)		; Subtract with carry (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($11.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b)		; Subtract with carry (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($11.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b)		; Subtract with carry (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($11.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($11.b)		; Subtract with carry (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	ora ($3B.b,X)		; Logical OR ($3B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bra L06613A.b		; Branch always to L06613A.b [Flow: branch]
	inc $15.b,X		; Increment memory $15.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	pea $CB15.w		; Push absolute address $CB15.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ora $DB.b,X		; OR accumulator with memory $DB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DB.b,X		; OR accumulator with memory $DB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DB.b,X		; OR accumulator with memory $DB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DB.b,X		; OR accumulator with memory $DB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DB.b,X		; OR accumulator with memory $DB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $EB.b,X		; OR accumulator with memory $EB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $FB.b,X		; OR accumulator with memory $FB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $FD.b,X		; OR accumulator with memory $FD.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $FD.b,X		; OR accumulator with memory $FD.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $FD.b,X		; OR accumulator with memory $FD.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
L06613A:
	ora $01.b,X		; OR accumulator with memory $01.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	bit $1980.w,X		; Test bits $1980.w,X [Reads: X Index] [Flags: VNZ] [Flow: branch]
	sbc [$15.b],Y		; Subtract with carry (long indexed) [$15.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $15.b,X		; Subtract $15.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	jmp.w [$DC15]		; Jump long indirect [$DC15] [Flow: jump]
	ora $DC.b,X		; OR accumulator with memory $DC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DC.b,X		; OR accumulator with memory $DC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DC.b,X		; OR accumulator with memory $DC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DC.b,X		; OR accumulator with memory $DC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $B0.b,X		; OR accumulator with memory $B0.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $FC.b,X		; OR accumulator with memory $FC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $FE.b,X		; OR accumulator with memory $FE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $FE.b,X		; OR accumulator with memory $FE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $FE.b,X		; OR accumulator with memory $FE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,X		; OR accumulator with memory $01.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $1980.w,X		; AND accumulator with memory $1980.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	ora $CD.b,X		; OR accumulator with memory $CD.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DD.b,X		; OR accumulator with memory $DD.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DD.b,X		; OR accumulator with memory $DD.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DD.b,X		; OR accumulator with memory $DD.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DD.b,X		; OR accumulator with memory $DD.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DD.b,X		; OR accumulator with memory $DD.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DD.b,X		; OR accumulator with memory $DD.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $CC.b,X		; OR accumulator with memory $CC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $ED.b,X		; OR accumulator with memory $ED.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $BD.b,X		; OR accumulator with memory $BD.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	trb $BD.b		; Test and reset bits $BD.b [Reads: Accumulator] [Flags: Z]
	trb $FE.b		; Test and reset bits $FE.b [Reads: Accumulator] [Flags: Z]
	ora $00.b,X		; OR accumulator with memory $00.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	stz $2380.w,X		; Store zero to $2380.w,X [Reads: X Index]
	inc $15.b,X		; Increment memory $15.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	pea $CB15.w		; Push absolute address $CB15.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ora $DB.b,X		; OR accumulator with memory $DB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $E9.b,X		; OR accumulator with memory $E9.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $F9.b,X		; OR accumulator with memory $F9.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $CE.b,X		; OR accumulator with memory $CE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DE.b,X		; OR accumulator with memory $DE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DE.b,X		; OR accumulator with memory $DE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DE.b,X		; OR accumulator with memory $DE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DE.b,X		; OR accumulator with memory $DE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DE.b,X		; OR accumulator with memory $DE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DE.b,X		; OR accumulator with memory $DE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $CC.b,X		; OR accumulator with memory $CC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $EE.b,X		; OR accumulator with memory $EE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $BD.b,X		; OR accumulator with memory $BD.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	trb $BD.b		; Test and reset bits $BD.b [Reads: Accumulator] [Flags: Z]
	trb $BD.b		; Test and reset bits $BD.b [Reads: Accumulator] [Flags: Z]
	trb $00.b		; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	sta $F72380.l,X		; Store accumulator (long,X) $F72380.l,X [Reads: Accumulator, X Index]
	ora $F5.b,X		; OR accumulator with memory $F5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DC.b,X		; OR accumulator with memory $DC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DC.b,X		; OR accumulator with memory $DC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $EA.b,X		; OR accumulator with memory $EA.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $FA.b,X		; OR accumulator with memory $FA.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
L0661AE:
	ora $CF.b,X		; OR accumulator with memory $CF.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DF.b,X		; OR accumulator with memory $DF.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DF.b,X		; OR accumulator with memory $DF.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DF.b,X		; OR accumulator with memory $DF.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DF.b,X		; OR accumulator with memory $DF.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DF.b,X		; OR accumulator with memory $DF.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $DF.b,X		; OR accumulator with memory $DF.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $CC.b,X		; OR accumulator with memory $CC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $EF.b,X		; OR accumulator with memory $EF.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $BD.b,X		; OR accumulator with memory $BD.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	trb $BD.b		; Test and reset bits $BD.b [Reads: Accumulator] [Flags: Z]
	trb $BD.b		; Test and reset bits $BD.b [Reads: Accumulator] [Flags: Z]
	trb $FF.b		; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	.db $10, $42		; Invalid branch target (bpl L06620C) ; Branch if plus to $10, $42 [Flow: branch]
	brk $27.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit #$35.b		; Test bits #$35.b with accumulator [Reads: Accumulator] [Flags: Z]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $8B.b,X		; Logical AND $8B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $8C.b,X		; Logical AND $8C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $8B.b,X		; Logical AND $8B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $8C.b,X		; Logical AND $8C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $8B.b,X		; Logical AND $8B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $8C.b,X		; Logical AND $8C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $8B.b,X		; Logical AND $8B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $8C.b,X		; Logical AND $8C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $8B.b,X		; Logical AND $8B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $8C.b,X		; Logical AND $8C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $8B.b,X		; Logical AND $8B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $8C.b,X		; Logical AND $8C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $8B.b,X		; Logical AND $8B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $8C.b,X		; Logical AND $8C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $8B.b,X		; Logical AND $8B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $8C.b,X		; Logical AND $8C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $8A.b,X		; Logical AND $8A.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	adc $89.b,X		; Add $89.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $10.b,X		; Add $10.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	per L0664F8.w		; Push effective relative address L0664F8.w [Writes: Stack Pointer]
	sta $9A35.w,Y		; Store accumulator to $9A35.w,Y [Reads: Accumulator, Y Index]
	and $10.b,X		; Logical AND $10.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	stz $40.b		; Store zero to $40.b
	asl $347F.w,X		; Arithmetic shift left $347F.w,X [Reads: X Index] [Flags: ZCN]
	.db $10, $74		; Invalid branch target (bpl L066278) ; Branch if plus to $10, $74 [Flow: branch]
	brk $03.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txs		; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	adc $99.b,X		; Add $99.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $10.b,X		; Add $10.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $82, $00, $03		; Invalid branch target (brl L06650E) ; Branch always long to $82, $00, $03 [Flow: branch]
	lda #$35.b		; Load #$35.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and $10.b,X		; Logical AND $10.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	sty $40.b		; Store Y register to $40.b [Reads: Y Index]
	asl $347F.w,X		; Arithmetic shift left $347F.w,X [Reads: X Index] [Flags: ZCN]
	bpl L0661AE.b		; Branch if plus to L0661AE.b [Flow: branch]
	brk $03.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	adc $A9.b,X		; Add $A9.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $10.b,X		; Add $10.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	ldx #$00.b		; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	and [$9D.b]		; AND accumulator with memory (long) [$9D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $AD.b,X		; Logical AND $AD.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $9B.b,X		; Logical AND $9B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $9C.b,X		; Logical AND $9C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $9B.b,X		; Logical AND $9B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $9C.b,X		; Logical AND $9C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $9B.b,X		; Logical AND $9B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $9C.b,X		; Logical AND $9C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $9B.b,X		; Logical AND $9B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $9C.b,X		; Logical AND $9C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $9B.b,X		; Logical AND $9B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $9C.b,X		; Logical AND $9C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $9B.b,X		; Logical AND $9B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $9C.b,X		; Logical AND $9C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $9B.b,X		; Logical AND $9B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $9C.b,X		; Logical AND $9C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $9B.b,X		; Logical AND $9B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $9C.b,X		; Logical AND $9C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $AD.b,X		; Logical AND $AD.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	adc $9D.b,X		; Add $9D.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $10.b,X		; Add $10.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	rep #$00		; Reset processor status bits #$00 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	and [$AB.b]		; AND accumulator with memory (long) [$AB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $AC.b,X		; Logical AND $AC.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $AB.b,X		; Logical AND $AB.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $AC.b,X		; Logical AND $AC.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $AB.b,X		; Logical AND $AB.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $AC.b,X		; Logical AND $AC.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $AB.b,X		; Logical AND $AB.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $AC.b,X		; Logical AND $AC.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $AB.b,X		; Logical AND $AB.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $AC.b,X		; Logical AND $AC.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $AB.b,X		; Logical AND $AB.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $AC.b,X		; Logical AND $AC.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $AB.b,X		; Logical AND $AB.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $AC.b,X		; Logical AND $AC.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $AB.b,X		; Logical AND $AB.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $AC.b,X		; Logical AND $AC.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $AB.b,X		; Logical AND $AB.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $AC.b,X		; Logical AND $AC.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $AB.b,X		; Logical AND $AB.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	adc $AC.b,X		; Add $AC.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $10.b,X		; Add $10.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	sep #$00		; Set processor status bits #$00 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	ora ($83.b,X)		; Logical OR ($83.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $10.b,X		; Logical AND $10.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $40.b,S		; Subtract stack-relative $40.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	and ($85.b)		; AND accumulator with memory (indirect) ($85.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $10.b,X		; Logical AND $10.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $0100.w,X		; Subtract with carry $0100.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sty $35.b		; Store Y register to $35.b [Reads: Y Index]
	ora ($02.b),Y		; OR accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$22.b		; Compare #$22.b with Y register [Reads: Y Index] [Flags: ZCN]
	stx $35.b		; Store X register to $35.b [Reads: X Index]
	ora ($1D.b),Y		; OR accumulator with memory ($1D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$22.b		; Compare #$22.b with Y register [Reads: Y Index] [Flags: ZCN]
	stx $35.b,Y		; Store X register $35.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ora ($42.b,S),Y		; OR accumulator (stack relative indirect indexed) ($42.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($35.b,S),Y		; Store accumulator (stack relative indirect indexed) ($35.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer]
	ora ($43.b,S),Y		; OR accumulator (stack relative indirect indexed) ($43.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	and ($95.b)		; AND accumulator with memory (indirect) ($95.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $13.b,X		; Logical AND $13.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	eor $0100.w,X		; Exclusive OR accumulator with memory $0100.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $35.b,X		; Store Y register $35.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $00.b		; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $180B18.l		; OR accumulator with memory (long) $180B18.l [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	tsb $18.b		; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	and ($18.b,X)		; Logical AND ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $180418.l		; Jump to subroutine long $180418.l [Writes: Stack Pointer] [Flow: call]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	tsb $18.b		; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	cop $18.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $18.b,S		; AND accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $181B18.l,X		; Logical OR long $181B18.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $18		; Invalid branch target (bpl L0662EA) ; Branch if plus to $10, $18 [Flow: branch]
	sec		; Set carry ; Set carry flag [Flags: C]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	trb $18.b		; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	and ($18.b),Y		; AND accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $B918.w,Y		; Load $B918.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	and ($18.b)		; AND accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $18.b		; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	trb $18.b		; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	ora ($18.b)		; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($18.b,S),Y		; AND accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	per L0663B1.w		; Push effective relative address L0663B1.w [Writes: Stack Pointer]
	ora [$02.b],Y		; OR accumulator with memory (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	asl $0F18.w		; Arithmetic shift left $0F18.w [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $180B18.l		; OR accumulator with memory (long) $180B18.l [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	tsb $18.b		; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	and ($18.b,X)		; Logical AND ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	per L0663ED.w		; Push effective relative address L0663ED.w [Writes: Stack Pointer]
	ora [$12.b],Y		; OR accumulator with memory (long indexed) [$12.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	asl $1F18.w,X		; Arithmetic shift left $1F18.w,X [Reads: X Index] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sec		; Set carry ; Set carry flag [Flags: C]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $181B18.l,X		; Logical OR long $181B18.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $18		; Invalid branch target (bpl L066332) ; Branch if plus to $10, $18 [Flow: branch]
	sec		; Set carry ; Set carry flag [Flags: C]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	trb $18.b		; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	and ($18.b),Y		; AND accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $06.b,S		; Add with carry (stack relative) $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	brk $17.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $18.b		; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	and ($18.b,X)		; Logical AND ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $18.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $180418.l		; Jump to subroutine long $180418.l [Writes: Stack Pointer] [Flow: call]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $180B18.l		; OR accumulator with memory (long) $180B18.l [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	tsb $18.b		; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	and ($18.b,X)		; Logical AND ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $26.b,S		; Add with carry (stack relative) $26.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	brk $17.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $18.b		; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	and ($18.b),Y		; AND accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bpl L06635E.b		; Branch if plus to L06635E.b [Flow: branch]
	and ($18.b)		; AND accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $18.b		; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $181B18.l,X		; Logical OR long $181B18.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $18		; Invalid branch target (bpl L06636A) ; Branch if plus to $10, $18 [Flow: branch]
	sec		; Set carry ; Set carry flag [Flags: C]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	trb $18.b		; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	and ($18.b),Y		; AND accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $002961.l,X		; Subtract with carry (long,X) $002961.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	and $E7.b		; Logical AND $E7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
L06635E:
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($49.b,X)		; Add with carry ($49.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $25.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$18.b],Y		; Subtract with carry (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sta ($18.b),Y		; Store accumulator ($18.b),Y [Reads: Direct Page, Accumulator, Y Index]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($A9.b,X)		; Add with carry ($A9.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $25.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L0663B1:
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($C9.b,X)		; Add with carry ($C9.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $25.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sta ($18.b),Y		; Store accumulator ($18.b),Y [Reads: Direct Page, Accumulator, Y Index]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
L0663ED:
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $62, $29, $00		; Invalid branch target (per L06642D) ; Push effective relative address $62, $29, $00 [Writes: Stack Pointer]
	and $E9.b		; Logical AND $E9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
L06641D:
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	per L066477.w		; Push effective relative address L066477.w [Writes: Stack Pointer]
	and $F9.b		; Logical AND $F9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sta ($18.b),Y		; Store accumulator ($18.b),Y [Reads: Direct Page, Accumulator, Y Index]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $006560.l,X		; Subtract with carry (long,X) $006560.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora [$04.b],Y		; OR accumulator with memory (long indexed) [$04.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	and ($18.b,X)		; Logical AND ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $18.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $180418.l		; Jump to subroutine long $180418.l [Writes: Stack Pointer] [Flow: call]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $180B18.l		; OR accumulator with memory (long) $180B18.l [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	tsb $18.b		; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	and ($18.b,X)		; Logical AND ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	ora [$14.b],Y		; OR accumulator with memory (long indexed) [$14.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
L066477:
	clc		; Clear carry ; Clear carry flag [Flags: C]
	and ($18.b),Y		; AND accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bpl L066494.b		; Branch if plus to L066494.b [Flow: branch]
	and ($18.b)		; AND accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $18.b		; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $181B18.l,X		; Logical OR long $181B18.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $18		; Invalid branch target (bpl L0664A0) ; Branch if plus to $10, $18 [Flow: branch]
	sec		; Set carry ; Set carry flag [Flags: C]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	trb $18.b		; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	and ($18.b),Y		; AND accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($04.b,X)		; Add with carry ($04.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $2F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $18.b		; Rotate left $18.b [Reads: Direct Page] [Flags: ZCN]
L066494:
	ora [$18.b]		; OR accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $180218.l		; Load long $180218.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$18.b]		; OR accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $180B18.l		; OR accumulator with memory (long) $180B18.l [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	tsb $18.b		; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	and ($18.b,X)		; Logical AND ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $18.b,S		; OR accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $A918.w		; Arithmetic shift left $A918.w [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	asl $2418.w		; Arithmetic shift left $2418.w [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	rol $18.b		; Rotate left $18.b [Reads: Direct Page] [Flags: ZCN]
	brk $18.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $2318.w		; Logical OR $2318.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc ($24.b,X)		; Add with carry ($24.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $2F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $18.b,X		; Rotate left $18.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora [$18.b],Y		; OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $181218.l,X		; Load long $181218.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$18.b],Y		; OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $181B18.l,X		; Logical OR long $181B18.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bpl L0664F0.b		; Branch if plus to L0664F0.b [Flow: branch]
	sec		; Set carry ; Set carry flag [Flags: C]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	trb $18.b		; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	and ($18.b),Y		; AND accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($18.b,S),Y		; OR accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $A918.w,X		; Arithmetic shift left $A918.w,X [Reads: X Index] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sec		; Set carry ; Set carry flag [Flags: C]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	asl $3418.w,X		; Arithmetic shift left $3418.w,X [Reads: X Index] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	rol $18.b,X		; Rotate left $18.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
L0664F0:
	bpl L06650A.b		; Branch if plus to L06650A.b [Flow: branch]
	ora $3318.w,X		; OR accumulator with memory $3318.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc ($44.b,X)		; Add with carry ($44.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
L0664F8:
	brk $13.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $18.b,S		; AND accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $A918.w		; Arithmetic shift left $A918.w [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	tsb $18.b		; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	and ($18.b,X)		; Logical AND ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $18.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $180418.l		; Jump to subroutine long $180418.l [Writes: Stack Pointer] [Flow: call]
L06650A:
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $646118.l		; Add with carry (long) $646118.l [Writes: Accumulator] [Flags: VCNZ]
	brk $13.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($18.b,S),Y		; AND accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $A918.w,X		; Arithmetic shift left $A918.w,X [Reads: X Index] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	trb $18.b		; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	and ($18.b),Y		; AND accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bpl L066536.b		; Branch if plus to L066536.b [Flow: branch]
	and ($18.b)		; AND accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $18.b		; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $066318.l,X		; Add long $066318.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $07.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2418.w		; Jump to subroutine at $2418.w [Writes: Stack Pointer] [Flow: call]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda $182318.l		; Load long $182318.l into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $26.b,S		; Add with carry (stack relative) $26.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	brk $07.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L066536:
	.db $30, $18		; Invalid branch target (bmi L066550) ; Branch if minus to $30, $18 [Flow: branch]
	bit $18.b,X		; Test bits $18.b,X [Reads: Direct Page, X Index] [Flags: VNZ] [Flow: branch]
	lda $183318.l,X		; Load long $183318.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $00A761.l,X		; Subtract with carry (long,X) $00A761.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	and $E7.b		; Logical AND $E7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($C7.b,X)		; Add with carry ($C7.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $25.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$18.b],Y		; Subtract with carry (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sta ($18.b),Y		; Store accumulator ($18.b),Y [Reads: Direct Page, Accumulator, Y Index]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	per L06659D.w		; Push effective relative address L06659D.w [Writes: Stack Pointer]
	and $E8.b		; Logical AND $E8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
L06659D:
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	per L0665E7.w		; Push effective relative address L0665E7.w [Writes: Stack Pointer]
	and $F8.b		; Logical AND $F8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sta ($18.b),Y		; Store accumulator ($18.b),Y [Reads: Direct Page, Accumulator, Y Index]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
L0665E7:
	.db $62, $67, $00		; Invalid branch target (per L066651) ; Push effective relative address $62, $67, $00 [Writes: Stack Pointer]
	and $E9.b		; Logical AND $E9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	per L06669B.w		; Push effective relative address L06669B.w [Writes: Stack Pointer]
	and $F9.b		; Logical AND $F9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sta ($18.b),Y		; Store accumulator ($18.b),Y [Reads: Direct Page, Accumulator, Y Index]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $006560.l,X		; Subtract with carry (long,X) $006560.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora [$02.b],Y		; OR accumulator with memory (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	asl $0F18.w		; Arithmetic shift left $0F18.w [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $180B18.l		; OR accumulator with memory (long) $180B18.l [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	tsb $18.b		; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	and ($18.b,X)		; Logical AND ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	ora [$12.b],Y		; OR accumulator with memory (long indexed) [$12.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	asl $1F18.w,X		; Arithmetic shift left $1F18.w,X [Reads: X Index] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sec		; Set carry ; Set carry flag [Flags: C]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $181B18.l,X		; Logical OR long $181B18.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bpl L066686.b		; Branch if plus to L066686.b [Flow: branch]
	sec		; Set carry ; Set carry flag [Flags: C]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	trb $18.b		; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	and ($18.b),Y		; AND accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $06.b,S		; Add with carry (stack relative) $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	brk $07.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2418.w		; Jump to subroutine at $2418.w [Writes: Stack Pointer] [Flow: call]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda $182318.l		; Load long $182318.l into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $26.b,S		; Add with carry (stack relative) $26.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	brk $07.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $18		; Invalid branch target (bmi L06669E) ; Branch if minus to $30, $18 [Flow: branch]
L066686:
	bit $18.b,X		; Test bits $18.b,X [Reads: Direct Page, X Index] [Flags: VNZ] [Flow: branch]
	lda $183318.l,X		; Load long $183318.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $000461.l,X		; Subtract with carry (long,X) $000461.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora $85.b,X		; OR accumulator with memory $85.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	rol $18.b		; Rotate left $18.b [Reads: Direct Page] [Flags: ZCN]
	ora [$18.b]		; OR accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $180218.l		; Load long $180218.l into accumulator [Writes: Accumulator] [Flags: ZN]
L06669B:
	ora [$18.b]		; OR accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $188618.l		; Add with carry (long) $188618.l [Writes: Accumulator] [Flags: VCNZ]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($24.b,X)		; Add with carry ($24.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $15.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L0666AB:
	sta $18.b,X		; Store accumulator to $18.b,X [Reads: Accumulator, X Index]
	rol $18.b,X		; Rotate left $18.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora [$18.b],Y		; OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $181218.l,X		; Load long $181218.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$18.b],Y		; OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $189618.l,X		; Add long $189618.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($67.b,X)		; Add with carry ($67.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $0F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$18.b]		; Subtract with carry (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($87.b,X)		; Add with carry ($87.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $0F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$18.b],Y		; Subtract with carry (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sta ($18.b),Y		; Store accumulator ($18.b),Y [Reads: Direct Page, Accumulator, Y Index]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($C7.b,X)		; Add with carry ($C7.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $0F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($E7.b,X)		; Add with carry ($E7.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $0F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sta ($18.b),Y		; Store accumulator ($18.b),Y [Reads: Direct Page, Accumulator, Y Index]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $62, $27, $00		; Invalid branch target (per L06673B) ; Push effective relative address $62, $27, $00 [Writes: Stack Pointer]
	ora $A918E9.l		; OR accumulator with memory (long) $A918E9.l [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $62, $47, $00		; Invalid branch target (per L06676F) ; Push effective relative address $62, $47, $00 [Writes: Stack Pointer]
	ora $9118F9.l		; OR accumulator with memory (long) $9118F9.l [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $005161.l,X		; Subtract with carry (long,X) $005161.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora $85.b,X		; OR accumulator with memory $85.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	and $18.b,S		; AND accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $A918.w		; Arithmetic shift left $A918.w [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	rol $18.b		; Rotate left $18.b [Reads: Direct Page] [Flags: ZCN]
	ora [$18.b]		; OR accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $180218.l		; Load long $180218.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$18.b]		; OR accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $188618.l		; Add with carry (long) $188618.l [Writes: Accumulator] [Flags: VCNZ]
	adc ($71.b,X)		; Add with carry ($71.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $15.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $18.b,X		; Store accumulator to $18.b,X [Reads: Accumulator, X Index]
	and ($18.b,S),Y		; AND accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $B918.w,X		; Arithmetic shift left $B918.w,X [Reads: X Index] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	rol $18.b,X		; Rotate left $18.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora [$18.b],Y		; OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $181218.l,X		; Load long $181218.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$18.b],Y		; OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $189618.l,X		; Add long $189618.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc ($B4.b,X)		; Add with carry ($B4.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $0F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($D4.b,X)		; Add with carry ($D4.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $0F.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($18.b),Y		; Store accumulator ($18.b),Y [Reads: Direct Page, Accumulator, Y Index]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	per L0667AD.w		; Push effective relative address L0667AD.w [Writes: Stack Pointer]
	ora $A918A9.l		; OR accumulator with memory (long) $A918A9.l [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $62, $34, $00		; Invalid branch target (per L0667E1) ; Push effective relative address $62, $34, $00 [Writes: Stack Pointer]
L0667AD:
	ora $9118A9.l		; OR accumulator with memory (long) $9118A9.l [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $40A410.l,X		; Subtract with carry (long,X) $40A410.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	adc $C41014.l,X		; Add long $C41014.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	adc $631114.l,X		; Add long $631114.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $831114.l,X		; Add long $831114.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $A31114.l,X		; Add long $A31114.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $E31114.l,X		; Add long $E31114.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	and ($7F.b)		; AND accumulator with memory (indirect) ($7F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $12.b		; Test and reset bits $12.b [Reads: Accumulator] [Flags: Z]
	ora $40.b,S		; OR accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($7F.b)		; AND accumulator with memory (indirect) ($7F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $12.b		; Test and reset bits $12.b [Reads: Accumulator] [Flags: Z]
	and $40.b,S		; AND accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($7F.b)		; AND accumulator with memory (indirect) ($7F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $12.b		; Test and reset bits $12.b [Reads: Accumulator] [Flags: Z]
	eor $40.b,S		; Exclusive OR accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($7F.b)		; AND accumulator with memory (indirect) ($7F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $12.b		; Test and reset bits $12.b [Reads: Accumulator] [Flags: Z]
	adc $40.b,S		; Add with carry (stack relative) $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	and ($7F.b)		; AND accumulator with memory (indirect) ($7F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $12.b		; Test and reset bits $12.b [Reads: Accumulator] [Flags: Z]
	sta $40.b,S		; Store accumulator (stack relative) $40.b,S [Reads: Accumulator, Stack Pointer]
	and ($7F.b)		; AND accumulator with memory (indirect) ($7F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $12.b		; Test and reset bits $12.b [Reads: Accumulator] [Flags: Z]
	lda $40.b,S		; Load accumulator (stack relative) $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($7F.b)		; AND accumulator with memory (indirect) ($7F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $12.b		; Test and reset bits $12.b [Reads: Accumulator] [Flags: Z]
	cmp $40.b,S		; Compare accumulator (stack relative) $40.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZCN]
	and ($7F.b)		; AND accumulator with memory (indirect) ($7F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $12.b		; Test and reset bits $12.b [Reads: Accumulator] [Flags: Z]
	sbc $40.b,S		; Subtract stack-relative $40.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ] [SNES: Stack-relative addressing]
	and ($7F.b)		; AND accumulator with memory (indirect) ($7F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $13.b		; Test and reset bits $13.b [Reads: Accumulator] [Flags: Z]
	ora $40.b,S		; OR accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($7F.b)		; AND accumulator with memory (indirect) ($7F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $10.b		; Test and reset bits $10.b [Reads: Accumulator] [Flags: Z]
	.db $82, $00, $33		; Bank wrapping branch target ; Branch always long to $82, $00, $33 [Flow: branch]
	bit #$15.b		; Test bits #$15.b with accumulator [Reads: Accumulator] [Flags: Z]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8B.b,X		; OR accumulator with memory $8B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8C.b,X		; OR accumulator with memory $8C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8B.b,X		; OR accumulator with memory $8B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8C.b,X		; OR accumulator with memory $8C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8B.b,X		; OR accumulator with memory $8B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8C.b,X		; OR accumulator with memory $8C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8B.b,X		; OR accumulator with memory $8B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8C.b,X		; OR accumulator with memory $8C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8B.b,X		; OR accumulator with memory $8B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8C.b,X		; OR accumulator with memory $8C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8B.b,X		; OR accumulator with memory $8B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8C.b,X		; OR accumulator with memory $8C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8B.b,X		; OR accumulator with memory $8B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8C.b,X		; OR accumulator with memory $8C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8B.b,X		; OR accumulator with memory $8B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8C.b,X		; OR accumulator with memory $8C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8B.b,X		; OR accumulator with memory $8B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8C.b,X		; OR accumulator with memory $8C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8B.b,X		; OR accumulator with memory $8B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8C.b,X		; OR accumulator with memory $8C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8B.b,X		; OR accumulator with memory $8B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8C.b,X		; OR accumulator with memory $8C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $8A.b,X		; OR accumulator with memory $8A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	eor $89.b,X		; Exclusive OR accumulator with memory $89.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	eor $10.b,X		; Exclusive OR accumulator with memory $10.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ldx #$00.b		; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	ora $99.b,S		; OR accumulator with stack relative $99.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $9A.b,X		; OR accumulator with memory $9A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $10.b,X		; OR accumulator with memory $10.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	tsx		; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	brk $03.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txs		; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	eor $99.b,X		; Exclusive OR accumulator with memory $99.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	eor $10.b,X		; Exclusive OR accumulator with memory $10.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	rep #$00		; Reset processor status bits #$00 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	ora $A9.b,S		; OR accumulator with stack relative $A9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $AA.b,X		; OR accumulator with memory $AA.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $10.b,X		; OR accumulator with memory $10.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	brk $03.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txs		; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	eor $99.b,X		; Exclusive OR accumulator with memory $99.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	eor $10.b,X		; Exclusive OR accumulator with memory $10.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	sep #$00		; Set processor status bits #$00 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	and ($9D.b,S),Y		; AND accumulator (stack relative indirect indexed) ($9D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $AD.b,X		; OR accumulator with memory $AD.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9B.b,X		; OR accumulator with memory $9B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9C.b,X		; OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9B.b,X		; OR accumulator with memory $9B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9C.b,X		; OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9B.b,X		; OR accumulator with memory $9B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9C.b,X		; OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9B.b,X		; OR accumulator with memory $9B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9C.b,X		; OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9B.b,X		; OR accumulator with memory $9B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9C.b,X		; OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9B.b,X		; OR accumulator with memory $9B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9C.b,X		; OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9B.b,X		; OR accumulator with memory $9B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9C.b,X		; OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9B.b,X		; OR accumulator with memory $9B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9C.b,X		; OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9B.b,X		; OR accumulator with memory $9B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9C.b,X		; OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9B.b,X		; OR accumulator with memory $9B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9C.b,X		; OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9B.b,X		; OR accumulator with memory $9B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $9C.b,X		; OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AD.b,X		; OR accumulator with memory $AD.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	eor $9D.b,X		; Exclusive OR accumulator with memory $9D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	eor $11.b,X		; Exclusive OR accumulator with memory $11.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($AB.b,S),Y		; AND accumulator (stack relative indirect indexed) ($AB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $AC.b,X		; OR accumulator with memory $AC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AB.b,X		; OR accumulator with memory $AB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AC.b,X		; OR accumulator with memory $AC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AB.b,X		; OR accumulator with memory $AB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AC.b,X		; OR accumulator with memory $AC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AB.b,X		; OR accumulator with memory $AB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AC.b,X		; OR accumulator with memory $AC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AB.b,X		; OR accumulator with memory $AB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AC.b,X		; OR accumulator with memory $AC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AB.b,X		; OR accumulator with memory $AB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AC.b,X		; OR accumulator with memory $AC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AB.b,X		; OR accumulator with memory $AB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AC.b,X		; OR accumulator with memory $AC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AB.b,X		; OR accumulator with memory $AB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AC.b,X		; OR accumulator with memory $AC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AB.b,X		; OR accumulator with memory $AB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AC.b,X		; OR accumulator with memory $AC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AB.b,X		; OR accumulator with memory $AB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AC.b,X		; OR accumulator with memory $AC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AB.b,X		; OR accumulator with memory $AB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AC.b,X		; OR accumulator with memory $AC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AB.b,X		; OR accumulator with memory $AB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AC.b,X		; OR accumulator with memory $AC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AB.b,X		; OR accumulator with memory $AB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AC.b,X		; OR accumulator with memory $AC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $11.b,X		; OR accumulator with memory $11.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $00		; opcode wdm $00 ; Reserved instruction
	ora $1587.w,X		; OR accumulator with memory $1587.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora $87.b,X		; OR accumulator with memory $87.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $88.b,X		; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $87.b,X		; OR accumulator with memory $87.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $88.b,X		; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $87.b,X		; OR accumulator with memory $87.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $88.b,X		; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $87.b,X		; OR accumulator with memory $87.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $88.b,X		; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $87.b,X		; OR accumulator with memory $87.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $88.b,X		; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $87.b,X		; OR accumulator with memory $87.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $88.b,X		; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $87.b,X		; OR accumulator with memory $87.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $11.b,X		; OR accumulator with memory $11.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	.db $62, $80, $1B		; Bank wrapping branch target ; Push effective relative address $62, $80, $1B [Writes: Stack Pointer]
	lda $15A715.l		; Load long $15A715.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $15A715.l		; Load long $15A715.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $15A715.l		; Load long $15A715.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $15A715.l		; Load long $15A715.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $15A715.l		; Load long $15A715.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $15A715.l		; Load long $15A715.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $15A715.l		; Load long $15A715.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($70.b),Y		; OR accumulator with memory ($70.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bra L06692C.b		; Branch always to L06692C.b [Flow: branch]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ora $AE.b,X		; OR accumulator with memory $AE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $A8.b,X		; OR accumulator with memory $A8.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
L06692C:
	ora $11.b,X		; OR accumulator with memory $11.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $00.b,S		; Compare accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZCN]
	and $88.b,X		; Logical AND $88.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $98.b,X		; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $88.b,X		; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $98.b,X		; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $88.b,X		; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $98.b,X		; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $88.b,X		; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $98.b,X		; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $88.b,X		; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $98.b,X		; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $88.b,X		; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $98.b,X		; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $88.b,X		; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $98.b,X		; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $88.b,X		; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $87.b,X		; OR accumulator with memory $87.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $88.b,X		; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $87.b,X		; OR accumulator with memory $87.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $88.b,X		; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $87.b,X		; OR accumulator with memory $87.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $88.b,X		; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $87.b,X		; OR accumulator with memory $87.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $88.b,X		; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $87.b,X		; OR accumulator with memory $87.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $88.b,X		; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $87.b,X		; OR accumulator with memory $87.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $88.b,X		; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $11.b,X		; OR accumulator with memory $11.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $1380.w,X		; Subtract with carry $1380.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ora $AE.b,X		; OR accumulator with memory $AE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $A8.b,X		; OR accumulator with memory $A8.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AE.b,X		; OR accumulator with memory $AE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $A8.b,X		; OR accumulator with memory $A8.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AE.b,X		; OR accumulator with memory $AE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $A8.b,X		; OR accumulator with memory $A8.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AE.b,X		; OR accumulator with memory $AE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $A8.b,X		; OR accumulator with memory $A8.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $AE.b,X		; OR accumulator with memory $AE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
L06697E:
	ora $13.b,X		; OR accumulator with memory $13.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $973700.l		; Jump to subroutine long $973700.l [Writes: Stack Pointer] [Flow: call]
	ora $98.b,X		; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $97.b,X		; OR accumulator with memory $97.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $98.b,X		; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $97.b,X		; OR accumulator with memory $97.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $98.b,X		; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $97.b,X		; OR accumulator with memory $97.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $98.b,X		; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $97.b,X		; OR accumulator with memory $97.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $98.b,X		; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $97.b,X		; OR accumulator with memory $97.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $98.b,X		; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $97.b,X		; OR accumulator with memory $97.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $98.b,X		; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $97.b,X		; OR accumulator with memory $97.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $98.b,X		; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $97.b,X		; OR accumulator with memory $97.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $98.b,X		; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $97.b,X		; OR accumulator with memory $97.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $98.b,X		; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $97.b,X		; OR accumulator with memory $97.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $98.b,X		; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $97.b,X		; OR accumulator with memory $97.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $98.b,X		; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $97.b,X		; OR accumulator with memory $97.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $98.b,X		; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $97.b,X		; OR accumulator with memory $97.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $98.b,X		; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $11.b,X		; OR accumulator with memory $11.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	beq L06697E.b		; Branch if equal to L06697E.b [Flow: branch]
	ora ($8D.b)		; OR accumulator with memory (indirect) ($8D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $60.b,X		; OR accumulator with memory $60.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ldy $00.b		; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	and ($18.b,X)		; Logical AND ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $18.b		; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	asl $18.b		; Arithmetic shift left $18.b [Reads: Direct Page] [Flags: ZCN]
	lda $182218.l		; Load long $182218.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $18.b,S		; AND accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $18.b		; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	and ($18.b,X)		; Logical AND ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	asl $2418.w		; Arithmetic shift left $2418.w [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	and ($18.b,X)		; Logical AND ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0018.w		; Logical OR $0018.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	tsb $0418.w		; Test and set bits $0418.w [Reads: Accumulator] [Flags: Z]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpy $00.b		; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: ZCN]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	and ($18.b),Y		; AND accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $18.b		; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	asl $18.b,X		; Arithmetic shift left $18.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	lda $183218.l,X		; Load long $183218.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($18.b,S),Y		; AND accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $18.b		; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	and ($18.b),Y		; AND accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; Set carry ; Set carry flag [Flags: C]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	asl $3418.w,X		; Arithmetic shift left $3418.w,X [Reads: X Index] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	and ($18.b),Y		; AND accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $1018.w,X		; OR accumulator with memory $1018.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	trb $1418.w		; Test and reset bits $1418.w [Reads: Accumulator] [Flags: Z]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $62, $02, $00		; Invalid branch target (per L066A26) ; Push effective relative address $62, $02, $00 [Writes: Stack Pointer]
	and $1800.w,Y		; AND accumulator with memory $1800.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($18.b,X)		; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cop $18.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $18.b,S		; OR accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $18.b		; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $18.b		; Logical OR $18.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	asl $18.b		; Arithmetic shift left $18.b [Reads: Direct Page] [Flags: ZCN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$18.b]		; OR accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $18A918.l		; Load long $18A918.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$18.b		; Logical OR #$18.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	bit $6218.w		; Test bits $6218.w with accumulator [Reads: Accumulator] [Flags: VNZ]
	jsl $103900.l		; Jump to subroutine long $103900.l [Writes: Stack Pointer] [Flow: call]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($18.b),Y		; OR accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($18.b)		; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($18.b,S),Y		; OR accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	trb $18.b		; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $18.b,X		; OR accumulator with memory $18.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	asl $18.b,X		; Arithmetic shift left $18.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$18.b],Y		; OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $18A918.l,X		; Load long $18A918.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $A918.w,Y		; OR accumulator with memory $A918.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	dec A		; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	bit $6218.w,X		; Test bits $6218.w,X [Reads: X Index] [Flags: VNZ] [Flow: branch]
	.db $42, $00		; opcode wdm $00 ; Reserved instruction
	and $180A.w,Y		; AND accumulator with memory $180A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $A918.w		; Test and set bits $A918.w [Reads: Accumulator] [Flags: Z]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	ora $A918.w		; Logical OR $A918.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	asl $A918.w		; Arithmetic shift left $A918.w [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	ora $18A918.l		; OR accumulator with memory (long) $18A918.l [Writes: Accumulator] [Flags: ZN]
	jsr $A918.w		; Jump to subroutine at $A918.w [Writes: Stack Pointer] [Flow: call]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	and ($18.b,X)		; Logical AND ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $18A918.l		; Jump to subroutine long $18A918.l [Writes: Stack Pointer] [Flow: call]
	and $18.b,S		; AND accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $A9,$18		; Move block positive $A9,$18 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda $18A918.l		; Load long $18A918.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $18.b		; Logical shift right $18.b [Reads: Direct Page] [Flags: ZCN]
	per L066B40.w		; Push effective relative address L066B40.w [Writes: Stack Pointer]
	and $181A.w,Y		; AND accumulator with memory $181A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	trb $A918.w		; Test and reset bits $A918.w [Reads: Accumulator] [Flags: Z]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	ora $A918.w,X		; OR accumulator with memory $A918.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	asl $A918.w,X		; Arithmetic shift left $A918.w,X [Reads: X Index] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	ora $18A918.l,X		; Logical OR long $18A918.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $18		; Invalid branch target (bmi L066B11) ; Branch if minus to $30, $18 [Flow: branch]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	and ($18.b),Y		; AND accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	and ($18.b)		; AND accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	and ($18.b,S),Y		; AND accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	mvn $A9,$18		; Move block negative $A9,$18 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda $18A918.l,X		; Load long $18A918.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $18.b,X		; Logical shift right $18.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	.db $62, $82, $00		; Invalid branch target (per L066B9E) ; Push effective relative address $62, $82, $00 [Writes: Stack Pointer]
	and $1824.w,Y		; AND accumulator with memory $1824.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	and $18.b		; Logical AND $18.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	rol $18.b		; Rotate left $18.b [Reads: Direct Page] [Flags: ZCN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	and [$18.b]		; AND accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$18.b		; Logical AND #$18.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $18		; Invalid branch target (bra L066B4F) ; Branch always to $80, $18 [Flow: branch]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($18.b,X)		; Store accumulator ($18.b,X) [Reads: Direct Page, Accumulator, X Index]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $82, $18, $A9		; Invalid branch target (brl L061458) ; Branch always long to $82, $18, $A9 [Flow: branch]
L066B40:
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $A918.w		; Logical shift right $A918.w [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	eor $18A918.l		; Exclusive OR accumulator with memory (long) $18A918.l [Writes: Accumulator] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; Clear carry ; Clear carry flag [Flags: C]
	.db $62, $A2, $00		; Invalid branch target (per L066BFC) ; Push effective relative address $62, $A2, $00 [Writes: Stack Pointer]
	and $1834.w,Y		; AND accumulator with memory $1834.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	and $18.b,X		; Logical AND $18.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	rol $18.b,X		; Rotate left $18.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	and [$18.b],Y		; AND accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; Set carry ; Set carry flag [Flags: C]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	and $A918.w,Y		; AND accumulator with memory $A918.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	.db $90, $18		; Invalid branch target (bcc L066B8D) ; Branch if carry clear to $90, $18 [Flow: branch]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($18.b),Y		; Store accumulator ($18.b),Y [Reads: Direct Page, Accumulator, Y Index]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($18.b)		; Store accumulator (indirect) ($18.b) [Reads: Direct Page, Accumulator]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $A918.w,X		; Logical shift right $A918.w,X [Reads: X Index] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	eor $18A918.l,X		; Exclusive OR accumulator with memory (long,X) $18A918.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $70, $18		; Invalid branch target (bvs L066BAD) ; Branch if overflow set to $70, $18 [Flow: branch]
	per L066C64.w		; Push effective relative address L066C64.w [Writes: Stack Pointer]
	ora ($AA.b),Y		; OR accumulator with memory ($AA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sty $18.b		; Store Y register to $18.b [Reads: Y Index]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $18.b		; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	ora $0318.w		; Logical OR $0318.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	.db $62, $EC, $00		; Invalid branch target (per L066C9A) ; Push effective relative address $62, $EC, $00 [Writes: Stack Pointer]
	ora ($BA.b),Y		; OR accumulator with memory ($BA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sty $18.b,X		; Store Y register $18.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	trb $18.b		; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	ora $1318.w,X		; OR accumulator with memory $1318.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	ror $00.b		; Rotate right $00.b [Reads: Direct Page] [Flags: ZCN]
	brk $35.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $A918.w		; Logical AND $A918.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	rol $A918.w		; Rotate left $A918.w [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	and $18A918.l		; AND accumulator with memory (long) $18A918.l [Writes: Accumulator] [Flags: ZN]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($18.b,X)		; Exclusive OR accumulator with memory ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$18.b		; Compare #$18.b with Y register [Reads: Y Index] [Flags: ZCN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	eor $18.b,S		; Exclusive OR accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	inc $18.b		; Increment $18.b [Reads: Direct Page] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc [$18.b]		; Subtract with carry (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc #$18.b		; Subtract #$18.b from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	nop		; No operation
	clc		; Clear carry ; Clear carry flag [Flags: C]
	ror $20.b		; Rotate right $20.b [Reads: Direct Page] [Flags: ZCN]
	brk $35.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $A918.w,X		; AND accumulator with memory $A918.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	rol $A918.w,X		; Rotate left $A918.w,X [Reads: X Index] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	and $18A918.l,X		; AND accumulator with memory (long,X) $18A918.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bvc L066C25.b		; Branch if overflow clear to L066C25.b [Flow: branch]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($18.b),Y		; Exclusive OR accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	bne L066C2D.b		; Branch if not equal to L066C2D.b [Flow: branch]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($18.b,S),Y		; XOR accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	inc $18.b,X		; Increment memory $18.b,X [Reads: Direct Page, X Index] [Flags: ZN]
L066C25:
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc [$18.b],Y		; Subtract with carry (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	clc		; Clear carry ; Clear carry flag [Flags: C]
L066C2D:
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $A918.w,Y		; Subtract with carry $A918.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	plx		; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	ror $40.b		; Rotate right $40.b [Reads: Direct Page] [Flags: ZCN]
	brk $35.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$18.b]		; Exclusive OR accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$18.b		; Exclusive OR #$18.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $A918.w		; Jump to $A918.w [Flow: jump]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	eor $A918.w		; Exclusive OR $A918.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cpx $A918.w		; Compare $A918.w with X register [Reads: X Index] [Flags: ZCN]
L066C64:
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sbc $A918.w		; Subtract $A918.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	inc $A918.w		; Increment $A918.w [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sbc $606618.l		; Subtract with carry (long) $606618.l [Writes: Accumulator] [Flags: VCNZ]
	brk $35.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$18.b],Y		; Exclusive OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cli		; Clear interupt ; Clear interrupt disable flag [Flags: I]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	eor $A918.w,Y		; Exclusive OR accumulator with memory $A918.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $18A918.l		; Jump long to $18A918.l [Flow: jump]
	eor $A918.w,X		; Exclusive OR accumulator with memory $A918.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xce		; Exchange carry bit to set emulation or native mode ; Exchange carry and emulation bits [Flags: C]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr ($A918.w,X)		; Jump to subroutine indirect indexed ($A918.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sbc $A918.w,X		; Subtract with carry $A918.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	inc $A918.w,X		; Increment memory $A918.w,X [Reads: X Index] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sbc $806618.l,X		; Subtract with carry (long,X) $806618.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $31.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($18.b,X)		; Add with carry ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	per L0615CC.w		; Push effective relative address L0615CC.w [Writes: Stack Pointer]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $18.b,S		; Add with carry (stack relative) $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	bra L066CD3.b		; Branch always to L066CD3.b [Flow: branch]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($18.b,X)		; Store accumulator ($18.b,X) [Reads: Direct Page, Accumulator, X Index]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brl L0615DC.w		; Branch always long to L0615DC.w [Flow: branch]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp ($18.b,X)		; Compare accumulator ($18.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: ZCN]
L066CD3:
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $18A918.l		; Add with carry (long) $18A918.l [Writes: Accumulator] [Flags: VCNZ]
	sta $18.b		; Store accumulator to $18.b [Reads: Accumulator]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	stx $18.b		; Store X register to $18.b [Reads: X Index]
	ror $A0.b		; Rotate right $A0.b [Reads: Direct Page] [Flags: ZCN]
	brk $31.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($18.b),Y		; Add with carry ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($18.b)		; Add with carry (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($18.b,S),Y		; Add with carry (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	bcc L066D09.b		; Branch if carry clear to L066D09.b [Flow: branch]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($18.b),Y		; Store accumulator ($18.b),Y [Reads: Direct Page, Accumulator, Y Index]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($18.b)		; Store accumulator (indirect) ($18.b) [Reads: Direct Page, Accumulator]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp ($18.b),Y		; Compare accumulator ($18.b),Y [Reads: Direct Page, Accumulator, Y Index] [Flags: ZCN]
L066D09:
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $18A918.l,X		; Add long $18A918.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $18.b,X		; Store accumulator to $18.b,X [Reads: Accumulator, X Index]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	stx $18.b,Y		; Store X register $18.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ror $C4.b		; Rotate right $C4.b [Reads: Direct Page] [Flags: ZCN]
	brk $2D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sty $18.b		; Store Y register to $18.b [Reads: Y Index]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $18.b		; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	ora $0318.w		; Logical OR $0318.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sty $18.b		; Store Y register to $18.b [Reads: Y Index]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $18.b		; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	ora $0318.w		; Logical OR $0318.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	ror $E4.b		; Rotate right $E4.b [Reads: Direct Page] [Flags: ZCN]
	brk $2D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsx		; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sty $18.b,X		; Store Y register $18.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	trb $18.b		; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	ora $1318.w,X		; OR accumulator with memory $1318.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tsx		; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sty $18.b,X		; Store Y register $18.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	trb $18.b		; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	ora $1318.w,X		; OR accumulator with memory $1318.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sbc $807060.l,X		; Subtract with carry (long,X) $807060.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc #$6B.b		; Add #$6B.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	adc $8B6E.w		; Add $8B6E.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldy #$03.b		; Load #$03.b into Y register [Writes: Y Index] [Flags: ZN]
	ldx #$0C.b		; Load #$0C.b into X register [Writes: X Index] [Flags: ZN]
L066D89:
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A20.w,Y		; Store accumulator to $0A20.w,Y [Reads: Accumulator, Y Index]
	lda $ED7A.w,Y		; Load $ED7A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0800.w,X		; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	lda #$68.b		; Load #$68.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0801.w,X		; Store accumulator to $0801.w,X [Reads: Accumulator, X Index]
	lda $ED7E.w,Y		; Load $ED7E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0802.w,X		; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	lda #$32.b		; Load #$32.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0803.w,X		; Store accumulator to $0803.w,X [Reads: Accumulator, X Index]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bpl L066D89.b		; Branch if plus to L066D89.b [Flow: branch]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $13.b		; Load $13.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	beq L066DCB.b		; Branch if equal to L066DCB.b [Flow: branch]
	cmp #$80.b		; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L066DCB.b		; Branch if equal to L066DCB.b [Flow: branch]
	lda $22.b		; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	beq L066DCB.b		; Branch if equal to L066DCB.b [Flow: branch]
	cmp #$02.b		; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L066DCB.b		; Branch if equal to L066DCB.b [Flow: branch]
	cmp #$06.b		; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L066DCB.b		; Branch if equal to L066DCB.b [Flow: branch]
	lda $F4.b		; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$90.b		; Logical AND #$90.b with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L066DCB.b		; Branch if equal to L066DCB.b [Flow: branch]
	lda #$09.b		; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $22.b		; Store accumulator to $22.b [Reads: Accumulator]
L066DCB:
	lda $22.b		; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp ($EDD2.w,X)		; Jump indirect indexed to ($EDD2.w,X) [Reads: X Index] [Flow: jump]
	inc $ED.b		; Increment $ED.b [Reads: Direct Page] [Flags: ZN]
	tsb $CBEE.w		; Test and set bits $CBEE.w [Reads: Accumulator] [Flags: Z]
	inc $EEE5.w		; Increment $EEE5.w [Flags: ZN]
	tsx		; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	inc $F115.w		; Increment $F115.w [Flags: ZN]
	wai		; Wait for interrupt
	inc $EEE5.w		; Increment $EEE5.w [Flags: ZN]
	ora $F1.b,X		; [PATTERN: Memory clearing operation] OR accumulator with memory $F1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	brk $F7.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl L064404.l		; Jump to subroutine long L064404.l [Writes: Stack Pointer] [Flow: call]
	stz $1F00.w		; Store zero to $1F00.w
	stz $012A.w		; Store zero to $012A.w
	jsr L067E56.w		; Jump to subroutine at L067E56.w [Writes: Stack Pointer] [Flow: call]
	lda $13.b		; Load $13.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	beq L066DFA.b		; Branch if equal to L066DFA.b [Flow: branch]
	dec $13.b		; Decrement $13.b [Reads: Direct Page] [Flags: ZN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L066DFA:
	jsl $00893D.l		; [PATTERN: Memory clearing operation] Jump to subroutine long $00893D.l [Writes: Stack Pointer] [Flow: call]
	lda #$FF.b		; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0128.w		; Store accumulator to $0128.w [Reads: Accumulator]
	stz $012A.w		; Store zero to $012A.w
	stz $1F0C.w		; Store zero to $1F0C.w
	inc $22.b		; Increment $22.b [Reads: Direct Page] [Flags: ZN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$50.b		; Load #$50.b into X register [Writes: X Index] [Flags: ZN]
L066E0E:
	stz $20.b,X		; Store zero to $20.b,X [Reads: X Index]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bpl L066E0E.b		; Branch if plus to L066E0E.b [Flow: branch]
	jsl $00834B.l		; Jump to subroutine long $00834B.l [Writes: Stack Pointer] [Flow: call]
	jsl $00E36D.l		; Jump to subroutine long $00E36D.l [Writes: Stack Pointer] [Flow: call]
	lda #$04.b		; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AB3.w		; Store accumulator to $0AB3.w [Reads: Accumulator]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AB2.w		; Store accumulator to $0AB2.w [Reads: Accumulator]
	stz $0AA9.w		; Store zero to $0AA9.w
	jsl $1BEE52.l		; Jump to subroutine long $1BEE52.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AA9.w		; Store accumulator to $0AA9.w [Reads: Accumulator]
	jsl $1BEEC7.l		; Jump to subroutine long $1BEEC7.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEE52.l		; Jump to subroutine long $1BEE52.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEDF9.l		; Jump to subroutine long $1BEDF9.l [Writes: Stack Pointer] [Flow: call]
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC53A.l		; Store accumulator (long) $7EC53A.l [Reads: Accumulator]
	lda #$38.b		; Load #$38.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC53B.l		; Store accumulator (long) $7EC53B.l [Reads: Accumulator]
	inc $15.b		; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	lda #$14.b		; Load #$14.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $EA.b		; Store accumulator to $EA.b [Reads: Accumulator]
	jsr L0677E6.w		; [PATTERN: Memory clearing operation] Jump to subroutine at L0677E6.w [Writes: Stack Pointer] [Flow: call]
.INDEX 16
	rep #$10
	stz $1CD8.w		; Store zero to $1CD8.w
	ldx #$0112.w		; Load #$0112.w into X register [Writes: X Index] [Flags: ZN]
	stx $1CF0.w		; Store X register to $1CF0.w [Reads: X Index]
	stz $E8.b		; Store zero to $E8.b
	stz $E9.b		; Store zero to $E9.b
	ldx #$1010.w		; Load #$1010.w into X register [Writes: X Index] [Flags: ZN]
	stx $0200.w		; Store X register to $0200.w [Reads: X Index]
	inc $22.b		; Increment $22.b [Reads: Direct Page] [Flags: ZN]
	inc $22.b		; [PATTERN: Memory clearing operation] Increment $22.b [Reads: Direct Page] [Flags: ZN]
	inc $22.b		; Increment $22.b [Reads: Direct Page] [Flags: ZN]
.INDEX 8
	sep #$10
	jsr $FAA3.w		; Jump to subroutine at $FAA3.w [Writes: Stack Pointer] [Flow: call]
	stz $96.b		; Store zero to $96.b
	stz $97.b		; Store zero to $97.b
	lda #$B0.b		; Load #$B0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $98.b		; Store accumulator to $98.b [Reads: Accumulator]
	lda #$03.b		; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1E.b		; Store accumulator to $1E.b [Reads: Accumulator]
	stz $1F.b		; Store zero to $1F.b
	lda #$25.b		; Load #$25.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9C.b		; Store accumulator to $9C.b [Reads: Accumulator]
	lda #$45.b		; Load #$45.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9D.b		; Store accumulator to $9D.b [Reads: Accumulator]
	lda #$85.b		; Load #$85.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9E.b		; Store accumulator to $9E.b [Reads: Accumulator]
	lda #$10.b		; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $99.b		; [PATTERN: Memory clearing operation] Store accumulator to $99.b [Reads: Accumulator]
	lda #$A3.b		; Load #$A3.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9A.b		; Store accumulator to $9A.b [Reads: Accumulator]
	stz WBGLOG.w		; Window Mask Logic for Backgrounds ; Store zero to WBGLOG.w
	stz WOBJLOG.w		; Window Mask Logic for Objects and Color Window ; Store zero to WOBJLOG.w
	lda #$C0.b		; Load #$C0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9B.b		; Store accumulator to $9B.b [Reads: Accumulator]
	lda #$06.b		; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; Store accumulator to $012C.w [Reads: Accumulator]
	inc $27.b		; Increment $27.b [Reads: Direct Page] [Flags: ZN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L066EA6:
	lda $13.b		; Load $13.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0F.b		; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L066EB7.b		; Branch if equal to L066EB7.b [Flow: branch]
	dec $5E.b		; Decrement $5E.b [Reads: Direct Page] [Flags: ZN]
	bpl L066EB6.b		; Branch if plus to L066EB6.b [Flow: branch]
	inc $13.b		; Increment $13.b [Reads: Direct Page] [Flags: ZN]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $5E.b		; Store accumulator to $5E.b [Reads: Accumulator]
L066EB6:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L066EB7:
	inc $5F.b		; Increment $5F.b [Reads: Direct Page] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $13.b		; Load $13.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0F.b		; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L066EE2.b		; Branch if equal to L066EE2.b [Flow: branch]
	dec $5E.b		; Decrement $5E.b [Reads: Direct Page] [Flags: ZN]
	bpl L066ECA.b		; Branch if plus to L066ECA.b [Flow: branch]
	inc $13.b		; Increment $13.b [Reads: Direct Page] [Flags: ZN]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $5E.b		; Store accumulator to $5E.b [Reads: Accumulator]
L066ECA:
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $13.b		; Load $13.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	beq L066EDA.b		; Branch if equal to L066EDA.b [Flow: branch]
	dec $5E.b		; Decrement $5E.b [Reads: Direct Page] [Flags: ZN]
	bpl L066ED9.b		; Branch if plus to L066ED9.b [Flow: branch]
	dec $13.b		; Decrement $13.b [Reads: Direct Page] [Flags: ZN]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $5E.b		; Store accumulator to $5E.b [Reads: Accumulator]
L066ED9:
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L066EDA:
	jsl $00893D.l		; Jump to subroutine long $00893D.l [Writes: Stack Pointer] [Flow: call]
	jsl $00834B.l		; Jump to subroutine long $00834B.l [Writes: Stack Pointer] [Flow: call]
L066EE2:
	inc $22.b		; Increment $22.b [Reads: Direct Page] [Flags: ZN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $23.b		; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp ($EEEC.w,X)		; Jump indirect indexed to ($EEEC.w,X) [Reads: X Index] [Flow: jump]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	inc $EEFF.w		; Increment $EEFF.w [Flags: ZN]
	lsr $E3EF.w		; Logical shift right $E3EF.w [Flags: ZCN]
	sbc $DCF058.l		; Subtract with carry (long) $DCF058.l [Writes: Accumulator] [Flags: VCNZ]
	beq L066F5D.b		; Branch if equal to L066F5D.b [Flow: branch]
	rol $E6.b		; Rotate left $E6.b [Reads: Direct Page] [Flags: ZCN]
	jsl $6B1364.l		; Jump to subroutine long $6B1364.l [Writes: Stack Pointer] [Flow: call]
	lda #$13.b		; Load #$13.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta BG1SC.w		; BG1 Tilemap Address and Size ; Store accumulator to BG1SC.w [Reads: Accumulator]
	lda #$03.b		; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta BG2SC.w		; BG2 Tilemap Address and Size ; Store accumulator to BG2SC.w [Reads: Accumulator]
	lda #$80.b		; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $99.b		; Store accumulator to $99.b [Reads: Accumulator]
	lda #$21.b		; Load #$21.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9A.b		; Store accumulator to $9A.b [Reads: Accumulator]
	lda #$07.b		; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta BGMODE.w		; BG Mode and Character Size ; Store accumulator to BGMODE.w [Reads: Accumulator]
	sta $94.b		; Store accumulator to $94.b [Reads: Accumulator]
	lda #$80.b		; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta M7SEL.w		; Mode 7 Settings ; Store accumulator to M7SEL.w [Reads: Accumulator]
	jsl $0ABA30.l		; Jump to subroutine long $0ABA30.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20
	lda #$00ED.w		; Load #$00ED.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $063A.w		; Store accumulator to $063A.w [Reads: Accumulator]
	lda #$0100.w		; Load #$0100.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0638.w		; Store accumulator to $0638.w [Reads: Accumulator]
	lda #$0080.w		; Load #$0080.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0120.w		; Store accumulator to $0120.w [Reads: Accumulator]
	lda #$00C0.w		; Load #$00C0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0124.w		; Store accumulator to $0124.w [Reads: Accumulator]
.ACCU 8
	sep #$20
	lda #$FF.b		; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0637.w		; Store accumulator to $0637.w [Reads: Accumulator]
	jsr L067783.w		; Jump to subroutine at L067783.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $25.b		; [PATTERN: Memory clearing operation] Store accumulator to $25.b [Reads: Accumulator]
	inc $22.b		; Increment $22.b [Reads: Direct Page] [Flags: ZN]
	stz $13.b		; Store zero to $13.b
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz HDMAEN.w		; HDMA Channel Enable ; Store zero to HDMAEN.w
	stz $9B.b		; Store zero to $9B.b
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $99.b		; Store accumulator to $99.b [Reads: Accumulator]
	lda #$20.b		; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9A.b		; Store accumulator to $9A.b [Reads: Accumulator]
	lda #$0A.b		; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
L066F5D:
	sta $0AA4.w		; Store accumulator to $0AA4.w [Reads: Accumulator]
	jsl $00E384.l		; Jump to subroutine long $00E384.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20
	lda $20.b		; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $22.b		; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
.ACCU 8
	sep #$20
	lda #$74.b		; Load #$74.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $02C533.l		; Jump to subroutine long $02C533.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $22.b		; [PATTERN: Memory clearing operation] Store accumulator to $22.b [Reads: Accumulator]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $20.b		; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20
	stz $0AB6.w		; Store zero to $0AB6.w
	stz $0AAC.w		; Store zero to $0AAC.w
	lda #$0E.b		; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AAD.w		; Store accumulator to $0AAD.w [Reads: Accumulator]
	lda #$03.b		; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AAE.w		; Store accumulator to $0AAE.w [Reads: Accumulator]
	ldx #$7E.b		; Load #$7E.b into X register [Writes: X Index] [Flags: ZN]
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $02C546.l		; Jump to subroutine long $02C546.l [Writes: Stack Pointer] [Flow: call]
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC53A.l		; Store accumulator (long) $7EC53A.l [Reads: Accumulator]
	lda #$38.b		; Load #$38.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC53B.l		; Store accumulator (long) $7EC53B.l [Reads: Accumulator]
	stz $1CD8.w		; Store zero to $1CD8.w
	lda #$13.b		; Load #$13.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF0.w		; Store accumulator to $1CF0.w [Reads: Accumulator]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF1.w		; Store accumulator to $1CF1.w [Reads: Accumulator]
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $25.b		; Store accumulator to $25.b [Reads: Accumulator]
	lda #$E0.b		; Load #$E0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $2C.b		; Store accumulator to $2C.b [Reads: Accumulator]
.ACCU 16
	rep #$20
	lda #$0210.w		; [PATTERN: Memory clearing operation] Load #$0210.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $64.b		; Store accumulator to $64.b [Reads: Accumulator]
.ACCU 8
	sep #$20
L066FC0:
	inc $22.b		; Increment $22.b [Reads: Direct Page] [Flags: ZN]
	stz $13.b		; Store zero to $13.b
	stz $EA.b		; Store zero to $EA.b
	lda $011F.w		; Load $011F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $011F.w		; Store accumulator to $011F.w [Reads: Accumulator]
	lda $0123.w		; Load $0123.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0123.w		; Store accumulator to $0123.w [Reads: Accumulator]
	lda $E3.b		; Load $E3.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $E3.b		; Store accumulator to $E3.b [Reads: Accumulator]
	lda $E9.b		; Load $E9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; [PATTERN: Memory clearing operation] Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $E9.b		; Store accumulator to $E9.b [Reads: Accumulator]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $99.b		; Store zero to $99.b
	stz $9A.b		; Store zero to $9A.b
.ACCU 16
	rep #$20
	lda $20.b		; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $22.b		; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
.ACCU 8
	sep #$20
	lda #$73.b		; Load #$73.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $02C533.l		; Jump to subroutine long $02C533.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $22.b		; Store accumulator to $22.b [Reads: Accumulator]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $20.b		; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AB6.w		; Store accumulator to $0AB6.w [Reads: Accumulator]
	stz $0AAC.w		; Store zero to $0AAC.w
	lda #$0E.b		; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AAD.w		; Store accumulator to $0AAD.w [Reads: Accumulator]
	lda #$03.b		; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AAE.w		; Store accumulator to $0AAE.w [Reads: Accumulator]
	ldx #$7F.b		; Load #$7F.b into X register [Writes: X Index] [Flags: ZN]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $02C546.l		; Jump to subroutine long $02C546.l [Writes: Stack Pointer] [Flow: call]
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC53A.l		; Store accumulator (long) $7EC53A.l [Reads: Accumulator]
	lda #$38.b		; Load #$38.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC53B.l		; Store accumulator (long) $7EC53B.l [Reads: Accumulator]
	stz $1CD8.w		; Store zero to $1CD8.w
	lda #$14.b		; Load #$14.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF0.w		; Store accumulator to $1CF0.w [Reads: Accumulator]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF1.w		; Store accumulator to $1CF1.w [Reads: Accumulator]
	lda #$94.b		; Load #$94.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $2B.b		; [PATTERN: Memory clearing operation] Store accumulator to $2B.b [Reads: Accumulator]
	lda #$68.b		; Load #$68.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $30.b		; Store accumulator to $30.b [Reads: Accumulator]
	stz $31.b		; Store zero to $31.b
	stz $32.b		; Store zero to $32.b
	stz $33.b		; [PATTERN: Memory clearing operation] Store zero to $33.b
	stz $40.b		; Store zero to $40.b
	stz $50.b		; Store zero to $50.b
	stz $5F.b		; Store zero to $5F.b
	lda #$FF.b		; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $25.b		; Store accumulator to $25.b [Reads: Accumulator]
.ACCU 16
	rep #$20
	lda #$0240.w		; Load #$0240.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $64.b		; Store accumulator to $64.b [Reads: Accumulator]
.ACCU 8
	sep #$20
	jmp L066FC0.w		; Jump to L066FC0.w [Flow: jump]
.ACCU 16
	rep #$20
	lda $20.b		; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $22.b		; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
.ACCU 8
	sep #$20
	lda #$75.b		; Load #$75.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $02C533.l		; Jump to subroutine long $02C533.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $22.b		; [PATTERN: Memory clearing operation] Store accumulator to $22.b [Reads: Accumulator]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $20.b		; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20
	stz $0AB6.w		; Store zero to $0AB6.w
	stz $0AAC.w		; Store zero to $0AAC.w
	lda #$0E.b		; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AAD.w		; Store accumulator to $0AAD.w [Reads: Accumulator]
	lda #$03.b		; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AAE.w		; Store accumulator to $0AAE.w [Reads: Accumulator]
	stz $0AA9.w		; Store zero to $0AA9.w
	jsl $02C55E.l		; Jump to subroutine long $02C55E.l [Writes: Stack Pointer] [Flow: call]
	ldx #$7F.b		; Load #$7F.b into X register [Writes: X Index] [Flags: ZN]
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $02C546.l		; Jump to subroutine long $02C546.l [Writes: Stack Pointer] [Flow: call]
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC33A.l		; Store accumulator (long) $7EC33A.l [Reads: Accumulator]
	sta $7EC53A.l		; Store accumulator (long) $7EC53A.l [Reads: Accumulator]
	lda #$38.b		; Load #$38.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC33B.l		; Store accumulator (long) $7EC33B.l [Reads: Accumulator]
	sta $7EC53B.l		; Store accumulator (long) $7EC53B.l [Reads: Accumulator]
	stz $1CD8.w		; Store zero to $1CD8.w
	lda #$15.b		; Load #$15.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF0.w		; Store accumulator to $1CF0.w [Reads: Accumulator]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF1.w		; Store accumulator to $1CF1.w [Reads: Accumulator]
	lda #$FF.b		; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $25.b		; Store accumulator to $25.b [Reads: Accumulator]
	lda #$70.b		; Load #$70.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $30.b		; Store accumulator to $30.b [Reads: Accumulator]
	sta $62.b		; Store accumulator to $62.b [Reads: Accumulator]
	lda #$70.b		; Load #$70.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $63.b		; [PATTERN: Memory clearing operation] Store accumulator to $63.b [Reads: Accumulator]
	lda #$08.b		; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $32.b		; Store accumulator to $32.b [Reads: Accumulator]
	stz $50.b		; Store zero to $50.b
	stz $51.b		; Store zero to $51.b
	stz $52.b		; [PATTERN: Memory clearing operation] Store zero to $52.b
	stz $5F.b		; Store zero to $5F.b
	stz $60.b		; Store zero to $60.b
	stz $61.b		; Store zero to $61.b
.ACCU 16
	rep #$20
	lda #$00C0.w		; Load #$00C0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $64.b		; Store accumulator to $64.b [Reads: Accumulator]
.ACCU 8
	sep #$20
	jmp L066FC0.w		; Jump to L066FC0.w [Flow: jump]
.ACCU 16
	rep #$20
	jsl $0ABC33.l		; Jump to subroutine long $0ABC33.l [Writes: Stack Pointer] [Flow: call]
	inc $0710.w		; [PATTERN: Memory clearing operation] Increment $0710.w [Flags: ZN]
	jsl L0641F9.l		; Jump to subroutine long L0641F9.l [Writes: Stack Pointer] [Flow: call]
	jsl $02811A.l		; Jump to subroutine long $02811A.l [Writes: Stack Pointer] [Flow: call]
	stz $EA.b		; Store zero to $EA.b
.ACCU 16
	rep #$20
	stz $063A.w		; Store zero to $063A.w
	stz $0638.w		; [PATTERN: Memory clearing operation] Store zero to $0638.w
	stz $0120.w		; Store zero to $0120.w
	stz $0124.w		; Store zero to $0124.w
	stz $011E.w		; Store zero to $011E.w
	stz $0122.w		; Store zero to $0122.w
.ACCU 8
	sep #$20
	lda #$F1.b		; [PATTERN: Memory clearing operation] Load #$F1.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; Store accumulator to $012C.w [Reads: Accumulator]
	stz $23.b		; Store zero to $23.b
	stz $10.b		; Store zero to $10.b
	lda #$0A.b		; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; Store accumulator to $11.b [Reads: Accumulator]
	sta $B0.b		; Store accumulator to $B0.b [Reads: Accumulator]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $23.b		; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp ($F11C.w,X)		; Jump indirect indexed to ($F11C.w,X) [Reads: X Index] [Flow: jump]
	rol $F1.b		; Rotate left $F1.b [Reads: Direct Page] [Flags: ZCN]
	ror $F1.b,X		; Rotate right $F1.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc ($7A.b),Y		; Subtract with carry ($7A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($23.b)		; Subtract with carry (indirect) ($23.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	pea $1AA5.w		; Push absolute address $1AA5.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	and #$03.b		; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bne L067138.b		; Branch if not equal to L067138.b [Flow: branch]
	inc $0124.w		; Increment $0124.w [Flags: ZN]
	inc $0120.w		; Increment $0120.w [Flags: ZN]
	inc $0122.w		; Increment $0122.w [Flags: ZN]
	dec $011E.w		; Decrement $011E.w [Flags: ZN]
L067138:
	lda $27.b		; Load $27.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	beq L067145.b		; Branch if equal to L067145.b [Flow: branch]
	jsr $F73E.w		; [PATTERN: Memory clearing operation] Jump to subroutine at $F73E.w [Writes: Stack Pointer] [Flow: call]
	stz $27.b		; Store zero to $27.b
	inc $26.b		; Increment $26.b [Reads: Direct Page] [Flags: ZN]
	inc $26.b		; Increment $26.b [Reads: Direct Page] [Flags: ZN]
L067145:
	stz $F2.b		; Store zero to $F2.b
	stz $F6.b		; [PATTERN: Memory clearing operation] Store zero to $F6.b
	stz $F4.b		; Store zero to $F4.b
	jsl $0EC440.l		; Jump to subroutine long $0EC440.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20
	dec $0200.w		; Decrement $0200.w [Flags: ZN]
	bne L067162.b		; Branch if not equal to L067162.b [Flow: branch]
.ACCU 8
	sep #$20
	inc $23.b		; Increment $23.b [Reads: Direct Page] [Flags: ZN]
	dec $22.b		; Decrement $22.b [Reads: Direct Page] [Flags: ZN]
	dec $22.b		; Decrement $22.b [Reads: Direct Page] [Flags: ZN]
	dec $22.b		; Decrement $22.b [Reads: Direct Page] [Flags: ZN]
	bra L067173.b		; Branch always to L067173.b [Flow: branch]
L067162:
	lda $0200.w		; Load $0200.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$18.b		; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	brk $B0.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$29.b		; Logical OR #$29.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	beq L067173.b		; Branch if equal to L067173.b [Flow: branch]
.ACCU 8
	sep #$20
	dec $13.b		; Decrement $13.b [Reads: Direct Page] [Flags: ZN]
L067173:
.ACCU 8
	sep #$20
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0637.w		; Load $0637.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$00.b		; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L067198.b		; Branch if equal to L067198.b [Flow: branch]
	cmp #$0F.b		; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcs L067183.b		; Branch if carry set to L067183.b [Flow: branch]
	dec $13.b		; Decrement $13.b [Reads: Direct Page] [Flags: ZN]
L067183:
	ldy #$01.b		; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	dec $25.b		; [PATTERN: Memory countdown loop] Decrement $25.b [Reads: Direct Page] [Flags: ZN]
	bne L067197.b		; Branch if not equal to L067197.b [Flow: branch]
	sty $25.b		; Store Y register to $25.b [Reads: Y Index]
	lda $0637.w		; Load $0637.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; Set carry ; Set carry flag [Flags: C]
	sbc #$01.b		; Subtract #$01.b from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	sta $0637.w		; Store accumulator to $0637.w [Reads: Accumulator]
	jsr L067783.w		; Jump to subroutine at L067783.w [Writes: Stack Pointer] [Flow: call]
L067197:
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L067198:
	jsl $00893D.l		; Jump to subroutine long $00893D.l [Writes: Stack Pointer] [Flow: call]
	lda #$09.b		; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta BGMODE.w		; BG Mode and Character Size ; Store accumulator to BGMODE.w [Reads: Accumulator]
	sta $94.b		; Store accumulator to $94.b [Reads: Accumulator]
	jsl $00834B.l		; Jump to subroutine long $00834B.l [Writes: Stack Pointer] [Flow: call]
	inc $23.b		; Increment $23.b [Reads: Direct Page] [Flags: ZN]
	dec $22.b		; Decrement $22.b [Reads: Direct Page] [Flags: ZN]
	dec $22.b		; Decrement $22.b [Reads: Direct Page] [Flags: ZN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda [$F8.b]		; Load accumulator (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tyx		; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	cmp ($F8.b,X)		; Compare accumulator ($F8.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: ZCN]
	lda $F8C7F8.l		; Load long $F8C7F8.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($F8.b,S),Y		; Load accumulator (stack relative indirect indexed) ($F8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $B7F8.w		; Compare $B7F8.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	cmp ($F8.b,S),Y		; Compare accumulator (stack relative indirect indexed) ($F8.b,S),Y [Reads: Accumulator, Y Index, Stack Pointer] [Flags: ZCN]
	bvc L06722C.b		; Branch if overflow clear to L06722C.b [Flow: branch]
	cli		; Clear interupt ; Clear interrupt disable flag [Flags: I]
	jsr $0503.w		; Jump to subroutine at $0503.w [Writes: Stack Pointer] [Flow: call]
	stz $2A.b		; Store zero to $2A.b
	lda $52.b		; Load $52.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bne L0671DA.b		; Branch if not equal to L0671DA.b [Flow: branch]
	lda $13.b		; Load $13.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0F.b		; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L0671D8.b		; Branch if equal to L0671D8.b [Flow: branch]
	inc $13.b		; Increment $13.b [Reads: Direct Page] [Flags: ZN]
	bra L0671DA.b		; Branch always to L0671DA.b [Flow: branch]
L0671D8:
	inc $52.b		; Increment $52.b [Reads: Direct Page] [Flags: ZN]
L0671DA:
.ACCU 16
	rep #$20
	lda $0122.w		; Load $0122.w into accumulator [Writes: Accumulator] [Flags: ZN]
	bne L067203.b		; Branch if not equal to L067203.b [Flow: branch]
.ACCU 8
	sep #$20
	jsr L067766.w		; Jump to subroutine at L067766.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20
	lda $64.b		; Load $64.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
.ACCU 8
	sep #$20
	bne L067209.b		; Branch if not equal to L067209.b [Flow: branch]
	lda $2C.b		; Load $2C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$1F.b		; Compare #$1F.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcs L0671FA.b		; Branch if carry set to L0671FA.b [Flow: branch]
	and #$01.b		; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bne L0671FA.b		; Branch if not equal to L0671FA.b [Flow: branch]
	dec $13.b		; Decrement $13.b [Reads: Direct Page] [Flags: ZN]
L0671FA:
	dec $2C.b		; [PATTERN: Memory countdown loop] Decrement $2C.b [Reads: Direct Page] [Flags: ZN]
	bne L067209.b		; Branch if not equal to L067209.b [Flow: branch]
	inc $23.b		; Increment $23.b [Reads: Direct Page] [Flags: ZN]
	inc $22.b		; Increment $22.b [Reads: Direct Page] [Flags: ZN]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L067203:
	dec $0122.w		; Decrement $0122.w [Flags: ZN]
	dec $0124.w		; Decrement $0124.w [Flags: ZN]
L067209:
.ACCU 8
	sep #$20
	ldx #$02.b		; Load #$02.b into X register [Writes: X Index] [Flags: ZN]
L06720D:
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
.ACCU 16
	rep #$20
	lda $0CF1AE.l,X		; Load long $0CF1AE.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $2D.b		; Store accumulator to $2D.b [Reads: Accumulator]
	lda $0CF1B2.l,X		; Load long $0CF1B2.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	lda $0CF1B6.l,X		; Load long $0CF1B6.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; Store accumulator to $04.b [Reads: Accumulator]
	lda $0CF1BA.l,X		; Load long $0CF1BA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; Store accumulator to $06.b [Reads: Accumulator]
	lda $0CF1BE.l,X		; Load long $0CF1BE.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
L06722C:
	sta $08.b		; Store accumulator to $08.b [Reads: Accumulator]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0CF1C4.l,X		; Load long $0CF1C4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; Set carry ; Set carry flag [Flags: C]
	sbc $0122.w		; Subtract $0122.w from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	cmp #$FFE0.w		; Compare #$FFE0.w with accumulator [Reads: Accumulator] [Flags: ZCN]
.ACCU 8
	sep #$20
	bmi L06725A.b		; Branch if minus to L06725A.b [Flow: branch]
	lda $0CF1C2.l,X		; Load long $0CF1C2.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $28.b		; Store accumulator to $28.b [Reads: Accumulator]
	lda $00.b		; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $29.b		; Store accumulator to $29.b [Reads: Accumulator]
	lda $0CF1C6.l,X		; Load long $0CF1C6.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsr L0679B5.w		; Jump to subroutine at L0679B5.w [Writes: Stack Pointer] [Flow: call]
L06725A:
	plx		; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bpl L06720D.b		; Branch if plus to L06720D.b [Flow: branch]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr L067400.w		; Jump to subroutine at L067400.w [Writes: Stack Pointer] [Flow: call]
	sbc $011818.l,X		; Subtract with carry (long,X) $011818.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora ($09.b,X)		; Logical OR ($09.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$00.b]		; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $04.b,S		; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $04.b		; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $03.b		; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	ora $02.b,S		; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($64.b,X)		; Logical OR ($64.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lda $5F.b		; Load $5F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bne L067283.b		; Branch if not equal to L067283.b [Flow: branch]
	jsr L066EA6.w		; Jump to subroutine at L066EA6.w [Writes: Stack Pointer] [Flow: call]
L067283:
	lda #$38.b		; Load #$38.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $28.b		; Store accumulator to $28.b [Reads: Accumulator]
	jsr L0679E8.w		; Jump to subroutine at L0679E8.w [Writes: Stack Pointer] [Flow: call]
	lda $25.b		; Load $25.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$C0.b		; Compare #$C0.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcs L067293.b		; Branch if carry set to L067293.b [Flow: branch]
	jmp L067319.w		; Jump to L067319.w [Flow: jump]
L067293:
	lda #$70.b		; Load #$70.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $29.b		; Store accumulator to $29.b [Reads: Accumulator]
	dec $50.b		; Decrement $50.b [Reads: Direct Page] [Flags: ZN]
	bpl L06729F.b		; Branch if plus to L06729F.b [Flow: branch]
	lda #$0F.b		; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $50.b		; Store accumulator to $50.b [Reads: Accumulator]
L06729F:
	ldx $50.b		; Load $50.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $31.b		; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $40.b		; Store accumulator to $40.b [Reads: Accumulator]
	lda $30.b		; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $0CF26A.l,X		; Add long $0CF26A.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $28.b		; Store accumulator to $28.b [Reads: Accumulator]
	bcc L0672B2.b		; Branch if carry clear to L0672B2.b [Flow: branch]
	inc $40.b		; Increment $40.b [Reads: Direct Page] [Flags: ZN]
L0672B2:
	jsr $FA30.w		; Jump to subroutine at $FA30.w [Writes: Stack Pointer] [Flow: call]
	ldx #$01.b		; Load #$01.b into X register [Writes: X Index] [Flags: ZN]
L0672B7:
	stz $03.b		; Store zero to $03.b
	lda $33.b		; Load $33.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; Store accumulator to $06.b [Reads: Accumulator]
	lda $29.b		; Load $29.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $0CF264.l,X		; Add long $0CF264.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	lda $0CF266.l,X		; Load long $0CF266.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; Store accumulator to $04.b [Reads: Accumulator]
	lda $0CF268.l,X		; Load long $0CF268.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; Store accumulator to $05.b [Reads: Accumulator]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
.ACCU 16
	rep #$20
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $30.b		; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$0100.w		; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $0CF260.l,X		; Add long $0CF260.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sty $34.b		; Store Y register to $34.b [Reads: Y Index]
.ACCU 8
	sep #$20
	jsl $0DB871.l		; Jump to subroutine long $0DB871.l [Writes: Stack Pointer] [Flow: call]
	jsl $1DEB84.l		; Jump to subroutine long $1DEB84.l [Writes: Stack Pointer] [Flow: call]
	plx		; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bpl L0672B7.b		; Branch if plus to L0672B7.b [Flow: branch]
	inc $32.b		; Increment $32.b [Reads: Direct Page] [Flags: ZN]
	lda $32.b		; Load $32.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bne L067319.b		; Branch if not equal to L067319.b [Flow: branch]
	ldy #$FF.b		; Load #$FF.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $33.b		; Load $33.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L067317.b		; Branch if not equal to L067317.b [Flow: branch]
	sty $33.b		; Store Y register to $33.b [Reads: Y Index]
	lda $31.b		; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bne L067317.b		; Branch if not equal to L067317.b [Flow: branch]
	lda $32.b		; Load $32.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$08.b		; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L067317.b		; Branch if equal to L067317.b [Flow: branch]
	lda #$04.b		; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; Store accumulator to $012F.w [Reads: Accumulator]
L067317:
	inc $33.b		; Increment $33.b [Reads: Direct Page] [Flags: ZN]
L067319:
	lda $60.b		; Load $60.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp ($F320.w,X)		; Jump indirect indexed to ($F320.w,X) [Reads: X Index] [Flow: jump]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	sbc ($79.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($79.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($E6.b,S),Y		; Subtract with carry (stack relative indirect indexed) ($E6.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: VCNZ]
	and $C6.b,S		; AND accumulator with stack relative $C6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $6B22C6.l		; Jump to subroutine long $6B22C6.l [Writes: Stack Pointer] [Flow: call]
	lda $34.b		; Load $34.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bne L067331.b		; Branch if not equal to L067331.b [Flow: branch]
	inc $60.b		; Increment $60.b [Reads: Direct Page] [Flags: ZN]
L067331:
.ACCU 16
	rep #$20
	lda $1A.b		; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0001.w		; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L06733C.b		; Branch if equal to L06733C.b [Flow: branch]
	dec $30.b		; Decrement $30.b [Reads: Direct Page] [Flags: ZN]
L06733C:
	lda #$F8D9.w		; Load #$F8D9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $2D.b		; Store accumulator to $2D.b [Reads: Accumulator]
	lda #$F8DF.w		; Load #$F8DF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F8E5.w		; Load #$F8E5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; Store accumulator to $04.b [Reads: Accumulator]
	lda #$F903.w		; Load #$F903.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; Store accumulator to $06.b [Reads: Accumulator]
	lda #$F915.w		; Load #$F915.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20
	lda #$58.b		; Load #$58.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $28.b		; Store accumulator to $28.b [Reads: Accumulator]
	lda $2B.b		; Load $2B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $29.b		; Store accumulator to $29.b [Reads: Accumulator]
	ldy #$05.b		; Load #$05.b into Y register [Writes: Y Index] [Flags: ZN]
	jsr L0679B5.w		; Jump to subroutine at L0679B5.w [Writes: Stack Pointer] [Flow: call]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $F9.b,S		; OR accumulator with stack relative $F9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$F9.b		; Logical OR #$F9.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $F8EBF9.l		; OR accumulator with memory (long) $F8EBF9.l [Writes: Accumulator] [Flags: ZN]
	sbc $15F8.w,X		; Subtract with carry $15F8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $F91B.w,Y		; Subtract with carry $F91B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	and ($F9.b,X)		; Logical AND ($F9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $F9.b,X		; OR accumulator with memory $F9.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $F9.b,X		; OR accumulator with memory $F9.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	lda $25.b		; Load $25.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$80.b		; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcs L06738E.b		; Branch if carry set to L06738E.b [Flow: branch]
	jsr L067766.w		; Jump to subroutine at L067766.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20
	lda $64.b		; Load $64.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
.ACCU 8
	sep #$20
	beq L06738E.b		; Branch if equal to L06738E.b [Flow: branch]
	ldx #$08.b		; Load #$08.b into X register [Writes: X Index] [Flags: ZN]
	bra L0673C7.b		; Branch always to L0673C7.b [Flow: branch]
L06738E:
	ldx #$00.b		; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	lda $2B.b		; Load $2B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$6E.b		; Compare #$6E.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L06739A.b		; Branch if equal to L06739A.b [Flow: branch]
	dec $2B.b		; Decrement $2B.b [Reads: Direct Page] [Flags: ZN]
	bra L0673C7.b		; Branch always to L0673C7.b [Flow: branch]
L06739A:
	lda $25.b		; Load $25.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$1F.b		; Compare #$1F.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcs L0673A6.b		; Branch if carry set to L0673A6.b [Flow: branch]
	and #$01.b		; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bne L0673A6.b		; Branch if not equal to L0673A6.b [Flow: branch]
	dec $13.b		; Decrement $13.b [Reads: Direct Page] [Flags: ZN]
L0673A6:
	dec $25.b		; [PATTERN: Memory countdown loop] Decrement $25.b [Reads: Direct Page] [Flags: ZN]
	bne L0673AD.b		; Branch if not equal to L0673AD.b [Flow: branch]
	jmp $F324.w		; Jump to $F324.w [Flow: jump]
L0673AD:
	lda $25.b		; Load $25.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$C0.b		; Compare #$C0.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcs L0673C7.b		; Branch if carry set to L0673C7.b [Flow: branch]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp #$B8.b		; Compare #$B8.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcs L0673C7.b		; Branch if carry set to L0673C7.b [Flow: branch]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp #$B0.b		; Compare #$B0.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcs L0673C7.b		; Branch if carry set to L0673C7.b [Flow: branch]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp #$A0.b		; Compare #$A0.b with accumulator [Reads: Accumulator] [Flags: ZCN]
L0673C3:
	bcs L0673C7.b		; Branch if carry set to L0673C7.b [Flow: branch]
L0673C5:
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
L0673C7:
	lda #$A8.b		; Load #$A8.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $28.b		; Store accumulator to $28.b [Reads: Accumulator]
.ACCU 16
	rep #$20
	lda $1A.b		; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0001.w		; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L0673D6.b		; Branch if equal to L0673D6.b [Flow: branch]
	dec $30.b		; Decrement $30.b [Reads: Direct Page] [Flags: ZN]
L0673D6:
	lda #$F8D9.w		; Load #$F8D9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $2D.b		; Store accumulator to $2D.b [Reads: Accumulator]
	lda #$F8DF.w		; Load #$F8DF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F8E5.w		; Load #$F8E5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; Store accumulator to $04.b [Reads: Accumulator]
	lda $0CF365.l,X		; Load long $0CF365.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; Store accumulator to $06.b [Reads: Accumulator]
	lda $0CF36F.l,X		; Load long $0CF36F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20
	lda #$58.b		; Load #$58.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $28.b		; Store accumulator to $28.b [Reads: Accumulator]
	lda $2B.b		; Load $2B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $29.b		; Store accumulator to $29.b [Reads: Accumulator]
	ldy #$05.b		; Load #$05.b into Y register [Writes: Y Index] [Flags: ZN]
	jsr L0679B5.w		; Jump to subroutine at L0679B5.w [Writes: Stack Pointer] [Flow: call]
L067400:
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bmi L0673C3.b		; Branch if minus to L0673C3.b [Flow: branch]
	bmi L0673C5.b		; Branch if minus to L0673C5.b [Flow: branch]
	.db $50, $A0		; Invalid branch target (bvc L0673A7) ; Branch if overflow clear to $50, $A0 [Flow: branch]
	bvs L067479.b		; Branch if overflow set to L067479.b [Flow: branch]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$C0.b		; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZCN]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$09.b]		; OR accumulator with memory (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $92.b,X		; Subtract $92.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $13.b,X		; Subtract $13.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	inc $89.b,X		; Increment memory $89.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	inc $E2.b,X		; Increment memory $E2.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	inc $A5.b,X		; Increment memory $A5.b,X [Reads: Direct Page, X Index] [Flags: ZN]
	eor $03F0.w,X		; Exclusive OR accumulator with memory $03F0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp $F324.w		; Jump to $F324.w [Flow: jump]
	stz $2A.b		; Store zero to $2A.b
	jsl $1DE9B6.l		; Jump to subroutine long $1DE9B6.l [Writes: Stack Pointer] [Flow: call]
	lda $5F.b		; Load $5F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bne L067437.b		; Branch if not equal to L067437.b [Flow: branch]
	jsr L066EA6.w		; Jump to subroutine at L066EA6.w [Writes: Stack Pointer] [Flow: call]
L067437:
	lda $50.b		; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$FF.b		; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L06743F.b		; Branch if equal to L06743F.b [Flow: branch]
	inc $50.b		; Increment $50.b [Reads: Direct Page] [Flags: ZN]
L06743F:
	lda $0FF9.w		; Load $0FF9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	beq L06744D.b		; Branch if equal to L06744D.b [Flow: branch]
	and #$04.b		; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L06744D.b		; Branch if equal to L06744D.b [Flow: branch]
	ldx #$2B.b		; Load #$2B.b into X register [Writes: X Index] [Flags: ZN]
	stx $012F.w		; Store X register to $012F.w [Reads: X Index]
L06744D:
	lda $60.b		; Load $60.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; [PATTERN: Memory clearing operation] Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsr ($F419.w,X)		; Jump to subroutine indirect indexed ($F419.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ldx #$05.b		; Load #$05.b into X register [Writes: X Index] [Flags: ZN]
L067456:
	stz $01.b		; Store zero to $01.b
	stz $03.b		; Store zero to $03.b
	stz $06.b		; Store zero to $06.b
	lda $0CF401.l,X		; Load long $0CF401.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	lda $0CF407.l,X		; Load long $0CF407.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	lda $0CF40D.l,X		; Load long $0CF40D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; Store accumulator to $04.b [Reads: Accumulator]
	lda $0CF413.l,X		; Load long $0CF413.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; Store accumulator to $05.b [Reads: Accumulator]
	phx		; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0DB871.l		; Jump to subroutine long $0DB871.l [Writes: Stack Pointer] [Flow: call]
L067479:
	jsl $1DEB84.l		; Jump to subroutine long $1DEB84.l [Writes: Stack Pointer] [Flow: call]
	plx		; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bpl L067456.b		; Branch if plus to L067456.b [Flow: branch]
	ldx $50.b		; Load $50.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cpx #$A0.b		; Compare #$A0.b with X register [Reads: X Index] [Flags: ZCN]
	bcc L06749B.b		; Branch if carry clear to L06749B.b [Flow: branch]
	lda $30.b		; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$60.b		; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L067499.b		; Branch if equal to L067499.b [Flow: branch]
	dec $32.b		; [PATTERN: Memory countdown loop] Decrement $32.b [Reads: Direct Page] [Flags: ZN]
	bne L06749B.b		; Branch if not equal to L06749B.b [Flow: branch]
	dec $30.b		; Decrement $30.b [Reads: Direct Page] [Flags: ZN]
	lda #$08.b		; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $32.b		; Store accumulator to $32.b [Reads: Accumulator]
	bra L06749B.b		; Branch always to L06749B.b [Flow: branch]
L067499:
	inc $61.b		; Increment $61.b [Reads: Direct Page] [Flags: ZN]
L06749B:
	lda $52.b		; Load $52.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bne L06751A.b		; Branch if not equal to L06751A.b [Flow: branch]
.ACCU 16
	rep #$20
	lda #$F927.w		; Load #$F927.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $2D.b		; Store accumulator to $2D.b [Reads: Accumulator]
	lda #$F929.w		; Load #$F929.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F92B.w		; Load #$F92B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; Store accumulator to $04.b [Reads: Accumulator]
	ldx #$00.b		; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	lda $30.b		; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0070.w		; Compare #$0070.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L0674BE.b		; Branch if equal to L0674BE.b [Flow: branch]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
L0674BE:
	lda $0CF567.l,X		; Load long $0CF567.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; Store accumulator to $06.b [Reads: Accumulator]
	lda #$F931.w		; Load #$F931.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20
	lda #$74.b		; Load #$74.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $28.b		; Store accumulator to $28.b [Reads: Accumulator]
	lda $30.b		; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $29.b		; Store accumulator to $29.b [Reads: Accumulator]
	ldy #$01.b		; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsr L0679B5.w		; Jump to subroutine at L0679B5.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0E.b		; Load #$0E.b into X register [Writes: X Index] [Flags: ZN]
	lda $30.b		; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$68.b		; Compare #$68.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcs L0674E7.b		; Branch if carry set to L0674E7.b [Flow: branch]
	sec		; Set carry ; Set carry flag [Flags: C]
	sbc #$68.b		; Subtract #$68.b from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	and #$0E.b		; Logical AND #$0E.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
L0674E7:
.ACCU 16
	rep #$20
	lda #$F933.w		; Load #$F933.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $2D.b		; Store accumulator to $2D.b [Reads: Accumulator]
	lda $0CF54F.l,X		; Load long $0CF54F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F93F.w		; Load #$F93F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; Store accumulator to $04.b [Reads: Accumulator]
	lda #$F941.w		; Load #$F941.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; Store accumulator to $06.b [Reads: Accumulator]
	lda #$F943.w		; Load #$F943.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$74.b		; Load #$74.b into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $0CF55F.l,X		; Add long $0CF55F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $28.b		; Store accumulator to $28.b [Reads: Accumulator]
	lda #$76.b		; Load #$76.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $29.b		; Store accumulator to $29.b [Reads: Accumulator]
	ldy #$01.b		; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsr L0679B5.w		; Jump to subroutine at L0679B5.w [Writes: Stack Pointer] [Flow: call]
L06751A:
	lda $50.b		; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	and #$0E.b		; Logical AND #$0E.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20
	lda #$F8D9.w		; Load #$F8D9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $2D.b		; Store accumulator to $2D.b [Reads: Accumulator]
	lda #$F8DF.w		; Load #$F8DF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F8E5.w		; Load #$F8E5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; Store accumulator to $04.b [Reads: Accumulator]
	lda $0CF56B.l,X		; Load long $0CF56B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; Store accumulator to $06.b [Reads: Accumulator]
	lda #$F915.w		; Load #$F915.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20
	lda #$70.b		; Load #$70.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $28.b		; Store accumulator to $28.b [Reads: Accumulator]
	lda #$46.b		; Load #$46.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $29.b		; Store accumulator to $29.b [Reads: Accumulator]
	ldy #$05.b		; Load #$05.b into Y register [Writes: Y Index] [Flags: ZN]
	jsr L0679B5.w		; Jump to subroutine at L0679B5.w [Writes: Stack Pointer] [Flow: call]
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $3DF9.w,X		; AND accumulator with memory $3DF9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $F93B.w,Y		; Subtract with carry $F93B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $F939.w,Y		; Subtract with carry $F939.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	and $37F9.w,Y		; AND accumulator with memory $37F9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $F935.w,Y		; Subtract with carry $F935.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	tsb $04.b		; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $2FF9.w		; Logical AND $2FF9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $F8EB.w,Y		; Subtract with carry $F8EB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc ($F8.b),Y		; Subtract with carry ($F8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	sbc [$F8.b],Y		; Subtract with carry (long indexed) [$F8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	sbc ($F8.b),Y		; Subtract with carry ($F8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sed		; Set decimal ; Set decimal flag [Flags: D]
	sbc $A5F8.w,X		; Subtract with carry $A5F8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc ($F0.b,X)		; Add with carry ($F0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	cop $E6.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $F97DF9.l		; Add with carry (long) $F97DF9.l [Writes: Accumulator] [Flags: VCNZ]
	phb		; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sbc $F999.w,Y		; Subtract with carry $F999.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	ora ($01.b,X)		; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($05.b,X)		; Logical OR ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $09.b		; Logical OR $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$0D.b		; Logical OR #$0D.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $1A.b		; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	and #$02.b		; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20
	lda #$F945.w		; Load #$F945.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $2D.b		; Store accumulator to $2D.b [Reads: Accumulator]
	lda #$F953.w		; Load #$F953.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F961.w		; Load #$F961.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; Store accumulator to $04.b [Reads: Accumulator]
	lda $0CF582.l,X		; Load long $0CF582.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; Store accumulator to $06.b [Reads: Accumulator]
	lda $0CF586.l,X		; Load long $0CF586.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20
	lda #$6E.b		; Load #$6E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $28.b		; Store accumulator to $28.b [Reads: Accumulator]
	lda #$48.b		; Load #$48.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $29.b		; Store accumulator to $29.b [Reads: Accumulator]
	lda $51.b		; Load $51.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	and #$07.b		; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0CF58A.l,X		; Load long $0CF58A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsr L0679B5.w		; Jump to subroutine at L0679B5.w [Writes: Stack Pointer] [Flow: call]
	lda $51.b		; Load $51.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bne L0675DC.b		; Branch if not equal to L0675DC.b [Flow: branch]
	ldy $63.b		; Load $63.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cpy #$70.b		; Compare #$70.b with Y register [Reads: Y Index] [Flags: ZCN]
	bne L0675DC.b		; Branch if not equal to L0675DC.b [Flow: branch]
	ldx #$27.b		; Load #$27.b into X register [Writes: X Index] [Flags: ZN]
	stx $012F.w		; Store X register to $012F.w [Reads: X Index]
L0675DC:
	cmp #$0F.b		; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L0675F8.b		; Branch if equal to L0675F8.b [Flow: branch]
	cmp #$06.b		; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L0675EE.b		; Branch if not equal to L0675EE.b [Flow: branch]
	ldx #$90.b		; Load #$90.b into X register [Writes: X Index] [Flags: ZN]
	stx $0FF9.w		; Store X register to $0FF9.w [Reads: X Index]
	ldx #$2B.b		; Load #$2B.b into X register [Writes: X Index] [Flags: ZN]
	stx $012F.w		; Store X register to $012F.w [Reads: X Index]
L0675EE:
	lda $63.b		; Load $63.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	beq L0675F5.b		; Branch if equal to L0675F5.b [Flow: branch]
	dec $63.b		; Decrement $63.b [Reads: Direct Page] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L0675F5:
	inc $51.b		; Increment $51.b [Reads: Direct Page] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L0675F8:
	inc $60.b		; Increment $60.b [Reads: Direct Page] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0A0D.w		; Logical OR $0A0D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $0A.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $1A.b		; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	and #$02.b		; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $51.b		; Load $51.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	and #$07.b		; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20
	lda #$F945.w		; Load #$F945.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $F603.w,Y		; Add $F603.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $2D.b		; Store accumulator to $2D.b [Reads: Accumulator]
	lda #$F953.w		; Load #$F953.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $F603.w,Y		; Add $F603.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F961.w		; Load #$F961.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $F603.w,Y		; Add $F603.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $04.b		; Store accumulator to $04.b [Reads: Accumulator]
	lda $F582.w,X		; Load $F582.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $F603.w,Y		; Add $F603.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $06.b		; Store accumulator to $06.b [Reads: Accumulator]
	lda $F586.w,X		; Load $F586.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $F603.w,Y		; Add $F603.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $08.b		; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20
	lda #$6E.b		; Load #$6E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $28.b		; Store accumulator to $28.b [Reads: Accumulator]
	lda #$48.b		; Load #$48.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $29.b		; Store accumulator to $29.b [Reads: Accumulator]
	ldx $00.b		; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $F5FB.w,X		; Load $F5FB.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsr L0679B5.w		; Jump to subroutine at L0679B5.w [Writes: Stack Pointer] [Flow: call]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $51.b		; Load $51.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bne L067672.b		; Branch if not equal to L067672.b [Flow: branch]
	dec $62.b		; Decrement $62.b [Reads: Direct Page] [Flags: ZN]
	beq L0675F8.b		; Branch if equal to L0675F8.b [Flow: branch]
	bra L067674.b		; Branch always to L067674.b [Flow: branch]
L067672:
	dec $51.b		; Decrement $51.b [Reads: Direct Page] [Flags: ZN]
L067674:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$F9.b		; Load #$F9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AAF9.w		; Load $AAF9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $F9AF.w,Y		; Subtract with carry $F9AF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sbc $F9B1.w,Y		; Subtract with carry $F9B1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	ldy $B3F9.w		; Load $B3F9.w into Y register [Writes: Y Index] [Flags: ZN]
	sbc $7078.w,Y		; Subtract with carry $7078.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $51.b		; Load $51.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L067696.b		; Branch if not equal to L067696.b [Flow: branch]
	inc $52.b		; Increment $52.b [Reads: Direct Page] [Flags: ZN]
	lda #$33.b		; Load #$33.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; Store accumulator to $012E.w [Reads: Accumulator]
L067696:
	cmp #$40.b		; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L0676A0.b		; Branch if not equal to L0676A0.b [Flow: branch]
	lda #$E0.b		; Load #$E0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $51.b		; Store accumulator to $51.b [Reads: Accumulator]
	inc $60.b		; Increment $60.b [Reads: Direct Page] [Flags: ZN]
L0676A0:
	cmp #$0F.b		; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcs L0676DF.b		; Branch if carry set to L0676DF.b [Flow: branch]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	and #$02.b		; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20
	lda #$F9A7.w		; Load #$F9A7.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $2D.b		; Store accumulator to $2D.b [Reads: Accumulator]
	lda $0CF675.l,X		; Load long $0CF675.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	lda $0CF679.l,X		; Load long $0CF679.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; Store accumulator to $04.b [Reads: Accumulator]
	lda $0CF67D.l,X		; Load long $0CF67D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; Store accumulator to $06.b [Reads: Accumulator]
	lda $0CF681.l,X		; Load long $0CF681.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0CF685.l,X		; Load long $0CF685.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $28.b		; Store accumulator to $28.b [Reads: Accumulator]
	lda #$60.b		; Load #$60.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $29.b		; Store accumulator to $29.b [Reads: Accumulator]
	lda $0CF687.l,X		; Load long $0CF687.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
L0676DC:
	jsr L0679B5.w		; Jump to subroutine at L0679B5.w [Writes: Stack Pointer] [Flow: call]
L0676DF:
	inc $51.b		; Increment $51.b [Reads: Direct Page] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr L067766.w		; Jump to subroutine at L067766.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20
	lda $64.b		; Load $64.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
.ACCU 8
	sep #$20
	bne L0676FF.b		; Branch if not equal to L0676FF.b [Flow: branch]
	lda $51.b		; Load $51.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$1F.b		; Compare #$1F.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcs L0676F9.b		; Branch if carry set to L0676F9.b [Flow: branch]
	and #$01.b		; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bne L0676F9.b		; Branch if not equal to L0676F9.b [Flow: branch]
	dec $13.b		; Decrement $13.b [Reads: Direct Page] [Flags: ZN]
L0676F9:
	dec $51.b		; [PATTERN: Memory countdown loop] Decrement $51.b [Reads: Direct Page] [Flags: ZN]
	bne L0676FF.b		; Branch if not equal to L0676FF.b [Flow: branch]
	inc $5D.b		; Increment $5D.b [Reads: Direct Page] [Flags: ZN]
L0676FF:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $13.b		; [PATTERN: Memory countdown loop] Decrement $13.b [Reads: Direct Page] [Flags: ZN]
	bne L06772D.b		; Branch if not equal to L06772D.b [Flow: branch]
	jsl $00893D.l		; Jump to subroutine long $00893D.l [Writes: Stack Pointer] [Flow: call]
	lda #$13.b		; Load #$13.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta BG1SC.w		; BG1 Tilemap Address and Size ; Store accumulator to BG1SC.w [Reads: Accumulator]
	lda #$03.b		; [PATTERN: Memory clearing operation] Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta BG2SC.w		; BG2 Tilemap Address and Size ; Store accumulator to BG2SC.w [Reads: Accumulator]
.ACCU 16
	rep #$20
	jsl $0ABC33.l		; Jump to subroutine long $0ABC33.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20
	stz $063A.w		; Store zero to $063A.w
	stz $0638.w		; Store zero to $0638.w
	stz $0120.w		; [PATTERN: Memory clearing operation] Store zero to $0120.w
	stz $0124.w		; Store zero to $0124.w
	stz $EA.b		; Store zero to $EA.b
.ACCU 8
	sep #$20
	jmp L0642F0.w		; Jump to L0642F0.w [Flow: jump]
L06772D:
	rtl		; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$FA
	eor $FC4CFB.l,X		; Exclusive OR accumulator with memory (long,X) $FC4CFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($FD.b,S),Y		; OR accumulator (stack relative indirect indexed) ($FD.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stz $EC00.w		; Store zero to $EC00.w
	brk $C6.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($C2.b,X)		; Logical OR ($C2.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $26A6.w		; Jump to subroutine at $26A6.w [Writes: Stack Pointer] [Flow: call]
	lda $0CF736.l,X		; Load long $0CF736.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	lda $0CF72E.l,X		; Load long $0CF72E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	ldx #$860C.w		; Load #$860C.w into X register [Writes: X Index] [Flags: ZN]
	tsb $C2.b		; Test and set bits $C2.b [Reads: Accumulator] [Flags: Z]
	bpl L0676F9.b		; Branch if plus to L0676F9.b [Flow: branch]
	brk $B7.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $99.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $10.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $F7		; Invalid branch target (bpl L067756) ; Branch if plus to $10, $F7 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; Store accumulator to $14.b [Reads: Accumulator]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L067766:
	lda $E8.b		; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $20.b		; [PATTERN: Memory clearing operation] Store accumulator to $20.b [Reads: Accumulator]
	lda $E9.b		; Load $E9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $21.b		; Store accumulator to $21.b [Reads: Accumulator]
	stz $F2.b		; Store zero to $F2.b
	stz $F6.b		; Store zero to $F6.b
	stz $F4.b		; Store zero to $F4.b
	jsl $0EC440.l		; Jump to subroutine long $0EC440.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20
	lda $64.b		; Load $64.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	beq L067780.b		; Branch if equal to L067780.b [Flow: branch]
	dec $64.b		; Decrement $64.b [Reads: Direct Page] [Flags: ZN]
L067780:
.ACCU 8
	sep #$20
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L067783:
.INDEX 16
	rep #$10
	lda $0637.w		; Load $0637.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta WRMPYA.w		; Multiplicand A ; Store accumulator to WRMPYA.w [Reads: Accumulator]
	ldx #$01BE.w		; Load #$01BE.w into X register [Writes: X Index] [Flags: ZN]
L06778E:
	lda $0ADD27.l,X		; Load long $0ADD27.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta WRMPYB.w		; Multplier B ; Store accumulator to WRMPYB.w [Reads: Accumulator]
	nop		; No operation
	nop		; No operation
	nop		; No operation
	nop		; No operation
	lda RDMPYH.w		; Multiplication Product or Divide Remainder High Byte ; Load RDMPYH.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	lda $0ADD28.l,X		; Load long $0ADD28.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta WRMPYB.w		; Multplier B ; Store accumulator to WRMPYB.w [Reads: Accumulator]
	nop		; No operation
	lda $00.b		; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $4216.w		; Add $4216.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1B00.w,X		; Store accumulator to $1B00.w,X [Reads: Accumulator, X Index]
	lda RDMPYH.w		; Multiplication Product or Divide Remainder High Byte ; Load RDMPYH.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $1B01.w,X		; Store accumulator to $1B01.w,X [Reads: Accumulator, X Index]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bpl L06778E.b		; Branch if plus to L06778E.b [Flow: branch]
.INDEX 8
	sep #$10
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$01.b		; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	ldx $09.b		; Load $09.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $89.b		; Load $89.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $09.b		; Load $09.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$01.b		; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	ldx $89.b		; Load $89.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $49.b		; Load $49.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$01.b		; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $49.b		; Load $49.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $89.b		; Load $89.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $C9.b		; Load $C9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	lda ($09.b,X)		; Load accumulator ($09.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ldx #$09.b		; Load #$09.b into X register [Writes: X Index] [Flags: ZN]
	lda $09.b,S		; Load accumulator (stack relative) $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $09.b		; Load $09.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
L0677E6:
	lda #$09.b		; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $94.b		; Store accumulator to $94.b [Reads: Accumulator]
	lda #$17.b		; Load #$17.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1C.b		; Store accumulator to $1C.b [Reads: Accumulator]
	stz $1D.b		; Store zero to $1D.b
	lda #$10.b		; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta BG1SC.w		; BG1 Tilemap Address and Size ; Store accumulator to BG1SC.w [Reads: Accumulator]
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta BG2SC.w		; BG2 Tilemap Address and Size ; Store accumulator to BG2SC.w [Reads: Accumulator]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30
	ldx #$0000.w		; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	lda #$F7BE.w		; Load #$F7BE.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $30.b		; Store accumulator to $30.b [Reads: Accumulator]
L067807:
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0007.w		; Logical AND #$0007.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
L06780C:
	lda ($30.b),Y		; Load accumulator ($30.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1006.w,X		; Store accumulator to $1006.w,X [Reads: Accumulator, X Index]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$0007.w		; Logical AND #$0007.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bne L06780C.b		; Branch if not equal to L06780C.b [Flow: branch]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$003F.w		; Logical AND #$003F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bne L067807.b		; Branch if not equal to L067807.b [Flow: branch]
	lda $30.b		; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$0008.w		; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $30.b		; Store accumulator to $30.b [Reads: Accumulator]
	cpx #$0100.w		; Compare #$0100.w with X register [Reads: X Index] [Flags: ZCN]
	bne L067807.b		; Branch if not equal to L067807.b [Flow: branch]
	lda #$1000.w		; Load #$1000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $30.b		; Store accumulator to $30.b [Reads: Accumulator]
	jsr L067879.w		; Jump to subroutine at L067879.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30
	ldx #$0000.w		; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	lda #$F7DE.w		; Load #$F7DE.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $30.b		; Store accumulator to $30.b [Reads: Accumulator]
L067840:
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0003.w		; Logical AND #$0003.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
L067845:
	lda ($30.b),Y		; Load accumulator ($30.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1006.w,X		; Store accumulator to $1006.w,X [Reads: Accumulator, X Index]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$0003.w		; Logical AND #$0003.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bne L067845.b		; Branch if not equal to L067845.b [Flow: branch]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$003F.w		; Logical AND #$003F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bne L067840.b		; Branch if not equal to L067840.b [Flow: branch]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0040.w		; Logical AND #$0040.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$F7DE.w		; Add #$F7DE.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $30.b		; Store accumulator to $30.b [Reads: Accumulator]
	cpx #$0100.w		; Compare #$0100.w with X register [Reads: X Index] [Flags: ZCN]
	bne L067840.b		; Branch if not equal to L067840.b [Flow: branch]
	lda #$0000.w		; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $30.b		; Store accumulator to $30.b [Reads: Accumulator]
	jsr L067879.w		; Jump to subroutine at L067879.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L067879:
.INDEX 8
	sep #$10
	ldx #$07.b		; Load #$07.b into X register [Writes: X Index] [Flags: ZN]
	lda $30.b		; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta VMADDL.w		; VRAM Address Low Byte ; Store accumulator to VMADDL.w [Reads: Accumulator]
L067882:
	ldy #$80.b		; Load #$80.b into Y register [Writes: Y Index] [Flags: ZN]
	sty VMAIN.w		; Video Port Control ; Store Y register to VMAIN.w [Reads: Y Index]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	sta DMAP0.w		; DMA 0 Control ; Store accumulator to DMAP0.w [Reads: Accumulator]
	lda #$06.b		; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $8D		; Invalid branch target (bpl L06781E) ; Branch if plus to $10, $8D [Flow: branch]
	cop $43.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$00.b		; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	sty DMASRC0B.w		; DMA 0 Source Address Bank ; Store Y register to DMASRC0B.w [Reads: Y Index]
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($8D.b,X)		; Logical OR ($8D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $43.b		; Logical OR $43.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
L06789E:
	ldy #$01.b		; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	sty MDMAEN.w		; DMA Channel Enable ; Store Y register to MDMAEN.w [Reads: Y Index]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bpl L067882.b		; Branch if plus to L067882.b [Flow: branch]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L0678AD.b		; Branch if plus to L0678AD.b [Flow: branch]
L0678AD:
	bpl L0678AF.b		; Branch if plus to L0678AF.b [Flow: branch]
L0678AF:
	bpl L0678C1.b		; Branch if plus to L0678C1.b [Flow: branch]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tda		; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tda		; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L0678C1:
	brk $10.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $1000.w		; Jump to subroutine at $1000.w [Writes: Stack Pointer] [Flow: call]
	jsr $0000.w		; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	brk $10.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L0678DD.b		; Branch if plus to L0678DD.b [Flow: branch]
	tsb $0C0E.w		; Test and set bits $0C0E.w [Reads: Accumulator] [Flags: Z]
	bit $2C2E.w		; Test bits $2C2E.w with accumulator [Reads: Accumulator] [Flags: VNZ]
	and ($31.b),Y		; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($31.b),Y		; Add with carry ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	and ($71.b),Y		; AND accumulator with memory ($71.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L0678DD:
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0B.b		; Logical OR $0B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $10.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0019.w,Y		; OR accumulator with memory $0019.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $10.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L067958.b		; Branch if plus to L067958.b [Flow: branch]
	jmp ($8282.w)		; Jump indirect to ($8282.w) [Flow: jump]
	ldx #$A2.b		; Load #$A2.b into X register [Writes: X Index] [Flags: ZN]
	jmp ($806C.w)		; Jump indirect to ($806C.w) [Flow: jump]
	.db $82, $A0, $A2		; Invalid branch target (brl L061B97) ; Branch always long to $82, $A0, $A2 [Flow: branch]
	jmp ($826C.w)		; Jump indirect to ($826C.w) [Flow: jump]
	bra L06789E.b		; Branch always to L06789E.b [Flow: branch]
	ldy #$6C.b		; Load #$6C.b into Y register [Writes: Y Index] [Flags: ZN]
	jmp ($8080.w)		; Jump indirect to ($8080.w) [Flow: jump]
	ldy #$A0.b		; Load #$A0.b into Y register [Writes: Y Index] [Flags: ZN]
	jmp ($846C.w)		; Jump indirect to ($846C.w) [Flow: jump]
	sty $A4.b		; Store Y register to $A4.b [Reads: Y Index]
	ldy $6C.b		; Load $6C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	jmp ($C2C4.w)		; Jump indirect to ($C2C4.w) [Flow: jump]
	cpx $E6.b		; Compare $E6.b with X register [Reads: Direct Page, X Index] [Flags: ZCN]
	jmp ($886C.w)		; Jump indirect to ($886C.w) [Flow: jump]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sec		; Set carry ; Set carry flag [Flags: C]
	sec		; Set carry ; Set carry flag [Flags: C]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tda		; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tda		; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; Set carry ; Set carry flag [Flags: C]
	sec		; Set carry ; Set carry flag [Flags: C]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sec		; Set carry ; Set carry flag [Flags: C]
	sec		; Set carry ; Set carry flag [Flags: C]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $04.b,S		; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $023D.w,X		; AND accumulator with memory $023D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $06.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($386C.w)		; Jump indirect to ($386C.w) [Flow: jump]
	sec		; Set carry ; Set carry flag [Flags: C]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FE1E.w,X		; Increment memory $FE1E.w,X [Reads: X Index] [Flags: ZN]
L067958:
	asl $1C00.w,X		; Arithmetic shift left $1C00.w,X [Reads: X Index] [Flags: ZCN]
	brk $1C.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $12.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $12.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bpl L067979.b		; Branch if plus to L067979.b [Flow: branch]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	.db $10, $10		; Invalid branch target (bpl L06797D) ; Branch if plus to $10, $10 [Flow: branch]
	jsr $CE20.w		; Jump to subroutine at $CE20.w [Writes: Stack Pointer] [Flow: call]
	dec $2626.w		; Decrement $2626.w [Flags: ZN]
	rol $36.b,X		; Rotate left $36.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	rol $26.b		; Rotate left $26.b [Reads: Direct Page] [Flags: ZCN]
	rol $36.b,X		; Rotate left $36.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
L067979:
	jsr $2020.w		; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	jsr $CECE.w		; Jump to subroutine at $CECE.w [Writes: Stack Pointer] [Flow: call]
	rol $26.b		; Rotate left $26.b [Reads: Direct Page] [Flags: ZCN]
	rol $36.b,X		; Rotate left $36.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	rol $26.b		; Rotate left $26.b [Reads: Direct Page] [Flags: ZCN]
	rol $36.b,X		; Rotate left $36.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	jsl $222222.l		; Jump to subroutine long $222222.l [Writes: Stack Pointer] [Flow: call]
	and $35.b,X		; Logical AND $35.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	adc $35.b,X		; Add $35.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $35.b,X		; Add $35.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $35.b,X		; Add $35.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $35.b,X		; Add $35.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	and $75.b,X		; Logical AND $75.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	lda $F5.b,X		; Load $F5.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and [$37.b],Y		; AND accumulator with memory (long indexed) [$37.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc [$37.b],Y		; Add with carry (long indexed) [$37.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	adc [$37.b],Y		; Add with carry (long indexed) [$37.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	adc [$37.b],Y		; Add with carry (long indexed) [$37.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	adc [$37.b],Y		; Add with carry (long indexed) [$37.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: VCNZ]
	and [$77.b],Y		; AND accumulator with memory (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$F7.b],Y		; Load accumulator (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $3D.b		; Decrement $3D.b [Reads: Direct Page] [Flags: ZN]
	brk $10.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $24.b		; Test bits $24.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	and $75.b,X		; Logical AND $75.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
L0679B5:
	phb		; [PATTERN: Function entry: Data bank preservation prologue] Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
L0679B8:
	ldx $2A.b		; Load $2A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda ($2D.b),Y		; Load accumulator ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0A60.w,X		; Store accumulator to $0A60.w,X [Reads: Accumulator, X Index]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda ($02.b),Y		; Load accumulator ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $28.b		; Add $28.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sta $0900.w,X		; Store accumulator to $0900.w,X [Reads: Accumulator, X Index]
	lda ($04.b),Y		; Load accumulator ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $29.b		; Add $29.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	sta $0901.w,X		; Store accumulator to $0901.w,X [Reads: Accumulator, X Index]
	lda ($06.b),Y		; Load accumulator ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0902.w,X		; Store accumulator to $0902.w,X [Reads: Accumulator, X Index]
	lda ($08.b),Y		; Load accumulator ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0903.w,X		; Store accumulator to $0903.w,X [Reads: Accumulator, X Index]
	inc $2A.b		; Increment $2A.b [Reads: Direct Page] [Flags: ZN]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bpl L0679B8.b		; Branch if plus to L0679B8.b [Flow: branch]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	and #$29.b		; Logical AND #$29.b with accumulator [Writes: Accumulator] [Flags: ZN]
L0679E8:
	ldx $2A.b		; Load $2A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A60.w,X		; Store accumulator to $0A60.w,X [Reads: Accumulator, X Index]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$60.b		; Load #$60.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0900.w,X		; Store accumulator to $0900.w,X [Reads: Accumulator, X Index]
	sta $0904.w,X		; Store accumulator to $0904.w,X [Reads: Accumulator, X Index]
	lda $28.b		; Load $28.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0901.w,X		; Store accumulator to $0901.w,X [Reads: Accumulator, X Index]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$0A.b		; Add #$0A.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $0905.w,X		; Store accumulator to $0905.w,X [Reads: Accumulator, X Index]
	lda $0CF9E4.l		; Load long $0CF9E4.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0902.w,X		; Store accumulator to $0902.w,X [Reads: Accumulator, X Index]
	lda $0CF9E5.l		; Load long $0CF9E5.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0906.w,X		; Store accumulator to $0906.w,X [Reads: Accumulator, X Index]
	lda $0CF9E6.l		; Load long $0CF9E6.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0903.w,X		; Store accumulator to $0903.w,X [Reads: Accumulator, X Index]
	lda $0CF9E7.l		; Load long $0CF9E7.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0907.w,X		; Store accumulator to $0907.w,X [Reads: Accumulator, X Index]
	inc $2A.b		; Increment $2A.b [Reads: Direct Page] [Flags: ZN]
	inc $2A.b		; Increment $2A.b [Reads: Direct Page] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $08.b		; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	brk $01.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	ora #$3D.b		; Logical OR #$3D.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $4B8B.w,X		; AND accumulator with memory $4B8B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldx $2A.b		; Load $2A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $40.b		; Load $40.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	beq L067A3E.b		; Branch if equal to L067A3E.b [Flow: branch]
	ora #$01.b		; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
L067A3E:
	sta $0A60.w,X		; Store accumulator to $0A60.w,X [Reads: Accumulator, X Index]
	sta $0A61.w,X		; Store accumulator to $0A61.w,X [Reads: Accumulator, X Index]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $28.b		; Load $28.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0900.w,X		; Store accumulator to $0900.w,X [Reads: Accumulator, X Index]
	sta $0904.w,X		; Store accumulator to $0904.w,X [Reads: Accumulator, X Index]
	lda $32.b		; Load $32.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	and #$01.b		; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $29.b		; Load $29.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $FA2A.w,Y		; Add $FA2A.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $0901.w,X		; Store accumulator to $0901.w,X [Reads: Accumulator, X Index]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $FA2C.w,Y		; Add $FA2C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $0905.w,X		; Store accumulator to $0905.w,X [Reads: Accumulator, X Index]
	lda $FA27.w		; Load $FA27.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0902.w,X		; Store accumulator to $0902.w,X [Reads: Accumulator, X Index]
	lda $FA28.w,Y		; Load $FA28.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0906.w,X		; Store accumulator to $0906.w,X [Reads: Accumulator, X Index]
	lda $FA2E.w		; Load $FA2E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0903.w,X		; Store accumulator to $0903.w,X [Reads: Accumulator, X Index]
	lda $FA2F.w		; Load $FA2F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0907.w,X		; Store accumulator to $0907.w,X [Reads: Accumulator, X Index]
	inc $2A.b		; Increment $2A.b [Reads: Direct Page] [Flags: ZN]
	inc $2A.b		; Increment $2A.b [Reads: Direct Page] [Flags: ZN]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $00FF.w		; Jump to subroutine at $00FF.w [Writes: Stack Pointer] [Flow: call]
	.db $50, $18		; Invalid branch target (bvc L067AA4) ; Branch if overflow clear to $50, $18 [Flow: branch]
	cpx #$50.b		; Compare #$50.b with X register [Reads: X Index] [Flags: ZCN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	cpx #$01.b		; Compare #$01.b with X register [Reads: X Index] [Flags: ZCN]
	sbc $480000.l,X		; Subtract with carry (long,X) $480000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $303000.l,X		; Subtract with carry (long,X) $303000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	cld		; Clear decimal ; Clear decimal flag [Flags: D]
	ora ($FF.b,X)		; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($26.b,X)		; Logical OR ($26.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta [$FA.b]		; Store accumulator (long) [$FA.b] [Reads: Direct Page, Accumulator]
	tsb $04A2.w		; Test and set bits $04A2.w [Reads: Accumulator] [Flags: Z]
L067AA5:
	lda $0CFA9E.l,X		; Load long $0CFA9E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $4360.w,X		; Store accumulator to $4360.w,X [Reads: Accumulator, X Index]
	sta $4370.w,X		; Store accumulator to $4370.w,X [Reads: Accumulator, X Index]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bpl L067AA5.b		; Branch if plus to L067AA5.b [Flow: branch]
.ACCU 16
	rep #$20
	lda #$FA94.w		; Load #$FA94.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta DMASRC7L.w		; DMA 7 Source Adress Low Byte ; Store accumulator to DMASRC7L.w [Reads: Accumulator]
.ACCU 8
	sep #$20
	lda #$28.b		; Load #$28.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta DMADEST7.w		; DMA 7 Destination Register ; Store accumulator to DMADEST7.w [Reads: Accumulator]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($65.b,X)		; Add with carry ($65.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	brk $35.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($85.b,X)		; Add with carry ($85.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	.db $10, $35		; Invalid branch target (bpl L067B03) ; Branch if plus to $10, $35 [Flow: branch]
	adc ($A5.b,X)		; Add with carry ($A5.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $29.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($35.b,X)		; Logical OR ($35.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $35.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($35.b,X)		; Logical OR ($35.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $35.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($35.b,X)		; Logical OR ($35.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $35.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($35.b,X)		; Logical OR ($35.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $35.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($35.b,X)		; Logical OR ($35.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $31.b,S		; OR accumulator with stack relative $31.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $71.b,S		; OR accumulator with stack relative $71.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $35.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($35.b,X)		; Logical OR ($35.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $35.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($35.b,X)		; Logical OR ($35.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $35.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($35.b,X)		; Logical OR ($35.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $35.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($35.b,X)		; Logical OR ($35.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $35.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($35.b,X)		; Logical OR ($35.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc ($C5.b,X)		; Add with carry ($C5.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $29.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($35.b),Y		; OR accumulator with memory ($35.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($35.b)		; OR accumulator with memory (indirect) ($35.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($35.b),Y		; OR accumulator with memory ($35.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($35.b)		; OR accumulator with memory (indirect) ($35.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($35.b),Y		; OR accumulator with memory ($35.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($35.b)		; OR accumulator with memory (indirect) ($35.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($35.b),Y		; OR accumulator with memory ($35.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($35.b)		; OR accumulator with memory (indirect) ($35.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($35.b),Y		; OR accumulator with memory ($35.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($35.b,S),Y		; OR accumulator (stack relative indirect indexed) ($35.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($75.b,S),Y		; OR accumulator (stack relative indirect indexed) ($75.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($35.b)		; OR accumulator with memory (indirect) ($35.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($35.b),Y		; OR accumulator with memory ($35.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($35.b)		; OR accumulator with memory (indirect) ($35.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($35.b),Y		; OR accumulator with memory ($35.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($35.b)		; OR accumulator with memory (indirect) ($35.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($35.b),Y		; OR accumulator with memory ($35.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($35.b)		; OR accumulator with memory (indirect) ($35.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($35.b),Y		; OR accumulator with memory ($35.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($35.b)		; OR accumulator with memory (indirect) ($35.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($35.b),Y		; OR accumulator with memory ($35.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($E5.b,X)		; Add with carry ($E5.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $29.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2135.w		; Jump to subroutine at $2135.w [Writes: Stack Pointer] [Flow: call]
	and $20.b,X		; Logical AND $20.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $21.b,X		; Logical AND $21.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $20.b,X		; Logical AND $20.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $21.b,X		; Logical AND $21.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $20.b,X		; Logical AND $20.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $21.b,X		; Logical AND $21.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $20.b,X		; Logical AND $20.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $21.b,X		; Logical AND $21.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $20.b,X		; Logical AND $20.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $21.b,X		; Logical AND $21.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $20.b,X		; Logical AND $20.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $21.b,X		; Logical AND $21.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $20.b,X		; Logical AND $20.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $21.b,X		; Logical AND $21.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $20.b,X		; Logical AND $20.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $21.b,X		; Logical AND $21.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $20.b,X		; Logical AND $20.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $21.b,X		; Logical AND $21.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $20.b,X		; Logical AND $20.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $62.b,X		; Logical AND $62.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $40.b		; Logical OR $40.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	brk $B5.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $406561.l,X		; Subtract with carry (long,X) $406561.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	brk $35.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($85.b,X)		; Add with carry ($85.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $13.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L067BA0.b		; Branch if plus to L067BA0.b [Flow: branch]
	lsr $6E75.w		; Logical shift right $6E75.w [Flags: ZCN]
	and $10.b,X		; Logical AND $10.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $4E.b,X		; Logical AND $4E.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $10.b,X		; Logical AND $10.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $4C.b,X		; Logical AND $4C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $10.b,X		; Logical AND $10.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $4E.b,X		; Logical AND $4E.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	adc $49.b,X		; Add $49.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	and $61.b,X		; Logical AND $61.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	sta $100840.l		; Store accumulator (long) $100840.l [Reads: Accumulator]
	and $61.b,X		; Logical AND $61.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	sty $00.b,X		; Store Y register $00.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lsr $6E75.w		; Logical shift right $6E75.w [Flags: ZCN]
	and $10.b,X		; Logical AND $10.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $4E.b,X		; Logical AND $4E.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $10.b,X		; Logical AND $10.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $4C.b,X		; Logical AND $4C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $61.b,X		; Logical AND $61.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	lda $00.b		; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$5F.b		; Logical AND #$5F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $5E.b,X		; Add $5E.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $7E.b,X		; Add $7E.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	and $7F.b,X		; Logical AND $7F.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $5E.b,X		; Logical AND $5E.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
L067BA0:
	and $5F.b,X		; Logical AND $5F.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $4D.b,X		; Logical AND $4D.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $5F.b,X		; Logical AND $5F.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	adc $5E.b,X		; Add $5E.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $4A.b,X		; Add $4A.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	and $4B.b,X		; Logical AND $4B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $10.b,X		; Logical AND $10.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $49.b,X		; Logical AND $49.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	adc $10.b,X		; Add $10.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	and $5F.b,X		; Logical AND $5F.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	adc $5E.b,X		; Add $5E.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $7E.b,X		; Add $7E.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	and $7F.b,X		; Logical AND $7F.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $5E.b,X		; Logical AND $5E.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $5F.b,X		; Logical AND $5F.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $4D.b,X		; Logical AND $4D.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $61.b,X		; Logical AND $61.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $00.b		; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: ZCN]
	and #$50.b		; Logical AND #$50.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $51.b,X		; Logical AND $51.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $52.b,X		; Logical AND $52.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $53.b,X		; Logical AND $53.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $54.b,X		; Logical AND $54.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $55.b,X		; Logical AND $55.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $56.b,X		; Logical AND $56.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $57.b,X		; Logical AND $57.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $58.b,X		; Logical AND $58.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $59.b,X		; Logical AND $59.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $5A.b,X		; Logical AND $5A.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $5B.b,X		; Logical AND $5B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $5C.b,X		; Logical AND $5C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $5D.b,X		; Logical AND $5D.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $50.b,X		; Logical AND $50.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $51.b,X		; Logical AND $51.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $52.b,X		; Logical AND $52.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $53.b,X		; Logical AND $53.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $54.b,X		; Logical AND $54.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $55.b,X		; Logical AND $55.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $56.b,X		; Logical AND $56.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $61.b,X		; Logical AND $61.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $00.b		; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	and #$60.b		; Logical AND #$60.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $61.b,X		; Logical AND $61.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $62.b,X		; Logical AND $62.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $63.b,X		; Logical AND $63.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $64.b,X		; Logical AND $64.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $65.b,X		; Logical AND $65.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $66.b,X		; Logical AND $66.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $67.b,X		; Logical AND $67.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $68.b,X		; Logical AND $68.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $69.b,X		; Logical AND $69.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $6A.b,X		; Logical AND $6A.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $6B.b,X		; Logical AND $6B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $6C.b,X		; Logical AND $6C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $6D.b,X		; Logical AND $6D.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $60.b,X		; Logical AND $60.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $61.b,X		; Logical AND $61.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $62.b,X		; Logical AND $62.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $63.b,X		; Logical AND $63.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $64.b,X		; Logical AND $64.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $65.b,X		; Logical AND $65.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $66.b,X		; Logical AND $66.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $62.b,X		; Logical AND $62.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$70.b		; Logical AND #$70.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $71.b,X		; Logical AND $71.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $72.b,X		; Logical AND $72.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $73.b,X		; Logical AND $73.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $74.b,X		; Logical AND $74.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $75.b,X		; Logical AND $75.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $76.b,X		; Logical AND $76.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $77.b,X		; Logical AND $77.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $78.b,X		; Logical AND $78.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $79.b,X		; Logical AND $79.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $7A.b,X		; Logical AND $7A.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $7B.b,X		; Logical AND $7B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $7C.b,X		; Logical AND $7C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $7D.b,X		; Logical AND $7D.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $70.b,X		; Logical AND $70.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $71.b,X		; Logical AND $71.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $72.b,X		; Logical AND $72.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
L067C42:
	and $73.b,X		; Logical AND $73.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $74.b,X		; Logical AND $74.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $75.b,X		; Logical AND $75.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $76.b,X		; Logical AND $76.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $FF.b,X		; Logical AND $FF.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	adc ($65.b,X)		; Add with carry ($65.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	brk $35.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($85.b,X)		; Add with carry ($85.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: DCMXVZIN]
	.db $10, $35		; Invalid branch target (bpl L067C8D) ; Branch if plus to $10, $35 [Flow: branch]
	adc ($A5.b,X)		; Add with carry ($A5.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $1D.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $352335.l		; Jump to subroutine long $352335.l [Writes: Stack Pointer] [Flow: call]
	.db $10, $35		; Invalid branch target (bpl L067C97) ; Branch if plus to $10, $35 [Flow: branch]
	jsl $352335.l		; Jump to subroutine long $352335.l [Writes: Stack Pointer] [Flow: call]
	.db $10, $35		; Invalid branch target (bpl L067C9D) ; Branch if plus to $10, $35 [Flow: branch]
	jsl $352335.l		; Jump to subroutine long $352335.l [Writes: Stack Pointer] [Flow: call]
	.db $10, $35		; Invalid branch target (bpl L067CA3) ; Branch if plus to $10, $35 [Flow: branch]
	jsl $352335.l		; Jump to subroutine long $352335.l [Writes: Stack Pointer] [Flow: call]
	.db $10, $35		; Invalid branch target (bpl L067CA9) ; Branch if plus to $10, $35 [Flow: branch]
	bpl L067CEB.b		; Branch if plus to L067CEB.b [Flow: branch]
	and $75.b,S		; AND accumulator with stack relative $75.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $B46175.l		; Jump to subroutine long $B46175.l [Writes: Stack Pointer] [Flow: call]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	asl $10.b		; Arithmetic shift left $10.b [Reads: Direct Page] [Flags: ZCN]
	and $61.b,X		; Logical AND $61.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	clv		; Clear overflow ; Clear overflow flag [Flags: V]
	brk $03.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $75.b,S		; AND accumulator with stack relative $75.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $C56175.l		; Jump to subroutine long $C56175.l [Writes: Stack Pointer] [Flow: call]
	brk $29.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $35.b		; Test and set bits $35.b [Reads: Accumulator] [Flags: Z]
	ora $35.b		; Logical OR $35.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $35.b		; Arithmetic shift left $35.b [Reads: Direct Page] [Flags: ZCN]
	tsb $35.b		; Test and set bits $35.b [Reads: Accumulator] [Flags: Z]
	ora $35.b		; Logical OR $35.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $35.b		; Arithmetic shift left $35.b [Reads: Direct Page] [Flags: ZCN]
	tsb $35.b		; Test and set bits $35.b [Reads: Accumulator] [Flags: Z]
	ora $35.b		; Logical OR $35.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $35.b		; Arithmetic shift left $35.b [Reads: Direct Page] [Flags: ZCN]
	tsb $35.b		; Test and set bits $35.b [Reads: Accumulator] [Flags: Z]
	ora $35.b		; Logical OR $35.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $35.b		; Arithmetic shift left $35.b [Reads: Direct Page] [Flags: ZCN]
	asl $75.b		; Arithmetic shift left $75.b [Reads: Direct Page] [Flags: ZCN]
	ora $75.b		; Logical OR $75.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $75.b		; Test and set bits $75.b [Reads: Accumulator] [Flags: Z]
	.db $10, $75		; Invalid branch target (bpl L067D21) ; Branch if plus to $10, $75 [Flow: branch]
	and $75.b,S		; AND accumulator with stack relative $75.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $750675.l		; Jump to subroutine long $750675.l [Writes: Stack Pointer] [Flow: call]
	ora $75.b		; Logical OR $75.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $75.b		; Test and set bits $75.b [Reads: Accumulator] [Flags: Z]
	adc ($E5.b,X)		; Add with carry ($E5.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $29.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $35.b		; Test and reset bits $35.b [Reads: Accumulator] [Flags: Z]
	ora $35.b,X		; OR accumulator with memory $35.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	asl $35.b,X		; Arithmetic shift left $35.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	trb $35.b		; Test and reset bits $35.b [Reads: Accumulator] [Flags: Z]
	ora $35.b,X		; OR accumulator with memory $35.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	asl $35.b,X		; Arithmetic shift left $35.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	trb $35.b		; Test and reset bits $35.b [Reads: Accumulator] [Flags: Z]
	ora $35.b,X		; OR accumulator with memory $35.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	asl $35.b,X		; Arithmetic shift left $35.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	trb $35.b		; Test and reset bits $35.b [Reads: Accumulator] [Flags: Z]
	ora $35.b,X		; OR accumulator with memory $35.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	asl $35.b,X		; Arithmetic shift left $35.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	asl $75.b,X		; Arithmetic shift left $75.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $75.b,X		; OR accumulator with memory $75.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	trb $75.b		; Test and reset bits $75.b [Reads: Accumulator] [Flags: Z]
	asl $75.b		; Arithmetic shift left $75.b [Reads: Direct Page] [Flags: ZCN]
	ora $75.b		; Logical OR $75.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $75.b		; Test and set bits $75.b [Reads: Accumulator] [Flags: Z]
	asl $75.b,X		; Arithmetic shift left $75.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	ora $75.b,X		; OR accumulator with memory $75.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	trb $75.b		; Test and reset bits $75.b [Reads: Accumulator] [Flags: Z]
	.db $62, $05, $00		; Invalid branch target (per L067CEC) ; Push effective relative address $62, $05, $00 [Writes: Stack Pointer]
	and #$24.b		; Logical AND #$24.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $25.b,X		; Logical AND $25.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
L067CEB:
	and $26.b,X		; Logical AND $26.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $24.b,X		; Logical AND $24.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $25.b,X		; Logical AND $25.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $26.b,X		; Logical AND $26.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $24.b,X		; Logical AND $24.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $25.b,X		; Logical AND $25.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $26.b,X		; Logical AND $26.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $24.b,X		; Logical AND $24.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $25.b,X		; Logical AND $25.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $26.b,X		; Logical AND $26.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $26.b,X		; Logical AND $26.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	adc $25.b,X		; Add $25.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $24.b,X		; Add $24.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $26.b,X		; Add $26.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $25.b,X		; Add $25.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $24.b,X		; Add $24.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $26.b,X		; Add $26.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $25.b,X		; Add $25.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $24.b,X		; Add $24.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $FF.b,X		; Add $FF.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc ($65.b,X)		; Add with carry ($65.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $29.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $35.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $35.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and $30.b,X		; Logical AND $30.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $31.b,X		; Logical AND $31.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $32.b,X		; Logical AND $32.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b,X		; Logical AND $00.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b,X		; Logical AND $00.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b,X		; Logical AND $00.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $33.b,X		; Logical AND $33.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $41.b,X		; Logical AND $41.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $41.b,X		; Logical AND $41.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	adc $33.b,X		; Add $33.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $00.b,X		; Add $00.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $00.b,X		; Add $00.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $00.b,X		; Add $00.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $32.b,X		; Add $32.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $31.b,X		; Add $31.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $30.b,X		; Add $30.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $1B.b,X		; Add $1B.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $00.b,X		; Add $00.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $61.b,X		; Add $61.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	sta $40.b		; Store accumulator to $40.b [Reads: Accumulator]
	asl $3510.w,X		; Arithmetic shift left $3510.w,X [Reads: X Index] [Flags: ZCN]
	adc ($86.b,X)		; Add with carry ($86.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $09.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $35.b,X		; Test bits $35.b,X [Reads: Direct Page, X Index] [Flags: VNZ] [Flow: branch]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and $40.b,X		; Logical AND $40.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $41.b,X		; Logical AND $41.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $42.b,X		; Logical AND $42.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $61.b,X		; Logical AND $61.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,X		; Store accumulator to $00.b,X [Reads: Accumulator, X Index]
	ora #$42.b		; Logical OR #$42.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $41.b,X		; Add $41.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $40.b,X		; Add $40.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $0B.b,X		; Add $0B.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $34.b,X		; Add $34.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $61.b,X		; Add $61.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	lda $00.b		; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$43.b		; Logical AND #$43.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $44.b,X		; Logical AND $44.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $07.b,X		; Logical AND $07.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $08.b,X		; Logical AND $08.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $09.b,X		; Logical AND $09.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $0A.b,X		; Logical AND $0A.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $10.b,X		; Logical AND $10.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $0C.b,X		; Logical AND $0C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $0D.b,X		; Logical AND $0D.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $0E.b,X		; Logical AND $0E.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $0F.b,X		; Logical AND $0F.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $0F.b,X		; Logical AND $0F.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	adc $0E.b,X		; Add $0E.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $0D.b,X		; Add $0D.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $0C.b,X		; Add $0C.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $10.b,X		; Add $10.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $0A.b,X		; Add $0A.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $09.b,X		; Add $09.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $08.b,X		; Add $08.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $07.b,X		; Add $07.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $44.b,X		; Add $44.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $61.b,X		; Add $61.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	cmp $00.b		; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: ZCN]
	and #$35.b		; Logical AND #$35.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $36.b,X		; Logical AND $36.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $17.b,X		; Logical AND $17.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $18.b,X		; Logical AND $18.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $19.b,X		; Logical AND $19.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $1A.b,X		; Logical AND $1A.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $10.b,X		; Logical AND $10.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $1C.b,X		; Logical AND $1C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $1D.b,X		; Logical AND $1D.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $1E.b,X		; Logical AND $1E.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $1F.b,X		; Logical AND $1F.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $1F.b,X		; Logical AND $1F.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	adc $1E.b,X		; Add $1E.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $1D.b,X		; Add $1D.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $1C.b,X		; Add $1C.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $10.b,X		; Add $10.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $1A.b,X		; Add $1A.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $19.b,X		; Add $19.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $18.b,X		; Add $18.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $17.b,X		; Add $17.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $36.b,X		; Add $36.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $61.b,X		; Add $61.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $00.b		; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	and #$45.b		; Logical AND #$45.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $46.b,X		; Logical AND $46.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $27.b,X		; Logical AND $27.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $28.b,X		; Logical AND $28.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $29.b,X		; Logical AND $29.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $2A.b,X		; Logical AND $2A.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $2B.b,X		; Logical AND $2B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $2C.b,X		; Logical AND $2C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $2D.b,X		; Logical AND $2D.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $2E.b,X		; Logical AND $2E.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $2F.b,X		; Logical AND $2F.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $2F.b,X		; Logical AND $2F.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	adc $2E.b,X		; Add $2E.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $2D.b,X		; Add $2D.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $2C.b,X		; Add $2C.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $2B.b,X		; Add $2B.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $2A.b,X		; Add $2A.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $29.b,X		; Add $29.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $28.b,X		; Add $28.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $27.b,X		; Add $27.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $46.b,X		; Add $46.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $62.b,X		; Add $62.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	ora $00.b		; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$47.b		; Logical AND #$47.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $48.b,X		; Logical AND $48.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $37.b,X		; Logical AND $37.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $38.b,X		; Logical AND $38.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $39.b,X		; Logical AND $39.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $3A.b,X		; Logical AND $3A.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $3B.b,X		; Logical AND $3B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $3C.b,X		; Logical AND $3C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $3D.b,X		; Logical AND $3D.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $3E.b,X		; Logical AND $3E.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $3F.b,X		; Logical AND $3F.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	and $3F.b,X		; Logical AND $3F.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	adc $3E.b,X		; Add $3E.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $3D.b,X		; Add $3D.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $3C.b,X		; Add $3C.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $3B.b,X		; Add $3B.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $3A.b,X		; Add $3A.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $39.b,X		; Add $39.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $38.b,X		; Add $38.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $37.b,X		; Add $37.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $48.b,X		; Add $48.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	adc $FF.b,X		; Add $FF.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: VCNZ]
	brk $02.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0422.w		; Jump to subroutine at $0422.w [Writes: Stack Pointer] [Flow: call]
	asl $08.b		; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tsb $400E.w		; Test and set bits $400E.w [Reads: Accumulator] [Flags: Z]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	.db $30, $50		; Invalid branch target (bmi L067E7A) ; Branch if minus to $30, $50 [Flow: branch]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: DCMXVZIN] [Flow: return]

	bpl L067E32.b		; Branch if plus to L067E32.b [Flow: branch]
L067E32:
	jsr $2800.w		; Jump to subroutine at $2800.w [Writes: Stack Pointer] [Flow: call]
	brk $28.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $50.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; [PATTERN: Memory clearing operation] Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L067E45:
	lda #$07.b		; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $CB.b		; Store accumulator to $CB.b [Reads: Accumulator]
	stz $CC.b		; Store zero to $CC.b
	stz $CD.b		; Store zero to $CD.b
.ACCU 16
	rep #$20
	lda #$FF7E.w		; Load #$FF7E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $C8.b		; Store accumulator to $C8.b [Reads: Accumulator]
.ACCU 8
	sep #$20
L067E56:
	phb		; [PATTERN: Function entry: Data bank preservation prologue] Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $CA.b		; Load $CA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	beq L067E5F.b		; Branch if equal to L067E5F.b [Flow: branch]
	dec $CA.b		; Decrement $CA.b [Reads: Direct Page] [Flags: ZN]
L067E5F:
	jsl $0ED60B.l		; Jump to subroutine long $0ED60B.l [Writes: Stack Pointer] [Flow: call]
	lda $0FF9.w		; Load $0FF9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	beq L067E80.b		; Branch if equal to L067E80.b [Flow: branch]
	and #$03.b		; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	beq L067E7D.b		; Branch if equal to L067E7D.b [Flow: branch]
	ldx $D0.b		; Load $D0.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$1F.b		; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $9C.b,X		; OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	sta $9C.b,X		; Store accumulator to $9C.b,X [Reads: Accumulator, X Index]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$03.b		; Compare #$03.b with X register [Reads: X Index] [Flags: ZCN]
	bne L067E7B.b		; Branch if not equal to L067E7B.b [Flow: branch]
	ldx #$00.b		; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
L067E7B:
	stx $D0.b		; Store X register to $D0.b [Reads: X Index]
L067E7D:
	dec $0FF9.w		; Decrement $0FF9.w [Flags: ZN]
L067E80:
	ldy #$09.b		; Load #$09.b into Y register [Writes: Y Index] [Flags: ZN]
L067E82:
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A72.w,Y		; Store accumulator to $0A72.w,Y [Reads: Accumulator, Y Index]
	lda $FE1C.w,Y		; Load $FE1C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $094A.w,X		; Store accumulator to $094A.w,X [Reads: Accumulator, X Index]
	lda #$21.b		; Load #$21.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $094B.w,X		; Store accumulator to $094B.w,X [Reads: Accumulator, X Index]
	lda $FE26.w,Y		; Load $FE26.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0948.w,X		; Store accumulator to $0948.w,X [Reads: Accumulator, X Index]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZCN]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20
	lda $C8.b		; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $FE30.w,Y		; Add $FE30.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: VCNZ]
.ACCU 8
	sep #$20
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	beq L067EB0.b		; Branch if equal to L067EB0.b [Flow: branch]
	lda #$F8.b		; Load #$F8.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
L067EB0:
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sec		; Set carry ; Set carry flag [Flags: C]
	sbc #$08.b		; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: VCNZ]
	sta $0949.w,X		; Store accumulator to $0949.w,X [Reads: Accumulator, X Index]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bpl L067E82.b		; Branch if plus to L067E82.b [Flow: branch]
.ACCU 16
	rep #$20
	lda $C8.b		; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$001E.w		; Compare #$001E.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L067EE2.b		; Branch if equal to L067EE2.b [Flow: branch]
	ldy #$01.b		; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$FFBE.w		; Compare #$FFBE.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L067ED9.b		; Branch if equal to L067ED9.b [Flow: branch]
	cmp #$000E.w		; Compare #$000E.w with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L067EDC.b		; Branch if not equal to L067EDC.b [Flow: branch]
	stz $D0.b		; Store zero to $D0.b
	ldx #$20.b		; Load #$20.b into X register [Writes: X Index] [Flags: ZN]
	stx $0FF9.w		; Store X register to $0FF9.w [Reads: X Index]
	ldy #$2C.b		; Load #$2C.b into Y register [Writes: Y Index] [Flags: ZN]
L067ED9:
	sty $012E.w		; Store Y register to $012E.w [Reads: Y Index]
L067EDC:
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$0010.w		; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $C8.b		; Store accumulator to $C8.b [Reads: Accumulator]
L067EE2:
.ACCU 8
	sep #$20
	ldx $CC.b		; Load $CC.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	jmp ($FEE9.w,X)		; Jump indirect indexed to ($FEE9.w,X) [Reads: X Index] [Flow: jump]
	sbc $FF13FE.l		; Subtract with carry (long) $FF13FE.l [Writes: Accumulator] [Flags: VCNZ]
	eor ($FF.b),Y		; Exclusive OR accumulator with memory ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $0FF9.w		; Load $0FF9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	bne L067F03.b		; Branch if not equal to L067F03.b [Flow: branch]
.ACCU 16
	rep #$20
	lda $C8.b		; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$001E.w		; Compare #$001E.w with accumulator [Reads: Accumulator] [Flags: ZCN]
.ACCU 8
	sep #$20
	bne L067F03.b		; Branch if not equal to L067F03.b [Flow: branch]
	inc $CC.b		; Increment $CC.b [Reads: Direct Page] [Flags: ZN]
	inc $CC.b		; Increment $CC.b [Reads: Direct Page] [Flags: ZN]
L067F03:
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $04.b		; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	asl $06.b		; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZCN]
	asl $04.b		; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: ZCN]
	tsb $28.b		; Test and set bits $28.b [Reads: Accumulator] [Flags: Z]
	and [$27.b],Y		; AND accumulator with memory (long indexed) [$27.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $27.b,X		; Rotate left $27.b,X [Reads: Direct Page, X Index] [Flags: ZCN]
	and [$28.b],Y		; AND accumulator with memory (long indexed) [$28.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $CB.b		; Load $CB.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $CA.b		; Load $CA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bne L067F2F.b		; Branch if not equal to L067F2F.b [Flow: branch]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $CB.b		; Store X register to $CB.b [Reads: X Index]
	bpl L067F2A.b		; Branch if plus to L067F2A.b [Flow: branch]
	stz $CB.b		; Store zero to $CB.b
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $CA.b		; Store accumulator to $CA.b [Reads: Accumulator]
	inc $CC.b		; Increment $CC.b [Reads: Direct Page] [Flags: ZN]
	inc $CC.b		; Increment $CC.b [Reads: Direct Page] [Flags: ZN]
	bra L067F47.b		; Branch always to L067F47.b [Flow: branch]
L067F2A:
	lda $FF05.w,X		; Load $FF05.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $CA.b		; Store accumulator to $CA.b [Reads: Accumulator]
L067F2F:
	stz $0A70.w		; Store zero to $0A70.w
	lda #$44.b		; Load #$44.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0940.w		; Store accumulator to $0940.w [Reads: Accumulator]
	lda #$43.b		; Load #$43.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0941.w		; Store accumulator to $0941.w [Reads: Accumulator]
	lda #$25.b		; Load #$25.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0943.w		; Store accumulator to $0943.w [Reads: Accumulator]
	lda $FF0C.w,X		; Load $FF0C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0942.w		; Store accumulator to $0942.w [Reads: Accumulator]
L067F47:
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol $20.b		; Rotate left $20.b [Reads: Direct Page] [Flags: ZCN]
	bit $34.b		; Test bits $34.b with accumulator [Reads: Direct Page, Accumulator] [Flags: VNZ]
	and $20.b		; Logical AND $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $20.b,X		; Logical AND $20.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: ZN]
	ldx $CB.b		; [PATTERN: Memory clearing operation] Load $CB.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cpx #$07.b		; Compare #$07.b with X register [Reads: X Index] [Flags: ZCN]
	bcs L067FAF.b		; Branch if carry set to L067FAF.b [Flow: branch]
	stz $0A70.w		; Store zero to $0A70.w
	stz $0A71.w		; Store zero to $0A71.w
	lda #$42.b		; Load #$42.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0940.w		; Store accumulator to $0940.w [Reads: Accumulator]
	sta $0944.w		; Store accumulator to $0944.w [Reads: Accumulator]
	lda $CD.b		; Load $CD.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$50.b		; Compare #$50.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bcc L067F6D.b		; Branch if carry clear to L067F6D.b [Flow: branch]
	lda #$4F.b		; Load #$4F.b into accumulator [Writes: Accumulator] [Flags: ZN]
L067F6D:
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $C8.b		; Add $C8.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: VCNZ]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$31.b		; Add #$31.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $0941.w		; Store accumulator to $0941.w [Reads: Accumulator]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$08.b		; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $0945.w		; Store accumulator to $0945.w [Reads: Accumulator]
	lda #$23.b		; Load #$23.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0943.w		; Store accumulator to $0943.w [Reads: Accumulator]
	sta $0947.w		; Store accumulator to $0947.w [Reads: Accumulator]
	lda $FF49.w,X		; Load $FF49.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0942.w		; Store accumulator to $0942.w [Reads: Accumulator]
	lda $FF4A.w,X		; Load $FF4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0946.w		; Store accumulator to $0946.w [Reads: Accumulator]
	lda $CA.b		; Load $CA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bne L067FAF.b		; Branch if not equal to L067FAF.b [Flow: branch]
	lda $CD.b		; Load $CD.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$04.b		; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: VCNZ]
	sta $CD.b		; Store accumulator to $CD.b [Reads: Accumulator]
	cmp #$04.b		; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L067FAB.b		; Branch if equal to L067FAB.b [Flow: branch]
	cmp #$48.b		; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L067FAB.b		; Branch if equal to L067FAB.b [Flow: branch]
	cmp #$4C.b		; Compare #$4C.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	beq L067FAB.b		; Branch if equal to L067FAB.b [Flow: branch]
	cmp #$58.b		; Compare #$58.b with accumulator [Reads: Accumulator] [Flags: ZCN]
	bne L067FAF.b		; Branch if not equal to L067FAF.b [Flow: branch]
L067FAB:
	inc $CB.b		; Increment $CB.b [Reads: Direct Page] [Flags: ZN]
	inc $CB.b		; Increment $CB.b [Reads: Direct Page] [Flags: ZN]
L067FAF:
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	sbc $FFFFFF.l,X		; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $FF		; Opcode FF overrunning bank boundry at 067FFD. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $FF		; Opcode FF overrunning bank boundry at 067FFE. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
	.db $FF		; Opcode FF overrunning bank boundry at 067FFF. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: VCNZ]
.ENDS
