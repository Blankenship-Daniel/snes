.BANK 29 SLOT 0
.ORG $0000

.SECTION "Bank29" FORCE

	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $000001.l,X		; FF 01 00 00 ; Subtract with carry (long,X) $000001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $1AA500.l,X		; FF 00 A5 1A ; Subtract with carry (long,X) $1AA500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $2A		; 90 2A ; Branch if carry clear to $90, $2A [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7F9E.w,Y		; 79 9E 7F ; Add $7F9E.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $7FA4.w,Y		; 79 A4 7F ; Add $7FA4.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7FA0.w,Y		; 79 A0 7F ; Add $7FA0.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $7F9C.w,Y		; 79 9C 7F ; Add $7F9C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $3A		; 30 3A ; Branch if minus to $30, $3A [Flow: branch]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,Y		; 99 D0 0D ; Store accumulator to $0DD0.w,Y [Reads: Accumulator, Y Index]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	lda $0C2C.w,X		; BD 2C 0C ; Load $0C2C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda $0C22.w,X		; BD 22 0C ; Load $0C22.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsl $06F6CA.l		; 22 CA F6 06 ; Jump to subroutine long $06F6CA.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $06E496.l		; 22 96 E4 06 ; Jump to subroutine long $06E496.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $810C.w		; 20 0C 81 ; Jump to subroutine at $810C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jsl $04EA81.l		; 22 81 EA 04 ; Jump to subroutine long $04EA81.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $1E		; B0 1E ; Branch if carry set to $B0, $1E [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsl $06F121.l		; 22 21 F1 06 ; Jump to subroutine long $06F121.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $C9.b		; 02 C9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($D0.b,X)		; 01 D0 ; Logical OR ($D0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $D09E.w		; 2E 9E D0 ; Rotate left $D09E.w [Flags: ZNC]
	ora $4420.w		; 0D 20 44 ; Logical OR $4420.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc ($30.b,X)		; E1 30 ; Subtract with carry ($30.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and $A9.b		; 25 A9 ; Logical AND $A9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $99.b		; 06 99 ; Arithmetic shift left $99.b [Reads: Direct Page] [Flags: ZNC]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,Y		; 99 B0 0D ; Store accumulator to $0DB0.w,Y [Reads: Accumulator, Y Index]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F60.w,Y		; 99 60 0F ; Store accumulator to $0F60.w,Y [Reads: Accumulator, Y Index]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,Y		; 99 00 0E ; Store accumulator to $0E00.w,Y [Reads: Accumulator, Y Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	jsl $0DBBA1.l		; 22 A1 BB 0D ; Jump to subroutine long $0DBBA1.l [Writes: Stack Pointer] [Flow: call]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $80BB.w,Y		; B9 BB 80 ; Load $80BB.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBA84.l		; 22 84 BA 0D ; Jump to subroutine long $0DBA84.l [Writes: Stack Pointer] [Flow: call]
	lda $0FC6.w		; AD C6 0F ; Load $0FC6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0F		; B0 0F ; Branch if carry set to $B0, $0F [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$80FC.w		; A9 FC 80 ; Load #$80FC.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0FC6.w		; AD C6 0F ; Load $0FC6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0E		; B0 0E ; Branch if carry set to $B0, $0E [Flow: branch]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBA84.l		; 22 84 BA 0D ; Jump to subroutine long $0DBA84.l [Writes: Stack Pointer] [Flow: call]
	jsr $820C.w		; 20 0C 82 ; Jump to subroutine at $820C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8C5.w		; 20 C5 E8 ; Jump to subroutine at $E8C5.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	eor $819D81.l		; 4F 81 9D 81 ; Exclusive OR accumulator with memory (long) $819D81.l [Writes: Accumulator] [Flags: ZN]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0BA0.w,X		; 9D A0 0B ; Store accumulator to $0BA0.w,X [Reads: Accumulator, X Index]
	jsl $06F129.l		; 22 29 F1 06 ; Jump to subroutine long $06F129.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $18		; 90 18 ; Branch if carry clear to $90, $18 [Flow: branch]
	jsl $0FF540.l		; 22 40 F5 0F ; Jump to subroutine long $0FF540.l [Writes: Stack Pointer] [Flow: call]
	jsl $079291.l		; 22 91 92 07 ; Jump to subroutine long $079291.l [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	ora #$40.b		; 09 40 ; Logical OR #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EF0.w,X		; [PATTERN: Memory clearing operation] 9D F0 0E ; Store accumulator to $0EF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0BA0.w,X		; 9E A0 0B ; Store zero to $0BA0.w,X [Reads: X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	stz $0EF0.w,X		; 9E F0 0E ; Store zero to $0EF0.w,X [Reads: X Index]
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	asl $0E40.w,X		; 1E 40 0E ; Arithmetic shift left $0E40.w,X [Reads: X Index] [Flags: ZNC]
	lsr $0E40.w,X		; 5E 40 0E ; Logical shift right $0E40.w,X [Reads: X Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($C2.b),Y		; 11 C2 ; OR accumulator with memory ($C2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $E948.w		; 20 48 E9 ; Jump to subroutine at $E948.w [Writes: Stack Pointer] [Flow: call]
	jsr $8094.w		; 20 94 80 ; Jump to subroutine at $8094.w [Writes: Stack Pointer] [Flow: call]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $0E		; 10 0E ; Branch if plus to $10, $0E [Flow: branch]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA12.l		; 22 12 EA 06 ; Jump to subroutine long $06EA12.l [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0E80.w,X		; 9E 80 0E ; Store zero to $0E80.w,X [Reads: X Index]
	ldy $0E80.w,X		; BC 80 0E ; Load Y register $0E80.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $8198.w,Y		; B9 98 81 ; Load $8198.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $00,$00		; 44 00 00 ; Move block positive $00,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$81DC.w		; 69 DC 81 ; Add #$81DC.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $0D80.w,X		; BC 80 0D ; Load Y register $0D80.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $06DC54.l		; 22 54 DC 06 ; Jump to subroutine long $06DC54.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0FC6.w		; AD C6 0F ; Load $0FC6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	jsr $8483.w		; 20 83 84 ; Jump to subroutine at $8483.w [Writes: Stack Pointer] [Flow: call]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$03.b		; 69 03 ; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	ora $833683.l		; 0F 83 36 83 ; OR accumulator with memory (long) $833683.l [Writes: Accumulator] [Flags: ZN]
	ror $A182.w,X		; 7E 82 A1 ; Rotate right $A182.w,X [Reads: X Index] [Flags: ZNC]
	.db $82, $6C, $82		; 82 6C 82 ; Branch always long to $82, $6C, $82 [Flow: branch]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	jsl $06DFF2.l		; 22 F2 DF 06 ; Jump to subroutine long $06DFF2.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	jsl $1EA820.l		; 22 20 A8 1E ; Jump to subroutine long $1EA820.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$08.b]		; 07 08 ; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr $E98B.w		; 20 8B E9 ; Jump to subroutine at $E98B.w [Writes: Stack Pointer] [Flow: call]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	ldy $0D90.w,X		; BC 90 0D ; Load Y register $0D90.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda #$76.b		; A9 76 ; Load #$76.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $907F.w		; 20 7F 90 ; Jump to subroutine at $907F.w [Writes: Stack Pointer] [Flow: call]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $3F		; 10 3F ; Branch if plus to $10, $3F [Flow: branch]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	jsr $828B.w		; 20 8B 82 ; Jump to subroutine at $828B.w [Writes: Stack Pointer] [Flow: call]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $31		; F0 31 ; Branch if equal to $F0, $31 [Flow: branch]
	lda #$DB.b		; A9 DB ; Load #$DB.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $29		; 30 29 ; Branch if minus to $30, $29 [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B58.w,Y		; 99 58 0B ; Store accumulator to $0B58.w,Y [Reads: Accumulator, Y Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,Y		; 99 80 0F ; Store accumulator to $0F80.w,Y [Reads: Accumulator, Y Index]
	sta $0EE0.w,Y		; 99 E0 0E ; Store accumulator to $0EE0.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA12.l		; 22 12 EA 06 ; Jump to subroutine long $06EA12.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $8290.w,Y		; B9 90 82 ; Load $8290.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8094.w		; 20 94 80 ; Jump to subroutine at $8094.w [Writes: Stack Pointer] [Flow: call]
	lda $0FA5.w		; AD A5 0F ; Load $0FA5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $F4		; F0 F4 ; Branch if equal to $F0, $F4 [Flow: branch]
	.db $F0, $F4		; F0 F4 ; Branch if equal to $F0, $F4 [Flow: branch]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $06AA.w		; 0C AA 06 ; Test and set bits $06AA.w [Reads: Accumulator] [Flags: Z]
	jsr $C751.w		; 20 51 C7 ; Jump to subroutine at $C751.w [Writes: Stack Pointer] [Flow: call]
	jsr $E948.w		; 20 48 E9 ; Jump to subroutine at $E948.w [Writes: Stack Pointer] [Flow: call]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $3A		; 10 3A ; Branch if plus to $10, $3A [Flow: branch]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	lda $0FA5.w		; AD A5 0F ; Load $0FA5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	jsr $828B.w		; 20 8B 82 ; Jump to subroutine at $828B.w [Writes: Stack Pointer] [Flow: call]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $8321.w,Y		; B9 21 83 ; Load $8321.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $8329.w,Y		; B9 29 83 ; Load $8329.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	inc $0DE0.w,X		; FE E0 0D ; Increment memory $0DE0.w,X [Reads: X Index] [Flags: ZN]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,X		; 9D 80 0E ; Store accumulator to $0E80.w,X [Reads: Accumulator, X Index]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $8331.w,Y		; D9 31 83 ; Compare accumulator $8331.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8000.w,Y		; 79 00 80 ; Add $8000.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $0D90.w,X		; BC 90 0D ; Load Y register $0D90.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8333.w,Y		; 79 33 83 ; Add $8333.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr ($08FF.w,X)		; FC FF 08 ; Jump to subroutine indirect indexed ($08FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $5E.b		; 00 5E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5F.b		; 00 5F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $5E0008.l,X		; FF 08 00 5E ; Subtract with carry (long,X) $5E0008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5F.b		; 00 5F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $5F0008.l,X		; FF 08 00 5F ; Subtract with carry (long,X) $5F0008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $00,$00		; 44 00 00 ; Move block positive $00,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $5E.b		; 00 5E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $00,$00		; 44 00 00 ; Move block positive $00,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	jsr ($08FF.w,X)		; FC FF 08 ; Jump to subroutine indirect indexed ($08FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $5F.b		; 00 5F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5E.b		; 00 5E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $00,$00		; 44 00 00 ; Move block positive $00,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $00,$00		; 44 00 00 ; Move block positive $00,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($84.b),Y		; 71 84 ; Add with carry ($84.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $38000B.l,X		; FF 0B 00 38 ; Subtract with carry (long,X) $38000B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $38000B.l,X		; FF 0B 00 38 ; Subtract with carry (long,X) $38000B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $E4.b,X		; 16 E4 ; Arithmetic shift left $E4.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $60.b		; 06 60 ; Arithmetic shift left $60.b [Reads: Direct Page] [Flags: ZNC]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $F3		; F0 F3 ; Branch if equal to $F0, $F3 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$83B6.w		; 69 B6 83 ; Add #$83B6.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0FD8.w		; 8D D8 0F ; Store accumulator to $0FD8.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0F70.w,X		; 7D 70 0F ; Add $0F70.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0FDA.w		; 8D DA 0F ; Store accumulator to $0FDA.w [Reads: Accumulator]
	lda $0FDB.w		; AD DB 0F ; Load $0FDB.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0FDB.w		; 8D DB 0F ; Store accumulator to $0FDB.w [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$8436.w		; 69 36 84 ; Add #$8436.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $90.b		; A5 90 ; Load $90.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	inc $92.b		; E6 92 ; Increment $92.b [Reads: Direct Page] [Flags: ZN]
	inc $92.b		; E6 92 ; Increment $92.b [Reads: Direct Page] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $87.b		; 00 87 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $96.b		; 00 96 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $97.b		; 00 97 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $87.b		; 00 87 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $96.b		; 00 96 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $97.b		; 00 97 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$84F1.w		; 69 F1 84 ; Add #$84F1.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	jsr $8531.w		; 20 31 85 ; Jump to subroutine at $8531.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8000.w,Y		; 79 00 80 ; Add $8000.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	cmp $854E.w,Y		; D9 4E 85 ; Compare accumulator $854E.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0DE0.w,X		; FE E0 0D ; Increment memory $0DE0.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0DC0.w,X		; FE C0 0D ; Increment memory $0DC0.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $51		; D0 51 ; Branch if not equal to $D0, $51 [Flow: branch]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	sta $0BA0.w,X		; 9D A0 0B ; Store accumulator to $0BA0.w,X [Reads: Accumulator, X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $B4		; D0 B4 ; Branch if not equal to $D0, $B4 [Flow: branch]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $3B		; D0 3B ; Branch if not equal to $D0, $3B [Flow: branch]
	lda #$43.b		; A9 43 ; Load #$43.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$D1.b		; A9 D1 ; Load #$D1.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $2E		; 30 2E ; Branch if minus to $30, $2E [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	sta $0D80.w,Y		; 99 80 0D ; Store accumulator to $0D80.w,Y [Reads: Accumulator, Y Index]
	lda #$43.b		; A9 43 ; Load #$43.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	sta $0E60.w,Y		; 99 60 0E ; Store accumulator to $0E60.w,Y [Reads: Accumulator, Y Index]
	lda $854F.w		; AD 4F 85 ; Load $854F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda #$FA.b		; A9 FA ; Load #$FA.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	jsl $06E416.l		; 22 16 E4 06 ; Jump to subroutine long $06E416.l [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jsr $8094.w		; 20 94 80 ; Jump to subroutine at $8094.w [Writes: Stack Pointer] [Flow: call]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp [$D7.b],Y		; D7 D7 ; Compare accumulator (long indexed) [$D7.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp [$91.b],Y		; D7 91 ; Compare accumulator (long indexed) [$91.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sta ($91.b),Y		; 91 91 ; Store accumulator ($91.b),Y [Reads: Accumulator, Direct Page, Y Index]
	jsl $1DF395.l		; 22 95 F3 1D ; Jump to subroutine long $1DF395.l [Writes: Stack Pointer] [Flow: call]
	lda $0F00.w,X		; BD 00 0F ; Load $0F00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	ldy $0DC0.w,X		; BC C0 0D ; Load Y register $0DC0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $85FA.w,Y		; B9 FA 85 ; Load $85FA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy #$14.b		; C0 14 ; Compare #$14.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $90, $EC		; 90 EC ; Branch if carry clear to $90, $EC [Flow: branch]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $3A		; D0 3A ; Branch if not equal to $D0, $3A [Flow: branch]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CD2.w,X		; 9D D2 0C ; Store accumulator to $0CD2.w,X [Reads: Accumulator, X Index]
	jsl $06F121.l		; [PATTERN: Memory clearing operation] 22 21 F1 06 ; Jump to subroutine long $06F121.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	stz $03F5.w		; 9C F5 03 ; Store zero to $03F5.w
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03F6.w		; 8D F6 03 ; Store accumulator to $03F6.w [Reads: Accumulator]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $0F20.w,X		; DD 20 0F ; Compare accumulator $0F20.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA12.l		; 22 12 EA 06 ; Jump to subroutine long $06EA12.l [Writes: Stack Pointer] [Flow: call]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	jsr $8094.w		; 20 94 80 ; Jump to subroutine at $8094.w [Writes: Stack Pointer] [Flow: call]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	jsl $05AB9C.l		; 22 9C AB 05 ; Jump to subroutine long $05AB9C.l [Writes: Stack Pointer] [Flow: call]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8880.w		; 20 80 88 ; Jump to subroutine at $8880.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8C5.w		; 20 C5 E8 ; Jump to subroutine at $E8C5.w [Writes: Stack Pointer] [Flow: call]
	jsr $E893.w		; 20 93 E8 ; Jump to subroutine at $E893.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	jsr $C211.w		; 20 11 C2 ; Jump to subroutine at $C211.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stx $D5.b		; 86 D5 ; Store X register to $D5.b [Reads: X Index]
	stx $40.b		; 86 40 ; Store X register to $40.b [Reads: X Index]
	sta [$A0.b]		; 87 A0 ; Store accumulator (long) [$A0.b] [Reads: Accumulator, Direct Page]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy #$70.b		; A0 70 ; Load #$70.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $2D		; D0 2D ; Branch if not equal to $D0, $2D [Flow: branch]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $868A.w,Y		; B9 8A 86 ; Load $868A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda $8690.w,Y		; B9 90 86 ; Load $8690.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $23.b		; 65 23 ; Add $23.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0DA0.w,X		; 9D A0 0D ; Store accumulator to $0DA0.w,X [Reads: Accumulator, X Index]
	lda $8694.w,Y		; B9 94 86 ; Load $8694.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	lda $868C.w,Y		; B9 8C 86 ; Load $868C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $21.b		; 65 21 ; Add $21.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0E90.w,X		; 9D 90 0E ; Store accumulator to $0E90.w,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$50.b		; A9 50 ; Load #$50.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	jmp $872C.w		; 4C 2C 87 ; Jump to $872C.w [Flow: jump]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $09.b		; 06 09 ; Arithmetic shift left $09.b [Reads: Direct Page] [Flags: ZNC]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	ora [$0A.b]		; 07 0A ; OR accumulator with memory (long) [$0A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $2A		; F0 2A ; Branch if equal to $F0, $2A [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $40		; D0 40 ; Branch if not equal to $D0, $40 [Flow: branch]
	jsr $8BBC.w		; 20 BC 8B ; Jump to subroutine at $8BBC.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FD8.w		; ED D8 0F ; Subtract $0FD8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0005.w		; 69 05 00 ; Add #$0005.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$000A.w		; C9 0A 00 ; Compare #$000A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $1A		; B0 1A ; Branch if carry set to $B0, $1A [Flow: branch]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FDA.w		; ED DA 0F ; Subtract $0FDA.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0005.w		; 69 05 00 ; Add #$0005.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$000A.w		; C9 0A 00 ; Compare #$000A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0B		; B0 0B ; Branch if carry set to $B0, $0B [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA22.l		; 22 22 EA 06 ; Jump to subroutine long $06EA22.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	jsr $8094.w		; 20 94 80 ; Jump to subroutine at $8094.w [Writes: Stack Pointer] [Flow: call]
	.db $D0, $DB		; D0 DB ; Branch if not equal to $D0, $DB [Flow: branch]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0DE0.w,X		; 1D E0 0D ; OR accumulator with memory $0DE0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $86CD.w,Y		; B9 CD 86 ; Load $86CD.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $02.b		; 05 02 ; Logical OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	jsl $1E92E4.l		; 22 E4 92 1E ; Jump to subroutine long $1E92E4.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $0D		; 30 0D ; Branch if minus to $30, $0D [Flow: branch]
	lda $7EF35A.l		; AF 5A F3 7E ; Load long $7EF35A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0BE0.w,Y		; 99 E0 0B ; Store accumulator to $0BE0.w,Y [Reads: Accumulator, Y Index]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $873C.w,Y		; B9 3C 87 ; Load $873C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $8094.w		; 20 94 80 ; Jump to subroutine at $8094.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $CCFFF5.l,X		; FF F5 FF CC ; Subtract with carry (long,X) $CCFFF5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E40000.l,X		; FF 00 00 E4 ; Subtract with carry (long,X) $E40000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FB.b		; 02 FB ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $CCFFF6.l,X		; FF F6 FF CC ; Subtract with carry (long,X) $CCFFF6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E70000.l,X		; FF 00 00 E7 ; Subtract with carry (long,X) $E70000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FB.b		; 02 FB ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C8FFF5.l,X		; FF F5 FF C8 ; Subtract with carry (long,X) $C8FFF5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E40000.l,X		; FF 00 00 E4 ; Subtract with carry (long,X) $E40000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $05.b		; 02 05 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F5.b		; 00 F5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0040CC.l,X		; FF CC 40 00 ; Subtract with carry (long,X) $0040CC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E50000.l,X		; FF 00 00 E5 ; Subtract with carry (long,X) $E50000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $40.b		; E4 40 ; Compare $40.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	cpy $0040.w		; CC 40 00 ; Compare $0040.w with Y register [Reads: Y Index] [Flags: ZNC]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E80000.l,X		; FF 00 00 E8 ; Subtract with carry (long,X) $E80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$40.b]		; E7 40 ; Subtract with carry (long) [$40.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($00FF.w,X)		; FC FF 00 ; Jump to subroutine indirect indexed ($00FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$40.b]		; E7 40 ; Subtract with carry (long) [$40.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $0000.w		; CE 00 00 ; Decrement $0000.w [Flags: ZN]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $EA0000.l,X		; FF 00 00 EA ; Subtract with carry (long,X) $EA0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000CE.l,X		; FF CE 00 00 ; Subtract with carry (long,X) $0000CE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $EB0000.l,X		; FF 00 00 EB ; Subtract with carry (long,X) $EB0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	nop		; EA ; No operation
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $EB0000.l,X		; FF 00 00 EB ; Subtract with carry (long,X) $EB0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F2.b		; 00 F2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000C6.l,X		; FF C6 00 00 ; Subtract with carry (long,X) $0000C6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $ED0000.l,X		; FF 00 00 ED ; Subtract with carry (long,X) $ED0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EE.b		; 00 EE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F2.b		; 00 F2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000C6.l,X		; FF C6 00 00 ; Subtract with carry (long,X) $0000C6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $EE0000.l,X		; FF 00 00 EE ; Subtract with carry (long,X) $EE0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0040.w		; ED 40 00 ; Subtract $0040.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$8778.w		; 69 78 87 ; Add #$8778.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8549.w		; 20 49 85 ; Jump to subroutine at $8549.w [Writes: Stack Pointer] [Flow: call]
	jsl $06DC54.l		; 22 54 DC 06 ; Jump to subroutine long $06DC54.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$C9.b		; A9 C9 ; Load #$C9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0EC0.w,Y		; 99 C0 0E ; Store accumulator to $0EC0.w,Y [Reads: Accumulator, Y Index]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $4D		; D0 4D ; Branch if not equal to $D0, $4D [Flow: branch]
	jsr $8A84.w		; 20 84 8A ; Jump to subroutine at $8A84.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jsr $E95D.w		; 20 5D E9 ; Jump to subroutine at $E95D.w [Writes: Stack Pointer] [Flow: call]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $31		; D0 31 ; Branch if not equal to $D0, $31 [Flow: branch]
	dec $0D40.w,X		; DE 40 0D ; Decrement memory $0D40.w,X [Reads: X Index] [Flags: ZN]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$FC.b		; C9 FC ; Compare #$FC.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $A4F9.w		; 20 F9 A4 ; Jump to subroutine at $A4F9.w [Writes: Stack Pointer] [Flow: call]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$14.b		; E9 14 ; Subtract #$14.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp #$FB.b		; C9 FB ; Compare #$FB.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$FC.b		; A9 FC ; Load #$FC.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $10E0.w		; 20 E0 10 ; Jump to subroutine at $10E0.w [Writes: Stack Pointer] [Flow: call]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bit #$BD.b		; 89 BD ; Test bits #$BD.b with accumulator [Reads: Accumulator] [Flags: Z]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$80.b		; 09 80 ; Logical OR #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0403.w		; 8D 03 04 ; Store accumulator to $0403.w [Reads: Accumulator]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $8906.w,Y		; B9 06 89 ; Load $8906.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $74		; F0 74 ; Branch if equal to $F0, $74 [Flow: branch]
	cmp #$D0.b		; C9 D0 ; Compare #$D0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $3A		; B0 3A ; Branch if carry set to $B0, $3A [Flow: branch]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8000.w,Y		; 79 00 80 ; Add $8000.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	cmp $890C.w,Y		; D9 0C 89 ; Compare accumulator $890C.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0EB0.w,X		; FE B0 0E ; Increment memory $0EB0.w,X [Reads: X Index] [Flags: ZN]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8000.w,Y		; 79 00 80 ; Add $8000.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$1E.b		; A9 1E ; Load #$1E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp $890A.w,Y		; D9 0A 89 ; Compare accumulator $890A.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0DE0.w,X		; FE E0 0D ; Increment memory $0DE0.w,X [Reads: X Index] [Flags: ZN]
	lda #$78.b		; A9 78 ; Load #$78.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda #$50.b		; A9 50 ; Load #$50.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA22.l		; 22 22 EA 06 ; Jump to subroutine long $06EA22.l [Writes: Stack Pointer] [Flow: call]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01.b		; 65 01 ; Add $01.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	inc $0D50.w,X		; FE 50 0D ; Increment memory $0D50.w,X [Reads: X Index] [Flags: ZN]
	dec $0D40.w,X		; DE 40 0D ; Decrement memory $0D40.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $600000.l,X		; FF 00 00 60 ; Subtract with carry (long,X) $600000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $620000.l,X		; FF 00 00 62 ; Subtract with carry (long,X) $620000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $440000.l,X		; FF 00 00 44 ; Subtract with carry (long,X) $440000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$89BB.w		; 69 BB 89 ; Add #$89BB.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8549.w		; 4C 49 85 ; Jump to $8549.w [Flow: jump]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $000D46.l,X		; FF 46 0D 00 ; Subtract with carry (long,X) $000D46.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $47FFF8.l,X		; FF F8 FF 47 ; Subtract with carry (long,X) $47FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0200.w		; 0D 00 02 ; Logical OR $0200.w with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004D47.l,X		; FF 47 4D 00 ; Subtract with carry (long,X) $004D47.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004D46.l,X		; FF 46 4D 00 ; Subtract with carry (long,X) $004D46.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $690008.l,X		; FF 08 00 69 ; Subtract with carry (long,X) $690008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0200.w		; 0D 00 02 ; Logical OR $0200.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $6A0008.l,X		; FF 08 00 6A ; Subtract with carry (long,X) $6A0008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0200.w		; 0D 00 02 ; Logical OR $0200.w with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6A.b		; 00 6A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0200.w		; 4D 00 02 ; Exclusive OR $0200.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $69.b		; 00 69 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0200.w		; 4D 00 02 ; Exclusive OR $0200.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $000D46.l,X		; FF 46 0D 00 ; Subtract with carry (long,X) $000D46.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $47FFF8.l,X		; FF F8 FF 47 ; Subtract with carry (long,X) $47FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0200.w		; 0D 00 02 ; Logical OR $0200.w with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004D47.l,X		; FF 47 4D 00 ; Subtract with carry (long,X) $004D47.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004D46.l,X		; FF 46 4D 00 ; Subtract with carry (long,X) $004D46.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $660008.l,X		; FF 08 00 66 ; Subtract with carry (long,X) $660008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0200.w		; 0D 00 02 ; Logical OR $0200.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $670008.l,X		; FF 08 00 67 ; Subtract with carry (long,X) $670008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0200.w		; 0D 00 02 ; Logical OR $0200.w with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $67.b		; 00 67 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0200.w		; 4D 00 02 ; Exclusive OR $0200.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0200.w		; 4D 00 02 ; Exclusive OR $0200.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$8A04.w		; 69 04 8A ; Add #$8A04.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$0950.w		; A9 50 09 ; Load #$0950.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	lda #$0A74.w		; A9 74 0A ; Load #$0A74.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8549.w		; 4C 49 85 ; Jump to $8549.w [Flow: jump]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $9C1C.w		; 20 1C 9C ; Jump to subroutine at $9C1C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jsr $C211.w		; 20 11 C2 ; Jump to subroutine at $C211.w [Writes: Stack Pointer] [Flow: call]
	jsr $8AA9.w		; 20 A9 8A ; Jump to subroutine at $8AA9.w [Writes: Stack Pointer] [Flow: call]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	dec $0E80.w,X		; DE 80 0E ; Decrement memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $92F7.w,Y		; B9 F7 92 ; Load $92F7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0ED0.w,X		; 9D D0 0E ; Store accumulator to $0ED0.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $28		; B0 28 ; Branch if carry set to $B0, $28 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA1A.l		; 22 1A EA 06 ; Jump to subroutine long $06EA1A.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $0D40.w,X		; DD 40 0D ; Compare accumulator $0D40.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	dec $0D40.w,X		; DE 40 0D ; Decrement memory $0D40.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	inc $0D40.w,X		; FE 40 0D ; Increment memory $0D40.w,X [Reads: X Index] [Flags: ZN]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $0D50.w,X		; DD 50 0D ; Compare accumulator $0D50.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	dec $0D50.w,X		; DE 50 0D ; Decrement memory $0D50.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	inc $0D50.w,X		; FE 50 0D ; Increment memory $0D50.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	sbc $0DE0AC.l,X		; FF AC E0 0D ; Subtract with carry (long,X) $0DE0AC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $0D10.w		; AD 10 0D ; Load $0D10.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8B07.w,Y		; 79 07 8B ; Add $8B07.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0D30.w		; AD 30 0D ; Load $0D30.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $8B09.w,Y		; 79 09 8B ; Add $8B09.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0D00.w		; AD 00 0D ; Load $0D00.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$F0.b		; 69 F0 ; Add #$F0.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0D20.w		; AD 20 0D ; Load $0D20.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$FF.b		; 69 FF ; Add #$FF.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	jsr $8D06.w		; 20 06 8D ; Jump to subroutine at $8D06.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $0D		; B0 0D ; Branch if carry set to $B0, $0D [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w		; 8D 80 0D ; Store accumulator to $0D80.w [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w		; 8D F0 0D ; Store accumulator to $0DF0.w [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA22.l		; 22 22 EA 06 ; Jump to subroutine long $06EA22.l [Writes: Stack Pointer] [Flow: call]
	jmp $8AE4.w		; 4C E4 8A ; Jump to $8AE4.w [Flow: jump]
	jsr $8CA9.w		; 20 A9 8C ; Jump to subroutine at $8CA9.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jmp $8B90.w		; 4C 90 8B ; Jump to $8B90.w [Flow: jump]
	jsr $8CA9.w		; 20 A9 8C ; Jump to subroutine at $8CA9.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jsr $8BBC.w		; 20 BC 8B ; Jump to subroutine at $8BBC.w [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA22.l		; 22 22 EA 06 ; Jump to subroutine long $06EA22.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda #$50.b		; A9 50 ; Load #$50.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA22.l		; 22 22 EA 06 ; Jump to subroutine long $06EA22.l [Writes: Stack Pointer] [Flow: call]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	jsr $8C43.w		; 20 43 8C ; Jump to subroutine at $8C43.w [Writes: Stack Pointer] [Flow: call]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $BDE8.w		; 20 E8 BD ; Jump to subroutine at $BDE8.w [Writes: Stack Pointer] [Flow: call]
	ldy $0EC0.w,X		; BC C0 0E ; Load Y register $0EC0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF800.l,X		; 9F 00 F8 7F ; Store accumulator (long,X) $7FF800.l,X [Reads: Accumulator, X Index]
	lda #$4F.b		; A9 4F ; Load #$4F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$05.b		; C0 05 ; Compare #$05.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$2F.b		; A9 2F ; Load #$2F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF90E.l,X		; 9F 0E F9 7F ; Store accumulator (long,X) $7FF90E.l,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0E90.w,X		; BD 90 0E ; Load $0E90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	trb $EE.b		; 14 EE ; Test and reset bits $EE.b [Reads: Accumulator] [Flags: Z]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $20EC.w		; EC EC 20 ; Compare $20EC.w with X register [Reads: X Index] [Flags: ZNC]
	lda #$8C.b		; A9 8C ; Load #$8C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jsl $06F121.l		; 22 21 F1 06 ; Jump to subroutine long $06F121.l [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	ora [$8C.b],Y		; 17 8C ; OR accumulator with memory (long indexed) [$8C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sty $8C55.w		; 8C 55 8C ; Store Y register to $8C55.w [Reads: Y Index]
	ldy $0DE0.w		; AC E0 0D ; Load $0DE0.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $0B10.w,X		; BD 10 0B ; Load $0B10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8BD1.w,Y		; 79 D1 8B ; Add $8BD1.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0B20.w,X		; BD 20 0B ; Load $0B20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $8BD3.w,Y		; 79 D3 8B ; Add $8BD3.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $0B30.w,X		; BD 30 0B ; Load $0B30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8BD5.w,Y		; 79 D5 8B ; Add $8BD5.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $0B40.w,X		; BD 40 0B ; Load $0B40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$FF.b		; 69 FF ; Add #$FF.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8BEE.w		; 20 EE 8B ; Jump to subroutine at $8BEE.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $20.b		; 05 20 ; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $FE8B.w		; EE 8B FE ; Increment $FE8B.w [Flags: ZN]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $E0		; 80 E0 ; Branch always to $80, $E0 [Flow: branch]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $8C34.w,Y		; B9 34 8C ; Load $8C34.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CAA.w,X		; 9D AA 0C ; Store accumulator to $0CAA.w,X [Reads: Accumulator, X Index]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $8C2B.w,Y		; B9 2B 8C ; Load $8C2B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $AB		; D0 AB ; Branch if not equal to $D0, $AB [Flow: branch]
	lda #$23.b		; A9 23 ; Load #$23.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	.db $80, $A4		; 80 A4 ; Branch always to $80, $A4 [Flow: branch]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA12.l		; 22 12 EA 06 ; Jump to subroutine long $06EA12.l [Writes: Stack Pointer] [Flow: call]
	lda #$1E.b		; A9 1E ; Load #$1E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	jsr $8C43.w		; 20 43 8C ; Jump to subroutine at $8C43.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $B3		; 80 B3 ; Branch always to $80, $B3 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $880008.l,X		; FF 08 00 88 ; Subtract with carry (long,X) $880008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $AA68.w		; 8C 68 AA ; Store Y register to $AA68.w [Reads: Y Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $E9AD.w		; 20 AD E9 ; Jump to subroutine at $E9AD.w [Writes: Stack Pointer] [Flow: call]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8C90.w,X		; 7D 90 8C ; Add $8C90.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ldx $07.b		; A6 07 ; Load $07.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $8C94.w,X		; BD 94 8C ; Load $8C94.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $8C9B.w,X		; BD 9B 8C ; Load $8C9B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0F.b		; 05 0F ; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $B3		; 10 B3 ; Branch if plus to $10, $B3 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $04.b		; E5 04 ; Subtract $04.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0008.w		; C9 08 00 ; Compare #$0008.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0F		; B0 0F ; Branch if carry set to $B0, $0F [Flow: branch]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $06.b		; E5 06 ; Subtract $06.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0008.w		; C9 08 00 ; Compare #$0008.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9443.w		; 20 43 94 ; Jump to subroutine at $9443.w [Writes: Stack Pointer] [Flow: call]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C9A.w,X		; 9D 9A 0C ; Store accumulator to $0C9A.w,X [Reads: Accumulator, X Index]
	lda #$1E.b		; A9 1E ; Load #$1E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($C0.b,X)		; 01 C0 ; Logical OR ($C0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	trb $1C20.w		; 1C 20 1C ; Test and reset bits $1C20.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $F0, $E8		; F0 E8 ; Branch if equal to $F0, $E8 [Flow: branch]
	cpx $E0.b		; E4 E0 ; Compare $E0.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $E8.b		; E4 E8 ; Compare $E8.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	trb $1018.w		; 1C 18 10 ; Test and reset bits $1018.w [Reads: Accumulator] [Flags: Z]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx $E0.b		; E4 E0 ; Compare $E0.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $E8.b		; E4 E8 ; Compare $E8.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	trb $FCA9.w		; 1C A9 FC ; Test and reset bits $FCA9.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0B08.w		; 6D 08 0B ; Add $0B08.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0B08.w		; 8D 08 0B ; Store accumulator to $0B08.w [Reads: Accumulator]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $0B09.w		; 6D 09 0B ; Add $0B09.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0B09.w		; 8D 09 0B ; Store accumulator to $0B09.w [Reads: Accumulator]
	stz $0FB5.w		; 9C B5 0F ; Store zero to $0FB5.w
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0FB5.w		; AD B5 0F ; Load $0FB5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $0B08.w		; AD 08 0B ; Load $0B08.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8D40.w,Y		; 79 40 8D ; Add $8D40.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$01FF.w		; 29 FF 01 ; Logical AND #$01FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	lda $0D81.w,X		; BD 81 0D ; Load $0D81.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $8D50.w,Y		; B9 50 8D ; Load $8D50.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D51.w,X		; 9D 51 0D ; Store accumulator to $0D51.w,X [Reads: Accumulator, X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror $0D51.w,X		; 7E 51 0D ; Rotate right $0D51.w,X [Reads: X Index] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ror $0D51.w,X		; 7E 51 0D ; Rotate right $0D51.w,X [Reads: X Index] [Flags: ZNC]
	lda $8D60.w,Y		; B9 60 8D ; Load $8D60.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D41.w,X		; 9D 41 0D ; Store accumulator to $0D41.w,X [Reads: Accumulator, X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror $0D41.w,X		; 7E 41 0D ; Rotate right $0D41.w,X [Reads: X Index] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ror $0D41.w,X		; 7E 41 0D ; Rotate right $0D41.w,X [Reads: X Index] [Flags: ZNC]
	lda $0B0A.w		; AD 0A 0B ; Load $0B0A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $04E800.l,X		; BF 00 E8 04 ; Load long $04E800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $04E800.l,X		; BF 00 E8 04 ; Load long $04E800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta WRMPYA.w		; 8D 02 42 ; Store accumulator to WRMPYA.w [Reads: Accumulator]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $05.b		; A4 05 ; Load $05.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	sta WRMPYB.w		; 8D 03 42 ; Store accumulator to WRMPYB.w [Reads: Accumulator]
	jsr $8E75.w		; 20 75 8E ; Jump to subroutine at $8E75.w [Writes: Stack Pointer] [Flow: call]
	asl $4216.w		; 0E 16 42 ; Arithmetic shift left $4216.w [Flags: ZNC]
	lda RDMPYH.w		; AD 17 42 ; Load RDMPYH.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lsr $01.b		; 46 01 ; Logical shift right $01.b [Reads: Direct Page] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	stz $0A.b		; 64 0A ; Store zero to $0A.b
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D10.w		; 6D 10 0D ; Add $0D10.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0B11.w,X		; 9D 11 0B ; Store accumulator to $0B11.w,X [Reads: Accumulator, X Index]
	lda $0D30.w		; AD 30 0D ; Load $0D30.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $0A.b		; 65 0A ; Add $0A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0B21.w,X		; 9D 21 0B ; Store accumulator to $0B21.w,X [Reads: Accumulator, X Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta WRMPYA.w		; 8D 02 42 ; Store accumulator to WRMPYA.w [Reads: Accumulator]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $07.b		; A4 07 ; Load $07.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	sta WRMPYB.w		; 8D 03 42 ; Store accumulator to WRMPYB.w [Reads: Accumulator]
	jsr $8E75.w		; 20 75 8E ; Jump to subroutine at $8E75.w [Writes: Stack Pointer] [Flow: call]
	asl $4216.w		; 0E 16 42 ; Arithmetic shift left $4216.w [Flags: ZNC]
	lda RDMPYH.w		; AD 17 42 ; Load RDMPYH.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lsr $03.b		; 46 03 ; Logical shift right $03.b [Reads: Direct Page] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	stz $0A.b		; 64 0A ; Store zero to $0A.b
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D00.w		; 6D 00 0D ; Add $0D00.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0B31.w,X		; 9D 31 0B ; Store accumulator to $0B31.w,X [Reads: Accumulator, X Index]
	lda $0D20.w		; AD 20 0D ; Load $0D20.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $0A.b		; 65 0A ; Add $0A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0B41.w,X		; 9D 41 0B ; Store accumulator to $0B41.w,X [Reads: Accumulator, X Index]
	inc $0FB5.w		; EE B5 0F ; Increment $0FB5.w [Flags: ZN]
	lda $0FB5.w		; AD B5 0F ; Load $0FB5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $8D85.w		; 4C 85 8D ; Jump to $8D85.w [Flow: jump]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$C9.b		; A9 C9 ; Load #$C9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1DF65F.l		; 22 5F F6 1D ; Jump to subroutine long $1DF65F.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $2D		; 30 2D ; Branch if minus to $30, $2D [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EC0.w,Y		; 99 C0 0E ; Store accumulator to $0EC0.w,Y [Reads: Accumulator, Y Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,Y		; 99 60 0E ; Store accumulator to $0E60.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CAA.w,Y		; 99 AA 0C ; Store accumulator to $0CAA.w,Y [Reads: Accumulator, Y Index]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CD2.w,Y		; 99 D2 0C ; Store accumulator to $0CD2.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $16		; 10 16 ; Branch if plus to $10, $16 [Flow: branch]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	jsr $9ADF.w		; 20 DF 9A ; Jump to subroutine at $9ADF.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $0A		; 10 0A ; Branch if plus to $10, $0A [Flow: branch]
	lda $0F10.w,X		; BD 10 0F ; Load $0F10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $8ECD.w,Y		; B9 CD 8E ; Load $8ECD.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $04C5.w		; AD C5 04 ; Load $04C5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	cmp $0C9A.w,X		; DD 9A 0C ; Compare accumulator $0C9A.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0C9A.w,X		; 9D 9A 0C ; Store accumulator to $0C9A.w,X [Reads: Accumulator, X Index]
	jsr $9ADF.w		; 20 DF 9A ; Jump to subroutine at $9ADF.w [Writes: Stack Pointer] [Flow: call]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $8FFA.w		; 20 FA 8F ; Jump to subroutine at $8FFA.w [Writes: Stack Pointer] [Flow: call]
	jmp $C211.w		; 4C 11 C2 ; Jump to $C211.w [Flow: jump]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $0E10.w,X		; BD 10 0E ; Load $0E10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $01F4A1.l		; 22 A1 F4 01 ; Jump to subroutine long $01F4A1.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $01F496.l		; 22 96 F4 01 ; Jump to subroutine long $01F496.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsr $E898.w		; 20 98 E8 ; Jump to subroutine at $E898.w [Writes: Stack Pointer] [Flow: call]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$20.b		; 69 20 ; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	lda $8ECB.w,Y		; B9 CB 8E ; Load $8ECB.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	lda $0F10.w,X		; BD 10 0F ; Load $0F10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	sta $0BA0.w,X		; 9D A0 0B ; Store accumulator to $0BA0.w,X [Reads: Accumulator, X Index]
	jsr $E8C5.w		; 20 C5 E8 ; Jump to subroutine at $E8C5.w [Writes: Stack Pointer] [Flow: call]
	stz $0DF0.w,X		; 9E F0 0D ; Store zero to $0DF0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0BA0.w,X		; BD A0 0B ; Load $0BA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $02E4.w		; 0D E4 02 ; Logical OR $02E4.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $04C5.w		; AD C5 04 ; Load $04C5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $C211.w		; 20 11 C2 ; Jump to subroutine at $C211.w [Writes: Stack Pointer] [Flow: call]
	stz $0BA0.w,X		; 9E A0 0B ; Store zero to $0BA0.w,X [Reads: X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta ($54.b)		; 92 54 ; Store accumulator (indirect) ($54.b) [Reads: Accumulator, Direct Page]
	sta ($FD.b,S),Y		; 93 FD ; Store accumulator (stack relative indirect indexed) ($FD.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($28.b,S),Y		; 93 28 ; Store accumulator (stack relative indirect indexed) ($28.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sty $6C.b,X		; 94 6C ; Store Y register $6C.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sty $FA.b,X		; 94 FA ; Store Y register $FA.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sty $AD.b,X		; 94 AD ; Store Y register $AD.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta $03.b,X		; 95 03 ; Store accumulator to $03.b,X [Reads: Accumulator, X Index]
	sta ($48.b)		; 92 48 ; Store accumulator (indirect) ($48.b) [Reads: Accumulator, Direct Page]
	sta ($8F.b)		; 92 8F ; Store accumulator (indirect) ($8F.b) [Reads: Accumulator, Direct Page]
	sta ($FA.b)		; 92 FA ; Store accumulator (indirect) ($FA.b) [Reads: Accumulator, Direct Page]
	sty $AA.b,X		; 94 AA ; Store Y register $AA.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta ($13.b)		; 92 13 ; Store accumulator (indirect) ($13.b) [Reads: Accumulator, Direct Page]
	sta ($F5.b),Y		; 91 F5 ; Store accumulator ($F5.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sty $D5.b,X		; 94 D5 ; Store Y register $D5.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta ($18.b),Y		; 91 18 ; Store accumulator ($18.b),Y [Reads: Accumulator, Direct Page, Y Index]
	.db $90, $44		; 90 44 ; Branch if carry clear to $90, $44 [Flow: branch]
	.db $90, $BC		; 90 BC ; Branch if carry clear to $90, $BC [Flow: branch]
	sta $8C94FA.l		; 8F FA 94 8C ; Store accumulator (long) $8C94FA.l [Reads: Accumulator]
	sta $A90D05.l		; 8F 05 0D A9 ; Store accumulator (long) $A90D05.l [Reads: Accumulator]
	ora $9D.b		; 05 9D ; Logical OR $9D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $50, $0F		; 50 0F ; Branch if overflow clear to $50, $0F [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B6B.w,X		; 9D 6B 0B ; Store accumulator to $0B6B.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda #$12.b		; A9 12 ; Load #$12.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $947F.w		; 20 7F 94 ; Jump to subroutine at $947F.w [Writes: Stack Pointer] [Flow: call]
	lda #$D6.b		; A9 D6 ; Load #$D6.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	stz $0EF0.w,X		; 9E F0 0E ; Store zero to $0EF0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $8F8A.w,Y		; B9 8A 8F ; Load $8F8A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $0E.b		; 06 0E ; Arithmetic shift left $0E.b [Reads: Direct Page] [Flags: ZNC]
	ora [$0A.b]		; 07 0A ; OR accumulator with memory (long) [$0A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $8FB8.w,Y		; B9 B8 8F ; Load $8FB8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$12.b		; A9 12 ; Load #$12.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $947F.w		; 20 7F 94 ; Jump to subroutine at $947F.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$34.b		; C9 34 ; Compare #$34.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $915C.w		; 20 5C 91 ; Jump to subroutine at $915C.w [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $B0, $09		; B0 09 ; Branch if carry set to $B0, $09 [Flow: branch]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $8FBA.w,Y		; B9 BA 8F ; Load $8FBA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	cmp #$28.b		; C9 28 ; Compare #$28.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0B		; B0 0B ; Branch if carry set to $B0, $0B [Flow: branch]
	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0EF0.w,X		; BD F0 0E ; Load $0EF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$1A.b		; C9 1A ; Compare #$1A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	stz $0EF0.w,X		; 9E F0 0E ; Store zero to $0EF0.w,X [Reads: X Index]
	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$D7.b		; A9 D7 ; Load #$D7.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $0E.b		; 06 0E ; Arithmetic shift left $0E.b [Reads: Direct Page] [Flags: ZNC]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$A0.b		; A9 A0 ; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E98B.w		; 20 8B E9 ; Jump to subroutine at $E98B.w [Writes: Stack Pointer] [Flow: call]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $9016.w,Y		; B9 16 90 ; Load $9016.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; [PATTERN: Memory clearing operation] 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $0A.b		; 02 0A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $011C.w		; 9C 1C 01 ; Store zero to $011C.w
	stz $011D.w		; 9C 1D 01 ; Store zero to $011D.w
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $4D		; F0 4D ; Branch if equal to $F0, $4D [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $35		; D0 35 ; Branch if not equal to $D0, $35 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $947F.w		; 20 7F 94 ; Jump to subroutine at $947F.w [Writes: Stack Pointer] [Flow: call]
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	jsr $90D0.w		; 20 D0 90 ; Jump to subroutine at $90D0.w [Writes: Stack Pointer] [Flow: call]
	lda $0EC0.w,X		; BD C0 0E ; Load $0EC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $1D		; 90 1D ; Branch if carry clear to $90, $1D [Flow: branch]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $947F.w		; 20 7F 94 ; Jump to subroutine at $947F.w [Writes: Stack Pointer] [Flow: call]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	lda #$E0.b		; A9 E0 ; Load #$E0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E10.w,X		; 9D 10 0E ; Store accumulator to $0E10.w,X [Reads: Accumulator, X Index]
	lda #$70.b		; A9 70 ; Load #$70.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF1.w		; 8D F1 1C ; Store accumulator to $1CF1.w [Reads: Accumulator]
	jsl $05FA8E.l		; 22 8E FA 05 ; Jump to subroutine long $05FA8E.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $8000.w,Y		; B9 00 80 ; Load $8000.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $011C.w		; 8D 1C 01 ; Store accumulator to $011C.w [Reads: Accumulator]
	lda $8002.w,Y		; B9 02 80 ; Load $8002.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $011D.w		; 8D 1D 01 ; Store accumulator to $011D.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E98B.w		; [PATTERN: Memory clearing operation] 20 8B E9 ; Jump to subroutine at $E98B.w [Writes: Stack Pointer] [Flow: call]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $16		; 10 16 ; Branch if plus to $10, $16 [Flow: branch]
	stz $0F80.w,X		; 9E 80 0F ; Store zero to $0F80.w,X [Reads: X Index]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $9042.w,Y		; B9 42 90 ; Load $9042.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $0E0D.w		; 0C 0D 0E ; Test and set bits $0E0D.w [Reads: Accumulator] [Flags: Z]
	ora $D8D818.l		; 0F 18 D8 D8 ; OR accumulator with memory (long) $D8D818.l [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ldy #$07.b		; A0 07 ; Load #$07.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0B00.w,Y		; B9 00 0B ; Load $0B00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0EC0.w,X		; BD C0 0E ; Load $0EC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $2A		; B0 2A ; Branch if carry set to $B0, $2A [Flow: branch]
	inc $0EC0.w,X		; FE C0 0E ; Increment memory $0EC0.w,X [Reads: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $90C4.w,X		; BD C4 90 ; Load $90C4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0B00.w,Y		; 99 00 0B ; Store accumulator to $0B00.w,Y [Reads: Accumulator, Y Index]
	lda $90C8.w,X		; BD C8 90 ; Load $90C8.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0B08.w,Y		; 99 08 0B ; Store accumulator to $0B08.w,Y [Reads: Accumulator, Y Index]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0B10.w,Y		; 99 10 0B ; Store accumulator to $0B10.w,Y [Reads: Accumulator, Y Index]
	lda $90CC.w,X		; BD CC 90 ; Load $90CC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0B18.w,Y		; 99 18 0B ; Store accumulator to $0B18.w,Y [Reads: Accumulator, Y Index]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0B20.w,Y		; 99 20 0B ; Store accumulator to $0B20.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B28.w,Y		; 99 28 0B ; Store accumulator to $0B28.w,Y [Reads: Accumulator, Y Index]
	sta $0B30.w,Y		; 99 30 0B ; Store accumulator to $0B30.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$0D.b]		; 07 0D ; OR accumulator with memory (long) [$0D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $BD0A.w		; 0E 0A BD ; Arithmetic shift left $BD0A.w [Flags: ZNC]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $947F.w		; 20 7F 94 ; Jump to subroutine at $947F.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$60.b		; C9 60 ; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0F		; B0 0F ; Branch if carry set to $B0, $0F [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	cmp #$42.b		; C9 42 ; Compare #$42.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsr $9160.w		; 20 60 91 ; Jump to subroutine at $9160.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $910D.w,Y		; B9 0D 91 ; Load $910D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0EF0.w,X		; BD F0 0E ; Load $0EF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	stz $0DF0.w,X		; 9E F0 0D ; Store zero to $0DF0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	lda #$C9.b		; A9 C9 ; Load #$C9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1DF65F.l		; 22 5F F6 1D ; Jump to subroutine long $1DF65F.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $65		; 30 65 ; Branch if minus to $30, $65 [Flow: branch]
	lda #$2A.b		; A9 2A ; Load #$2A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda $0FB5.w		; AD B5 0F ; Load $0FB5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EC0.w,Y		; 99 C0 0E ; Store accumulator to $0EC0.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,Y		; 99 60 0E ; Store accumulator to $0E60.w,Y [Reads: Accumulator, Y Index]
	lda #$21.b		; A9 21 ; Load #$21.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CAA.w,Y		; 99 AA 0C ; Store accumulator to $0CAA.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9158.w,X		; 7D 58 91 ; Add $9158.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $915A.w,X		; 7D 5A 91 ; Add $915A.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA12.l		; 22 12 EA 06 ; Jump to subroutine long $06EA12.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	lda $0D10.w		; AD 10 0D ; Load $0D10.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,Y		; 99 90 0D ; Store accumulator to $0D90.w,Y [Reads: Accumulator, Y Index]
	lda $0D30.w		; AD 30 0D ; Load $0D30.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DA0.w,Y		; 99 A0 0D ; Store accumulator to $0DA0.w,Y [Reads: Accumulator, Y Index]
	lda $0D00.w		; AD 00 0D ; Load $0D00.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,Y		; 99 B0 0D ; Store accumulator to $0DB0.w,Y [Reads: Accumulator, Y Index]
	lda $0D20.w		; AD 20 0D ; Load $0D20.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E90.w,Y		; 99 90 0E ; Store accumulator to $0E90.w,Y [Reads: Accumulator, Y Index]
	jmp $8EAB.w		; 4C AB 8E ; Jump to $8EAB.w [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	jsr $9443.w		; 20 43 94 ; Jump to subroutine at $9443.w [Writes: Stack Pointer] [Flow: call]
	stz $0ED0.w,X		; 9E D0 0E ; Store zero to $0ED0.w,X [Reads: X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $9118.w		; 4C 18 91 ; Jump to $9118.w [Flow: jump]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E50.w,X		; BD 50 0E ; Load $0E50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$A1.b		; C9 A1 ; Compare #$A1.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	lda #$A0.b		; A9 A0 ; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B0A.w		; 8D 0A 0B ; Store accumulator to $0B0A.w [Reads: Accumulator]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$C0.b		; C9 C0 ; Compare #$C0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $07		; B0 07 ; Branch if carry set to $B0, $07 [Flow: branch]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $8E7C.w		; 20 7C 8E ; Jump to subroutine at $8E7C.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $57		; 80 57 ; Branch always to $80, $57 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFEFF.l,X		; FF FF FE FF ; Subtract with carry (long,X) $FFFEFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $30		; 10 30 ; Branch if plus to $10, $30 [Flow: branch]
	.db $50, $70		; 50 70 ; Branch if overflow clear to $50, $70 [Flow: branch]
	.db $90, $B0		; 90 B0 ; Branch if carry clear to $90, $B0 [Flow: branch]
	.db $D0, $BD		; D0 BD ; Branch if not equal to $D0, $BD [Flow: branch]
	.db $50, $0E		; 50 0E ; Branch if overflow clear to $50, $0E [Flow: branch]
	cmp #$A1.b		; C9 A1 ; Compare #$A1.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	lda #$A0.b		; A9 A0 ; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	jsr $9443.w		; 20 43 94 ; Jump to subroutine at $9443.w [Writes: Stack Pointer] [Flow: call]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,Y		; 99 80 0D ; Store accumulator to $0D80.w,Y [Reads: Accumulator, Y Index]
	lda $9240.w,Y		; B9 40 92 ; Load $9240.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $D0, $F2		; D0 F2 ; Branch if not equal to $D0, $F2 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0B0A.w		; AD 0A 0B ; Load $0B0A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9231.w,Y		; 79 31 92 ; Add $9231.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0B0A.w		; 8D 0A 0B ; Store accumulator to $0B0A.w [Reads: Accumulator]
	jsr $93DB.w		; 20 DB 93 ; Jump to subroutine at $93DB.w [Writes: Stack Pointer] [Flow: call]
	jsr $8D70.w		; 20 70 8D ; Jump to subroutine at $8D70.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E50.w,X		; BD 50 0E ; Load $0E50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$A1.b		; C9 A1 ; Compare #$A1.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	lda #$A0.b		; A9 A0 ; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $947F.w		; 20 7F 94 ; Jump to subroutine at $947F.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $94BA.w		; 20 BA 94 ; Jump to subroutine at $94BA.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	jsr $9443.w		; 20 43 94 ; Jump to subroutine at $9443.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda #$6F.b		; A9 6F ; Load #$6F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF1.w		; 8D F1 1C ; Store accumulator to $1CF1.w [Reads: Accumulator]
	jsl $05FA8E.l		; 22 8E FA 05 ; Jump to subroutine long $05FA8E.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	sbc $000404.l,X		; FF 04 04 00 ; Subtract with carry (long,X) $000404.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $1018.w		; 1C 18 10 ; Test and reset bits $1018.w [Reads: Accumulator] [Flags: Z]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx $E0.b		; E4 E0 ; Compare $E0.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $E8.b		; E4 E8 ; Compare $E8.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	trb $1000.w		; 1C 00 10 ; Test and reset bits $1000.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $1C20.w		; 1C 20 1C ; Test and reset bits $1C20.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $F0, $E8		; F0 E8 ; Branch if equal to $F0, $E8 [Flow: branch]
	cpx $E0.b		; E4 E0 ; Compare $E0.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $E8.b		; E4 E8 ; Compare $E8.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $947F.w		; 4C 7F 94 ; Jump to $947F.w [Flow: jump]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $933F.w,Y		; B9 3F 93 ; Load $933F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E50.w,X		; BD 50 0E ; Load $0E50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D1.b		; C9 D1 ; Compare #$D1.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	lda #$D0.b		; A9 D0 ; Load #$D0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $DA		; 90 DA ; Branch if carry clear to $90, $DA [Flow: branch]
	.db $D0, $72		; D0 72 ; Branch if not equal to $D0, $72 [Flow: branch]
	stz $0ED0.w,X		; 9E D0 0E ; Store zero to $0ED0.w,X [Reads: X Index]
	lda #$C9.b		; A9 C9 ; Load #$C9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9317.w,X		; 7D 17 93 ; Add $9317.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $9319.w,X		; 7D 19 93 ; Add $9319.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $931B.w,X		; 7D 1B 93 ; Add $931B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $931D.w,X		; 7D 1D 93 ; Add $931D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA12.l		; 22 12 EA 06 ; Jump to subroutine long $06EA12.l [Writes: Stack Pointer] [Flow: call]
	jsl $1DF614.l		; 22 14 F6 1D ; Jump to subroutine long $1DF614.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$02.b		; E9 02 ; Subtract #$02.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $931F.w,X		; BD 1F 93 ; Load $931F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda $932F.w,X		; BD 2F 93 ; Load $932F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$70.b		; A9 70 ; Load #$70.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EC0.w,Y		; 99 C0 0E ; Store accumulator to $0EC0.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	lda #$84.b		; A9 84 ; Load #$84.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CAA.w,Y		; 99 AA 0C ; Store accumulator to $0CAA.w,Y [Reads: Accumulator, Y Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,Y		; 99 E0 0D ; Store accumulator to $0DE0.w,Y [Reads: Accumulator, Y Index]
	jmp $8EAB.w		; 4C AB 8E ; Jump to $8EAB.w [Flow: jump]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $92F7.w,Y		; B9 F7 92 ; Load $92F7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0ED0.w,X		; 9D D0 0E ; Store accumulator to $0ED0.w,X [Reads: Accumulator, X Index]
	lda $9307.w,Y		; B9 07 93 ; Load $9307.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $8AA9.w		; 20 A9 8A ; Jump to subroutine at $8AA9.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0E50.w,X		; BD 50 0E ; Load $0E50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D1.b		; C9 D1 ; Compare #$D1.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	lda #$D0.b		; A9 D0 ; Load #$D0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $93FB.w,Y		; B9 FB 93 ; Load $93FB.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $0A.b		; 02 0A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0E50.w,X		; BD 50 0E ; Load $0E50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D1.b		; C9 D1 ; Compare #$D1.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	lda #$D0.b		; A9 D0 ; Load #$D0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $9424.w,Y		; B9 24 94 ; Load $9424.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0ED0.w,X		; 9D D0 0E ; Store accumulator to $0ED0.w,X [Reads: Accumulator, X Index]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $9426.w,Y		; B9 26 94 ; Load $9426.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $93DB.w		; 20 DB 93 ; Jump to subroutine at $93DB.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0E50.w,X		; BD 50 0E ; Load $0E50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D1.b		; C9 D1 ; Compare #$D1.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	lda #$D0.b		; A9 D0 ; Load #$D0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $3D		; D0 3D ; Branch if not equal to $D0, $3D [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0E30.w,X		; BD 30 0E ; Load $0E30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $94D5.w,Y		; B9 D5 94 ; Load $94D5.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E30.w,X		; 9D 30 0E ; Store accumulator to $0E30.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $94C5.w,Y		; B9 C5 94 ; Load $94C5.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFD5C.l		; 8F 5C FD 7F ; Store accumulator (long) $7FFD5C.l [Reads: Accumulator]
	lda $94CD.w,Y		; B9 CD 94 ; Load $94CD.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFD68.l		; 8F 68 FD 7F ; Store accumulator (long) $7FFD68.l [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	jsr $C39B.w		; 20 9B C3 ; Jump to subroutine at $C39B.w [Writes: Stack Pointer] [Flow: call]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $945A.w,Y		; B9 5A 94 ; Load $945A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $30, $50		; 30 50 ; Branch if minus to $30, $50 [Flow: branch]
	ldy #$C0.b		; A0 C0 ; Load #$C0.b into Y register [Writes: Y Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $90, $B0		; 90 B0 ; Branch if carry clear to $90, $B0 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $B0, $C0		; B0 C0 ; Branch if carry set to $B0, $C0 [Flow: branch]
	cpy #$B0.b		; C0 B0 ; Compare #$B0.b with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$64.b		; A9 64 ; Load #$64.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	lda $7FFD5C.l		; AF 5C FD 7F ; Load long $7FFD5C.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $7FFD68.l		; AF 68 FD 7F ; Load long $7FFD68.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	jsr $8D06.w		; 20 06 8D ; Jump to subroutine at $8D06.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $47		; B0 47 ; Branch if carry set to $B0, $47 [Flow: branch]
	lda $0E30.w,X		; BD 30 0E ; Load $0E30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $2C		; F0 2C ; Branch if equal to $F0, $2C [Flow: branch]
	lda $0E50.w,X		; BD 50 0E ; Load $0E50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$A1.b		; C9 A1 ; Compare #$A1.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0F		; B0 0F ; Branch if carry set to $B0, $0F [Flow: branch]
	cmp #$61.b		; C9 61 ; Compare #$61.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $16		; B0 16 ; Branch if carry set to $B0, $16 [Flow: branch]
	lda #$11.b		; A9 11 ; Load #$11.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$68.b		; A9 68 ; Load #$68.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA22.l		; 22 22 EA 06 ; Jump to subroutine long $06EA22.l [Writes: Stack Pointer] [Flow: call]
	jsr $8AE4.w		; 20 E4 8A ; Jump to subroutine at $8AE4.w [Writes: Stack Pointer] [Flow: call]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	jsr $944C.w		; 20 4C 94 ; Jump to subroutine at $944C.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $25		; D0 25 ; Branch if not equal to $D0, $25 [Flow: branch]
	lda #$D6.b		; A9 D6 ; Load #$D6.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $1D		; 30 1D ; Branch if minus to $30, $1D [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,Y		; 99 80 0D ; Store accumulator to $0D80.w,Y [Reads: Accumulator, Y Index]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,Y		; 99 C0 0D ; Store accumulator to $0DC0.w,Y [Reads: Accumulator, Y Index]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,Y		; 99 B0 0E ; Store accumulator to $0EB0.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E50.w,X		; BD 50 0E ; Load $0E50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D1.b		; C9 D1 ; Compare #$D1.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	lda #$D0.b		; A9 D0 ; Load #$D0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $0E50.w,X		; BD 50 0E ; Load $0E50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D1.b		; C9 D1 ; Compare #$D1.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	jmp $92CF.w		; 4C CF 92 ; Jump to $92CF.w [Flow: jump]
	jmp $92B5.w		; 4C B5 92 ; Jump to $92B5.w [Flow: jump]
	jmp $94BA.w		; 4C BA 94 ; Jump to $94BA.w [Flow: jump]
	ora ($F8.b)		; 12 F8 ; OR accumulator with memory (indirect) ($F8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $12EE.w		; EE EE 12 ; Increment $12EE.w [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($F8.b)		; 12 F8 ; OR accumulator with memory (indirect) ($F8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $12EE.w		; EE EE 12 ; Increment $12EE.w [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $10EE.w		; EE EE 10 ; Increment $10EE.w [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $0B.b,X		; F5 0B ; Subtract $0B.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $10EE.w		; EE EE 10 ; Increment $10EE.w [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $0B.b,X		; F5 0B ; Subtract $0B.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $10EE.w		; EE EE 10 ; Increment $10EE.w [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $0B.b,X		; F5 0B ; Subtract $0B.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($F8.b)		; 12 F8 ; OR accumulator with memory (indirect) ($F8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $12EE.w		; EE EE 12 ; Increment $12EE.w [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($F8.b)		; 12 F8 ; OR accumulator with memory (indirect) ($F8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $12EE.w		; EE EE 12 ; Increment $12EE.w [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($F8.b)		; 12 F8 ; OR accumulator with memory (indirect) ($F8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $12EE.w		; EE EE 12 ; Increment $12EE.w [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $0B.b,X		; F5 0B ; Subtract $0B.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $12EE.w		; EE EE 12 ; Increment $12EE.w [Flags: ZN]
	ora ($F8.b)		; 12 F8 ; OR accumulator with memory (indirect) ($F8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $12EE.w		; EE EE 12 ; Increment $12EE.w [Flags: ZN]
	ora ($F8.b)		; 12 F8 ; OR accumulator with memory (indirect) ($F8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $0A.b,X		; F6 0A ; Increment memory $0A.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	inc $12EE.w		; EE EE 12 ; Increment $12EE.w [Flags: ZN]
	ora ($F8.b)		; 12 F8 ; OR accumulator with memory (indirect) ($F8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $0A.b,X		; F6 0A ; Increment memory $0A.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	inc $12EE.w		; EE EE 12 ; Increment $12EE.w [Flags: ZN]
	ora ($F8.b)		; 12 F8 ; OR accumulator with memory (indirect) ($F8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $0A.b,X		; F6 0A ; Increment memory $0A.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	inc $12EE.w		; EE EE 12 ; Increment $12EE.w [Flags: ZN]
	ora ($F8.b)		; 12 F8 ; OR accumulator with memory (indirect) ($F8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $12EE.w		; EE EE 12 ; Increment $12EE.w [Flags: ZN]
	ora ($F8.b)		; 12 F8 ; OR accumulator with memory (indirect) ($F8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $12EE.w		; EE EE 12 ; Increment $12EE.w [Flags: ZN]
	ora ($F9.b)		; 12 F9 ; OR accumulator with memory (indirect) ($F9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc [$08.b],Y		; F7 08 ; Subtract with carry (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($F2.b)		; F2 F2 ; Subtract with carry (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $12EE.w		; EE EE 12 ; Increment $12EE.w [Flags: ZN]
	ora ($F8.b)		; 12 F8 ; OR accumulator with memory (indirect) ($F8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $0B.b,X		; F5 0B ; Subtract $0B.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	sbc ($F3.b,S),Y		; F3 F3 ; Subtract with carry (stack relative indirect indexed) ($F3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	ora $08.b,S		; 03 08 ; OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	sbc ($F3.b,S),Y		; F3 F3 ; Subtract with carry (stack relative indirect indexed) ($F3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	ora $08.b,S		; 03 08 ; OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $F6.b		; 05 F6 ; Logical OR $F6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $F3.b,X		; F6 F3 ; Increment memory $F3.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc ($F9.b,S),Y		; F3 F9 ; Subtract with carry (stack relative indirect indexed) ($F9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $F6.b		; 05 F6 ; Logical OR $F6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $F3.b,X		; F6 F3 ; Increment memory $F3.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc ($F9.b,S),Y		; F3 F9 ; Subtract with carry (stack relative indirect indexed) ($F9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $F6.b		; 05 F6 ; Logical OR $F6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $F3.b,X		; F6 F3 ; Increment memory $F3.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc ($F9.b,S),Y		; F3 F9 ; Subtract with carry (stack relative indirect indexed) ($F9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $F3F0F0.l,X		; FF F0 F0 F3 ; Subtract with carry (long,X) $F3F0F0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($F7.b,S),Y		; F3 F7 ; Subtract with carry (stack relative indirect indexed) ($F7.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0303F7.l,X		; FF F7 03 03 ; Subtract with carry (long,X) $0303F7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $F0.b,X		; F6 F0 ; Increment memory $F0.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	.db $F0, $F3		; F0 F3 ; Branch if equal to $F0, $F3 [Flow: branch]
	sbc ($EE.b,S),Y		; F3 EE ; Subtract with carry (stack relative indirect indexed) ($EE.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $EE.b,X		; F6 EE ; Increment memory $EE.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($F6.b,X)		; 01 F6 ; Logical OR ($F6.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $F3.b,X		; F6 F3 ; Increment memory $F3.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc ($F9.b,S),Y		; F3 F9 ; Subtract with carry (stack relative indirect indexed) ($F9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($F9.b,X)		; 01 F9 ; Logical OR ($F9.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pea $04F4.w		; F4 F4 04 ; Push absolute address $04F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	tsb $EE.b		; 04 EE ; Test and set bits $EE.b [Reads: Accumulator] [Flags: Z]
	inc $0A0A.w		; EE 0A 0A ; Increment $0A0A.w [Flags: ZN]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	jsr ($F404.w,X)		; FC 04 F4 ; Jump to subroutine indirect indexed ($F404.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pea $0404.w		; F4 04 04 ; Push absolute address $0404.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	inc $0AEE.w		; EE EE 0A ; Increment $0AEE.w [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	jsr ($F404.w,X)		; FC 04 F4 ; Jump to subroutine indirect indexed ($F404.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pea $0404.w		; F4 04 04 ; Push absolute address $0404.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $0AF4.w		; F4 F4 0A ; Push absolute address $0AF4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jsr ($FC04.w,X)		; FC 04 FC ; Jump to subroutine indirect indexed ($FC04.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsb $F4.b		; 04 F4 ; Test and set bits $F4.b [Reads: Accumulator] [Flags: Z]
	pea $0404.w		; F4 04 04 ; Push absolute address $0404.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $0AF4.w		; F4 F4 0A ; Push absolute address $0AF4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jsr ($FC04.w,X)		; FC 04 FC ; Jump to subroutine indirect indexed ($FC04.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsb $F4.b		; 04 F4 ; Test and set bits $F4.b [Reads: Accumulator] [Flags: Z]
	pea $0404.w		; F4 04 04 ; Push absolute address $0404.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $0AF4.w		; F4 F4 0A ; Push absolute address $0AF4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jsr ($FC04.w,X)		; FC 04 FC ; Jump to subroutine indirect indexed ($FC04.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsb $F4.b		; 04 F4 ; Test and set bits $F4.b [Reads: Accumulator] [Flags: Z]
	pea $0404.w		; F4 04 04 ; Push absolute address $0404.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	inc $0AEE.w		; EE EE 0A ; Increment $0AEE.w [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jsr ($FC04.w,X)		; FC 04 FC ; Jump to subroutine indirect indexed ($FC04.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsb $F4.b		; 04 F4 ; Test and set bits $F4.b [Reads: Accumulator] [Flags: Z]
	pea $0404.w		; F4 04 04 ; Push absolute address $0404.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	inc $0AEE.w		; EE EE 0A ; Increment $0AEE.w [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	sbc $F4F4.w,Y		; F9 F4 F4 ; Subtract with carry $F4F4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora [$0D.b]		; 07 0D ; OR accumulator with memory (long) [$0D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FC.b,X		; F5 FC ; Subtract $FC.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	.db $F0, $F6		; F0 F6 ; Branch if equal to $F0, $F6 [Flow: branch]
	inc $F3.b,X		; F6 F3 ; Increment memory $F3.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc ($F9.b,S),Y		; F3 F9 ; Subtract with carry (stack relative indirect indexed) ($F9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F9F9.w,Y		; F9 F9 F9 ; Subtract with carry $F9F9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $00.b,X		; 16 00 ; Arithmetic shift left $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $22.b		; 06 22 ; Arithmetic shift left $22.b [Reads: Direct Page] [Flags: ZNC]
	jsl $462020.l		; 22 20 20 46 ; Jump to subroutine long $462020.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	rol $22.b,X		; 36 22 ; Rotate left $22.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jsl $1A2020.l		; 22 20 20 1A ; Jump to subroutine long $1A2020.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	sec		; 38 ; Set carry flag [Flags: C]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsr $1A20.w		; 20 20 1A ; Jump to subroutine at $1A20.w [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $42, $04		; 42 04 ; Reserved instruction
	tsb $38.b		; 04 38 ; Test and set bits $38.b [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsr $1A20.w		; 20 20 1A ; Jump to subroutine at $1A20.w [Writes: Stack Pointer] [Flow: call]
	.db $42, $40		; 42 40 ; Reserved instruction
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	sec		; 38 ; Set carry flag [Flags: C]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsr $1820.w		; 20 20 18 ; Jump to subroutine at $1820.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsl $202022.l		; 22 22 20 20 ; Jump to subroutine long $202022.l [Writes: Stack Pointer] [Flow: call]
	asl $6A.b,X		; 16 6A ; Arithmetic shift left $6A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $060E.w		; 0E 0E 06 ; Arithmetic shift left $060E.w [Flags: ZNC]
	asl $06.b,X		; 16 06 ; Arithmetic shift left $06.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jsl $202022.l		; 22 22 20 20 ; Jump to subroutine long $202022.l [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	sec		; 38 ; Set carry flag [Flags: C]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsr $4E20.w		; 20 20 4E ; Jump to subroutine at $4E20.w [Writes: Stack Pointer] [Flow: call]
	lsr $6E6E.w		; 4E 6E 6E ; Logical shift right $6E6E.w [Flags: ZNC]
	jmp ($A26C.w)		; 6C 6C A2 ; Jump indirect to ($A26C.w) [Flow: jump]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: ZN]
	trb $4C3C.w		; 1C 3C 4C ; Test and reset bits $4C3C.w [Reads: Accumulator] [Flags: Z]
	lsr $6E4E.w		; 4E 4E 6E ; Logical shift right $6E4E.w [Flags: ZNC]
	ror $6C6C.w		; 6E 6C 6C ; Rotate right $6C6C.w [Flags: ZNC]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $844C.w,X		; 3C 4C 84 ; Test bits $844C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sty $A4.b		; 84 A4 ; Store Y register to $A4.b [Reads: Y Index]
	ldy $A0.b		; A4 A0 ; Load $A0.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy #$A2.b		; A0 A2 ; Load #$A2.b into Y register [Writes: Y Index] [Flags: ZN]
	ldx #$3C.b		; A2 3C ; Load #$3C.b into X register [Writes: X Index] [Flags: ZN]
	jmp $4C3C.w		; 4C 3C 4C ; Jump to $4C3C.w [Flow: jump]
	sty $84.b		; 84 84 ; Store Y register to $84.b [Reads: Y Index]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $80, $82		; 80 82 ; Branch always to $80, $82 [Flow: branch]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: ZN]
	bit $3C4C.w,X		; 3C 4C 3C ; Test bits $3C4C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	jmp $8484.w		; 4C 84 84 ; Jump to $8484.w [Flow: jump]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $82, $80, $A2		; 82 80 A2 ; Branch always long to $82, $80, $A2 [Flow: branch]
	ldx #$3C.b		; A2 3C ; Load #$3C.b into X register [Writes: X Index] [Flags: ZN]
	jmp $4C3C.w		; 4C 3C 4C ; Jump to $4C3C.w [Flow: jump]
	lsr $6E4E.w		; 4E 4E 6E ; Logical shift right $6E4E.w [Flags: ZNC]
	ror $6C6C.w		; 6E 6C 6C ; Rotate right $6C6C.w [Flags: ZNC]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: ZN]
	bit $3C4C.w,X		; 3C 4C 3C ; Test bits $3C4C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	jmp $4E4E.w		; 4C 4E 4E ; Jump to $4E4E.w [Flow: jump]
	ror $6C6E.w		; 6E 6E 6C ; Rotate right $6C6E.w [Flags: ZNC]
	jmp ($A2A2.w)		; 6C A2 A2 ; Jump indirect to ($A2A2.w) [Flow: jump]
	tsb $0C1C.w		; 0C 1C 0C ; Test and set bits $0C1C.w [Reads: Accumulator] [Flags: Z]
	trb $C6E0.w		; 1C E0 C6 ; Test and reset bits $C6E0.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inc $E8.b		; E6 E8 ; Increment $E8.b [Reads: Direct Page] [Flags: ZN]
	jsr $0820.w		; 20 20 08 ; Jump to subroutine at $0820.w [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	cpy #$C2.b		; C0 C2 ; Compare #$C2.b with Y register [Reads: Y Index] [Flags: ZNC]
	rep #$00		; C2 00 ; Reset processor status bits #$00 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	brk $CE.b		; 00 CE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $ECEC.w		; CE EC EC ; Decrement $ECEC.w [Flags: ZN]
	cpx $EEEC.w		; EC EC EE ; Compare $EEEC.w with X register [Reads: X Index] [Flags: ZNC]
	inc $C4C4.w		; EE C4 C4 ; Increment $C4C4.w [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $040401.l		; 0F 01 04 04 ; OR accumulator with memory (long) $040401.l [Writes: Accumulator] [Flags: ZN]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $0F.b		; 04 0F ; Test and set bits $0F.b [Reads: Accumulator] [Flags: Z]
	ora $4C0C4C.l		; 0F 4C 0C 4C ; OR accumulator with memory (long) $4C0C4C.l [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $4C0C.w		; 0C 0C 4C ; Test and set bits $4C0C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $4C4C.w		; 0C 4C 4C ; Test and set bits $4C4C.w [Reads: Accumulator] [Flags: Z]
	tsb $0A4C.w		; 0C 4C 0A ; Test and set bits $0A4C.w [Reads: Accumulator] [Flags: Z]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $4C0C.w		; 0C 0C 4C ; Test and set bits $4C0C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $4C4C.w		; 0C 4C 4C ; Test and set bits $4C4C.w [Reads: Accumulator] [Flags: Z]
	tsb $0A4C.w		; 0C 4C 0A ; Test and set bits $0A4C.w [Reads: Accumulator] [Flags: Z]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $4C0C.w		; 0C 0C 4C ; Test and set bits $4C0C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $4C4C.w		; 0C 4C 4C ; Test and set bits $4C4C.w [Reads: Accumulator] [Flags: Z]
	tsb $0A0C.w		; 0C 0C 0A ; Test and set bits $0A0C.w [Reads: Accumulator] [Flags: Z]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $4C0C.w		; 0C 0C 4C ; Test and set bits $4C0C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $4C4C.w		; 0C 4C 4C ; Test and set bits $4C4C.w [Reads: Accumulator] [Flags: Z]
	jmp $0A4C.w		; 4C 4C 0A ; Jump to $0A4C.w [Flow: jump]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $4C0C.w		; 0C 0C 4C ; Test and set bits $4C0C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $4C4C.w		; 0C 4C 4C ; Test and set bits $4C4C.w [Reads: Accumulator] [Flags: Z]
	tsb $0A4C.w		; 0C 4C 0A ; Test and set bits $0A4C.w [Reads: Accumulator] [Flags: Z]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $4C0C.w		; 0C 0C 4C ; Test and set bits $4C0C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $4C4C.w		; 0C 4C 4C ; Test and set bits $4C4C.w [Reads: Accumulator] [Flags: Z]
	tsb $0A4C.w		; 0C 4C 0A ; Test and set bits $0A4C.w [Reads: Accumulator] [Flags: Z]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $4C0C.w		; 0C 0C 4C ; Test and set bits $4C0C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $4C4C.w		; 0C 4C 4C ; Test and set bits $4C4C.w [Reads: Accumulator] [Flags: Z]
	tsb $0A4C.w		; 0C 4C 0A ; Test and set bits $0A4C.w [Reads: Accumulator] [Flags: Z]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $4C0C.w		; 0C 0C 4C ; Test and set bits $4C0C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0A4C.w		; 0C 4C 0A ; Test and set bits $0A4C.w [Reads: Accumulator] [Flags: Z]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0C4C.w		; 0C 4C 0C ; Test and set bits $0C4C.w [Reads: Accumulator] [Flags: Z]
	jmp $0C0C.w		; 4C 0C 0C ; Jump to $0C0C.w [Flow: jump]
	jmp $0A4C.w		; 4C 4C 0A ; Jump to $0A4C.w [Flow: jump]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0C4C.w		; 0C 4C 0C ; Test and set bits $0C4C.w [Reads: Accumulator] [Flags: Z]
	jmp $0C0C.w		; 4C 0C 0C ; Jump to $0C0C.w [Flow: jump]
	jmp $0A4C.w		; 4C 4C 0A ; Jump to $0A4C.w [Flow: jump]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0C4C.w		; 0C 4C 0C ; Test and set bits $0C4C.w [Reads: Accumulator] [Flags: Z]
	jmp $0C0C.w		; 4C 0C 0C ; Jump to $0C0C.w [Flow: jump]
	jmp $0A4C.w		; 4C 4C 0A ; Jump to $0A4C.w [Flow: jump]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	jmp $0C0C.w		; 4C 0C 0C ; Jump to $0C0C.w [Flow: jump]
	jmp $0A4C.w		; 4C 4C 0A ; Jump to $0A4C.w [Flow: jump]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jmp $0C4C.w		; 4C 4C 0C ; Jump to $0C4C.w [Flow: jump]
	jmp $0C0C.w		; 4C 0C 0C ; Jump to $0C0C.w [Flow: jump]
	jmp $0A4C.w		; 4C 4C 0A ; Jump to $0A4C.w [Flow: jump]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0C4C.w		; 0C 4C 0C ; Test and set bits $0C4C.w [Reads: Accumulator] [Flags: Z]
	jmp $0C0C.w		; 4C 0C 0C ; Jump to $0C0C.w [Flow: jump]
	jmp $0A4C.w		; 4C 4C 0A ; Jump to $0A4C.w [Flow: jump]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0C4C.w		; 0C 4C 0C ; Test and set bits $0C4C.w [Reads: Accumulator] [Flags: Z]
	jmp $0C0C.w		; 4C 0C 0C ; Jump to $0C0C.w [Flow: jump]
	jmp $0C4C.w		; 4C 4C 0C ; Jump to $0C4C.w [Flow: jump]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0C4C.w		; 0C 4C 0C ; Test and set bits $0C4C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $4C0C.w		; 0C 0C 4C ; Test and set bits $4C0C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $4C0C.w		; 0C 0C 4C ; Test and set bits $4C0C.w [Reads: Accumulator] [Flags: Z]
	jmp $4A0A.w		; 4C 0A 4A ; Jump to $4A0A.w [Flow: jump]
	tsb $0A4C.w		; 0C 4C 0A ; Test and set bits $0A4C.w [Reads: Accumulator] [Flags: Z]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000864.l,X		; FF 64 08 00 ; Subtract with carry (long,X) $000864.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000864.l,X		; FF 64 08 00 ; Subtract with carry (long,X) $000864.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000864.l,X		; FF 64 08 00 ; Subtract with carry (long,X) $000864.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $64FFE7.l,X		; FF E7 FF 64 ; Subtract with carry (long,X) $64FFE7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $DAFF.w		; EE FF DA ; Increment $DAFF.w [Flags: ZN]
	sbc $000844.l,X		; FF 44 08 00 ; Subtract with carry (long,X) $000844.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000865.l,X		; FF 65 08 00 ; Subtract with carry (long,X) $000865.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F5.b		; 00 F5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000865.l,X		; FF 65 08 00 ; Subtract with carry (long,X) $000865.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EE.b		; 00 EE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000865.l,X		; FF 65 08 00 ; Subtract with carry (long,X) $000865.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000865.l,X		; FF 65 08 00 ; Subtract with carry (long,X) $000865.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $62FFD8.l,X		; FF D8 FF 62 ; Subtract with carry (long,X) $62FFD8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $64FFF7.l,X		; FF F7 FF 64 ; Subtract with carry (long,X) $64FFF7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F2FF.w,X		; FD FF F2 ; Subtract with carry $F2FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $004864.l,X		; FF 64 48 00 ; Subtract with carry (long,X) $004864.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004864.l,X		; FF 64 48 00 ; Subtract with carry (long,X) $004864.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E6.b		; 00 E6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004864.l,X		; FF 64 48 00 ; Subtract with carry (long,X) $004864.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DB.b		; 00 DB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004844.l,X		; FF 44 48 00 ; Subtract with carry (long,X) $004844.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F6.b		; 02 F6 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $74FFEC.l,X		; FF EC FF 74 ; Subtract with carry (long,X) $74FFEC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $ECFF.w,X		; FD FF EC ; Subtract with carry $ECFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $004874.l,X		; FF 74 48 00 ; Subtract with carry (long,X) $004874.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004874.l,X		; FF 74 48 00 ; Subtract with carry (long,X) $004874.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004874.l,X		; FF 74 48 00 ; Subtract with carry (long,X) $004874.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E9.b		; 00 E9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004860.l,X		; FF 60 48 00 ; Subtract with carry (long,X) $004860.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F6.b		; 02 F6 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $64FFE2.l,X		; FF E2 FF 64 ; Subtract with carry (long,X) $64FFE2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($E8FF.w,X)		; FC FF E8 ; Jump to subroutine indirect indexed ($E8FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $00C864.l,X		; FF 64 C8 00 ; Subtract with carry (long,X) $00C864.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EE.b		; 00 EE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00C864.l,X		; FF 64 C8 00 ; Subtract with carry (long,X) $00C864.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00C864.l,X		; FF 64 C8 00 ; Subtract with carry (long,X) $00C864.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00C844.l,X		; FF 44 C8 00 ; Subtract with carry (long,X) $00C844.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $008865.l,X		; FF 65 88 00 ; Subtract with carry (long,X) $008865.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $008865.l,X		; FF 65 88 00 ; Subtract with carry (long,X) $008865.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EE.b		; 00 EE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $008865.l,X		; FF 65 88 00 ; Subtract with carry (long,X) $008865.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F5.b		; 00 F5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $008865.l,X		; FF 65 88 00 ; Subtract with carry (long,X) $008865.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $62FFFB.l,X		; FF FB FF 62 ; Subtract with carry (long,X) $62FFFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $E200.w		; 0D 00 E2 ; Logical OR $E200.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $008864.l,X		; FF 64 88 00 ; Subtract with carry (long,X) $008864.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $008864.l,X		; FF 64 88 00 ; Subtract with carry (long,X) $008864.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $008864.l,X		; FF 64 88 00 ; Subtract with carry (long,X) $008864.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $64FFF3.l,X		; FF F3 FF 64 ; Subtract with carry (long,X) $64FFF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $00,$88		; 44 88 00 ; Move block positive $00,$88 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $0E.b		; 02 0E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000874.l,X		; FF 74 08 00 ; Subtract with carry (long,X) $000874.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000874.l,X		; FF 74 08 00 ; Subtract with carry (long,X) $000874.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000874.l,X		; FF 74 08 00 ; Subtract with carry (long,X) $000874.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $74FFEC.l,X		; FF EC FF 74 ; Subtract with carry (long,X) $74FFEC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $60FFE9.l,X		; FF E9 FF 60 ; Subtract with carry (long,X) $60FFE9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $E200.w		; 0D 00 E2 ; Logical OR $E200.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $008864.l,X		; FF 64 88 00 ; Subtract with carry (long,X) $008864.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $008864.l,X		; FF 64 88 00 ; Subtract with carry (long,X) $008864.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $008864.l,X		; FF 64 88 00 ; Subtract with carry (long,X) $008864.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $64FFF3.l,X		; FF F3 FF 64 ; Subtract with carry (long,X) $64FFF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $00,$88		; 44 88 00 ; Move block positive $00,$88 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $F6.b		; 02 F6 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $64FFE2.l,X		; FF E2 FF 64 ; Subtract with carry (long,X) $64FFE2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($E8FF.w,X)		; FC FF E8 ; Jump to subroutine indirect indexed ($E8FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $00C864.l,X		; FF 64 C8 00 ; Subtract with carry (long,X) $00C864.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $64FFE8.l,X		; FF E8 FF 64 ; Subtract with carry (long,X) $64FFE8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($E8FF.w,X)		; FC FF E8 ; Jump to subroutine indirect indexed ($E8FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $00C864.l,X		; FF 64 C8 00 ; Subtract with carry (long,X) $00C864.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $64FFE8.l,X		; FF E8 FF 64 ; Subtract with carry (long,X) $64FFE8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $100000.l,X		; FF 00 00 10 ; Subtract with carry (long,X) $100000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $040004.l,X		; FF 04 00 04 ; Subtract with carry (long,X) $040004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $00		; 42 00 ; Reserved instruction
	brk $42.b		; 00 42 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $82, $80, $A0		; 82 80 A0 ; Branch always long to $82, $80, $A0 [Flow: branch]
	ldy #$80.b		; A0 80 ; Load #$80.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $82, $00, $00		; 82 00 00 ; Branch always long to $82, $00, $00 [Flow: branch]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	sbc $0AFF.w,X		; FD FF 0A ; Subtract with carry $0AFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	jsr $E9AD.w		; 20 AD E9 ; Jump to subroutine at $E9AD.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $F7		; 30 F7 ; Branch if minus to $30, $F7 [Flow: branch]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$13.b		; C9 13 ; Compare #$13.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $0F10.w,X		; BD 10 0F ; Load $0F10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda $04C5.w		; AD C5 04 ; Load $04C5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $E6		; F0 E6 ; Branch if equal to $F0, $E6 [Flow: branch]
	jsr $9C1C.w		; 20 1C 9C ; Jump to subroutine at $9C1C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E9AD.w		; 20 AD E9 ; Jump to subroutine at $E9AD.w [Writes: Stack Pointer] [Flow: call]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	ldy #$14.b		; A0 14 ; Load #$14.b into Y register [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $95CE.w,X		; 7D CE 95 ; Add $95CE.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $969A.w,X		; 7D 9A 96 ; Add $969A.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $9766.w,X		; BD 66 97 ; Load $9766.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $9843.w,X		; BD 43 98 ; Load $9843.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$0C.b		; E0 0C ; Compare #$0C.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $C0		; D0 C0 ; Branch if not equal to $D0, $C0 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ldy $0DC0.w,X		; BC C0 0D ; Load Y register $0DC0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $9832.w,Y		; B9 32 98 ; Load $9832.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $3A		; F0 3A ; Branch if equal to $F0, $3A [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$14.b		; 69 14 ; Add #$14.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $9AB3.w,X		; BD B3 9A ; Load $9AB3.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $9ABF.w,X		; 1D BF 9A ; OR accumulator with memory $9ABF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $9AB4.w,X		; BD B4 9A ; Load $9AB4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $9AC0.w,X		; 1D C0 9A ; OR accumulator with memory $9AC0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06FEB4.l		; 22 B4 FE 06 ; Jump to subroutine long $06FEB4.l [Writes: Stack Pointer] [Flow: call]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$9ACB.w		; A9 CB 9A ; Load #$9ACB.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$0828.w		; A9 28 08 ; Load #$0828.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	lda #$0A2A.w		; A9 2A 0A ; Load #$0A2A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8549.w		; 20 49 85 ; Jump to subroutine at $8549.w [Writes: Stack Pointer] [Flow: call]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$01.b		; E9 01 ; Subtract #$01.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cpy #$04.b		; C0 04 ; Compare #$04.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $D180.w,Y		; B9 80 D1 ; Load $D180.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $01.b		; 64 01 ; Store zero to $01.b
.ACCU 16
	rep #$20		; C2 20
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0E.b		; 65 0E ; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0FDA.w		; 8D DA 0F ; Store accumulator to $0FDA.w [Reads: Accumulator]
	lda #$09F4.w		; A9 F4 09 ; Load #$09F4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	lda #$0A9D.w		; A9 9D 0A ; Load #$0A9D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
	lda #$D108.w		; A9 08 D1 ; Load #$D108.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $0F50.w,X		; 9E 50 0F ; Store zero to $0F50.w,X [Reads: X Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8549.w		; 20 49 85 ; Jump to subroutine at $8549.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $55		; F0 55 ; Branch if equal to $F0, $55 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$990F.w		; 69 0F 99 ; Add #$990F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9A9F.w,Y		; 79 9F 9A ; Add $9A9F.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0FD8.w		; 8D D8 0F ; Store accumulator to $0FD8.w [Reads: Accumulator]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9AA9.w,Y		; 79 A9 9A ; Add $9AA9.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0FDA.w		; 8D DA 0F ; Store accumulator to $0FDA.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0B89.w,X		; BD 89 0B ; Load $0B89.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8549.w		; 20 49 85 ; Jump to subroutine at $8549.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $80, $A0		; 80 A0 ; Branch always to $80, $A0 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $9C7A.w,X		; BD 7A 9C ; Load $9C7A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0D10.w,Y		; B9 10 0D ; Load $0D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFA5C.l,X		; 9F 5C FA 7F ; Store accumulator (long,X) $7FFA5C.l,X [Reads: Accumulator, X Index]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFB1C.l,X		; 9F 1C FB 7F ; Store accumulator (long,X) $7FFB1C.l,X [Reads: Accumulator, X Index]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFBDC.l,X		; 9F DC FB 7F ; Store accumulator (long,X) $7FFBDC.l,X [Reads: Accumulator, X Index]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFC9C.l,X		; 9F 9C FC 7F ; Store accumulator (long,X) $7FFC9C.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $DF		; 10 DF ; Branch if plus to $10, $DF [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $BD		; F0 BD ; Branch if equal to $F0, $BD [Flow: branch]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	jmp $9ECE.w		; 4C CE 9E ; Jump to $9ECE.w [Flow: jump]
	jsr $9F64.w		; 20 64 9F ; Jump to subroutine at $9F64.w [Writes: Stack Pointer] [Flow: call]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	jsr $C211.w		; 20 11 C2 ; Jump to subroutine at $C211.w [Writes: Stack Pointer] [Flow: call]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0F80.w,X		; 7D 80 0F ; Add $0F80.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	ora $679D.w,Y		; 19 9D 67 ; OR accumulator with memory $679D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $9DA7.w,X		; 9D A7 9D ; Store accumulator to $9DA7.w,X [Reads: Accumulator, X Index]
	and ($9E.b)		; 32 9E ; AND accumulator with memory (indirect) ($9E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $62, $9E, $00		; 62 9E 00 ; Push effective relative address $62, $9E, $00 [Writes: Stack Pointer]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0020.w		; 20 20 00 ; Jump to subroutine at $0020.w [Writes: Stack Pointer] [Flow: call]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E000FF.l,X		; FF FF 00 E0 ; Subtract with carry (long,X) $E000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: ZNC]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $030201.l,X		; FF 01 02 03 ; Subtract with carry (long,X) $030201.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $48		; D0 48 ; Branch if not equal to $D0, $48 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9D11.w,Y		; B9 11 9D ; Load $9D11.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $0DE0.w,X		; DD E0 0D ; Compare accumulator $0DE0.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $39		; F0 39 ; Branch if equal to $F0, $39 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9CED.w,Y		; 79 ED 9C ; Add $9CED.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $7FFD5C.l,X		; 9F 5C FD 7F ; Store accumulator (long,X) $7FFD5C.l,X [Reads: Accumulator, X Index]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $9CF6.w,Y		; 79 F6 9C ; Add $9CF6.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $7FFD62.l,X		; 9F 62 FD 7F ; Store accumulator (long,X) $7FFD62.l,X [Reads: Accumulator, X Index]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9CFF.w,Y		; 79 FF 9C ; Add $9CFF.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $7FFD68.l,X		; 9F 68 FD 7F ; Store accumulator (long,X) $7FFD68.l,X [Reads: Accumulator, X Index]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $9D08.w,Y		; 79 08 9D ; Add $9D08.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $7FFD6E.l,X		; 9F 6E FD 7F ; Store accumulator (long,X) $7FFD6E.l,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	jsr $C39B.w		; 20 9B C3 ; Jump to subroutine at $C39B.w [Writes: Stack Pointer] [Flow: call]
	lda #$F1.b		; A9 F1 ; Load #$F1.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	jsr $9EAA.w		; 20 AA 9E ; Jump to subroutine at $9EAA.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	inc $0F80.w,X		; FE 80 0F ; Increment memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $25		; D0 25 ; Branch if not equal to $D0, $25 [Flow: branch]
	jsr $9E13.w		; 20 13 9E ; Jump to subroutine at $9E13.w [Writes: Stack Pointer] [Flow: call]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	inc $0D40.w,X		; FE 40 0D ; Increment memory $0D40.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	dec $0D40.w,X		; DE 40 0D ; Decrement memory $0D40.w,X [Reads: X Index] [Flags: ZN]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $01.b		; C5 01 ; Compare $01.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	inc $0D50.w,X		; FE 50 0D ; Increment memory $0D50.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	dec $0D50.w,X		; DE 50 0D ; Decrement memory $0D50.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $BDF4.w		; 0C F4 BD ; Test and set bits $BDF4.w [Reads: Accumulator] [Flags: Z]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F80.w,X		; BD 80 0F ; Load $0F80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9DA3.w,Y		; 79 A3 9D ; Add $9DA3.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	cmp $9DA5.w,Y		; D9 A5 9D ; Compare accumulator $9DA5.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0ED0.w,X		; FE D0 0E ; Increment memory $0ED0.w,X [Reads: X Index] [Flags: ZN]
	lda $7FFD5C.l,X		; BF 5C FD 7F ; Load long $7FFD5C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $7FFD62.l,X		; BF 62 FD 7F ; Load long $7FFD62.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $7FFD68.l,X		; BF 68 FD 7F ; Load long $7FFD68.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $7FFD6E.l,X		; BF 6E FD 7F ; Load long $7FFD6E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $04.b		; E5 04 ; Subtract $04.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0010.w		; C9 10 00 ; Compare #$0010.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $14		; B0 14 ; Branch if carry set to $B0, $14 [Flow: branch]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $06.b		; E5 06 ; Subtract $06.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0010.w		; C9 10 00 ; Compare #$0010.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	jsr $9E13.w		; 20 13 9E ; Jump to subroutine at $9E13.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7FFD5C.l,X		; BF 5C FD 7F ; Load long $7FFD5C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $7FFD62.l,X		; BF 62 FD 7F ; Load long $7FFD62.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $7FFD68.l,X		; BF 68 FD 7F ; Load long $7FFD68.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $7FFD6E.l,X		; BF 6E FD 7F ; Load long $7FFD6E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA22.l		; 22 22 EA 06 ; Jump to subroutine long $06EA22.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	inc $0F80.w,X		; FE 80 0F ; Increment memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	lda $0F80.w,X		; BD 80 0F ; Load $0F80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	jsr $9EAA.w		; 20 AA 9E ; Jump to subroutine at $9EAA.w [Writes: Stack Pointer] [Flow: call]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	lda #$50.b		; A9 50 ; Load #$50.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $0E80.w,X		; [PATTERN: Memory clearing operation] BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	stz $00.b		; 64 00 ; Store zero to $00.b
	stz $01.b		; 64 01 ; Store zero to $01.b
	jsr $9D80.w		; 20 80 9D ; Jump to subroutine at $9D80.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $42		; D0 42 ; Branch if not equal to $D0, $42 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9D11.w,Y		; B9 11 9D ; Load $9D11.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9CED.w,Y		; 79 ED 9C ; Add $9CED.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $9CF6.w,Y		; 79 F6 9C ; Add $9CF6.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9CFF.w,Y		; 79 FF 9C ; Add $9CFF.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $9D08.w,Y		; 79 08 9D ; Add $9D08.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	stz $0D80.w,X		; [PATTERN: Memory clearing operation] 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	jsr $C39B.w		; 20 9B C3 ; Jump to subroutine at $C39B.w [Writes: Stack Pointer] [Flow: call]
	stz $0F80.w,X		; 9E 80 0F ; Store zero to $0F80.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$CF.b		; A9 CF ; Load #$CF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $1B		; 30 1B ; Branch if minus to $30, $1B [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,Y		; 99 80 0D ; Store accumulator to $0D80.w,Y [Reads: Accumulator, Y Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $9F1D.w		; 20 1D 9F ; Jump to subroutine at $9F1D.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cld		; D8 ; Clear decimal flag [Flags: D]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D8.b		; 00 D8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cmp $0000.w,Y		; D9 00 00 ; Compare accumulator $0000.w,Y [Reads: Y Index] [Flags: ZNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D9.b		; 00 D9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DA.b		; 00 DA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cmp $0000.w,Y		; D9 00 00 ; Compare accumulator $0000.w,Y [Reads: Y Index] [Flags: ZNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D9.b		; 00 D9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBA84.l		; 22 84 BA 0D ; Jump to subroutine long $0DBA84.l [Writes: Stack Pointer] [Flow: call]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$9EDD.w		; 69 DD 9E ; Add #$9EDD.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8549.w		; 4C 49 85 ; Jump to $8549.w [Flow: jump]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $16		; 10 16 ; Branch if plus to $10, $16 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0F80.w,X		; 7D 80 0F ; Add $0F80.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	jsl $1DF614.l		; 22 14 F6 1D ; Jump to subroutine long $1DF614.l [Writes: Stack Pointer] [Flow: call]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9F40.w,Y		; B9 40 9F ; Load $9F40.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $9F50.w,Y		; 19 50 9F ; OR accumulator with memory $9F50.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsl $06DBF0.l		; 22 F0 DB 06 ; Jump to subroutine long $06DBF0.l [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9C7A.w,X		; 7D 7A 9C ; Add $9C7A.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0D10.w,Y		; B9 10 0D ; Load $0D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFA5C.l,X		; 9F 5C FA 7F ; Store accumulator (long,X) $7FFA5C.l,X [Reads: Accumulator, X Index]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFB1C.l,X		; 9F 1C FB 7F ; Store accumulator (long,X) $7FFB1C.l,X [Reads: Accumulator, X Index]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFBDC.l,X		; 9F DC FB 7F ; Store accumulator (long,X) $7FFBDC.l,X [Reads: Accumulator, X Index]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFC9C.l,X		; 9F 9C FC 7F ; Store accumulator (long,X) $7FFC9C.l,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $0D40.w,X		; BC 40 0D ; Load Y register $0D40.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	lda #$0014.w		; A9 14 00 ; Load #$0014.w into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $90.b		; 65 90 ; Add $90.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $92.b		; 65 92 ; Add $92.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FB6.w		; 8D B6 0F ; Store accumulator to $0FB6.w [Reads: Accumulator]
	ldy $0FB6.w		; AC B6 0F ; Load $0FB6.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $9F60.w,Y		; B9 60 9F ; Load $9F60.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $9F3C.w,Y		; F9 3C 9F ; Subtract with carry $9F3C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9C7A.w,X		; 7D 7A 9C ; Add $9C7A.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7FFA5C.l,X		; BF 5C FA 7F ; Load long $7FFA5C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FD8.w		; 8D D8 0F ; Store accumulator to $0FD8.w [Reads: Accumulator]
	lda $7FFB1C.l,X		; BF 1C FB 7F ; Load long $7FFB1C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FD9.w		; 8D D9 0F ; Store accumulator to $0FD9.w [Reads: Accumulator]
	lda $7FFBDC.l,X		; BF DC FB 7F ; Load long $7FFBDC.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FDA.w		; 8D DA 0F ; Store accumulator to $0FDA.w [Reads: Accumulator]
	lda $7FFC9C.l,X		; BF 9C FC 7F ; Load long $7FFC9C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FDB.w		; 8D DB 0F ; Store accumulator to $0FDB.w [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $0E		; 10 0E ; Branch if plus to $10, $0E [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $90.b		; A5 90 ; Load $90.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0004.w		; E9 04 00 ; Subtract #$0004.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	dec $92.b		; C6 92 ; Decrement $92.b [Reads: Direct Page] [Flags: ZN]
	.db $80, $0C		; 80 0C ; Branch always to $80, $0C [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $90.b		; A5 90 ; Load $90.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	inc $92.b		; E6 92 ; Increment $92.b [Reads: Direct Page] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	jsl $06DBF0.l		; 22 F0 DB 06 ; Jump to subroutine long $06DBF0.l [Writes: Stack Pointer] [Flow: call]
	inc $0FB6.w		; EE B6 0F ; Increment $0FB6.w [Flags: ZN]
	lda $0FB6.w		; AD B6 0F ; Load $0FB6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $9C		; D0 9C ; Branch if not equal to $D0, $9C [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	lda #$CE.b		; A9 CE ; Load #$CE.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	jsl $0DB818.l		; 22 18 B8 0D ; Jump to subroutine long $0DB818.l [Writes: Stack Pointer] [Flow: call]
	lda #$C0.b		; A9 C0 ; Load #$C0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E10.w,X		; 9D 10 0E ; Store accumulator to $0E10.w,X [Reads: Accumulator, X Index]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	sta $0BA0.w,X		; 9D A0 0B ; Store accumulator to $0BA0.w,X [Reads: Accumulator, X Index]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0403.w		; 8D 03 04 ; Store accumulator to $0403.w [Reads: Accumulator]
	stz $0B69.w		; 9C 69 0B ; Store zero to $0B69.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $24		; F0 24 ; Branch if equal to $F0, $24 [Flow: branch]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E10.w,X		; 9D 10 0E ; Store accumulator to $0E10.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	lda #$07.b		; [PATTERN: Memory clearing operation] A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	stz $0B69.w		; 9C 69 0B ; Store zero to $0B69.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $57		; D0 57 ; Branch if not equal to $D0, $57 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldx #$1D.b		; A2 1D ; Load #$1D.b into X register [Writes: X Index] [Flags: ZN]
	lda $7FF800.l,X		; BF 00 F8 7F ; Load long $7FF800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F7		; 10 F7 ; Branch if plus to $10, $F7 [Flow: branch]
	dec $0FF8.w		; CE F8 0F ; Decrement $0FF8.w [Flags: ZN]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	lda #$1D.b		; A9 1D ; Load #$1D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FF8.w		; 8D F8 0F ; Store accumulator to $0FF8.w [Reads: Accumulator]
	ldx $0FF8.w		; AE F8 0F ; Load $0FF8.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF800.l,X		; 9F 00 F8 7F ; Store accumulator (long,X) $7FF800.l,X [Reads: Accumulator, X Index]
	sta $0FB4.w		; 8D B4 0F ; Store accumulator to $0FB4.w [Reads: Accumulator]
	lda $0DC0.w,Y		; B9 C0 0D ; Load $0DC0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FF9FE.l,X		; 9F FE F9 7F ; Store accumulator (long,X) $7FF9FE.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FF92C.l,X		; 9F 2C F9 7F ; Store accumulator (long,X) $7FF92C.l,X [Reads: Accumulator, X Index]
	lda $0D10.w,Y		; B9 10 0D ; Load $0D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FF83C.l,X		; 9F 3C F8 7F ; Store accumulator (long,X) $7FF83C.l,X [Reads: Accumulator, X Index]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FF878.l,X		; 9F 78 F8 7F ; Store accumulator (long,X) $7FF878.l,X [Reads: Accumulator, X Index]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF81E.l,X		; 9F 1E F8 7F ; Store accumulator (long,X) $7FF81E.l,X [Reads: Accumulator, X Index]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF85A.l,X		; 9F 5A F8 7F ; Store accumulator (long,X) $7FF85A.l,X [Reads: Accumulator, X Index]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF90E.l,X		; 9F 0E F9 7F ; Store accumulator (long,X) $7FF90E.l,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $98E0.w		; 20 E0 98 ; Jump to subroutine at $98E0.w [Writes: Stack Pointer] [Flow: call]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	clc		; 18 ; Clear carry flag [Flags: C]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $B0, $50		; B0 50 ; Branch if carry set to $B0, $50 [Flow: branch]
	lda $0B89.w,X		; BD 89 0B ; Load $0B89.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$30.b		; 09 30 ; Logical OR #$30.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	jsl $06DBF0.l		; 22 F0 DB 06 ; Jump to subroutine long $06DBF0.l [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $AC4C.w,X		; BD 4C AC ; Load $AC4C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $AC5C.w,X		; 1D 5C AC ; OR accumulator with memory $AC5C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $0EA0.w,X		; BD A0 0E ; Load $0EA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0E.b		; C9 0E ; Compare #$0E.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EA0.w,X		; 9D A0 0E ; Store accumulator to $0EA0.w,X [Reads: Accumulator, X Index]
	jsr $E8C5.w		; 20 C5 E8 ; Jump to subroutine at $E8C5.w [Writes: Stack Pointer] [Flow: call]
	dec $0E30.w,X		; DE 30 0E ; Decrement memory $0E30.w,X [Reads: X Index] [Flags: ZN]
	.db $10, $0E		; 10 0E ; Branch if plus to $10, $0E [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E30.w,X		; 9D 30 0E ; Store accumulator to $0E30.w,X [Reads: Accumulator, X Index]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $A1EC.w		; 4C EC A1 ; Jump to $A1EC.w [Flow: jump]
	jsr $C211.w		; 20 11 C2 ; Jump to subroutine at $C211.w [Writes: Stack Pointer] [Flow: call]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $A49D.w		; 20 9D A4 ; Jump to subroutine at $A49D.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $1C		; 30 1C ; Branch if minus to $30, $1C [Flow: branch]
	dec $0F90.w,X		; DE 90 0F ; Decrement memory $0F90.w,X [Reads: X Index] [Flags: ZN]
	.db $10, $17		; 10 17 ; Branch if plus to $10, $17 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F90.w,X		; 9D 90 0F ; Store accumulator to $0F90.w,X [Reads: Accumulator, X Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA1A.l		; 22 1A EA 06 ; Jump to subroutine long $06EA1A.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $A110.w,Y		; D9 10 A1 ; Compare accumulator $A110.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8000.w,Y		; 79 00 80 ; Add $8000.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $A112.w,Y		; D9 12 A1 ; Compare accumulator $A112.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0ED0.w,X		; FE D0 0E ; Increment memory $0ED0.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda $0EC0.w,X		; BD C0 0E ; Load $0EC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $A114.w,Y		; D9 14 A1 ; Compare accumulator $A114.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8000.w,Y		; 79 00 80 ; Add $8000.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $A116.w,Y		; D9 16 A1 ; Compare accumulator $A116.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0EC0.w,X		; FE C0 0E ; Increment memory $0EC0.w,X [Reads: X Index] [Flags: ZN]
	lda $0EA0.w,X		; BD A0 0E ; Load $0EA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$CE.b		; A9 CE ; Load #$CE.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $46		; 30 46 ; Branch if minus to $30, $46 [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda #$5B.b		; A9 5B ; Load #$5B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,Y		; 99 60 0E ; Store accumulator to $0E60.w,Y [Reads: Accumulator, Y Index]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CAA.w,Y		; 99 AA 0C ; Store accumulator to $0CAA.w,Y [Reads: Accumulator, Y Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,Y		; 99 90 0D ; Store accumulator to $0D90.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0F60.w,Y		; 99 60 0F ; Store accumulator to $0F60.w,Y [Reads: Accumulator, Y Index]
	sta $0B6B.w,Y		; 99 6B 0B ; Store accumulator to $0B6B.w,Y [Reads: Accumulator, Y Index]
	lda #$17.b		; A9 17 ; Load #$17.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,Y		; 99 70 0F ; Store accumulator to $0F70.w,Y [Reads: Accumulator, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0ED0.w,Y		; 99 D0 0E ; Store accumulator to $0ED0.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EC0.w,Y		; 99 C0 0E ; Store accumulator to $0EC0.w,Y [Reads: Accumulator, Y Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$08.b]		; 07 08 ; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	trb $13.b		; 14 13 ; Test and reset bits $13.b [Reads: Accumulator] [Flags: Z]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	ora $0D90BD.l		; 0F BD 90 0D ; OR accumulator with memory (long) $0D90BD.l [Writes: Accumulator] [Flags: ZN]
	.db $10, $63		; 10 63 ; Branch if plus to $10, $63 [Flow: branch]
	ldy $0EB0.w,X		; BC B0 0E ; Load Y register $0EB0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $A23C.w,Y		; B9 3C A2 ; Load $A23C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $A24C.w,Y		; B9 4C A2 ; Load $A24C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$03.b		; 09 03 ; Logical OR #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsl $06E416.l		; 22 16 E4 06 ; Jump to subroutine long $06E416.l [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $06F129.l		; 22 29 F1 06 ; Jump to subroutine long $06F129.l [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D10.w,X		; 7D 10 0D ; Add $0D10.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $0D30.w,X		; 7D 30 0D ; Add $0D30.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D00.w,X		; 7D 00 0D ; Add $0D00.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $0D20.w,X		; 7D 20 0D ; Add $0D20.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	jsr $8094.w		; 20 94 80 ; Jump to subroutine at $8094.w [Writes: Stack Pointer] [Flow: call]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	jsr $A0B1.w		; 20 B1 A0 ; Jump to subroutine at $A0B1.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $A118.w		; 4C 18 A1 ; Jump to $A118.w [Flow: jump]
	lda $0B89.w,X		; BD 89 0B ; Load $0B89.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$30.b		; 09 30 ; Logical OR #$30.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	jsr $AC6C.w		; 20 6C AC ; Jump to subroutine at $AC6C.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $0EA0.w,X		; BD A0 0E ; Load $0EA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $73		; F0 73 ; Branch if equal to $F0, $73 [Flow: branch]
	dec $0EA0.w,X		; [PATTERN: Memory clearing operation] DE A0 0E ; Decrement memory $0EA0.w,X [Reads: X Index] [Flags: ZN]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $6C		; D0 6C ; Branch if not equal to $D0, $6C [Flow: branch]
	stz $0EF0.w,X		; 9E F0 0E ; Store zero to $0EF0.w,X [Reads: X Index]
	stz $0E70.w,X		; 9E 70 0E ; Store zero to $0E70.w,X [Reads: X Index]
	lda $0F10.w,X		; BD 10 0F ; Load $0F10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $61		; D0 61 ; Branch if not equal to $D0, $61 [Flow: branch]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F10.w,X		; 9D 10 0F ; Store accumulator to $0F10.w,X [Reads: Accumulator, X Index]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	inc $0F90.w,X		; FE 90 0F ; Increment memory $0F90.w,X [Reads: X Index] [Flags: ZN]
	lda $0F90.w,X		; BD 90 0F ; Load $0F90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E70.w,X		; 9D 70 0E ; Store accumulator to $0E70.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E30.w,X		; 9D 30 0E ; Store accumulator to $0E30.w,X [Reads: Accumulator, X Index]
	.db $80, $39		; 80 39 ; Branch always to $80, $39 [Flow: branch]
	stz $0F90.w,X		; 9E 90 0F ; Store zero to $0F90.w,X [Reads: X Index]
	inc $0B6A.w		; EE 6A 0B ; Increment $0B6A.w [Flags: ZN]
	lda $0B6A.w		; AD 6A 0B ; Load $0B6A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	jsl $09EF56.l		; 22 56 EF 09 ; Jump to subroutine long $09EF56.l [Writes: Stack Pointer] [Flow: call]
	jsr $DC16.w		; 20 16 DC ; Jump to subroutine at $DC16.w [Writes: Stack Pointer] [Flow: call]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	sta $0EF0.w,X		; 9D F0 0E ; Store accumulator to $0EF0.w,X [Reads: Accumulator, X Index]
	inc $0FFC.w		; EE FC 0F ; Increment $0FFC.w [Flags: ZN]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $C39B.w		; 20 9B C3 ; Jump to subroutine at $C39B.w [Writes: Stack Pointer] [Flow: call]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E10.w,X		; 9D 10 0E ; Store accumulator to $0E10.w,X [Reads: Accumulator, X Index]
	sta $0BA0.w,X		; 9D A0 0B ; Store accumulator to $0BA0.w,X [Reads: Accumulator, X Index]
	jsr $A1ED.w		; 20 ED A1 ; Jump to subroutine at $A1ED.w [Writes: Stack Pointer] [Flow: call]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $A25C.w,Y		; B9 5C A2 ; Load $A25C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0DF0.w,X		; FE F0 0D ; Increment memory $0DF0.w,X [Reads: X Index] [Flags: ZN]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $A765.w		; 20 65 A7 ; Jump to subroutine at $A765.w [Writes: Stack Pointer] [Flow: call]
	jmp $A6C0.w		; 4C C0 A6 ; Jump to $A6C0.w [Flow: jump]
	inc $0B69.w		; EE 69 0B ; Increment $0B69.w [Flags: ZN]
	lda $0B58.w,X		; BD 58 0B ; Load $0B58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B58.w,X		; 9D 58 0B ; Store accumulator to $0B58.w,X [Reads: Accumulator, X Index]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	dec $0B58.w,X		; DE 58 0B ; Decrement memory $0B58.w,X [Reads: X Index] [Flags: ZN]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	dec $A4.b		; C6 A4 ; Decrement $A4.b [Reads: Direct Page] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $6D.b		; A5 6D ; Load $6D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $67.b		; A6 67 ; Load $67.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $65.b		; A6 65 ; Load $65.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldy $D8.b		; A4 D8 ; Load $D8.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $10.b,S		; A3 10 ; Load accumulator (stack relative) $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ora $0A0C.w		; 0D 0C 0A ; Logical OR $0A0C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	stz $0EF0.w,X		; 9E F0 0E ; Store zero to $0EF0.w,X [Reads: X Index]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	lda $0E10.w,X		; BD 10 0E ; Load $0E10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	inc $0DB0.w,X		; FE B0 0D ; Increment memory $0DB0.w,X [Reads: X Index] [Flags: ZN]
	lda #$27.b		; A9 27 ; Load #$27.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E10.w,X		; 9D 10 0E ; Store accumulator to $0E10.w,X [Reads: Accumulator, X Index]
	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB6E.l		; 22 6E BB 0D ; Jump to subroutine long $0DBB6E.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	sbc #$E0.b		; E9 E0 ; Subtract #$E0.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $A3D4.w,Y		; B9 D4 A3 ; Load $A3D4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0E0D.w		; 0C 0D 0E ; Test and set bits $0E0D.w [Reads: Accumulator] [Flags: Z]
	lda $0E10.w,X		; BD 10 0E ; Load $0E10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $25		; D0 25 ; Branch if not equal to $D0, $25 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0ED0.w,X		; 9D D0 0E ; Store accumulator to $0ED0.w,X [Reads: Accumulator, X Index]
	jsr $C39B.w		; 20 9B C3 ; Jump to subroutine at $C39B.w [Writes: Stack Pointer] [Flow: call]
	stz $0BA0.w,X		; 9E A0 0B ; Store zero to $0BA0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $A40B.w,Y		; B9 0B A4 ; Load $A40B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpx #$E4.b		; E0 E4 ; Compare #$E4.b with X register [Reads: X Index] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	trb $1C20.w		; 1C 20 1C ; Test and reset bits $1C20.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $F0, $E8		; F0 E8 ; Branch if equal to $F0, $E8 [Flow: branch]
	cpx $00.b		; E4 00 ; Compare $00.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	trb $1C20.w		; 1C 20 1C ; Test and reset bits $1C20.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $F0, $E8		; F0 E8 ; Branch if equal to $F0, $E8 [Flow: branch]
	cpx $E0.b		; E4 E0 ; Compare $E0.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $E8.b		; E4 E8 ; Compare $E8.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $F0, $DE		; F0 DE ; Branch if equal to $F0, $DE [Flow: branch]
	.db $70, $0E		; 70 0E ; Branch if overflow set to $70, $0E [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
	dec $0E90.w,X		; DE 90 0E ; Decrement memory $0E90.w,X [Reads: X Index] [Flags: ZN]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	lda $0E30.w,X		; BD 30 0E ; Load $0E30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E90.w,X		; 9D 90 0E ; Store accumulator to $0E90.w,X [Reads: Accumulator, X Index]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $0E30.w,X		; BD 30 0E ; Load $0E30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	inc $0E30.w,X		; FE 30 0E ; Increment memory $0E30.w,X [Reads: X Index] [Flags: ZN]
	jsr $A729.w		; 20 29 A7 ; Jump to subroutine at $A729.w [Writes: Stack Pointer] [Flow: call]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: ZN]
	and $0E80.w,X		; 3D 80 0E ; AND accumulator with memory $0E80.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $21		; D0 21 ; Branch if not equal to $D0, $21 [Flow: branch]
	jsl $0DDA06.l		; 22 06 DA 0D ; Jump to subroutine long $0DDA06.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $1B		; 30 1B ; Branch if minus to $30, $1B [Flow: branch]
	lda #$19.b		; A9 19 ; Load #$19.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $A445.w,X		; BD 45 A4 ; Load $A445.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda $A455.w,X		; BD 55 A4 ; Load $A455.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	jsr $C845.w		; 20 45 C8 ; Jump to subroutine at $C845.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AE8.w		; 8D E8 0A ; Store accumulator to $0AE8.w [Reads: Accumulator]
	lda #$A0.b		; A9 A0 ; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AEA.w		; 8D EA 0A ; Store accumulator to $0AEA.w [Reads: Accumulator]
	lda $0E10.w,X		; BD 10 0E ; Load $0E10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	inc $0DB0.w,X		; FE B0 0D ; Increment memory $0DB0.w,X [Reads: X Index] [Flags: ZN]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E10.w,X		; 9D 10 0E ; Store accumulator to $0E10.w,X [Reads: Accumulator, X Index]
	cmp #$50.b		; C9 50 ; Compare #$50.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$23.b		; A9 23 ; Load #$23.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF1.w		; 8D F1 1C ; Store accumulator to $1CF1.w [Reads: Accumulator]
	jsl $05FA8E.l		; 22 8E FA 05 ; Jump to subroutine long $05FA8E.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $A4F9.w		; 20 F9 A4 ; Jump to subroutine at $A4F9.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	lda #$CE.b		; A9 CE ; Load #$CE.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$28.b		; 69 28 ; Add #$28.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,Y		; 99 C0 0D ; Store accumulator to $0DC0.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,Y		; 99 90 0D ; Store accumulator to $0D90.w,Y [Reads: Accumulator, Y Index]
	lda #$2F.b		; A9 2F ; Load #$2F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $A6C0.w		; 20 C0 A6 ; Jump to subroutine at $A6C0.w [Writes: Stack Pointer] [Flow: call]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0E10.w,X		; BD 10 0E ; Load $0E10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	inc $0DB0.w,X		; FE B0 0D ; Increment memory $0DB0.w,X [Reads: X Index] [Flags: ZN]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	stz $0BA0.w,X		; 9E A0 0B ; Store zero to $0BA0.w,X [Reads: X Index]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	lda #$F8.b		; A9 F8 ; Load #$F8.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	jsr $E95D.w		; 20 5D E9 ; Jump to subroutine at $E95D.w [Writes: Stack Pointer] [Flow: call]
	jsr $A6EF.w		; 20 EF A6 ; Jump to subroutine at $A6EF.w [Writes: Stack Pointer] [Flow: call]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($EE.b)		; 12 EE ; OR accumulator with memory (indirect) ($EE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ldy $4C.b		; A4 4C ; Load $4C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	jsr $A6C0.w		; 20 C0 A6 ; Jump to subroutine at $A6C0.w [Writes: Stack Pointer] [Flow: call]
	jsr $A6EF.w		; 20 EF A6 ; Jump to subroutine at $A6EF.w [Writes: Stack Pointer] [Flow: call]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	jsr $E89D.w		; 20 9D E8 ; Jump to subroutine at $E89D.w [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $0DE0.w,X		; DD E0 0D ; Compare accumulator $0DE0.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$78.b		; C9 78 ; Compare #$78.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $19		; B0 19 ; Branch if carry set to $B0, $19 [Flow: branch]
	inc $0DB0.w,X		; FE B0 0D ; Increment memory $0DB0.w,X [Reads: X Index] [Flags: ZN]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E10.w,X		; 9D 10 0E ; Store accumulator to $0E10.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8000.w,Y		; 79 00 80 ; Add $8000.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	cmp $A567.w,Y		; D9 67 A5 ; Compare accumulator $A567.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0DA0.w,X		; FE A0 0D ; Increment memory $0DA0.w,X [Reads: X Index] [Flags: ZN]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $A569.w,Y		; D9 69 A5 ; Compare accumulator $A569.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8000.w,Y		; 79 00 80 ; Add $8000.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $A56B.w,Y		; D9 6B A5 ; Compare accumulator $A56B.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0ED0.w,X		; FE D0 0E ; Increment memory $0ED0.w,X [Reads: X Index] [Flags: ZN]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $A465.w		; 4C 65 A4 ; Jump to $A465.w [Flow: jump]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	jsl $05C66E.l		; 22 6E C6 05 ; Jump to subroutine long $05C66E.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cpy #$90.b		; C0 90 ; Compare #$90.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	cpy #$A6.b		; C0 A6 ; Compare #$A6.b with Y register [Reads: Y Index] [Flags: ZNC]
	lda $0E10.w,X		; BD 10 0E ; Load $0E10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	jsr $A647.w		; 20 47 A6 ; Jump to subroutine at $A647.w [Writes: Stack Pointer] [Flow: call]
	jsr $E952.w		; 20 52 E9 ; Jump to subroutine at $E952.w [Writes: Stack Pointer] [Flow: call]
	jmp $A6A4.w		; 4C A4 A6 ; Jump to $A6A4.w [Flow: jump]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $A604.w,Y		; D9 04 A6 ; Compare accumulator $A604.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $A602.w,Y		; 79 02 A6 ; Add $A602.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$FC.b		; 29 FC ; Logical AND #$FC.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $A606.w,Y		; D9 06 A6 ; Compare accumulator $A606.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	inc $0DB0.w,X		; FE B0 0D ; Increment memory $0DB0.w,X [Reads: X Index] [Flags: ZN]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$01.b		; E9 01 ; Subtract #$01.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0DA0.w,X		; 9D A0 0D ; Store accumulator to $0DA0.w,X [Reads: Accumulator, X Index]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$02.b		; E9 02 ; Subtract #$02.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	jsr $A729.w		; 20 29 A7 ; Jump to subroutine at $A729.w [Writes: Stack Pointer] [Flow: call]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $A465.w		; 4C 65 A4 ; Jump to $A465.w [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $090001.l,X		; FF 01 00 09 ; Subtract with carry (long,X) $090001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $A6C0.w		; 20 C0 A6 ; Jump to subroutine at $A6C0.w [Writes: Stack Pointer] [Flow: call]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $33		; D0 33 ; Branch if not equal to $D0, $33 [Flow: branch]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $A665.w,Y		; D9 65 A6 ; Compare accumulator $A665.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	lda #$FE.b		; A9 FE ; Load #$FE.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0ED0.w,X		; 9D D0 0E ; Store accumulator to $0ED0.w,X [Reads: Accumulator, X Index]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $A663.w,Y		; 79 63 A6 ; Add $A663.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	jsr $E95D.w		; 20 5D E9 ; Jump to subroutine at $E95D.w [Writes: Stack Pointer] [Flow: call]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $A465.w		; 4C 65 A4 ; Jump to $A465.w [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0F10.w,X		; BD 10 0F ; Load $0F10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0EA0.w,X		; 1D A0 0E ; OR accumulator with memory $0EA0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $C211.w		; 20 11 C2 ; Jump to subroutine at $C211.w [Writes: Stack Pointer] [Flow: call]
	jsr $ACC8.w		; 20 C8 AC ; Jump to subroutine at $ACC8.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora [$08.b]		; 07 08 ; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0C0D.w		; 0E 0D 0C ; Arithmetic shift left $0C0D.w [Flags: ZNC]
	ora $0F0E.w		; 0D 0E 0F ; Logical OR $0F0E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $35		; D0 35 ; Branch if not equal to $D0, $35 [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $A6E7.w,Y		; B9 E7 A6 ; Load $A6E7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$03.b		; C0 03 ; Compare #$03.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0B69.w		; AD 69 0B ; Load $0B69.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $A6D7.w,Y		; B9 D7 A6 ; Load $A6D7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01.b		; 65 01 ; Add $01.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $A6CF.w,Y		; B9 CF A6 ; Load $A6CF.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($0400.w,X)		; FC 00 04 ; Jump to subroutine indirect indexed ($0400.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	jsr ($F8F8.w,X)		; FC F8 F8 ; Jump to subroutine indirect indexed ($F8F8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($F8F8.w,X)		; FC F8 F8 ; Jump to subroutine indirect indexed ($F8F8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($A900.w,X)		; FC 00 A9 ; Jump to subroutine indirect indexed ($A900.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	dec $5D22.w		; CE 22 5D ; Decrement $5D22.w [Flags: ZN]
	inc $1D.b,X		; F6 1D ; Increment memory $1D.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	.db $30, $3C		; 30 3C ; Branch if minus to $30, $3C [Flow: branch]
	jsl $0DBBA1.l		; 22 A1 BB 0D ; Jump to subroutine long $0DBBA1.l [Writes: Stack Pointer] [Flow: call]
	ora #$26.b		; 09 26 ; Logical OR #$26.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,Y		; 99 B0 0E ; Store accumulator to $0EB0.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $A745.w,X		; BD 45 A7 ; Load $A745.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda $A755.w,X		; BD 55 A7 ; Load $A755.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,Y		; 99 90 0D ; Store accumulator to $0D90.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F60.w,Y		; 99 60 0F ; Store accumulator to $0F60.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $8E0007.l,X		; FF 07 00 8E ; Subtract with carry (long,X) $8E0007.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8E.b		; 00 8E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $A00017.l,X		; FF 17 00 A0 ; Subtract with carry (long,X) $A00017.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $000A.w		; 8C 0A 00 ; Store Y register to $000A.w [Reads: Y Index]
	cop $ED.b		; 02 ED ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A60003.l,X		; FF 03 00 A6 ; Subtract with carry (long,X) $A60003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx $4A.b		; A6 4A ; Load $4A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $8E0007.l,X		; FF 07 00 8E ; Subtract with carry (long,X) $8E0007.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8E.b		; 00 8E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $A20017.l,X		; FF 17 00 A2 ; Subtract with carry (long,X) $A20017.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $000A.w		; 8C 0A 00 ; Store Y register to $000A.w [Reads: Y Index]
	cop $ED.b		; 02 ED ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A80003.l,X		; FF 03 00 A8 ; Subtract with carry (long,X) $A80003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $8E0007.l,X		; FF 07 00 8E ; Subtract with carry (long,X) $8E0007.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8E.b		; 00 8E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $A40017.l,X		; FF 17 00 A4 ; Subtract with carry (long,X) $A40017.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $000A.w		; 8C 0A 00 ; Store Y register to $000A.w [Reads: Y Index]
	cop $ED.b		; 02 ED ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AA0003.l,X		; FF 03 00 AA ; Subtract with carry (long,X) $AA0003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($FF.b),Y		; F1 FF ; Subtract with carry ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $0A.b		; A6 0A ; Load $0A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $8E0007.l,X		; FF 07 00 8E ; Subtract with carry (long,X) $8E0007.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $004C.w		; 8E 4C 00 ; Store X register to $004C.w [Reads: X Index]
	cop $FA.b		; 02 FA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A40017.l,X		; FF 17 00 A4 ; Subtract with carry (long,X) $A40017.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	ora [$00.b],Y		; 17 00 ; OR accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$4C.b		; A0 4C ; Load #$4C.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	sbc $4AA6FF.l,X		; FF FF A6 4A ; Subtract with carry (long,X) $4AA6FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $0A.b		; A6 0A ; Load $0A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($07FF.w,X)		; FC FF 07 ; Jump to subroutine indirect indexed ($07FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $8E.b		; 00 8E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $004C.w		; 8E 4C 00 ; Store X register to $004C.w [Reads: X Index]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A40017.l,X		; FF 17 00 A4 ; Subtract with carry (long,X) $A40017.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$00.b],Y		; 17 00 ; OR accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$4C.b		; A0 4C ; Load #$4C.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004AA6.l,X		; FF A6 4A 00 ; Subtract with carry (long,X) $004AA6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0800.w		; 0D 00 08 ; Logical OR $0800.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	inc $A6FF.w,X		; FE FF A6 ; Increment memory $A6FF.w,X [Reads: X Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $8E0007.l,X		; FF 07 00 8E ; Subtract with carry (long,X) $8E0007.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $004C.w		; 8E 4C 00 ; Store X register to $004C.w [Reads: X Index]
	cop $FB.b		; 02 FB ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A00017.l,X		; FF 17 00 A0 ; Subtract with carry (long,X) $A00017.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$00.b],Y		; 17 00 ; OR accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $4C.b		; A4 4C ; Load $4C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $82, $0A, $00		; 82 0A 00 ; Branch always long to $82, $0A, $00 [Flow: branch]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($FF.b),Y		; F1 FF ; Subtract with carry ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0AA6FF.l,X		; FF FF A6 0A ; Subtract with carry (long,X) $0AA6FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $8E0007.l,X		; FF 07 00 8E ; Subtract with carry (long,X) $8E0007.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $004C.w		; 8E 4C 00 ; Store X register to $004C.w [Reads: X Index]
	cop $FA.b		; 02 FA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A00017.l,X		; FF 17 00 A0 ; Subtract with carry (long,X) $A00017.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	ora [$00.b],Y		; 17 00 ; OR accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $4C.b		; A4 4C ; Load $4C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $03FF.w		; ED FF 03 ; Subtract $03FF.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx $4A.b		; A6 4A ; Load $4A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $8E0007.l,X		; FF 07 00 8E ; Subtract with carry (long,X) $8E0007.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8E.b		; 00 8E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $A00017.l,X		; FF 17 00 A0 ; Subtract with carry (long,X) $A00017.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $03FF.w		; ED FF 03 ; Subtract $03FF.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $8E0007.l,X		; FF 07 00 8E ; Subtract with carry (long,X) $8E0007.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8E.b		; 00 8E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $A20017.l,X		; FF 17 00 A2 ; Subtract with carry (long,X) $A20017.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $03FF.w		; ED FF 03 ; Subtract $03FF.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $8E0007.l,X		; FF 07 00 8E ; Subtract with carry (long,X) $8E0007.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8E.b		; 00 8E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $A00017.l,X		; FF 17 00 A0 ; Subtract with carry (long,X) $A00017.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $8E0009.l,X		; FF 09 00 8E ; Subtract with carry (long,X) $8E0009.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8E.b		; 00 8E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $AE0017.l,X		; FF 17 00 AE ; Subtract with carry (long,X) $AE0017.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $000A.w		; 8C 0A 00 ; Store Y register to $000A.w [Reads: Y Index]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8E0010.l,X		; FF 10 00 8E ; Subtract with carry (long,X) $8E0010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8E.b		; 00 8E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $AE0017.l,X		; FF 17 00 AE ; Subtract with carry (long,X) $AE0017.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sty $000A.w		; 8C 0A 00 ; Store Y register to $000A.w [Reads: Y Index]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AE0017.l,X		; FF 17 00 AE ; Subtract with carry (long,X) $AE0017.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	sty $000A.w		; 8C 0A 00 ; Store Y register to $000A.w [Reads: Y Index]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AC0017.l,X		; FF 17 00 AC ; Subtract with carry (long,X) $AC0017.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	sty $000A.w		; 8C 0A 00 ; Store Y register to $000A.w [Reads: Y Index]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AC0017.l,X		; FF 17 00 AC ; Subtract with carry (long,X) $AC0017.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0200.w		; 4C 00 02 ; Jump to $0200.w [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b],Y		; 17 00 ; OR accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $000A.w		; 8C 0A 00 ; Store Y register to $000A.w [Reads: Y Index]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $86FFEC.l,X		; FF EC FF 86 ; Subtract with carry (long,X) $86FFEC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $F5.b		; 02 F5 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $86FFE4.l,X		; FF E4 FF 86 ; Subtract with carry (long,X) $86FFE4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $E9.b		; 02 E9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $86FFE6.l,X		; FF E6 FF 86 ; Subtract with carry (long,X) $86FFE6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $86FFEF.l,X		; FF EF FF 86 ; Subtract with carry (long,X) $86FFEF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $EC.b		; 02 EC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $86FFF3.l,X		; FF F3 FF 86 ; Subtract with carry (long,X) $86FFF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $86FFDB.l,X		; FF DB FF 86 ; Subtract with carry (long,X) $86FFDB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $E5.b		; 02 E5 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $86FFE1.l,X		; FF E1 FF 86 ; Subtract with carry (long,X) $86FFE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $F6.b		; 02 F6 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $86FFE4.l,X		; FF E4 FF 86 ; Subtract with carry (long,X) $86FFE4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $FB.b		; 02 FB ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $86FFE4.l,X		; FF E4 FF 86 ; Subtract with carry (long,X) $86FFE4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $EC.b		; 02 EC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $86FFE5.l,X		; FF E5 FF 86 ; Subtract with carry (long,X) $86FFE5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $E5.b		; 02 E5 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $86FFEF.l,X		; FF EF FF 86 ; Subtract with carry (long,X) $86FFEF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $86FFEF.l,X		; FF EF FF 86 ; Subtract with carry (long,X) $86FFEF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $86FFF3.l,X		; FF F3 FF 86 ; Subtract with carry (long,X) $86FFF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $EE.b		; 02 EE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8AFFDB.l,X		; FF DB FF 8A ; Subtract with carry (long,X) $8AFFDB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $FB.b		; 02 FB ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8AFFDF.l,X		; FF DF FF 8A ; Subtract with carry (long,X) $8AFFDF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $E0.b		; 02 E0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8AFFE0.l,X		; FF E0 FF 8A ; Subtract with carry (long,X) $8AFFE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $E9.b		; 02 E9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8AFFE1.l,X		; FF E1 FF 8A ; Subtract with carry (long,X) $8AFFE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $F1.b		; 02 F1 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8AFFE8.l,X		; FF E8 FF 8A ; Subtract with carry (long,X) $8AFFE8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $E9.b		; 02 E9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8AFFE1.l,X		; FF E1 FF 8A ; Subtract with carry (long,X) $8AFFE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $F1.b		; 02 F1 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8AFFE8.l,X		; FF E8 FF 8A ; Subtract with carry (long,X) $8AFFE8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $E3.b		; 02 E3 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8AFFEA.l,X		; FF EA FF 8A ; Subtract with carry (long,X) $8AFFEA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $FB.b		; 02 FB ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8AFFEA.l,X		; FF EA FF 8A ; Subtract with carry (long,X) $8AFFEA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8AFFF2.l,X		; FF F2 FF 8A ; Subtract with carry (long,X) $8AFFF2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $F4.b		; 02 F4 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8AFFE0.l,X		; FF E0 FF 8A ; Subtract with carry (long,X) $8AFFE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $E6.b		; 02 E6 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8AFFE3.l,X		; FF E3 FF 8A ; Subtract with carry (long,X) $8AFFE3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $FA.b		; 02 FA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8AFFEA.l,X		; FF EA FF 8A ; Subtract with carry (long,X) $8AFFEA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $ED.b		; 02 ED ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8AFFEC.l,X		; FF EC FF 8A ; Subtract with carry (long,X) $8AFFEC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $E6.b		; 02 E6 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8AFFE3.l,X		; FF E3 FF 8A ; Subtract with carry (long,X) $8AFFE3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $FA.b		; 02 FA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8AFFEA.l,X		; FF EA FF 8A ; Subtract with carry (long,X) $8AFFEA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $ED.b		; 02 ED ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8AFFEC.l,X		; FF EC FF 8A ; Subtract with carry (long,X) $8AFFEC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $EF.b		; 02 EF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $9BFFE5.l,X		; FF E5 FF 9B ; Subtract with carry (long,X) $9BFFE5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $9BFFE6.l,X		; FF E6 FF 9B ; Subtract with carry (long,X) $9BFFE6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EA.b		; 00 EA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00459B.l,X		; FF 9B 45 00 ; Subtract with carry (long,X) $00459B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $9BFFF0.l,X		; FF F0 FF 9B ; Subtract with carry (long,X) $9BFFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $9BFFF4.l,X		; FF F4 FF 9B ; Subtract with carry (long,X) $9BFFF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b],Y		; 17 00 ; OR accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $02000B.l		; 22 0B 00 02 ; Jump to subroutine long $02000B.l [Writes: Stack Pointer] [Flow: call]
	sbc ($AA.b)		; F2 AA ; Subtract with carry (indirect) ($AA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.ACCU 8
	sep #$AB		; E2 AB
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldy $0401.w		; AC 01 04 ; Load $0401.w into Y register [Writes: Y Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora [$05.b]		; 07 05 ; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $ABFC.w,Y		; B9 FC AB ; Load $ABFC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $AC19.w,Y		; B9 19 AC ; Load $AC19.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $8549.w		; 4C 49 85 ; Jump to $8549.w [Flow: jump]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($16.b)		; 12 16 ; OR accumulator with memory (indirect) ($16.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $02.b,X		; 16 02 ; Arithmetic shift left $02.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	sty $82.b		; 84 82 ; Store Y register to $82.b [Reads: Y Index]
	.db $80, $82		; 80 82 ; Branch always to $80, $82 [Flow: branch]
	sty $86.b		; 84 86 ; Store Y register to $86.b [Reads: Y Index]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $888A.w		; 8C 8A 88 ; Store Y register to $888A.w [Reads: Y Index]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $B9		; B0 B9 ; Branch if carry set to $B0, $B9 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$A7AA.w		; 69 AA A7 ; Add #$A7AA.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8549.w		; 20 49 85 ; Jump to subroutine at $8549.w [Writes: Stack Pointer] [Flow: call]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	ldy $0DC0.w,X		; BC C0 0D ; Load Y register $0DC0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$0A.b		; C0 0A ; Compare #$0A.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $B0, $19		; B0 19 ; Branch if carry set to $B0, $19 [Flow: branch]
	lda $AC42.w,Y		; B9 42 AC ; Load $AC42.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $AC4C.w,X		; BD 4C AC ; Load $AC4C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $AC5C.w,X		; 1D 5C AC ; OR accumulator with memory $AC5C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$19.b		; A0 19 ; Load #$19.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FD8.w		; ED D8 0F ; Subtract $0FD8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000E.w		; 69 0E 00 ; Add #$000E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$001C.w		; C9 1C 00 ; Compare #$001C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $32		; B0 32 ; Branch if carry set to $B0, $32 [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FDA.w		; ED DA 0F ; Subtract $0FDA.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0000.w		; 69 00 00 ; Add #$0000.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$001C.w		; C9 1C 00 ; Compare #$001C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $23		; B0 23 ; Branch if carry set to $B0, $23 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda $031F.w		; AD 1F 03 ; Load $031F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $037B.w		; 0D 7B 03 ; Logical OR $037B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0373.w		; 8D 73 03 ; Store accumulator to $0373.w [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda $28.b		; A5 28 ; Load $28.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	lda $27.b		; A5 27 ; Load $27.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $AD16.w		; 20 16 AD ; Jump to subroutine at $AD16.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$CB.b		; E9 CB ; Subtract #$CB.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	rol $AD.b		; 26 AD ; Rotate left $AD.b [Reads: Direct Page] [Flags: ZNC]
	adc [$AD.b]		; 67 AD ; Add with carry (long) [$AD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $AD		; 70 AD ; Branch if overflow set to $70, $AD [Flow: branch]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; [PATTERN: Memory clearing operation] 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	jsr $AD8C.w		; 20 8C AD ; Jump to subroutine at $AD8C.w [Writes: Stack Pointer] [Flow: call]
	stz $0B0A.w		; 9C 0A 0B ; Store zero to $0B0A.w
	stz $0B0B.w		; 9C 0B 0B ; Store zero to $0B0B.w
	stz $0B0D.w		; [PATTERN: Memory clearing operation] 9C 0D 0B ; Store zero to $0B0D.w
	stz $0B0F.w		; 9C 0F 0B ; Store zero to $0B0F.w
	stz $0B10.w		; 9C 10 0B ; Store zero to $0B10.w
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B0E.w		; 8D 0E 0B ; Store accumulator to $0B0E.w [Reads: Accumulator]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0C.b		; 69 0C ; Add #$0C.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	ldy #$1A.b		; A0 1A ; Load #$1A.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1D10.w,Y		; 99 10 1D ; Store accumulator to $1D10.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1D30.w,Y		; 99 30 1D ; Store accumulator to $1D30.w,Y [Reads: Accumulator, Y Index]
	sta $1D50.w,Y		; 99 50 1D ; Store accumulator to $1D50.w,Y [Reads: Accumulator, Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,X		; 9D 80 0E ; Store accumulator to $0E80.w,X [Reads: Accumulator, X Index]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DA0.w,X		; 9D A0 0D ; Store accumulator to $0DA0.w,X [Reads: Accumulator, X Index]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0ED0.w,X		; 9D D0 0E ; Store accumulator to $0ED0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	jsl $1DF614.l		; 22 14 F6 1D ; Jump to subroutine long $1DF614.l [Writes: Stack Pointer] [Flow: call]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $ADA5.w,Y		; B9 A5 AD ; Load $ADA5.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	ldy $0E00.w,X		; BC 00 0E ; Load Y register $0E00.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $ADAD.w,Y		; B9 AD AD ; Load $ADAD.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $AF84.w		; 20 84 AF ; Jump to subroutine at $AF84.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $26		; 10 26 ; Branch if plus to $10, $26 [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora #$E0.b		; 09 E0 ; Logical OR #$E0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EF0.w,X		; 9D F0 0E ; Store accumulator to $0EF0.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $0EC0.w,X		; BD C0 0E ; Load $0EC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EF0.w,X		; 9D F0 0E ; Store accumulator to $0EF0.w,X [Reads: Accumulator, X Index]
	jmp $DC16.w		; 4C 16 DC ; Jump to $DC16.w [Flow: jump]
	dec $0EC0.w,X		; DE C0 0E ; Decrement memory $0EC0.w,X [Reads: X Index] [Flags: ZN]
	jsl $1DDC2A.l		; 22 2A DC 1D ; Jump to subroutine long $1DDC2A.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$31.b		; A9 31 ; Load #$31.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0D10.w,Y		; B9 10 0D ; Load $0D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFC00.l,X		; 9F 00 FC 7F ; Store accumulator (long,X) $7FFC00.l,X [Reads: Accumulator, X Index]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFD00.l,X		; 9F 00 FD 7F ; Store accumulator (long,X) $7FFD00.l,X [Reads: Accumulator, X Index]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFC80.l,X		; 9F 80 FC 7F ; Store accumulator (long,X) $7FFC80.l,X [Reads: Accumulator, X Index]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFD80.l,X		; 9F 80 FD 7F ; Store accumulator (long,X) $7FFD80.l,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0EA0.w,X		; BD A0 0E ; Load $0EA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0E.b		; C9 0E ; Compare #$0E.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EA0.w,X		; 9D A0 0E ; Store accumulator to $0EA0.w,X [Reads: Accumulator, X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	jsr $C211.w		; 20 11 C2 ; Jump to subroutine at $C211.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	adc $F5AE.w		; 6D AE F5 ; Add $F5AE.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldx $E100.w		; AE 00 E1 ; Load $E100.w into X register [Writes: X Index] [Flags: ZN]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00E100.l,X		; 1F 00 E1 00 ; Logical OR long $00E100.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	dec $0D90.w,X		; DE 90 0D ; Decrement memory $0D90.w,X [Reads: X Index] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$C0.b		; A9 C0 ; Load #$C0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
	jsr $8094.w		; 20 94 80 ; Jump to subroutine at $8094.w [Writes: Stack Pointer] [Flow: call]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $AE65.w,Y		; B9 65 AE ; Load $AE65.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $AE69.w,Y		; B9 69 AE ; Load $AE69.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA1A.l		; 22 1A EA 06 ; Jump to subroutine long $06EA1A.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$28.b		; 69 28 ; Add #$28.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$50.b		; C9 50 ; Compare #$50.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$28.b		; 69 28 ; Add #$28.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$50.b		; C9 50 ; Compare #$50.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $01		; B0 01 ; Branch if carry set to $B0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D40.w,X		; 7D 40 0D ; Add $0D40.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D50.w,X		; 7D 50 0D ; Add $0D50.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $28		; D0 28 ; Branch if not equal to $D0, $28 [Flow: branch]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA1A.l		; 22 1A EA 06 ; Jump to subroutine long $06EA1A.l [Writes: Stack Pointer] [Flow: call]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $01.b		; C5 01 ; Compare $01.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	inc $0D50.w,X		; FE 50 0D ; Increment memory $0D50.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	dec $0D50.w,X		; DE 50 0D ; Decrement memory $0D50.w,X [Reads: X Index] [Flags: ZN]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	inc $0D40.w,X		; FE 40 0D ; Increment memory $0D40.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	dec $0D40.w,X		; DE 40 0D ; Decrement memory $0D40.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $1810.w		; 0C 10 18 ; Test and set bits $1810.w [Reads: Accumulator] [Flags: Z]
	jsr $3028.w		; 20 28 30 ; Jump to subroutine at $3028.w [Writes: Stack Pointer] [Flow: call]
	bit $38.b,X		; 34 38 ; Test bits $38.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $4440.w,X		; 3C 40 44 ; Test bits $4440.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jmp $5450.w		; 4C 50 54 ; Jump to $5450.w [Flow: jump]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	jmp $686460.l		; 5C 60 64 68 ; Jump long to $686460.l [Flow: jump]
	jmp ($7470.w)		; 6C 70 74 ; Jump indirect to ($7470.w) [Flow: jump]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	lda $0B89.w,X		; BD 89 0B ; Load $0B89.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$30.b		; 09 30 ; Logical OR #$30.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	jsr $B560.w		; 20 60 B5 ; Jump to subroutine at $B560.w [Writes: Stack Pointer] [Flow: call]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FB6.w		; 8D B6 0F ; Store accumulator to $0FB6.w [Reads: Accumulator]
	ldy $0FB6.w		; AC B6 0F ; Load $0FB6.w into Y register [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $0EC0.w,X		; DD C0 0E ; Compare accumulator $0EC0.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $AF24.w,Y		; F9 24 AF ; Subtract with carry $AF24.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7FFC00.l,X		; BF 00 FC 7F ; Load long $7FFC00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FD8.w		; 8D D8 0F ; Store accumulator to $0FD8.w [Reads: Accumulator]
	lda $7FFC80.l,X		; BF 80 FC 7F ; Load long $7FFC80.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FD9.w		; 8D D9 0F ; Store accumulator to $0FD9.w [Reads: Accumulator]
	lda $7FFD00.l,X		; BF 00 FD 7F ; Load long $7FFD00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FDA.w		; 8D DA 0F ; Store accumulator to $0FDA.w [Reads: Accumulator]
	lda $7FFD80.l,X		; BF 80 FD 7F ; Load long $7FFD80.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FDB.w		; 8D DB 0F ; Store accumulator to $0FDB.w [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FD8.w		; ED D8 0F ; Subtract $0FD8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0010.w		; C9 10 00 ; Compare #$0010.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $42		; B0 42 ; Branch if carry set to $B0, $42 [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FDA.w		; ED DA 0F ; Subtract $0FDA.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0010.w		; C9 10 00 ; Compare #$0010.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $2F		; B0 2F ; Branch if carry set to $B0, $2F [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $28		; 30 28 ; Branch if minus to $30, $28 [Flow: branch]
	lda $031F.w		; AD 1F 03 ; Load $031F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $037B.w		; 0D 7B 03 ; Logical OR $037B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $11.b		; 05 11 ; Logical OR $11.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0FC1.w		; 0D C1 0F ; Logical OR $0FC1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0373.w		; 8D 73 03 ; Store accumulator to $0373.w [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda $28.b		; A5 28 ; Load $28.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	lda $27.b		; A5 27 ; Load $27.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $90.b		; A5 90 ; Load $90.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $AF54.w,Y		; 79 54 AF ; Add $AF54.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	lda $AF54.w,Y		; B9 54 AF ; Load $AF54.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $92.b		; 65 92 ; Add $92.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	cpy #$04.b		; C0 04 ; Compare #$04.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $10		; 90 10 ; Branch if carry clear to $90, $10 [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsr $B079.w		; 20 79 B0 ; Jump to subroutine at $B079.w [Writes: Stack Pointer] [Flow: call]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$06.b		; 29 06 ; Logical AND #$06.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $0F50.w,X		; 5D 50 0F ; Exclusive OR accumulator with memory $0F50.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $AF3C.w,Y		; B9 3C AF ; Load $AF3C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	jsl $06DBF0.l		; 22 F0 DB 06 ; Jump to subroutine long $06DBF0.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $B560.w		; 20 60 B5 ; Jump to subroutine at $B560.w [Writes: Stack Pointer] [Flow: call]
	inc $0FB6.w		; EE B6 0F ; Increment $0FB6.w [Flags: ZN]
	lda $0FB6.w		; AD B6 0F ; Load $0FB6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $0EC0.w,X		; DD C0 0E ; Compare accumulator $0EC0.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $AF94.w		; 4C 94 AF ; Jump to $AF94.w [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0FD9.w		; AD D9 0F ; Load $0FD9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $0FDB.w		; AD DB 0F ; Load $0FDB.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CAA.w,X		; 9D AA 0C ; Store accumulator to $0CAA.w,X [Reads: Accumulator, X Index]
	stz $0E60.w,X		; 9E 60 0E ; Store zero to $0E60.w,X [Reads: X Index]
	jsl $06F2AA.l		; 22 AA F2 06 ; Jump to subroutine long $06F2AA.l [Writes: Stack Pointer] [Flow: call]
	lda #$84.b		; A9 84 ; Load #$84.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CAA.w,X		; 9D AA 0C ; Store accumulator to $0CAA.w,X [Reads: Accumulator, X Index]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $0B10.w		; AD 10 0B ; Load $0B10.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $ADB5.w		; 4C B5 AD ; Jump to $ADB5.w [Flow: jump]
	lda #$17.b		; A9 17 ; Load #$17.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1C.b		; 85 1C ; Store accumulator to $1C.b [Reads: Accumulator]
	stz $1D.b		; 64 1D ; Store zero to $1D.b
	jsr $B587.w		; 20 87 B5 ; Jump to subroutine at $B587.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	jmp $B1D1.w		; 4C D1 B1 ; Jump to $B1D1.w [Flow: jump]
	sta $0FFC.w		; 8D FC 0F ; Store accumulator to $0FFC.w [Reads: Accumulator]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $38		; [PATTERN: Memory clearing operation] D0 38 ; Branch if not equal to $D0, $38 [Flow: branch]
	inc $0B10.w		; EE 10 0B ; Increment $0B10.w [Flags: ZN]
	jsl $1DD6D1.l		; 22 D1 D6 1D ; Jump to subroutine long $1DD6D1.l [Writes: Stack Pointer] [Flow: call]
	stz $0E80.w,X		; 9E 80 0E ; Store zero to $0E80.w,X [Reads: X Index]
	stz $0EB0.w,X		; 9E B0 0E ; Store zero to $0EB0.w,X [Reads: X Index]
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,X		; [PATTERN: Memory clearing operation] 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CAA.w,X		; 9D AA 0C ; Store accumulator to $0CAA.w,X [Reads: Accumulator, X Index]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	stz $0DE0.w,X		; 9E E0 0D ; Store zero to $0DE0.w,X [Reads: X Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EC0.w,X		; 9D C0 0E ; Store accumulator to $0EC0.w,X [Reads: Accumulator, X Index]
	jsr $C39B.w		; 20 9B C3 ; Jump to subroutine at $C39B.w [Writes: Stack Pointer] [Flow: call]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0311.w		; 8D 11 03 ; Store accumulator to $0311.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $31		; B0 31 ; Branch if carry set to $B0, $31 [Flow: branch]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $2E		; 90 2E ; Branch if carry clear to $90, $2E [Flow: branch]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0311.w		; 8D 11 03 ; Store accumulator to $0311.w [Reads: Accumulator]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0310.w		; 8D 10 03 ; Store accumulator to $0310.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0428.w		; 8D 28 04 ; Store accumulator to $0428.w [Reads: Accumulator]
	lda #$F8.b		; A9 F8 ; Load #$F8.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	jsr $E95D.w		; 20 5D E9 ; Jump to subroutine at $E95D.w [Writes: Stack Pointer] [Flow: call]
	jsr $AD8C.w		; 20 8C AD ; Jump to subroutine at $AD8C.w [Writes: Stack Pointer] [Flow: call]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0C.b		; E9 0C ; Subtract #$0C.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	inc $0B0F.w		; EE 0F 0B ; Increment $0B0F.w [Flags: ZN]
	inc $0B0F.w		; EE 0F 0B ; Increment $0B0F.w [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $3F		; D0 3F ; Branch if not equal to $D0, $3F [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B1B1.w,Y		; 79 B1 B1 ; Add $B1B1.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0FD8.w		; 8D D8 0F ; Store accumulator to $0FD8.w [Reads: Accumulator]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $B1B9.w,Y		; 79 B9 B1 ; Add $B1B9.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0FD9.w		; 8D D9 0F ; Store accumulator to $0FD9.w [Reads: Accumulator]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B1C1.w,Y		; 79 C1 B1 ; Add $B1C1.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0FDA.w		; 8D DA 0F ; Store accumulator to $0FDA.w [Reads: Accumulator]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	adc $B1C9.w,Y		; 79 C9 B1 ; Add $B1C9.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0FDB.w		; 8D DB 0F ; Store accumulator to $0FDB.w [Reads: Accumulator]
	jsl $1DDC30.l		; 22 30 DC 1D ; Jump to subroutine long $1DDC30.l [Writes: Stack Pointer] [Flow: call]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AD00FF.l,X		; FF FF 00 AD ; Subtract with carry (long,X) $AD00FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($0D.b),Y		; D1 0D ; Compare accumulator ($0D.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	ora $0DD2.w		; 0D D2 0D ; Logical OR $0DD2.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B3B5.w		; 20 B5 B3 ; Jump to subroutine at $B3B5.w [Writes: Stack Pointer] [Flow: call]
	jsr $B3E6.w		; 20 E6 B3 ; Jump to subroutine at $B3E6.w [Writes: Stack Pointer] [Flow: call]
	jsr $C211.w		; 20 11 C2 ; Jump to subroutine at $C211.w [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	jsr $E898.w		; 20 98 E8 ; Jump to subroutine at $E898.w [Writes: Stack Pointer] [Flow: call]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$18.b		; 69 18 ; Add #$18.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	lda $B0C8.w,Y		; B9 C8 B0 ; Load $B0C8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0B0E.w		; AD 0E 0B ; Load $0B0E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	dec $0B0E.w		; CE 0E 0B ; Decrement $0B0E.w [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DD1.w		; AD D1 0D ; Load $0DD1.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $0D81.w		; AD 81 0D ; Load $0D81.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $1B		; F0 1B ; Branch if equal to $F0, $1B [Flow: branch]
	lda $0DD2.w		; AD D2 0D ; Load $0DD2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $0D82.w		; AD 82 0D ; Load $0D82.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	eor ($B2.b)		; 52 B2 ; Exclusive OR accumulator with memory (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($B2.b,X)		; A1 B2 ; Load accumulator ($B2.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$B3.b		; 69 B3 ; Add #$B3.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($60.b,S),Y		; B3 60 ; Load accumulator (stack relative indirect indexed) ($60.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $90, $80		; 90 80 ; Branch if carry clear to $90, $80 [Flow: branch]
	.db $70, $60		; 70 60 ; Branch if overflow set to $70, $60 [Flow: branch]
	.db $80, $BD		; 80 BD ; Branch always to $80, $BD [Flow: branch]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	.db $D0, $49		; D0 49 ; Branch if not equal to $D0, $49 [Flow: branch]
	lda $0E30.w,X		; BD 30 0E ; Load $0E30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $37		; F0 37 ; Branch if equal to $F0, $37 [Flow: branch]
	inc $0EC0.w,X		; FE C0 0E ; Increment memory $0EC0.w,X [Reads: X Index] [Flags: ZN]
	lda $0EC0.w,X		; BD C0 0E ; Load $0EC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	stz $0EC0.w,X		; 9E C0 0E ; Store zero to $0EC0.w,X [Reads: X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$50.b		; A9 50 ; Load #$50.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B24A.w,Y		; B9 4A B2 ; Load $B24A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0B08.w		; 8D 08 0B ; Store accumulator to $0B08.w [Reads: Accumulator]
	lda $B24E.w,Y		; B9 4E B2 ; Load $B24E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0B09.w		; 8D 09 0B ; Store accumulator to $0B09.w [Reads: Accumulator]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	ora #$80.b		; 09 80 ; Logical OR #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E30.w,X		; 9D 30 0E ; Store accumulator to $0E30.w,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E30.w,X		; BD 30 0E ; Load $0E30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	jsr $E89D.w		; 20 9D E8 ; Jump to subroutine at $E89D.w [Writes: Stack Pointer] [Flow: call]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	stz $0E30.w,X		; 9E 30 0E ; Store zero to $0E30.w,X [Reads: X Index]
	jmp $B33D.w		; 4C 3D B3 ; Jump to $B33D.w [Flow: jump]
	lda $0B08.w		; AD 08 0B ; Load $0B08.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0B09.w		; AD 09 0B ; Load $0B09.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $0E30.w,X		; BC 30 0E ; Load Y register $0E30.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA22.l		; 22 22 EA 06 ; Jump to subroutine long $06EA22.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0D00.w,X		; FD 00 0D ; Subtract with carry $0D00.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0310.w		; 8D 10 03 ; Store accumulator to $0310.w [Reads: Accumulator]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sty $0311.w		; 8C 11 03 ; Store Y register to $0311.w [Reads: Y Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0D10.w,X		; FD 10 0D ; Subtract with carry $0D10.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0312.w		; 8D 12 03 ; Store accumulator to $0312.w [Reads: Accumulator]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sty $0313.w		; 8C 13 03 ; Store Y register to $0313.w [Reads: Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0428.w		; 8D 28 04 ; Store accumulator to $0428.w [Reads: Accumulator]
	jsr $AD8C.w		; 20 8C AD ; Jump to subroutine at $AD8C.w [Writes: Stack Pointer] [Flow: call]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0C.b		; E9 0C ; Subtract #$0C.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	lda $0B08.w		; AD 08 0B ; Load $0B08.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0D10.w,X		; FD 10 0D ; Subtract with carry $0D10.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$02.b		; 69 02 ; Add #$02.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $16		; B0 16 ; Branch if carry set to $B0, $16 [Flow: branch]
	lda $0B09.w		; AD 09 0B ; Load $0B09.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0D00.w,X		; FD 00 0D ; Subtract with carry $0D00.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$02.b		; 69 02 ; Add #$02.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $0E30.w,X		; BD 30 0E ; Load $0E30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	jsr $B34D.w		; 20 4D B3 ; Jump to subroutine at $B34D.w [Writes: Stack Pointer] [Flow: call]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy $0D50.w,X		; BC 50 0D ; Load Y register $0D50.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$02.b		; E9 02 ; Subtract #$02.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0E80.w,X		; 9D 80 0E ; Store accumulator to $0E80.w,X [Reads: Accumulator, X Index]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$21.b		; A9 21 ; Load #$21.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B3B5.w		; 20 B5 B3 ; Jump to subroutine at $B3B5.w [Writes: Stack Pointer] [Flow: call]
	jsr $B3B5.w		; 20 B5 B3 ; Jump to subroutine at $B3B5.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA12.l		; 22 12 EA 06 ; Jump to subroutine long $06EA12.l [Writes: Stack Pointer] [Flow: call]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$26.b		; A9 26 ; Load #$26.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	jsr $AD4F.w		; 20 4F AD ; Jump to subroutine at $AD4F.w [Writes: Stack Pointer] [Flow: call]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	lda $0B0D.w		; AD 0D 0B ; Load $0B0D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $28		; D0 28 ; Branch if not equal to $D0, $28 [Flow: branch]
	inc $0B0C.w		; EE 0C 0B ; Increment $0B0C.w [Flags: ZN]
	lda $0B0C.w		; AD 0C 0B ; Load $0B0C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	lda $0B0B.w		; AD 0B 0B ; Load $0B0B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0B0A.w		; AD 0A 0B ; Load $0B0A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8000.w,Y		; 79 00 80 ; Add $8000.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0B0A.w		; 8D 0A 0B ; Store accumulator to $0B0A.w [Reads: Accumulator]
	cmp $B3B3.w,Y		; D9 B3 B3 ; Compare accumulator $B3B3.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	inc $0B0B.w		; EE 0B 0B ; Increment $0B0B.w [Flags: ZN]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B0D.w		; 8D 0D 0B ; Store accumulator to $0B0D.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $0B0D.w		; CE 0D 0B ; Decrement $0B0D.w [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $22.b		; E5 22 ; Subtract $22.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0028.w		; 69 28 00 ; Add #$0028.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0050.w		; C9 50 00 ; Compare #$0050.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $33		; B0 33 ; Branch if carry set to $B0, $33 [Flow: branch]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $20.b		; E5 20 ; Subtract $20.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0040.w		; C9 40 00 ; Compare #$0040.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $25		; B0 25 ; Branch if carry set to $B0, $25 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda $031F.w		; AD 1F 03 ; Load $031F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $037B.w		; 0D 7B 03 ; Logical OR $037B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0373.w		; 8D 73 03 ; Store accumulator to $0373.w [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA1A.l		; 22 1A EA 06 ; Jump to subroutine long $06EA1A.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $C0FFF8.l,X		; FF F8 FF C0 ; Subtract with carry (long,X) $C0FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000C0.l,X		; FF C0 00 00 ; Subtract with carry (long,X) $0000C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E00008.l,X		; FF 08 00 E0 ; Subtract with carry (long,X) $E00008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFF8.l,X		; FF F8 FF 00 ; Subtract with carry (long,X) $00FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000002.l,X		; FF 02 00 00 ; Subtract with carry (long,X) $000002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $200008.l,X		; FF 08 00 20 ; Subtract with carry (long,X) $200008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C2FFF8.l,X		; FF F8 FF C2 ; Subtract with carry (long,X) $C2FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000C4.l,X		; FF C4 00 00 ; Subtract with carry (long,X) $0000C4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C20008.l,X		; FF 08 00 C2 ; Subtract with carry (long,X) $C20008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C4.b		; 00 C4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $20FFF8.l,X		; FF F8 FF 20 ; Subtract with carry (long,X) $20FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $008022.l,X		; FF 22 80 00 ; Subtract with carry (long,X) $008022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000008.l,X		; FF 08 00 00 ; Subtract with carry (long,X) $000008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E0FFF8.l,X		; FF F8 FF E0 ; Subtract with carry (long,X) $E0FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0080E0.l,X		; FF E0 80 00 ; Subtract with carry (long,X) $0080E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C00008.l,X		; FF 08 00 C0 ; Subtract with carry (long,X) $C00008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $22FFF8.l,X		; FF F8 FF 22 ; Subtract with carry (long,X) $22FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00C020.l,X		; FF 20 C0 00 ; Subtract with carry (long,X) $00C020.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $020008.l,X		; FF 08 00 02 ; Subtract with carry (long,X) $020008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C4FFF8.l,X		; FF F8 FF C4 ; Subtract with carry (long,X) $C4FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0040C2.l,X		; FF C2 40 00 ; Subtract with carry (long,X) $0040C2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C40008.l,X		; FF 08 00 C4 ; Subtract with carry (long,X) $C40008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $02FFF8.l,X		; FF F8 FF 02 ; Subtract with carry (long,X) $02FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004000.l,X		; FF 00 40 00 ; Subtract with carry (long,X) $004000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $220008.l,X		; FF 08 00 22 ; Subtract with carry (long,X) $220008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $26FFF8.l,X		; FF F8 FF 26 ; Subtract with carry (long,X) $26FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004026.l,X		; FF 26 40 00 ; Subtract with carry (long,X) $004026.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $260008.l,X		; FF 08 00 26 ; Subtract with carry (long,X) $260008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$B440.w		; 69 40 B4 ; Add #$B440.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $08		; 30 08 ; Branch if minus to $30, $08 [Flow: branch]
	lda $0B89.w,X		; BD 89 0B ; Load $0B89.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$30.b		; 09 30 ; Logical OR #$30.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8549.w		; 20 49 85 ; Jump to subroutine at $8549.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $FA		; 30 FA ; Branch if minus to $30, $FA [Flow: branch]
	jsr $B560.w		; 20 60 B5 ; Jump to subroutine at $B560.w [Writes: Stack Pointer] [Flow: call]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$EF.b		; 29 EF ; Logical AND #$EF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $B641.w		; 4C 41 B6 ; Jump to $B641.w [Flow: jump]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0D10.w,X		; FD 10 0D ; Subtract with carry $0D10.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0D00.w,X		; FD 00 0D ; Subtract with carry $0D00.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FB6.w		; 8D B6 0F ; Store accumulator to $0FB6.w [Reads: Accumulator]
	ldy $0FB5.w		; AC B5 0F ; Load $0FB5.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta WRMPYA.w		; 8D 02 42 ; Store accumulator to WRMPYA.w [Reads: Accumulator]
	lda $B804.w,Y		; B9 04 B8 ; Load $B804.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta WRMPYB.w		; 8D 03 42 ; Store accumulator to WRMPYB.w [Reads: Accumulator]
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	asl $4216.w		; 0E 16 42 ; Arithmetic shift left $4216.w [Flags: ZNC]
	lda RDMPYH.w		; AD 17 42 ; Load RDMPYH.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldy $0FB6.w		; AC B6 0F ; Load $0FB6.w into Y register [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ldy $0FB5.w		; AC B5 0F ; Load $0FB5.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $0B.b		; A5 0B ; Load $0B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta WRMPYA.w		; 8D 02 42 ; Store accumulator to WRMPYA.w [Reads: Accumulator]
	lda $B804.w,Y		; B9 04 B8 ; Load $B804.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta WRMPYB.w		; 8D 03 42 ; Store accumulator to WRMPYB.w [Reads: Accumulator]
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	asl $4216.w		; 0E 16 42 ; Arithmetic shift left $4216.w [Flags: ZNC]
	lda RDMPYH.w		; AD 17 42 ; Load RDMPYH.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldy $09.b		; A4 09 ; Load $09.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldy $0FB6.w		; AC B6 0F ; Load $0FB6.w into Y register [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sty $0FB6.w		; 8C B6 0F ; Store Y register to $0FB6.w [Reads: Y Index]
	dec $0FB5.w		; CE B5 0F ; Decrement $0FB5.w [Flags: ZN]
	.db $10, $88		; 10 88 ; Branch if plus to $10, $88 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$09F0.w		; A9 F0 09 ; Load #$09F0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	lda #$0A9C.w		; A9 9C 0A ; Load #$0A9C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E9.b		; E5 E9 ; Subtract $E9.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$03.b		; 69 03 ; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B80C.w,X		; 7D 0C B8 ; Add $B80C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $06.b,X		; B5 06 ; Load $06.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B810.w,X		; 7D 10 B8 ; Add $B810.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$F8.b		; 69 F8 ; Add #$F8.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx $0FB5.w		; AE B5 0F ; Load $0FB5.w into X register [Writes: X Index] [Flags: ZN]
	lda $08.b,X		; B5 08 ; Load $08.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B820.w,X		; 7D 20 B8 ; Add $B820.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$2A.b		; A9 2A ; Load #$2A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldx $0FB5.w		; AE B5 0F ; Load $0FB5.w into X register [Writes: X Index] [Flags: ZN]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $B80E.w,X		; 1D 0E B8 ; OR accumulator with memory $B80E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $0FB5.w		; CE B5 0F ; Decrement $0FB5.w [Flags: ZN]
	.db $10, $95		; 10 95 ; Branch if plus to $10, $95 [Flow: branch]
	lda $0B0A.w		; AD 0A 0B ; Load $0B0A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $0B0A.w		; 6D 0A 0B ; Add $0B0A.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B773.w,X		; 7D 73 B7 ; Add $B773.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $096C.w,Y		; 99 6C 09 ; Store accumulator to $096C.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $B7B9.w,X		; FD B9 B7 ; Subtract with carry $B7B9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc #$0020.w		; E9 20 00 ; Subtract #$0020.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0B0F.w		; 6D 0F 0B ; Add $0B0F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta $096C.w,Y		; 99 6C 09 ; Store accumulator to $096C.w,Y [Reads: Accumulator, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $096C.w,Y		; 99 6C 09 ; Store accumulator to $096C.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $B7FF.w,X		; BD FF B7 ; Load $B7FF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta $096C.w,Y		; 99 6C 09 ; Store accumulator to $096C.w,Y [Reads: Accumulator, Y Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta $096C.w,Y		; 99 6C 09 ; Store accumulator to $096C.w,Y [Reads: Accumulator, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A7B.w,Y		; 99 7B 0A ; Store accumulator to $0A7B.w,Y [Reads: Accumulator, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$05.b		; E0 05 ; Compare #$05.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $AE		; D0 AE ; Branch if not equal to $D0, $AE [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06FEB4.l		; 22 B4 FE 06 ; Jump to subroutine long $06FEB4.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F7FFFC.l,X		; FF FC FF F7 ; Subtract with carry (long,X) $F7FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FFF1.l,X		; FF F1 FF 00 ; Subtract with carry (long,X) $00FFF1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F3FFF9.l,X		; FF F9 FF F3 ; Subtract with carry (long,X) $F3FFF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FFEC.l,X		; FF EC FF 00 ; Subtract with carry (long,X) $00FFEC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F0FFF7.l,X		; FF F7 FF F0 ; Subtract with carry (long,X) $F0FFF7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $18FFE8.l,X		; FF E8 FF 18 ; Subtract with carry (long,X) $18FFE8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3D.b		; 00 3D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $FC2C.w		; 2C 2C FC ; Test bits $FC2C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	cpx #$C0.b		; E0 C0 ; Compare #$C0.b with X register [Reads: X Index] [Flags: ZNC]
	ldy #$80.b		; A0 80 ; Load #$80.b into Y register [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsr $1CE4.w		; 20 E4 1C ; Jump to subroutine at $1CE4.w [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FCFD.w,X		; FE FD FC ; Increment memory $FCFD.w,X [Reads: X Index] [Flags: ZN]
	jsr ($FDFC.w,X)		; FC FC FD ; Jump to subroutine indirect indexed ($FDFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $FCFC.w,X		; FE FC FC ; Increment memory $FCFC.w,X [Reads: X Index] [Flags: ZN]
	sbc $00FE.w,X		; FD FE 00 ; Subtract with carry $00FE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FCFD.w,X		; FE FD FC ; Increment memory $FCFD.w,X [Reads: X Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	stz $6A.b		; 64 6A ; Store zero to $6A.b
	adc $7E7A74.l		; 6F 74 7A 7E ; Add with carry (long) $7E7A74.l [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	and $5248.w,Y		; 39 48 52 ; AND accumulator with memory $5248.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $777365.l		; 5C 65 73 77 ; Jump long to $777365.l [Flow: jump]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	.db $80, $1E		; 80 1E ; Branch always to $80, $1E [Flow: branch]
	bit $29.b		; 24 29 ; Test bits $29.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $3A34.w		; 2E 34 3A ; Rotate left $3A34.w [Flags: ZNC]
	mvp $80,$4D		; 44 4D 80 ; Move block positive $80,$4D [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($17.b),Y		; 11 17 ; OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $2A22.w		; 1C 22 2A ; Test and reset bits $2A22.w [Reads: Accumulator] [Flags: Z]
	rol $3A.b,X		; 36 3A ; Rotate left $3A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $80, $30		; 80 30 ; Branch always to $80, $30 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $1E.b,S		; 23 1E ; AND accumulator with stack relative $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0C13.w,Y		; 19 13 0C ; OR accumulator with memory $0C13.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	and $1D2126.l		; 2F 26 21 1D ; AND accumulator with memory (long) $1D2126.l [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($0C.b)		; 12 0C ; OR accumulator with memory (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	and $1D2227.l		; 2F 27 22 1D ; AND accumulator with memory (long) $1D2227.l [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($0C.b)		; 12 0C ; OR accumulator with memory (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	and $1D2227.l		; 2F 27 22 1D ; AND accumulator with memory (long) $1D2227.l [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($0C.b)		; 12 0C ; OR accumulator with memory (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and ($29.b)		; 32 29 ; AND accumulator with memory (indirect) ($29.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $071019.l		; 22 19 10 07 ; Jump to subroutine long $071019.l [Writes: Stack Pointer] [Flow: call]
	brk $F2.b		; 00 F2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00FF.w		; 0D FF 00 ; Logical OR $00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0000.l,X		; FF 00 00 FF ; Subtract with carry (long,X) $FF0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0E90BD.l,X		; FF BD 90 0E ; Subtract with carry (long,X) $0E90BD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	jmp $BDC6.w		; 4C C6 BD ; Jump to $BDC6.w [Flow: jump]
	lda $0E90.w,X		; BD 90 0E ; Load $0E90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $BD28.w		; 4C 28 BD ; Jump to $BD28.w [Flow: jump]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$CC.b		; E9 CC ; Subtract #$CC.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0D90.w		; AD 90 0D ; Load $0D90.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B88A.w,Y		; 79 8A B8 ; Add $B88A.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda $0DA0.w		; AD A0 0D ; Load $0DA0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $B88C.w,Y		; 79 8C B8 ; Add $B88C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0DA0.w,X		; 9D A0 0D ; Store accumulator to $0DA0.w,X [Reads: Accumulator, X Index]
	lda $0DB0.w		; AD B0 0D ; Load $0DB0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$20.b		; E9 20 ; Subtract #$20.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	lda $0ED0.w		; AD D0 0E ; Load $0ED0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0ED0.w,X		; 9D D0 0E ; Store accumulator to $0ED0.w,X [Reads: Accumulator, X Index]
	lda $0B89.w,X		; BD 89 0B ; Load $0B89.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$30.b		; 09 30 ; Logical OR #$30.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	jsr $BB70.w		; 20 70 BB ; Jump to subroutine at $BB70.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $06		; 10 06 ; Branch if plus to $10, $06 [Flow: branch]
	sta $0BA0.w,X		; 9D A0 0B ; Store accumulator to $0BA0.w,X [Reads: Accumulator, X Index]
	jmp $BB3F.w		; 4C 3F BB ; Jump to $BB3F.w [Flow: jump]
	lda $0EF0.w,X		; BD F0 0E ; Load $0EF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	stz $0EF0.w,X		; 9E F0 0E ; Store zero to $0EF0.w,X [Reads: X Index]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsr $C211.w		; 20 11 C2 ; Jump to subroutine at $C211.w [Writes: Stack Pointer] [Flow: call]
	lda $0CAA.w,X		; BD AA 0C ; Load $0CAA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CAA.w,X		; 9D AA 0C ; Store accumulator to $0CAA.w,X [Reads: Accumulator, X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	stx $B9.b		; 86 B9 ; Store X register to $B9.b [Reads: X Index]
	ldx $B9.b		; A6 B9 ; Load $B9.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	sbc ($B9.b)		; F2 B9 ; Subtract with carry (indirect) ($B9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $BA		; 70 BA ; Branch if overflow set to $70, $BA [Flow: branch]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	lda $AABD.w,Y		; B9 BD AA ; Load $AABD.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $FB29.w		; 0C 29 FB ; Test and set bits $FB29.w [Reads: Accumulator] [Flags: Z]
	sta $0CAA.w,X		; 9D AA 0C ; Store accumulator to $0CAA.w,X [Reads: Accumulator, X Index]
	stz $0E30.w,X		; 9E 30 0E ; Store zero to $0E30.w,X [Reads: X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $0F80.w,X		; BD 80 0F ; Load $0F80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	stz $0EF0.w,X		; 9E F0 0E ; Store zero to $0EF0.w,X [Reads: X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $1D		; 90 1D ; Branch if carry clear to $90, $1D [Flow: branch]
	cmp #$4E.b		; C9 4E ; Compare #$4E.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $18		; B0 18 ; Branch if carry set to $B0, $18 [Flow: branch]
	cmp #$3F.b		; C9 3F ; Compare #$3F.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $14		; 90 14 ; Branch if carry clear to $90, $14 [Flow: branch]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$CD.b		; C9 CD ; Compare #$CD.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $00F207.l		; 22 07 F2 00 ; Jump to subroutine long $00F207.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $00F183.l		; 22 83 F1 00 ; Jump to subroutine long $00F183.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$CD.b		; C9 CD ; Compare #$CD.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $00F253.l		; 22 53 F2 00 ; Jump to subroutine long $00F253.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $00F1CF.l		; 22 CF F1 00 ; Jump to subroutine long $00F1CF.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$40.b		; 09 40 ; Logical OR #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,X		; 9D 80 0E ; Store accumulator to $0E80.w,X [Reads: Accumulator, X Index]
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $46		; D0 46 ; Branch if not equal to $D0, $46 [Flow: branch]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $36		; B0 36 ; Branch if carry set to $B0, $36 [Flow: branch]
	cmp $0DE0.w,X		; DD E0 0D ; Compare accumulator $0DE0.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $31		; F0 31 ; Branch if equal to $F0, $31 [Flow: branch]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $25		; D0 25 ; Branch if not equal to $D0, $25 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $1E		; B0 1E ; Branch if carry set to $B0, $1E [Flow: branch]
	lda $0D80.w		; AD 80 0D ; Load $0D80.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $17		; B0 17 ; Branch if carry set to $B0, $17 [Flow: branch]
	inc $0DC0.w,X		; FE C0 0D ; Increment memory $0DC0.w,X [Reads: X Index] [Flags: ZN]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	nop		; EA ; No operation
	nop		; EA ; No operation
	stz $0DC0.w,X		; 9E C0 0D ; Store zero to $0DC0.w,X [Reads: X Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $01.b		; 64 01 ; Store zero to $01.b
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $0DE0.w,X		; 7D E0 0D ; Add $0DE0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $BB6D.w,X		; BD 6D BB ; Load $BB6D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $1D10.w,X		; BD 10 1D ; Load $1D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $B830.w,Y		; D9 30 B8 ; Compare accumulator $B830.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	.db $10, $07		; 10 07 ; Branch if plus to $10, $07 [Flow: branch]
	inc $1D10.w,X		; FE 10 1D ; Increment memory $1D10.w,X [Reads: X Index] [Flags: ZN]
	inc $01.b		; E6 01 ; Increment $01.b [Reads: Direct Page] [Flags: ZN]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	dec $1D10.w,X		; DE 10 1D ; Decrement memory $1D10.w,X [Reads: X Index] [Flags: ZN]
	inc $01.b		; E6 01 ; Increment $01.b [Reads: Direct Page] [Flags: ZN]
	lda $1D10.w,X		; BD 10 1D ; Load $1D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $B830.w,Y		; D9 30 B8 ; Compare accumulator $B830.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	.db $10, $07		; 10 07 ; Branch if plus to $10, $07 [Flow: branch]
	inc $1D10.w,X		; FE 10 1D ; Increment memory $1D10.w,X [Reads: X Index] [Flags: ZN]
	inc $01.b		; E6 01 ; Increment $01.b [Reads: Direct Page] [Flags: ZN]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	dec $1D10.w,X		; DE 10 1D ; Decrement memory $1D10.w,X [Reads: X Index] [Flags: ZN]
	inc $01.b		; E6 01 ; Increment $01.b [Reads: Direct Page] [Flags: ZN]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	lda $1D50.w,X		; BD 50 1D ; Load $1D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $B85D.w,Y		; D9 5D B8 ; Compare accumulator $B85D.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	.db $10, $07		; 10 07 ; Branch if plus to $10, $07 [Flow: branch]
	inc $1D50.w,X		; FE 50 1D ; Increment memory $1D50.w,X [Reads: X Index] [Flags: ZN]
	inc $01.b		; E6 01 ; Increment $01.b [Reads: Direct Page] [Flags: ZN]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	dec $1D50.w,X		; DE 50 1D ; Decrement memory $1D50.w,X [Reads: X Index] [Flags: ZN]
	inc $01.b		; E6 01 ; Increment $01.b [Reads: Direct Page] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $B2		; 10 B2 ; Branch if plus to $10, $B2 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	dec $0D80.w,X		; DE 80 0D ; Decrement memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $F0BD1F.l,X		; 1F 1F BD F0 ; Logical OR long $F0BD1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $09D0.w		; 0D D0 09 ; Logical OR $09D0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $BAE8.w		; 20 E8 BA ; Jump to subroutine at $BAE8.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $0E		; 90 0E ; Branch if carry clear to $90, $0E [Flow: branch]
	cmp #$79.b		; C9 79 ; Compare #$79.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$80.b		; 69 80 ; Add #$80.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E30.w,X		; 9D 30 0E ; Store accumulator to $0E30.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $42		; 90 42 ; Branch if carry clear to $90, $42 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$40.b		; E9 40 ; Subtract #$40.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $BA68.w,Y		; 39 68 BA ; AND accumulator with memory $BA68.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $34		; D0 34 ; Branch if not equal to $D0, $34 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$03.b		; E9 03 ; Subtract #$03.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sty $01.b		; 84 01 ; Store Y register to $01.b [Reads: Y Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0C.b		; 69 0C ; Add #$0C.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	stz $03.b		; 64 03 ; Store zero to $03.b
	jsl $1EA007.l		; 22 07 A0 1E ; Jump to subroutine long $1EA007.l [Writes: Stack Pointer] [Flow: call]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$CC.b		; C9 CC ; Compare #$CC.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0F.b		; A6 0F ; Load $0F.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF800.l,X		; 9F 00 F8 7F ; Store accumulator (long,X) $7FF800.l,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $BD01.w,X		; FE 01 BD ; Increment memory $BD01.w,X [Reads: X Index] [Flags: ZN]
	jsr $C90E.w		; 20 0E C9 ; Jump to subroutine at $C90E.w [Writes: Stack Pointer] [Flow: call]
	cmp $28D0.w		; CD D0 28 ; Compare $28D0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	stz $0FB6.w		; 9C B6 0F ; Store zero to $0FB6.w
	jsr $BAFA.w		; 20 FA BA ; Jump to subroutine at $BAFA.w [Writes: Stack Pointer] [Flow: call]
	inc $0FB6.w		; EE B6 0F ; Increment $0FB6.w [Flags: ZN]
	lda #$CD.b		; A9 CD ; Load #$CD.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $3E		; 30 3E ; Branch if minus to $30, $3E [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0FB6.w		; AE B6 0F ; Load $0FB6.w into X register [Writes: X Index] [Flags: ZN]
	lda $BAE6.w,X		; BD E6 BA ; Load $BAE6.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,Y		; 99 B0 0D ; Store accumulator to $0DB0.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$19.b		; A9 19 ; Load #$19.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $21		; 30 21 ; Branch if minus to $30, $21 [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda #$2A.b		; A9 2A ; Load #$2A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E90.w,Y		; 99 90 0E ; Store accumulator to $0E90.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,Y		; 99 60 0E ; Store accumulator to $0E60.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $28		; D0 28 ; Branch if not equal to $D0, $28 [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	dec $0E80.w,X		; DE 80 0E ; Decrement memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E2.b		; 65 E2 ; Add $E2.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0FD8.w		; 8D D8 0F ; Store accumulator to $0FD8.w [Reads: Accumulator]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E8.b		; 65 E8 ; Add $E8.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0FDA.w		; 8D DA 0F ; Store accumulator to $0FDA.w [Reads: Accumulator]
	jsl $1DDC2A.l		; 22 2A DC 1D ; Jump to subroutine long $1DDC2A.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($BD.b)		; 12 BD ; OR accumulator with memory (indirect) ($BD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,X		; [PATTERN: Memory clearing operation] 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
	jsr $E9AD.w		; 20 AD E9 ; Jump to subroutine at $E9AD.w [Writes: Stack Pointer] [Flow: call]
	stz $0FB5.w		; 9C B5 0F ; Store zero to $0FB5.w
	stz $0FB6.w		; 9C B6 0F ; Store zero to $0FB6.w
	ldy $0FB5.w		; AC B5 0F ; Load $0FB5.w into Y register [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $BB6D.w,X		; 7D 6D BB ; Add $BB6D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	lda $1D10.w,Y		; B9 10 1D ; Load $1D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	lda $1D10.w,Y		; B9 10 1D ; Load $1D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	lda $1D50.w,Y		; B9 50 1D ; Load $1D50.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $04E800.l,X		; BF 00 E8 04 ; Load long $04E800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $04E800.l,X		; BF 00 E8 04 ; Load long $04E800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta WRMPYA.w		; 8D 02 42 ; Store accumulator to WRMPYA.w [Reads: Accumulator]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $0B.b		; A4 0B ; Load $0B.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	sta WRMPYB.w		; 8D 03 42 ; Store accumulator to WRMPYB.w [Reads: Accumulator]
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	asl $4216.w		; 0E 16 42 ; Arithmetic shift left $4216.w [Flags: ZNC]
	lda RDMPYH.w		; AD 17 42 ; Load RDMPYH.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lsr $07.b		; 46 07 ; Logical shift right $07.b [Reads: Direct Page] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0FA8.w		; 8D A8 0F ; Store accumulator to $0FA8.w [Reads: Accumulator]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta WRMPYA.w		; 8D 02 42 ; Store accumulator to WRMPYA.w [Reads: Accumulator]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $0D.b		; A4 0D ; Load $0D.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	sta WRMPYB.w		; 8D 03 42 ; Store accumulator to WRMPYB.w [Reads: Accumulator]
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	asl $4216.w		; 0E 16 42 ; Arithmetic shift left $4216.w [Flags: ZNC]
	lda RDMPYH.w		; AD 17 42 ; Load RDMPYH.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lsr $09.b		; 46 09 ; Logical shift right $09.b [Reads: Direct Page] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0FA9.w		; 8D A9 0F ; Store accumulator to $0FA9.w [Reads: Accumulator]
	lda $0FB5.w		; AD B5 0F ; Load $0FB5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	jsr $BCA0.w		; 20 A0 BC ; Jump to subroutine at $BCA0.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $35		; 80 35 ; Branch always to $80, $35 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0FA8.w		; 6D A8 0F ; Add $0FA8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldy $0FB6.w		; AC B6 0F ; Load $0FB6.w into Y register [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta $0FD8.w		; 8D D8 0F ; Store accumulator to $0FD8.w [Reads: Accumulator]
	lda $0FA9.w		; AD A9 0F ; Load $0FA9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldy $0FB6.w		; AC B6 0F ; Load $0FB6.w into Y register [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta $0FDA.w		; 8D DA 0F ; Store accumulator to $0FDA.w [Reads: Accumulator]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sty $0FB6.w		; 8C B6 0F ; Store Y register to $0FB6.w [Reads: Y Index]
	inc $0FB5.w		; EE B5 0F ; Increment $0FB5.w [Flags: ZN]
	lda $0FB5.w		; AD B5 0F ; Load $0FB5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $0E80.w,X		; DD 80 0E ; Compare accumulator $0E80.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $BB95.w		; 4C 95 BB ; Jump to $BB95.w [Flow: jump]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06FEB4.l		; 22 B4 FE 06 ; Jump to subroutine long $06FEB4.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $24.b		; 04 24 ; Test and set bits $24.b [Reads: Accumulator] [Flags: Z]
	bit $0A.b		; 24 0A ; Test bits $0A.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0E30.w,X		; BD 30 0E ; Load $0E30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	ldy $0FB6.w		; AC B6 0F ; Load $0FB6.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $0FA8.w		; AD A8 0F ; Load $0FA8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0FD8.w		; 8D D8 0F ; Store accumulator to $0FD8.w [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $BC8C.w,X		; 7D 8C BC ; Add $BC8C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $0FA9.w		; AD A9 0F ; Load $0FA9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0FDA.w		; 8D DA 0F ; Store accumulator to $0FDA.w [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $BC91.w,X		; 7D 91 BC ; Add $BC91.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $BC96.w,X		; BD 96 BC ; Load $BC96.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $BC9B.w,X		; 1D 9B BC ; OR accumulator with memory $BC9B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$05.b		; E0 05 ; Compare #$05.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $BC		; D0 BC ; Branch if not equal to $D0, $BC [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0FB6.w		; AD B6 0F ; Load $0FB6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$14.b		; 69 14 ; Add #$14.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0FB6.w		; 8D B6 0F ; Store accumulator to $0FB6.w [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0FA8.w		; AD A8 0F ; Load $0FA8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D90.w,X		; 7D 90 0D ; Add $0D90.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $0DA0.w,X		; 7D A0 0D ; Add $0DA0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0FA9.w		; AD A9 0F ; Load $0FA9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0DB0.w,X		; 7D B0 0D ; Add $0DB0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $0ED0.w,X		; 7D D0 0E ; Add $0ED0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	jsl $06E416.l		; 22 16 E4 06 ; Jump to subroutine long $06E416.l [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0DB0.w,X		; 7D B0 0D ; Add $0DB0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	jsr $BD65.w		; 20 65 BD ; Jump to subroutine at $BD65.w [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	jsr $E898.w		; 20 98 E8 ; Jump to subroutine at $E898.w [Writes: Stack Pointer] [Flow: call]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $BD26.w,Y		; D9 26 BD ; Compare accumulator $BD26.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8000.w,Y		; 79 00 80 ; Add $8000.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	jsr $8094.w		; 20 94 80 ; Jump to subroutine at $8094.w [Writes: Stack Pointer] [Flow: call]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $56		; D0 56 ; Branch if not equal to $D0, $56 [Flow: branch]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldx #$1D.b		; A2 1D ; Load #$1D.b into X register [Writes: X Index] [Flags: ZN]
	lda $7FF800.l,X		; BF 00 F8 7F ; Load long $7FF800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F7		; 10 F7 ; Branch if plus to $10, $F7 [Flow: branch]
	dec $0FF8.w		; CE F8 0F ; Decrement $0FF8.w [Flags: ZN]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	lda #$1D.b		; A9 1D ; Load #$1D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FF8.w		; 8D F8 0F ; Store accumulator to $0FF8.w [Reads: Accumulator]
	ldx $0FF8.w		; AE F8 0F ; Load $0FF8.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF800.l,X		; 9F 00 F8 7F ; Store accumulator (long,X) $7FF800.l,X [Reads: Accumulator, X Index]
	sta $0FB4.w		; 8D B4 0F ; Store accumulator to $0FB4.w [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FF92C.l,X		; 9F 2C F9 7F ; Store accumulator (long,X) $7FF92C.l,X [Reads: Accumulator, X Index]
	lda $0D10.w,Y		; B9 10 0D ; Load $0D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FF83C.l,X		; 9F 3C F8 7F ; Store accumulator (long,X) $7FF83C.l,X [Reads: Accumulator, X Index]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FF878.l,X		; 9F 78 F8 7F ; Store accumulator (long,X) $7FF878.l,X [Reads: Accumulator, X Index]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF81E.l,X		; 9F 1E F8 7F ; Store accumulator (long,X) $7FF81E.l,X [Reads: Accumulator, X Index]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF85A.l,X		; 9F 5A F8 7F ; Store accumulator (long,X) $7FF85A.l,X [Reads: Accumulator, X Index]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF90E.l,X		; 9F 0E F9 7F ; Store accumulator (long,X) $7FF90E.l,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $06E416.l		; 22 16 E4 06 ; Jump to subroutine long $06E416.l [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	jsr $BDD6.w		; 20 D6 BD ; Jump to subroutine at $BDD6.w [Writes: Stack Pointer] [Flow: call]
	jmp $BD44.w		; 4C 44 BD ; Jump to $BD44.w [Flow: jump]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $5B		; D0 5B ; Branch if not equal to $D0, $5B [Flow: branch]
	lda #$2A.b		; A9 2A ; Load #$2A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	lda #$1D.b		; A9 1D ; Load #$1D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7FF800.l,X		; BF 00 F8 7F ; Load long $7FF800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F7		; 10 F7 ; Branch if plus to $10, $F7 [Flow: branch]
	dec $0FF8.w		; CE F8 0F ; Decrement $0FF8.w [Flags: ZN]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0FF8.w		; 8D F8 0F ; Store accumulator to $0FF8.w [Reads: Accumulator]
	ldx $0FF8.w		; AE F8 0F ; Load $0FF8.w into X register [Writes: X Index] [Flags: ZN]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF800.l,X		; 9F 00 F8 7F ; Store accumulator (long,X) $7FF800.l,X [Reads: Accumulator, X Index]
	sta $0FB4.w		; 8D B4 0F ; Store accumulator to $0FB4.w [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FF92C.l,X		; 9F 2C F9 7F ; Store accumulator (long,X) $7FF92C.l,X [Reads: Accumulator, X Index]
	lda $0D10.w,Y		; B9 10 0D ; Load $0D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FF83C.l,X		; 9F 3C F8 7F ; Store accumulator (long,X) $7FF83C.l,X [Reads: Accumulator, X Index]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FF878.l,X		; 9F 78 F8 7F ; Store accumulator (long,X) $7FF878.l,X [Reads: Accumulator, X Index]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF81E.l,X		; 9F 1E F8 7F ; Store accumulator (long,X) $7FF81E.l,X [Reads: Accumulator, X Index]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF85A.l,X		; 9F 5A F8 7F ; Store accumulator (long,X) $7FF85A.l,X [Reads: Accumulator, X Index]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF90E.l,X		; 9F 0E F9 7F ; Store accumulator (long,X) $7FF90E.l,X [Reads: Accumulator, X Index]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $4030.w		; 20 30 40 ; Jump to subroutine at $4030.w [Writes: Stack Pointer] [Flow: call]
	.db $50, $60		; 50 60 ; Branch if overflow clear to $50, $60 [Flow: branch]
	.db $70, $DA		; 70 DA ; Branch if overflow set to $70, $DA [Flow: branch]
	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $1DBE3C.l,X		; BF 3C BE 1D ; Load long $1DBE3C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FFC00.l,X		; 9F 00 FC 7F ; Store accumulator (long,X) $7FFC00.l,X [Reads: Accumulator, X Index]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FFD00.l,X		; 9F 00 FD 7F ; Store accumulator (long,X) $7FFD00.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $ED		; 10 ED ; Branch if plus to $10, $ED [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DA0.w,X		; 9D A0 0D ; Store accumulator to $0DA0.w,X [Reads: Accumulator, X Index]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0ED0.w,X		; 9D D0 0E ; Store accumulator to $0ED0.w,X [Reads: Accumulator, X Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $C192.w		; 20 92 C1 ; Jump to subroutine at $C192.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jsr $C211.w		; 20 11 C2 ; Jump to subroutine at $C211.w [Writes: Stack Pointer] [Flow: call]
	jsr $C0F2.w		; 20 F2 C0 ; Jump to subroutine at $C0F2.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	jsl $1DF614.l		; 22 14 F6 1D ; Jump to subroutine long $1DF614.l [Writes: Stack Pointer] [Flow: call]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	jsr $E948.w		; 20 48 E9 ; Jump to subroutine at $E948.w [Writes: Stack Pointer] [Flow: call]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	dec $0F80.w,X		; [PATTERN: Memory clearing operation] DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $06		; 10 06 ; Branch if plus to $10, $06 [Flow: branch]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	stz $0F80.w,X		; 9E 80 0F ; Store zero to $0F80.w,X [Reads: X Index]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	stz $0EC0.w,X		; 9E C0 0E ; Store zero to $0EC0.w,X [Reads: X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0030.w		; 69 30 00 ; Add #$0030.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0060.w		; C9 60 00 ; Compare #$0060.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $14		; B0 14 ; Branch if carry set to $B0, $14 [Flow: branch]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $02.b		; E5 02 ; Subtract $02.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0030.w		; 69 30 00 ; Add #$0030.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0060.w		; C9 60 00 ; Compare #$0060.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	inc $0EC0.w,X		; FE C0 0E ; Increment memory $0EC0.w,X [Reads: X Index] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	bit $95BF.w		; 2C BF 95 ; Test bits $95BF.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	lda $0CBFE5.l,X		; BF E5 BF 0C ; Load long $0CBFE5.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $0E10.w		; 0E 10 0E ; Arithmetic shift left $0E10.w [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F2.b,X		; F5 F2 ; Subtract $F2.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $F2		; F0 F2 ; Branch if equal to $F0, $F2 [Flow: branch]
	sbc $F8.b,X		; F5 F8 ; Subtract $F8.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $F2		; F0 F2 ; Branch if equal to $F0, $F2 [Flow: branch]
	sbc $F8.b,X		; F5 F8 ; Subtract $F8.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $0E10.w		; 0E 10 0E ; Arithmetic shift left $0E10.w [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F2.b,X		; F5 F2 ; Subtract $F2.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $60		; D0 60 ; Branch if not equal to $D0, $60 [Flow: branch]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $34		; D0 34 ; Branch if not equal to $D0, $34 [Flow: branch]
	stz $0E80.w,X		; 9E 80 0E ; Store zero to $0E80.w,X [Reads: X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $BF0C.w,Y		; B9 0C BF ; Load $BF0C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $BF1C.w,Y		; B9 1C BF ; Load $BF1C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA12.l		; 22 12 EA 06 ; Jump to subroutine long $06EA12.l [Writes: Stack Pointer] [Flow: call]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $BF0C.w,Y		; B9 0C BF ; Load $BF0C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $BF1C.w,Y		; B9 1C BF ; Load $BF1C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $C39B.w		; 20 9B C3 ; Jump to subroutine at $C39B.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $C02A.w		; 20 2A C0 ; Jump to subroutine at $C02A.w [Writes: Stack Pointer] [Flow: call]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda $0EC0.w,X		; BD C0 0E ; Load $0EC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $2C		; D0 2C ; Branch if not equal to $D0, $2C [Flow: branch]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA22.l		; 22 22 EA 06 ; Jump to subroutine long $06EA22.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0EC0.w,X		; BD C0 0E ; Load $0EC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	jsr $C39B.w		; 20 9B C3 ; Jump to subroutine at $C39B.w [Writes: Stack Pointer] [Flow: call]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	jsr $C02A.w		; 20 2A C0 ; Jump to subroutine at $C02A.w [Writes: Stack Pointer] [Flow: call]
	jsr $C02A.w		; 20 2A C0 ; Jump to subroutine at $C02A.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $9A00.w		; CD 00 9A ; Compare $9A00.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda $BE3C.w,X		; BD 3C BE ; Load $BE3C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7FFC00.l,X		; BF 00 FC 7F ; Load long $7FFC00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $7FFD00.l,X		; BF 00 FD 7F ; Load long $7FFD00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $02.b		; E5 02 ; Subtract $02.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta WRMPYA.w		; 8D 02 42 ; Store accumulator to WRMPYA.w [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $C01E.w,X		; BD 1E C0 ; Load $C01E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta WRMPYB.w		; 8D 03 42 ; Store accumulator to WRMPYB.w [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	lda RDMPYH.w		; AD 17 42 ; Load RDMPYH.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $01.b		; 65 01 ; Add $01.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta WRMPYA.w		; 8D 02 42 ; Store accumulator to WRMPYA.w [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $C01E.w,X		; BD 1E C0 ; Load $C01E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta WRMPYB.w		; 8D 03 42 ; Store accumulator to WRMPYB.w [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	lda RDMPYH.w		; AD 17 42 ; Load RDMPYH.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $03.b		; 65 03 ; Add $03.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $7FFC00.l,X		; BF 00 FC 7F ; Load long $7FFC00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $08.b		; C5 08 ; Compare $08.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7FFC00.l,X		; 9F 00 FC 7F ; Store accumulator (long,X) $7FFC00.l,X [Reads: Accumulator, X Index]
	lda $7FFD00.l,X		; BF 00 FD 7F ; Load long $7FFD00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $0A.b		; C5 0A ; Compare $0A.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7FFD00.l,X		; 9F 00 FD 7F ; Store accumulator (long,X) $7FFD00.l,X [Reads: Accumulator, X Index]
.ACCU 8
	sep #$20		; E2 20
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0D.b		; C6 0D ; Decrement $0D.b [Reads: Direct Page] [Flags: ZN]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	jmp $C05B.w		; 4C 5B C0 ; Jump to $C05B.w [Flow: jump]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $BE3C.w,X		; BD 3C BE ; Load $BE3C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FFC00.l,X		; 9F 00 FC 7F ; Store accumulator (long,X) $7FFC00.l,X [Reads: Accumulator, X Index]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FFD00.l,X		; 9F 00 FD 7F ; Store accumulator (long,X) $7FFD00.l,X [Reads: Accumulator, X Index]
	lda $7FFC00.l,X		; BF 00 FC 7F ; Load long $7FFC00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $7FFC02.l,X		; FF 02 FC 7F ; Subtract with carry (long,X) $7FFC02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0008.w		; C9 08 00 ; Compare #$0008.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $13		; 10 13 ; Branch if plus to $10, $13 [Flow: branch]
	cmp #$FFF8.w		; C9 F8 FF ; Compare #$FFF8.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $1A		; 10 1A ; Branch if plus to $10, $1A [Flow: branch]
	lda $7FFC00.l,X		; BF 00 FC 7F ; Load long $7FFC00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7FFC02.l,X		; 9F 02 FC 7F ; Store accumulator (long,X) $7FFC02.l,X [Reads: Accumulator, X Index]
	.db $80, $0C		; 80 0C ; Branch always to $80, $0C [Flow: branch]
	lda $7FFC00.l,X		; BF 00 FC 7F ; Load long $7FFC00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0008.w		; E9 08 00 ; Subtract #$0008.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $7FFC02.l,X		; 9F 02 FC 7F ; Store accumulator (long,X) $7FFC02.l,X [Reads: Accumulator, X Index]
	lda $7FFD00.l,X		; BF 00 FD 7F ; Load long $7FFD00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $7FFD02.l,X		; FF 02 FD 7F ; Subtract with carry (long,X) $7FFD02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0008.w		; C9 08 00 ; Compare #$0008.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $13		; 10 13 ; Branch if plus to $10, $13 [Flow: branch]
	cmp #$FFF8.w		; C9 F8 FF ; Compare #$FFF8.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $1A		; 10 1A ; Branch if plus to $10, $1A [Flow: branch]
	lda $7FFD00.l,X		; BF 00 FD 7F ; Load long $7FFD00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7FFD02.l,X		; 9F 02 FD 7F ; Store accumulator (long,X) $7FFD02.l,X [Reads: Accumulator, X Index]
	.db $80, $0C		; 80 0C ; Branch always to $80, $0C [Flow: branch]
	lda $7FFD00.l,X		; BF 00 FD 7F ; Load long $7FFD00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0008.w		; E9 08 00 ; Subtract #$0008.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $7FFD02.l,X		; 9F 02 FD 7F ; Store accumulator (long,X) $7FFD02.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0006.w		; C9 06 00 ; Compare #$0006.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $9B		; 90 9B ; Branch if carry clear to $90, $9B [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $C172.w,Y		; B9 72 C1 ; Load $C172.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $C182.w,Y		; 19 82 C1 ; OR accumulator with memory $C182.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsl $06DBF0.l		; 22 F0 DB 06 ; Jump to subroutine long $06DBF0.l [Writes: Stack Pointer] [Flow: call]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	stz $09.b		; 64 09 ; Store zero to $09.b
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $BE3C.w,X		; BD 3C BE ; Load $BE3C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $7FFC00.l,X		; BF 00 FC 7F ; Load long $7FFC00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $7FFD00.l,X		; BF 00 FD 7F ; Load long $7FFD00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$8B.b		; A9 8B ; Load #$8B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0D.b		; 09 0D ; Logical OR #$0D.b with accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0D.b		; C6 0D ; Decrement $0D.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $B2		; 10 B2 ; Branch if plus to $10, $B2 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $06F2AA.l		; 22 AA F2 06 ; Jump to subroutine long $06F2AA.l [Writes: Stack Pointer] [Flow: call]
	jsl $06F121.l		; 22 21 F1 06 ; Jump to subroutine long $06F121.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $C222.w		; 20 22 C2 ; Jump to subroutine at $C222.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$BD.b		; E9 BD ; Subtract #$BD.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $C237.w,Y		; B9 37 C2 ; Load $C237.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx $73.b		; E4 73 ; Compare $73.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc [$ED.b]		; E7 ED ; Subtract with carry (long) [$ED.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $49.b,S		; E3 49 ; Subtract stack-relative $49.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cmp $CBD234.l,X		; DF 34 D2 CB ; Compare accumulator (long,X) $CBD234.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $D8CCE1.l		; CF E1 CC D8 ; Compare accumulator (long) $D8CCE1.l [Reads: Accumulator] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp [$69.b]		; C7 69 ; Compare accumulator (long) [$69.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor $C414C6.l		; 4F C6 14 C4 ; Exclusive OR accumulator with memory (long) $C414C6.l [Writes: Accumulator] [Flags: ZN]
	adc $C2.b,X		; 75 C2 ; Add $C2.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $CABE.w,X		; 7D BE CA ; Add $CABE.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $97		; B0 97 ; Branch if carry set to $B0, $97 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sta $A263B8.l,X		; 9F B8 63 A2 ; Store accumulator (long,X) $A263B8.l,X [Reads: Accumulator, X Index]
	.db $B0, $9C		; B0 9C ; Branch if carry set to $B0, $9C [Flow: branch]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	stx $8B.b		; 86 8B ; Store X register to $8B.b [Reads: X Index]
	sta $35.b		; 85 35 ; Store accumulator to $35.b [Reads: Accumulator]
	.db $82, $29, $81		; 82 29 81 ; Branch always long to $82, $29, $81 [Flow: branch]
	sta $3880.w,Y		; 99 80 38 ; Store accumulator to $3880.w,Y [Reads: Accumulator, Y Index]
	jsr ($8EB4.w,X)		; FC B4 8E ; Jump to subroutine indirect indexed ($8EB4.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ldy $8E.b,X		; B4 8E ; Load Y register $8E.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	lda $0EC0.w,X		; BD C0 0E ; Load $0EC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	sta $0BA0.w,X		; 9D A0 0B ; Store accumulator to $0BA0.w,X [Reads: Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	ldy $B688.w,X		; BC 88 B6 ; Load Y register $B688.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($8B.b)		; 52 8B ; Exclusive OR accumulator with memory (indirect) ($8B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$8B.b],Y		; D7 8B ; Compare accumulator (long indexed) [$8B.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	eor #$8B.b		; 49 8B ; Exclusive OR #$8B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stz $0DC0.w,X		; 9E C0 0D ; Store zero to $0DC0.w,X [Reads: X Index]
	jsr $C3F5.w		; 20 F5 C3 ; Jump to subroutine at $C3F5.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8C5.w		; 20 C5 E8 ; Jump to subroutine at $E8C5.w [Writes: Stack Pointer] [Flow: call]
	jsr $C211.w		; 20 11 C2 ; Jump to subroutine at $C211.w [Writes: Stack Pointer] [Flow: call]
	jsr $E948.w		; 20 48 E9 ; Jump to subroutine at $E948.w [Writes: Stack Pointer] [Flow: call]
	jsr $C751.w		; 20 51 C7 ; Jump to subroutine at $C751.w [Writes: Stack Pointer] [Flow: call]
	lda $0F80.w,X		; BD 80 0F ; Load $0F80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$01.b		; E9 01 ; Subtract #$01.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0F80.w,X		; [PATTERN: Memory clearing operation] 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $06		; 10 06 ; Branch if plus to $10, $06 [Flow: branch]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	stz $0F80.w,X		; 9E 80 0F ; Store zero to $0F80.w,X [Reads: X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	cmp ($C2.b)		; D2 C2 ; Compare accumulator (indirect) ($C2.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp $A8.b,S		; C3 A8 ; Compare accumulator (stack relative) $A8.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $03.b,S		; C3 03 ; Compare accumulator (stack relative) $03.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($E8.b,S),Y		; 93 E8 ; Store accumulator (stack relative indirect indexed) ($E8.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$28.b		; 69 28 ; Add #$28.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$50.b		; C9 50 ; Compare #$50.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $4A		; B0 4A ; Branch if carry set to $B0, $4A [Flow: branch]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$28.b		; 69 28 ; Add #$28.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$50.b		; C9 50 ; Compare #$50.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $41		; B0 41 ; Branch if carry set to $B0, $41 [Flow: branch]
	lda $44.b		; A5 44 ; Load $44.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $3B		; F0 3B ; Branch if equal to $F0, $3B [Flow: branch]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0F00.w,X		; 1D 00 0F ; OR accumulator with memory $0F00.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $33		; D0 33 ; Branch if not equal to $D0, $33 [Flow: branch]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $0F20.w,X		; DD 20 0F ; Compare accumulator $0F20.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $2C		; D0 2C ; Branch if not equal to $D0, $2C [Flow: branch]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $C2CE.w,Y		; D9 CE C2 ; Compare accumulator $C2CE.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA1A.l		; 22 1A EA 06 ; Jump to subroutine long $06EA1A.l [Writes: Stack Pointer] [Flow: call]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $51		; D0 51 ; Branch if not equal to $D0, $51 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	inc $0DA0.w,X		; FE A0 0D ; Increment memory $0DA0.w,X [Reads: X Index] [Flags: ZN]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $25		; D0 25 ; Branch if not equal to $D0, $25 [Flow: branch]
	stz $0DA0.w,X		; 9E A0 0D ; Store zero to $0DA0.w,X [Reads: X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$30.b		; 69 30 ; Add #$30.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	jsr $E89D.w		; 20 9D E8 ; Jump to subroutine at $E89D.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	jsr $E898.w		; 20 98 E8 ; Jump to subroutine at $E898.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $80, $11		; 80 11 ; Branch always to $80, $11 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$18.b		; 69 18 ; Add #$18.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $C26D.w,Y		; B9 6D C2 ; Load $C26D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $C271.w,Y		; B9 71 C2 ; Load $C271.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$3F.b		; [PATTERN: Memory clearing operation] 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$48.b		; 69 48 ; Add #$48.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	stz $0D40.w,X		; 9E 40 0D ; Store zero to $0D40.w,X [Reads: X Index]
	stz $0D50.w,X		; 9E 50 0D ; Store zero to $0D50.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $E0		; F0 E0 ; Branch if equal to $F0, $E0 [Flow: branch]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	inc $0F70.w,X		; FE 70 0F ; Increment memory $0F70.w,X [Reads: X Index] [Flags: ZN]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $C80000.l,X		; FF 00 00 C8 ; Subtract with carry (long,X) $C80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $CA0000.l,X		; FF 00 00 CA ; Subtract with carry (long,X) $CA0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $EA0000.l,X		; FF 00 00 EA ; Subtract with carry (long,X) $EA0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EA.b		; 00 EA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$C3C5.w		; 69 C5 C3 ; Add #$C3C5.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8549.w		; 20 49 85 ; Jump to subroutine at $8549.w [Writes: Stack Pointer] [Flow: call]
	jsl $06DC54.l		; 22 54 DC 06 ; Jump to subroutine long $06DC54.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $C4BF.w		; 4C BF C4 ; Jump to $C4BF.w [Flow: jump]
	jsl $06E416.l		; 22 16 E4 06 ; Jump to subroutine long $06E416.l [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	jsr $C616.w		; 20 16 C6 ; Jump to subroutine at $C616.w [Writes: Stack Pointer] [Flow: call]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$31.b		; A9 31 ; Load #$31.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	eor $C4.b,S		; 43 C4 ; Exclusive OR accumulator with stack relative $C4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit #$C4.b		; 89 C4 ; Test bits #$C4.b with accumulator [Reads: Accumulator] [Flags: Z]
	stz $A9C4.w		; 9C C4 A9 ; Store zero to $A9C4.w
	brk $9D.b		; 00 9D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA12.l		; 22 12 EA 06 ; Jump to subroutine long $06EA12.l [Writes: Stack Pointer] [Flow: call]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FD8.w		; ED D8 0F ; Subtract $0FD8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0003.w		; 69 03 00 ; Add #$0003.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0006.w		; C9 06 00 ; Compare #$0006.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $20		; B0 20 ; Branch if carry set to $B0, $20 [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FDA.w		; ED DA 0F ; Subtract $0FDA.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000B.w		; 69 0B 00 ; Add #$000B.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0006.w		; C9 06 00 ; Compare #$0006.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $11		; B0 11 ; Branch if carry set to $B0, $11 [Flow: branch]
	lda #$00A0.w		; A9 A0 00 ; Load #$00A0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7EF372.l		; 6F 72 F3 7E ; Add with carry (long) $7EF372.l [Writes: Accumulator] [Flags: ZVNC]
	sta $7EF372.l		; 8F 72 F3 7E ; Store accumulator (long) $7EF372.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF36D.l		; AF 6D F3 7E ; Load long $7EF36D.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $7EF36C.l		; CF 6C F3 7E ; Compare accumulator (long) $7EF36C.l [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$70.b		; A9 70 ; Load #$70.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E10.w		; 8D 10 0E ; Store accumulator to $0E10.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $16		; 30 16 ; Branch if minus to $30, $16 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	rol $0D90.w,X		; 3E 90 0D ; Rotate left $0D90.w,X [Reads: X Index] [Flags: ZNC]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $0B		; [PATTERN: Memory clearing operation] 90 0B ; Branch if carry clear to $90, $0B [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E10.w,X		; BD 10 0E ; Load $0E10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $01		; 90 01 ; Branch if carry clear to $90, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $C5D0.w		; 20 D0 C5 ; Jump to subroutine at $C5D0.w [Writes: Stack Pointer] [Flow: call]
	dec $0ED0.w,X		; DE D0 0E ; Decrement memory $0ED0.w,X [Reads: X Index] [Flags: ZN]
	.db $10, $0E		; 10 0E ; Branch if plus to $10, $0E [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0ED0.w,X		; 9D D0 0E ; Store accumulator to $0ED0.w,X [Reads: Accumulator, X Index]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	sbc $4FC4.w,Y		; F9 C4 4F ; Subtract with carry $4FC4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $20.b		; C5 20 ; Compare $20.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	asl $C6.b,X		; 16 C6 ; Arithmetic shift left $C6.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	jsr $E893.w		; 20 93 E8 ; Jump to subroutine at $E893.w [Writes: Stack Pointer] [Flow: call]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$30.b		; 69 30 ; Add #$30.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$60.b		; C9 60 ; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $41		; B0 41 ; Branch if carry set to $B0, $41 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$30.b		; 69 30 ; Add #$30.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$60.b		; C9 60 ; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $38		; B0 38 ; Branch if carry set to $B0, $38 [Flow: branch]
	jsl $0791B9.l		; 22 B9 91 07 ; Jump to subroutine long $0791B9.l [Writes: Stack Pointer] [Flow: call]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$5A.b		; A9 5A ; Load #$5A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF1.w		; 8D F1 1C ; Store accumulator to $1CF1.w [Reads: Accumulator]
	jsl $05FA8E.l		; 22 8E FA 05 ; Jump to subroutine long $05FA8E.l [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
	lda #$C8.b		; A9 C8 ; Load #$C8.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,Y		; 99 B0 0E ; Store accumulator to $0EB0.w,Y [Reads: Accumulator, Y Index]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0F70.w,X		; FD 70 0F ; Subtract with carry $0F70.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,Y		; 99 70 0F ; Store accumulator to $0F70.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr ($F8FF.w,X)		; FC FF F8 ; Jump to subroutine indirect indexed ($F8FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $00008E.l,X		; FF 8E 00 00 ; Subtract with carry (long,X) $00008E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00408E.l,X		; FF 8E 40 00 ; Subtract with carry (long,X) $00408E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AE0008.l,X		; FF 08 00 AE ; Subtract with carry (long,X) $AE0008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($F8FF.w,X)		; FC FF F8 ; Jump to subroutine indirect indexed ($F8FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $00008C.l,X		; FF 8C 00 00 ; Subtract with carry (long,X) $00008C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00408C.l,X		; FF 8C 40 00 ; Subtract with carry (long,X) $00408C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AC0008.l,X		; FF 08 00 AC ; Subtract with carry (long,X) $AC0008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($F8FF.w,X)		; FC FF F8 ; Jump to subroutine indirect indexed ($F8FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $00008A.l,X		; FF 8A 00 00 ; Subtract with carry (long,X) $00008A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00408A.l,X		; FF 8A 40 00 ; Subtract with carry (long,X) $00408A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AA0008.l,X		; FF 08 00 AA ; Subtract with carry (long,X) $AA0008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($F8FF.w,X)		; FC FF F8 ; Jump to subroutine indirect indexed ($F8FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $00008C.l,X		; FF 8C 00 00 ; Subtract with carry (long,X) $00008C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00408C.l,X		; FF 8C 40 00 ; Subtract with carry (long,X) $00408C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AC0008.l,X		; FF 08 00 AC ; Subtract with carry (long,X) $AC0008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$C550.w		; 69 50 C5 ; Add #$C550.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8549.w		; 20 49 85 ; Jump to subroutine at $8549.w [Writes: Stack Pointer] [Flow: call]
	jsl $06DC54.l		; 22 54 DC 06 ; Jump to subroutine long $06DC54.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pea $00FA.w		; F4 FA 00 ; Push absolute address $00FA.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: ZNC]
	ora ($F7.b)		; 12 F7 ; OR accumulator with memory (indirect) ($F7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0903.w,X		; FD 03 09 ; Subtract with carry $0903.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FFFF15.l		; 0F 15 FF FF ; OR accumulator with memory (long) $FFFF15.l [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$BD.b		; 09 BD ; Logical OR #$BD.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	.db $30, $33		; 30 33 ; Branch if minus to $30, $33 [Flow: branch]
	and $0E80.w,X		; 3D 80 0E ; AND accumulator with memory $0E80.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $2E		; D0 2E ; Branch if not equal to $D0, $2E [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $C606.w,Y		; B9 06 C6 ; Load $C606.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $C5EE.w,Y		; B9 EE C5 ; Load $C5EE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $C5FA.w,Y		; B9 FA C5 ; Load $C5FA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $C606.w,Y		; B9 06 C6 ; Load $C606.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $C5EE.w,Y		; B9 EE C5 ; Load $C5EE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $C5FA.w,Y		; B9 FA C5 ; Load $C5FA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	jsl $1EA007.l		; 22 07 A0 1E ; Jump to subroutine long $1EA007.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $46		; F0 46 ; Branch if equal to $F0, $46 [Flow: branch]
	jsl $06DBF0.l		; 22 F0 DB 06 ; Jump to subroutine long $06DBF0.l [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jsr $C211.w		; 20 11 C2 ; Jump to subroutine at $C211.w [Writes: Stack Pointer] [Flow: call]
	jsr $E948.w		; 20 48 E9 ; Jump to subroutine at $E948.w [Writes: Stack Pointer] [Flow: call]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	jsr $C751.w		; 20 51 C7 ; Jump to subroutine at $C751.w [Writes: Stack Pointer] [Flow: call]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda #$21.b		; A9 21 ; Load #$21.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $13		; 90 13 ; Branch if carry clear to $90, $13 [Flow: branch]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	stz $0BE0.w,X		; 9E E0 0B ; Store zero to $0BE0.w,X [Reads: X Index]
	lda #$1E.b		; A9 1E ; Load #$1E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $C77D.w		; 20 7D C7 ; Jump to subroutine at $C77D.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $0EA0.w,X		; BD A0 0E ; Load $0EA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $63		; F0 63 ; Branch if equal to $F0, $63 [Flow: branch]
	ldy $0D90.w,X		; BC 90 0D ; Load Y register $0D90.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $F0, $5E		; F0 5E ; Branch if equal to $F0, $5E [Flow: branch]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $5A		; D0 5A ; Branch if not equal to $D0, $5A [Flow: branch]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EA0.w,X		; 9D A0 0E ; Store accumulator to $0EA0.w,X [Reads: Accumulator, X Index]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0DA0.w,X		; 7D A0 0D ; Add $0DA0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	dec $0D90.w,X		; DE 90 0D ; Decrement memory $0D90.w,X [Reads: X Index] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$11.b		; A9 11 ; Load #$11.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda #$C7.b		; A9 C7 ; Load #$C7.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $1D		; 30 1D ; Branch if minus to $30, $1D [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,Y		; 99 B0 0D ; Store accumulator to $0DB0.w,Y [Reads: Accumulator, Y Index]
	sta $0E50.w,Y		; 99 50 0E ; Store accumulator to $0E50.w,Y [Reads: Accumulator, Y Index]
	lda $0F40.w,X		; BD 40 0F ; Load $0F40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda $0F30.w,X		; BD 30 0F ; Load $0F30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CAA.w,Y		; 99 AA 0C ; Store accumulator to $0CAA.w,Y [Reads: Accumulator, Y Index]
	jsr $E8C5.w		; 20 C5 E8 ; Jump to subroutine at $E8C5.w [Writes: Stack Pointer] [Flow: call]
	jsr $C211.w		; 20 11 C2 ; Jump to subroutine at $C211.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	and ($C7.b,X)		; 21 C7 ; Logical AND ($C7.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp [$08.b]		; C7 08 ; Compare accumulator (long) [$08.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$BD.b]		; 07 BD ; OR accumulator with memory (long) [$BD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $C719.w,Y		; B9 19 C7 ; Load $C719.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DA0.w,X		; 9D A0 0D ; Store accumulator to $0DA0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E948.w		; 20 48 E9 ; Jump to subroutine at $E948.w [Writes: Stack Pointer] [Flow: call]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	dec $0F80.w,X		; [PATTERN: Memory clearing operation] DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	jsr $8094.w		; 20 94 80 ; Jump to subroutine at $8094.w [Writes: Stack Pointer] [Flow: call]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	inc $0ED0.w,X		; FE D0 0E ; Increment memory $0ED0.w,X [Reads: X Index] [Flags: ZN]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	inc $0ED0.w,X		; FE D0 0E ; Increment memory $0ED0.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $C751.w		; 20 51 C7 ; Jump to subroutine at $C751.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E9AD.w		; 20 AD E9 ; Jump to subroutine at $E9AD.w [Writes: Stack Pointer] [Flow: call]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0C.b		; 69 0C ; Add #$0C.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $06.b		; E5 06 ; Subtract $06.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$A0.b		; A9 A0 ; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$A2.b		; A9 A2 ; Load #$A2.b into accumulator [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: ZNC]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$20.b		; E9 20 ; Subtract #$20.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0F.b		; 05 0F ; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$07.b		; E9 07 ; Subtract #$07.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $AC		; 10 AC ; Branch if plus to $10, $AC [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsl $06DC54.l		; 22 54 DC 06 ; Jump to subroutine long $06DC54.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $06E416.l		; 22 16 E4 06 ; Jump to subroutine long $06E416.l [Writes: Stack Pointer] [Flow: call]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $38		; D0 38 ; Branch if not equal to $D0, $38 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	sta $0E30.w,X		; 9D 30 0E ; Store accumulator to $0E30.w,X [Reads: Accumulator, X Index]
	jsr $8094.w		; 20 94 80 ; Jump to subroutine at $8094.w [Writes: Stack Pointer] [Flow: call]
	.db $F0, $2A		; F0 2A ; Branch if equal to $F0, $2A [Flow: branch]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda #$19.b		; A9 19 ; Load #$19.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	jsl $0DB818.l		; 22 18 B8 0D ; Jump to subroutine long $0DB818.l [Writes: Stack Pointer] [Flow: call]
	inc $0E90.w,X		; FE 90 0E ; Increment memory $0E90.w,X [Reads: X Index] [Flags: ZN]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$07.b		; E9 07 ; Subtract #$07.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda #$19.b		; A9 19 ; Load #$19.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CAA.w,X		; 9D AA 0C ; Store accumulator to $0CAA.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	lda $0F20.w,X		; BD 20 0F ; Load $0F20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $EE.b		; C5 EE ; Compare $EE.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	jsl $0DDA06.l		; 22 06 DA 0D ; Jump to subroutine long $0DDA06.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $0D		; 30 0D ; Branch if minus to $30, $0D [Flow: branch]
	lda $0CAA.w,Y		; B9 AA 0C ; Load $0CAA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CAA.w,Y		; 99 AA 0C ; Store accumulator to $0CAA.w,Y [Reads: Accumulator, Y Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CD2.w,Y		; 99 D2 0C ; Store accumulator to $0CD2.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $00F4.w		; 0C F4 00 ; Test and set bits $00F4.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pea $0000.w		; F4 00 00 ; Push absolute address $0000.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $06E416.l		; 22 16 E4 06 ; Jump to subroutine long $06E416.l [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $46		; F0 46 ; Branch if equal to $F0, $46 [Flow: branch]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $41		; D0 41 ; Branch if not equal to $D0, $41 [Flow: branch]
	jsl $0DDA06.l		; 22 06 DA 0D ; Jump to subroutine long $0DDA06.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $3B		; 30 3B ; Branch if minus to $30, $3B [Flow: branch]
	jsr $C845.w		; 20 45 C8 ; Jump to subroutine at $C845.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsr $E893.w		; 20 93 E8 ; Jump to subroutine at $E893.w [Writes: Stack Pointer] [Flow: call]
	lda $C865.w,Y		; B9 65 C8 ; Load $C865.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $C863.w,Y		; B9 63 C8 ; Load $C863.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $C853.w,Y		; 79 53 C8 ; Add $C853.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $C857.w,Y		; 79 57 C8 ; Add $C857.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $C85B.w,Y		; 79 5B C8 ; Add $C85B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $C85F.w,Y		; 79 5F C8 ; Add $C85F.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda $0F20.w,X		; BD 20 0F ; Load $0F20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $EE.b		; C5 EE ; Compare $EE.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $05.b		; 02 05 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$06.b		; 09 06 ; Logical OR #$06.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $22.b		; 04 22 ; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
	stz $1DCC.w,X		; 9E CC 1D ; Store zero to $1DCC.w,X [Reads: X Index]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8C5.w		; 20 C5 E8 ; Jump to subroutine at $E8C5.w [Writes: Stack Pointer] [Flow: call]
	jsl $06F2AA.l		; 22 AA F2 06 ; Jump to subroutine long $06F2AA.l [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	jsr $E893.w		; 20 93 E8 ; Jump to subroutine at $E893.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	eor $0DE0.w,X		; 5D E0 0D ; Exclusive OR accumulator with memory $0DE0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	asl $4CC9.w		; 0E C9 4C ; Arithmetic shift left $4CC9.w [Flags: ZNC]
	cmp #$85.b		; C9 85 ; Compare #$85.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$DF.b		; C9 DF ; Compare #$DF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc ($CA.b)		; F2 CA ; Subtract with carry (indirect) ($CA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $2A		; D0 2A ; Branch if not equal to $D0, $2A [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FD8.w		; ED D8 0F ; Subtract $0FD8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0050.w		; 69 50 00 ; Add #$0050.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$00A0.w		; C9 A0 00 ; Compare #$00A0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $19		; B0 19 ; Branch if carry set to $B0, $19 [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FDA.w		; ED DA 0F ; Subtract $0FDA.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0050.w		; 69 50 00 ; Add #$0050.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$00A0.w		; C9 A0 00 ; Compare #$00A0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
.ACCU 8
	sep #$20		; E2 20
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $C8CC.w,Y		; B9 CC C8 ; Load $C8CC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $CAF2.w		; 20 F2 CA ; Jump to subroutine at $CAF2.w [Writes: Stack Pointer] [Flow: call]
	jsr $E893.w		; 20 93 E8 ; Jump to subroutine at $E893.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0DE0.w,X		; 1D E0 0D ; OR accumulator with memory $0DE0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $C8D0.w,Y		; B9 D0 C8 ; Load $C8D0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$12.b		; A9 12 ; Load #$12.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA12.l		; 22 12 EA 06 ; Jump to subroutine long $06EA12.l [Writes: Stack Pointer] [Flow: call]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	jsr $8094.w		; 20 94 80 ; Jump to subroutine at $8094.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $2A		; D0 2A ; Branch if not equal to $D0, $2A [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FD8.w		; ED D8 0F ; Subtract $0FD8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0050.w		; 69 50 00 ; Add #$0050.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$00A0.w		; C9 A0 00 ; Compare #$00A0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0F		; B0 0F ; Branch if carry set to $B0, $0F [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FDA.w		; ED DA 0F ; Subtract $0FDA.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0050.w		; 69 50 00 ; Add #$0050.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$00A0.w		; C9 A0 00 ; Compare #$00A0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $0A		; 90 0A ; Branch if carry clear to $90, $0A [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
.ACCU 8
	sep #$20		; E2 20
	jsl $06F121.l		; 22 21 F1 06 ; Jump to subroutine long $06F121.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $0E		; 90 0E ; Branch if carry clear to $90, $0E [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	jsr $CB30.w		; 20 30 CB ; Jump to subroutine at $CB30.w [Writes: Stack Pointer] [Flow: call]
	jsr $CB19.w		; 20 19 CB ; Jump to subroutine at $CB19.w [Writes: Stack Pointer] [Flow: call]
	jsr $C966.w		; 20 66 C9 ; Jump to subroutine at $C966.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $CAF2.w		; 20 F2 CA ; Jump to subroutine at $CAF2.w [Writes: Stack Pointer] [Flow: call]
	jsr $CA24.w		; 20 24 CA ; Jump to subroutine at $CA24.w [Writes: Stack Pointer] [Flow: call]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	jsr $C972.w		; 20 72 C9 ; Jump to subroutine at $C972.w [Writes: Stack Pointer] [Flow: call]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	jsr $8094.w		; 20 94 80 ; Jump to subroutine at $8094.w [Writes: Stack Pointer] [Flow: call]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	lda $0D10.w,Y		; B9 10 0D ; Load $0D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	jsl $06EB30.l		; 22 30 EB 06 ; Jump to subroutine long $06EB30.l [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0DD0.w,Y		; B9 D0 0D ; Load $0DD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$DC.b		; C9 DC ; Compare #$DC.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$E1.b		; C9 E1 ; Compare #$E1.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$D9.b		; C9 D9 ; Compare #$D9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsr $CA4C.w		; 20 4C CA ; Jump to subroutine at $CA4C.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $E3		; 10 E3 ; Branch if plus to $10, $E3 [Flow: branch]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $24		; D0 24 ; Branch if not equal to $D0, $24 [Flow: branch]
	lda $0D10.w,Y		; B9 10 0D ; Load $0D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA22.l		; 22 22 EA 06 ; Jump to subroutine long $06EA22.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0F10.w,Y		; 19 10 0F ; OR accumulator with memory $0F10.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda $0DD0.w,Y		; B9 D0 0D ; Load $0DD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$DC.b		; C9 DC ; Compare #$DC.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$E1.b		; C9 E1 ; Compare #$E1.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$D9.b		; C9 D9 ; Compare #$D9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $CA9E.w		; 20 9E CA ; Jump to subroutine at $CA9E.w [Writes: Stack Pointer] [Flow: call]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $DC		; 10 DC ; Branch if plus to $10, $DC [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D10.w,Y		; B9 10 0D ; Load $0D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FD8.w		; ED D8 0F ; Subtract $0FD8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0010.w		; C9 10 00 ; Compare #$0010.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $2C		; B0 2C ; Branch if carry set to $B0, $2C [Flow: branch]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FDA.w		; ED DA 0F ; Subtract $0FDA.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0018.w		; C9 18 00 ; Compare #$0018.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $1D		; B0 1D ; Branch if carry set to $B0, $1D [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,Y		; 99 D0 0D ; Store accumulator to $0DD0.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$D8.b		; E9 D8 ; Subtract #$D8.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $06D12D.l,X		; BF 2D D1 06 ; Load long $06D12D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $06F129.l		; 22 29 F1 06 ; Jump to subroutine long $06F129.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $27		; 90 27 ; Branch if carry clear to $90, $27 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA1A.l		; 22 1A EA 06 ; Jump to subroutine long $06EA1A.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F30.w,X		; 9D 30 0F ; Store accumulator to $0F30.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F40.w,X		; 9D 40 0F ; Store accumulator to $0F40.w,X [Reads: Accumulator, X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EA0.w,X		; 9D A0 0E ; Store accumulator to $0EA0.w,X [Reads: Accumulator, X Index]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$F0.b		; E0 F0 ; Compare #$F0.b with X register [Reads: X Index] [Flags: ZNC]
	.db $10, $20		; 10 20 ; Branch if plus to $10, $20 [Flow: branch]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	cmp $DCE1.w,Y		; D9 E1 DC ; Compare accumulator $DCE1.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp $05A9.w,Y		; D9 A9 05 ; Compare accumulator $05A9.w,Y [Reads: Y Index] [Flags: ZNC]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FB6.w		; 8D B6 0F ; Store accumulator to $0FB6.w [Reads: Accumulator]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $7EF360.l		; AF 60 F3 7E ; Load long $7EF360.l into accumulator [Writes: Accumulator] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	lda $7EF377.l		; AF 77 F3 7E ; Load long $7EF377.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	lda $7EF343.l		; AF 43 F3 7E ; Load long $7EF343.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $7B		; F0 7B ; Branch if equal to $F0, $7B [Flow: branch]
	ldy $0FB6.w		; AC B6 0F ; Load $0FB6.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $CB2C.w,Y		; B9 2C CB ; Load $CB2C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$07.b		; A0 07 ; Load #$07.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1DF65F.l		; 22 5F F6 1D ; Jump to subroutine long $1DF65F.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	lda $0FB6.w		; AD B6 0F ; Load $0FB6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $7EF360.l		; AF 60 F3 7E ; Load long $7EF360.l into accumulator [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7EF360.l		; 8F 60 F3 7E ; Store accumulator (long) $7EF360.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	lda $7EF377.l		; AF 77 F3 7E ; Load long $7EF377.l into accumulator [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7EF377.l		; 8F 77 F3 7E ; Store accumulator (long) $7EF377.l [Reads: Accumulator]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	lda $7EF343.l		; AF 43 F3 7E ; Load long $7EF343.l into accumulator [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7EF343.l		; 8F 43 F3 7E ; Store accumulator (long) $7EF343.l [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,Y		; 99 80 0F ; Store accumulator to $0F80.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0FB5.w		; AE B5 0F ; Load $0FB5.w into X register [Writes: X Index] [Flags: ZN]
	lda $CB20.w,X		; BD 20 CB ; Load $CB20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda $CB26.w,X		; BD 26 CB ; Load $CB26.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F10.w,Y		; 99 10 0F ; Store accumulator to $0F10.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,Y		; 99 B0 0E ; Store accumulator to $0EB0.w,Y [Reads: Accumulator, Y Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B58.w,Y		; 99 58 0B ; Store accumulator to $0B58.w,Y [Reads: Accumulator, Y Index]
	dec $0FB5.w		; CE B5 0F ; Decrement $0FB5.w [Flags: ZN]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	jmp $CB35.w		; 4C 35 CB ; Jump to $CB35.w [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000004.l,X		; FF 04 00 00 ; Subtract with carry (long,X) $000004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000004.l,X		; FF 04 00 00 ; Subtract with carry (long,X) $000004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $04FF.w,Y		; F9 FF 04 ; Subtract with carry $04FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000002.l,X		; FF 02 00 00 ; Subtract with carry (long,X) $000002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000002.l,X		; FF 02 00 00 ; Subtract with carry (long,X) $000002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000002.l,X		; FF 02 00 00 ; Subtract with carry (long,X) $000002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004002.l,X		; FF 02 40 00 ; Subtract with carry (long,X) $004002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $02FF.w,Y		; F9 FF 02 ; Subtract with carry $02FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0040.w		; 0E 40 00 ; Arithmetic shift left $0040.w [Flags: ZNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004002.l,X		; FF 02 40 00 ; Subtract with carry (long,X) $004002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$CBD6.w		; 69 D6 CB ; Add #$CBD6.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8549.w		; 20 49 85 ; Jump to subroutine at $8549.w [Writes: Stack Pointer] [Flow: call]
	lda $0F00.w,X		; BD 00 0F ; Load $0F00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $CC96.w,X		; BD 96 CC ; Load $CC96.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $CC9A.w,X		; 1D 9A CC ; OR accumulator with memory $CC9A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsl $06DC54.l		; 22 54 DC 06 ; Jump to subroutine long $06DC54.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$BD.b]		; 07 BD ; OR accumulator with memory (long) [$BD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$0D.b		; A0 0D ; Load #$0D.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $F0, $2C		; F0 2C ; Branch if equal to $F0, $2C [Flow: branch]
	jsl $06DBF0.l		; 22 F0 DB 06 ; Jump to subroutine long $06DBF0.l [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jsr $C211.w		; 20 11 C2 ; Jump to subroutine at $C211.w [Writes: Stack Pointer] [Flow: call]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $CCDB.w,Y		; 19 DB CC ; OR accumulator with memory $CCDB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	jsr $C751.w		; 20 51 C7 ; Jump to subroutine at $C751.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $CF5E.w		; 20 5E CF ; Jump to subroutine at $CF5E.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	inc $0EC0.w,X		; FE C0 0E ; Increment memory $0EC0.w,X [Reads: X Index] [Flags: ZN]
	ldy $0EB0.w,X		; BC B0 0E ; Load Y register $0EB0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $0DD0.w,Y		; B9 D0 0D ; Load $0DD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,Y		; B9 F0 0D ; Load $0DF0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $0E40.w,X		; BD 40 0E ; Load $0E40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,X		; 9D 80 0E ; Store accumulator to $0E80.w,X [Reads: Accumulator, X Index]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	jsr $E898.w		; 20 98 E8 ; Jump to subroutine at $E898.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	jsl $06F121.l		; 22 21 F1 06 ; Jump to subroutine long $06F121.l [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	adc ($CD.b)		; 72 CD ; Add with carry (indirect) ($CD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sep #$CD		; E2 CD ; Set processor status bits #$CD [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $1010.w		; CD 10 10 ; Compare $1010.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $63		; D0 63 ; Branch if not equal to $D0, $63 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	inc $0D90.w,X		; FE 90 0D ; Increment memory $0D90.w,X [Reads: X Index] [Flags: ZN]
	lda #$C3.b		; A9 C3 ; Load #$C3.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $4F		; 30 4F ; Branch if minus to $30, $4F [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	sta $0DA0.w,Y		; 99 A0 0D ; Store accumulator to $0DA0.w,Y [Reads: Accumulator, Y Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,Y		; 99 60 0E ; Store accumulator to $0E60.w,Y [Reads: Accumulator, Y Index]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,Y		; 99 50 0E ; Store accumulator to $0E50.w,Y [Reads: Accumulator, Y Index]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	inc $0DB0.w,X		; FE B0 0D ; Increment memory $0DB0.w,X [Reads: X Index] [Flags: ZN]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	stz $0DB0.w,X		; 9E B0 0D ; Store zero to $0DB0.w,X [Reads: X Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsr $E893.w		; 20 93 E8 ; Jump to subroutine at $E893.w [Writes: Stack Pointer] [Flow: call]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $CD62.w,X		; BD 62 CD ; Load $CD62.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda $CD6A.w,X		; BD 6A CD ; Load $CD6A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $68		; D0 68 ; Branch if not equal to $D0, $68 [Flow: branch]
	lda $0D10.w,Y		; B9 10 0D ; Load $0D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $04.b		; E5 04 ; Subtract $04.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0002.w		; 69 02 00 ; Add #$0002.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0004.w		; C9 04 00 ; Compare #$0004.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $31		; B0 31 ; Branch if carry set to $B0, $31 [Flow: branch]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $06.b		; E5 06 ; Subtract $06.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0002.w		; 69 02 00 ; Add #$0002.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0004.w		; C9 04 00 ; Compare #$0004.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $22		; B0 22 ; Branch if carry set to $B0, $22 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	ldy $0EB0.w,X		; [PATTERN: Memory clearing operation] BC B0 0E ; Load Y register $0EB0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,Y		; 99 D0 0D ; Store accumulator to $0DD0.w,Y [Reads: Accumulator, Y Index]
	stz $0D90.w,X		; 9E 90 0D ; Store zero to $0D90.w,X [Reads: X Index]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda $0E50.w,Y		; B9 50 0E ; Load $0E50.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0ED0.w,X		; 9D D0 0E ; Store accumulator to $0ED0.w,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$20.b		; 69 20 ; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA22.l		; 22 22 EA 06 ; Jump to subroutine long $06EA22.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	jsr ($8AFF.w,X)		; FC FF 8A ; Jump to subroutine indirect indexed ($8AFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($FCFF.w,X)		; FC FF FC ; Jump to subroutine indirect indexed ($FCFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $00408F.l,X		; FF 8F 40 00 ; Subtract with carry (long,X) $00408F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8E.b		; 00 8E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($04FF.w,X)		; FC FF 04 ; Jump to subroutine indirect indexed ($04FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	jsr ($AAFF.w,X)		; FC FF AA ; Jump to subroutine indirect indexed ($AAFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($FCFF.w,X)		; FC FF FC ; Jump to subroutine indirect indexed ($FCFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $00409F.l,X		; FF 9F 40 00 ; Subtract with carry (long,X) $00409F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9E.b		; 00 9E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($04FF.w,X)		; FC FF 04 ; Jump to subroutine indirect indexed ($04FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $AAFF.w,X		; FD FF AA ; Subtract with carry $AAFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FDFF.w,X		; FD FF FD ; Subtract with carry $FDFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00409F.l,X		; FF 9F 40 00 ; Subtract with carry (long,X) $00409F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9E.b		; 00 9E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $03FF.w,X		; FD FF 03 ; Subtract with carry $03FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $8AFF.w,X		; FD FF 8A ; Subtract with carry $8AFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FDFF.w,X		; FD FF FD ; Subtract with carry $FDFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00408F.l,X		; FF 8F 40 00 ; Subtract with carry (long,X) $00408F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8E.b		; 00 8E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $03FF.w,X		; FD FF 03 ; Subtract with carry $03FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FCFF.w,X		; FD FF FC ; Subtract with carry $FCFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00008A.l,X		; FF 8A 00 00 ; Subtract with carry (long,X) $00008A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $0D.b		; 02 0D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00008F.l,X		; FF 8F 00 00 ; Subtract with carry (long,X) $00008F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8E000C.l,X		; FF 0C 00 8E ; Subtract with carry (long,X) $8E000C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AAFFFC.l,X		; FF FC FF AA ; Subtract with carry (long,X) $AAFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $0D.b		; 02 0D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00009F.l,X		; FF 9F 00 00 ; Subtract with carry (long,X) $00009F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $9E000C.l,X		; FF 0C 00 9E ; Subtract with carry (long,X) $9E000C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AAFFFD.l,X		; FF FD FF AA ; Subtract with carry (long,X) $AAFFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00009F.l,X		; FF 9F 00 00 ; Subtract with carry (long,X) $00009F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $9E000B.l,X		; FF 0B 00 9E ; Subtract with carry (long,X) $9E000B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8AFFFD.l,X		; FF FD FF 8A ; Subtract with carry (long,X) $8AFFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00008F.l,X		; FF 8F 00 00 ; Subtract with carry (long,X) $00008F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8E000B.l,X		; FF 0B 00 8E ; Subtract with carry (long,X) $8E000B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $BD.b		; 02 BD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	.db $D0, $35		; D0 35 ; Branch if not equal to $D0, $35 [Flow: branch]
	lda $0E40.w,X		; BD 40 0E ; Load $0E40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0EC0.w,X		; BD C0 0E ; Load $0EC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $CCDB.w,Y		; B9 DB CC ; Load $CCDB.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ora $CCDF.w,Y		; 19 DF CC ; OR accumulator with memory $CCDF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsl $06DBF0.l		; 22 F0 DB 06 ; Jump to subroutine long $06DBF0.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0DE0.w,X		; 7D E0 0D ; Add $0DE0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$CE5E.w		; 69 5E CE ; Add #$CE5E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $90.b		; A5 90 ; Load $90.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	inc $92.b		; E6 92 ; Increment $92.b [Reads: Direct Page] [Flags: ZN]
	inc $92.b		; E6 92 ; Increment $92.b [Reads: Direct Page] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8549.w		; 4C 49 85 ; Jump to $8549.w [Flow: jump]
	jsr $0830.w		; 20 30 08 ; Jump to subroutine at $0830.w [Writes: Stack Pointer] [Flow: call]
	jsr $1018.w		; 20 18 10 ; Jump to subroutine at $1018.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $F0, $A5		; F0 A5 ; Branch if equal to $F0, $A5 [Flow: branch]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $F0, $5B		; F0 5B ; Branch if equal to $F0, $5B [Flow: branch]
	lda $0FC6.w		; AD C6 0F ; Load $0FC6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	jsl $06DBF8.l		; 22 F8 DB 06 ; Jump to subroutine long $06DBF8.l [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$C0.b		; 29 C0 ; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsr $E948.w		; 20 48 E9 ; Jump to subroutine at $E948.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $37		; D0 37 ; Branch if not equal to $D0, $37 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $22.b		; E5 22 ; Subtract $22.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0010.w		; C9 10 00 ; Compare #$0010.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $15		; B0 15 ; Branch if carry set to $B0, $15 [Flow: branch]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $20.b		; E5 20 ; Subtract $20.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFFC.w		; 69 FC FF ; Add #$FFFC.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$000C.w		; C9 0C 00 ; Compare #$000C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	jsl $06F41F.l		; 22 1F F4 06 ; Jump to subroutine long $06F41F.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	jsr $8094.w		; 20 94 80 ; Jump to subroutine at $8094.w [Writes: Stack Pointer] [Flow: call]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	jsr $D185.w		; 20 85 D1 ; Jump to subroutine at $D185.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0DE0.w,X		; FD E0 0D ; Subtract with carry $0DE0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0E80.w,X		; 9D 80 0E ; Store accumulator to $0E80.w,X [Reads: Accumulator, X Index]
	jsr $C211.w		; 20 11 C2 ; Jump to subroutine at $C211.w [Writes: Stack Pointer] [Flow: call]
	jsr $E948.w		; 20 48 E9 ; Jump to subroutine at $E948.w [Writes: Stack Pointer] [Flow: call]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $37		; 10 37 ; Branch if plus to $10, $37 [Flow: branch]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	jsr $8094.w		; 20 94 80 ; Jump to subroutine at $8094.w [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $CFC3.w,Y		; B9 C3 CF ; Load $CFC3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda $CFC5.w,Y		; B9 C5 CF ; Load $CFC5.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $CFC7.w,Y		; B9 C7 CF ; Load $CFC7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $CCFFF8.l,X		; FF F8 FF CC ; Subtract with carry (long,X) $CCFFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0001CE.l,X		; FF CE 01 00 ; Subtract with carry (long,X) $0001CE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $EC0008.l,X		; FF 08 00 EC ; Subtract with carry (long,X) $EC0008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EE.b		; 00 EE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $CEFFF8.l,X		; FF F8 FF CE ; Subtract with carry (long,X) $CEFFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0041CC.l,X		; FF CC 41 00 ; Subtract with carry (long,X) $0041CC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $EE0008.l,X		; FF 08 00 EE ; Subtract with carry (long,X) $EE0008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $EEFFF8.l,X		; FF F8 FF EE ; Subtract with carry (long,X) $EEFFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($00.b,X)		; C1 00 ; Compare accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00C1EC.l,X		; FF EC C1 00 ; Subtract with carry (long,X) $00C1EC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $CE0008.l,X		; FF 08 00 CE ; Subtract with carry (long,X) $CE0008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($00.b,X)		; C1 00 ; Compare accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($00.b,X)		; C1 00 ; Compare accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $ECFFF8.l,X		; FF F8 FF EC ; Subtract with carry (long,X) $ECFFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0081EE.l,X		; FF EE 81 00 ; Subtract with carry (long,X) $0081EE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $CC0008.l,X		; FF 08 00 CC ; Subtract with carry (long,X) $CC0008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CE.b		; 00 CE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	cop $FA.b		; 02 FA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $6C0013.l,X		; FF 13 00 6C ; Subtract with carry (long,X) $6C0013.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($0008.w)		; 6C 08 00 ; Jump indirect to ($0008.w) [Flow: jump]
	cop $06.b		; 02 06 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $6C0013.l,X		; FF 13 00 6C ; Subtract with carry (long,X) $6C0013.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($0008.w)		; 6C 08 00 ; Jump indirect to ($0008.w) [Flow: jump]
	cop $05.b		; 02 05 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($13FF.w,X)		; FC FF 13 ; Jump to subroutine indirect indexed ($13FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($0008.w)		; 6C 08 00 ; Jump indirect to ($0008.w) [Flow: jump]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $13FF.w,X		; FD FF 13 ; Subtract with carry $13FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($0008.w)		; 6C 08 00 ; Jump indirect to ($0008.w) [Flow: jump]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $13FF.w,X		; FE FF 13 ; Increment memory $13FF.w,X [Reads: X Index] [Flags: ZN]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($0008.w)		; 6C 08 00 ; Jump indirect to ($0008.w) [Flow: jump]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $48		; 30 48 ; Branch if minus to $30, $48 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$D088.w		; 69 88 D0 ; Add #$D088.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8549.w		; 20 49 85 ; Jump to subroutine at $8549.w [Writes: Stack Pointer] [Flow: call]
	jsl $1DD1AF.l		; 22 AF D1 1D ; Jump to subroutine long $1DD1AF.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cpy #$04.b		; C0 04 ; Compare #$04.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; [PATTERN: Memory clearing operation] 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	stz $0F.b		; 64 0F ; Store zero to $0F.b
	lda $D180.w,Y		; B9 80 D1 ; Load $D180.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $01.b		; 64 01 ; Store zero to $01.b
.ACCU 16
	rep #$20		; C2 20
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0E.b		; 65 0E ; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0FDA.w		; 8D DA 0F ; Store accumulator to $0FDA.w [Reads: Accumulator]
	lda $90.b		; A5 90 ; Load $90.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	lda $92.b		; A5 92 ; Load $92.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
	lda #$D108.w		; A9 08 D1 ; Load #$D108.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8549.w		; 20 49 85 ; Jump to subroutine at $8549.w [Writes: Stack Pointer] [Flow: call]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda #$C1.b		; A9 C1 ; Load #$C1.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,Y		; 99 90 0D ; Store accumulator to $0D90.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$28.b		; 69 28 ; Add #$28.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	and $D57DD2.l,X		; 3F D2 7D D5 ; AND accumulator with memory (long,X) $D57DD2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $D451.w		; 20 51 D4 ; Jump to subroutine at $D451.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $D451.w		; 20 51 D4 ; Jump to subroutine at $D451.w [Writes: Stack Pointer] [Flow: call]
	jsr $D516.w		; [PATTERN: Memory clearing operation] 20 16 D5 ; Jump to subroutine at $D516.w [Writes: Stack Pointer] [Flow: call]
	lda $0F00.w,X		; BD 00 0F ; Load $0F00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	stz $0DA0.w,X		; 9E A0 0D ; Store zero to $0DA0.w,X [Reads: X Index]
	stz $0DC0.w,X		; 9E C0 0D ; Store zero to $0DC0.w,X [Reads: X Index]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	sta $D2.b		; 85 D2 ; Store accumulator to $D2.b [Reads: Accumulator]
	lda $D2.b		; A5 D2 ; Load $D2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $D322D2.l		; EF D2 22 D3 ; Subtract with carry (long) $D322D2.l [Writes: Accumulator] [Flags: ZVNC]
	eor $D36BD3.l		; 4F D3 6B D3 ; Exclusive OR accumulator with memory (long) $D36BD3.l [Writes: Accumulator] [Flags: ZN]
	lda $BDD3.w,Y		; B9 D3 BD ; Load $BDD3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
	lda #$3D.b		; A9 3D ; Load #$3D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF1.w		; 8D F1 1C ; Store accumulator to $1CF1.w [Reads: Accumulator]
	jsl $05FA8E.l		; 22 8E FA 05 ; Jump to subroutine long $05FA8E.l [Writes: Stack Pointer] [Flow: call]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $0DA0.w,X		; FE A0 0D ; Increment memory $0DA0.w,X [Reads: X Index] [Flags: ZN]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $D2A1.w,Y		; B9 A1 D2 ; Load $D2A1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $0F7F.w		; AC 7F 0F ; Load $0F7F.w into Y register [Writes: Y Index] [Flags: ZN]
	cpy #$10.b		; C0 10 ; Compare #$10.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $26		; D0 26 ; Branch if not equal to $D0, $26 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DCF.w		; 8D CF 0D ; Store accumulator to $0DCF.w [Reads: Accumulator]
	inc $0F7F.w		; EE 7F 0F ; Increment $0F7F.w [Flags: ZN]
	lda $0F7F.w		; AD 7F 0F ; Load $0F7F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$16.b		; C9 16 ; Compare #$16.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	ldy #$27.b		; A0 27 ; Load #$27.b into Y register [Writes: Y Index] [Flags: ZN]
	sty $012F.w		; 8C 2F 01 ; Store Y register to $012F.w [Reads: Y Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,X		; 9D 80 0E ; Store accumulator to $0E80.w,X [Reads: Accumulator, X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E30.w,X		; 9D 30 0E ; Store accumulator to $0E30.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	cmp #$78.b		; C9 78 ; Compare #$78.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $1B		; F0 1B ; Branch if equal to $F0, $1B [Flow: branch]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $16		; B0 16 ; Branch if carry set to $B0, $16 [Flow: branch]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda #$2B.b		; A9 2B ; Load #$2B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0E.b		; C9 0E ; Compare #$0E.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0E80.w,X		; 9D 80 0E ; Store accumulator to $0E80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$78.b		; A9 78 ; Load #$78.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FF9.w		; 8D F9 0F ; Store accumulator to $0FF9.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$50.b		; A9 50 ; Load #$50.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $23		; D0 23 ; Branch if not equal to $D0, $23 [Flow: branch]
	lda $0E30.w,X		; BD 30 0E ; Load $0E30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$02.b		; 69 02 ; Add #$02.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0E30.w,X		; 9D 30 0E ; Store accumulator to $0E30.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DFF.w		; 8D FF 0D ; Store accumulator to $0DFF.w [Reads: Accumulator]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$50.b		; A9 50 ; Load #$50.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	stz $0E80.w,X		; 9E 80 0E ; Store zero to $0E80.w,X [Reads: X Index]
	lda #$33.b		; A9 33 ; Load #$33.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	lda #$3E.b		; A9 3E ; Load #$3E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF1.w		; 8D F1 1C ; Store accumulator to $1CF1.w [Reads: Accumulator]
	jsl $05FA8E.l		; 22 8E FA 05 ; Jump to subroutine long $05FA8E.l [Writes: Stack Pointer] [Flow: call]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$E0.b		; A9 E0 ; Load #$E0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	jsr $E95D.w		; 20 5D E9 ; Jump to subroutine at $E95D.w [Writes: Stack Pointer] [Flow: call]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	lda #$42.b		; A9 42 ; Load #$42.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F10.w,X		; 9D 10 0F ; Store accumulator to $0F10.w,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	jsl $1DD392.l		; 22 92 D3 1D ; Jump to subroutine long $1DD392.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	lda #$C1.b		; A9 C1 ; Load #$C1.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $15		; 30 15 ; Branch if minus to $30, $15 [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,Y		; 99 C0 0D ; Store accumulator to $0DC0.w,Y [Reads: Accumulator, Y Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	sta $0DB0.w,Y		; 99 B0 0D ; Store accumulator to $0DB0.w,Y [Reads: Accumulator, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rtl		; [PATTERN: Memory clearing operation] 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0F10.w,X		; BD 10 0F ; Load $0F10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	jsl $09C2F5.l		; 22 F5 C2 09 ; Jump to subroutine long $09C2F5.l [Writes: Stack Pointer] [Flow: call]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$40.b		; 09 40 ; Logical OR #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0403.w		; 8D 03 04 ; Store accumulator to $0403.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $82FFF8.l,X		; FF F8 FF 82 ; Subtract with carry (long,X) $82FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004B82.l,X		; FF 82 4B 00 ; Subtract with carry (long,X) $004B82.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A20008.l,X		; FF 08 00 A2 ; Subtract with carry (long,X) $A20008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $80FFF8.l,X		; FF F8 FF 80 ; Subtract with carry (long,X) $80FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004B80.l,X		; FF 80 4B 00 ; Subtract with carry (long,X) $004B80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A00008.l,X		; FF 08 00 A0 ; Subtract with carry (long,X) $A00008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $80FFF8.l,X		; FF F8 FF 80 ; Subtract with carry (long,X) $80FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004B82.l,X		; FF 82 4B 00 ; Subtract with carry (long,X) $004B82.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A00008.l,X		; FF 08 00 A0 ; Subtract with carry (long,X) $A00008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $82FFF8.l,X		; FF F8 FF 82 ; Subtract with carry (long,X) $82FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004B80.l,X		; FF 80 4B 00 ; Subtract with carry (long,X) $004B80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A20008.l,X		; FF 08 00 A2 ; Subtract with carry (long,X) $A20008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0F10.w,X		; BD 10 0F ; Load $0F10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $34		; D0 34 ; Branch if not equal to $D0, $34 [Flow: branch]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $01.b		; 64 01 ; Store zero to $01.b
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$D3D1.w		; 69 D1 D3 ; Add #$D3D1.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda #$0900.w		; A9 00 09 ; Load #$0900.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	lda #$0A60.w		; A9 60 0A ; Load #$0A60.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8549.w		; 20 49 85 ; Jump to subroutine at $8549.w [Writes: Stack Pointer] [Flow: call]
	lda #$12.b		; A9 12 ; Load #$12.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06DC5C.l		; 22 5C DC 06 ; Jump to subroutine long $06DC5C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $F0.b,X		; F6 F0 ; Increment memory $F0.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dec $1206.w		; CE 06 12 ; Decrement $1206.w [Flags: ZN]
	.db $F0, $CE		; F0 CE ; Branch if equal to $F0, $CE [Flow: branch]
	asl $14.b		; 06 14 ; Arithmetic shift left $14.b [Reads: Direct Page] [Flags: ZNC]
	sbc ($26.b,S),Y		; F3 26 ; Subtract with carry (stack relative indirect indexed) ($26.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $14.b		; 06 14 ; Arithmetic shift left $14.b [Reads: Direct Page] [Flags: ZNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	rol $06.b,X		; 36 06 ; Rotate left $06.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	pea $26F3.w		; F4 F3 26 ; Push absolute address $26F3.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	lsr $F4.b		; 46 F4 ; Logical shift right $F4.b [Reads: Direct Page] [Flags: ZNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	rol $46.b,X		; 36 46 ; Rotate left $46.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $06.b		; 26 06 ; Rotate left $06.b [Reads: Direct Page] [Flags: ZNC]
	ora ($08.b)		; 12 08 ; OR accumulator with memory (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $06.b,X		; 36 06 ; Rotate left $06.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	inc $00.b,X		; F6 00 ; Increment memory $00.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	rol $46.b		; 26 46 ; Rotate left $46.b [Reads: Direct Page] [Flags: ZNC]
	inc $08.b,X		; F6 08 ; Increment memory $08.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	rol $46.b,X		; 36 46 ; Rotate left $46.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZNC]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $F8.b		; 46 F8 ; Logical shift right $F8.b [Reads: Direct Page] [Flags: ZNC]
	.db $10, $22		; 10 22 ; Branch if plus to $10, $22 [Flow: branch]
	stx $08.b		; 86 08 ; Store X register to $08.b [Reads: X Index]
	.db $10, $22		; 10 22 ; Branch if plus to $10, $22 [Flow: branch]
	dec $F6.b		; C6 F6 ; Decrement $F6.b [Reads: Direct Page] [Flags: ZN]
	.db $F0, $CE		; F0 CE ; Branch if equal to $F0, $CE [Flow: branch]
	tsb $12.b		; 04 12 ; Test and set bits $12.b [Reads: Accumulator] [Flags: Z]
	.db $F0, $CE		; F0 CE ; Branch if equal to $F0, $CE [Flow: branch]
	tsb $14.b		; 04 14 ; Test and set bits $14.b [Reads: Accumulator] [Flags: Z]
	sbc ($26.b,S),Y		; F3 26 ; Subtract with carry (stack relative indirect indexed) ($26.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $FB,$14		; 44 14 FB ; Move block positive $FB,$14 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	rol $44.b,X		; 36 44 ; Rotate left $44.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	pea $26F3.w		; F4 F3 26 ; Push absolute address $26F3.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	tsb $F4.b		; 04 F4 ; Test and set bits $F4.b [Reads: Accumulator] [Flags: Z]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	rol $04.b,X		; 36 04 ; Rotate left $04.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $44.b		; 26 44 ; Rotate left $44.b [Reads: Direct Page] [Flags: ZNC]
	ora ($08.b)		; 12 08 ; OR accumulator with memory (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $44.b,X		; 36 44 ; Rotate left $44.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	inc $00.b,X		; F6 00 ; Increment memory $00.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	rol $04.b		; 26 04 ; Rotate left $04.b [Reads: Direct Page] [Flags: ZNC]
	inc $08.b,X		; F6 08 ; Increment memory $08.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	rol $04.b,X		; 36 04 ; Rotate left $04.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $10,$F8		; 44 F8 10 ; Move block positive $10,$F8 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	jsr $0884.w		; 20 84 08 ; Jump to subroutine at $0884.w [Writes: Stack Pointer] [Flow: call]
	.db $10, $20		; 10 20 ; Branch if plus to $10, $20 [Flow: branch]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	tsb $1410.w		; 0C 10 14 ; Test and set bits $1410.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $2420.w		; 1C 20 24 ; Test and reset bits $2420.w [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	lda #$38.b		; A9 38 ; Load #$38.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
.ACCU 16
	rep #$20		; C2 20
	lda #$D48D.w		; A9 8D D4 ; Load #$D48D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	adc #$0038.w		; 69 38 00 ; Add #$0038.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$D4FD.w		; A9 FD D4 ; Load #$D4FD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $44		; F0 44 ; Branch if equal to $F0, $44 [Flow: branch]
	ldy $0E30.w,X		; BC 30 0E ; Load Y register $0E30.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sty $0D.b		; 84 0D ; Store Y register to $0D.b [Reads: Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $D50B.w,Y		; B9 0B D5 ; Load $D50B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc ($08.b),Y		; 71 08 ; Add with carry ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$F8.b		; 69 F8 ; Add #$F8.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc ($08.b),Y		; 71 08 ; Add with carry ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($08.b),Y		; B1 08 ; Load accumulator ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($08.b),Y		; B1 08 ; Load accumulator ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$31.b		; 09 31 ; Logical OR #$31.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: ZNC]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($0A.b),Y		; B1 0A ; Load accumulator ($0A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx $0D.b		; E4 0D ; Compare $0D.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $D0, $CA		; D0 CA ; Branch if not equal to $D0, $CA [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $D5A1.w		; 20 A1 D5 ; Jump to subroutine at $D5A1.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr ($00FF.w,X)		; FC FF 00 ; Jump to subroutine indirect indexed ($00FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $BD.b		; 02 BD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $D6B1.w		; 20 B1 D6 ; Jump to subroutine at $D6B1.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $01		; B0 01 ; Branch if carry set to $B0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$D581.w		; 69 81 D5 ; Add #$D581.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8549.w		; 20 49 85 ; Jump to subroutine at $8549.w [Writes: Stack Pointer] [Flow: call]
	jsr $D5E9.w		; 20 E9 D5 ; Jump to subroutine at $D5E9.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$1F.b		; C9 1F ; Compare #$1F.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $D5D9.w,Y		; B9 D9 D5 ; Load $D5D9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E9.b		; E5 E9 ; Subtract $E9.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $07.b		; 65 07 ; Add $07.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $07.b		; E5 07 ; Subtract $07.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
.ACCU 16
	rep #$20		; C2 20
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0007.w		; 69 07 00 ; Add #$0007.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$6C.b		; A9 6C ; Load #$6C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ldy #$07.b		; A0 07 ; Load #$07.b into Y register [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	lda [$04.b],Y		; B7 04 ; Load accumulator (long indexed) [$04.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	lda [$04.b],Y		; B7 04 ; Load accumulator (long indexed) [$04.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $240000.l,X		; FF 00 00 24 ; Subtract with carry (long,X) $240000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $06.b		; 02 06 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $240000.l,X		; FF 00 00 24 ; Subtract with carry (long,X) $240000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C6.b		; 00 C6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C6.b		; 00 C6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$D661.w		; 69 61 D6 ; Add #$D661.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8549.w		; 4C 49 85 ; Jump to $8549.w [Flow: jump]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldx #$7F.b		; A2 7F ; Load #$7F.b into X register [Writes: X Index] [Flags: ZN]
	lda $0D10.w,Y		; B9 10 0D ; Load $0D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFC00.l,X		; 9F 00 FC 7F ; Store accumulator (long,X) $7FFC00.l,X [Reads: Accumulator, X Index]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFC80.l,X		; 9F 80 FC 7F ; Store accumulator (long,X) $7FFC80.l,X [Reads: Accumulator, X Index]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFD00.l,X		; 9F 00 FD 7F ; Store accumulator (long,X) $7FFD00.l,X [Reads: Accumulator, X Index]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFD80.l,X		; 9F 80 FD 7F ; Store accumulator (long,X) $7FFD80.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $E1		; 10 E1 ; Branch if plus to $10, $E1 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $D74E.w		; 20 4E D7 ; Jump to subroutine at $D74E.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	asl $11.b,X		; 16 11 ; Arithmetic shift left $11.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	nop		; EA ; No operation
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	nop		; EA ; No operation
	sbc $0900F7.l		; EF F7 00 09 ; Subtract with carry (long) $0900F7.l [Writes: Accumulator] [Flags: ZVNC]
	ora ($16.b),Y		; 11 16 ; OR accumulator with memory ($16.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $21.b		; 24 21 ; Test bits $21.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $000D.w,Y		; 19 0D 00 ; OR accumulator with memory $000D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($E7.b,S),Y		; F3 E7 ; Subtract with carry (stack relative indirect indexed) ($E7.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $E7DFDC.l,X		; DF DC DF E7 ; Compare accumulator (long,X) $E7DFDC.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc ($00.b,S),Y		; F3 00 ; Subtract with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora VMDATAH.w		; 0D 19 21 ; Logical OR VMDATAH.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($16.b),Y		; 11 16 ; OR accumulator with memory ($16.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $11.b,X		; 16 11 ; Arithmetic shift left $11.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	nop		; EA ; No operation
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	nop		; EA ; No operation
	sbc $0D00F7.l		; EF F7 00 0D ; Subtract with carry (long) $0D00F7.l [Writes: Accumulator] [Flags: ZVNC]
	ora $2421.w,Y		; 19 21 24 ; OR accumulator with memory $2421.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($19.b,X)		; 21 19 ; Logical AND ($19.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $F300.w		; 0D 00 F3 ; Logical OR $F300.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc [$DF.b]		; E7 DF ; Subtract with carry (long) [$DF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jmp.w [$E7DF]		; DC DF E7 ; Jump long indirect [$E7DF] [Flow: jump]
	sbc ($08.b,S),Y		; F3 08 ; Subtract with carry (stack relative indirect indexed) ($08.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0E0D.w		; 0C 0D 0E ; Test and set bits $0E0D.w [Reads: Accumulator] [Flags: Z]
	ora $020100.l		; 0F 00 01 02 ; OR accumulator with memory (long) $020100.l [Writes: Accumulator] [Flags: ZN]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$20.b]		; 07 20 ; OR accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($D8.b,X)		; 81 D8 ; Store accumulator ($D8.b,X) [Reads: Accumulator, X Index, Direct Page]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $DC11.w		; 4C 11 DC ; Jump to $DC11.w [Flow: jump]
	jsl $06F2AA.l		; 22 AA F2 06 ; Jump to subroutine long $06F2AA.l [Writes: Stack Pointer] [Flow: call]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $0E50.w,X		; BC 50 0E ; Load Y register $0E50.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$03.b		; C0 03 ; Compare #$03.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	and $1A.b		; 25 1A ; Logical AND $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$31.b		; A9 31 ; Load #$31.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	lda $0EA0.w,X		; BD A0 0E ; Load $0EA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E10.w,X		; 9D 10 0E ; Store accumulator to $0E10.w,X [Reads: Accumulator, X Index]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	dec $0EA0.w,X		; DE A0 0E ; Decrement memory $0EA0.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $2A		; D0 2A ; Branch if not equal to $D0, $2A [Flow: branch]
	jsl $06F121.l		; 22 21 F1 06 ; Jump to subroutine long $06F121.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $24		; 90 24 ; Branch if carry clear to $90, $24 [Flow: branch]
	jsl $0791B9.l		; 22 B9 91 07 ; Jump to subroutine long $0791B9.l [Writes: Stack Pointer] [Flow: call]
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA1A.l		; 22 1A EA 06 ; Jump to subroutine long $06EA1A.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBBA1.l		; 22 A1 BB 0D ; Jump to subroutine long $0DBBA1.l [Writes: Stack Pointer] [Flow: call]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $0E50.w,X		; BD 50 0E ; Load $0E50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $D6FE.w,Y		; B9 FE D6 ; Load $D6FE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $D71E.w,Y		; B9 1E D7 ; Load $D71E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	jsr $8094.w		; 20 94 80 ; Jump to subroutine at $8094.w [Writes: Stack Pointer] [Flow: call]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $D73E.w,Y		; B9 3E D7 ; Load $D73E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	lda #$21.b		; A9 21 ; Load #$21.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	inc $2DD7.w,X		; FE D7 2D ; Increment memory $2DD7.w,X [Reads: X Index] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	eor ($D8.b)		; 52 D8 ; Exclusive OR accumulator with memory (indirect) ($D8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $29		; D0 29 ; Branch if not equal to $D0, $29 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	inc $0ED0.w,X		; FE D0 0E ; Increment memory $0ED0.w,X [Reads: X Index] [Flags: ZN]
	ldy $0ED0.w,X		; BC D0 0E ; Load Y register $0ED0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$03.b		; C0 03 ; Compare #$03.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	stz $0ED0.w,X		; 9E D0 0E ; Store zero to $0ED0.w,X [Reads: X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$20.b		; 69 20 ; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0EB0.w,X		; 7D B0 0E ; Add $0EB0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $27		; D0 27 ; Branch if not equal to $D0, $27 [Flow: branch]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA12.l		; 22 12 EA 06 ; Jump to subroutine long $06EA12.l [Writes: Stack Pointer] [Flow: call]
	jsl $1DF614.l		; 22 14 F6 1D ; Jump to subroutine long $1DF614.l [Writes: Stack Pointer] [Flow: call]
	cmp $0DE0.w,X		; DD E0 0D ; Compare accumulator $0DE0.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E9AD.w		; 20 AD E9 ; Jump to subroutine at $E9AD.w [Writes: Stack Pointer] [Flow: call]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsr $DB9E.w		; 20 9E DB ; Jump to subroutine at $DB9E.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $90.b		; A5 90 ; Load $90.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	inc $92.b		; E6 92 ; Increment $92.b [Reads: Direct Page] [Flags: ZN]
	inc $92.b		; E6 92 ; Increment $92.b [Reads: Direct Page] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0D10.w,Y		; B9 10 0D ; Load $0D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFC00.l,X		; 9F 00 FC 7F ; Store accumulator (long,X) $7FFC00.l,X [Reads: Accumulator, X Index]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFD00.l,X		; 9F 00 FD 7F ; Store accumulator (long,X) $7FFD00.l,X [Reads: Accumulator, X Index]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFC80.l,X		; 9F 80 FC 7F ; Store accumulator (long,X) $7FFC80.l,X [Reads: Accumulator, X Index]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFD80.l,X		; 9F 80 FD 7F ; Store accumulator (long,X) $7FFD80.l,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsr $D993.w		; 20 93 D9 ; Jump to subroutine at $D993.w [Writes: Stack Pointer] [Flow: call]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $1F		; B0 1F ; Branch if carry set to $B0, $1F [Flow: branch]
	jsr $D9F8.w		; 20 F8 D9 ; Jump to subroutine at $D9F8.w [Writes: Stack Pointer] [Flow: call]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $15		; B0 15 ; Branch if carry set to $B0, $15 [Flow: branch]
	jsr $DA50.w		; 20 50 DA ; Jump to subroutine at $DA50.w [Writes: Stack Pointer] [Flow: call]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0B		; B0 0B ; Branch if carry set to $B0, $0B [Flow: branch]
	jsr $DA5F.w		; 20 5F DA ; Jump to subroutine at $DA5F.w [Writes: Stack Pointer] [Flow: call]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $DABA.w		; 20 BA DA ; Jump to subroutine at $DABA.w [Writes: Stack Pointer] [Flow: call]
	jsr $D8F2.w		; 20 F2 D8 ; Jump to subroutine at $D8F2.w [Writes: Stack Pointer] [Flow: call]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda $0F10.w,X		; BD 10 0F ; Load $0F10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	cmp #$50.b		; C9 50 ; Compare #$50.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $11.b		; 05 11 ; Logical OR $11.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0FC1.w		; 0D C1 0F ; Logical OR $0FC1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	inc $0DA0.w,X		; FE A0 0D ; Increment memory $0DA0.w,X [Reads: X Index] [Flags: ZN]
	jsl $1DDC2A.l		; 22 2A DC 1D ; Jump to subroutine long $1DDC2A.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $80FFF8.l,X		; FF F8 FF 80 ; Subtract with carry (long,X) $80FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000082.l,X		; FF 82 00 00 ; Subtract with carry (long,X) $000082.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A00008.l,X		; FF 08 00 A0 ; Subtract with carry (long,X) $A00008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $82FFF8.l,X		; FF F8 FF 82 ; Subtract with carry (long,X) $82FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004080.l,X		; FF 80 40 00 ; Subtract with carry (long,X) $004080.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A20008.l,X		; FF 08 00 A2 ; Subtract with carry (long,X) $A20008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $80FFFA.l,X		; FF FA FF 80 ; Subtract with carry (long,X) $80FFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $06.b		; 02 06 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000082.l,X		; FF 82 00 00 ; Subtract with carry (long,X) $000082.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FA.b		; 02 FA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A00006.l,X		; FF 06 00 A0 ; Subtract with carry (long,X) $A00006.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $06.b		; 02 06 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FA.b		; 02 FA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $82FFFA.l,X		; FF FA FF 82 ; Subtract with carry (long,X) $82FFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $004080.l,X		; FF 80 40 00 ; Subtract with carry (long,X) $004080.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FA.b		; 02 FA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A20006.l,X		; FF 06 00 A2 ; Subtract with carry (long,X) $A20006.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$D913.w		; 69 13 D9 ; Add #$D913.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8549.w		; 4C 49 85 ; Jump to $8549.w [Flow: jump]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $84FFF8.l,X		; FF F8 FF 84 ; Subtract with carry (long,X) $84FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000086.l,X		; FF 86 00 00 ; Subtract with carry (long,X) $000086.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A40008.l,X		; FF 08 00 A4 ; Subtract with carry (long,X) $A40008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $86FFF8.l,X		; FF F8 FF 86 ; Subtract with carry (long,X) $86FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004084.l,X		; FF 84 40 00 ; Subtract with carry (long,X) $004084.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A60008.l,X		; FF 08 00 A6 ; Subtract with carry (long,X) $A60008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7FFC00.l,X		; BF 00 FC 7F ; Load long $7FFC00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FD8.w		; 8D D8 0F ; Store accumulator to $0FD8.w [Reads: Accumulator]
	lda $7FFC80.l,X		; BF 80 FC 7F ; Load long $7FFC80.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FD9.w		; 8D D9 0F ; Store accumulator to $0FD9.w [Reads: Accumulator]
	lda $7FFD00.l,X		; BF 00 FD 7F ; Load long $7FFD00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FDA.w		; 8D DA 0F ; Store accumulator to $0FDA.w [Reads: Accumulator]
	lda $7FFD80.l,X		; BF 80 FD 7F ; Load long $7FFD80.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FDB.w		; 8D DB 0F ; Store accumulator to $0FDB.w [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$D9B8.w		; 69 B8 D9 ; Add #$D9B8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $90.b		; A5 90 ; Load $90.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	lda $92.b		; A5 92 ; Load $92.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
.ACCU 8
	sep #$20		; E2 20
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8549.w		; 4C 49 85 ; Jump to $8549.w [Flow: jump]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$1C.b		; E9 1C ; Subtract #$1C.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	jmp $DA00.w		; 4C 00 DA ; Jump to $DA00.w [Flow: jump]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: ZNC]
	stz $0DC0.w,X		; 9E C0 0D ; Store zero to $0DC0.w,X [Reads: X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $90.b		; A5 90 ; Load $90.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	lda $92.b		; A5 92 ; Load $92.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$28.b		; E9 28 ; Subtract #$28.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7FFC00.l,X		; BF 00 FC 7F ; Load long $7FFC00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FD8.w		; 8D D8 0F ; Store accumulator to $0FD8.w [Reads: Accumulator]
	lda $7FFC80.l,X		; BF 80 FC 7F ; Load long $7FFC80.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FD9.w		; 8D D9 0F ; Store accumulator to $0FD9.w [Reads: Accumulator]
	lda $7FFD00.l,X		; BF 00 FD 7F ; Load long $7FFD00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FDA.w		; 8D DA 0F ; Store accumulator to $0FDA.w [Reads: Accumulator]
	lda $7FFD80.l,X		; BF 80 FD 7F ; Load long $7FFD80.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FDB.w		; 8D DB 0F ; Store accumulator to $0FDB.w [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $DA5B.w,Y		; 19 5B DA ; OR accumulator with memory $DA5B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsl $06DBF0.l		; 22 F0 DB 06 ; Jump to subroutine long $06DBF0.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $DB17.w		; 20 17 DB ; Jump to subroutine at $DB17.w [Writes: Stack Pointer] [Flow: call]
	lda $0E10.w,X		; BD 10 0E ; Load $0E10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $54		; [PATTERN: Memory clearing operation] D0 54 ; Branch if not equal to $D0, $54 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	stz $0F60.w,X		; 9E 60 0F ; Store zero to $0F60.w,X [Reads: X Index]
	stz $0CAA.w,X		; 9E AA 0C ; Store zero to $0CAA.w,X [Reads: X Index]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0FD9.w		; AD D9 0F ; Load $0FD9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $0FDB.w		; AD DB 0F ; Load $0FDB.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	jsl $06F2AA.l		; 22 AA F2 06 ; Jump to subroutine long $06F2AA.l [Writes: Stack Pointer] [Flow: call]
	stz $0D90.w,X		; 9E 90 0D ; Store zero to $0D90.w,X [Reads: X Index]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F60.w,X		; 9D 60 0F ; Store accumulator to $0F60.w,X [Reads: Accumulator, X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CAA.w,X		; 9D AA 0C ; Store accumulator to $0CAA.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $90.b		; A5 90 ; Load $90.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	lda $92.b		; A5 92 ; Load $92.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0001.w		; 69 01 00 ; Add #$0001.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	inc $0DC0.w,X		; FE C0 0D ; Increment memory $0DC0.w,X [Reads: X Index] [Flags: ZN]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$30.b		; E9 30 ; Subtract #$30.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	jmp $DA7E.w		; 4C 7E DA ; Jump to $DA7E.w [Flow: jump]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	ora $000C00.l		; 0F 00 0C 00 ; OR accumulator with memory (long) $000C00.l [Writes: Accumulator] [Flags: ZN]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $F3FFF4.l,X		; FF F4 FF F3 ; Subtract with carry (long,X) $F3FFF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F3FFF0.l,X		; FF F0 FF F3 ; Subtract with carry (long,X) $F3FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FAFFF4.l,X		; FF F4 FF FA ; Subtract with carry (long,X) $FAFFF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $060000.l,X		; FF 00 00 06 ; Subtract with carry (long,X) $060000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F3FFF4.l,X		; FF F4 FF F3 ; Subtract with carry (long,X) $F3FFF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F3FFF0.l,X		; FF F0 FF F3 ; Subtract with carry (long,X) $F3FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FAFFF4.l,X		; FF F4 FF FA ; Subtract with carry (long,X) $FAFFF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $A8AAAA.l,X		; FF AA AA A8 ; Subtract with carry (long,X) $A8AAAA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	stz $07.b		; 64 07 ; Store zero to $07.b
	lda $0EA0.w,X		; BD A0 0E ; Load $0EA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FF.b		; 69 FF ; Add #$FF.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: ZN]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $DB3E.w,X		; 7D 3E DB ; Add $DB3E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $DB5E.w,X		; 7D 5E DB ; Add $DB5E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $07.b		; 65 07 ; Add $07.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $DB7E.w,X		; BD 7E DB ; Load $DB7E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $DB8E.w,X		; BD 8E DB ; Load $DB8E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$02.b		; 69 02 ; Add #$02.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $A5		; 10 A5 ; Branch if plus to $10, $A5 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0F10.w,X		; BD 10 0F ; Load $0F10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	stz $0D90.w,X		; 9E 90 0D ; Store zero to $0D90.w,X [Reads: X Index]
	lda #$E0.b		; A9 E0 ; Load #$E0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora #$E0.b		; 09 E0 ; Logical OR #$E0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EF0.w,X		; 9D F0 0E ; Store accumulator to $0EF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $39		; 30 39 ; Branch if minus to $30, $39 [Flow: branch]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AAA.w		; 8D AA 0A ; Store accumulator to $0AAA.w [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,Y		; 99 D0 0D ; Store accumulator to $0DD0.w,Y [Reads: Accumulator, Y Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $0FD9.w		; AD D9 0F ; Load $0FD9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $0FDB.w		; AD DB 0F ; Load $0FDB.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	sta $0D90.w,Y		; 99 90 0D ; Store accumulator to $0D90.w,Y [Reads: Accumulator, Y Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Accumulator, Y Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $DC7A.w		; 20 7A DC ; Jump to subroutine at $DC7A.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0B89.w,X		; BD 89 0B ; Load $0B89.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$30.b		; 09 30 ; Logical OR #$30.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	jsr $DD5E.w		; 20 5E DD ; Jump to subroutine at $DD5E.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8C5.w		; 20 C5 E8 ; Jump to subroutine at $E8C5.w [Writes: Stack Pointer] [Flow: call]
	jsr $C211.w		; 20 11 C2 ; Jump to subroutine at $C211.w [Writes: Stack Pointer] [Flow: call]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	stz $B9DC.w		; 9C DC B9 ; Store zero to $B9DC.w
	jmp.w [$80FE]		; DC FE 80 ; Jump long indirect [$80FE] [Flow: jump]
	asl $80BD.w		; 0E BD 80 ; Arithmetic shift left $80BD.w [Flags: ZNC]
	asl $A0C9.w		; 0E C9 A0 ; Arithmetic shift left $A0C9.w [Flags: ZNC]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$1E.b		; A9 1E ; Load #$1E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $DCB5.w,Y		; B9 B5 DC ; Load $DCB5.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	inc $0F70.w,X		; FE 70 0F ; Increment memory $0F70.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $29		; D0 29 ; Branch if not equal to $D0, $29 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$18.b		; 69 18 ; Add #$18.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsl $06EA1A.l		; 22 1A EA 06 ; Jump to subroutine long $06EA1A.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$28.b		; 69 28 ; Add #$28.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$50.b		; C9 50 ; Compare #$50.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$28.b		; 69 28 ; Add #$28.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$50.b		; C9 50 ; Compare #$50.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $01		; B0 01 ; Branch if carry set to $B0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D40.w,X		; 7D 40 0D ; Add $0D40.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D50.w,X		; 7D 50 0D ; Add $0D50.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $860000.l,X		; FF 00 00 86 ; Subtract with carry (long,X) $860000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $800000.l,X		; FF 00 00 80 ; Subtract with carry (long,X) $800000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $820000.l,X		; FF 00 00 82 ; Subtract with carry (long,X) $820000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $840000.l,X		; FF 00 00 84 ; Subtract with carry (long,X) $840000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$DD1E.w		; 69 1E DD ; Add #$DD1E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8549.w		; 20 49 85 ; Jump to subroutine at $8549.w [Writes: Stack Pointer] [Flow: call]
	jsl $06DC54.l		; 22 54 DC 06 ; Jump to subroutine long $06DC54.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $DD85.w		; 20 85 DD ; Jump to subroutine at $DD85.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0B89.w,X		; BD 89 0B ; Load $0B89.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$30.b		; 09 30 ; Logical OR #$30.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	jsl $06DBF0.l		; 22 F0 DB 06 ; Jump to subroutine long $06DBF0.l [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8C5.w		; 20 C5 E8 ; Jump to subroutine at $E8C5.w [Writes: Stack Pointer] [Flow: call]
	jsr $C211.w		; 20 11 C2 ; Jump to subroutine at $C211.w [Writes: Stack Pointer] [Flow: call]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	ldx $E5DD.w		; AE DD E5 ; Load $E5DD.w into X register [Writes: X Index] [Flags: ZN]
	cmp $DE09.w,X		; DD 09 DE ; Compare accumulator $DE09.w,X [Reads: X Index] [Flags: ZNC]
	ror $DE.b		; 66 DE ; Rotate right $DE.b [Reads: Direct Page] [Flags: ZNC]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	jsr $E898.w		; 20 98 E8 ; Jump to subroutine at $E898.w [Writes: Stack Pointer] [Flow: call]
	jsr $DE5A.w		; 20 5A DE ; Jump to subroutine at $DE5A.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FD8.w		; ED D8 0F ; Subtract $0FD8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	adc #$0050.w		; 69 50 00 ; Add #$0050.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$00A0.w		; C9 A0 00 ; Compare #$00A0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $1E		; B0 1E ; Branch if carry set to $B0, $1E [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FDA.w		; ED DA 0F ; Subtract $0FDA.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	adc #$0058.w		; 69 58 00 ; Add #$0058.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$00A0.w		; C9 A0 00 ; Compare #$00A0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$1E.b		; A9 1E ; Load #$1E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	ldy $0D90.w,X		; BC 90 0D ; Load Y register $0D90.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $DDAC.w,Y		; B9 AC DD ; Load $DDAC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA12.l		; 22 12 EA 06 ; Jump to subroutine long $06EA12.l [Writes: Stack Pointer] [Flow: call]
	inc $0F70.w,X		; FE 70 0F ; Increment memory $0F70.w,X [Reads: X Index] [Flags: ZN]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $0FFF.w		; AD FF 0F ; Load $0FFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $28		; B0 28 ; Branch if carry set to $B0, $28 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA1A.l		; 22 1A EA 06 ; Jump to subroutine long $06EA1A.l [Writes: Stack Pointer] [Flow: call]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	inc $0D40.w,X		; FE 40 0D ; Increment memory $0D40.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	dec $0D40.w,X		; DE 40 0D ; Decrement memory $0D40.w,X [Reads: X Index] [Flags: ZN]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $01.b		; C5 01 ; Compare $01.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	inc $0D50.w,X		; FE 50 0D ; Increment memory $0D50.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	dec $0D50.w,X		; DE 50 0D ; Decrement memory $0D50.w,X [Reads: X Index] [Flags: ZN]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $DD83.w,Y		; 19 83 DD ; OR accumulator with memory $DD83.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $DD		; B0 DD ; Branch if carry set to $B0, $DD [Flow: branch]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA1A.l		; 22 1A EA 06 ; Jump to subroutine long $06EA1A.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	.db $80, $A5		; 80 A5 ; Branch always to $80, $A5 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $DECB.w		; 20 CB DE ; Jump to subroutine at $DECB.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $F8.b,X		; 16 F8 ; Arithmetic shift left $F8.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	nop		; EA ; No operation
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($21.b,S),Y		; 13 21 ; OR accumulator (stack relative indirect indexed) ($21.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc ($ED.b)		; F2 ED ; Subtract with carry (indirect) ($ED.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $0000E6.l,X		; DF E6 00 00 ; Compare accumulator (long,X) $0000E6.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F8FFFF.l,X		; FF FF FF F8 ; Subtract with carry (long,X) $F8FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pea $F4F8.w		; F4 F8 F4 ; Push absolute address $F4F8.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $ECE8F4.l,X		; FF F4 E8 EC ; Subtract with carry (long,X) $ECE8F4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFE8F4.l,X		; FF F4 E8 FF ; Subtract with carry (long,X) $FFE8F4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FFFF.l,X		; FF FF FF 00 ; Subtract with carry (long,X) $00FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$9D.b		; 09 9D ; Logical OR #$9D.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	ldy #$0D.b		; A0 0D ; Load #$0D.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1DF65F.l		; 22 5F F6 1D ; Jump to subroutine long $1DF65F.l [Writes: Stack Pointer] [Flow: call]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD1.w,Y		; 99 D1 0D ; Store accumulator to $0DD1.w,Y [Reads: Accumulator, Y Index]
	lda #$BE.b		; A9 BE ; Load #$BE.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E21.w,Y		; 99 21 0E ; Store accumulator to $0E21.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	jsl $0DB818.l		; 22 18 B8 0D ; Jump to subroutine long $0DB818.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F21.w,Y		; 99 21 0F ; Store accumulator to $0F21.w,Y [Reads: Accumulator, Y Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $DE8A.w,Y		; 79 8A DE ; Add $DE8A.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D11.w,Y		; 99 11 0D ; Store accumulator to $0D11.w,Y [Reads: Accumulator, Y Index]
	sta $0D91.w,Y		; 99 91 0D ; Store accumulator to $0D91.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $DE97.w,Y		; 79 97 DE ; Add $DE97.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D31.w,Y		; 99 31 0D ; Store accumulator to $0D31.w,Y [Reads: Accumulator, Y Index]
	sta $0DA1.w,Y		; 99 A1 0D ; Store accumulator to $0DA1.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $DEA4.w,Y		; 79 A4 DE ; Add $DEA4.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$20.b		; 69 20 ; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D01.w,Y		; 99 01 0D ; Store accumulator to $0D01.w,Y [Reads: Accumulator, Y Index]
	sta $0DB1.w,Y		; 99 B1 0D ; Store accumulator to $0DB1.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	adc $DEB1.w,Y		; 79 B1 DE ; Add $DEB1.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D21.w,Y		; 99 21 0D ; Store accumulator to $0D21.w,Y [Reads: Accumulator, Y Index]
	sta $0DE1.w,Y		; 99 E1 0D ; Store accumulator to $0DE1.w,Y [Reads: Accumulator, Y Index]
	lda $DEBE.w,Y		; B9 BE DE ; Load $DEBE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC1.w,Y		; 99 C1 0D ; Store accumulator to $0DC1.w,Y [Reads: Accumulator, Y Index]
	sta $0BA1.w,Y		; 99 A1 0B ; Store accumulator to $0BA1.w,Y [Reads: Accumulator, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	adc $0F.b		; 65 0F ; Add $0F.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0E81.w,Y		; 99 81 0E ; Store accumulator to $0E81.w,Y [Reads: Accumulator, Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $99		; 10 99 ; Branch if plus to $10, $99 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $0810.w		; 20 10 08 ; Jump to subroutine at $0810.w [Writes: Stack Pointer] [Flow: call]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	jsr $E37D.w		; 20 7D E3 ; Jump to subroutine at $E37D.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $F0, $7D		; F0 7D ; Branch if equal to $F0, $7D [Flow: branch]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	jsl $05A029.l		; 22 29 A0 05 ; Jump to subroutine long $05A029.l [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $15		; [PATTERN: Memory clearing operation] D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	jsl $06F129.l		; 22 29 F1 06 ; Jump to subroutine long $06F129.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $0F		; 90 0F ; Branch if carry clear to $90, $0F [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	stz $02E9.w		; 9C E9 02 ; Store zero to $02E9.w
	ldy $0D90.w,X		; BC 90 0D ; Load Y register $0D90.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0799AD.l		; 22 AD 99 07 ; Jump to subroutine long $0799AD.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0EE0.w,X		; BD E0 0E ; Load $0EE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBA88.l		; 22 88 BA 0D ; Jump to subroutine long $0DBA88.l [Writes: Stack Pointer] [Flow: call]
	jsl $06DBF0.l		; 22 F0 DB 06 ; Jump to subroutine long $06DBF0.l [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jsr $E948.w		; 20 48 E9 ; Jump to subroutine at $E948.w [Writes: Stack Pointer] [Flow: call]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $3A		; 10 3A ; Branch if plus to $10, $3A [Flow: branch]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror $0D50.w,X		; 7E 50 0D ; Rotate right $0D50.w,X [Reads: X Index] [Flags: ZNC]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror $0D40.w,X		; 7E 40 0D ; Rotate right $0D40.w,X [Reads: X Index] [Flags: ZNC]
	ldy $0D80.w,X		; [PATTERN: Memory clearing operation] BC 80 0D ; Load Y register $0D80.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$04.b		; C0 04 ; Compare #$04.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	stz $0D50.w,X		; 9E 50 0D ; Store zero to $0D50.w,X [Reads: X Index]
	stz $0D40.w,X		; 9E 40 0D ; Store zero to $0D40.w,X [Reads: X Index]
	stz $0F80.w,X		; 9E 80 0F ; Store zero to $0F80.w,X [Reads: X Index]
	.db $80, $17		; 80 17 ; Branch always to $80, $17 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda $DF45.w,Y		; B9 45 DF ; Load $DF45.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	jsr $E21C.w		; 20 1C E2 ; Jump to subroutine at $E21C.w [Writes: Stack Pointer] [Flow: call]
	.db $30, $05		; 30 05 ; Branch if minus to $30, $05 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E320.w		; 20 20 E3 ; Jump to subroutine at $E320.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	inc $DF.b		; E6 DF ; Increment $DF.b [Reads: Direct Page] [Flags: ZN]
	and $8CE0.w,Y		; 39 E0 8C ; AND accumulator with memory $8CE0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx #$D3.b		; E0 D3 ; Compare #$D3.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$A0.b		; E0 A0 ; Compare #$A0.b with X register [Reads: X Index] [Flags: ZNC]
	ora $0FA0CC.l		; 0F CC A0 0F ; OR accumulator with memory (long) $0FA0CC.l [Writes: Accumulator] [Flags: ZN]
	.db $F0, $46		; F0 46 ; Branch if equal to $F0, $46 [Flow: branch]
	lda $0DD0.w,Y		; B9 D0 0D ; Load $0DD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $3F		; D0 3F ; Branch if not equal to $D0, $3F [Flow: branch]
	lda $0D10.w,Y		; B9 10 0D ; Load $0D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0020.w		; 69 20 00 ; Add #$0020.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0040.w		; C9 40 00 ; Compare #$0040.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $1A		; B0 1A ; Branch if carry set to $B0, $1A [Flow: branch]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $02.b		; E5 02 ; Subtract $02.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0020.w		; 69 20 00 ; Add #$0020.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0040.w		; C9 40 00 ; Compare #$0040.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0B		; B0 0B ; Branch if carry set to $B0, $0B [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $B0		; 10 B0 ; Branch if plus to $10, $B0 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; [PATTERN: Memory clearing operation] BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	jsr $E02A.w		; 20 2A E0 ; Jump to subroutine at $E02A.w [Writes: Stack Pointer] [Flow: call]
	stz $011A.w		; 9C 1A 01 ; Store zero to $011A.w
	stz $011B.w		; 9C 1B 01 ; Store zero to $011B.w
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	jsr $E1ED.w		; 20 ED E1 ; Jump to subroutine at $E1ED.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$C0.b		; C9 C0 ; Compare #$C0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $1D		; B0 1D ; Branch if carry set to $B0, $1D [Flow: branch]
	cmp #$BF.b		; C9 BF ; Compare #$BF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	ldy #$07.b		; A0 07 ; Load #$07.b into Y register [Writes: Y Index] [Flags: ZN]
	sty $012D.w		; 8C 2D 01 ; Store Y register to $012D.w [Reads: Y Index]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $8000.w,Y		; B9 00 80 ; Load $8000.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $011A.w		; 8D 1A 01 ; Store accumulator to $011A.w [Reads: Accumulator]
	lda $8002.w,Y		; B9 02 80 ; Load $8002.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $011B.w		; 8D 1B 01 ; Store accumulator to $011B.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	jsr $E948.w		; 20 48 E9 ; Jump to subroutine at $E948.w [Writes: Stack Pointer] [Flow: call]
	lda $0F80.w,X		; BD 80 0F ; Load $0F80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$02.b		; E9 02 ; Subtract #$02.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	cmp #$D0.b		; C9 D0 ; Compare #$D0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $E1ED.w		; 20 ED E1 ; Jump to subroutine at $E1ED.w [Writes: Stack Pointer] [Flow: call]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $E07C.w,Y		; B9 7C E0 ; Load $E07C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$A0.b		; C9 A0 ; Compare #$A0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $E21C.w		; 20 1C E2 ; Jump to subroutine at $E21C.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $B0, $7D		; B0 7D ; Branch if carry set to $B0, $7D [Flow: branch]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $E1ED.w		; 20 ED E1 ; Jump to subroutine at $E1ED.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $E21C.w		; 20 1C E2 ; Jump to subroutine at $E21C.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp #$60.b		; C9 60 ; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	ldy #$2A.b		; A0 2A ; Load #$2A.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $7EF349.l		; AF 49 F3 7E ; Load long $7EF349.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$2B.b		; A0 2B ; Load #$2B.b into Y register [Writes: Y Index] [Flags: ZN]
	sty $1CF0.w		; 8C F0 1C ; Store Y register to $1CF0.w [Reads: Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF1.w		; 8D F1 1C ; Store accumulator to $1CF1.w [Reads: Accumulator]
	jsl $05FA8E.l		; 22 8E FA 05 ; Jump to subroutine long $05FA8E.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$50.b		; C9 50 ; Compare #$50.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7EF349.l		; AF 49 F3 7E ; Load long $7EF349.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	jsr $E144.w		; 20 44 E1 ; Jump to subroutine at $E144.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	jsl $0DDA06.l		; 22 06 DA 0D ; Jump to subroutine long $0DDA06.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	jsr $E16C.w		; 20 6C E1 ; Jump to subroutine at $E16C.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $E0BF.w,Y		; B9 BF E0 ; Load $E0BF.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$4A.b		; A9 4A ; Load #$4A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $17		; 30 17 ; Branch if minus to $30, $17 [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	jsl $06AD50.l		; 22 50 AD 06 ; Jump to subroutine long $06AD50.l [Writes: Stack Pointer] [Flow: call]
	lda #$50.b		; A9 50 ; Load #$50.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,Y		; 99 00 0E ; Store accumulator to $0E00.w,Y [Reads: Accumulator, Y Index]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,Y		; 99 80 0F ; Store accumulator to $0F80.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$FC.b		; C9 FC ; Compare #$FC.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $E21C.w		; 20 1C E2 ; Jump to subroutine at $E21C.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$C0.b		; A9 C0 ; Load #$C0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $35		; 30 35 ; Branch if minus to $30, $35 [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda #$11.b		; A9 11 ; Load #$11.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	lda #$83.b		; A9 83 ; Load #$83.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	lda #$58.b		; A9 58 ; Load #$58.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda #$1C.b		; A9 1C ; Load #$1C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $00D4ED.l		; 22 ED D4 00 ; Jump to subroutine long $00D4ED.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$C0.b		; A9 C0 ; Load #$C0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $3A		; 30 3A ; Branch if minus to $30, $3A [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda #$1E.b		; A9 1E ; Load #$1E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	lda #$83.b		; A9 83 ; Load #$83.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	lda #$54.b		; A9 54 ; Load #$54.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EE0.w,X		; 9D E0 0E ; Store accumulator to $0EE0.w,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda #$11.b		; A9 11 ; Load #$11.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $00D4ED.l		; 22 ED D4 00 ; Jump to subroutine long $00D4ED.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$EC.b		; A9 EC ; Load #$EC.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $1E		; 30 1E ; Branch if minus to $30, $1E [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,Y		; 99 D0 0D ; Store accumulator to $0DD0.w,Y [Reads: Accumulator, Y Index]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,Y		; 99 80 0D ; Store accumulator to $0D80.w,Y [Reads: Accumulator, Y Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $E21C.w		; 20 1C E2 ; Jump to subroutine at $E21C.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$C0.b		; A9 C0 ; Load #$C0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $1B		; 30 1B ; Branch if minus to $30, $1B [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,Y		; 99 90 0D ; Store accumulator to $0D90.w,Y [Reads: Accumulator, Y Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr ($04FF.w,X)		; FC FF 04 ; Jump to subroutine indirect indexed ($04FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8C0004.l,X		; FF 04 00 8C ; Subtract with carry (long,X) $8C0004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8CFFFC.l,X		; FF FC FF 8C ; Subtract with carry (long,X) $8CFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00008D.l,X		; FF 8D 00 00 ; Subtract with carry (long,X) $00008D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $9C0004.l,X		; FF 04 00 9C ; Subtract with carry (long,X) $9C0004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9D.b		; 00 9D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8DFFFC.l,X		; FF FC FF 8D ; Subtract with carry (long,X) $8DFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	jsr ($8CFF.w,X)		; FC FF 8C ; Jump to subroutine indirect indexed ($8CFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($04FF.w,X)		; FC FF 04 ; Jump to subroutine indirect indexed ($04FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $9D.b		; 00 9D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	stz $0040.w		; 9C 40 00 ; Store zero to $0040.w
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $9DFFFC.l,X		; FF FC FF 9D ; Subtract with carry (long,X) $9DFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00C09C.l,X		; FF 9C C0 00 ; Subtract with carry (long,X) $00C09C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8D0004.l,X		; FF 04 00 8D ; Subtract with carry (long,X) $8D0004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $9D0004.l,X		; FF 04 00 9D ; Subtract with carry (long,X) $9D0004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9C.b		; 00 9C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $9D0004.l,X		; FF 04 00 9D ; Subtract with carry (long,X) $9D0004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9C.b		; 00 9C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $860000.l,X		; FF 00 00 86 ; Subtract with carry (long,X) $860000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$E240.w		; 69 40 E2 ; Add #$E240.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8549.w		; 4C 49 85 ; Jump to $8549.w [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $80FFFC.l,X		; FF FC FF 80 ; Subtract with carry (long,X) $80FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000080.l,X		; FF 80 00 00 ; Subtract with carry (long,X) $000080.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $BFFFFE.l,X		; FF FE FF BF ; Subtract with carry (long,X) $BFFFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0040AF.l,X		; FF AF 40 00 ; Subtract with carry (long,X) $0040AF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000E7.l,X		; FF E7 00 00 ; Subtract with carry (long,X) $0000E7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000E7.l,X		; FF E7 00 00 ; Subtract with carry (long,X) $0000E7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000C0.l,X		; FF C0 00 00 ; Subtract with carry (long,X) $0000C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000C0.l,X		; FF C0 00 00 ; Subtract with carry (long,X) $0000C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$E33D.w		; 69 3D E3 ; Add #$E33D.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $8549.w		; 4C 49 85 ; Jump to $8549.w [Flow: jump]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $000F00.l		; 0F 00 0F 00 ; OR accumulator with memory (long) $000F00.l [Writes: Accumulator] [Flags: ZN]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $000F00.l		; 0F 00 0F 00 ; OR accumulator with memory (long) $000F00.l [Writes: Accumulator] [Flags: ZN]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $000F00.l		; 0F 00 0F 00 ; OR accumulator with memory (long) $000F00.l [Writes: Accumulator] [Flags: ZN]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $000F00.l		; 0F 00 0F 00 ; OR accumulator with memory (long) $000F00.l [Writes: Accumulator] [Flags: ZN]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$0E.b		; 29 0E ; Logical AND #$0E.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldy $0D90.w,X		; BC 90 0D ; Load Y register $0D90.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$B1.b		; 29 B1 ; Logical AND #$B1.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $E3A5.w,Y		; 19 A5 E3 ; OR accumulator with memory $E3A5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $E39D.w,Y		; B9 9D E3 ; Load $E39D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $048E.w		; AC 8E 04 ; Load $048E.w into Y register [Writes: Y Index] [Flags: ZN]
	cpy #$20.b		; C0 20 ; Compare #$20.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsl $06DBF0.l		; 22 F0 DB 06 ; Jump to subroutine long $06DBF0.l [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $54		; D0 54 ; Branch if not equal to $D0, $54 [Flow: branch]
	jsr $E475.w		; 20 75 E4 ; Jump to subroutine at $E475.w [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$D0.b		; C9 D0 ; Compare #$D0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	stz $01.b		; 64 01 ; Store zero to $01.b
	lda $E3AD.w,Y		; B9 AD E3 ; Load $E3AD.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	dec $01.b		; C6 01 ; Decrement $01.b [Reads: Direct Page] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D10.w,X		; 7D 10 0D ; Add $0D10.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $01.b		; 65 01 ; Add $01.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldx #$1D.b		; A2 1D ; Load #$1D.b into X register [Writes: X Index] [Flags: ZN]
	lda $7FF800.l,X		; BF 00 F8 7F ; Load long $7FF800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F7		; 10 F7 ; Branch if plus to $10, $F7 [Flow: branch]
	dec $0FF8.w		; CE F8 0F ; Decrement $0FF8.w [Flags: ZN]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	lda #$1D.b		; A9 1D ; Load #$1D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FF8.w		; 8D F8 0F ; Store accumulator to $0FF8.w [Reads: Accumulator]
	ldx $0FF8.w		; AE F8 0F ; Load $0FF8.w into X register [Writes: X Index] [Flags: ZN]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF800.l,X		; 9F 00 F8 7F ; Store accumulator (long,X) $7FF800.l,X [Reads: Accumulator, X Index]
	sta $0FB4.w		; 8D B4 0F ; Store accumulator to $0FB4.w [Reads: Accumulator]
	lda $0D90.w,Y		; B9 90 0D ; Load $0D90.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FF92C.l,X		; 9F 2C F9 7F ; Store accumulator (long,X) $7FF92C.l,X [Reads: Accumulator, X Index]
	lda $0D10.w,Y		; B9 10 0D ; Load $0D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FF83C.l,X		; 9F 3C F8 7F ; Store accumulator (long,X) $7FF83C.l,X [Reads: Accumulator, X Index]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FF878.l,X		; 9F 78 F8 7F ; Store accumulator (long,X) $7FF878.l,X [Reads: Accumulator, X Index]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF81E.l,X		; 9F 1E F8 7F ; Store accumulator (long,X) $7FF81E.l,X [Reads: Accumulator, X Index]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF85A.l,X		; 9F 5A F8 7F ; Store accumulator (long,X) $7FF85A.l,X [Reads: Accumulator, X Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF90E.l,X		; 9F 0E F9 7F ; Store accumulator (long,X) $7FF90E.l,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0F10.w,X		; BD 10 0F ; Load $0F10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $E716.w		; 20 16 E7 ; Jump to subroutine at $E716.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jsr $E5DA.w		; 20 DA E5 ; Jump to subroutine at $E5DA.w [Writes: Stack Pointer] [Flow: call]
	jsr $C211.w		; 20 11 C2 ; Jump to subroutine at $C211.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cpx $49.b		; E4 49 ; Compare $49.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $8B.b		; E5 8B ; Subtract $8B.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $9C.b		; E5 9C ; Subtract $9C.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora $0EA09E.l		; 0F 9E A0 0E ; OR accumulator with memory (long) $0EA09E.l [Writes: Accumulator] [Flags: ZN]
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$40.b		; 09 40 ; Logical OR #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $30		; D0 30 ; Branch if not equal to $D0, $30 [Flow: branch]
	dec $0D90.w,X		; DE 90 0D ; Decrement memory $0D90.w,X [Reads: X Index] [Flags: ZN]
	.db $D0, $2B		; D0 2B ; Branch if not equal to $D0, $2B [Flow: branch]
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F10.w,X		; 9D 10 0F ; Store accumulator to $0F10.w,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	stz $0BA0.w,X		; 9E A0 0B ; Store zero to $0BA0.w,X [Reads: X Index]
	lda #$35.b		; A9 35 ; Load #$35.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$30.b		; 29 30 ; Logical AND #$30.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $80, $A0		; 80 A0 ; Branch always to $80, $A0 [Flow: branch]
	cpy #$E0.b		; C0 E0 ; Compare #$E0.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $9E.b		; 00 9E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$0E.b		; A0 0E ; Load #$0E.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F10.w,X		; 9D 10 0F ; Store accumulator to $0F10.w,X [Reads: Accumulator, X Index]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	ldy $0ED0.w,X		; BC D0 0E ; Load Y register $0ED0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $E53F.w,Y		; B9 3F E5 ; Load $E53F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$41.b		; C9 41 ; Compare #$41.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$42.b		; C9 42 ; Compare #$42.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	jsl $1DE612.l		; 22 12 E6 1D ; Jump to subroutine long $1DE612.l [Writes: Stack Pointer] [Flow: call]
	stz $0DC0.w,X		; 9E C0 0D ; Store zero to $0DC0.w,X [Reads: X Index]
	jsr $E898.w		; 20 98 E8 ; Jump to subroutine at $E898.w [Writes: Stack Pointer] [Flow: call]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	lda $E53D.w,Y		; B9 3D E5 ; Load $E53D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr $E563.w		; 20 63 E5 ; Jump to subroutine at $E563.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8C5.w		; 20 C5 E8 ; Jump to subroutine at $E8C5.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $E589.w,Y		; B9 89 E5 ; Load $E589.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	jsr $E952.w		; 20 52 E9 ; Jump to subroutine at $E952.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E948.w		; 20 48 E9 ; Jump to subroutine at $E948.w [Writes: Stack Pointer] [Flow: call]
	jsr $8094.w		; 20 94 80 ; Jump to subroutine at $8094.w [Writes: Stack Pointer] [Flow: call]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $14		; 10 14 ; Branch if plus to $10, $14 [Flow: branch]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA12.l		; 22 12 EA 06 ; Jump to subroutine long $06EA12.l [Writes: Stack Pointer] [Flow: call]
	lda #$21.b		; A9 21 ; Load #$21.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$08.b]		; 07 08 ; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $050D.w		; 0C 0D 05 ; Test and set bits $050D.w [Reads: Accumulator] [Flags: Z]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $E5CA.w,Y		; B9 CA E5 ; Load $E5CA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0D80.w,Y		; B9 80 0D ; Load $0D80.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,Y		; 99 80 0D ; Store accumulator to $0D80.w,Y [Reads: Accumulator, Y Index]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $0E80.w,X		; DE 80 0E ; Decrement memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $FF0000.l,X		; FF 00 00 FF ; Subtract with carry (long,X) $FF0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $4B8B00.l,X		; FF 00 8B 4B ; Subtract with carry (long,X) $4B8B00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda #$BF.b		; A9 BF ; Load #$BF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $37		; 30 37 ; Branch if minus to $30, $37 [Flow: branch]
	lda #$26.b		; A9 26 ; Load #$26.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,Y		; 99 90 0D ; Store accumulator to $0D90.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E602.w,X		; 7D 02 E6 ; Add $E602.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $E60A.w,X		; 7D 0A E6 ; Add $E60A.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$0C.b		; 69 0C ; Add #$0C.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FF9.w		; 8D F9 0F ; Store accumulator to $0FF9.w [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $C0FFF8.l,X		; FF F8 FF C0 ; Subtract with carry (long,X) $C0FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0041C0.l,X		; FF C0 41 00 ; Subtract with carry (long,X) $0041C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E00008.l,X		; FF 08 00 E0 ; Subtract with carry (long,X) $E00008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C8FFF8.l,X		; FF F8 FF C8 ; Subtract with carry (long,X) $C8FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0001CA.l,X		; FF CA 01 00 ; Subtract with carry (long,X) $0001CA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E80008.l,X		; FF 08 00 E8 ; Subtract with carry (long,X) $E80008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EA.b		; 00 EA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $CAFFF8.l,X		; FF F8 FF CA ; Subtract with carry (long,X) $CAFFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0041C8.l,X		; FF C8 41 00 ; Subtract with carry (long,X) $0041C8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $EA0008.l,X		; FF 08 00 EA ; Subtract with carry (long,X) $EA0008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C2FFF8.l,X		; FF F8 FF C2 ; Subtract with carry (long,X) $C2FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0041C2.l,X		; FF C2 41 00 ; Subtract with carry (long,X) $0041C2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E20008.l,X		; FF 08 00 E2 ; Subtract with carry (long,X) $E20008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E2.b		; 00 E2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C4FFF8.l,X		; FF F8 FF C4 ; Subtract with carry (long,X) $C4FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0041C4.l,X		; FF C4 41 00 ; Subtract with carry (long,X) $0041C4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E40008.l,X		; FF 08 00 E4 ; Subtract with carry (long,X) $E40008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $F9.b		; 02 F9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C4FFF9.l,X		; FF F9 FF C4 ; Subtract with carry (long,X) $C4FFF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0041C4.l,X		; FF C4 41 00 ; Subtract with carry (long,X) $0041C4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F9.b		; 02 F9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E40007.l,X		; FF 07 00 E4 ; Subtract with carry (long,X) $E40007.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$E656.w		; 69 56 E6 ; Add #$E656.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0009.w		; C9 09 00 ; Compare #$0009.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda #$0800.w		; A9 00 08 ; Load #$0800.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	lda #$0A20.w		; A9 20 0A ; Load #$0A20.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8549.w		; 20 49 85 ; Jump to subroutine at $8549.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $0B89.w,X		; BD 89 0B ; Load $0B89.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$F1.b		; 29 F1 ; Logical AND #$F1.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	jsl $1DD1AF.l		; 22 AF D1 1D ; Jump to subroutine long $1DD1AF.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $80BDFF.l,X		; FF FF BD 80 ; Subtract with carry (long,X) $80BDFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $4A4A.w		; 0E 4A 4A ; Arithmetic shift left $4A4A.w [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$06.b		; 29 06 ; Logical AND #$06.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E763.w,Y		; 79 63 E7 ; Add $E763.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0FD8.w		; 8D D8 0F ; Store accumulator to $0FD8.w [Reads: Accumulator]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E76B.w,Y		; 79 6B E7 ; Add $E76B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0FDA.w		; 8D DA 0F ; Store accumulator to $0FDA.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $06DBF0.l		; 22 F0 DB 06 ; Jump to subroutine long $06DBF0.l [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $06F2AA.l		; 22 AA F2 06 ; Jump to subroutine long $06F2AA.l [Writes: Stack Pointer] [Flow: call]
	jsl $06F121.l		; 22 21 F1 06 ; Jump to subroutine long $06F121.l [Writes: Stack Pointer] [Flow: call]
	lda $0EA0.w,X		; BD A0 0E ; Load $0EA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0E.b		; C9 0E ; Compare #$0E.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EA0.w,X		; 9D A0 0E ; Store accumulator to $0EA0.w,X [Reads: Accumulator, X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	jmp $E82A.w		; 4C 2A E8 ; Jump to $E82A.w [Flow: jump]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0ED0.w,X		; 9D D0 0E ; Store accumulator to $0ED0.w,X [Reads: Accumulator, X Index]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0EC0.w,X		; 9D C0 0E ; Store accumulator to $0EC0.w,X [Reads: Accumulator, X Index]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0E30.w,X		; 9D 30 0E ; Store accumulator to $0E30.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E8C5.w		; 20 C5 E8 ; Jump to subroutine at $E8C5.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $24		; D0 24 ; Branch if not equal to $D0, $24 [Flow: branch]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0EC0.w,X		; BD C0 0E ; Load $0EC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0E30.w,X		; BD 30 0E ; Load $0E30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA22.l		; 22 22 EA 06 ; Jump to subroutine long $06EA22.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0D10.w,X		; FD 10 0D ; Subtract with carry $0D10.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $11		; B0 11 ; Branch if carry set to $B0, $11 [Flow: branch]
	lda $0EC0.w,X		; BD C0 0E ; Load $0EC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0D00.w,X		; FD 00 0D ; Subtract with carry $0D00.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E8C5.w		; 20 C5 E8 ; Jump to subroutine at $E8C5.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $24		; D0 24 ; Branch if not equal to $D0, $24 [Flow: branch]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA22.l		; 22 22 EA 06 ; Jump to subroutine long $06EA22.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0D10.w,X		; FD 10 0D ; Subtract with carry $0D10.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $29		; B0 29 ; Branch if carry set to $B0, $29 [Flow: branch]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0D00.w,X		; FD 00 0D ; Subtract with carry $0D00.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $1B		; B0 1B ; Branch if carry set to $B0, $1B [Flow: branch]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $06EAA0.l		; 22 A0 EA 06 ; Jump to subroutine long $06EAA0.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $06EACD.l		; 22 CD EA 06 ; Jump to subroutine long $06EACD.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $06EAE4.l		; 22 E4 EA 06 ; Jump to subroutine long $06EAE4.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda $0FC1.w		; AD C1 0F ; Load $0FC1.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $0CAA.w,X		; BD AA 0C ; Load $0CAA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $07		; 30 07 ; Branch if minus to $30, $07 [Flow: branch]
	lda $0F00.w,X		; BD 00 0F ; Load $0F00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $BD03.w		; 0C 03 BD ; Test and set bits $BD03.w [Reads: Accumulator] [Flags: Z]
	ldy #$0E.b		; A0 0E ; Load #$0E.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $F0, $79		; F0 79 ; Branch if equal to $F0, $79 [Flow: branch]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $76		; F0 76 ; Branch if equal to $F0, $76 [Flow: branch]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	dec $0EA0.w,X		; DE A0 0E ; Decrement memory $0EA0.w,X [Reads: X Index] [Flags: ZN]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda $0F40.w,X		; BD 40 0F ; Load $0F40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$20.b		; 69 20 ; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	lda $0F30.w,X		; BD 30 0F ; Load $0F30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$20.b		; 69 20 ; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda #$90.b		; A9 90 ; Load #$90.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EA0.w,X		; 9D A0 0E ; Store accumulator to $0EA0.w,X [Reads: Accumulator, X Index]
	lda $0EA0.w,X		; BD A0 0E ; Load $0EA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $39		; 30 39 ; Branch if minus to $30, $39 [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $E8BF.w,Y		; 39 BF E8 ; AND accumulator with memory $E8BF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $2F		; D0 2F ; Branch if not equal to $D0, $2F [Flow: branch]
	lda $0F30.w,X		; BD 30 0F ; Load $0F30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $0F40.w,X		; BD 40 0F ; Load $0F40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $0CD2.w,X		; BD D2 0C ; Load $0CD2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $1B		; 30 1B ; Branch if minus to $30, $1B [Flow: branch]
	jsr $8094.w		; 20 94 80 ; Jump to subroutine at $8094.w [Writes: Stack Pointer] [Flow: call]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $14		; [PATTERN: Memory clearing operation] F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	stz $0F40.w,X		; 9E 40 0F ; Store zero to $0F40.w,X [Reads: X Index]
	stz $0D50.w,X		; 9E 50 0D ; Store zero to $0D50.w,X [Reads: X Index]
	.db $80, $06		; [PATTERN: Memory clearing operation] 80 06 ; Branch always to $80, $06 [Flow: branch]
	stz $0F30.w,X		; 9E 30 0F ; Store zero to $0F30.w,X [Reads: X Index]
	stz $0D40.w,X		; 9E 40 0D ; Store zero to $0D40.w,X [Reads: X Index]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$CE.b		; C9 CE ; Compare #$CE.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0EA0.w,X		; 9E A0 0E ; Store zero to $0EA0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E98B.w		; 20 8B E9 ; Jump to subroutine at $E98B.w [Writes: Stack Pointer] [Flow: call]
	jsr $E952.w		; 20 52 E9 ; Jump to subroutine at $E952.w [Writes: Stack Pointer] [Flow: call]
	jsr $E95D.w		; 20 5D E9 ; Jump to subroutine at $E95D.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsr $E95D.w		; 20 5D E9 ; Jump to subroutine at $E95D.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $28		; F0 28 ; Branch if equal to $F0, $28 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D60.w,X		; 7D 60 0D ; Add $0D60.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D60.w,X		; 9D 60 0D ; Store accumulator to $0D60.w,X [Reads: Accumulator, X Index]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	ora #$F0.b		; 09 F0 ; Logical OR #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc $0D00.w,X		; 7D 00 0D ; Add $0D00.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $0D20.w,X		; 7D 20 0D ; Add $0D20.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0F80.w,X		; BD 80 0F ; Load $0F80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0F90.w,X		; 7D 90 0F ; Add $0F90.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0F90.w,X		; 9D 90 0F ; Store accumulator to $0F90.w,X [Reads: Accumulator, X Index]
	lda $0F80.w,X		; BD 80 0F ; Load $0F80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ora #$F0.b		; 09 F0 ; Logical OR #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $0F70.w,X		; 7D 70 0F ; Add $0F70.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $06E416.l		; 22 16 E4 06 ; Jump to subroutine long $06E416.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0FF9.w		; AD F9 0F ; Load $0FF9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	ldy $11.b		; A4 11 ; Load $11.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	dec $0FF9.w		; CE F9 0F ; Decrement $0FF9.w [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	jsl $0ED8FB.l		; 22 FB D8 0E ; Jump to subroutine long $0ED8FB.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	jsl $0ED757.l		; 22 57 D7 0E ; Jump to subroutine long $0ED757.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	jsl $0ED83A.l		; 22 3A D8 0E ; Jump to subroutine long $0ED83A.l [Writes: Stack Pointer] [Flow: call]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	cmp #$0E.b		; C9 0E ; Compare #$0E.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	lda $0FFA.w		; AD FA 0F ; Load $0FFA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: ZN]
	stx $0FA0.w		; 8E A0 0F ; Store X register to $0FA0.w [Reads: X Index]
	lda $1D00.w,X		; BD 00 1D ; Load $1D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $EA00.w		; 20 00 EA ; Jump to subroutine at $EA00.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F2		; 10 F2 ; Branch if plus to $10, $F2 [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0FFA.w		; 9C FA 0F ; Store zero to $0FFA.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0B89.w,X		; BD 89 0B ; Load $0B89.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0E40.w,X		; BD 40 0E ; Load $0E40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0F20.w,X		; BD 20 0F ; Load $0F20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0E90.w,X		; BD 90 0E ; Load $0E90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7FF9C2.l,X		; BF C2 F9 7F ; Load long $7FF9C2.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0BA0.w,X		; BD A0 0B ; Load $0BA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $1D00.w,X		; BD 00 1D ; Load $1D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	lda $1D10.w,X		; BD 10 1D ; Load $1D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	lda $1D20.w,X		; BD 20 1D ; Load $1D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $1D30.w,X		; BD 30 1D ; Load $1D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $1D40.w,X		; BD 40 1D ; Load $1D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $1D50.w,X		; BD 50 1D ; Load $1D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	lda $1D60.w,X		; BD 60 1D ; Load $1D60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $1D70.w,X		; BD 70 1D ; Load $1D70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda $1D80.w,X		; BD 80 1D ; Load $1D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	lda $1D90.w,X		; BD 90 1D ; Load $1D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $1DA0.w,X		; BD A0 1D ; Load $1DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	lda $1DB0.w,X		; BD B0 1D ; Load $1DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	lda $1DC0.w,X		; BD C0 1D ; Load $1DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	lda $1DD0.w,X		; BD D0 1D ; Load $1DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,X		; 9D 20 0F ; Store accumulator to $0F20.w,X [Reads: Accumulator, X Index]
	lda $1DE0.w,X		; BD E0 1D ; Load $1DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda $1DF0.w,X		; BD F0 1D ; Load $1DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	lda $7FFA5C.l,X		; BF 5C FA 7F ; Load long $7FFA5C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DA0.w,X		; 9D A0 0D ; Store accumulator to $0DA0.w,X [Reads: Accumulator, X Index]
	lda $7FFA6C.l,X		; BF 6C FA 7F ; Load long $7FFA6C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	lda $7FFA7C.l,X		; BF 7C FA 7F ; Load long $7FFA7C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E90.w,X		; 9D 90 0E ; Store accumulator to $0E90.w,X [Reads: Accumulator, X Index]
	lda $7FFA8C.l,X		; BF 8C FA 7F ; Load long $7FFA8C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,X		; 9D 80 0E ; Store accumulator to $0E80.w,X [Reads: Accumulator, X Index]
	lda $7FFA9C.l,X		; BF 9C FA 7F ; Load long $7FFA9C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	lda $7FFAAC.l,X		; BF AC FA 7F ; Load long $7FFAAC.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $7FFACC.l,X		; BF CC FA 7F ; Load long $7FFACC.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FF9C2.l,X		; 9F C2 F9 7F ; Store accumulator (long,X) $7FF9C2.l,X [Reads: Accumulator, X Index]
	lda $7FFADC.l,X		; BF DC FA 7F ; Load long $7FFADC.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0BA0.w,X		; 9D A0 0B ; Store accumulator to $0BA0.w,X [Reads: Accumulator, X Index]
	jsl $0684DA.l		; 22 DA 84 06 ; Jump to subroutine long $0684DA.l [Writes: Stack Pointer] [Flow: call]
	lda $0F00.w,X		; BD 00 0F ; Load $0F00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stz $1D00.w,X		; 9E 00 1D ; Store zero to $1D00.w,X [Reads: X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0BA0.w,X		; 9D A0 0B ; Store accumulator to $0BA0.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $7FF9C2.l,X		; 9F C2 F9 7F ; Store accumulator (long,X) $7FF9C2.l,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0E80.w,X		; 9D 80 0E ; Store accumulator to $0E80.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0E90.w,X		; 9D 90 0E ; Store accumulator to $0E90.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0DA0.w,X		; 9D A0 0D ; Store accumulator to $0DA0.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0F20.w,X		; 9D 20 0F ; Store accumulator to $0F20.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr $4008.w		; 20 08 40 ; Jump to subroutine at $4008.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: ZN]
	jsr $280A.w		; 20 0A 28 ; Jump to subroutine at $280A.w [Writes: Stack Pointer] [Flow: call]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $30, $0A		; 30 0A ; Branch if minus to $30, $0A [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $EB68.w,Y		; B9 68 EB ; Load $EB68.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	stz $0B89.w,X		; 9E 89 0B ; Store zero to $0B89.w,X [Reads: X Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$30.b		; 09 30 ; Logical OR #$30.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	ldy #$41.b		; A0 41 ; Load #$41.b into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$39.b		; C9 39 ; Compare #$39.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$43.b		; A0 43 ; Load #$43.b into Y register [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $EB6C.w,Y		; B9 6C EB ; Load $EB6C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	lda $EB78.w,Y		; B9 78 EB ; Load $EB78.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $05C676.l		; 22 76 C6 05 ; Jump to subroutine long $05C676.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $EBF3.w		; 20 F3 EB ; Jump to subroutine at $EBF3.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0B30.w,X		; BD 30 0B ; Load $0B30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	dec $0B30.w,X		; DE 30 0B ; Decrement memory $0B30.w,X [Reads: X Index] [Flags: ZN]
	lda $0B28.w,X		; BD 28 0B ; Load $0B28.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	ora ($EC.b)		; 12 EC ; OR accumulator with memory (indirect) ($EC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $EC.b,X		; 34 EC ; Test bits $EC.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cpy $96EC.w		; CC EC 96 ; Compare $96EC.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpx $ECCC.w		; EC CC EC ; Compare $ECCC.w with X register [Reads: X Index] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	cpx $EC48.w		; EC 48 EC ; Compare $EC48.w with X register [Reads: X Index] [Flags: ZNC]
	adc #$EC.b		; 69 EC ; Add #$EC.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda $0D90.w		; AD 90 0D ; Load $0D90.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	lda #$78.b		; A9 78 ; Load #$78.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B08.w,X		; 9D 08 0B ; Store accumulator to $0B08.w,X [Reads: Accumulator, X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B40.w,X		; 9D 40 0B ; Store accumulator to $0B40.w,X [Reads: Accumulator, X Index]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B0A.w		; 8D 0A 0B ; Store accumulator to $0B0A.w [Reads: Accumulator]
	lda #$C0.b		; A9 C0 ; Load #$C0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B08.w		; 8D 08 0B ; Store accumulator to $0B08.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B09.w		; 8D 09 0B ; Store accumulator to $0B09.w [Reads: Accumulator]
	jsr $ECCC.w		; 20 CC EC ; Jump to subroutine at $ECCC.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $EDB8.w		; 20 B8 ED ; Jump to subroutine at $EDB8.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	inc $0B28.w,X		; FE 28 0B ; Increment memory $0B28.w,X [Reads: X Index] [Flags: ZN]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B30.w,X		; 9D 30 0B ; Store accumulator to $0B30.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($4D.b),Y		; 31 4D ; AND accumulator with memory ($4D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$83.b		; 69 83 ; Add #$83.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $30BDBB.l,X		; 9F BB BD 30 ; Store accumulator (long,X) $30BDBB.l,X [Reads: Accumulator, X Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	jsr $EDCB.w		; 20 CB ED ; Jump to subroutine at $EDCB.w [Writes: Stack Pointer] [Flow: call]
	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $EC42.w,Y		; B9 42 EC ; Load $EC42.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0B10.w,Y		; 99 10 0B ; Store accumulator to $0B10.w,Y [Reads: Accumulator, Y Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B30.w,Y		; 99 30 0B ; Store accumulator to $0B30.w,Y [Reads: Accumulator, Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $F2		; 10 F2 ; Branch if plus to $10, $F2 [Flow: branch]
	inc $0B28.w,X		; FE 28 0B ; Increment memory $0B28.w,X [Reads: X Index] [Flags: ZN]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B30.w,X		; 9D 30 0B ; Store accumulator to $0B30.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0B30.w,X		; BD 30 0B ; Load $0B30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $27		; D0 27 ; Branch if not equal to $D0, $27 [Flow: branch]
	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0B30.w,Y		; B9 30 0B ; Load $0B30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0B30.w,Y		; 99 30 0B ; Store accumulator to $0B30.w,Y [Reads: Accumulator, Y Index]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cmp #$C0.b		; C9 C0 ; Compare #$C0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B28.w,X		; 9D 28 0B ; Store accumulator to $0B28.w,X [Reads: Accumulator, X Index]
	lda $0B40.w,X		; BD 40 0B ; Load $0B40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0B40.w,X		; 9D 40 0B ; Store accumulator to $0B40.w,X [Reads: Accumulator, X Index]
	jsr $EDCB.w		; 20 CB ED ; Jump to subroutine at $EDCB.w [Writes: Stack Pointer] [Flow: call]
	jsr $ECD4.w		; 20 D4 EC ; Jump to subroutine at $ECD4.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $DB		; 10 DB ; Branch if plus to $10, $DB [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0B0A.w		; AD 0A 0B ; Load $0B0A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0B0A.w		; 8D 0A 0B ; Store accumulator to $0B0A.w [Reads: Accumulator]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	inc $0B28.w,X		; FE 28 0B ; Increment memory $0B28.w,X [Reads: X Index] [Flags: ZN]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B30.w,X		; 9D 30 0B ; Store accumulator to $0B30.w,X [Reads: Accumulator, X Index]
	.db $80, $29		; 80 29 ; Branch always to $80, $29 [Flow: branch]
	lda $0B0A.w		; AD 0A 0B ; Load $0B0A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0B0A.w		; 8D 0A 0B ; Store accumulator to $0B0A.w [Reads: Accumulator]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	inc $0B28.w,X		; FE 28 0B ; Increment memory $0B28.w,X [Reads: X Index] [Flags: ZN]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B30.w,X		; 9D 30 0B ; Store accumulator to $0B30.w,X [Reads: Accumulator, X Index]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	mvn $FF,$01		; 54 01 FF ; Move block negative $FF,$01 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $55.b		; 00 55 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0B28.w,X		; FE 28 0B ; Increment memory $0B28.w,X [Reads: X Index] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0B40.w,X		; BD 40 0B ; Load $0B40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0B08.w		; 6D 08 0B ; Add $0B08.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0B08.w		; 8D 08 0B ; Store accumulator to $0B08.w [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $0B09.w		; 6D 09 0B ; Add $0B09.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0B09.w		; 8D 09 0B ; Store accumulator to $0B09.w [Reads: Accumulator]
	stz $0FB5.w		; 9C B5 0F ; Store zero to $0FB5.w
	lda $0FB5.w		; AD B5 0F ; Load $0FB5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $0B08.w		; AD 08 0B ; Load $0B08.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $ECC0.w,Y		; 79 C0 EC ; Add $ECC0.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $0B0A.w		; AD 0A 0B ; Load $0B0A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $04E800.l,X		; BF 00 E8 04 ; Load long $04E800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $04E800.l,X		; BF 00 E8 04 ; Load long $04E800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta WRMPYA.w		; 8D 02 42 ; Store accumulator to WRMPYA.w [Reads: Accumulator]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $05.b		; A4 05 ; Load $05.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	sta WRMPYB.w		; 8D 03 42 ; Store accumulator to WRMPYB.w [Reads: Accumulator]
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	asl $4216.w		; 0E 16 42 ; Arithmetic shift left $4216.w [Flags: ZNC]
	lda RDMPYH.w		; AD 17 42 ; Load RDMPYH.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lsr $01.b		; 46 01 ; Logical shift right $01.b [Reads: Direct Page] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	stz $0A.b		; 64 0A ; Store zero to $0A.b
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0B08.w,X		; 7D 08 0B ; Add $0B08.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $0FB5.w		; AC B5 0F ; Load $0FB5.w into Y register [Writes: Y Index] [Flags: ZN]
	sta $0B10.w,Y		; 99 10 0B ; Store accumulator to $0B10.w,Y [Reads: Accumulator, Y Index]
	lda $0B10.w,X		; BD 10 0B ; Load $0B10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $0A.b		; 65 0A ; Add $0A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0B20.w,Y		; 99 20 0B ; Store accumulator to $0B20.w,Y [Reads: Accumulator, Y Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta WRMPYA.w		; 8D 02 42 ; Store accumulator to WRMPYA.w [Reads: Accumulator]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $07.b		; A4 07 ; Load $07.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	sta WRMPYB.w		; 8D 03 42 ; Store accumulator to WRMPYB.w [Reads: Accumulator]
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	asl $4216.w		; 0E 16 42 ; Arithmetic shift left $4216.w [Flags: ZNC]
	lda RDMPYH.w		; AD 17 42 ; Load RDMPYH.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lsr $03.b		; 46 03 ; Logical shift right $03.b [Reads: Direct Page] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	stz $0A.b		; 64 0A ; Store zero to $0A.b
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0B18.w,X		; 7D 18 0B ; Add $0B18.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $0FB5.w		; AC B5 0F ; Load $0FB5.w into Y register [Writes: Y Index] [Flags: ZN]
	sta $0B30.w,Y		; 99 30 0B ; Store accumulator to $0B30.w,Y [Reads: Accumulator, Y Index]
	lda $0B20.w,X		; BD 20 0B ; Load $0B20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $0A.b		; 65 0A ; Add $0A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0B40.w,Y		; 99 40 0B ; Store accumulator to $0B40.w,Y [Reads: Accumulator, Y Index]
	inc $0FB5.w		; EE B5 0F ; Increment $0FB5.w [Flags: ZN]
	lda $0FB5.w		; AD B5 0F ; Load $0FB5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $ECED.w		; 4C ED EC ; Jump to $ECED.w [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0DD0.w,Y		; B9 D0 0D ; Load $0DD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $0D80.w,Y		; B9 80 0D ; Load $0D80.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $F1		; 10 F1 ; Branch if plus to $10, $F1 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,Y		; 99 80 0D ; Store accumulator to $0D80.w,Y [Reads: Accumulator, Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $EDE3.w		; 20 E3 ED ; Jump to subroutine at $EDE3.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpy $CACC.w		; CC CC CA ; Compare $CACC.w with Y register [Reads: Y Index] [Flags: ZNC]
	and ($73.b,S),Y		; 33 73 ; AND accumulator (stack relative indirect indexed) ($73.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $EDE1.w,Y		; B9 E1 ED ; Load $EDE1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$20.b		; 69 20 ; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $10		; 90 10 ; Branch if carry clear to $90, $10 [Flow: branch]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $EDDE.w,X		; BD DE ED ; Load $EDDE.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Accumulator, Direct Page]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $26		; D0 26 ; Branch if not equal to $D0, $26 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FD8.w		; ED D8 0F ; Subtract $0FD8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0010.w		; C9 10 00 ; Compare #$0010.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $15		; B0 15 ; Branch if carry set to $B0, $15 [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FDA.w		; ED DA 0F ; Subtract $0FDA.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0010.w		; C9 10 00 ; Compare #$0010.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	jsl $06F41F.l		; 22 1F F4 06 ; Jump to subroutine long $06F41F.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $63		; F0 63 ; Branch if equal to $F0, $63 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $34		; F0 34 ; Branch if equal to $F0, $34 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $44		; F0 44 ; Branch if equal to $F0, $44 [Flow: branch]
	jmp $EE72.w		; 4C 72 EE ; Jump to $EE72.w [Flow: jump]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda #$12.b		; A9 12 ; Load #$12.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	dec $0D40.w,X		; DE 40 0D ; Decrement memory $0D40.w,X [Reads: X Index] [Flags: ZN]
	dec $0D40.w,X		; DE 40 0D ; Decrement memory $0D40.w,X [Reads: X Index] [Flags: ZN]
	jsr $E95D.w		; 20 5D E9 ; Jump to subroutine at $E95D.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $EED3.w		; 4C D3 EE ; Jump to $EED3.w [Flow: jump]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $EE9C.w,Y		; B9 9C EE ; Load $EE9C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $EF3D.w		; 4C 3D EF ; Jump to $EF3D.w [Flow: jump]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$14.b		; C9 14 ; Compare #$14.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	inc $0EB0.w,X		; FE B0 0E ; Increment memory $0EB0.w,X [Reads: X Index] [Flags: ZN]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $E0.b		; E4 E0 ; Compare $E0.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda #$36.b		; A9 36 ; Load #$36.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	sta $0FB6.w		; 8D B6 0F ; Store accumulator to $0FB6.w [Reads: Accumulator]
	lda #$70.b		; A9 70 ; Load #$70.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $37		; 30 37 ; Branch if minus to $30, $37 [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0FB5.w		; AE B5 0F ; Load $0FB5.w into X register [Writes: X Index] [Flags: ZN]
	lda $EECD.w,X		; BD CD EE ; Load $EECD.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda $EED0.w,X		; BD D0 EE ; Load $EED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,Y		; 99 80 0D ; Store accumulator to $0D80.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	lda $0FB6.w		; AD B6 0F ; Load $0FB6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0FB5.w		; 6D B5 0F ; Add $0FB5.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $EF2D.w,X		; BD 2D EF ; Load $EF2D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,Y		; 99 B0 0E ; Store accumulator to $0EB0.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,Y		; 99 C0 0D ; Store accumulator to $0DC0.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dec $0FB5.w		; CE B5 0F ; Decrement $0FB5.w [Flags: ZN]
	.db $10, $BC		; 10 BC ; Branch if plus to $10, $BC [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8050.w		; 20 50 80 ; Jump to subroutine at $8050.w [Writes: Stack Pointer] [Flow: call]
	jsr $8050.w		; 20 50 80 ; Jump to subroutine at $8050.w [Writes: Stack Pointer] [Flow: call]
	jsr $2050.w		; 20 50 20 ; Jump to subroutine at $2050.w [Writes: Stack Pointer] [Flow: call]
	jsr $E0E0.w		; 20 E0 E0 ; Jump to subroutine at $E0E0.w [Writes: Stack Pointer] [Flow: call]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: ZNC]
	lda #$36.b		; A9 36 ; Load #$36.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	lda #$70.b		; A9 70 ; Load #$70.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $1D		; 30 1D ; Branch if minus to $30, $1D [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0FB5.w		; AE B5 0F ; Load $0FB5.w into X register [Writes: X Index] [Flags: ZN]
	lda $EF35.w,X		; BD 35 EF ; Load $EF35.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda $EF39.w,X		; BD 39 EF ; Load $EF39.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,Y		; 99 80 0D ; Store accumulator to $0D80.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	dec $0FB5.w		; CE B5 0F ; Decrement $0FB5.w [Flags: ZN]
	.db $10, $D6		; 10 D6 ; Branch if plus to $10, $D6 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $EF7E.w		; 20 7E EF ; Jump to subroutine at $EF7E.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; [PATTERN: Memory clearing operation] 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	stz $011C.w		; 9C 1C 01 ; Store zero to $011C.w
	stz $011D.w		; 9C 1D 01 ; Store zero to $011D.w
	lda $0F10.w,X		; BD 10 0F ; Load $0F10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $8000.w,Y		; B9 00 80 ; Load $8000.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $011C.w		; 8D 1C 01 ; Store accumulator to $011C.w [Reads: Accumulator]
	lda $8002.w,Y		; B9 02 80 ; Load $8002.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $011D.w		; 8D 1D 01 ; Store accumulator to $011D.w [Reads: Accumulator]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	ldy $E0EF.w		; AC EF E0 ; Load $E0EF.w into Y register [Writes: Y Index] [Flags: ZN]
	sbc $45F039.l		; EF 39 F0 45 ; Subtract with carry (long) $45F039.l [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	ora ($C2.b),Y		; 11 C2 ; OR accumulator with memory ($C2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0F70.w,X		; 1D 70 0F ; OR accumulator with memory $0F70.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $28		; D0 28 ; Branch if not equal to $D0, $28 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA12.l		; 22 12 EA 06 ; Jump to subroutine long $06EA12.l [Writes: Stack Pointer] [Flow: call]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	inc $0ED0.w,X		; FE D0 0E ; Increment memory $0ED0.w,X [Reads: X Index] [Flags: ZN]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0DA0.w,X		; 9D A0 0D ; Store accumulator to $0DA0.w,X [Reads: Accumulator, X Index]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0E90.w,X		; 9D 90 0E ; Store accumulator to $0E90.w,X [Reads: Accumulator, X Index]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0F80.w,X		; BD 80 0F ; Load $0F80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$03.b		; 69 03 ; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	jsr $8094.w		; 20 94 80 ; Jump to subroutine at $8094.w [Writes: Stack Pointer] [Flow: call]
	.db $D0, $3A		; D0 3A ; Branch if not equal to $D0, $3A [Flow: branch]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0E90.w,X		; BD 90 0E ; Load $0E90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FD8.w		; ED D8 0F ; Subtract $0FD8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0020.w		; C9 20 00 ; Compare #$0020.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $1F		; B0 1F ; Branch if carry set to $B0, $1F [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FDA.w		; ED DA 0F ; Subtract $0FDA.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0020.w		; C9 20 00 ; Compare #$0020.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	inc $0ED0.w,X		; [PATTERN: Memory clearing operation] FE D0 0E ; Increment memory $0ED0.w,X [Reads: X Index] [Flags: ZN]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	stz $0D50.w,X		; 9E 50 0D ; Store zero to $0D50.w,X [Reads: X Index]
	stz $0D40.w,X		; 9E 40 0D ; Store zero to $0D40.w,X [Reads: X Index]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0F80.w,X		; 9E 80 0F ; Store zero to $0F80.w,X [Reads: X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0ED0.w,X		; FE D0 0E ; Increment memory $0ED0.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$98.b		; A9 98 ; Load #$98.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $13		; 30 13 ; Branch if minus to $30, $13 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	stz $0ED0.w,X		; 9E D0 0E ; Store zero to $0ED0.w,X [Reads: X Index]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F10.w,X		; 9D 10 0F ; Store accumulator to $0F10.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $F06B.w		; 20 6B F0 ; Jump to subroutine at $F06B.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $F249.w		; 20 49 F2 ; Jump to subroutine at $F249.w [Writes: Stack Pointer] [Flow: call]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $69		; F0 69 ; Branch if equal to $F0, $69 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jsl $06F2AA.l		; 22 AA F2 06 ; Jump to subroutine long $06F2AA.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $19		; 90 19 ; Branch if carry clear to $90, $19 [Flow: branch]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $11		; B0 11 ; Branch if carry set to $B0, $11 [Flow: branch]
	stz $0EF0.w,X		; 9E F0 0E ; Store zero to $0EF0.w,X [Reads: X Index]
	jsl $06F41F.l		; 22 1F F4 06 ; Jump to subroutine long $06F41F.l [Writes: Stack Pointer] [Flow: call]
	lda $031F.w		; AD 1F 03 ; Load $031F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0360.w		; 8D 60 03 ; Store accumulator to $0360.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FDA.w		; ED DA 0F ; Subtract $0FDA.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0018.w		; C9 18 00 ; Compare #$0018.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $2E		; B0 2E ; Branch if carry set to $B0, $2E [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FD8.w		; ED D8 0F ; Subtract $0FD8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0020.w		; 69 20 00 ; Add #$0020.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0040.w		; C9 40 00 ; Compare #$0040.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $1F		; B0 1F ; Branch if carry set to $B0, $1F [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda $27.b		; A5 27 ; Load $27.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0360.w		; 8D 60 03 ; Store accumulator to $0360.w [Reads: Accumulator]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0373.w		; 8D 73 03 ; Store accumulator to $0373.w [Reads: Accumulator]
	stz $28.b		; 64 28 ; Store zero to $28.b
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $E3.b		; 02 E3 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $CA0003.l,X		; FF 03 00 CA ; Subtract with carry (long,X) $CA0003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $DA000B.l,X		; FF 0B 00 DA ; Subtract with carry (long,X) $DA000B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $DA.b		; 00 DA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc $E6FFFE.l,X		; FF FE FF E6 ; Subtract with carry (long,X) $E6FFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E6FFFE.l,X		; FF FE FF E6 ; Subtract with carry (long,X) $E6FFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0040E6.l,X		; FF E6 40 00 ; Subtract with carry (long,X) $0040E6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $18.b		; 02 18 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0040E6.l,X		; FF E6 40 00 ; Subtract with carry (long,X) $0040E6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $E3.b		; 02 E3 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $CB0003.l,X		; FF 03 00 CB ; Subtract with carry (long,X) $CB0003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $DB000B.l,X		; FF 0B 00 DB ; Subtract with carry (long,X) $DB000B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CB.b		; 00 CB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $DB.b		; 00 DB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $0000.w		; CC 00 00 ; Compare $0000.w with Y register [Reads: Y Index] [Flags: ZNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $E3.b		; 02 E3 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $CB0003.l,X		; FF 03 00 CB ; Subtract with carry (long,X) $CB0003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $DB000B.l,X		; FF 0B 00 DB ; Subtract with carry (long,X) $DB000B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CB.b		; 00 CB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $DB.b		; 00 DB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc $E6FFFE.l,X		; FF FE FF E6 ; Subtract with carry (long,X) $E6FFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E6FFFE.l,X		; FF FE FF E6 ; Subtract with carry (long,X) $E6FFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00C0E6.l,X		; FF E6 C0 00 ; Subtract with carry (long,X) $00C0E6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $18.b		; 02 18 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00C0E6.l,X		; FF E6 C0 00 ; Subtract with carry (long,X) $00C0E6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $E3.b		; 02 E3 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $CA0003.l,X		; FF 03 00 CA ; Subtract with carry (long,X) $CA0003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $DA000B.l,X		; FF 0B 00 DA ; Subtract with carry (long,X) $DA000B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $DA.b		; 00 DA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $E3.b		; 02 E3 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $CB0003.l,X		; FF 03 00 CB ; Subtract with carry (long,X) $CB0003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $DB000B.l,X		; FF 0B 00 DB ; Subtract with carry (long,X) $DB000B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CB.b		; 00 CB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $DB.b		; 00 DB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $DB.b		; 00 DB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $DB.b		; 00 DB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $DB.b		; 00 DB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $DB.b		; 00 DB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $DB.b		; 00 DB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$F0E1.w		; 69 E1 F0 ; Add #$F0E1.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0FDA.w		; 8D DA 0F ; Store accumulator to $0FDA.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8549.w		; 20 49 85 ; Jump to subroutine at $8549.w [Writes: Stack Pointer] [Flow: call]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $1DF7CF.l,X		; BF CF F7 1D ; Load long $1DF7CF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0D10.w,Y		; B9 10 0D ; Load $0D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFC00.l,X		; 9F 00 FC 7F ; Store accumulator (long,X) $7FFC00.l,X [Reads: Accumulator, X Index]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFC80.l,X		; 9F 80 FC 7F ; Store accumulator (long,X) $7FFC80.l,X [Reads: Accumulator, X Index]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFD00.l,X		; 9F 00 FD 7F ; Store accumulator (long,X) $7FFD00.l,X [Reads: Accumulator, X Index]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFD80.l,X		; 9F 80 FD 7F ; Store accumulator (long,X) $7FFD80.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $DF		; 10 DF ; Branch if plus to $10, $DF [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($02.b,X)		; E1 02 ; Subtract with carry ($02.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	sbc $E3FF.w,X		; FD FF E3 ; Subtract with carry $E3FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E30002.l,X		; FF 02 00 E3 ; Subtract with carry (long,X) $E30002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0002E3.l,X		; FF E3 02 00 ; Subtract with carry (long,X) $0002E3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E30003.l,X		; FF 03 00 E3 ; Subtract with carry (long,X) $E30003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0002E3.l,X		; FF E3 02 00 ; Subtract with carry (long,X) $0002E3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0002E3.l,X		; FF E3 02 00 ; Subtract with carry (long,X) $0002E3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E30005.l,X		; FF 05 00 E3 ; Subtract with carry (long,X) $E30005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0002E3.l,X		; FF E3 02 00 ; Subtract with carry (long,X) $0002E3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0002E3.l,X		; FF E3 02 00 ; Subtract with carry (long,X) $0002E3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0002E3.l,X		; FF E3 02 00 ; Subtract with carry (long,X) $0002E3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E3FFFF.l,X		; FF FF FF E3 ; Subtract with carry (long,X) $E3FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0002E3.l,X		; FF E3 02 00 ; Subtract with carry (long,X) $0002E3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E30001.l,X		; FF 01 00 E3 ; Subtract with carry (long,X) $E30001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0011.w		; 0D 11 00 ; Logical OR $0011.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0FC1.w		; 0D C1 0F ; Logical OR $0FC1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	inc $0DC0.w,X		; FE C0 0D ; Increment memory $0DC0.w,X [Reads: X Index] [Flags: ZN]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DC0.w,X		; 9E C0 0D ; Store zero to $0DC0.w,X [Reads: X Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$F2A5.w		; 69 A5 F2 ; Add #$F2A5.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8549.w		; 20 49 85 ; Jump to subroutine at $8549.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda #$82.b		; A9 82 ; Load #$82.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	sta $0BA0.w,X		; 9D A0 0B ; Store accumulator to $0BA0.w,X [Reads: Accumulator, X Index]
	lda #$49.b		; A9 49 ; Load #$49.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	lda $0E30.w,X		; BD 30 0E ; Load $0E30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	jsl $06F121.l		; 22 21 F1 06 ; Jump to subroutine long $06F121.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $4D		; 90 4D ; Branch if carry clear to $90, $4D [Flow: branch]
	inc $0E30.w,X		; FE 30 0E ; Increment memory $0E30.w,X [Reads: X Index] [Flags: ZN]
	lda #$74.b		; A9 74 ; Load #$74.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF1.w		; 8D F1 1C ; Store accumulator to $1CF1.w [Reads: Accumulator]
	jsl $05FA8E.l		; 22 8E FA 05 ; Jump to subroutine long $05FA8E.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $3A		; 80 3A ; Branch always to $80, $3A [Flow: branch]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $33		; 90 33 ; Branch if carry clear to $90, $33 [Flow: branch]
	.db $D0, $34		; D0 34 ; Branch if not equal to $D0, $34 [Flow: branch]
	stz $0BE0.w,X		; 9E E0 0B ; Store zero to $0BE0.w,X [Reads: X Index]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $0E40.w,X		; BD 40 0E ; Load $0E40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	lda #$4D.b		; A9 4D ; Load #$4D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $0D		; 30 0D ; Branch if minus to $30, $0D [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $06FA54.l		; 22 54 FA 06 ; Jump to subroutine long $06FA54.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	inc $0E30.w,X		; FE 30 0E ; Increment memory $0E30.w,X [Reads: X Index] [Flags: ZN]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$03.b		; 69 03 ; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr ($F8FF.w,X)		; FC FF F8 ; Jump to subroutine indirect indexed ($F8FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $000044.l,X		; FF 44 00 00 ; Subtract with carry (long,X) $000044.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004044.l,X		; FF 44 40 00 ; Subtract with carry (long,X) $004044.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $640008.l,X		; FF 08 00 64 ; Subtract with carry (long,X) $640008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $54.b		; 00 54 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($F8FF.w,X)		; FC FF F8 ; Jump to subroutine indirect indexed ($F8FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $000044.l,X		; FF 44 00 00 ; Subtract with carry (long,X) $000044.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004044.l,X		; FF 44 40 00 ; Subtract with carry (long,X) $004044.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $740008.l,X		; FF 08 00 74 ; Subtract with carry (long,X) $740008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $40, $00		; 62 40 00 ; Push effective relative address $62, $40, $00 [Writes: Stack Pointer]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $44FFF8.l,X		; FF F8 FF 44 ; Subtract with carry (long,X) $44FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004044.l,X		; FF 44 40 00 ; Subtract with carry (long,X) $004044.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $620000.l,X		; FF 00 00 62 ; Subtract with carry (long,X) $620000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($F8FF.w,X)		; FC FF F8 ; Jump to subroutine indirect indexed ($F8FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $000046.l,X		; FF 46 00 00 ; Subtract with carry (long,X) $000046.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004046.l,X		; FF 46 40 00 ; Subtract with carry (long,X) $004046.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $660008.l,X		; FF 08 00 66 ; Subtract with carry (long,X) $660008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $56.b		; 00 56 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($F8FF.w,X)		; FC FF F8 ; Jump to subroutine indirect indexed ($F8FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $000046.l,X		; FF 46 00 00 ; Subtract with carry (long,X) $000046.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004046.l,X		; FF 46 40 00 ; Subtract with carry (long,X) $004046.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $750008.l,X		; FF 08 00 75 ; Subtract with carry (long,X) $750008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($F8FF.w,X)		; FC FF F8 ; Jump to subroutine indirect indexed ($F8FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $000046.l,X		; FF 46 00 00 ; Subtract with carry (long,X) $000046.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004046.l,X		; FF 46 40 00 ; Subtract with carry (long,X) $004046.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $6A0000.l,X		; FF 00 00 6A ; Subtract with carry (long,X) $6A0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $75.b		; 00 75 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $4EFFF8.l,X		; FF F8 FF 4E ; Subtract with carry (long,X) $4EFFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $4EFFF9.l,X		; FF F9 FF 4E ; Subtract with carry (long,X) $4EFFF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6E.b		; 00 6E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00404E.l,X		; FF 4E 40 00 ; Subtract with carry (long,X) $00404E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $4EFF.w,Y		; F9 FF 4E ; Subtract with carry $4EFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0040.w		; 6E 40 00 ; Rotate right $0040.w [Flags: ZNC]
	cop $0A.b		; 02 0A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $77.b		; 00 77 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $04FF.w,X		; FE FF 04 ; Increment memory $04FF.w,X [Reads: X Index] [Flags: ZN]
	brk $77.b		; 00 77 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $76.b		; 00 76 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4D.b		; 00 4D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $55.b,X		; F5 55 ; Subtract $55.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $5D.b,X		; F5 5D ; Subtract $5D.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $4D.b,X		; F5 4D ; Subtract $4D.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pea $F46D.w		; F4 6D F4 ; Push absolute address $F46D.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sta $ADF4.w		; 8D F4 AD ; Store accumulator to $ADF4.w [Reads: Accumulator]
	pea $F4CD.w		; F4 CD F4 ; Push absolute address $F4CD.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sbc $0DF4.w		; ED F4 0D ; Subtract $0DF4.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc $1D.b,X		; F5 1D ; Subtract $1D.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $2D.b,X		; F5 2D ; Subtract $2D.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $3D.b,X		; F5 3D ; Subtract $3D.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $04.b,X		; F5 04 ; Subtract $04.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $8B.b		; 02 8B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $17		; F0 17 ; Branch if equal to $F0, $17 [Flow: branch]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $F565.w,Y		; B9 65 F5 ; Load $F565.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $8549.w		; 20 49 85 ; Jump to subroutine at $8549.w [Writes: Stack Pointer] [Flow: call]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $F56B.w,Y		; B9 6B F5 ; Load $F56B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $90.b		; A5 90 ; Load $90.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	inc $92.b		; E6 92 ; Increment $92.b [Reads: Direct Page] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $F57F.w,Y		; B9 7F F5 ; Load $F57F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $8549.w		; 20 49 85 ; Jump to subroutine at $8549.w [Writes: Stack Pointer] [Flow: call]
	dec $0E40.w,X		; DE 40 0E ; Decrement memory $0E40.w,X [Reads: X Index] [Flags: ZN]
	jsl $06DC54.l		; 22 54 DC 06 ; Jump to subroutine long $06DC54.l [Writes: Stack Pointer] [Flow: call]
	inc $0E40.w,X		; FE 40 0E ; Increment memory $0E40.w,X [Reads: X Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0E0F0F.l		; 0F 0F 0F 0E ; OR accumulator with memory (long) $0E0F0F.l [Writes: Accumulator] [Flags: ZN]
	asl $080E.w		; 0E 0E 08 ; Arithmetic shift left $080E.w [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0D0C.w		; 0C 0C 0D ; Test and set bits $0D0C.w [Reads: Accumulator] [Flags: Z]
	ora $0E0D.w		; 0D 0D 0E ; Logical OR $0E0D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $040E.w		; 0E 0E 04 ; Arithmetic shift left $040E.w [Flags: ZNC]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: ZNC]
	tsb $0B0B.w		; 0C 0B 0B ; Test and set bits $0B0B.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $09.b		; C5 09 ; Compare $09.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	lda $09.b		; A5 09 ; Load $09.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0A.b		; 65 0A ; Add $0A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $F5D4.w,Y		; B9 D4 F5 ; Load $F5D4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0A.b		; 65 0A ; Add $0A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $F5F4.w,Y		; B9 F4 F5 ; Load $F5F4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0DD0.w,Y		; B9 D0 0D ; Load $0DD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0E20.w,Y		; 99 20 0E ; Store accumulator to $0E20.w,Y [Reads: Accumulator, Y Index]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,Y		; 99 D0 0D ; Store accumulator to $0DD0.w,Y [Reads: Accumulator, Y Index]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0B08.w,X		; BD 08 0B ; Load $0B08.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0B10.w,X		; BD 10 0B ; Load $0B10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0B18.w,X		; BD 18 0B ; Load $0B18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda $0B20.w,X		; BD 20 0B ; Load $0B20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsl $0DB818.l		; 22 18 B8 0D ; Jump to subroutine long $0DB818.l [Writes: Stack Pointer] [Flow: call]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0BC1.w,X		; 9D C1 0B ; Store accumulator to $0BC1.w,X [Reads: Accumulator, X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0BC0.w,X		; 9D C0 0B ; Store accumulator to $0BC0.w,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0F20.w,X		; BD 20 0F ; Load $0F20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Accumulator, Y Index]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,Y		; 99 E0 0D ; Store accumulator to $0DE0.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CBA.w,Y		; 99 BA 0C ; Store accumulator to $0CBA.w,Y [Reads: Accumulator, Y Index]
	sta $0E30.w,Y		; 99 30 0E ; Store accumulator to $0E30.w,Y [Reads: Accumulator, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $6062.w,X		; 5D 62 60 ; Exclusive OR accumulator with memory $6062.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $15.b		; 02 15 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FCFFFD.l,X		; FF FD FF FC ; Subtract with carry (long,X) $FCFFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FEFFFD.l,X		; FF FD FF FE ; Subtract with carry (long,X) $FEFFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $040001.l,X		; FF 01 00 04 ; Subtract with carry (long,X) $040001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FCFFFD.l,X		; FF FD FF FC ; Subtract with carry (long,X) $FCFFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FEFFFD.l,X		; FF FD FF FE ; Subtract with carry (long,X) $FEFFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $220001.l,X		; FF 01 00 22 ; Subtract with carry (long,X) $220001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $E4.b,X		; 16 E4 ; Arithmetic shift left $E4.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $90.b		; 06 90 ; Arithmetic shift left $90.b [Reads: Direct Page] [Flags: ZNC]
	ora ($6B.b,X)		; 01 6B ; Logical OR ($6B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FF.b		; 69 FF ; Add #$FF.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: ZN]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F7E2.w,X		; 7D E2 F7 ; Add $F7E2.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F802.w,X		; 7D 02 F8 ; Add $F802.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$4D.b		; A9 4D ; Load #$4D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$02.b		; 69 02 ; Add #$02.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $B3		; 10 B3 ; Branch if plus to $10, $B3 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $90.b		; A5 90 ; Load $90.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	inc $92.b		; E6 92 ; Increment $92.b [Reads: Direct Page] [Flags: ZN]
	inc $92.b		; E6 92 ; Increment $92.b [Reads: Direct Page] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F7CF.w,X		; 7D CF F7 ; Add $F7CF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0D10.w,Y		; B9 10 0D ; Load $0D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFC00.l,X		; 9F 00 FC 7F ; Store accumulator (long,X) $7FFC00.l,X [Reads: Accumulator, X Index]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFC80.l,X		; 9F 80 FC 7F ; Store accumulator (long,X) $7FFC80.l,X [Reads: Accumulator, X Index]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFD00.l,X		; 9F 00 FD 7F ; Store accumulator (long,X) $7FFD00.l,X [Reads: Accumulator, X Index]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFD80.l,X		; 9F 80 FD 7F ; Store accumulator (long,X) $7FFD80.l,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx $0FA0.w		; AE A0 0F ; Load $0FA0.w into X register [Writes: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F7DF.w,Y		; 79 DF F7 ; Add $F7DF.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F7CF.w,X		; 7D CF F7 ; Add $F7CF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7FFC00.l,X		; BF 00 FC 7F ; Load long $7FFC00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7FFC80.l,X		; BF 80 FC 7F ; Load long $7FFC80.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $7FFD00.l,X		; BF 00 FD 7F ; Load long $7FFD00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $7FFD80.l,X		; BF 80 FD 7F ; Load long $7FFD80.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F7D6.w,X		; 7D D6 F7 ; Add $F7D6.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F7D6.w,X		; 7D D6 F7 ; Add $F7D6.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $F7D3.w,X		; BD D3 F7 ; Load $F7D3.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $F7DC.w,X		; BD DC F7 ; Load $F7DC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0F.b		; 05 0F ; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $06.b		; C6 06 ; Decrement $06.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $84		; 10 84 ; Branch if plus to $10, $84 [Flow: branch]
	ldx $0FA0.w		; AE A0 0F ; Load $0FA0.w into X register [Writes: X Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $F94B.w		; 20 4B F9 ; Jump to subroutine at $F94B.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	lsr $F9.b,X		; 56 F9 ; Logical shift right $F9.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	jsr $FADB.w		; 20 DB FA ; Jump to subroutine at $FADB.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	stz $0F60.w,X		; 9E 60 0F ; Store zero to $0F60.w,X [Reads: X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	ror $9CF9.w		; 6E F9 9C ; Rotate right $9CF9.w [Flags: ZNC]
	sbc $F9B4.w,Y		; F9 B4 F9 ; Subtract with carry $F9B4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
.ACCU 8
.INDEX 8
	sep #$F9		; E2 F9
	stz $0DC0.w,X		; 9E C0 0D ; Store zero to $0DC0.w,X [Reads: X Index]
	jsl $06F129.l		; 22 29 F1 06 ; Jump to subroutine long $06F129.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $24		; 90 24 ; Branch if carry clear to $90, $24 [Flow: branch]
	jsl $0791B9.l		; 22 B9 91 07 ; Jump to subroutine long $0791B9.l [Writes: Stack Pointer] [Flow: call]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA1A.l		; 22 1A EA 06 ; Jump to subroutine long $06EA1A.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $F9B0.w,X		; BD B0 F9 ; Load $F9B0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $FA4E.w		; 20 4E FA ; Jump to subroutine at $FA4E.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0D0D.w		; 0D 0D 0D ; Logical OR $0D0D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $10.b		; 06 10 ; Arithmetic shift left $10.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr $FA03.w		; 20 03 FA ; Jump to subroutine at $FA03.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DA0.w,X		; 9D A0 0D ; Store accumulator to $0DA0.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $F9D2.w,Y		; B9 D2 F9 ; Load $F9D2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $F9DA.w,Y		; B9 DA F9 ; Load $F9DA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $82, $7D, $A9		; 82 7D A9 ; Branch always long to $82, $7D, $A9 [Flow: branch]
	ora [$9D.b]		; 07 9D ; OR accumulator with memory (long) [$9D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $0D90BD.l		; 0F BD 90 0D ; OR accumulator with memory (long) $0D90BD.l [Writes: Accumulator] [Flags: ZN]
	.db $D0, $26		; D0 26 ; Branch if not equal to $D0, $26 [Flow: branch]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $FA01.w,Y		; B9 01 FA ; Load $FA01.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	stz $0D90.w,X		; 9E 90 0D ; Store zero to $0D90.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ror $807F.w,X		; 7E 7F 80 ; Rotate right $807F.w,X [Reads: X Index] [Flags: ZNC]
	sta ($58.b,X)		; 81 58 ; Store accumulator ($58.b,X) [Reads: Accumulator, X Index, Direct Page]
	eor $6B72.w,X		; 5D 72 6B ; Exclusive OR accumulator with memory $6B72.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $FA2F.w,Y		; D9 2F FA ; Compare accumulator $FA2F.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	.db $80, $F6		; 80 F6 ; Branch always to $80, $F6 [Flow: branch]
	lda $FA2B.w,Y		; B9 2B FA ; Load $FA2B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	stz $0D90.w,X		; 9E 90 0D ; Store zero to $0D90.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$4A.b		; A9 4A ; Load #$4A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $24		; 30 24 ; Branch if minus to $30, $24 [Flow: branch]
	jsl $06AD50.l		; 22 50 AD 06 ; Jump to subroutine long $06AD50.l [Writes: Stack Pointer] [Flow: call]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$28.b		; 69 28 ; Add #$28.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,Y		; 99 00 0E ; Store accumulator to $0E00.w,Y [Reads: Accumulator, Y Index]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	lda #$12.b		; A9 12 ; Load #$12.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,Y		; 99 80 0F ; Store accumulator to $0F80.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $00E8FF.l,X		; FF FF E8 00 ; Subtract with carry (long,X) $00E8FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0040E8.l,X		; FF E8 40 00 ; Subtract with carry (long,X) $0040E8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00E8FF.l,X		; FF FF E8 00 ; Subtract with carry (long,X) $00E8FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0040E8.l,X		; FF E8 40 00 ; Subtract with carry (long,X) $0040E8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $30, $19		; 30 19 ; Branch if minus to $30, $19 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$7B.b		; 69 7B ; Add #$7B.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$FA.b		; A9 FA ; Load #$FA.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	jsl $05DF75.l		; 22 75 DF 05 ; Jump to subroutine long $05DF75.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora #$F7.b		; 09 F7 ; Logical OR #$F7.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $00FF.w,X		; FE FF 00 ; Increment memory $00FF.w,X [Reads: X Index] [Flags: ZN]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $06DBF8.l		; 22 F8 DB 06 ; Jump to subroutine long $06DBF8.l [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	ldy $0EB0.w,X		; BC B0 0E ; Load Y register $0EB0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $FAFB.w,Y		; 79 FB FA ; Add $FAFB.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $FAFD.w,Y		; 79 FD FA ; Add $FAFD.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $0E90.w,X		; BD 90 0E ; Load $0E90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EA1A.l		; 22 1A EA 06 ; Jump to subroutine long $06EA1A.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $0A		; 30 0A ; Branch if minus to $30, $0A [Flow: branch]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$02.b		; 69 02 ; Add #$02.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	.db $80, $15		; 80 15 ; Branch always to $80, $15 [Flow: branch]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8000.w,Y		; 79 00 80 ; Add $8000.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $FAFF.w,Y		; 79 FF FA ; Add $FAFF.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $FB04.w,Y		; 79 04 FB ; Add $FB04.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $FB05.w,Y		; 79 05 FB ; Add $FB05.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $0E90.w,X		; BD 90 0E ; Load $0E90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $FB05.w,Y		; 79 05 FB ; Add $FB05.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr ($FF0E.w,X)		; FC 0E FF ; Jump to subroutine indirect indexed ($FF0E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $DA.b		; 00 DA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$25.b		; A9 25 ; Load #$25.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0EB0.w,Y		; 99 B0 0E ; Store accumulator to $0EB0.w,Y [Reads: Accumulator, Y Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $1DFB86.l,X		; 7F 86 FB 1D ; Add long $1DFB86.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	sta $0D90.w,Y		; 99 90 0D ; Store accumulator to $0D90.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $1DFB88.l,X		; 7F 88 FB 1D ; Add long $1DFB88.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	sta $0DA0.w,Y		; 99 A0 0D ; Store accumulator to $0DA0.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$F5.b		; 69 F5 ; Add #$F5.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	sta $0DB0.w,Y		; 99 B0 0D ; Store accumulator to $0DB0.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$FF.b		; 69 FF ; Add #$FF.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	sta $0E90.w,Y		; 99 90 0E ; Store accumulator to $0E90.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,Y		; 99 80 0E ; Store accumulator to $0E80.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0CF4.w		; EE F4 0C ; Increment $0CF4.w [Flags: ZN]
	ora ($10.b)		; 12 10 ; OR accumulator with memory (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $D9		; 10 D9 ; Branch if plus to $10, $D9 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $0CFB.w		; AD FB 0C ; Load $0CFB.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $51		; F0 51 ; Branch if equal to $F0, $51 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $0CFC.w		; AD FC 0C ; Load $0CFC.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	sty $0FB6.w		; 8C B6 0F ; Store Y register to $0FB6.w [Reads: Y Index]
	ldy $0FB6.w		; AC B6 0F ; Load $0FB6.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $FBD4.w,Y		; B9 D4 FB ; Load $FBD4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0FB5.w		; AE B5 0F ; Load $0FB5.w into X register [Writes: X Index] [Flags: ZN]
	lda $FBCC.w,X		; BD CC FB ; Load $FBCC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda $FBD0.w,X		; BD D0 FB ; Load $FBD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B58.w,Y		; 99 58 0B ; Store accumulator to $0B58.w,Y [Reads: Accumulator, Y Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F10.w,Y		; 99 10 0F ; Store accumulator to $0F10.w,Y [Reads: Accumulator, Y Index]
	sta $0EE0.w,Y		; 99 E0 0E ; Store accumulator to $0EE0.w,Y [Reads: Accumulator, Y Index]
	sta $0F80.w,Y		; [PATTERN: Memory clearing operation] 99 80 0F ; Store accumulator to $0F80.w,Y [Reads: Accumulator, Y Index]
	dec $0FB5.w		; CE B5 0F ; Decrement $0FB5.w [Flags: ZN]
	.db $10, $C4		; 10 C4 ; Branch if plus to $10, $C4 [Flow: branch]
	stz $0CFB.w		; 9C FB 0C ; Store zero to $0CFB.w
	stz $0CFC.w		; 9C FC 0C ; Store zero to $0CFC.w
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $FE4B.w		; 20 4B FE ; Jump to subroutine at $FE4B.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8A2.w		; 20 A2 E8 ; Jump to subroutine at $E8A2.w [Writes: Stack Pointer] [Flow: call]
	jsl $1EF4F3.l		; 22 F3 F4 1E ; Jump to subroutine long $1EF4F3.l [Writes: Stack Pointer] [Flow: call]
	jsr $E94B.w		; 20 4B E9 ; Jump to subroutine at $E94B.w [Writes: Stack Pointer] [Flow: call]
	stz $0D50.w,X		; 9E 50 0D ; Store zero to $0D50.w,X [Reads: X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	jsr ($FC89.w,X)		; FC 89 FC ; Jump to subroutine indirect indexed ($FC89.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpx #$FC.b		; E0 FC ; Compare #$FC.b with X register [Reads: X Index] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $FD18.w,X		; FD 18 FD ; Subtract with carry $FD18.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $42, $FD		; 42 FD ; Reserved instruction
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$07.b		; 69 07 ; Add #$07.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp $20.b		; C5 20 ; Compare $20.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $B0, $1A		; B0 1A ; Branch if carry set to $B0, $1A [Flow: branch]
	jsr $E893.w		; 20 93 E8 ; Jump to subroutine at $E893.w [Writes: Stack Pointer] [Flow: call]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda #$87.b		; A9 87 ; Load #$87.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$8C.b		; A9 8C ; Load #$8C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $44		; D0 44 ; Branch if not equal to $D0, $44 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $7EF360.l		; AF 60 F3 7E ; Load long $7EF360.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0050.w		; C9 50 00 ; Compare #$0050.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $39		; 90 39 ; Branch if carry clear to $90, $39 [Flow: branch]
	sbc #$0050.w		; E9 50 00 ; Subtract #$0050.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $7EF360.l		; 8F 60 F3 7E ; Store accumulator (long) $7EF360.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$88.b		; A9 88 ; Load #$88.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$50.b		; A9 50 ; Load #$50.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FFE00.l		; 8F 00 FE 7F ; Store accumulator (long) $7FFE00.l [Reads: Accumulator]
	sta $7FFE01.l		; 8F 01 FE 7F ; Store accumulator (long) $7FFE01.l [Reads: Accumulator]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0FFD86.l		; 22 86 FD 0F ; Jump to subroutine long $0FFD86.l [Writes: Stack Pointer] [Flow: call]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$89.b		; A9 89 ; Load #$89.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$03.b		; 49 03 ; Exclusive OR #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04B5.w		; 8D B5 04 ; Store accumulator to $04B5.w [Reads: Accumulator]
	lda #$1E.b		; A9 1E ; Load #$1E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04B4.w		; 8D B4 04 ; Store accumulator to $04B4.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $04B4.w		; AD B4 04 ; Load $04B4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $30, $01		; 30 01 ; Branch if minus to $30, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $037A.w		; AD 7A 03 ; Load $037A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	stz $03FC.w		; 9C FC 03 ; Store zero to $03FC.w
	lda #$8A.b		; A9 8A ; Load #$8A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $907F.w		; 20 7F 90 ; Jump to subroutine at $907F.w [Writes: Stack Pointer] [Flow: call]
	lda #$FE.b		; A9 FE ; Load #$FE.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04B4.w		; 8D B4 04 ; Store accumulator to $04B4.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$8B.b		; A9 8B ; Load #$8B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $7FFE01.l		; AF 01 FE 7F ; Load long $7FFE01.l into accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7FFE01.l		; 8F 01 FE 7F ; Store accumulator (long) $7FFE01.l [Reads: Accumulator]
	jsr $FD5C.w		; 20 5C FD ; Jump to subroutine at $FD5C.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0B18.w		; C9 18 0B ; Compare #$0B18.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	.db $B0, $28		; B0 28 ; Branch if carry set to $B0, $28 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FD8A.w,X		; FD 8A FD ; Subtract with carry $FD8A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FD8A.w,X		; FD 8A FD ; Subtract with carry $FD8A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $90, $FD		; 90 FD ; Branch if carry clear to $90, $FD [Flow: branch]
	sta $FD8FFD.l		; 8F FD 8F FD ; Store accumulator (long) $FD8FFD.l [Reads: Accumulator]
	sta $10F0FD.l		; 8F FD F0 10 ; Store accumulator (long) $10F0FD.l [Reads: Accumulator]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cmp $B9DF.w,Y		; D9 DF B9 ; Compare accumulator $B9DF.w,Y [Reads: Y Index] [Flags: ZNC]
	stx $FD.b		; 86 FD ; Store X register to $FD.b [Reads: X Index]
	.db $80, $1D		; 80 1D ; Branch always to $80, $1D [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7FFE01.l		; AF 01 FE 7F ; Load long $7FFE01.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$19.b		; C9 19 ; Compare #$19.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $F7		; 90 F7 ; Branch if carry clear to $90, $F7 [Flow: branch]
	lda $7FFE00.l		; AF 00 FE 7F ; Load long $7FFE00.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $E9		; D0 E9 ; Branch if not equal to $D0, $E9 [Flow: branch]
	lda #$EB.b		; A9 EB ; Load #$EB.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FFE00.l		; 8F 00 FE 7F ; Store accumulator (long) $7FFE00.l [Reads: Accumulator]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $FD82.w,X		; BD 82 FD ; Load $FD82.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,Y		; 99 80 0F ; Store accumulator to $0F80.w,Y [Reads: Accumulator, Y Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B58.w,Y		; 99 58 0B ; Store accumulator to $0B58.w,Y [Reads: Accumulator, Y Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F10.w,Y		; 99 10 0F ; Store accumulator to $0F10.w,Y [Reads: Accumulator, Y Index]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $FD84.w,X		; 7D 84 FD ; Add $FD84.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$16.b		; 69 16 ; Add #$16.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Accumulator, Y Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $000A40.l,X		; FF 40 0A 00 ; Subtract with carry (long,X) $000A40.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $56.b		; 00 56 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0000.w		; 0C 00 00 ; Test and set bits $0000.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $0A		; 42 0A ; Reserved instruction
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $000A40.l,X		; FF 40 0A 00 ; Subtract with carry (long,X) $000A40.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $42.b		; 00 42 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $0A		; 42 0A ; Reserved instruction
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFF9FF.l,X		; FF FF F9 FF ; Subtract with carry (long,X) $FFF9FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $00,$0A		; 44 0A 00 ; Move block positive $00,$0A [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $440000.l,X		; FF 00 00 44 ; Subtract with carry (long,X) $440000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$03.b		; 69 03 ; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$FE.b		; A9 FE ; Load #$FE.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	jsl $05DF75.l		; 22 75 DF 05 ; Jump to subroutine long $05DF75.l [Writes: Stack Pointer] [Flow: call]
	jsl $06DC54.l		; 22 54 DC 06 ; Jump to subroutine long $06DC54.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $0000.w		; AC 00 00 ; Load $0000.w into Y register [Writes: Y Index] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $200000.l,X		; FF 00 00 20 ; Subtract with carry (long,X) $200000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $200001.l,X		; FF 01 00 20 ; Subtract with carry (long,X) $200001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$20.b		; C0 20 ; Compare #$20.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $2F		; F0 2F ; Branch if equal to $F0, $2F [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $FEFE.w,Y		; B9 FE FE ; Load $FEFE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0AE8.w		; 8D E8 0A ; Store accumulator to $0AE8.w [Reads: Accumulator]
	lda $FEFF.w,Y		; B9 FF FE ; Load $FEFF.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0AEA.w		; 8D EA 0A ; Store accumulator to $0AEA.w [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$7E.b		; 69 7E ; Add #$7E.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$FE.b		; A9 FE ; Load #$FE.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	jsl $05DF75.l		; 22 75 DF 05 ; Jump to subroutine long $05DF75.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	lda #$6E.b		; A9 6E ; Load #$6E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$FE.b		; A9 FE ; Load #$FE.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	jsl $05DF75.l		; 22 75 DF 05 ; Jump to subroutine long $05DF75.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	stz $0EF0.w,X		; 9E F0 0E ; Store zero to $0EF0.w,X [Reads: X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsl $06F917.l		; 22 17 F9 06 ; Jump to subroutine long $06F917.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $0DC0.w,X		; BC C0 0D ; Load Y register $0DC0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $1EC2B4.l,X		; BF B4 C2 1E ; Load long $1EC2B4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsl $1EC35C.l		; 22 5C C3 1E ; Jump to subroutine long $1EC35C.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $90.b		; A5 90 ; Load $90.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	inc $92.b		; E6 92 ; Increment $92.b [Reads: Direct Page] [Flags: ZN]
	inc $92.b		; E6 92 ; Increment $92.b [Reads: Direct Page] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $11		; 90 11 ; Branch if carry clear to $90, $11 [Flow: branch]
	lda $0E40.w,X		; BD 40 0E ; Load $0E40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	jsl $068526.l		; 22 26 85 06 ; Jump to subroutine long $068526.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	sta $80.b,S		; 83 80 ; Store accumulator (stack relative) $80.b,S [Reads: Accumulator, Stack Pointer]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $FFBD.w,X		; BD BD FF ; Load $FFBD.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$30.b		; 29 30 ; Logical AND #$30.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06FEB4.l		; 22 B4 FE 06 ; Jump to subroutine long $06FEB4.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $FF		; Opcode FF overrunning bank boundry at 0EFFFC. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $FF		; Opcode FF overrunning bank boundry at 0EFFFD. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $FF		; Opcode FF overrunning bank boundry at 0EFFFE. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $FF		; Opcode FF overrunning bank boundry at 0EFFFF. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
.ENDS
