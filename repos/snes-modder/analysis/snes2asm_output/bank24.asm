.BANK 24 SLOT 0
.ORG $0000

.SECTION "Bank24" FORCE

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $0F.b,S		; 23 0F ; AND accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$1F1F.w		; 09 1F 1F ; Logical OR #$1F1F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $00221F.l		; 0F 1F 22 00 ; OR accumulator with memory (long) $00221F.l [Writes: Accumulator] [Flags: ZN]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $C0,$00		; 44 00 C0 ; Move block positive $C0,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $F0,$00		; 44 00 F0 ; Move block positive $F0,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$E0C0.w		; C0 C0 E0 ; Compare #$E0C0.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $3D4200.l,X		; 3F 00 42 3D ; AND accumulator with memory (long,X) $3D4200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	eor [$66.b]		; 47 66 ; Exclusive OR accumulator with memory (long) [$66.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $3F1D00.l		; 22 00 1D 3F ; Jump to subroutine long $3F1D00.l [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	clv		; B8 ; Clear overflow flag [Flags: V]
	lsr $01.b		; 46 01 ; Logical shift right $01.b [Reads: Direct Page] [Flags: ZNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$807E.w		; C0 7E 80 ; Compare #$807E.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpx $C810.w		; EC 10 C8 ; Compare $C810.w with X register [Reads: X Index] [Flags: ZNC]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	bit $F242.w,X		; 3C 42 F2 ; Test bits $F242.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldy $2348.w		; AC 48 23 ; Load $2348.w into Y register [Writes: Y Index] [Flags: ZN]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $3D7F00.l,X		; 3F 00 7F 3D ; AND accumulator with memory (long,X) $3D7F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $836747.l,X		; FF 47 67 83 ; Subtract with carry (long,X) $836747.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($00.b,S),Y		; B3 00 ; Load accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $3F0300.l		; 22 00 03 3F ; Jump to subroutine long $3F0300.l [Writes: Stack Pointer] [Flow: call]
	adc $47FF.w,X		; 7D FF 47 ; Add $47FF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $BE.b		; 85 BE ; Store accumulator to $BE.b [Reads: Accumulator]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $38.b		; 46 38 ; Logical shift right $38.b [Reads: Direct Page] [Flags: ZNC]
	sbc ($0C.b)		; F2 0C ; Subtract with carry (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	nop		; EA ; No operation
	pei ($DA.b)		; D4 DA ; Push effective indirect address ($DA.b) [Reads: Direct Page] [Writes: Stack Pointer]
	ldy $BC.b		; A4 BC ; Load $BC.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $50, $78		; 50 78 ; Branch if overflow clear to $50, $78 [Flow: branch]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	bit $227A.w,X		; 3C 7A 22 ; Test bits $227A.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	inc $FC19.w,X		; FE 19 FC ; Increment memory $FC19.w,X [Reads: X Index] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $001C00.l		; 0F 00 1C 00 ; OR accumulator with memory (long) $001C00.l [Writes: Accumulator] [Flags: ZN]
	ora $000F00.l,X		; 1F 00 0F 00 ; Logical OR long $000F00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $013E00.l,X		; 1F 00 3E 01 ; Logical OR long $013E00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $0702.w,X		; 7D 02 07 ; Add $0702.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $17.b		; 14 17 ; Test and reset bits $17.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $2E.b,X		; 15 2E ; OR accumulator with memory $2E.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $83.b,X		; 55 83 ; Exclusive OR accumulator with memory $83.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0200.w,Y		; 99 00 02 ; Store accumulator to $0200.w,Y [Reads: Accumulator, Y Index]
	sec		; 38 ; Set carry flag [Flags: C]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $9C.b		; 84 9C ; Store Y register to $9C.b [Reads: Y Index]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($BE80.w,X)		; 7C 80 BE ; Jump indirect indexed to ($BE80.w,X) [Reads: X Index] [Flow: jump]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cpx #$2810.w		; E0 10 28 ; Compare #$2810.w with X register [Reads: X Index] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $50, $A8		; 50 A8 ; Branch if overflow clear to $50, $A8 [Flow: branch]
	stz $AA.b,X		; 74 AA ; Store zero to $AA.b,X [Reads: X Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $017F00.l,X		; 3F 00 7F 01 ; AND accumulator with memory (long,X) $017F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $18.b,S		; 83 18 ; Store accumulator (stack relative) $18.b,S [Reads: Accumulator, Stack Pointer]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$2B.b],Y		; 17 2B ; OR accumulator with memory (long indexed) [$2B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $208B.w,X		; 5D 8B 20 ; Exclusive OR accumulator with memory $208B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr ($FE00.w,X)		; FC 00 FE ; Jump to subroutine indirect indexed ($FE00.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $01		; 30 01 ; Branch if minus to $30, $01 [Flow: branch]
	cop $E8.b		; 02 E8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pea $2B9A.w		; F4 9A 2B ; Push absolute address $2B9A.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $00		; 42 00 ; Reserved instruction
	lda $0026.w,X		; BD 26 00 ; Load $0026.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $FF42.w		; 0E 42 FF ; Arithmetic shift left $FF42.w [Flags: ZNC]
	lda $BF2C.w		; AD 2C BF ; Load $BF2C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	rol $1A9B.w,X		; 3E 9B 1A ; Rotate left $1A9B.w,X [Reads: X Index] [Flags: ZNC]
	sbc [$76.b],Y		; F7 76 ; Subtract with carry (long indexed) [$76.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $3C2C.w		; 6E 2C 3C ; Rotate right $3C2C.w [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsl $D30900.l		; 22 00 09 D3 ; Jump to subroutine long $D30900.l [Writes: Stack Pointer] [Flow: call]
	cmp ($E5.b,X)		; C1 E5 ; Compare accumulator ($E5.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	bit #$2452.w		; 89 52 24 ; Test bits #$2452.w with accumulator [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $F5.b		; 00 F5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $43.b		; 24 43 ; Test bits $43.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sbc [$06.b]		; E7 06 ; Subtract with carry (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl $CF.b		; 06 CF ; Arithmetic shift left $CF.b [Reads: Direct Page] [Flags: ZNC]
	asl $0C4E.w		; 0E 4E 0C ; Arithmetic shift left $0C4E.w [Flags: ZNC]
	bit $1818.w,X		; 3C 18 18 ; Test bits $1818.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	jsl $8B1400.l		; 22 00 14 8B ; Jump to subroutine long $8B1400.l [Writes: Stack Pointer] [Flow: call]
	sta $B199.w,Y		; 99 99 B1 ; Store accumulator to $B199.w,Y [Reads: Accumulator, Y Index]
	adc ($24.b)		; [PATTERN: Memory clearing operation] 72 24 ; Add with carry (indirect) ($24.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $F7.b,X		; 74 F7 ; Store zero to $F7.b,X [Reads: X Index]
	stz $EF.b		; 64 EF ; Store zero to $EF.b
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp $007E58.l,X		; DF 58 7E 00 ; Compare accumulator (long,X) $007E58.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	bit $1800.w,X		; 3C 00 18 ; Test bits $1800.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	jsl $810D00.l		; 22 00 0D 81 ; Jump to subroutine long $810D00.l [Writes: Stack Pointer] [Flow: call]
	bit #$A191.w		; 89 91 A1 ; Test bits #$A191.w with accumulator [Reads: Accumulator] [Flags: Z]
	.db $42, $24		; 42 24 ; Reserved instruction
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $0F3F3F.l,X		; 7F 3F 3F 0F ; Add long $0F3F3F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $020029.l		; 0F 29 00 02 ; OR accumulator with memory (long) $020029.l [Writes: Accumulator] [Flags: ZN]
	adc $240F3F.l,X		; 7F 3F 0F 24 ; Add long $240F3F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$D0F0.w		; C0 F0 D0 ; Compare #$D0F0.w with Y register [Reads: Y Index] [Flags: ZNC]
	ldy #$5043.w		; A0 43 50 ; Load #$5043.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $A047.w		; 20 47 A0 ; Jump to subroutine at $A047.w [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $50		; D0 50 ; Branch if not equal to $D0, $50 [Flow: branch]
	.db $50, $23		; 50 23 ; Branch if overflow clear to $50, $23 [Flow: branch]
	ldy #$1F01.w		; A0 01 1F ; Load #$1F01.w into Y register [Writes: Y Index] [Flags: ZN]
	ora $010F23.l,X		; 1F 23 0F 01 ; Logical OR long $010F23.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $03.b,S		; 23 03 ; AND accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $BE.b,S		; 83 BE ; Store accumulator (stack relative) $BE.b,S [Reads: Accumulator, Stack Pointer]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $002603.l		; 0F 03 26 00 ; OR accumulator with memory (long) $002603.l [Writes: Accumulator] [Flags: ZN]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($F8.b,X)		; 21 F8 ; Logical AND ($F8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	cpx #$C0C0.w		; E0 C0 C0 ; Compare #$C0C0.w with X register [Reads: X Index] [Flags: ZNC]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $004F00.l,X		; 3F 00 4F 00 ; AND accumulator with memory (long,X) $004F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stz $7A60.w,X		; 9E 60 7A ; Store zero to $7A60.w,X [Reads: X Index]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $967A.w,X		; 3D 7A 96 ; AND accumulator with memory $967A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $1416.w		; 6E 16 14 ; Rotate right $1416.w [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cpy $38.b		; C4 38 ; Compare $38.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	eor $24.b,S		; 43 24 ; Exclusive OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	tsb $0894.w		; 0C 94 08 ; Test and set bits $0894.w [Reads: Accumulator] [Flags: Z]
	mvn $34,$08		; 54 08 34 ; Move block negative $34,$08 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	brk $C4.b		; 00 C4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsl $280B14.l		; 22 14 0B 28 ; Jump to subroutine long $280B14.l [Writes: Stack Pointer] [Flow: call]
	.db $10, $06		; 10 06 ; Branch if plus to $10, $06 [Flow: branch]
	ora ($3D.b,X)		; 01 3D ; Logical OR ($3D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $4B.b		; 02 4B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $96.b		; 04 96 ; Test and set bits $96.b [Reads: Accumulator] [Flags: Z]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $10, $85		; 10 85 ; Branch if plus to $10, $85 [Flow: branch]
	and ($02.b)		; 32 02 ; AND accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$3F03.w		; 09 03 3F ; Logical OR #$3F03.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ror $7E9E.w,X		; 7E 9E 7E ; Rotate right $7E9E.w,X [Reads: X Index] [Flags: ZNC]
	asl $14.b,X		; 16 14 ; Arithmetic shift left $14.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr ($4338.w,X)		; FC 38 43 ; Jump to subroutine indirect indexed ($4338.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $0C18.w,X		; 3C 18 0C ; Test bits $0C18.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	stz $5C08.w		; 9C 08 5C ; Store zero to $5C08.w
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $3808.w,X		; 3C 08 38 ; Test bits $3808.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $223C.w,X		; 3C 3C 22 ; Test bits $223C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	trb $380B.w		; 1C 0B 38 ; Test and reset bits $380B.w [Reads: Accumulator] [Flags: Z]
	.db $10, $7E		; 10 7E ; Branch if plus to $10, $7E [Flow: branch]
	ora ($7D.b,X)		; 01 7D ; Logical OR ($7D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $7F.b		; 02 7F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $3D.b,S		; 03 3D ; OR accumulator with stack relative $3D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $83.b		; 02 83 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1301.w		; 0E 01 13 ; Arithmetic shift left $1301.w [Flags: ZNC]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($57.b,S),Y		; 53 57 ; XOR accumulator (stack relative indirect indexed) ($57.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $2F56.w,X		; 5D 56 2F ; Exclusive OR accumulator with memory $2F56.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($0C.b,S),Y		; 13 0C ; OR accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $7E.b,S		; 03 7E ; OR accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $80, $BE		; 80 BE ; Branch always to $80, $BE [Flow: branch]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	inc $BCC0.w,X		; FE C0 BC ; Increment memory $BCC0.w,X [Reads: X Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sta $26.b,S		; 83 26 ; Store accumulator (stack relative) $26.b,S [Reads: Accumulator, Stack Pointer]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$CA00.w		; C0 00 CA ; Compare #$CA00.w with Y register [Reads: Y Index] [Flags: ZNC]
	nop		; EA ; No operation
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	pea $30C8.w		; F4 C8 30 ; Push absolute address $30C8.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	cpy #$077B.w		; C0 7B 07 ; Compare #$077B.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc $017E06.l,X		; 7F 06 7E 01 ; Add long $017E06.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $3F02.w,X		; 7D 02 3F ; Add $3F02.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $0D.b		; 84 0D ; Store Y register to $0D.b [Reads: Y Index]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $5F5E5F.l,X		; 5F 5F 5E 5F ; Exclusive OR accumulator with memory (long,X) $5F5E5F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $9C.b,S		; 83 9C ; Store accumulator (stack relative) $9C.b,S [Reads: Accumulator, Stack Pointer]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $BE00.w,X		; DE 00 BE ; Decrement memory $BE00.w,X [Reads: X Index] [Flags: ZN]
	brk $5E.b		; 00 5E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$609E.w		; A0 9E 60 ; Load #$609E.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr ($2584.w,X)		; FC 84 25 ; Jump to subroutine indirect indexed ($2584.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$3A00.w		; C0 00 3A ; Compare #$3A00.w with Y register [Reads: Y Index] [Flags: ZNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sta $B4.b,S		; 83 B4 ; Store accumulator (stack relative) $B4.b,S [Reads: Accumulator, Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	lda $3C46.w,X		; BD 46 3C ; Load $3C46.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $3C7E02.l,X		; FF 02 7E 3C ; Subtract with carry (long,X) $3C7E02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $1C.b		; 02 1C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $7F,$00		; 44 00 7F ; Move block positive $7F,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $79.b,S		; 03 79 ; OR accumulator with stack relative $79.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $7A.b		; 00 7A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $393E.w		; 1C 3E 39 ; Test and reset bits $393E.w [Reads: Accumulator] [Flags: Z]
	rol $35.b,X		; 36 35 ; Rotate left $35.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $38.b		; 02 38 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $FE,$00		; 44 00 FE ; Move block positive $FE,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $9E.b,S		; 03 9E ; OR accumulator with stack relative $9E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $5E.b		; 00 5E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsl $380400.l		; 22 00 04 38 ; Jump to subroutine long $380400.l [Writes: Stack Pointer] [Flow: call]
	jmp ($6C9C.w,X)		; 7C 9C 6C ; Jump indirect indexed to ($6C9C.w,X) [Reads: X Index] [Flow: jump]
	ldy $0025.w		; AC 25 00 ; Load $0025.w into Y register [Writes: Y Index] [Flags: ZN]
	ora #$0001.w		; 09 01 00 ; Logical OR #$0001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $1804.w		; 0E 04 18 ; Arithmetic shift left $1804.w [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $10, $22		; 10 22 ; Branch if plus to $10, $22 [Flow: branch]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$2F.b],Y		; 17 2F ; OR accumulator with memory (long indexed) [$2F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx #$3C24.w		; E0 24 3C ; Compare #$3C24.w with X register [Reads: X Index] [Flags: ZNC]
	brk $CE.b		; 00 CE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $044E.w		; 0C 4E 04 ; Test and set bits $044E.w [Reads: Accumulator] [Flags: Z]
	ldx $3C0C.w		; AE 0C 3C ; Load $3C0C.w into X register [Writes: X Index] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	jsr ($0078.w,X)		; FC 78 00 ; Jump to subroutine indirect indexed ($0078.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($BA.b)		; F2 BA ; Subtract with carry (indirect) ($BA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($C4.b)		; 72 C4 ; Add with carry (indirect) ($C4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sty $30.b		; 84 30 ; Store Y register to $30.b [Reads: Y Index]
	brk $4F.b		; 00 4F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ora [$5F.b]		; 07 5F ; OR accumulator with memory (long) [$5F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $0B580F.l,X		; 5F 0F 58 0B ; Exclusive OR accumulator with memory (long,X) $0B580F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ora $7F2630.l		; 0F 30 26 7F ; OR accumulator with memory (long) $7F2630.l [Writes: Accumulator] [Flags: ZN]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	brk $F2.b		; 00 F2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $1A		; 10 1A ; Branch if plus to $10, $1A [Flow: branch]
	cpx #$10FA.w		; E0 FA 10 ; Compare #$10FA.w with X register [Reads: X Index] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $D0, $3A		; D0 3A ; Branch if not equal to $D0, $3A [Flow: branch]
	.db $B0, $7A		; B0 7A ; Branch if carry set to $B0, $7A [Flow: branch]
	.db $70, $0C		; 70 0C ; Branch if overflow set to $70, $0C [Flow: branch]
	rol $FE.b		; 26 FE ; Rotate left $FE.b [Reads: Direct Page] [Flags: ZNC]
	and #$0500.w		; 29 00 05 ; Logical AND #$0500.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	cmp $8BABDF.l,X		; DF DF AB 8B ; Compare accumulator (long,X) $8BABDF.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	mvn $00,$27		; 54 27 00 ; Move block negative $00,$27 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora [$3C.b]		; 07 3C ; OR accumulator with memory (long) [$3C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $76.b		; 00 76 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $3C.b,X		; 34 3C ; Test bits $3C.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $3C4A.w,X		; 3C 4A 3C ; Test bits $3C4A.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	bit $0010.w		; 2C 10 00 ; Test bits $0010.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	sec		; 38 ; Set carry flag [Flags: C]
	brk $4C.b		; 00 4C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $49		; 30 49 ; Branch if minus to $30, $49 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	stz $24.b,X		; 74 24 ; Store zero to $24.b,X [Reads: X Index]
	sec		; 38 ; Set carry flag [Flags: C]
	sty $18.b		; 84 18 ; Store Y register to $18.b [Reads: Y Index]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6E.b		; 00 6E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp $04DF0C.l		; CF 0C DF 04 ; Compare accumulator (long) $04DF0C.l [Reads: Accumulator] [Flags: ZNC]
	eor $B5.b,S		; 43 B5 ; Exclusive OR accumulator with stack relative $B5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $07.b		; 24 07 ; Test bits $07.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $52.b		; 24 52 ; Test bits $52.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	lda ($A1.b),Y		; B1 A1 ; Load accumulator ($A1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	wai		; CB ; Wait for interrupt
	and $8900.w,Y		; 39 00 89 ; AND accumulator with memory $8900.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ora $43.b,S		; 03 43 ; OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $24.b,X		; B5 24 ; Load $24.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$E8.b]		; 87 E8 ; Store accumulator (long) [$E8.b] [Reads: Accumulator, Direct Page]
	ora $39.b,S		; 03 39 ; OR accumulator with stack relative $39.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $89.b		; 00 89 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ora $43.b,S		; 03 43 ; OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $24.b,X		; B5 24 ; Load $24.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$E8.b]		; 87 E8 ; Store accumulator (long) [$E8.b] [Reads: Accumulator, Direct Page]
	ora $E4.b,S		; 03 E4 ; OR accumulator with stack relative $E4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $3B0C00.l		; 2F 00 0C 3B ; AND accumulator with memory (long) $3B0C00.l [Writes: Accumulator] [Flags: ZN]
	ora $3D.b,S		; 03 3D ; OR accumulator with stack relative $3D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($1E.b,X)		; 01 1E ; Logical OR ($1E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $141400.l		; 22 00 14 14 ; Jump to subroutine long $141400.l [Writes: Stack Pointer] [Flow: call]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $0306.w		; 0D 06 03 ; Logical OR $0306.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $DC.b		; 00 DC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$80BC.w		; C0 BC 80 ; Compare #$80BC.w with Y register [Reads: Y Index] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $280F00.l		; 22 00 0F 28 ; Jump to subroutine long $280F00.l [Writes: Stack Pointer] [Flow: call]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $B0, $60		; B0 60 ; Branch if carry set to $B0, $60 [Flow: branch]
	cpy #$0080.w		; C0 80 00 ; Compare #$0080.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($63.b,X)		; 01 63 ; Logical OR ($63.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $73.b,S		; 23 73 ; AND accumulator with stack relative $73.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $77.b,S		; 23 77 ; AND accumulator with stack relative $77.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $43.b,X		; 36 43 ; Rotate left $43.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc $3F0B3F.l,X		; 7F 3F 0B 3F ; Add long $3F0B3F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $001C.w		; 1C 1C 00 ; Test and reset bits $001C.w [Reads: Accumulator] [Flags: Z]
	rol $5C5C.w,X		; 3E 5C 5C ; Rotate left $5C5C.w,X [Reads: X Index] [Flags: ZNC]
	eor #$4040.w		; 49 40 40 ; Exclusive OR #$4040.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $1C.b,S		; 23 1C ; AND accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $F8.b,S		; 43 F8 ; Exclusive OR accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $E0		; F0 E0 ; Branch if equal to $F0, $E0 [Flow: branch]
	and $F0.b,S		; 23 F0 ; AND accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr $80A0.w		; 20 A0 80 ; Jump to subroutine at $80A0.w [Writes: Stack Pointer] [Flow: call]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $F0, $80		; F0 80 ; Branch if equal to $F0, $80 [Flow: branch]
	cpx #$C0C0.w		; E0 C0 C0 ; Compare #$C0C0.w with X register [Reads: X Index] [Flags: ZNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $D0, $60		; D0 60 ; Branch if not equal to $D0, $60 [Flow: branch]
	.db $F0, $70		; F0 70 ; Branch if equal to $F0, $70 [Flow: branch]
	jsr $58C0.w		; 20 C0 58 ; Jump to subroutine at $58C0.w [Writes: Stack Pointer] [Flow: call]
	asl $0D59.w		; 0E 59 0D ; Arithmetic shift left $0D59.w [Flags: ZNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rol $1707.w		; 2E 07 17 ; Rotate left $1707.w [Flags: ZNC]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $1F3F14.l,X		; 7F 14 3F 1F ; Add long $1F3F14.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $DA0107.l		; 0F 07 01 DA ; OR accumulator with memory (long) $DA0107.l [Writes: Accumulator] [Flags: ZN]
	.db $F0, $9A		; F0 9A ; Branch if equal to $F0, $9A [Flow: branch]
	.db $F0, $3A		; F0 3A ; Branch if equal to $F0, $3A [Flow: branch]
	.db $F0, $74		; F0 74 ; Branch if equal to $F0, $74 [Flow: branch]
	cpx #$80E8.w		; E0 E8 80 ; Compare #$80E8.w with X register [Reads: X Index] [Flags: ZNC]
	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FC0C.w,X		; FE 0C FC ; Increment memory $FC0C.w,X [Reads: X Index] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $E0		; F0 E0 ; Branch if equal to $F0, $E0 [Flow: branch]
	.db $80, $C1		; 80 C1 ; Branch always to $80, $C1 [Flow: branch]
	cmp ($62.b,X)		; C1 62 ; Compare accumulator ($62.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	.db $62, $34, $34		; 62 34 34 ; Push effective relative address $62, $34, $34 [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $3E.b		; 02 3E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $2408.w		; 1C 08 24 ; Test and reset bits $2408.w [Reads: Accumulator] [Flags: Z]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($3C.b)		; 72 3C ; Add with carry (indirect) ($3C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $62.b,S		; E3 62 ; Subtract stack-relative $62.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ror $34.b,X		; 76 34 ; Rotate right $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $0028.w,X		; 3C 28 00 ; Test bits $0028.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ora $7E.b,S		; 03 7E ; OR accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $3C4A.w,X		; 9D 4A 3C ; Store accumulator to $3C4A.w,X [Reads: Accumulator, X Index]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $28.b		; 05 28 ; Logical OR $28.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $6C		; 10 6C ; Branch if plus to $10, $6C [Flow: branch]
	.db $10, $AA		; 10 AA ; Branch if plus to $10, $AA [Flow: branch]
	.db $10, $44		; 10 44 ; Branch if plus to $10, $44 [Flow: branch]
	inc $0154.w		; EE 54 01 ; Increment $0154.w [Flags: ZN]
	.db $10, $92		; 10 92 ; Branch if plus to $10, $92 [Flow: branch]
	jsl $380800.l		; 22 00 08 38 ; Jump to subroutine long $380800.l [Writes: Stack Pointer] [Flow: call]
	jmp ($BAFE.w,X)		; 7C FE BA ; Jump indirect indexed to ($BAFE.w,X) [Reads: X Index] [Flow: jump]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	inc $0092.w,X		; FE 92 00 ; Increment memory $0092.w,X [Reads: X Index] [Flags: ZN]
	sbc $43.b		; E5 43 ; Subtract $43.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $E7.b		; 24 E7 ; Test bits $E7.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $20.b,X		; 15 20 ; OR accumulator with memory $20.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $387F30.l,X		; BF 30 7F 38 ; Load long $387F30.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $001F18.l,X		; 3F 18 1F 00 ; AND accumulator with memory (long,X) $001F18.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sta $45C9.w,X		; 9D C9 45 ; Store accumulator to $45C9.w,X [Reads: Accumulator, X Index]
	and $1D.b		; 25 1D ; Logical AND $1D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EE.b		; 00 EE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $EE.b		; 04 EE ; Test and set bits $EE.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $2211.w		; EE 11 22 ; Increment $2211.w [Flags: ZN]
	eor $18.b,X		; 55 18 ; Exclusive OR accumulator with memory $18.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($EE.b),Y		; 11 EE ; OR accumulator with memory ($EE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $24.b		; E5 24 ; Subtract $24.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$26.b]		; E7 26 ; Subtract with carry (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$24.b]		; E7 24 ; Subtract with carry (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda [$24.b]		; A7 24 ; Load accumulator (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $183D3C.l,X		; 7F 3C 3D 18 ; Add long $183D3C.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9B.b		; 00 9B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $DA9A.w,Y		; 99 9A DA ; Store accumulator to $DA9A.w,Y [Reads: Accumulator, Y Index]
	.db $42, $25		; 42 25 ; Reserved instruction
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $95.b,S		; 83 95 ; Store accumulator (stack relative) $95.b,S [Reads: Accumulator, Stack Pointer]
	tsb $4A.b		; 04 4A ; Test and set bits $4A.b [Reads: Accumulator] [Flags: Z]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00DC.w		; 0E DC 00 ; Arithmetic shift left $00DC.w [Flags: ZNC]
	brk $DC.b		; 00 DC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $AA2AEA.l		; 22 EA 2A AA ; Jump to subroutine long $AA2AEA.l [Writes: Stack Pointer] [Flow: call]
	jsl $24E5DC.l		; 22 DC E5 24 ; Jump to subroutine long $24E5DC.l [Writes: Stack Pointer] [Flow: call]
	sbc $83FF20.l		; EF 20 FF 83 ; Subtract with carry (long) $83FF20.l [Writes: Accumulator] [Flags: ZVNC]
	eor $1105.w,X		; 5D 05 11 ; Exclusive OR accumulator with memory $1105.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr $103F.w		; 20 3F 10 ; Jump to subroutine at $103F.w [Writes: Stack Pointer] [Flow: call]
	ora $000E00.l,X		; 1F 00 0E 00 ; Logical OR long $000E00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sta $51CD91.l,X		; 9F 91 CD 51 ; Store accumulator (long,X) $51CD91.l,X [Reads: Accumulator, X Index]
	and $0E11.w		; 2D 11 0E ; Logical AND $0E11.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $004A.w		; EE 4A 00 ; Increment $004A.w [Flags: ZN]
	sbc $057E84.l,X		; FF 84 7E 05 ; Subtract with carry (long,X) $057E84.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $110155.l		; 22 55 01 11 ; Jump to subroutine long $110155.l [Writes: Stack Pointer] [Flow: call]
	inc $0037.w		; EE 37 00 ; Increment $0037.w [Flags: ZN]
	sbc $00000B.l,X		; FF 0B 00 00 ; Subtract with carry (long,X) $00000B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6E.b		; 00 6E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp $04DF0C.l		; CF 0C DF 04 ; Compare accumulator (long) $04DF0C.l [Reads: Accumulator] [Flags: ZNC]
	eor $B5.b,S		; 43 B5 ; Exclusive OR accumulator with stack relative $B5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $07.b		; 24 07 ; Test bits $07.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $52.b		; 24 52 ; Test bits $52.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	lda ($A1.b),Y		; B1 A1 ; Load accumulator ($A1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	wai		; CB ; Wait for interrupt
	and $0500.w,Y		; 39 00 05 ; AND accumulator with memory $0500.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: ZNC]
	eor $07.b,S		; 43 07 ; Exclusive OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $E0.b,S		; 03 E0 ; OR accumulator with stack relative $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	inc $3684.w		; EE 84 36 ; Increment $3684.w [Flags: ZN]
	bit $8E.b		; 24 8E ; Test bits $8E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sty $8CFE.w		; 8C FE 8C ; Store Y register to $8CFE.w [Reads: Y Index]
	stx $FE70.w		; 8E 70 FE ; Store X register to $FE70.w [Reads: X Index]
	sty $8400.w		; 8C 00 84 ; Store Y register to $8400.w [Reads: Y Index]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	adc ($72.b)		; 72 72 ; Add with carry (indirect) ($72.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $0072.w,X		; FE 72 00 ; Increment memory $0072.w,X [Reads: X Index] [Flags: ZN]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $007F.w		; 0C 7F 00 ; Test and set bits $007F.w [Reads: Accumulator] [Flags: Z]
	ldx $B241.w		; AE 41 B2 ; Load $B241.w into X register [Writes: X Index] [Flags: ZN]
	eor $116E.w		; 4D 6E 11 ; Exclusive OR $116E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($00.b),Y		; 31 00 ; AND accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $EF5D.w		; 2E 5D EF ; Rotate left $EF5D.w [Flags: ZNC]
	sbc $00315F.l,X		; FF 5F 31 00 ; Subtract with carry (long,X) $00315F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $98.b		; 00 98 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp ($EA80.w,X)		; 7C 80 EA ; Jump indirect indexed to ($EA80.w,X) [Reads: X Index] [Flow: jump]
	tsb $95.b		; 04 95 ; Test and set bits $95.b [Reads: Accumulator] [Flags: Z]
	.db $62, $ED, $12		; 62 ED 12 ; Push effective relative address $62, $ED, $12 [Writes: Stack Pointer]
	sbc $700010.l		; EF 10 00 70 ; Subtract with carry (long) $700010.l [Writes: Accumulator] [Flags: ZVNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	pea $F7EE.w		; F4 EE F7 ; Push absolute address $F7EE.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sbc $00FF7D.l,X		; FF 7D FF 00 ; Subtract with carry (long,X) $00FF7D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $A57F.w		; CE 7F A5 ; Decrement $A57F.w [Flags: ZN]
	adc $D57F8A.l,X		; 7F 8A 7F D5 ; Add long $D57F8A.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $D57FEA.l,X		; 7F EA 7F D5 ; Add long $D57FEA.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $FF7FAA.l,X		; 7F AA 7F FF ; Add long $FF7FAA.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $BBBD.w		; CE BD BB ; Decrement $BBBD.w [Flags: ZN]
	sbc [$EE.b],Y		; F7 EE ; Subtract with carry (long indexed) [$EE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $FFBB.w,X		; DD BB FF ; Compare accumulator $FFBB.w,X [Reads: X Index] [Flags: ZNC]
	brk $73.b		; 00 73 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FEA5.w,X		; FE A5 FE ; Increment memory $FEA5.w,X [Reads: X Index] [Flags: ZN]
	eor ($FE.b),Y		; 51 FE ; Exclusive OR accumulator with memory ($FE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	inc $FE57.w,X		; FE 57 FE ; Increment memory $FE57.w,X [Reads: X Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	inc $FE55.w,X		; FE 55 FE ; Increment memory $FE55.w,X [Reads: X Index] [Flags: ZN]
	sbc $DDBD73.l,X		; FF 73 BD DD ; Subtract with carry (long,X) $DDBD73.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $DDBB77.l		; EF 77 BB DD ; Subtract with carry (long) $DDBB77.l [Writes: Accumulator] [Flags: ZVNC]
	jmp $00FF.w		; 4C FF 00 ; Jump to $00FF.w [Flow: jump]
	tsb $15.b		; 04 15 ; Test and set bits $15.b [Reads: Accumulator] [Flags: Z]
	sbc $80FF0A.l,X		; FF 0A FF 80 ; Subtract with carry (long,X) $80FF0A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $BF.b,S		; 23 BF ; AND accumulator with stack relative $BF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($AA.b,X)		; 01 AA ; Logical OR ($AA.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $4C.b,X		; B5 4C ; Load $4C.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $500400.l,X		; FF 00 04 50 ; Subtract with carry (long,X) $500400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $01FFA8.l,X		; FF A8 FF 01 ; Subtract with carry (long,X) $01FFA8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FD.b,S		; 23 FD ; AND accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($AD.b,X)		; 01 AD ; Logical OR ($AD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor $3D.b,X		; 55 3D ; Exclusive OR accumulator with memory $3D.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $033F00.l,X		; 1F 00 3F 03 ; Logical OR long $033F00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $232F0C.l,X		; 3F 0C 2F 23 ; AND accumulator with memory (long,X) $232F0C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1E.b,S		; 03 1E ; OR accumulator with stack relative $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $23.b,X		; 34 23 ; Test bits $23.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $3F001F.l,X		; 3F 1F 00 3F ; AND accumulator with memory (long,X) $3F001F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $432778.l,X		; 1F 78 27 43 ; Logical OR long $432778.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $BB0540.l,X		; FF 40 05 BB ; Subtract with carry (long,X) $BB0540.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ldy $BE40.w,X		; BC 40 BE ; Load Y register $BE40.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsl $101400.l		; 22 00 14 10 ; Jump to subroutine long $101400.l [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $17.b,X		; 16 17 ; Arithmetic shift left $17.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $1FFF00.l,X		; FF 00 FF 1F ; Subtract with carry (long,X) $1FFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	adc [$BF.b]		; 67 BF ; Add with carry (long) [$BF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	eor $3F4F3E.l,X		; 5F 3E 4F 3F ; Exclusive OR accumulator with memory (long,X) $3F4F3E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc [$1F.b]		; 67 1F ; Add with carry (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($0F.b,S),Y		; F3 0F ; Subtract with carry (stack relative indirect indexed) ($0F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $004380.l		; 22 80 43 00 ; Jump to subroutine long $004380.l [Writes: Stack Pointer] [Flow: call]
	sbc $00FF0C.l,X		; FF 0C FF 00 ; Subtract with carry (long,X) $00FF0C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E000FF.l,X		; FF FF 00 E0 ; Subtract with carry (long,X) $E000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $FF9FF0.l,X		; 7F F0 9F FF ; Add long $FF9FF0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $23E7FF.l		; CF FF E7 23 ; Compare accumulator (long) $23E7FF.l [Reads: Accumulator] [Flags: ZNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $070F1F.l,X		; 7F 1F 0F 07 ; Add long $070F1F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$50.b]		; 87 50 ; Store accumulator (long) [$50.b] [Reads: Accumulator, Direct Page]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$FE.b]		; 07 FE ; OR accumulator with memory (long) [$FE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $F3FFF9.l		; 0F F9 FF F3 ; OR accumulator with memory (long) $F3FFF9.l [Writes: Accumulator] [Flags: ZN]
	sbc $0023E7.l,X		; FF E7 23 00 ; Subtract with carry (long,X) $0023E7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $F8FE.w,X		; 1E FE F8 ; Arithmetic shift left $F8FE.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $E0		; F0 E0 ; Branch if equal to $F0, $E0 [Flow: branch]
	sbc $24.b		; E5 24 ; Subtract $24.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$26.b]		; E7 26 ; Subtract with carry (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$24.b]		; E7 24 ; Subtract with carry (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda [$26.b]		; A7 26 ; Load accumulator (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $183F3C.l,X		; 7F 3C 3F 18 ; Add long $183F3C.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9B.b		; 00 9B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $D99A.w,Y		; 99 9A D9 ; Store accumulator to $D99A.w,Y [Reads: Accumulator, Y Index]
	.db $42, $26		; 42 26 ; Reserved instruction
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $DC.b		; 00 DC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$00DC.w		; 09 DC 00 ; Logical OR #$00DC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $DC.b		; 00 DC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $EA2AAA.l		; 22 AA 2A EA ; Jump to subroutine long $EA2AAA.l [Writes: Stack Pointer] [Flow: call]
	jsl $0243DC.l		; 22 DC 43 02 ; Jump to subroutine long $0243DC.l [Writes: Stack Pointer] [Flow: call]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$07.b],Y		; 37 07 ; AND accumulator with memory (long indexed) [$07.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1B.b,S		; 03 1B ; OR accumulator with stack relative $1B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $34.b,S		; 03 34 ; OR accumulator with stack relative $34.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $10, $71		; 10 71 ; Branch if plus to $10, $71 [Flow: branch]
	and ($7F.b),Y		; 31 7F ; AND accumulator with memory ($7F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $03007F.l,X		; 3F 7F 00 03 ; AND accumulator with memory (long,X) $03007F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $4E2B.w		; 1C 2B 4E ; Test and reset bits $4E2B.w [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	adc $7AFCFE.l,X		; 7F FE FC 7A ; Add long $7AFCFE.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora ($10.b)		; 12 10 ; OR accumulator with memory (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $F0.b,X		; F6 F0 ; Increment memory $F0.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ldx $FEBC.w,Y		; BE BC FE ; Load X register $FEBC.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	stz $009C.w		; [PATTERN: Memory clearing operation] 9C 9C 00 ; Store zero to $009C.w
	cop $86.b		; 02 86 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $960E.w		; EE 0E 96 ; Increment $960E.w [Flags: ZN]
	.db $42, $62		; 42 62 ; Reserved instruction
	stz $0003.w		; 9C 03 00 ; Store zero to $0003.w
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $000A00.l		; 0F 00 0A 00 ; OR accumulator with memory (long) $000A00.l [Writes: Accumulator] [Flags: ZN]
	ora #$0C01.w		; 09 01 0C ; Logical OR #$0C01.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $84.b		; 04 84 ; Test and set bits $84.b [Reads: Accumulator] [Flags: Z]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0B0E.w		; 0D 0E 0B ; Logical OR $0B0E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	dec $08.b,X		; D6 08 ; Decrement memory $08.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ldy $7000.w		; AC 00 70 ; Load $7000.w into Y register [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $F0, $C0		; F0 C0 ; Branch if equal to $F0, $C0 [Flow: branch]
	.db $50, $00		; 50 00 ; Branch if overflow clear to $50, $00 [Flow: branch]
	.db $30, $20		; 30 20 ; Branch if minus to $30, $20 [Flow: branch]
	cpx #$C0C0.w		; E0 C0 C0 ; Compare #$C0C0.w with X register [Reads: X Index] [Flags: ZNC]
	brk $5A.b		; 00 5A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $1090.w		; EC 90 10 ; Compare $1090.w with X register [Reads: X Index] [Flags: ZNC]
	.db $B0, $D0		; B0 D0 ; Branch if carry set to $B0, $D0 [Flow: branch]
	jsr $AAC0.w		; 20 C0 AA ; Jump to subroutine at $AAC0.w [Writes: Stack Pointer] [Flow: call]
	stx $97.b		; 86 97 ; Store X register to $97.b [Reads: X Index]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $CE7FA5.l,X		; 7F A5 7F CE ; Add long $CE7FA5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $BB00FF.l,X		; 7F FF 00 BB ; Add long $BB00FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $F7EE.w,X		; DD EE F7 ; Compare accumulator $F7EE.w,X [Reads: X Index] [Flags: ZNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda $FFCE.w,X		; BD CE FF ; Load $FFCE.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $86.b,X		; 55 86 ; Exclusive OR accumulator with memory $86.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $510F00.l		; AF 00 0F 51 ; Load long $510F00.l into accumulator [Writes: Accumulator] [Flags: ZN]
	inc $FEA5.w,X		; FE A5 FE ; Increment memory $FEA5.w,X [Reads: X Index] [Flags: ZN]
	adc ($FE.b,S),Y		; 73 FE ; Add with carry (stack relative indirect indexed) ($FE.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $BBDD00.l,X		; FF 00 DD BB ; Subtract with carry (long,X) $BBDD00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$EF.b],Y		; 77 EF ; Add with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $73BD.w,X		; DD BD 73 ; Compare accumulator $73BD.w,X [Reads: X Index] [Flags: ZNC]
	sbc $00CC84.l,X		; FF 84 CC 00 ; Subtract with carry (long,X) $00CC84.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $BC42.w,X		; BD 42 BC ; Load $BC42.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	lda $7F8040.l,X		; BF 40 80 7F ; Load long $7F8040.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $B5AA00.l,X		; FF 00 AA B5 ; Subtract with carry (long,X) $B5AA00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $BD		; 80 BD ; Branch always to $80, $BD [Flow: branch]
	ldy $80BF.w,X		; BC BF 80 ; Load Y register $80BF.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sbc $00E484.l,X		; FF 84 E4 00 ; Subtract with carry (long,X) $00E484.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$0084.w		; E0 84 00 ; Compare #$0084.w with X register [Reads: X Index] [Flags: ZNC]
	lda $3D42.w,X		; BD 42 3D ; Load $3D42.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sbc $0102.w,X		; FD 02 01 ; Subtract with carry $0102.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $00FF.w,X		; FE FF 00 ; Increment memory $00FF.w,X [Reads: X Index] [Flags: ZN]
	lda $0155.w		; AD 55 01 ; Load $0155.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $FD3D.w,X		; BD 3D FD ; Load $FD3D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $0F.b		; 05 0F ; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$1B.b]		; 07 1B ; OR accumulator with memory (long) [$1B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $010C17.l		; 0F 17 0C 01 ; OR accumulator with memory (long) $010C17.l [Writes: Accumulator] [Flags: ZN]
	cop $05.b		; 02 05 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $1F1F0F.l		; 0F 0F 1F 1F ; OR accumulator with memory (long) $1F1F0F.l [Writes: Accumulator] [Flags: ZN]
	sbc $503400.l		; EF 00 34 50 ; Subtract with carry (long) $503400.l [Writes: Accumulator] [Flags: ZVNC]
	ora $3EE9.w,Y		; 19 E9 3E ; OR accumulator with memory $3EE9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $3F.b		; C6 3F ; Decrement $3F.b [Reads: Direct Page] [Flags: ZN]
	cpy #$40BF.w		; C0 BF 40 ; Compare #$40BF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $E0FFA0.l,X		; FF A0 FF E0 ; Subtract with carry (long,X) $E0FFA0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $AF.b,X		; F6 AF ; Increment memory $AF.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	asl $39.b,X		; 16 39 ; Arithmetic shift left $39.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $FCD1AC.l		; 2F AC D1 FC ; AND accumulator with memory (long) $FCD1AC.l [Writes: Accumulator] [Flags: ZN]
	ldx $BF40.w,Y		; BE 40 BF ; Load X register $BF40.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cmp $30CF20.l,X		; DF 20 CF 30 ; Compare accumulator (long,X) $30CF20.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	dec $D920.w,X		; DE 20 D9 ; Decrement memory $D920.w,X [Reads: X Index] [Flags: ZN]
	jsr $20DF.w		; 20 DF 20 ; Jump to subroutine at $20DF.w [Writes: Stack Pointer] [Flow: call]
	sbc [$00.b],Y		; F7 00 ; Subtract with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $0F0906.l		; 0F 06 09 0F ; OR accumulator with memory (long) $0F0906.l [Writes: Accumulator] [Flags: ZN]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	and [$FC.b]		; 27 FC ; AND accumulator with memory (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $FE.b,S		; 23 FE ; AND accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($FF.b),Y		; 71 FF ; Add with carry ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $FF		; 70 FF ; Branch if overflow set to $70, $FF [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $FEFF7C.l,X		; FF 7C FF FE ; Subtract with carry (long,X) $FEFF7C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $A0A0FF.l,X		; FF FF A0 A0 ; Subtract with carry (long,X) $A0A0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jmp ($FFFE.w,X)		; 7C FE FF ; Jump indirect indexed to ($FFFE.w,X) [Reads: X Index] [Flow: jump]
	and $F91FF3.l,X		; 3F F3 1F F9 ; AND accumulator with memory (long,X) $F91FF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $7E87FC.l		; 0F FC 87 7E ; OR accumulator with memory (long) $7E87FC.l [Writes: Accumulator] [Flags: ZN]
	sbc $1F.b,S		; E3 1F ; Subtract stack-relative $1F.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc ($0F.b),Y		; F1 0F ; Subtract with carry ($0F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx $EA13.w		; EC 13 EA ; Compare $EA13.w with X register [Reads: X Index] [Flags: ZNC]
	and $03.b,X		; 35 03 ; Logical AND $03.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($25.b,X)		; 01 25 ; Logical OR ($25.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($F8CF.w,X)		; FC CF F8 ; Jump to subroutine indirect indexed ($F8CF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sta $A13FF0.l,X		; 9F F0 3F A1 ; Store accumulator (long,X) $A13FF0.l,X [Reads: Accumulator, X Index]
	ror $7887.w,X		; 7E 87 78 ; Rotate right $7887.w,X [Reads: X Index] [Flags: ZNC]
	cmp $D87FA0.l,X		; DF A0 7F D8 ; Compare accumulator (long,X) $D87FA0.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	ora $80C0EC.l,X		; 1F EC C0 80 ; Logical OR long $80C0EC.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $4355.w,Y		; BE 55 43 ; Load X register $4355.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $BE43.w		; 1C 43 BE ; Test and reset bits $BE43.w [Reads: Accumulator] [Flags: Z]
	eor $01.b,X		; 55 01 ; Exclusive OR accumulator with memory $01.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $BE23B6.l,X		; FF B6 23 BE ; Subtract with carry (long,X) $BE23B6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $B6.b,S		; 03 B6 ; OR accumulator with stack relative $B6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx $00FF.w,Y		; BE FF 00 ; Load X register $00FF.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	eor $7D.b,S		; 43 7D ; Exclusive OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	eor $C7.b,S		; 43 C7 ; Exclusive OR accumulator with stack relative $C7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sec		; 38 ; Set carry flag [Flags: C]
	eor $7D.b,S		; 43 7D ; Exclusive OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $7D23.w		; 6D 23 7D ; Add $7D23.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora ($6D.b,X)		; 01 6D ; Logical OR ($6D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $0023.w,X		; 7D 23 00 ; Add $0023.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($37.b,S),Y		; 13 37 ; OR accumulator (stack relative indirect indexed) ($37.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$94.b]		; 27 94 ; AND accumulator with memory (long) [$94.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta ($6C.b,S),Y		; 93 6C ; Store accumulator (stack relative indirect indexed) ($6C.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	eor ($2D.b)		; 52 2D ; Exclusive OR accumulator with memory (indirect) ($2D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $001F.w		; 20 1F 00 ; Jump to subroutine at $001F.w [Writes: Stack Pointer] [Flow: call]
	brk $37.b		; 00 37 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $90, $90		; 90 90 ; Branch if carry clear to $90, $90 [Flow: branch]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	cpx #$1C00.w		; E0 00 1C ; Compare #$1C00.w with X register [Reads: X Index] [Flags: ZNC]
	cpx #$D42A.w		; E0 2A D4 ; Compare #$D42A.w with X register [Reads: X Index] [Flags: ZNC]
	cmp #$4936.w		; C9 36 49 ; Compare #$4936.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldx $06.b,Y		; B6 06 ; Load X register $06.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$0A1C.w		; E0 1C 0A ; Compare #$0A1C.w with X register [Reads: X Index] [Flags: ZNC]
	ora #$0609.w		; 09 09 06 ; Logical OR #$0609.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $3F00.w,X		; 1E 00 3F ; Arithmetic shift left $3F00.w,X [Reads: X Index] [Flags: ZNC]
	mvp $7F,$00		; 44 00 7F ; Move block positive $7F,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $00FF.w		; 0C FF 00 ; Test and set bits $00FF.w [Reads: Accumulator] [Flags: Z]
	sbc $07FF02.l,X		; FF 02 FF 07 ; Subtract with carry (long,X) $07FF02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $FF7C.w,Y		; 79 7C FF ; Add $FF7C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $5783.w,X		; FD 83 57 ; Subtract with carry $5783.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$00F4.w		; 09 F4 00 ; Logical OR #$00F4.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $B8		; F0 B8 ; Branch if equal to $F0, $B8 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($0027.w,X)		; FC 27 00 ; Jump to subroutine indirect indexed ($0027.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $08.b,S		; 03 08 ; OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$0B.b]		; 07 0B ; OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $23.b		; 04 23 ; Test and set bits $23.b [Reads: Accumulator] [Flags: Z]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $06.b,S		; 03 06 ; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $270F.w		; 0C 0F 27 ; Test and set bits $270F.w [Reads: Accumulator] [Flags: Z]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$D000.w		; E0 00 D0 ; Compare #$D000.w with X register [Reads: X Index] [Flags: ZNC]
	jsr $00F0.w		; 20 F0 00 ; Jump to subroutine at $00F0.w [Writes: Stack Pointer] [Flow: call]
	.db $30, $24		; 30 24 ; Branch if minus to $30, $24 [Flow: branch]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$B0D0.w		; E0 D0 B0 ; Compare #$B0D0.w with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $02.b		; 05 02 ; Logical OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1E02.w		; 0D 02 1E ; Logical OR $1E02.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $030500.l		; 22 00 05 03 ; Jump to subroutine long $030500.l [Writes: Stack Pointer] [Flow: call]
	ora $09.b		; 05 09 ; Logical OR $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and $00233F.l,X		; 3F 3F 23 00 ; AND accumulator with memory (long,X) $00233F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $C0.b		; 02 C0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	.db $70, $19		; 70 19 ; Branch if overflow set to $70, $19 [Flow: branch]
	.db $90, $60		; 90 60 ; Branch if carry clear to $90, $60 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$B0A0.w		; C0 A0 B0 ; Compare #$B0A0.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $B0, $F0		; B0 F0 ; Branch if carry set to $B0, $F0 [Flow: branch]
	.db $90, $30		; 90 30 ; Branch if carry clear to $90, $30 [Flow: branch]
	ora $3C1C37.l,X		; 1F 37 1C 3C ; Logical OR long $3C1C37.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $1C3E.w,X		; 1E 3E 1C ; Arithmetic shift left $1C3E.w,X [Reads: X Index] [Flags: ZNC]
	and $1D08.w,X		; 3D 08 1D ; AND accumulator with memory $1D08.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $3F2400.l		; 0F 00 24 3F ; OR accumulator with memory (long) $3F2400.l [Writes: Accumulator] [Flags: ZN]
	trb $3E.b		; 14 3E ; Test and reset bits $3E.b [Reads: Accumulator] [Flags: Z]
	ora $00FF0D.l,X		; 1F 0D FF 00 ; Logical OR long $00FF0D.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $CC7F19.l,X		; FF 19 7F CC ; Subtract with carry (long,X) $CC7F19.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $3F27.w,X		; FE 27 3F ; Increment memory $3F27.w,X [Reads: X Index] [Flags: ZN]
	brk $5B.b		; 00 5B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr ($FF04.w,X)		; FC 04 FF ; Jump to subroutine indirect indexed ($FF04.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr ($22FC.w,X)		; FC FC 22 ; Jump to subroutine indirect indexed ($22FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $5BB70C.l,X		; FF 0C B7 5B ; Subtract with carry (long,X) $5BB70C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp $ED00E7.l		; 5C E7 00 ED ; Jump long to $ED00E7.l [Flow: jump]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($45.b,X)		; 01 45 ; Logical OR ($45.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $1A0700.l,X		; FF 00 07 1A ; Subtract with carry (long,X) $1A0700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $36.b,X		; 16 36 ; Arithmetic shift left $36.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $1039.w,X		; 3C 39 10 ; Test bits $1039.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $57768F.l		; 8F 8F 76 57 ; Store accumulator (long) $57768F.l [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sbc $73FF8B.l,X		; FF 8B FF 73 ; Subtract with carry (long,X) $73FF8B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $8F14FF.l		; 22 FF 14 8F ; Jump to subroutine long $8F14FF.l [Writes: Stack Pointer] [Flow: call]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: ZNC]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc ($2C.b,S),Y		; F3 2C ; Subtract with carry (stack relative indirect indexed) ($2C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $5EE130.l		; CF 30 E1 5E ; Compare accumulator (long) $5EE130.l [Reads: Accumulator] [Flags: ZNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	stz $8F.b		; 64 8F ; Store zero to $8F.b
	.db $F0, $3F		; F0 3F ; Branch if equal to $F0, $3F [Flow: branch]
	cpy #$07FF.w		; C0 FF 07 ; Compare #$07FF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $0025FF.l,X		; FF FF 25 00 ; Subtract with carry (long,X) $0025FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($07.b),Y		; 11 07 ; OR accumulator with memory ($07.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $6F6C97.l,X		; FF 97 6C 6F ; Subtract with carry (long,X) $6F6C97.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $6E97F6.l		; 0F F6 97 6E ; OR accumulator with memory (long) $6E97F6.l [Writes: Accumulator] [Flags: ZN]
	sbc ($0F.b),Y		; F1 0F ; Subtract with carry ($0F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($FF03.w,X)		; FC 03 FF ; Jump to subroutine indirect indexed ($FF03.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpx #$FFFF.w		; E0 FF FF ; Compare #$FFFF.w with X register [Reads: X Index] [Flags: ZNC]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$FFE0.w		; 09 E0 FF ; Logical OR #$FFE0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $BE5D.w,Y		; BE 5D BE ; Load X register $BE5D.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	eor ($83.b,X)		; 41 83 ; Exclusive OR accumulator with memory ($83.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($02FD.w,X)		; 7C FD 02 ; Jump indirect indexed to ($02FD.w,X) [Reads: X Index] [Flow: jump]
	sta [$48.b]		; 87 48 ; Store accumulator (long) [$48.b] [Reads: Accumulator, Direct Page]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $80BE.w,Y		; BE BE 80 ; Load X register $80BE.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc $5483.w,X		; FD 83 54 ; Subtract with carry $5483.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $7DBA.w,X		; 7D BA 7D ; Add $7DBA.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $82, $C1, $3E		; 82 C1 3E ; Branch always long to $82, $C1, $3E [Flow: branch]
	lda $608740.l,X		; BF 40 87 60 ; Load long $608740.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $017D.w,X		; 7D 7D 01 ; Add $017D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $026C83.l,X		; BF 83 6C 02 ; Load long $026C83.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $1F20.w		; 0C 20 1F ; Test and set bits $1F20.w [Reads: Accumulator] [Flags: Z]
	eor ($2E.b),Y		; 51 2E ; Exclusive OR accumulator with memory ($2E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $7F36.w,Y		; 79 36 7F ; Add $7F36.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($7F.b),Y		; 11 7F ; OR accumulator with memory ($7F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $3B337F.l		; 2F 7F 33 3B ; AND accumulator with memory (long) $3B337F.l [Writes: Accumulator] [Flags: ZN]
	jsl $201400.l		; 22 00 14 20 ; Jump to subroutine long $201400.l [Writes: Stack Pointer] [Flow: call]
	adc ($79.b),Y		; 71 79 ; Add with carry ($79.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $3B4F5F.l,X		; 7F 5F 4F 3B ; Add long $3B4F5F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stz $9E.b,X		; 74 9E ; Store zero to $9E.b,X [Reads: X Index]
	jmp ($88FE.w)		; 6C FE 88 ; Jump indirect to ($88FE.w) [Flow: jump]
	inc $FEF4.w,X		; FE F4 FE ; Increment memory $FEF4.w,X [Reads: X Index] [Flags: ZN]
	cpy $22DC.w		; CC DC 22 ; Compare $22DC.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $04		; 42 04 ; Reserved instruction
	stx $FE9E.w		; 8E 9E FE ; Store X register to $FE9E.w [Reads: X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc ($DC.b)		; F2 DC ; Subtract with carry (indirect) ($DC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $2F7F.w		; 1C 7F 2F ; Test and reset bits $2F7F.w [Reads: Accumulator] [Flags: Z]
	eor [$05.b],Y		; 57 05 ; Exclusive OR accumulator with memory (long indexed) [$05.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sep #$00		; E2 00 ; Set processor status bits #$00 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	jsr ($7F00.w,X)		; FC 00 7F ; Jump to subroutine indirect indexed ($7F00.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $30, $7F		; 30 7F ; Branch if minus to $30, $7F [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $506300.l,X		; 1F 00 63 50 ; Logical OR long $506300.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sbc $674FFF.l,X		; FF FF 4F 67 ; Subtract with carry (long,X) $674FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $EC80F4.l,X		; 1F F4 80 EC ; Logical OR long $EC80F4.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cpx $78C8.w		; EC C8 78 ; Compare $78C8.w with X register [Reads: X Index] [Flags: ZNC]
	.db $50, $F0		; 50 F0 ; Branch if overflow clear to $50, $F0 [Flow: branch]
	.db $80, $F0		; 80 F0 ; Branch always to $80, $F0 [Flow: branch]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $34.b,X		; B4 34 ; Load Y register $34.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	.db $70, $F0		; 70 F0 ; Branch if overflow set to $70, $F0 [Flow: branch]
	cpx #$1480.w		; E0 80 14 ; Compare #$1480.w with X register [Reads: X Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $1700.w		; 1C 00 17 ; Test and reset bits $1700.w [Reads: Accumulator] [Flags: Z]
	tsb $2B.b		; 04 2B ; Test and set bits $2B.b [Reads: Accumulator] [Flags: Z]
	ora ($37.b,S),Y		; 13 37 ; OR accumulator (stack relative indirect indexed) ($37.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $0024.w		; 1C 24 00 ; Test and reset bits $0024.w [Reads: Accumulator] [Flags: Z]
	ora ($1F.b)		; 12 1F ; OR accumulator with memory (indirect) ($1F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $3F3C1B.l,X		; 1F 1B 3C 3F ; Logical OR long $3F3C1B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	trb $0000.w		; 1C 00 00 ; Test and reset bits $0000.w [Reads: Accumulator] [Flags: Z]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	.db $F0, $E0		; F0 E0 ; Branch if equal to $F0, $E0 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $90, $88		; 90 88 ; Branch if carry clear to $90, $88 [Flow: branch]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	trb $D0.b		; 14 D0 ; Test and reset bits $D0.b [Reads: Accumulator] [Flags: Z]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$37.b]		; 07 37 ; OR accumulator with memory (long) [$37.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($69.b,X)		; 01 69 ; Logical OR ($69.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $66		; 10 66 ; Branch if plus to $10, $66 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $08.b,X		; 34 08 ; Test bits $08.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsl $3F1400.l		; 22 00 14 3F ; Jump to subroutine long $3F1400.l [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	rol $7E5F.w,X		; 3E 5F 7E ; Rotate left $7E5F.w,X [Reads: X Index] [Flags: ZNC]
	bit $0018.w,X		; 3C 18 00 ; Test bits $0018.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	.db $10, $E0		; 10 E0 ; Branch if plus to $10, $E0 [Flow: branch]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cpx $18.b		; E4 18 ; Compare $18.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $10, $70		; 10 70 ; Branch if plus to $10, $70 [Flow: branch]
	jsl $100A00.l		; 22 00 0A 10 ; Jump to subroutine long $100A00.l [Writes: Stack Pointer] [Flow: call]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	jsr ($58FC.w,X)		; FC FC 58 ; Jump to subroutine indirect indexed ($58FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $49.b,S		; 03 49 ; OR accumulator with stack relative $49.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $050100.l		; 22 00 01 05 ; Jump to subroutine long $050100.l [Writes: Stack Pointer] [Flow: call]
	ora $24.b,S		; 03 24 ; OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($17.b,X)		; 01 17 ; Logical OR ($17.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $27FC.w		; 0C FC 27 ; Test and set bits $27FC.w [Reads: Accumulator] [Flags: Z]
	inc $9F1B.w,X		; FE 1B 9F ; Increment memory $9F1B.w,X [Reads: X Index] [Flags: ZN]
	ora $3F175F.l		; 0F 5F 17 3F ; OR accumulator with memory (long) $3F175F.l [Writes: Accumulator] [Flags: ZN]
	.db $30, $FF		; 30 FF ; Branch if minus to $30, $FF [Flow: branch]
	cpx #$00FF.w		; E0 FF 00 ; Compare #$00FF.w with X register [Reads: X Index] [Flags: ZNC]
	adc $FFFF7F.l,X		; 7F 7F FF FF ; Add long $FFFF7F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $831FCF.l		; AF CF 1F 83 ; Load long $831FCF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($01.b)		; 52 01 ; Exclusive OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	inc $FF0D.w,X		; FE 0D FF ; Increment memory $FF0D.w,X [Reads: X Index] [Flags: ZN]
	ora $0DFE.w		; 0D FE 0D ; Logical OR $0DFE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc ($0D.b)		; F2 0D ; Subtract with carry (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($0C.b,S),Y		; 73 0C ; Add with carry (stack relative indirect indexed) ($0C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $607000.l,X		; 3F 00 70 60 ; AND accumulator with memory (long,X) $607000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $0023.w		; 20 23 00 ; Jump to subroutine at $0023.w [Writes: Stack Pointer] [Flow: call]
	ora [$77.b]		; 07 77 ; OR accumulator with memory (long) [$77.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor $FB.b,X		; 55 FB ; Exclusive OR accumulator with memory $FB.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda #$7377.w		; A9 77 73 ; Load #$7377.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $015183.l		; 8F 83 51 01 ; Store accumulator (long) $015183.l [Reads: Accumulator]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0028FF.l,X		; FF FF 28 00 ; Subtract with carry (long,X) $0028FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0006.l,X		; FF 06 00 FF ; Subtract with carry (long,X) $FF0006.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FF00C0.l,X		; 3F C0 00 FF ; AND accumulator with memory (long,X) $FF00C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $010028.l,X		; FF 28 00 01 ; Subtract with carry (long,X) $010028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF2500.l,X		; FF 00 25 FF ; Subtract with carry (long,X) $FF2500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	sbc $0003FC.l,X		; FF FC 03 00 ; Subtract with carry (long,X) $0003FC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0028FF.l,X		; FF FF 28 00 ; Subtract with carry (long,X) $0028FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $480025.l,X		; FF 25 00 48 ; Subtract with carry (long,X) $480025.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $18.b		; 04 18 ; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	asl $0730.w		; 0E 30 07 ; Arithmetic shift left $0730.w [Flags: ZNC]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	.db $30, $01		; 30 01 ; Branch if minus to $30, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($00.b),Y		; 31 00 ; AND accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $80.b		; 05 80 ; Logical OR $80.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsr ($7C08.w,X)		; FC 08 7C ; Jump to subroutine indirect indexed ($7C08.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	jsl $180500.l		; 22 00 05 18 ; Jump to subroutine long $180500.l [Writes: Stack Pointer] [Flow: call]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	mvp $10,$28		; 44 28 10 ; Move block positive $10,$28 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $60,$00		; 44 00 60 ; Move block positive $60,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $30, $2B		; 30 2B ; Branch if minus to $30, $2B [Flow: branch]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $103C00.l,X		; 1F 00 3C 10 ; Logical OR long $103C00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sec		; 38 ; Set carry flag [Flags: C]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$0400.w		; 29 00 04 ; Logical AND #$0400.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $F000.w,X		; 7D 00 F0 ; Add $F000.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $00.b,X		; 36 00 ; Rotate left $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $0C,$00		; 44 00 0C ; Move block positive $0C,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $18.b		; 02 18 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $8000.w		; 20 00 80 ; Jump to subroutine at $8000.w [Writes: Stack Pointer] [Flow: call]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $001C00.l		; 0F 00 1C 00 ; OR accumulator with memory (long) $001C00.l [Writes: Accumulator] [Flags: ZN]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	jsr $002C.w		; 20 2C 00 ; Jump to subroutine at $002C.w [Writes: Stack Pointer] [Flow: call]
	ora $80.b,S		; 03 80 ; OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $44		; 80 44 ; Branch always to $80, $44 [Flow: branch]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4B.b		; 00 4B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $601C.w		; 20 1C 60 ; Jump to subroutine at $601C.w [Writes: Stack Pointer] [Flow: call]
	asl $78.b		; 06 78 ; Arithmetic shift left $78.b [Reads: Direct Page] [Flags: ZNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	stz $0D.b		; 64 0D ; Store zero to $0D.b
	rep #$06		; C2 06 ; Reset processor status bits #$06 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	cmp ($03.b,X)		; C1 03 ; Compare accumulator ($03.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	.db $80, $01		; 80 01 ; Branch always to $80, $01 [Flow: branch]
	.db $80, $2F		; 80 2F ; Branch always to $80, $2F [Flow: branch]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	ora $68.b,S		; 03 68 ; OR accumulator with stack relative $68.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $80, $BC		; 80 BC ; Branch always to $80, $BC [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $F8.b		; 04 F8 ; Test and set bits $F8.b [Reads: Accumulator] [Flags: Z]
	brk $4E.b		; 00 4E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $33		; 30 33 ; Branch if minus to $30, $33 [Flow: branch]
	tsb $030C.w		; 0C 0C 03 ; Test and set bits $030C.w [Reads: Accumulator] [Flags: Z]
	ora $2E.b,S		; 03 2E ; OR accumulator with stack relative $2E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $7E00.w,X		; 3C 00 7E ; Test bits $7E00.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	bit $183C.w,X		; 3C 3C 18 ; Test bits $183C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $24.b		; 06 24 ; Arithmetic shift left $24.b [Reads: Direct Page] [Flags: ZNC]
	.db $42, $24		; 42 24 ; Reserved instruction
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	cpy #$8002.w		; C0 02 80 ; Compare #$8002.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $800000.l		; 22 00 00 80 ; Jump to subroutine long $800000.l [Writes: Stack Pointer] [Flow: call]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $7C.b		; 06 7C ; Arithmetic shift left $7C.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jmp ($F818.w,X)		; 7C 18 F8 ; Jump indirect indexed to ($F818.w,X) [Reads: X Index] [Flow: jump]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $44.b		; 04 44 ; Test and set bits $44.b [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $70, $29		; 70 29 ; Branch if overflow set to $70, $29 [Flow: branch]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $301F00.l,X		; 1F 00 1F 30 ; Logical OR long $301F00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $FE.b,S		; 43 FE ; Exclusive OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $1C02.w		; 0C 02 1C ; Test and set bits $1C02.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZNC]
	trb $02.b		; 14 02 ; Test and reset bits $02.b [Reads: Accumulator] [Flags: Z]
	cop $14.b		; 02 14 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $3F00.w,X		; 1E 00 3F ; Arithmetic shift left $3F00.w,X [Reads: X Index] [Flags: ZNC]
	asl $3E.b,X		; 16 3E ; Arithmetic shift left $3E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $251C.w		; 1C 1C 25 ; Test and reset bits $251C.w [Reads: Accumulator] [Flags: Z]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $0000.w		; 1C 00 00 ; Test and reset bits $0000.w [Reads: Accumulator] [Flags: Z]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $44.b,S		; 03 44 ; OR accumulator with stack relative $44.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $D7.b,S		; 83 D7 ; Store accumulator (stack relative) $D7.b,S [Reads: Accumulator, Stack Pointer]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	ora $60.b,S		; 03 60 ; OR accumulator with stack relative $60.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx #$C0C0.w		; E0 C0 C0 ; Compare #$C0C0.w with X register [Reads: X Index] [Flags: ZNC]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $5020.w		; 0C 20 50 ; Test and set bits $5020.w [Reads: Accumulator] [Flags: Z]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	jsr $00C0.w		; 20 C0 00 ; Jump to subroutine at $00C0.w [Writes: Stack Pointer] [Flow: call]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $07		; 30 07 ; Branch if minus to $30, $07 [Flow: branch]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($00.b)		; 32 00 ; AND accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $65.b		; 85 65 ; Store accumulator to $65.b [Reads: Accumulator]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sta $72.b,S		; 83 72 ; Store accumulator (stack relative) $72.b,S [Reads: Accumulator, Stack Pointer]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $30, $22		; 30 22 ; Branch if minus to $30, $22 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsl $800000.l		; 22 00 00 80 ; Jump to subroutine long $800000.l [Writes: Stack Pointer] [Flow: call]
	and ($00.b),Y		; 31 00 ; AND accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr ($F858.w,X)		; FC 58 F8 ; Jump to subroutine indirect indexed ($F858.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $18.b		; 02 18 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $84.b		; 04 84 ; Test and set bits $84.b [Reads: Accumulator] [Flags: Z]
	sta $C2.b,S		; 83 C2 ; Store accumulator (stack relative) $C2.b,S [Reads: Accumulator, Stack Pointer]
	ora ($45.b,X)		; 01 45 ; Logical OR ($45.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	asl $1C.b		; 06 1C ; Arithmetic shift left $1C.b [Reads: Direct Page] [Flags: ZNC]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $3E7F.w		; 1C 7F 3E ; Test and reset bits $3E7F.w [Reads: Accumulator] [Flags: Z]
	rol $0026.w,X		; 3E 26 00 ; Rotate left $0026.w,X [Reads: X Index] [Flags: ZNC]
	ora $22.b		; 05 22 ; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($3E.b,X)		; 41 3E ; Exclusive OR accumulator with memory ($3E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $24		; 80 24 ; Branch always to $80, $24 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $2F		; 80 2F ; Branch always to $80, $2F [Flow: branch]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp.w [$8428]		; DC 28 84 ; Jump long indirect [$8428] [Flow: jump]
	lda ($01.b)		; B2 01 ; Load accumulator (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $70, $27		; 70 27 ; Branch if overflow set to $70, $27 [Flow: branch]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $3FC000.l,X		; 7F 00 C0 3F ; Add long $3FC000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $830032.l,X		; 7F 32 00 83 ; Add long $830032.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $00.b		; 64 00 ; Store zero to $00.b
	cop $3C.b		; 02 3C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	jsr ($5F83.w,X)		; FC 83 5F ; Jump to subroutine indirect indexed ($5F83.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsl $480104.l		; 22 04 01 48 ; Jump to subroutine long $480104.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $83		; 30 83 ; Branch if minus to $30, $83 [Flow: branch]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	eor $A0.b,S		; 43 A0 ; Exclusive OR accumulator with stack relative $A0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora [$D0.b]		; 07 D0 ; OR accumulator with memory (long) [$D0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $2050.w		; 20 50 20 ; Jump to subroutine at $2050.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $007C00.l		; 0F 00 7C 00 ; OR accumulator with memory (long) $007C00.l [Writes: Accumulator] [Flags: ZN]
	.db $F0, $50		; F0 50 ; Branch if equal to $F0, $50 [Flow: branch]
	jsr $2058.w		; 20 58 20 ; Jump to subroutine at $2058.w [Writes: Stack Pointer] [Flow: call]
	jmp ($3610.w)		; 6C 10 36 ; Jump indirect to ($3610.w) [Flow: jump]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tsb $28.b		; 04 28 ; Test and set bits $28.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $38		; 90 38 ; Branch if carry clear to $90, $38 [Flow: branch]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $98.b,S		; 83 98 ; Store accumulator (stack relative) $98.b,S [Reads: Accumulator, Stack Pointer]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clv		; B8 ; Clear overflow flag [Flags: V]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	dec $3F30.w		; CE 30 3F ; Decrement $3F30.w [Flags: ZN]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$18.b]		; 07 18 ; OR accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $32.b		; 05 32 ; Logical OR $32.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $21.b		; 06 21 ; Arithmetic shift left $21.b [Reads: Direct Page] [Flags: ZNC]
	cop $41.b		; 02 41 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $40.b,S		; 03 40 ; OR accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $01.b,S		; 43 01 ; Exclusive OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $80, $2D		; 80 2D ; Branch always to $80, $2D [Flow: branch]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	eor $40.b,S		; 43 40 ; Exclusive OR accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $80, $43		; 80 43 ; Branch always to $80, $43 [Flow: branch]
	ldy #$2740.w		; A0 40 27 ; Load #$2740.w into Y register [Writes: Y Index] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $180017.l		; 2F 17 00 18 ; AND accumulator with memory (long) $180017.l [Writes: Accumulator] [Flags: ZN]
	ora [$21.b]		; 07 21 ; OR accumulator with memory (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0A15.w,X		; 1E 15 0A ; Arithmetic shift left $0A15.w,X [Reads: X Index] [Flags: ZNC]
	asl $1B05.w,X		; 1E 05 1B ; Arithmetic shift left $1B05.w,X [Reads: X Index] [Flags: ZNC]
	asl $060B.w		; 0E 0B 06 ; Arithmetic shift left $060B.w [Flags: ZNC]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Accumulator, Direct Page]
	ora [$18.b]		; 07 18 ; OR accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $1E15.w		; 20 15 1E ; Jump to subroutine at $1E15.w [Writes: Stack Pointer] [Flow: call]
	ora $4C060F.l,X		; 1F 0F 06 4C ; Logical OR long $4C060F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $9E.b		; 00 9E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	cpx #$C03C.w		; E0 3C C0 ; Compare #$C03C.w with X register [Reads: X Index] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	jsr $3876.w		; 20 76 38 ; Jump to subroutine at $3876.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $2A		; D0 2A ; Branch if not equal to $D0, $2A [Flow: branch]
	trb $FC32.w		; 1C 32 FC ; Test and reset bits $FC32.w [Reads: Accumulator] [Flags: Z]
	inc $C097.w,X		; FE 97 C0 ; Increment memory $C097.w,X [Reads: X Index] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sty $57.b		; 84 57 ; Store Y register to $57.b [Reads: Y Index]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sec		; 38 ; Set carry flag [Flags: C]
	cpy #$F00C.w		; C0 0C F0 ; Compare #$F00C.w with Y register [Reads: Y Index] [Flags: ZNC]
	and ($C0.b)		; 32 C0 ; AND accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sty $E5.b		; 84 E5 ; Store Y register to $E5.b [Reads: Y Index]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy #$0830.w		; C0 30 08 ; Compare #$0830.w with Y register [Reads: Y Index] [Flags: ZNC]
	bit $FEFC.w,X		; 3C FC FE ; Test bits $FEFC.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sta $84.b,S		; 83 84 ; Store accumulator (stack relative) $84.b,S [Reads: Accumulator, Stack Pointer]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jmp ($0046.w,X)		; 7C 46 00 ; Jump indirect indexed to ($0046.w,X) [Reads: X Index] [Flow: jump]
	bit $7E06.w,X		; 3C 06 7E ; Test bits $7E06.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $44.b		; 24 44 ; Test bits $44.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsl $420124.l		; 22 24 01 42 ; Jump to subroutine long $420124.l [Writes: Stack Pointer] [Flow: call]
	bit $2A83.w,X		; 3C 83 2A ; Test bits $2A83.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	tsb $16.b		; 04 16 ; Test and set bits $16.b [Reads: Accumulator] [Flags: Z]
	and $001F00.l,X		; 3F 00 1F 00 ; AND accumulator with memory (long,X) $001F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $7E00.w,X		; 3E 00 7E ; Rotate left $7E00.w,X [Reads: X Index] [Flags: ZNC]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $39		; 42 39 ; Reserved instruction
	ora $4E22.w,Y		; 19 22 4E ; OR accumulator with memory $4E22.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($3E.b,X)		; 41 3E ; Exclusive OR accumulator with memory ($3E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $7F00.w,X		; 3E 00 7F ; Rotate left $7F00.w,X [Reads: X Index] [Flags: ZNC]
	mvp $7E,$00		; 44 00 7E ; Move block positive $7E,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $3F.b,S		; 43 3F ; Exclusive OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $0E04.w		; 2C 04 0E ; Test bits $0E04.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	rol $4E41.w,X		; 3E 41 4E ; Rotate left $4E41.w,X [Reads: X Index] [Flags: ZNC]
	.db $42, $39		; 42 39 ; Reserved instruction
	and $3C42.w,Y		; 39 42 3C ; AND accumulator with memory $3C42.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $3E00.w		; 1C 00 3E ; Test and reset bits $3E00.w [Reads: Accumulator] [Flags: Z]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $7F,$00		; 44 00 7F ; Move block positive $7F,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $2213.w		; 1C 13 22 ; Test and reset bits $2213.w [Reads: Accumulator] [Flags: Z]
	jmp $4942.w		; 4C 42 49 ; Jump to $4942.w [Flow: jump]
	eor #$1C22.w		; 49 22 1C ; Exclusive OR #$1C22.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	asl $FE04.w		; 0E 04 FE ; Arithmetic shift left $FE04.w [Flags: ZNC]
	tsb $EC1E.w		; 0C 1E EC ; Test and set bits $EC1E.w [Reads: Accumulator] [Flags: Z]
	inc $0E0C.w,X		; FE 0C 0E ; Increment memory $0E0C.w,X [Reads: X Index] [Flags: ZN]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	jsl $040100.l		; 22 00 01 04 ; Jump to subroutine long $040100.l [Writes: Stack Pointer] [Flow: call]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jsl $0A0802.l		; 22 02 08 0A ; Jump to subroutine long $0A0802.l [Writes: Stack Pointer] [Flow: call]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	bit $08.b,X		; 34 08 ; Test bits $08.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	asl $08.b,X		; 16 08 ; Arithmetic shift left $08.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $FE8402.l,X		; 1F 02 84 FE ; Logical OR long $FE8402.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($25.b,X)		; 01 25 ; Logical OR ($25.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $0B.b		; 84 0B ; Store Y register to $0B.b [Reads: Y Index]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0602.w		; 0D 02 06 ; Logical OR $0602.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($83.b,X)		; 01 83 ; Logical OR ($83.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b)		; 12 02 ; OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $02.b		; 24 02 ; Test bits $02.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($A0.b,X)		; 01 A0 ; Logical OR ($A0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	sta $2F.b,S		; 83 2F ; Store accumulator (stack relative) $2F.b,S [Reads: Accumulator, Stack Pointer]
	cop $24.b		; 02 24 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $1022.w		; 20 22 10 ; Jump to subroutine at $1022.w [Writes: Stack Pointer] [Flow: call]
	sta $3C.b,S		; 83 3C ; Store accumulator (stack relative) $3C.b,S [Reads: Accumulator, Stack Pointer]
	cop $84.b		; 02 84 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($3201.w)		; 6C 01 32 ; Jump indirect to ($3201.w) [Flow: jump]
	brk $8A.b		; 00 8A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $480104.l		; 22 04 01 48 ; Jump to subroutine long $480104.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $39		; 30 39 ; Branch if minus to $30, $39 [Flow: branch]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	jsr $8C86.w		; 20 86 8C ; Jump to subroutine at $8C86.w [Writes: Stack Pointer] [Flow: call]
	cop $25.b		; 02 25 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	cop $06.b		; 02 06 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $37.b		; 04 37 ; Test and set bits $37.b [Reads: Accumulator] [Flags: Z]
	tsb $182D.w		; 0C 2D 18 ; Test and set bits $182D.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $183D1F.l		; 0F 1F 3D 18 ; OR accumulator with memory (long) $183D1F.l [Writes: Accumulator] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$F1.b],Y		; 17 F1 ; OR accumulator with memory (long indexed) [$F1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $60AE.w		; CE AE 60 ; Decrement $60AE.w [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $EC		; 10 EC ; Branch if plus to $10, $EC [Flow: branch]
	.db $50, $6A		; 50 6A ; Branch if overflow clear to $50, $6A [Flow: branch]
	bit $2C.b,X		; 34 2C ; Test bits $2C.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $F8F8.w,X		; DE F8 F8 ; Decrement memory $F8F8.w,X [Reads: X Index] [Flags: ZN]
	jsr ($3C7E.w,X)		; FC 7E 3C ; Jump to subroutine indirect indexed ($3C7E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $10, $86		; 10 86 ; Branch if plus to $10, $86 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora $28.b		; 05 28 ; Logical OR $28.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $50, $05		; 50 05 ; Branch if overflow clear to $50, $05 [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta ($58.b),Y		; 91 58 ; Store accumulator ($58.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($6B84.w,X)		; FC 84 6B ; Jump to subroutine indirect indexed ($6B84.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $85.b		; 05 85 ; Logical OR $85.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	rol $1F00.w,X		; 3E 00 1F ; Rotate left $1F00.w,X [Reads: X Index] [Flags: ZNC]
	sta $59.b,S		; 83 59 ; Store accumulator (stack relative) $59.b,S [Reads: Accumulator, Stack Pointer]
	tsb $43.b		; 04 43 ; Test and set bits $43.b [Reads: Accumulator] [Flags: Z]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $42, $39		; 42 39 ; Reserved instruction
	jsl $423919.l		; 22 19 39 42 ; Jump to subroutine long $423919.l [Writes: Stack Pointer] [Flow: call]
	bit $000C.w,X		; 3C 0C 00 ; Test bits $000C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	asl $3E00.w,X		; 1E 00 3E ; Arithmetic shift left $3E00.w,X [Reads: X Index] [Flags: ZNC]
	mvp $7E,$00		; 44 00 7E ; Move block positive $7E,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $7F.b		; 02 7F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $1206.w		; 0C 06 12 ; Test and set bits $1206.w [Reads: Accumulator] [Flags: Z]
	jsl $415252.l		; 22 52 52 41 ; Jump to subroutine long $415252.l [Writes: Stack Pointer] [Flow: call]
	and ($0C.b)		; 32 0C ; AND accumulator with memory (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $50.b,S		; 83 50 ; Store accumulator (stack relative) $50.b,S [Reads: Accumulator, Stack Pointer]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	and $460F00.l,X		; 3F 00 0F 46 ; AND accumulator with memory (long,X) $460F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1C.b		; 05 1C ; Logical OR $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($39.b,X)		; 41 39 ; Exclusive OR accumulator with memory ($39.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$1222.w		; 09 22 12 ; Logical OR #$1222.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $68.b,S		; 83 68 ; Store accumulator (stack relative) $68.b,S [Reads: Accumulator, Stack Pointer]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	adc $443E00.l,X		; 7F 00 3E 44 ; Add long $443E00.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $2243.w		; 1C 43 22 ; Test and reset bits $2243.w [Reads: Accumulator] [Flags: Z]
	eor #$4902.w		; 49 02 49 ; Exclusive OR #$4902.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $02FF1C.l		; 22 1C FF 02 ; Jump to subroutine long $02FF1C.l [Writes: Stack Pointer] [Flow: call]
	trb $3E00.w		; 1C 00 3E ; Test and reset bits $3E00.w [Reads: Accumulator] [Flags: Z]
	mvp $7F,$00		; 44 00 7F ; Move block positive $7F,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $3F.b		; 04 3F ; Test and set bits $3F.b [Reads: Accumulator] [Flags: Z]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $2206.w		; 1C 06 22 ; Test and reset bits $2206.w [Reads: Accumulator] [Flags: Z]
	eor #$2149.w		; 49 49 21 ; Exclusive OR #$2149.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $1C22.w,Y		; 19 22 1C ; OR accumulator with memory $1C22.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($00.b)		; 32 00 ; AND accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $22		; 10 22 ; Branch if plus to $10, $22 [Flow: branch]
	.db $90, $31		; 90 31 ; Branch if carry clear to $90, $31 [Flow: branch]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $2E12.w		; 0C 12 2E ; Test and set bits $2E12.w [Reads: Accumulator] [Flags: Z]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and ($00.b)		; 32 00 ; AND accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $22		; 10 22 ; Branch if plus to $10, $22 [Flow: branch]
	.db $90, $27		; 90 27 ; Branch if carry clear to $90, $27 [Flow: branch]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $23.b,S		; 03 23 ; OR accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $22.b		; 04 22 ; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
	ora $070027.l		; 0F 27 00 07 ; OR accumulator with memory (long) $070027.l [Writes: Accumulator] [Flags: ZN]
	jsr $D000.w		; 20 00 D0 ; Jump to subroutine at $D000.w [Writes: Stack Pointer] [Flow: call]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$0023.w		; C0 23 00 ; Compare #$0023.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $0027F0.l		; 22 F0 27 00 ; Jump to subroutine long $0027F0.l [Writes: Stack Pointer] [Flow: call]
	sta $68.b,S		; 83 68 ; Store accumulator (stack relative) $68.b,S [Reads: Accumulator, Stack Pointer]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0B00.w		; 0C 00 0B ; Test and set bits $0B00.w [Reads: Accumulator] [Flags: Z]
	tsb $23.b		; 04 23 ; Test and set bits $23.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $22.b		; 04 22 ; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
	ora $830027.l		; 0F 27 00 83 ; OR accumulator with memory (long) $830027.l [Writes: Accumulator] [Flags: ZN]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	ora $30.b,S		; 03 30 ; OR accumulator with stack relative $30.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0023.w		; 20 23 00 ; Jump to subroutine at $0023.w [Writes: Stack Pointer] [Flow: call]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $0027F0.l		; 22 F0 27 00 ; Jump to subroutine long $0027F0.l [Writes: Stack Pointer] [Flow: call]
	asl $03.b		; 06 03 ; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $03.b,S		; 23 03 ; AND accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and #$0400.w		; 29 00 04 ; Logical AND #$0400.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $80.b		; 02 80 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$25C0.w		; C0 C0 25 ; Compare #$25C0.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$83.b]		; 07 83 ; OR accumulator with memory (long) [$83.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $43.b,S		; 03 43 ; OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b],Y		; 17 07 ; OR accumulator with memory (long indexed) [$07.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $070400.l		; 22 00 04 07 ; Jump to subroutine long $070400.l [Writes: Stack Pointer] [Flow: call]
	ora $1F1F0F.l		; 0F 0F 1F 1F ; OR accumulator with memory (long) $1F1F0F.l [Writes: Accumulator] [Flags: ZN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $F0.b		; 05 F0 ; Logical OR $F0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $F0E8.w		; 20 E8 F0 ; Jump to subroutine at $F0E8.w [Writes: Stack Pointer] [Flow: call]
	eor $F4.b,S		; 43 F4 ; Exclusive OR accumulator with stack relative $F4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsl $F00400.l		; 22 00 04 F0 ; Jump to subroutine long $F00400.l [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($25FC.w,X)		; FC FC 25 ; Jump to subroutine indirect indexed ($25FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $001000.l		; 0F 00 10 00 ; OR accumulator with memory (long) $001000.l [Writes: Accumulator] [Flags: ZN]
	ora [$08.b],Y		; 17 08 ; OR accumulator with memory (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $35.b		; 05 35 ; Logical OR $35.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jsl $0F0400.l		; 22 00 04 0F ; Jump to subroutine long $0F0400.l [Writes: Stack Pointer] [Flow: call]
	ora $3F3F1F.l,X		; 1F 1F 3F 3F ; Logical OR long $3F3F1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $40A8.w		; 20 A8 40 ; Jump to subroutine at $40A8.w [Writes: Stack Pointer] [Flow: call]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ldy #$0022.w		; A0 22 00 ; Load #$0022.w into Y register [Writes: Y Index] [Flags: ZN]
	tsb $E0.b		; 04 E0 ; Test and set bits $E0.b [Reads: Accumulator] [Flags: Z]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $C8.b,S		; 83 C8 ; Store accumulator (stack relative) $C8.b,S [Reads: Accumulator, Stack Pointer]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $03.b		; 24 03 ; Test bits $03.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $80.b		; 02 80 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $C0,$80		; 44 80 C0 ; Move block positive $C0,$80 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $1C02C0.l		; 22 C0 02 1C ; Jump to subroutine long $1C02C0.l [Writes: Stack Pointer] [Flow: call]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $2200.w		; 1C 00 22 ; Test and reset bits $2200.w [Reads: Accumulator] [Flags: Z]
	and $49.b,S		; 23 49 ; AND accumulator with stack relative $49.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $002F.w		; 1C 2F 00 ; Test and reset bits $002F.w [Reads: Accumulator] [Flags: Z]
	ora ($D0.b,X)		; 01 D0 ; Logical OR ($D0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $90, $22		; 90 22 ; Branch if carry clear to $90, $22 [Flow: branch]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	.db $70, $30		; 70 30 ; Branch if overflow set to $70, $30 [Flow: branch]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	asl $3E.b		; 06 3E ; Arithmetic shift left $3E.b [Reads: Direct Page] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol $1C08.w,X		; 3E 08 1C ; Rotate left $1C08.w,X [Reads: X Index] [Flags: ZNC]
	asl $20.b,X		; 16 20 ; Arithmetic shift left $20.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	ora ($D0.b,X)		; 01 D0 ; Logical OR ($D0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $90, $22		; 90 22 ; Branch if carry clear to $90, $22 [Flow: branch]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	.db $70, $30		; 70 30 ; Branch if overflow set to $70, $30 [Flow: branch]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $030704.l		; 0F 04 07 03 ; OR accumulator with memory (long) $030704.l [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $50, $C0		; 50 C0 ; Branch if overflow clear to $50, $C0 [Flow: branch]
	tsb $A0.b		; 04 A0 ; Test and set bits $A0.b [Reads: Accumulator] [Flags: Z]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsl $E000F0.l		; 22 F0 00 E0 ; Jump to subroutine long $E000F0.l [Writes: Stack Pointer] [Flow: call]
	sta $76.b,S		; 83 76 ; Store accumulator (stack relative) $76.b,S [Reads: Accumulator, Stack Pointer]
	ora ($45.b,X)		; 01 45 ; Logical OR ($45.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$04.b]		; 07 04 ; OR accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01F384.l		; 0F 84 F3 01 ; OR accumulator with memory (long) $01F384.l [Writes: Accumulator] [Flags: ZN]
	eor $10.b		; 45 10 ; Exclusive OR $10.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx #$2004.w		; E0 04 20 ; Compare #$2004.w with X register [Reads: X Index] [Flags: ZNC]
	cpy #$8040.w		; C0 40 80 ; Compare #$8040.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $80, $24		; 80 24 ; Branch always to $80, $24 [Flow: branch]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $83		; F0 83 ; Branch if equal to $F0, $83 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cop $47.b		; 02 47 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $24.b,S		; 03 24 ; OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $80.b,S		; 03 80 ; OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	and $C0.b,S		; 23 C0 ; AND accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $150500.l		; 22 00 05 15 ; Jump to subroutine long $150500.l [Writes: Stack Pointer] [Flow: call]
	ora $0614.w		; 0D 14 06 ; Logical OR $0614.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $07.b,X		; 16 07 ; Arithmetic shift left $07.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $0B.b,S		; 43 0B ; Exclusive OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01F183.l,X		; 1F 83 F1 01 ; Logical OR long $01F183.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $D400.w		; 0D 00 D4 ; Logical OR $D400.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $94		; D0 94 ; Branch if not equal to $D0, $94 [Flow: branch]
	.db $B0, $34		; B0 34 ; Branch if carry set to $B0, $34 [Flow: branch]
	.db $70, $68		; 70 68 ; Branch if overflow set to $70, $68 [Flow: branch]
	cpx #$E0E8.w		; E0 E8 E0 ; Compare #$E0E8.w with X register [Reads: X Index] [Flags: ZNC]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	cpx #$0022.w		; E0 22 00 ; Compare #$0022.w with X register [Reads: X Index] [Flags: ZNC]
	jsl $F811FC.l		; 22 FC 11 F8 ; Jump to subroutine long $F811FC.l [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $E0		; F0 E0 ; Branch if equal to $F0, $E0 [Flow: branch]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $35.b,X		; 15 35 ; OR accumulator with memory $35.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $0D.b		; 05 0D ; Logical OR $0D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $3F2200.l		; 22 00 22 3F ; Jump to subroutine long $3F2200.l [Writes: Stack Pointer] [Flow: call]
	ora ($1F.b),Y		; 11 1F ; OR accumulator with memory ($1F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $00070F.l,X		; 1F 0F 07 00 ; Logical OR long $00070F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	.db $50, $58		; 50 58 ; Branch if overflow clear to $50, $58 [Flow: branch]
	ldy #$50A8.w		; A0 A8 50 ; Load #$50A8.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $50, $A0		; 50 A0 ; Branch if overflow clear to $50, $A0 [Flow: branch]
	.db $B0, $40		; B0 40 ; Branch if carry set to $B0, $40 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	jsl $F82200.l		; 22 00 22 F8 ; Jump to subroutine long $F82200.l [Writes: Stack Pointer] [Flow: call]
	sta $09.b,S		; 83 09 ; Store accumulator (stack relative) $09.b,S [Reads: Accumulator, Stack Pointer]
	cop $47.b		; 02 47 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $02,$01		; 44 01 02 ; Move block positive $02,$01 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $032600.l		; 22 00 26 03 ; Jump to subroutine long $032600.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$C0.b]		; 47 C0 ; Exclusive OR accumulator with memory (long) [$C0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $C0.b		; 24 C0 ; Test bits $C0.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($80.b,S),Y		; 13 80 ; OR accumulator (stack relative indirect indexed) ($80.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	eor $184000.l		; 4F 00 40 18 ; Exclusive OR accumulator with memory (long) $184000.l [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ora [$5F.b]		; 07 5F ; OR accumulator with memory (long) [$5F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $0B580F.l,X		; 5F 0F 58 0B ; Exclusive OR accumulator with memory (long,X) $0B580F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ora $7F2630.l		; 0F 30 26 7F ; OR accumulator with memory (long) $7F2630.l [Writes: Accumulator] [Flags: ZN]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $34		; 30 34 ; Branch if minus to $30, $34 [Flow: branch]
	cpy #$20F4.w		; C0 F4 20 ; Compare #$20F4.w with Y register [Reads: Y Index] [Flags: ZNC]
	pei ($C0.b)		; D4 C0 ; Push effective indirect address ($C0.b) [Reads: Direct Page] [Writes: Stack Pointer]
	bit $A0.b,X		; 34 A0 ; Test bits $A0.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	stz $60.b,X		; 74 60 ; Store zero to $60.b,X [Reads: X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	rol $FC.b		; 26 FC ; Rotate left $FC.b [Reads: Direct Page] [Flags: ZNC]
	ora #$0000.w		; 09 00 00 ; Logical OR #$0000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $37.b		; 00 37 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $3F.b		; 25 3F ; Logical AND $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F2.b		; 00 F2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	mvn $A8,$56		; 54 56 A8 ; Move block negative $A8,$56 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	mvn $0C,$00		; 54 00 0C ; Move block negative $0C,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and $FE.b		; 25 FE ; Logical AND $FE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $44.b,S		; 03 44 ; OR accumulator with stack relative $44.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($25.b,X)		; 01 25 ; Logical OR ($25.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $85.b,S		; 03 85 ; OR accumulator with stack relative $85.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx #$4300.w		; E0 00 43 ; Compare #$4300.w with X register [Reads: X Index] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$7F83.w		; C0 83 7F ; Compare #$7F83.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $25		; 80 25 ; Branch always to $80, $25 [Flow: branch]
	cpy #$002C.w		; C0 2C 00 ; Compare #$002C.w with Y register [Reads: Y Index] [Flags: ZNC]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $0300.w		; 2C 00 03 ; Test bits $0300.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	jsr $7000.w		; 20 00 70 ; Jump to subroutine at $7000.w [Writes: Stack Pointer] [Flow: call]
	jsr $0025.w		; 20 25 00 ; Jump to subroutine at $0025.w [Writes: Stack Pointer] [Flow: call]
	ora $F020.w		; 0D 20 F0 ; Logical OR $F020.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $3F00.w		; 1C 00 3F ; Test and reset bits $3F00.w [Reads: Accumulator] [Flags: Z]
	trb $3F6B.w		; 1C 6B 3F ; Test and reset bits $3F6B.w [Reads: Accumulator] [Flags: Z]
	adc ($1F.b,X)		; 61 1F ; Add with carry ($1F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc [$1C.b]		; 67 1C ; Add with carry (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $34.b,S		; 43 34 ; Exclusive OR accumulator with stack relative $34.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $7F3F.w		; 1C 3F 7F ; Test and reset bits $7F3F.w [Reads: Accumulator] [Flags: Z]
	eor $2C2C5F.l,X		; 5F 5F 2C 2C ; Exclusive OR accumulator with memory (long,X) $2C2C5F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $E7.b,S		; 83 E7 ; Store accumulator (stack relative) $E7.b,S [Reads: Accumulator, Stack Pointer]
	cop $83.b		; 02 83 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $800300.l		; 22 00 03 80 ; Jump to subroutine long $800300.l [Writes: Stack Pointer] [Flow: call]
	cpy #$80C0.w		; C0 C0 80 ; Compare #$80C0.w with Y register [Reads: Y Index] [Flags: ZNC]
	jsl $7E0A00.l		; 22 00 0A 7E ; Jump to subroutine long $7E0A00.l [Writes: Stack Pointer] [Flow: call]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $0000.w		; 2E 00 00 ; Rotate left $0000.w [Flags: ZNC]
	bit $F584.w,X		; 3C 84 F5 ; Test bits $F584.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $0032.w,X		; 3C 32 00 ; Test bits $0032.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	tsb $1C.b		; 04 1C ; Test and set bits $1C.b [Reads: Accumulator] [Flags: Z]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $24		; 10 24 ; Branch if plus to $10, $24 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $23.b		; 04 23 ; Test and set bits $23.b [Reads: Accumulator] [Flags: Z]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $07.b,S		; 23 07 ; AND accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$1F.b]		; 07 1F ; OR accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $1701.w,X		; 1E 01 17 ; Arithmetic shift left $1701.w,X [Reads: X Index] [Flags: ZNC]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $190C.w,X		; 1D 0C 19 ; OR accumulator with memory $190C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $0807.w		; 0C 07 08 ; Test and set bits $0807.w [Reads: Accumulator] [Flags: Z]
	ora ($1B.b)		; 12 1B ; OR accumulator with memory (indirect) ($1B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1B16.w,X		; 1D 16 1B ; OR accumulator with memory $1B16.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0800F8.l,X		; 1F F8 00 08 ; Logical OR long $0800F8.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $38		; 80 38 ; Branch always to $80, $38 [Flow: branch]
	cpy #$40B8.w		; C0 B8 40 ; Compare #$40B8.w with Y register [Reads: Y Index] [Flags: ZNC]
	mvp $00,$F8		; 44 F8 00 ; Move block positive $00,$F8 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora ($F8.b,S),Y		; 13 F8 ; OR accumulator (stack relative indirect indexed) ($F8.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	asl $0D59.w		; 0E 59 0D ; Arithmetic shift left $0D59.w [Flags: ZNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rol $1707.w		; 2E 07 17 ; Rotate left $1707.w [Flags: ZNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $7F2200.l		; 22 00 22 7F ; Jump to subroutine long $7F2200.l [Writes: Stack Pointer] [Flow: call]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $B4.b,S		; 83 B4 ; Store accumulator (stack relative) $B4.b,S [Reads: Accumulator, Stack Pointer]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pea $B4E0.w		; F4 E0 B4 ; Push absolute address $B4E0.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	cpx #$E034.w		; E0 34 E0 ; Compare #$E034.w with X register [Reads: X Index] [Flags: ZNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cpy #$00D0.w		; C0 D0 00 ; Compare #$00D0.w with Y register [Reads: Y Index] [Flags: ZNC]
	jsr $C000.w		; 20 00 C0 ; Jump to subroutine at $C000.w [Writes: Stack Pointer] [Flow: call]
	jsl $FC2200.l		; 22 00 22 FC ; Jump to subroutine long $FC2200.l [Writes: Stack Pointer] [Flow: call]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $CC.b,S		; 83 CC ; Store accumulator (stack relative) $CC.b,S [Reads: Accumulator, Stack Pointer]
	cop $0A.b		; 02 0A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $0A.b,X		; 35 0A ; Logical AND $0A.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $15.b		; 05 15 ; Logical OR $15.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sty $B2.b		; 84 B2 ; Store Y register to $B2.b [Reads: Y Index]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $56.b		; 00 56 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldy $5450.w		; AC 50 54 ; Load $5450.w into Y register [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sta $BC.b,S		; 83 BC ; Store accumulator (stack relative) $BC.b,S [Reads: Accumulator, Stack Pointer]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$0024.w		; E0 24 00 ; Compare #$0024.w with X register [Reads: X Index] [Flags: ZNC]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $A9.b		; 84 A9 ; Store Y register to $A9.b [Reads: Y Index]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $4C.b		; 00 4C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $032600.l		; 22 00 26 03 ; Jump to subroutine long $032600.l [Writes: Stack Pointer] [Flow: call]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$8044.w		; C0 44 80 ; Compare #$8044.w with Y register [Reads: Y Index] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor $C0.b,S		; 43 C0 ; Exclusive OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $24		; 80 24 ; Branch always to $80, $24 [Flow: branch]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$8000.w		; C0 00 80 ; Compare #$8000.w with Y register [Reads: Y Index] [Flags: ZNC]
	jsl $010200.l		; 22 00 02 01 ; Jump to subroutine long $010200.l [Writes: Stack Pointer] [Flow: call]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor $03.b,S		; 43 03 ; Exclusive OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $300C00.l		; 22 00 0C 30 ; Jump to subroutine long $300C00.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $28		; 80 28 ; Branch always to $80, $28 [Flow: branch]
	.db $D0, $6C		; D0 6C ; Branch if not equal to $D0, $6C [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	mvp $FA,$B8		; 44 B8 FA ; Move block positive $FA,$B8 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cpy $FE.b		; C4 FE ; Compare $FE.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	bit $223C.w,X		; 3C 3C 22 ; Test bits $223C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $38		; 70 38 ; Branch if overflow set to $70, $38 [Flow: branch]
	jsr ($C6BC.w,X)		; FC BC C6 ; Jump to subroutine indirect indexed ($C6BC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $003C.w,X		; FE 3C 00 ; Increment memory $003C.w,X [Reads: X Index] [Flags: ZN]
	asl $0D.b,X		; 16 0D ; Arithmetic shift left $0D.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tsb $002C.w		; 0C 2C 00 ; Test and set bits $002C.w [Reads: Accumulator] [Flags: Z]
	ora ($1E.b,X)		; 01 1E ; Logical OR ($1E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $0026.w		; 0C 26 00 ; Test and set bits $0026.w [Reads: Accumulator] [Flags: Z]
	cop $C0.b		; 02 C0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,X		; 35 00 ; Logical AND $00.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0C.b,X		; 15 0C ; OR accumulator with memory $0C.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3A.b		; 00 3A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0B0E.w		; 0C 0E 0B ; Test and set bits $0B0E.w [Reads: Accumulator] [Flags: Z]
	ora #$783A.w		; 09 3A 78 ; Logical OR #$783A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $30, $23		; 30 23 ; Branch if minus to $30, $23 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0044.w		; 0C 44 00 ; Test and set bits $0044.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cop $38.b		; 02 38 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $40.b		; 06 40 ; Arithmetic shift left $40.b [Reads: Direct Page] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ldy $A0.b		; A4 A0 ; Load $A0.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lsr $0444.w		; 4E 44 04 ; Logical shift right $0444.w [Flags: ZNC]
	jsl $100000.l		; 22 00 00 10 ; Jump to subroutine long $100000.l [Writes: Stack Pointer] [Flow: call]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl $40.b		; 06 40 ; Arithmetic shift left $40.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $19		; 10 19 ; Branch if plus to $10, $19 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tsb $061D.w		; 0C 1D 06 ; Test and set bits $061D.w [Reads: Accumulator] [Flags: Z]
	ora $0504.w		; 0D 04 05 ; Logical OR $0504.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $13.b,S		; 23 13 ; AND accumulator with stack relative $13.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $0B.b		; 02 0B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$F8.b]		; 47 F8 ; Exclusive OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$0000.w		; C0 00 00 ; Compare #$0000.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tsb $78.b		; 04 78 ; Test and set bits $78.b [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	sbc $000017.l,X		; FF 17 00 00 ; Subtract with carry (long,X) $000017.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4E.b		; 00 4E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $1C9F.w		; 0C 9F 1C ; Test and set bits $1C9F.w [Reads: Accumulator] [Flags: Z]
	lda $1C9D3E.l,X		; BF 3E 9D 1C ; Load long $1C9D3E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $14.b,X		; 95 14 ; Store accumulator to $14.b,X [Reads: Accumulator, X Index]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $E372.w,X		; 3C 72 E3 ; Test bits $E372.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cmp ($E3.b,X)		; C1 E3 ; Compare accumulator ($E3.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $7E08.w,X		; 3C 08 7E ; Test bits $7E08.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp $BD4306.l,X		; DF 06 43 BD ; Compare accumulator (long,X) $BD4306.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	bit $07.b		; 24 07 ; Test bits $07.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $42.b		; 24 42 ; Test bits $42.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sta ($A1.b,S),Y		; 93 A1 ; Store accumulator (stack relative indirect indexed) ($A1.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	bit $5A08.w		; 2C 08 5A ; Test bits $5A08.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	clc		; 18 ; Clear carry flag [Flags: C]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	lda [$34.b],Y		; B7 34 ; Load accumulator (long indexed) [$34.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$64.b]		; E7 64 ; Subtract with carry (long) [$64.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $18006C.l		; EF 6C 00 18 ; Subtract with carry (long) $18006C.l [Writes: Accumulator] [Flags: ZVNC]
	bit $66.b,X		; 34 66 ; Test bits $66.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cmp [$C9.b]		; C7 C9 ; Compare accumulator (long) [$C9.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sta $0091.w,Y		; 99 91 00 ; Store accumulator to $0091.w,Y [Reads: Accumulator, Y Index]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $770B.w,X		; 1E 0B 77 ; Arithmetic shift left $770B.w,X [Reads: X Index] [Flags: ZNC]
	adc [$8B.b],Y		; 77 8B ; Add with carry (long indexed) [$8B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $BF519F.l		; 6F 9F 51 BF ; Add with carry (long) $BF519F.l [Writes: Accumulator] [Flags: ZVNC]
	adc ($9F.b,X)		; 61 9F ; Add with carry ($9F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta [$00.b]		; 87 00 ; Store accumulator (long) [$00.b] [Reads: Accumulator, Direct Page]
	asl $8B77.w,X		; 1E 77 8B ; Arithmetic shift left $8B77.w,X [Reads: X Index] [Flags: ZNC]
	sta $879FBF.l,X		; 9F BF 9F 87 ; Store accumulator (long,X) $879FBF.l,X [Reads: Accumulator, X Index]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$80FF.w		; 09 FF 80 ; Logical OR #$80FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	sbc $C0C080.l,X		; FF 80 C0 C0 ; Subtract with carry (long,X) $C0C080.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$22E0.w		; E0 E0 22 ; Compare #$22E0.w with X register [Reads: X Index] [Flags: ZNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C0FF80.l,X		; FF 80 FF C0 ; Subtract with carry (long,X) $C0FF80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$0023.w		; E0 23 00 ; Compare #$0023.w with X register [Reads: X Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	asl $22.b		; 06 22 ; Arithmetic shift left $22.b [Reads: Direct Page] [Flags: ZNC]
	ora [$04.b]		; 07 04 ; OR accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$23.b]		; 07 23 ; OR accumulator with memory (long) [$23.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$20E0.w		; C0 E0 20 ; Compare #$20E0.w with Y register [Reads: Y Index] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	.db $50, $AC		; 50 AC ; Branch if overflow clear to $50, $AC [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	pei ($74.b)		; D4 74 ; Push effective indirect address ($74.b) [Reads: Direct Page] [Writes: Stack Pointer]
	nop		; EA ; No operation
	ldy $00C2.w,X		; BC C2 00 ; Load Y register $00C2.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ldy $EAD4.w		; AC D4 EA ; Load $EAD4.w into Y register [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$27		; C2 27
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $3F211F.l,X		; 1F 1F 21 3F ; Logical OR long $3F211F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($6F.b)		; 52 6F ; Exclusive OR accumulator with memory (indirect) ($6F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $1F07.w		; 0E 07 1F ; Arithmetic shift left $1F07.w [Flags: ZNC]
	and $00086F.l,X		; 3F 6F 08 00 ; AND accumulator with memory (long,X) $00086F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $10, $50		; 10 50 ; Branch if plus to $10, $50 [Flow: branch]
	jsr $40A0.w		; 20 A0 40 ; Jump to subroutine at $40A0.w [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sty $6B.b		; 84 6B ; Store Y register to $6B.b [Reads: Y Index]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $28.b		; 14 28 ; Test and reset bits $28.b [Reads: Accumulator] [Flags: Z]
	.db $50, $A0		; 50 A0 ; Branch if overflow clear to $50, $A0 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sta $76.b,S		; 83 76 ; Store accumulator (stack relative) $76.b,S [Reads: Accumulator, Stack Pointer]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($07.b,X)		; 21 07 ; Logical AND ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $3A1F1C.l		; 0F 1C 1F 3A ; OR accumulator with memory (long) $3A1F1C.l [Writes: Accumulator] [Flags: ZN]
	and $3E31.w,X		; 3D 31 3E ; AND accumulator with memory $3E31.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($3D.b)		; 32 3D ; AND accumulator with memory (indirect) ($3D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $3A.b,X		; 35 3A ; Logical AND $3A.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $3E3D1F.l		; 0F 1F 3D 3E ; OR accumulator with memory (long) $3E3D1F.l [Writes: Accumulator] [Flags: ZN]
	and $F83A.w,X		; 3D 3A F8 ; AND accumulator with memory $F83A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($C4FC.w,X)		; FC FC C4 ; Jump to subroutine indirect indexed ($C4FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($FC20.w,X)		; FC 20 FC ; Jump to subroutine indirect indexed ($FC20.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	stz $7C70.w		; 9C 70 7C ; Store zero to $7C70.w
	.db $90, $43		; 90 43 ; Branch if carry clear to $90, $43 [Flow: branch]
	jsr ($0000.w,X)		; FC 00 00 ; Jump to subroutine indirect indexed ($0000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsl $701BFC.l		; 22 FC 1B 70 ; Jump to subroutine long $701BFC.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$18.b]		; 07 18 ; OR accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $733A35.l,X		; 1F 35 3A 73 ; Logical OR long $733A35.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($7A75.w,X)		; 7C 75 7A ; Jump indirect indexed to ($7A75.w,X) [Reads: X Index] [Flow: jump]
	adc ($7D.b)		; 72 7D ; Add with carry (indirect) ($7D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and $1E3E.w,Y		; 39 3E 1E ; AND accumulator with memory $1E3E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $3A1F07.l,X		; 1F 07 1F 3A ; Logical OR long $3A1F07.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($7D7A.w,X)		; 7C 7A 7D ; Jump indirect indexed to ($7D7A.w,X) [Reads: X Index] [Flow: jump]
	rol $221F.w,X		; 3E 1F 22 ; Rotate left $221F.w,X [Reads: X Index] [Flags: ZNC]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$B040.w		; C0 40 B0 ; Compare #$B040.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	tsb $F8.b		; 04 F8 ; Test and set bits $F8.b [Reads: Accumulator] [Flags: Z]
	mvp $F2,$8C		; 44 8C F2 ; Move block positive $F2,$8C [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	stz $00E2.w,X		; 9E E2 00 ; Store zero to $00E2.w,X [Reads: X Index]
	cpy #$08B0.w		; C0 B0 08 ; Compare #$08B0.w with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $44.b		; 04 44 ; Test and set bits $44.b [Reads: Accumulator] [Flags: Z]
	inc $23FE.w,X		; FE FE 23 ; Increment memory $23FE.w,X [Reads: X Index] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor ($21.b),Y		; 51 21 ; Exclusive OR accumulator with memory ($21.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$1711.w		; 29 11 17 ; Logical AND #$1711.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$2951.w		; A0 51 29 ; Load #$2951.w into Y register [Writes: Y Index] [Flags: ZN]
	ora [$0B.b],Y		; 17 0B ; OR accumulator with memory (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	jmp ($FE7C.w,X)		; 7C 7C FE ; Jump indirect indexed to ($FE7C.w,X) [Reads: X Index] [Flow: jump]
	inc $FEC2.w,X		; FE C2 FE ; Increment memory $FEC2.w,X [Reads: X Index] [Flags: ZN]
	sta $EB.b,X		; 95 EB ; Store accumulator to $EB.b,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cmp [$5C.b],Y		; D7 5C ; Compare accumulator (long indexed) [$5C.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	lda $00.b,S		; A3 00 ; Load accumulator (stack relative) $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	jmp ($FEFE.w,X)		; 7C FE FE ; Jump indirect indexed to ($FEFE.w,X) [Reads: X Index] [Flow: jump]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp [$A3.b],Y		; D7 A3 ; Compare accumulator (long indexed) [$A3.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	jsl $21E000.l		; 22 00 E0 21 ; Jump to subroutine long $21E000.l [Writes: Stack Pointer] [Flow: call]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $100F.w		; 0C 0F 10 ; Test and set bits $100F.w [Reads: Accumulator] [Flags: Z]
	ora $211E20.l,X		; 1F 20 1E 21 ; Logical OR long $211E20.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $34.b		; 45 34 ; Exclusive OR $34.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $2010.w		; 0C 10 20 ; Test and set bits $2010.w [Reads: Accumulator] [Flags: Z]
	and ($45.b,X)		; 21 45 ; Logical AND ($45.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lda $BF2C.w		; AD 2C BF ; Load $BF2C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	rol $1A9B.w,X		; 3E 9B 1A ; Rotate left $1A9B.w,X [Reads: X Index] [Flags: ZNC]
	sbc [$76.b],Y		; F7 76 ; Subtract with carry (long indexed) [$76.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $3C2C.w		; 6E 2C 3C ; Rotate right $3C2C.w [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsl $D30900.l		; 22 00 09 D3 ; Jump to subroutine long $D30900.l [Writes: Stack Pointer] [Flow: call]
	cmp ($E5.b,X)		; C1 E5 ; Compare accumulator ($E5.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	bit #$2452.w		; 89 52 24 ; Test bits #$2452.w with accumulator [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $F5.b		; 00 F5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $43.b		; 24 43 ; Test bits $43.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sbc [$06.b]		; E7 06 ; Subtract with carry (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl $CF.b		; 06 CF ; Arithmetic shift left $CF.b [Reads: Direct Page] [Flags: ZNC]
	asl $0C4E.w		; 0E 4E 0C ; Arithmetic shift left $0C4E.w [Flags: ZNC]
	bit $1818.w,X		; 3C 18 18 ; Test bits $1818.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	jsl $8B1400.l		; 22 00 14 8B ; Jump to subroutine long $8B1400.l [Writes: Stack Pointer] [Flow: call]
	sta $B199.w,Y		; 99 99 B1 ; Store accumulator to $B199.w,Y [Reads: Accumulator, Y Index]
	adc ($24.b)		; [PATTERN: Memory clearing operation] 72 24 ; Add with carry (indirect) ($24.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $F7.b,X		; 74 F7 ; Store zero to $F7.b,X [Reads: X Index]
	stz $EF.b		; 64 EF ; Store zero to $EF.b
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp $007E58.l,X		; DF 58 7E 00 ; Compare accumulator (long,X) $007E58.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	bit $1800.w,X		; 3C 00 18 ; Test bits $1800.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	jsl $811300.l		; 22 00 13 81 ; Jump to subroutine long $811300.l [Writes: Stack Pointer] [Flow: call]
	bit #$A191.w		; 89 91 A1 ; Test bits #$A191.w with accumulator [Reads: Accumulator] [Flags: Z]
	.db $42, $24		; 42 24 ; Reserved instruction
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor $34.b		; 45 34 ; Exclusive OR $34.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $0D.b		; 25 0D ; Logical AND $0D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $070023.l		; 0F 23 00 07 ; OR accumulator with memory (long) $070023.l [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor $4B.b		; 45 4B ; Exclusive OR $4B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $12.b		; 25 12 ; Logical AND $12.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $450000.l		; 0F 00 00 45 ; OR accumulator with memory (long) $450000.l [Writes: Accumulator] [Flags: ZN]
	.db $70, $F0		; 70 F0 ; Branch if overflow set to $70, $F0 [Flow: branch]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $8001E0.l		; 22 E0 01 80 ; Jump to subroutine long $8001E0.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $23		; 80 23 ; Branch always to $80, $23 [Flow: branch]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	cpx #$80E0.w		; E0 E0 80 ; Compare #$80E0.w with X register [Reads: X Index] [Flags: ZNC]
	sta $AE.b,S		; 83 AE ; Store accumulator (stack relative) $AE.b,S [Reads: Accumulator, Stack Pointer]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF0001.l,X		; FF 01 00 FF ; Subtract with carry (long,X) $FF0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $2501.w,X		; FE 01 25 ; Increment memory $2501.w,X [Reads: X Index] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $22FF01.l,X		; FF 01 FF 22 ; Subtract with carry (long,X) $22FF01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $E6E29C.l		; 4F 9C E2 E6 ; Exclusive OR accumulator with memory (long) $E6E29C.l [Writes: Accumulator] [Flags: ZN]
	sbc $85FA.w,Y		; F9 FA 85 ; Subtract with carry $85FA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FC21.w,X		; FE 21 FC ; Increment memory $FC21.w,X [Reads: X Index] [Flags: ZN]
	adc ($7A.b,S),Y		; 73 7A ; Add with carry (stack relative indirect indexed) ($7A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	stx $78.b		; 86 78 ; Store X register to $78.b [Reads: X Index]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
.ACCU 8
.INDEX 8
	sep #$F9		; E2 F9
	sbc $FFFD.w,X		; FD FD FF ; Subtract with carry $FFFD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $0078.w,X		; FE 78 00 ; Increment memory $0078.w,X [Reads: X Index] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor [$3E.b]		; 47 3E ; Exclusive OR accumulator with memory (long) [$3E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($1D.b,X)		; 41 1D ; Exclusive OR accumulator with memory ($1D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $0F211E.l		; 22 1E 21 0F ; Jump to subroutine long $0F211E.l [Writes: Stack Pointer] [Flow: call]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	tsb $0300.w		; 0C 00 03 ; Test and set bits $0300.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$41.b]		; 47 41 ; Exclusive OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $0C1021.l		; 22 21 10 0C ; Jump to subroutine long $0C1021.l [Writes: Stack Pointer] [Flow: call]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sed		; F8 ; Set decimal flag [Flags: D]
	stz $5E7C.w		; 9C 7C 5E ; Store zero to $5E7C.w
	ldx $5EAE.w,Y		; BE AE 5E ; Load X register $5EAE.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	dec $AC3E.w		; CE 3E AC ; Decrement $AC3E.w [Flags: ZN]
	jmp $60F818.l		; 5C 18 F8 60 ; Jump long to $60F818.l [Flow: jump]
	cpx #$F8.b		; E0 F8 ; Compare #$F8.b with X register [Reads: X Index] [Flags: ZNC]
	jmp ($5EBE.w,X)		; 7C BE 5E ; Jump indirect indexed to ($5EBE.w,X) [Reads: X Index] [Flow: jump]
	rol $F85C.w,X		; 3E 5C F8 ; Rotate left $F85C.w,X [Reads: X Index] [Flags: ZNC]
	cpx #$32.b		; E0 32 ; Compare #$32.b with X register [Reads: X Index] [Flags: ZNC]
	and $1E11.w,X		; 3D 11 1E ; AND accumulator with memory $1E11.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $270704.l,X		; 1F 04 07 27 ; Logical OR long $270704.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1F1E.w,X		; 3D 1E 1F ; AND accumulator with memory $1F1E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$23.b]		; 07 23 ; OR accumulator with memory (long) [$23.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $30, $E8		; 30 E8 ; Branch if minus to $30, $E8 [Flow: branch]
	.db $50, $28		; 50 28 ; Branch if overflow clear to $50, $28 [Flow: branch]
	.db $90, $49		; 90 49 ; Branch if carry clear to $90, $49 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	jsr $A868.w		; 20 68 A8 ; Jump to subroutine at $A868.w [Writes: Stack Pointer] [Flow: call]
	bit $28.b		; 24 28 ; Test bits $28.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora #$0F.b		; 09 0F ; Logical OR #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $020303.l		; 0F 03 03 02 ; OR accumulator with memory (long) $020303.l [Writes: Accumulator] [Flags: ZN]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $0A.b		; 02 0A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $83.b		; 04 83 ; Test and set bits $83.b [Reads: Accumulator] [Flags: Z]
	rep #$00		; C2 00 ; Reset processor status bits #$00 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0A.b		; 05 0A ; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $28.b		; 14 28 ; Test and reset bits $28.b [Reads: Accumulator] [Flags: Z]
	.db $10, $3C		; 10 3C ; Branch if plus to $10, $3C [Flow: branch]
	pei ($F8.b)		; D4 F8 ; Push effective indirect address ($F8.b) [Reads: Direct Page] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $60		; F0 60 ; Branch if equal to $F0, $60 [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $09.b		; 06 09 ; Arithmetic shift left $09.b [Reads: Direct Page] [Flags: ZNC]
	ora [$0A.b]		; 07 0A ; OR accumulator with memory (long) [$0A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx #$26.b		; E0 26 ; Compare #$26.b with X register [Reads: X Index] [Flags: ZNC]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $010307.l		; 0F 07 03 01 ; OR accumulator with memory (long) $010307.l [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	dec $3C.b		; C6 3C ; Decrement $3C.b [Reads: Direct Page] [Flags: ZN]
.ACCU 8
.INDEX 8
	sep #$38		; E2 38
	cpy $B8.b		; C4 B8 ; Compare $B8.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	mvp $08,$F0		; 44 F0 08 ; Move block positive $08,$F0 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cpy #$30.b		; C0 30 ; Compare #$30.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $E2.b		; C6 E2 ; Decrement $E2.b [Reads: Direct Page] [Flags: ZN]
	cpy $C4.b		; C4 C4 ; Compare $C4.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $F0, $C0		; F0 C0 ; Branch if equal to $F0, $C0 [Flow: branch]
	brk $3A.b		; 00 3A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $94.b		; C5 94 ; Compare $94.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda #$D7.b		; A9 D7 ; Load #$D7.b into accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$22.b]		; 47 22 ; Exclusive OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $3E3E0C.l,X		; 7F 0C 3E 3E ; Add long $3E3E0C.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $001C.w		; 1C 1C 00 ; Test and reset bits $001C.w [Reads: Accumulator] [Flags: Z]
	brk $C5.b		; 00 C5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp [$7F.b],Y		; D7 7F ; Compare accumulator (long indexed) [$7F.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	adc $221C3E.l,X		; 7F 3E 1C 22 ; Add long $221C3E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cpy #$A0.b		; C0 A0 ; Compare #$A0.b with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $30E0.w		; 20 E0 30 ; Jump to subroutine at $30E0.w [Writes: Stack Pointer] [Flow: call]
	.db $F0, $B0		; F0 B0 ; Branch if equal to $F0, $B0 [Flow: branch]
	.db $F0, $70		; F0 70 ; Branch if equal to $F0, $70 [Flow: branch]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpx #$22.b		; E0 22 ; Compare #$22.b with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $23.b		; 02 23 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $F6		; 70 F6 ; Branch if overflow set to $70, $F6 [Flow: branch]
	cpy $FE.b		; C4 FE ; Compare $FE.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	trb $787C.w		; 1C 7C 78 ; Test and reset bits $787C.w [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsr ($3A8E.w,X)		; FC 8E 3A ; Jump to subroutine indirect indexed ($3A8E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sep #$84		; E2 84 ; Set processor status bits #$84 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $4E00.w,X		; 3C 00 4E ; Test bits $4E00.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	tsb $BF.b		; 04 BF ; Test and set bits $BF.b [Reads: Accumulator] [Flags: Z]
	rol $2EBF.w,X		; 3E BF 2E ; Rotate left $2EBF.w,X [Reads: X Index] [Flags: ZNC]
	sbc [$46.b],Y		; F7 46 ; Subtract with carry (long indexed) [$46.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $430C.w		; 6E 0C 43 ; Rotate right $430C.w [Flags: ZNC]
	bit $0708.w		; 2C 08 07 ; Test bits $0708.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $C172.w,X		; 3C 72 C1 ; Test bits $C172.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cmp ($B9.b),Y		; D1 B9 ; Compare accumulator ($B9.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	adc ($34.b)		; 72 34 ; Add with carry (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $3B.b,X		; 34 3B ; Test bits $3B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $49.b		; 00 49 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $0208.w		; 2C 08 02 ; Test bits $0208.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $34.b		; 24 34 ; Test bits $34.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	trb $3200.w		; 1C 00 32 ; Test and reset bits $3200.w [Reads: Accumulator] [Flags: Z]
	.db $10, $FD		; 10 FD ; Branch if plus to $10, $FD [Flow: branch]
	tsb $041D.w		; 0C 1D 04 ; Test and set bits $041D.w [Reads: Accumulator] [Flags: Z]
	sbc $84FFEC.l		; EF EC FF 84 ; Subtract with carry (long) $84FFEC.l [Writes: Accumulator] [Flags: ZVNC]
	sbc ($02.b)		; F2 02 ; Subtract with carry (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora [$1C.b]		; 07 1C ; OR accumulator with memory (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $FBF3.w		; 2E F3 FB ; Rotate left $FBF3.w [Flags: ZNC]
	ora ($C1.b),Y		; 11 C1 ; OR accumulator with memory ($C1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $00271C.l		; 22 1C 27 00 ; Jump to subroutine long $00271C.l [Writes: Stack Pointer] [Flow: call]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $05.b,S		; 83 05 ; Store accumulator (stack relative) $05.b,S [Reads: Accumulator, Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $26BF.w,X		; 1E BF 26 ; Arithmetic shift left $26BF.w,X [Reads: X Index] [Flags: ZNC]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $3C.b,S		; 03 3C ; OR accumulator with stack relative $3C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($E1.b)		; 72 E1 ; Add with carry (indirect) ($E1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $0025.w,Y		; D9 25 00 ; Compare accumulator $0025.w,Y [Reads: Y Index] [Flags: ZNC]
	ora #$11.b		; 09 11 ; Logical OR #$11.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $2B.b		; 00 2B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $5F		; 10 5F ; Branch if plus to $10, $5F [Flow: branch]
	and ($3F.b,S),Y		; 33 3F ; AND accumulator (stack relative indirect indexed) ($3F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $081F.w		; 0C 1F 08 ; Test and set bits $081F.w [Reads: Accumulator] [Flags: Z]
	jsl $34E000.l		; 22 00 E0 34 ; Jump to subroutine long $34E000.l [Writes: Stack Pointer] [Flow: call]
	.db $10, $3B		; 10 3B ; Branch if plus to $10, $3B [Flow: branch]
	jmp ($1131.w,X)		; 7C 31 11 ; Jump indirect indexed to ($1131.w,X) [Reads: X Index] [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	jsr ($DE00.w,X)		; FC 00 DE ; Jump to subroutine indirect indexed ($DE00.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $BB.b		; 00 BB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E9.b		; 00 E9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $F9		; 80 F9 ; Branch always to $80, $F9 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $0020.w,X		; FD 20 00 ; Subtract with carry $0020.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $6092.w		; CC 92 60 ; Compare $6092.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	inc $FD7F.w,X		; FE 7F FD ; Increment memory $FD7F.w,X [Reads: X Index] [Flags: ZN]
	lda $F7DFFB.l,X		; BF FB DF F7 ; Load long $F7DFFB.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $DFF7EF.l		; EF EF F7 DF ; Subtract with carry (long) $DFF7EF.l [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda $FE7FFD.l,X		; BF FD 7F FE ; Load long $FE7FFD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc $FBFD.w,X		; FE FD FB ; Increment memory $FBFD.w,X [Reads: X Index] [Flags: ZN]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $977FBF.l,X		; DF BF 7F 97 ; Compare accumulator (long,X) $977FBF.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $F0, $2F		; F0 2F ; Branch if equal to $F0, $2F [Flow: branch]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $F0, $2F		; F0 2F ; Branch if equal to $F0, $2F [Flow: branch]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $D0, $E0		; D0 E0 ; Branch if not equal to $D0, $E0 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $D0, $94		; D0 94 ; Branch if not equal to $D0, $94 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	.db $10, $D0		; 10 D0 ; Branch if plus to $10, $D0 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sty $0A.b,X		; 94 0A ; Store Y register $0A.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	ora $02.b		; 05 02 ; Logical OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $17.b,S		; 03 17 ; OR accumulator with stack relative $17.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $1E.b		; 06 1E ; Arithmetic shift left $1E.b [Reads: Direct Page] [Flags: ZNC]
	tsb $260C.w		; 0C 0C 26 ; Test and set bits $260C.w [Reads: Accumulator] [Flags: Z]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: ZNC]
	ora $0C12.w,Y		; 19 12 0C ; OR accumulator with memory $0C12.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $C00200.l		; 22 00 02 C0 ; Jump to subroutine long $C00200.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	bit $0100.w		; 2C 00 01 ; Test bits $0100.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $80, $25		; 80 25 ; Branch always to $80, $25 [Flow: branch]
	brk $49.b		; 00 49 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $0008.w		; 2C 08 00 ; Test bits $0008.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $34.b		; 24 34 ; Test bits $34.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $0A00.w,Y		; 39 00 0A ; AND accumulator with memory $0A00.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $B70C.w		; 6E 0C B7 ; Rotate right $B70C.w [Flags: ZNC]
	asl $87.b		; 06 87 ; Arithmetic shift left $87.b [Reads: Direct Page] [Flags: ZNC]
	asl $CF.b		; 06 CF ; Arithmetic shift left $CF.b [Reads: Direct Page] [Flags: ZNC]
	lsr $3C7E.w		; 4E 7E 3C ; Logical shift right $3C7E.w [Flags: ZNC]
	bit $0024.w,X		; 3C 24 00 ; Test bits $0024.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ora $72.b		; 05 72 ; Logical OR $72.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $B1F9.w,Y		; F9 F9 B1 ; Subtract with carry $B1F9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $42, $3C		; 42 3C ; Reserved instruction
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $1F.b		; 06 1F ; Arithmetic shift left $1F.b [Reads: Direct Page] [Flags: ZNC]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00261F.l,X		; 1F 1F 26 00 ; Logical OR long $00261F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$1F.b		; 09 1F ; Logical OR #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $001F20.l,X		; 3F 20 1F 00 ; AND accumulator with memory (long,X) $001F20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $77.b		; 00 77 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $2E.b		; 06 2E ; Arithmetic shift left $2E.b [Reads: Direct Page] [Flags: ZNC]
	tsb $2C47.w		; 0C 47 2C ; Test and set bits $2C47.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $790100.l		; 22 00 01 79 ; Jump to subroutine long $790100.l [Writes: Stack Pointer] [Flow: call]
	and ($23.b)		; 32 23 ; AND accumulator with memory (indirect) ($23.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $01.b,X		; 34 01 ; Test bits $01.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1F0610.l,X		; 3F 10 06 1F ; AND accumulator with memory (long,X) $1F0610.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $030F0C.l,X		; 1F 0C 0F 03 ; Logical OR long $030F0C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $8310.w		; 20 10 83 ; Jump to subroutine at $8310.w [Writes: Stack Pointer] [Flow: call]
	bit $0C02.w,X		; 3C 02 0C ; Test bits $0C02.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sbc $10FE10.l,X		; FF 10 FE 10 ; Subtract with carry (long,X) $10FE10.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	jsr $60F0.w		; 20 F0 60 ; Jump to subroutine at $60F0.w [Writes: Stack Pointer] [Flow: call]
	cpx #$80.b		; E0 80 ; Compare #$80.b with X register [Reads: X Index] [Flags: ZNC]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$CE.b		; 09 CE ; Logical OR #$CE.b with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $F0, $8E		; F0 8E ; Branch if equal to $F0, $8E [Flow: branch]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $002BE4.l,X		; FF E4 2B 00 ; Subtract with carry (long,X) $002BE4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $40.b,S		; 23 40 ; AND accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$FE.b],Y		; 17 FE ; OR accumulator with memory (long indexed) [$FE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $FBBFFD.l,X		; 7F FD BF FB ; Add long $FBBFFD.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $EFEFF7.l,X		; DF F7 EF EF ; Compare accumulator (long,X) $EFEFF7.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc [$DF.b],Y		; F7 DF ; Subtract with carry (long indexed) [$DF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda $FE7FFD.l,X		; BF FD 7F FE ; Load long $FE7FFD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc $FBFD.w,X		; FE FD FB ; Increment memory $FBFD.w,X [Reads: X Index] [Flags: ZN]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $977FBF.l,X		; DF BF 7F 97 ; Compare accumulator (long,X) $977FBF.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	.db $F0, $2F		; F0 2F ; Branch if equal to $F0, $2F [Flow: branch]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $00002D.l,X		; FF 2D 00 00 ; Subtract with carry (long,X) $00002D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F00026.l,X		; FF 26 00 F0 ; Subtract with carry (long,X) $F00026.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $F00030.l,X		; 5F 30 00 F0 ; Exclusive OR accumulator with memory (long,X) $F00030.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $970030.l,X		; 5F 30 00 97 ; Exclusive OR accumulator with memory (long,X) $970030.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,X		; 35 00 ; Logical AND $00.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$25.b		; C0 25 ; Compare #$25.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $37.b		; 00 37 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($F0.b,X)		; 01 F0 ; Logical OR ($F0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $0030.w		; 2E 30 00 ; Rotate left $0030.w [Flags: ZNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $5F		; F0 5F ; Branch if equal to $F0, $5F [Flow: branch]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cop $3F.b		; 02 3F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $10473F.l,X		; 1F 3F 47 10 ; Logical OR long $10473F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $242024.l,X		; 3F 24 20 24 ; AND accumulator with memory (long,X) $242024.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000029.l,X		; FF 29 00 00 ; Subtract with carry (long,X) $000029.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $4F0024.l,X		; FF 24 00 4F ; Subtract with carry (long,X) $4F0024.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $30		; 10 30 ; Branch if plus to $10, $30 [Flow: branch]
	and [$20.b]		; 27 20 ; AND accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ror $0044.w,X		; 7E 44 00 ; Rotate right $0044.w,X [Reads: X Index] [Flags: ZNC]
	adc ($00.b,S),Y		; 73 00 ; Add with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $0044.w,X		; 7E 44 00 ; Rotate right $0044.w,X [Reads: X Index] [Flags: ZNC]
	adc ($0C.b,S),Y		; 73 0C ; Add with carry (stack relative indirect indexed) ($0C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $0000.w,X		; 7E 00 00 ; Rotate right $0000.w,X [Reads: X Index] [Flags: ZNC]
	ror $7373.w,X		; 7E 73 73 ; Rotate right $7373.w,X [Reads: X Index] [Flags: ZNC]
	ror $7373.w,X		; 7E 73 73 ; Rotate right $7373.w,X [Reads: X Index] [Flags: ZNC]
	ror $0000.w,X		; 7E 00 00 ; Rotate right $0000.w,X [Reads: X Index] [Flags: ZNC]
	adc $700044.l,X		; 7F 44 00 70 ; Add long $700044.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	.db $70, $04		; 70 04 ; Branch if overflow set to $70, $04 [Flow: branch]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	adc $047022.l,X		; 7F 22 70 04 ; Add long $047022.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $3C.b		; 04 3C ; Test and set bits $3C.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	and $18.b,S		; 23 18 ; AND accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $3C.b,S		; 03 3C ; OR accumulator with stack relative $3C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $0044.w,X		; 3E 44 00 ; Rotate left $0044.w,X [Reads: X Index] [Flags: ZNC]
	adc $02.b,S		; 63 02 ; Add with carry (stack relative) $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	asl $3800.w		; 0E 00 38 ; Arithmetic shift left $3800.w [Flags: ZNC]
	sty $BC.b		; 84 BC ; Store Y register to $BC.b [Reads: Y Index]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	asl $7038.w		; 0E 38 70 ; Arithmetic shift left $7038.w [Flags: ZNC]
	adc $02B783.l,X		; 7F 83 B7 02 ; Add long $02B783.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	tsb $1E00.w		; 0C 00 1E ; Test and set bits $1E00.w [Reads: Accumulator] [Flags: Z]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $1E0C06.l,X		; 7F 06 0C 1E ; Add long $1E0C06.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $63.b,S		; 03 63 ; OR accumulator with stack relative $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $0000.w,X		; 3E 00 00 ; Rotate left $0000.w,X [Reads: X Index] [Flags: ZNC]
	asl $1E00.w		; 0E 00 1E ; Arithmetic shift left $1E00.w [Flags: ZNC]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $66,$00		; 44 00 66 ; Move block positive $66,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sta $01.b,S		; 83 01 ; Store accumulator (stack relative) $01.b,S [Reads: Accumulator, Stack Pointer]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $6636.w,X		; 1E 36 66 ; Arithmetic shift left $6636.w,X [Reads: X Index] [Flags: ZNC]
	ror $7F.b		; 66 7F ; Rotate right $7F.b [Reads: Direct Page] [Flags: ZNC]
	asl $83.b		; 06 83 ; Arithmetic shift left $83.b [Reads: Direct Page] [Flags: ZNC]
	lda [$02.b],Y		; B7 02 ; Load accumulator (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $60.b		; 04 60 ; Test and set bits $60.b [Reads: Accumulator] [Flags: Z]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ror $8443.w,X		; 7E 43 84 ; Rotate right $8443.w,X [Reads: X Index] [Flags: ZNC]
	trb $03.b		; 14 03 ; Test and reset bits $03.b [Reads: Accumulator] [Flags: Z]
	sta $E9.b,S		; 83 E9 ; Store accumulator (stack relative) $E9.b,S [Reads: Accumulator, Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $63,$00		; 44 00 63 ; Move block positive $63,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sta $46.b,S		; 83 46 ; Store accumulator (stack relative) $46.b,S [Reads: Accumulator, Stack Pointer]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $60.b,S		; 63 60 ; Add with carry (stack relative) $60.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ror $8363.w,X		; 7E 63 83 ; Rotate right $8363.w,X [Reads: X Index] [Flags: ZNC]
	ora $03.b,X		; 15 03 ; OR accumulator with memory $03.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $63,$00		; 44 00 63 ; Move block positive $63,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	tsb $0004.w		; 0C 04 00 ; Test and set bits $0004.w [Reads: Accumulator] [Flags: Z]
	adc $066363.l,X		; 7F 63 63 06 ; Add long $066363.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $00020C.l		; 22 0C 02 00 ; Jump to subroutine long $00020C.l [Writes: Stack Pointer] [Flow: call]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $63,$00		; 44 00 63 ; Move block positive $63,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $63,$00		; 44 00 63 ; Move block positive $63,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sty $55.b		; 84 55 ; Store Y register to $55.b [Reads: Y Index]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $3E.b,S		; 63 3E ; Add with carry (stack relative) $3E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sta $5C.b,S		; 83 5C ; Store accumulator (stack relative) $5C.b,S [Reads: Accumulator, Stack Pointer]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $4B80FF.l,X		; FF FF 80 4B ; Subtract with carry (long,X) $4B80FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF2ABF.l,X		; FF BF 2A FF ; Subtract with carry (long,X) $FF2ABF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $FF.b,X		; 34 FF ; Test bits $FF.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF2400.l,X		; FF 00 24 FF ; Subtract with carry (long,X) $FF2400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr ($CDFF.w,X)		; FC FF CD ; Jump to subroutine indirect indexed ($CDFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $7FFFEF.l,X		; FF EF FF 7F ; Subtract with carry (long,X) $7FFFEF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF2800.l,X		; FF 00 28 FF ; Subtract with carry (long,X) $FF2800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $55.b		; 02 55 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF44AA.l,X		; FF AA 44 FF ; Subtract with carry (long,X) $FF44AA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $AA.b,X		; 55 AA ; Exclusive OR accumulator with memory $AA.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $BF.b		; 06 BF ; Arithmetic shift left $BF.b [Reads: Direct Page] [Flags: ZNC]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $55.b		; 00 55 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $200500.l		; 22 00 05 20 ; Jump to subroutine long $200500.l [Writes: Stack Pointer] [Flow: call]
	jsr $0808.w		; 20 08 08 ; Jump to subroutine at $0808.w [Writes: Stack Pointer] [Flow: call]
	jsr $2420.w		; 20 20 24 ; Jump to subroutine at $2420.w [Writes: Stack Pointer] [Flow: call]
	sbc $F7DF06.l,X		; FF 06 DF F7 ; Subtract with carry (long,X) $F7DF06.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $AA5555.l,X		; DF 55 55 AA ; Compare accumulator (long,X) $AA5555.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$AA.b		; 09 AA ; Logical OR #$AA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $00FF55.l,X		; FF 55 FF 00 ; Subtract with carry (long,X) $00FF55.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $AAEF10.l,X		; FF 10 EF AA ; Subtract with carry (long,X) $AAEF10.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $25.b,X		; 55 25 ; Exclusive OR accumulator with memory $25.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $BD		; 42 BD ; Reserved instruction
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $E4.b,S		; 83 E4 ; Store accumulator (stack relative) $E4.b,S [Reads: Accumulator, Stack Pointer]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	eor $43.b,X		; 55 43 ; Exclusive OR accumulator with memory $43.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $EF0100.l,X		; FF 00 01 EF ; Subtract with carry (long,X) $EF0100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $27		; 10 27 ; Branch if plus to $10, $27 [Flow: branch]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $20DF00.l,X		; FF 00 DF 20 ; Subtract with carry (long,X) $20DF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tsb $43.b		; 04 43 ; Test and set bits $43.b [Reads: Accumulator] [Flags: Z]
	sbc $DF0500.l,X		; FF 00 05 DF ; Subtract with carry (long,X) $DF0500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $40BF.w		; 20 BF 40 ; Jump to subroutine at $40BF.w [Writes: Stack Pointer] [Flow: call]
	sbc $2702.w,X		; FD 02 27 ; Subtract with carry $2702.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F90100.l,X		; FF 00 01 F9 ; Subtract with carry (long,X) $F90100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $83.b		; 06 83 ; Arithmetic shift left $83.b [Reads: Direct Page] [Flags: ZNC]
	bit $8504.w,X		; 3C 04 85 ; Test bits $8504.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	.db $42, $04		; 42 04 ; Reserved instruction
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0001.w		; 0E 01 00 ; Arithmetic shift left $0001.w [Flags: ZNC]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $023D00.l,X		; 1F 00 3D 02 ; Logical OR long $023D00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $04FB00.l,X		; 7F 00 FB 04 ; Add long $04FB00.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $010028.l,X		; FF 28 00 01 ; Subtract with carry (long,X) $010028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $012DFF.l,X		; FF FF 2D 01 ; Subtract with carry (long,X) $012DFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $01.b		; 26 01 ; Rotate left $01.b [Reads: Direct Page] [Flags: ZNC]
	cop $3C.b		; 02 3C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	sbc $007E43.l,X		; FF 43 7E 00 ; Subtract with carry (long,X) $007E43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$3C.b		; 09 3C ; Logical OR #$3C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $81		; 42 81 ; Reserved instruction
	lda $BD.b		; A5 BD ; Load $BD.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $52		; 42 52 ; Reserved instruction
	bit $0023.w,X		; 3C 23 00 ; Test bits $0023.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $23.b		; 24 23 ; Test bits $23.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $2B.b		; 24 2B ; Test bits $2B.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $7F,$00		; 44 00 7F ; Move block positive $7F,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $1C.b		; 02 1C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $080600.l		; 22 00 06 08 ; Jump to subroutine long $080600.l [Writes: Stack Pointer] [Flow: call]
	trb $22.b		; 14 22 ; Test and reset bits $22.b [Reads: Accumulator] [Flags: Z]
	eor ($77.b,X)		; 41 77 ; Exclusive OR accumulator with memory ($77.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $18.b		; 02 18 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($00.b,S),Y		; 33 00 ; AND accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $18.b,S		; 23 18 ; AND accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $3F7F.w		; 4C 7F 3F ; Jump to $3F7F.w [Flow: jump]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F00027.l,X		; FF 27 00 F0 ; Subtract with carry (long,X) $F00027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $A8.b		; A6 A8 ; Load $A8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $0005FF.l,X		; 7F FF 05 00 ; Add long $0005FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	ror $4400.w,X		; 7E 00 44 ; Rotate right $4400.w,X [Reads: X Index] [Flags: ZNC]
	ror $033C.w,X		; 7E 3C 03 ; Rotate right $033C.w,X [Reads: X Index] [Flags: ZNC]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	ror $6607.w,X		; 7E 07 66 ; Rotate right $6607.w,X [Reads: X Index] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $42, $3C		; 42 3C ; Reserved instruction
	ror $18.b		; 66 18 ; Rotate right $18.b [Reads: Direct Page] [Flags: ZNC]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $66.b		; 02 66 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $42.b		; 00 42 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc [$00.b]		; 67 00 ; Add with carry (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $7E.b,S		; 43 7E ; Exclusive OR accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $0005.w,X		; 3C 05 00 ; Test bits $0005.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $2518.w,X		; 3C 18 25 ; Test bits $2518.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $4300.w,X		; 7E 00 43 ; Rotate right $4300.w,X [Reads: X Index] [Flags: ZNC]
	sbc $7E0200.l,X		; FF 00 02 7E ; Subtract with carry (long,X) $7E0200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $4300.w		; 2C 00 43 ; Test bits $4300.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ror $4300.w,X		; 7E 00 43 ; Rotate right $4300.w,X [Reads: X Index] [Flags: ZNC]
	inc $833C.w,X		; FE 3C 83 ; Increment memory $833C.w,X [Reads: X Index] [Flags: ZN]
	asl $2B00.w,X		; 1E 00 2B ; Arithmetic shift left $2B00.w,X [Reads: X Index] [Flags: ZNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $7F4330.l		; 4F 30 43 7F ; Exclusive OR accumulator with memory (long) $7F4330.l [Writes: Accumulator] [Flags: ZN]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $010000.l		; 0F 00 00 01 ; OR accumulator with memory (long) $010000.l [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	inc $F045.w,X		; FE 45 F0 ; Increment memory $F045.w,X [Reads: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $2A		; 80 2A ; Branch always to $80, $2A [Flow: branch]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $4300.w,X		; 7E 00 43 ; Rotate right $4300.w,X [Reads: X Index] [Flags: ZNC]
	sbc $7E4300.l,X		; FF 00 43 7E ; Subtract with carry (long,X) $7E4300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $000028.l,X		; 7F 28 00 00 ; Add long $000028.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $FF0000.l,X		; 7F 00 00 FF ; Add long $FF0000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $7E0044.l,X		; 7F 44 00 7E ; Add long $7E0044.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FE.b,S		; 43 FE ; Exclusive OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0000.w,X		; 7E 00 00 ; Rotate right $0000.w,X [Reads: X Index] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7F4400.l,X		; FF 00 44 7F ; Subtract with carry (long,X) $7F4400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $07,$00		; 44 00 07 ; Move block positive $07,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	mvp $7E,$00		; 44 00 7E ; Move block positive $7E,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $7F.b,S		; 43 7F ; Exclusive OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $2800.w,X		; 7E 00 28 ; Rotate right $2800.w,X [Reads: X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $002800.l,X		; 7F 00 28 00 ; Add long $002800.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $7E.b		; 45 7E ; Exclusive OR $7E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $44.b		; 66 44 ; Rotate right $44.b [Reads: Direct Page] [Flags: ZNC]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($66.b,X)		; 01 66 ; Logical OR ($66.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor #$7F.b		; 49 7F ; Exclusive OR #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZNC]
	ror $7C01.w,X		; 7E 01 7C ; Rotate right $7C01.w,X [Reads: X Index] [Flags: ZNC]
	ora $7E.b,S		; 03 7E ; OR accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($45.b,X)		; 01 45 ; Logical OR ($45.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $310000.l,X		; 7F 00 00 31 ; Add long $310000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $4C.b		; 00 4C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $002800.l,X		; 1F 00 28 00 ; Logical OR long $002800.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $7E,$00		; 44 00 7E ; Move block positive $7E,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $7E00.w,X		; 7E 00 7E ; Rotate right $7E00.w,X [Reads: X Index] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $7F4500.l,X		; 1F 00 45 7F ; Logical OR long $7F4500.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $2B01.w,X		; 7E 01 2B ; Rotate right $2B01.w,X [Reads: X Index] [Flags: ZNC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $4300.w,X		; 7E 00 43 ; Rotate right $4300.w,X [Reads: X Index] [Flags: ZNC]
	adc $7E4400.l,X		; 7F 00 44 7E ; Add long $7E4400.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $7F01.w,X		; 7E 01 7F ; Rotate right $7F01.w,X [Reads: X Index] [Flags: ZNC]
	mvp $FF,$00		; 44 00 FF ; Move block positive $FF,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $7F.b		; 02 7F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $4D.b		; 00 4D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0000.w,X		; 7E 00 00 ; Rotate right $0000.w,X [Reads: X Index] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $4D.b		; 00 4D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $190000.l,X		; 7F 00 00 19 ; Add long $190000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $4D.b		; 00 4D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: ZNC]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $4C.b		; 00 4C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $002800.l		; 0F 00 28 00 ; OR accumulator with memory (long) $002800.l [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $FE,$00		; 44 00 FE ; Move block positive $FE,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0000.w,X		; FE 00 00 ; Increment memory $0000.w,X [Reads: X Index] [Flags: ZN]
	sbc $02002A.l,X		; FF 2A 00 02 ; Subtract with carry (long,X) $02002A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $7F01.w,X		; 7E 01 7F ; Rotate right $7F01.w,X [Reads: X Index] [Flags: ZNC]
	mvp $FF,$00		; 44 00 FF ; Move block positive $FF,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $7F.b,S		; 43 7F ; Exclusive OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $01002A.l,X		; FF 2A 00 01 ; Subtract with carry (long,X) $01002A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $4980.w,X		; 7E 80 49 ; Rotate right $4980.w,X [Reads: X Index] [Flags: ZNC]
	inc $0000.w,X		; FE 00 00 ; Increment memory $0000.w,X [Reads: X Index] [Flags: ZN]
	sbc $000028.l,X		; FF 28 00 00 ; Subtract with carry (long,X) $000028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $004C.w,Y		; 19 4C 00 ; OR accumulator with memory $004C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $28FF00.l,X		; 7F 00 FF 28 ; Add long $28FF00.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $4D		; 80 4D ; Branch always to $80, $4D [Flow: branch]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FE0046.l,X		; FF 46 00 FE ; Subtract with carry (long,X) $FE0046.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$E6.b]		; 07 E6 ; OR accumulator with memory (long) [$E6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
.ACCU 16
.INDEX 16
	rep #$3C		; C2 3C
	inc $18.b		; E6 18 ; Increment $18.b [Reads: Direct Page] [Flags: ZN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	adc $017E07.l,X		; 7F 07 7E 01 ; Add long $017E07.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $7F4930.l		; 4F 30 49 7F ; Exclusive OR accumulator with memory (long) $7F4930.l [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($2A.b,X)		; 01 2A ; Logical OR ($2A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $18.b		; 66 18 ; Rotate right $18.b [Reads: Direct Page] [Flags: ZNC]
	eor $7F.b,S		; 43 7F ; Exclusive OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0045.w,X		; 7E 45 00 ; Rotate right $0045.w,X [Reads: X Index] [Flags: ZNC]
	jmp ($0028.w,X)		; 7C 28 00 ; Jump indirect indexed to ($0028.w,X) [Reads: X Index] [Flow: jump]
	cop $18.b		; 02 18 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $FE,$00		; 44 00 FE ; Move block positive $FE,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $0028.w,X		; 3E 28 00 ; Rotate left $0028.w,X [Reads: X Index] [Flags: ZNC]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $FE00.w		; 4C 00 FE ; Jump to $FE00.w [Flow: jump]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $44		; 80 44 ; Branch always to $80, $44 [Flow: branch]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FE00.w,X		; FE 00 FE ; Increment memory $FE00.w,X [Reads: X Index] [Flags: ZN]
	bit $4300.w		; 2C 00 43 ; Test bits $4300.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	adc $FF4300.l,X		; 7F 00 43 FF ; Add long $FF4300.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $010000.l,X		; 7F 00 00 01 ; Add long $010000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $4B.b		; 00 4B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$0000.w		; C0 00 00 ; Compare #$0000.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $80, $29		; 80 29 ; Branch always to $80, $29 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($49.b,X)		; 01 49 ; Logical OR ($49.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $7F.b		; 02 7F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $46.b,S		; 03 46 ; OR accumulator with stack relative $46.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $0100.w		; 2E 00 01 ; Rotate left $0100.w [Flags: ZNC]
	jsr ($463E.w,X)		; FC 3E 46 ; Jump to subroutine indirect indexed ($463E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $2E00.w,X		; FE 00 2E ; Increment memory $2E00.w,X [Reads: X Index] [Flags: ZN]
	brk $4C.b		; 00 4C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$4506.w		; E0 06 45 ; Compare #$4506.w with X register [Reads: X Index] [Flags: ZNC]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	eor $FE.b,S		; 43 FE ; Exclusive OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$0028.w		; E0 28 00 ; Compare #$0028.w with X register [Reads: X Index] [Flags: ZNC]
	eor $07.b,S		; 43 07 ; Exclusive OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $074500.l,X		; 7F 00 45 07 ; Add long $074500.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($28.b,X)		; 01 28 ; Logical OR ($28.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $80, $4B		; 80 4B ; Branch always to $80, $4B [Flow: branch]
	cpx #$0000.w		; E0 00 00 ; Compare #$0000.w with X register [Reads: X Index] [Flags: ZNC]
	.db $80, $2A		; 80 2A ; Branch always to $80, $2A [Flow: branch]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $7F4330.l		; 4F 30 43 7F ; Exclusive OR accumulator with memory (long) $7F4330.l [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$43.b]		; 67 43 ; Add with carry (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ror $44.b		; 66 44 ; Rotate right $44.b [Reads: Direct Page] [Flags: ZNC]
	ror $2E00.w,X		; 7E 00 2E ; Rotate right $2E00.w,X [Reads: X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	mvp $3C,$00		; 44 00 3C ; Move block positive $3C,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $002E00.l,X		; 7F 00 2E 00 ; Add long $002E00.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $2800.w,X		; FE 00 28 ; Increment memory $2800.w,X [Reads: X Index] [Flags: ZN]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $003000.l,X		; 7F 00 30 00 ; Add long $003000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp $007F.w		; 4C 7F 00 ; Jump to $007F.w [Flow: jump]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $FE00.w		; 4D 00 FE ; Exclusive OR $FE00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $FF4800.l,X		; 7F 00 48 FF ; Add long $FF4800.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4E.b		; 00 4E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $2800.w,X		; FE 00 28 ; Increment memory $2800.w,X [Reads: X Index] [Flags: ZN]
	brk $49.b		; 00 49 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7F0200.l,X		; FF 00 02 7F ; Subtract with carry (long,X) $7F0200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	mvp $7E,$00		; 44 00 7E ; Move block positive $7E,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $7F.b		; 02 7F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $67.b		; 00 67 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $21.b		; 86 21 ; Store X register to $21.b [Reads: X Index]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $4300.w,X		; 7E 00 43 ; Rotate right $4300.w,X [Reads: X Index] [Flags: ZNC]
	bit $017E.w,X		; 3C 7E 01 ; Test bits $017E.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $0100.w		; 2C 00 01 ; Test bits $0100.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ror $4980.w,X		; 7E 80 49 ; Rotate right $4980.w,X [Reads: X Index] [Flags: ZNC]
	inc $0000.w,X		; FE 00 00 ; Increment memory $0000.w,X [Reads: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $4300.w,X		; 7E 00 43 ; Rotate right $4300.w,X [Reads: X Index] [Flags: ZNC]
	inc $8300.w,X		; FE 00 83 ; Increment memory $8300.w,X [Reads: X Index] [Flags: ZN]
	asl $2B00.w,X		; 1E 00 2B ; Arithmetic shift left $2B00.w,X [Reads: X Index] [Flags: ZNC]
	brk $4B.b		; 00 4B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $180000.l,X		; 7F 00 00 18 ; Add long $180000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	mvp $7F,$00		; 44 00 7F ; Move block positive $7F,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $FE.b,S		; 43 FE ; Exclusive OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0000.w,X		; 7E 00 00 ; Rotate right $0000.w,X [Reads: X Index] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	mvp $FF,$00		; 44 00 FF ; Move block positive $FF,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $002800.l,X		; 7F 00 28 00 ; Add long $002800.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $7E,$00		; 44 00 7E ; Move block positive $7E,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $002800.l,X		; 7F 00 28 00 ; Add long $002800.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $007F45.l,X		; FF 45 7F 00 ; Subtract with carry (long,X) $007F45.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $002800.l,X		; FF 00 28 00 ; Subtract with carry (long,X) $002800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $7E,$00		; 44 00 7E ; Move block positive $7E,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $FE.b,S		; 43 FE ; Exclusive OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $7E00.w,X		; 7E 00 7E ; Rotate right $7E00.w,X [Reads: X Index] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7F0046.l,X		; FF 46 00 7F ; Subtract with carry (long,X) $7F0046.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$7E.b]		; 07 7E ; OR accumulator with memory (long) [$7E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($7C.b,X)		; 01 7C ; Logical OR ($7C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $7E.b,S		; 03 7E ; OR accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0044.w,X		; FE 44 00 ; Increment memory $0044.w,X [Reads: X Index] [Flags: ZN]
	ror $7F43.w,X		; 7E 43 7F ; Rotate right $7F43.w,X [Reads: X Index] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $7E00.w,X		; 7E 00 7E ; Rotate right $7E00.w,X [Reads: X Index] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	jmp $3C00.w		; 4C 00 3C ; Jump to $3C00.w [Flow: jump]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	inc $E607.w,X		; FE 07 E6 ; Increment memory $E607.w,X [Reads: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
.ACCU 16
.INDEX 16
	rep #$3C		; C2 3C
	inc $18.b		; E6 18 ; Increment $18.b [Reads: Direct Page] [Flags: ZN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0044.w,X		; 7E 44 00 ; Rotate right $0044.w,X [Reads: X Index] [Flags: ZNC]
	inc $7E00.w,X		; FE 00 7E ; Increment memory $7E00.w,X [Reads: X Index] [Flags: ZN]
	and $0700.w		; 2D 00 07 ; Logical AND $0700.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ror $18.b		; 66 18 ; Rotate right $18.b [Reads: Direct Page] [Flags: ZNC]
	.db $42, $3C		; 42 3C ; Reserved instruction
	adc [$18.b]		; 67 18 ; Add with carry (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $7E0045.l,X		; 7F 45 00 7E ; Add long $7E0045.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $0000.w		; 2C 00 00 ; Test bits $0000.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $0044.w,X		; 3C 44 00 ; Test bits $0044.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	jsr ($3C00.w,X)		; FC 00 3C ; Jump to subroutine indirect indexed ($3C00.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $002800.l,X		; 3F 00 28 00 ; AND accumulator with memory (long,X) $002800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $18.b,S		; 43 18 ; Exclusive OR accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	mvp $00,$F8		; 44 F8 00 ; Move block positive $00,$F8 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF0200.l,X		; 3F 00 02 FF ; AND accumulator with memory (long,X) $FF0200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $4800.w		; 2E 00 48 ; Rotate left $4800.w [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $2E.b		; 00 2E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $4300.w,X		; 7E 00 43 ; Rotate right $4300.w,X [Reads: X Index] [Flags: ZNC]
	sbc $7E0200.l,X		; FF 00 02 7E ; Subtract with carry (long,X) $7E0200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $4300.w		; 2C 00 43 ; Test bits $4300.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora $7F4300.l		; 0F 00 43 7F ; OR accumulator with memory (long) $7F4300.l [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $000F30.l		; 4F 30 0F 00 ; Exclusive OR accumulator with memory (long) $000F30.l [Writes: Accumulator] [Flags: ZN]
	ora $460030.l		; 0F 30 00 46 ; OR accumulator with memory (long) $460030.l [Writes: Accumulator] [Flags: ZN]
	ror $2800.w,X		; 7E 00 28 ; Rotate right $2800.w,X [Reads: X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0046.w,X		; 7E 46 00 ; Rotate right $0046.w,X [Reads: X Index] [Flags: ZNC]
	adc $003887.l,X		; 7F 87 38 00 ; Add long $003887.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	jmp $0019.w		; 4C 19 00 ; Jump to $0019.w [Flow: jump]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $36.b,X		; 36 36 ; Rotate left $36.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	mvp $F6,$00		; 44 00 F6 ; Move block positive $F6,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $0028.w,X		; 7E 28 00 ; Rotate right $0028.w,X [Reads: X Index] [Flags: ZNC]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $7F00.w		; 4C 00 7F ; Jump to $7F00.w [Flow: jump]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $F2.b		; 00 F2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $FE49.w		; 0C 49 FE ; Test and set bits $FE49.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $2A		; 80 2A ; Branch always to $80, $2A [Flow: branch]
	brk $49.b		; 00 49 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $670200.l,X		; 7F 00 02 67 ; Add long $670200.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $2A.b,S		; 03 2A ; OR accumulator with stack relative $2A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $4300.w,X		; FE 00 43 ; Increment memory $4300.w,X [Reads: X Index] [Flags: ZN]
	sbc $FE4300.l,X		; FF 00 43 FE ; Subtract with carry (long,X) $FE4300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$002A.w		; C0 2A 00 ; Compare #$002A.w with Y register [Reads: Y Index] [Flags: ZNC]
	eor $7F.b,S		; 43 7F ; Exclusive OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7F4300.l,X		; FF 00 43 7F ; Subtract with carry (long,X) $7F4300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($2A.b,X)		; 01 2A ; Logical OR ($2A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $4300.w,X		; FE 00 43 ; Increment memory $4300.w,X [Reads: X Index] [Flags: ZN]
	sbc $FE4300.l,X		; FF 00 43 FE ; Subtract with carry (long,X) $FE4300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $030000.l,X		; 7F 00 00 03 ; Add long $030000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0F00.w		; 4D 00 0F ; Exclusive OR $0F00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $4C.b		; 00 4C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $002A00.l		; 0F 00 2A 00 ; OR accumulator with memory (long) $002A00.l [Writes: Accumulator] [Flags: ZN]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $184300.l,X		; 1F 00 43 18 ; Logical OR long $184300.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $3C		; 42 3C ; Reserved instruction
	eor $66.b,S		; 43 66 ; Exclusive OR accumulator with stack relative $66.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $F2.b		; 02 F2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $36FE.w		; 0C FE 36 ; Test and set bits $36FE.w [Reads: Accumulator] [Flags: Z]
	brk $4B.b		; 00 4B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0000.w,X		; FE 00 00 ; Increment memory $0000.w,X [Reads: X Index] [Flags: ZN]
	adc $00002B.l,X		; 7F 2B 00 00 ; Add long $00002B.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($49.b,X)		; 01 49 ; Logical OR ($49.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $45		; 80 45 ; Branch always to $80, $45 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	eor $98.b,S		; 43 98 ; Exclusive OR accumulator with stack relative $98.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000028.l,X		; FF 28 00 00 ; Subtract with carry (long,X) $000028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $01004D.l,X		; FF 4D 00 01 ; Subtract with carry (long,X) $01004D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $98004D.l,X		; FF 4D 00 98 ; Subtract with carry (long,X) $98004D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	eor $7E.b		; 45 7E ; Exclusive OR $7E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0028.w,X		; FE 28 00 ; Increment memory $0028.w,X [Reads: X Index] [Flags: ZN]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $7E00.w		; 4C 00 7E ; Jump to $7E00.w [Flow: jump]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($4C.b,X)		; 01 4C ; Logical OR ($4C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	mvp $FE,$00		; 44 00 FE ; Move block positive $FE,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0000.w,X		; FE 00 00 ; Increment memory $0000.w,X [Reads: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	mvp $7F,$00		; 44 00 7F ; Move block positive $7F,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $002800.l,X		; 7F 00 28 00 ; Add long $002800.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $FE,$00		; 44 00 FE ; Move block positive $FE,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0000.w,X		; FE 00 00 ; Increment memory $0000.w,X [Reads: X Index] [Flags: ZN]
	sbc $000028.l,X		; FF 28 00 00 ; Subtract with carry (long,X) $000028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	mvp $7E,$00		; 44 00 7E ; Move block positive $7E,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0000.w,X		; 7E 00 00 ; Rotate right $0000.w,X [Reads: X Index] [Flags: ZNC]
	sbc $02002A.l,X		; FF 2A 00 02 ; Subtract with carry (long,X) $02002A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $7E00.w,X		; 7E 00 7E ; Rotate right $7E00.w,X [Reads: X Index] [Flags: ZNC]
	eor $3C.b,S		; 43 3C ; Exclusive OR accumulator with stack relative $3C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $0044.w,X		; FE 44 00 ; Increment memory $0044.w,X [Reads: X Index] [Flags: ZN]
	ror $FE00.w,X		; 7E 00 FE ; Rotate right $FE00.w,X [Reads: X Index] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $FF4300.l,X		; 7F 00 43 FF ; Add long $FF4300.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $2A7F00.l,X		; 7F 00 7F 2A ; Add long $2A7F00.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	jmp $7E00.w		; 4C 00 7E ; Jump to $7E00.w [Flow: jump]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($0C.b)		; 72 0C ; Add with carry (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $0030.w,X		; 7E 30 00 ; Rotate right $0030.w,X [Reads: X Index] [Flags: ZNC]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $7E,$00		; 44 00 7E ; Move block positive $7E,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0000.w,X		; 7E 00 00 ; Rotate right $0000.w,X [Reads: X Index] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	ror $7E.b		; 66 7E ; Rotate right $7E.b [Reads: Direct Page] [Flags: ZNC]
	mvp $FE,$00		; 44 00 FE ; Move block positive $FE,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $7E.b		; 02 7E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($66.b,X)		; 01 66 ; Logical OR ($66.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsl $060000.l		; 22 00 00 06 ; Jump to subroutine long $060000.l [Writes: Stack Pointer] [Flow: call]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($66.b,X)		; 01 66 ; Logical OR ($66.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $7E.b,S		; 43 7E ; Exclusive OR accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $44.b		; 66 44 ; Rotate right $44.b [Reads: Direct Page] [Flags: ZNC]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	eor $7E.b,S		; 43 7E ; Exclusive OR accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $18.b		; 66 18 ; Rotate right $18.b [Reads: Direct Page] [Flags: ZNC]
	mvp $00,$7E		; 44 7E 00 ; Move block positive $00,$7E [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7E0044.l,X		; FF 44 00 7E ; Subtract with carry (long,X) $7E0044.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $7E00.w,X		; 7E 00 7E ; Rotate right $7E00.w,X [Reads: X Index] [Flags: ZNC]
	bit $0200.w		; 2C 00 02 ; Test bits $0200.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ror $00.b		; 66 00 ; Rotate right $00.b [Reads: Direct Page] [Flags: ZNC]
	.db $42, $43		; 42 43 ; Reserved instruction
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $7E.b,S		; 43 7E ; Exclusive OR accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $0005.w,X		; 3C 05 00 ; Test bits $0005.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $2318.w,X		; 3C 18 23 ; Test bits $2318.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$0200.w		; E0 00 02 ; Compare #$0200.w with X register [Reads: X Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $4B00.w		; 2C 00 4B ; Test bits $4B00.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $4300.w		; 2D 00 43 ; Logical AND $4300.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $184400.l,X		; 1F 00 44 18 ; Logical OR long $184400.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $18.b		; 24 18 ; Test bits $18.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $0044.w,X		; 3C 44 00 ; Test bits $0044.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ldy $3C43.w,X		; BC 43 3C ; Load Y register $3C43.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	mvp $7F,$00		; 44 00 7F ; Move block positive $7F,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$7E.b]		; 47 7E ; Exclusive OR accumulator with memory (long) [$7E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $47.b		; 00 47 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $388700.l,X		; 7F 00 87 38 ; Add long $388700.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $833C.w,X		; 7E 3C 83 ; Rotate right $833C.w,X [Reads: X Index] [Flags: ZNC]
	ror $8300.w,X		; 7E 00 83 ; Rotate right $8300.w,X [Reads: X Index] [Flags: ZNC]
	rep #$02		; C2 02 ; Reset processor status bits #$02 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	cpx $4F.b		; E4 4F ; Compare $4F.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$0007.w		; 09 07 00 ; Logical OR #$0007.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $1F05.w		; 0D 05 1F ; Logical OR $1F05.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $1F.b		; 02 1F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$0022.w		; 09 22 00 ; Logical OR #$0022.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $07.b		; 04 07 ; Test and set bits $07.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($18.b),Y		; 11 18 ; OR accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $25.b,X		; 35 25 ; Logical AND $25.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $B0.b		; 00 B0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $40F8.w		; 20 F8 40 ; Jump to subroutine at $40F8.w [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $22		; 90 22 ; Branch if carry clear to $90, $22 [Flow: branch]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $D0, $88		; D0 88 ; Branch if not equal to $D0, $88 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $0025.w		; AC 25 00 ; Load $0025.w into Y register [Writes: Y Index] [Flags: ZN]
	ora #$0006.w		; 09 06 00 ; Logical OR #$0006.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0F1F06.l		; 0F 06 1F 0F ; OR accumulator with memory (long) $0F1F06.l [Writes: Accumulator] [Flags: ZN]
	ora $1C09.w,Y		; 19 09 1C ; OR accumulator with memory $1C09.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $0022.w		; 0C 22 00 ; Test and set bits $0022.w [Reads: Accumulator] [Flags: Z]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	ora #$1610.w		; 09 10 16 ; Logical OR #$1610.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($25.b,S),Y		; 13 25 ; OR accumulator (stack relative indirect indexed) ($25.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$F000.w		; E0 00 F0 ; Compare #$F000.w with X register [Reads: X Index] [Flags: ZNC]
	cpx #$F0F8.w		; E0 F8 F0 ; Compare #$F0F8.w with X register [Reads: X Index] [Flags: ZNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $B0, $38		; B0 38 ; Branch if carry set to $B0, $38 [Flow: branch]
	.db $30, $22		; 30 22 ; Branch if minus to $30, $22 [Flow: branch]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$0810.w		; E0 10 08 ; Compare #$0810.w with X register [Reads: X Index] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $36.b,S		; 83 36 ; Store accumulator (stack relative) $36.b,S [Reads: Accumulator, Stack Pointer]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and $113F04.l,X		; 3F 04 3F 11 ; AND accumulator with memory (long,X) $113F04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $060400.l		; 22 00 04 06 ; Jump to subroutine long $060400.l [Writes: Stack Pointer] [Flow: call]
	ora #$2814.w		; 09 14 28 ; Logical OR #$2814.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($25.b)		; 32 25 ; AND accumulator with memory (indirect) ($25.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$E000.w		; C0 00 E0 ; Compare #$E000.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$B043.w		; C0 43 B0 ; Compare #$B043.w with Y register [Reads: Y Index] [Flags: ZNC]
	ldy #$F801.w		; A0 01 F8 ; Load #$F801.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$5020.w		; C0 20 50 ; Compare #$5020.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $50, $08		; 50 08 ; Branch if overflow clear to $50, $08 [Flow: branch]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $03.b		; 06 03 ; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: ZNC]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $09.b		; 05 09 ; Logical OR $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $010027.l		; 0F 27 00 01 ; OR accumulator with memory (long) $010027.l [Writes: Accumulator] [Flags: ZN]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	eor $B8.b,S		; 43 B8 ; Exclusive OR accumulator with stack relative $B8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora ($DC.b,X)		; 01 DC ; Logical OR ($DC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ldy #$0023.w		; A0 23 00 ; Load #$0023.w into Y register [Writes: Y Index] [Flags: ZN]
	ora $30.b,S		; 03 30 ; OR accumulator with stack relative $30.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stz $27.b		; 64 27 ; Store zero to $27.b
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0F02.w		; 0D 02 0F ; Logical OR $0F02.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $05.b		; 02 05 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($70.b,X)		; 01 70 ; Logical OR ($70.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clv		; B8 ; Clear overflow flag [Flags: V]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $70.b,S		; 03 70 ; OR accumulator with stack relative $70.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($60.b,S),Y		; 13 60 ; OR accumulator (stack relative indirect indexed) ($60.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F2.b		; 00 F2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $227D.w		; 0C 7D 22 ; Test and set bits $227D.w [Reads: Accumulator] [Flags: Z]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ora $59.b,X		; 15 59 ; OR accumulator with memory $59.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $00.b,X		; 16 00 ; Arithmetic shift left $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $57AE.w		; 9C AE 57 ; Store zero to $57AE.w
	adc $236A.w		; 6D 6A 23 ; Add $236A.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	and $304F00.l,X		; 3F 00 4F 30 ; AND accumulator with memory (long,X) $304F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor $9FAC.w,X		; 5D AC 9F ; Exclusive OR accumulator with memory $9FAC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $00.b		; 66 00 ; Rotate right $00.b [Reads: Direct Page] [Flags: ZNC]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $EE75.w,Y		; 39 75 EE ; AND accumulator with memory $EE75.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($59.b,S),Y		; B3 59 ; Load accumulator (stack relative indirect indexed) ($59.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$003C.w		; 09 3C 00 ; Logical OR #$003C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	tsb $55.b		; 04 55 ; Test and set bits $55.b [Reads: Accumulator] [Flags: Z]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $1B.b		; 24 1B ; Test bits $1B.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $1A.b		; 25 1A ; Logical AND $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $3C0400.l		; 22 00 04 3C ; Jump to subroutine long $3C0400.l [Writes: Stack Pointer] [Flow: call]
	lsr $7B.b		; 46 7B ; Logical shift right $7B.b [Reads: Direct Page] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$003C.w		; 09 3C 00 ; Logical OR #$003C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	bit $96.b		; 24 96 ; Test bits $96.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $AE		; 90 AE ; Branch if carry clear to $90, $AE [Flow: branch]
	mvn $00,$22		; 54 22 00 ; Move block negative $00,$22 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $3C.b		; 04 3C ; Test and set bits $3C.b [Reads: Accumulator] [Flags: Z]
	ror $FE.b		; 66 FE ; Rotate right $FE.b [Reads: Direct Page] [Flags: ZNC]
	stz $E45A.w,X		; 9E 5A E4 ; Store zero to $E45A.w,X [Reads: X Index]
	and $60E000.l		; 2F 00 E0 60 ; AND accumulator with memory (long) $60E000.l [Writes: Accumulator] [Flags: ZN]
	eor $085F0C.l,X		; 5F 0C 5F 08 ; Exclusive OR accumulator with memory (long,X) $085F0C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $107E21.l		; 6F 21 7E 10 ; Add with carry (long) $107E21.l [Writes: Accumulator] [Flags: ZVNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	jsr $347C.w		; 20 7C 34 ; Jump to subroutine at $347C.w [Writes: Stack Pointer] [Flow: call]
	and [$01.b],Y		; 37 01 ; AND accumulator with memory (long indexed) [$01.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc ($77.b)		; 72 77 ; Add with carry (indirect) ($77.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $01364B.l,X		; 5F 4B 36 01 ; Exclusive OR accumulator with memory (long,X) $01364B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	.db $30, $FA		; 30 FA ; Branch if minus to $30, $FA [Flow: branch]
	.db $10, $F6		; 10 F6 ; Branch if plus to $10, $F6 [Flow: branch]
	sty $7E.b		; 84 7E ; Store Y register to $7E.b [Reads: Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr $3E04.w,X		; 5E 04 3E ; Logical shift right $3E04.w,X [Reads: X Index] [Flags: ZNC]
	bit $80EC.w		; 2C EC 80 ; Test bits $80EC.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	lsr $1AEE.w		; 4E EE 1A ; Logical shift right $1AEE.w [Flags: ZNC]
	dec $FA.b,X		; D6 FA ; Decrement memory $FA.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	cmp ($6C.b)		; D2 6C ; Compare accumulator (indirect) ($6C.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $80, $3E		; 80 3E ; Branch always to $80, $3E [Flow: branch]
	asl $1F3F.w,X		; 1E 3F 1F ; Arithmetic shift left $1F3F.w,X [Reads: X Index] [Flags: ZNC]
	and $2F6F0F.l		; 2F 0F 6F 2F ; AND accumulator with memory (long) $2F6F0F.l [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $000706.l,X		; 1F 06 07 00 ; Logical OR long $000706.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $30, $50		; 30 50 ; Branch if minus to $30, $50 [Flow: branch]
	mvn $19,$24		; 54 24 19 ; Move block negative $19,$24 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora [$7C.b]		; 07 7C ; OR accumulator with memory (long) [$7C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsr ($F4F8.w,X)		; FC F8 F4 ; Jump to subroutine indirect indexed ($F4F8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $F0, $DA		; F0 DA ; Branch if equal to $F0, $DA [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	dec $5CDC.w,X		; DE DC 5C ; Decrement memory $5CDC.w,X [Reads: X Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpx #$8400.w		; E0 00 84 ; Compare #$8400.w with X register [Reads: X Index] [Flags: ZNC]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	rol $22.b		; 26 22 ; Rotate left $22.b [Reads: Direct Page] [Flags: ZNC]
	ldy $98.b,X		; B4 98 ; Load Y register $98.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	cpx #$433F.w		; E0 3F 43 ; Compare #$433F.w with X register [Reads: X Index] [Flags: ZNC]
	ora $1F.b,S		; 03 1F ; OR accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $06.b,X		; 16 06 ; Arithmetic shift left $06.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $002A00.l		; 2F 00 2A 00 ; AND accumulator with memory (long) $002A00.l [Writes: Accumulator] [Flags: ZN]
	.db $30, $10		; 30 10 ; Branch if minus to $30, $10 [Flow: branch]
	ora $000F0F.l,X		; 1F 0F 0F 00 ; Logical OR long $000F0F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $1C.b		; 24 1C ; Test bits $1C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($3B.b),Y		; 11 3B ; OR accumulator with memory ($3B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $0F102F.l,X		; 3F 2F 10 0F ; AND accumulator with memory (long,X) $0F102F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	.db $D0, $C8		; D0 C8 ; Branch if not equal to $D0, $C8 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor $68.b,S		; 43 68 ; Exclusive OR accumulator with stack relative $68.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr $7BE0.w		; 20 E0 7B ; Jump to subroutine at $7BE0.w [Writes: Stack Pointer] [Flow: call]
	cpx $FCA8.w		; EC A8 FC ; Compare $FCA8.w with X register [Reads: X Index] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $90, $B0		; 90 B0 ; Branch if carry clear to $90, $B0 [Flow: branch]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	mvn $68,$C4		; 54 C4 68 ; Move block negative $68,$C4 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $B0, $19		; B0 19 ; Branch if carry set to $B0, $19 [Flow: branch]
	ora ($2F.b,X)		; 01 2F ; Logical OR ($2F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $2E.b,X		; 16 2E ; Arithmetic shift left $2E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($33.b),Y		; 11 33 ; OR accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $0837.w		; 0C 37 08 ; Test and set bits $0837.w [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $0F.b		; 05 0F ; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $3C37.w,Y		; 39 37 3C ; AND accumulator with memory $3C37.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	ora $DE030F.l,X		; 1F 0F 03 DE ; Logical OR long $DE030F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr $B04F.w		; 20 4F B0 ; Jump to subroutine at $B04F.w [Writes: Stack Pointer] [Flow: call]
	lda $5A.b		; A5 5A ; Load $5A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($6C.b)		; 92 6C ; Store accumulator (indirect) ($6C.b) [Reads: Accumulator, Direct Page]
	sty $3870.w		; 8C 70 38 ; Store Y register to $3870.w [Reads: Y Index]
	cpy #$00F0.w		; C0 F0 00 ; Compare #$00F0.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$E600.w		; C0 00 E6 ; Compare #$E600.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc $FB.b,X		; 75 FB ; Add $FB.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $F87C.w,X		; 7E 7C F8 ; Rotate right $F87C.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $C0		; F0 C0 ; Branch if equal to $F0, $C0 [Flow: branch]
	ora ($0C.b)		; 12 0C ; OR accumulator with memory (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $102E1C.l		; 22 1C 2E 10 ; Jump to subroutine long $102E1C.l [Writes: Stack Pointer] [Flow: call]
	and $0A.b,X		; 35 0A ; Logical AND $0A.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $19.b		; 26 19 ; Rotate left $19.b [Reads: Direct Page] [Flags: ZNC]
	rol $1F01.w,X		; 3E 01 1F ; Rotate left $1F01.w,X [Reads: X Index] [Flags: ZNC]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $39393B.l,X		; 3F 3B 39 39 ; AND accumulator with memory (long,X) $39393B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $80FC07.l,X		; 1F 07 FC 80 ; Logical OR long $80FC07.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpx $9690.w		; EC 90 96 ; Compare $9690.w with X register [Reads: X Index] [Flags: ZNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	lsr $A8.b,X		; 56 A8 ; Logical shift right $A8.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $FA.b,X		; 74 FA ; Store zero to $FA.b,X [Reads: X Index]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	rol $F8FC.w,X		; 3E FC F8 ; Rotate left $F8FC.w,X [Reads: X Index] [Flags: ZNC]
	cpy #$03CC.w		; C0 CC 03 ; Compare #$03CC.w with Y register [Reads: Y Index] [Flags: ZNC]
	inc $4301.w,X		; FE 01 43 ; Increment memory $4301.w,X [Reads: X Index] [Flags: ZN]
	bit $043B.w,X		; 3C 3B 04 ; Test bits $043B.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	bit $1F03.w,X		; 3C 03 1F ; Test bits $1F03.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $1302.w		; 1C 02 13 ; Test and reset bits $1302.w [Reads: Accumulator] [Flags: Z]
	jmp ($7D73.w,X)		; 7C 73 7D ; Jump indirect indexed to ($7D73.w,X) [Reads: X Index] [Flow: jump]
	bit $1F3F.w,X		; 3C 3F 1F ; Test bits $1F3F.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ora $C83703.l		; 0F 03 37 C8 ; OR accumulator with memory (long) $C83703.l [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sty $F6.b		; 84 F6 ; Store Y register to $F6.b [Reads: Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sty $3C70.w		; 8C 70 3C ; Store Y register to $3C70.w [Reads: Y Index]
	cpy #$00F8.w		; C0 F8 00 ; Compare #$00F8.w with Y register [Reads: Y Index] [Flags: ZNC]
	sta $34.b,S		; 83 34 ; Store accumulator (stack relative) $34.b,S [Reads: Accumulator, Stack Pointer]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $8EC6.w		; 2E C6 8E ; Rotate left $8EC6.w [Flags: ZNC]
	jmp ($F8FC.w,X)		; 7C FC F8 ; Jump indirect indexed to ($F8FC.w,X) [Reads: X Index] [Flow: jump]
	.db $F0, $C0		; F0 C0 ; Branch if equal to $F0, $C0 [Flow: branch]
	eor DMASRC3L.w		; 4D 32 43 ; Exclusive OR DMASRC3L.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0366.w,Y		; 99 66 03 ; Store accumulator to $0366.w,Y [Reads: Accumulator, Y Index]
	adc ($1E.b,X)		; 61 1E ; Add with carry ($1E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	ora [$85.b]		; 07 85 ; OR accumulator with memory (long) [$85.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($E6.b)		; 72 E6 ; Add with carry (indirect) ($E6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $7E.b		; E6 7E ; Increment $7E.b [Reads: Direct Page] [Flags: ZN]
	sta $84.b,S		; 83 84 ; Store accumulator (stack relative) $84.b,S [Reads: Accumulator, Stack Pointer]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	bit $D2.b		; 24 D2 ; Test bits $D2.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24DA.w		; 2C DA 24 ; Test bits $24DA.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	sta [$90.b]		; 87 90 ; Store accumulator (long) [$90.b] [Reads: Accumulator, Direct Page]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $2E26.w		; 4C 26 2E ; Jump to $2E26.w [Flow: jump]
	rol $9C83.w,X		; 3E 83 9C ; Rotate left $9C83.w,X [Reads: X Index] [Flags: ZNC]
	cop $E7.b		; 02 E7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $25FF00.l		; 2F 00 FF 25 ; AND accumulator with memory (long) $25FF00.l [Writes: Accumulator] [Flags: ZN]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	ora $0B1B06.l		; 0F 06 1B 0B ; OR accumulator with memory (long) $0B1B06.l [Writes: Accumulator] [Flags: ZN]
	bit $3F18.w,X		; 3C 18 3F ; Test bits $3F18.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	trb $0022.w		; 1C 22 00 ; Test and reset bits $0022.w [Reads: Accumulator] [Flags: Z]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	ora #$2314.w		; 09 14 23 ; Logical OR #$2314.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $0025.w		; 20 25 00 ; Jump to subroutine at $0025.w [Writes: Stack Pointer] [Flow: call]
	ora #$0060.w		; 09 60 00 ; Logical OR #$0060.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $60		; F0 60 ; Branch if equal to $F0, $60 [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	.db $D0, $3C		; D0 3C ; Branch if not equal to $D0, $3C [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsr ($2238.w,X)		; FC 38 22 ; Jump to subroutine indirect indexed ($2238.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $90, $28		; 90 28 ; Branch if carry clear to $90, $28 [Flow: branch]
	cpy $04.b		; C4 04 ; Compare $04.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $06.b,S		; 83 06 ; Store accumulator (stack relative) $06.b,S [Reads: Accumulator, Stack Pointer]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $09190F.l,X		; 1F 0F 19 09 ; Logical OR long $09190F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	trb $220C.w		; 1C 0C 22 ; Test and reset bits $220C.w [Reads: Accumulator] [Flags: Z]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $09.b		; 06 09 ; Arithmetic shift left $09.b [Reads: Direct Page] [Flags: ZNC]
	.db $10, $16		; 10 16 ; Branch if plus to $10, $16 [Flow: branch]
	ora ($25.b,S),Y		; 13 25 ; OR accumulator (stack relative indirect indexed) ($25.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$F000.w		; E0 00 F0 ; Compare #$F000.w with X register [Reads: X Index] [Flags: ZNC]
	cpx #$F0F8.w		; E0 F8 F0 ; Compare #$F0F8.w with X register [Reads: X Index] [Flags: ZNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $B0, $38		; B0 38 ; Branch if carry set to $B0, $38 [Flow: branch]
	.db $30, $22		; 30 22 ; Branch if minus to $30, $22 [Flow: branch]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$0810.w		; E0 10 08 ; Compare #$0810.w with X register [Reads: X Index] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$0003.w		; 09 03 00 ; Logical OR #$0003.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0F04.w		; 0C 04 0F ; Test and set bits $0F04.w [Reads: Accumulator] [Flags: Z]
	ora $1F.b,S		; 03 1F ; OR accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $0022.w		; 0C 22 00 ; Test and set bits $0022.w [Reads: Accumulator] [Flags: Z]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	tsb $0B.b		; 04 0B ; Test and set bits $0B.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $25		; 10 25 ; Branch if plus to $10, $25 [Flow: branch]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0300.w,X		; 1E 00 03 ; Arithmetic shift left $0300.w,X [Reads: X Index] [Flags: ZNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $90, $FC		; 90 FC ; Branch if carry clear to $90, $FC [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsl $600400.l		; 22 00 04 60 ; Jump to subroutine long $600400.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $28		; 90 28 ; Branch if carry clear to $90, $28 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	tsb $27.b		; 04 27 ; Test and set bits $27.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($83.b,X)		; 01 83 ; Logical OR ($83.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $24.b		; 06 24 ; Arithmetic shift left $24.b [Reads: Direct Page] [Flags: ZNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $07.b		; 05 07 ; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	.db $80, $E8		; 80 E8 ; Branch always to $80, $E8 [Flow: branch]
	.db $90, $23		; 90 23 ; Branch if carry clear to $90, $23 [Flow: branch]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $50D0.w		; 20 D0 50 ; Jump to subroutine at $50D0.w [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $98.b,S		; 83 98 ; Store accumulator (stack relative) $98.b,S [Reads: Accumulator, Stack Pointer]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZNC]
	ora $02.b		; 05 02 ; Logical OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $27.b		; 05 27 ; Logical OR $27.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$4300.w		; A0 00 43 ; Load #$4300.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	ora ($E8.b,X)		; 01 E8 ; Logical OR ($E8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $D0, $23		; D0 23 ; Branch if not equal to $D0, $23 [Flow: branch]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $D010.w		; 20 10 D0 ; Jump to subroutine at $D010.w [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $1E00.w		; 0C 00 1E ; Test and set bits $1E00.w [Reads: Accumulator] [Flags: Z]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $3F		; 10 3F ; Branch if plus to $10, $3F [Flow: branch]
	ora ($27.b),Y		; 11 27 ; OR accumulator with memory ($27.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	and $0025.w,X		; 3D 25 00 ; AND accumulator with memory $0025.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$0038.w		; 09 38 00 ; Logical OR #$0038.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp ($F408.w,X)		; 7C 08 F4 ; Jump indirect indexed to ($F408.w,X) [Reads: X Index] [Flow: jump]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $D8		; 80 D8 ; Branch always to $80, $D8 [Flow: branch]
	jsr $0022.w		; 20 22 00 ; Jump to subroutine at $0022.w [Writes: Stack Pointer] [Flow: call]
	tsb $38.b		; 04 38 ; Test and set bits $38.b [Reads: Accumulator] [Flags: Z]
	mvn $D8,$DC		; 54 DC D8 ; Move block negative $D8,$DC [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$001C.w		; 09 1C 00 ; Logical OR #$001C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $3F00.w,X		; 3E 00 3F ; Rotate left $3F00.w,X [Reads: X Index] [Flags: ZNC]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $1C.b		; 04 1C ; Test and set bits $1C.b [Reads: Accumulator] [Flags: Z]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $2B22.w		; 1C 22 2B ; Test and reset bits $2B22.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $0023.w		; 1C 23 00 ; Test and reset bits $0023.w [Reads: Accumulator] [Flags: Z]
	ora ($08.b,S),Y		; 13 08 ; OR accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DC.b		; 00 DC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $C0.b		; 24 C0 ; Test bits $C0.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $54.b,X		; 34 54 ; Test bits $54.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jmp.w [$3C14]		; DC 14 3C ; Jump long indirect [$3C14] [Flow: jump]
	cpx $2F.b		; E4 2F ; Compare $2F.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$17.b],Y		; 37 17 ; AND accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $367F29.l		; 6F 29 7F 36 ; Add with carry (long) $367F29.l [Writes: Accumulator] [Flags: ZVNC]
	eor $7A.b,S		; 43 7A ; Exclusive OR accumulator with stack relative $7A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $30, $13		; 30 13 ; Branch if minus to $30, $13 [Flow: branch]
	bit $1714.w,X		; 3C 14 17 ; Test bits $1714.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $49.b,X		; 56 49 ; Logical shift right $49.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $142B4F.l		; 4F 4F 2B 14 ; Exclusive OR accumulator with memory (long) $142B4F.l [Writes: Accumulator] [Flags: ZN]
	ora $EC.b,S		; 03 EC ; OR accumulator with stack relative $EC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inc $14.b,X		; F6 14 ; Increment memory $14.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	inc $43EC.w,X		; FE EC 43 ; Increment memory $43EC.w,X [Reads: X Index] [Flags: ZN]
	lsr $E00C.w,X		; 5E 0C E0 ; Logical shift right $E00C.w,X [Reads: X Index] [Flags: ZNC]
	.db $42, $3C		; 42 3C ; Reserved instruction
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpy #$00C0.w		; C0 C0 00 ; Compare #$00C0.w with Y register [Reads: Y Index] [Flags: ZNC]
	mvn $12,$EA		; 54 EA 12 ; Move block negative $12,$EA [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc ($F2.b)		; F2 F2 ; Subtract with carry (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pei ($28.b)		; D4 28 ; Push effective indirect address ($28.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cpy #$1E3E.w		; C0 3E 1E ; Compare #$1E3E.w with Y register [Reads: Y Index] [Flags: ZNC]
	and $37771F.l,X		; 3F 1F 77 37 ; AND accumulator with memory (long,X) $37771F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $26.b		; 66 26 ; Rotate right $26.b [Reads: Direct Page] [Flags: ZNC]
	and $071F07.l		; 2F 07 1F 07 ; AND accumulator with memory (long) $071F07.l [Writes: Accumulator] [Flags: ZN]
	ora $000303.l		; 0F 03 03 00 ; OR accumulator with memory (long) $000303.l [Writes: Accumulator] [Flags: ZN]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $1838.w,Y		; 59 38 18 ; Exclusive OR accumulator with memory $1838.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $7C03.w		; 0C 03 7C ; Test and set bits $7C03.w [Reads: Accumulator] [Flags: Z]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsr ($FEF8.w,X)		; FC F8 FE ; Jump to subroutine indirect indexed ($FEF8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($F4F6.w,X)		; FC F6 F4 ; Jump to subroutine indirect indexed ($F4F6.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $20.b,X		; 34 20 ; Test bits $20.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jmp.w [$F0F8]		; DC F8 F0 ; Jump long indirect [$F0F8] [Flow: jump]
	cpy #$0F1F.w		; C0 1F 0F ; Compare #$0F1F.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora $430B03.l		; 0F 03 0B 43 ; OR accumulator with memory (long) $430B03.l [Writes: Accumulator] [Flags: ZN]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$0150.w		; E0 50 01 ; Compare #$0150.w with X register [Reads: X Index] [Flags: ZNC]
	ora ($03.b,S),Y		; 13 03 ; OR accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $000706.l		; 0F 06 07 00 ; OR accumulator with memory (long) $000706.l [Writes: Accumulator] [Flags: ZN]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	ora $1C1E1F.l		; 0F 1F 1E 1C ; OR accumulator with memory (long) $1C1E1F.l [Writes: Accumulator] [Flags: ZN]
	ora #$FC07.w		; 09 07 FC ; Logical OR #$FC07.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	cpx $C668.w		; EC 68 C6 ; Compare $C668.w with X register [Reads: X Index] [Flags: ZNC]
	mvp $F4,$F6		; 44 F6 F4 ; Move block positive $F4,$F6 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	dec $54.b,X		; D6 54 ; Decrement memory $54.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	jmp.w [$D858]		; DC 58 D8 ; Jump long indirect [$D858] [Flow: jump]
	cpy #$00E0.w		; C0 E0 00 ; Compare #$00E0.w with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $94.b		; 04 94 ; Test and set bits $94.b [Reads: Accumulator] [Flags: Z]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy $38.b		; A4 38 ; Load $38.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cpx #$0109.w		; E0 09 01 ; Compare #$0109.w with X register [Reads: X Index] [Flags: ZNC]
	ora $081F06.l		; 0F 06 1F 08 ; OR accumulator with memory (long) $081F06.l [Writes: Accumulator] [Flags: ZN]
	.db $30, $0F		; 30 0F ; Branch if minus to $30, $0F [Flow: branch]
	and $1F0F.w,X		; 3D 0F 1F ; AND accumulator with memory $1F0F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $0F.b		; 06 0F ; Arithmetic shift left $0F.b [Reads: Direct Page] [Flags: ZNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$3F1F.w		; 09 1F 3F ; Logical OR #$3F1F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $030F1F.l,X		; 3F 1F 0F 03 ; AND accumulator with memory (long,X) $030F1F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $90, $A4		; 90 A4 ; Branch if carry clear to $90, $A4 [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	trb $3CE8.w		; 1C E8 3C ; Test and reset bits $3CE8.w [Reads: Accumulator] [Flags: Z]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	cpy #$00F0.w		; C0 F0 00 ; Compare #$00F0.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$9800.w		; C0 00 98 ; Compare #$9800.w with Y register [Reads: Y Index] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsl $F80EFC.l		; 22 FC 0E F8 ; Jump to subroutine long $F80EFC.l [Writes: Stack Pointer] [Flow: call]
	.db $F0, $C0		; F0 C0 ; Branch if equal to $F0, $C0 [Flow: branch]
	ora $0F02.w		; 0D 02 0F ; Logical OR $0F02.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $13.b		; 04 13 ; Test and set bits $13.b [Reads: Accumulator] [Flags: Z]
	asl $0B34.w		; 0E 34 0B ; Arithmetic shift left $0B34.w [Flags: ZNC]
	rol $1F03.w,X		; 3E 03 1F ; Rotate left $1F03.w,X [Reads: X Index] [Flags: ZNC]
	ora ($83.b,X)		; 01 83 ; Logical OR ($83.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $0102.w		; 1C 02 01 ; Test and reset bits $0102.w [Reads: Accumulator] [Flags: Z]
	ora $850F.w		; 0D 0F 85 ; Logical OR $850F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $780B02.l		; 22 02 0B 78 ; Jump to subroutine long $780B02.l [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $50, $C4		; 50 C4 ; Branch if overflow clear to $50, $C4 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sty $78.b,X		; 94 78 ; Store Y register $78.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	bit $F8E8.w,X		; 3C E8 F8 ; Test bits $F8E8.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cpx #$3483.w		; E0 83 34 ; Compare #$3483.w with X register [Reads: X Index] [Flags: ZNC]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clv		; B8 ; Clear overflow flag [Flags: V]
	clv		; B8 ; Clear overflow flag [Flags: V]
	jmp ($3B84.w,X)		; 7C 84 3B ; Jump indirect indexed to ($3B84.w,X) [Reads: X Index] [Flow: jump]
	cop $0B.b		; 02 0B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $13.b,X		; 34 13 ; Test bits $13.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	bit $64.b		; 24 64 ; Test bits $64.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $3F17.w,X		; 3C 17 3F ; Test bits $3F17.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ora $1F.b,S		; 03 1F ; OR accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $0202.w		; 1C 02 02 ; Test and reset bits $0202.w [Reads: Accumulator] [Flags: Z]
	bit $7F7F.w		; 2C 7F 7F ; Test bits $7F7F.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	sty $23.b		; 84 23 ; Store Y register to $23.b [Reads: Y Index]
	cop $0B.b		; 02 0B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $D8.b		; 24 D8 ; Test bits $D8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cmp ($3C.b)		; D2 3C ; Compare accumulator (indirect) ($3C.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	asl $1CEC.w,X		; 1E EC 1C ; Arithmetic shift left $1CEC.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $FC		; F0 FC ; Branch if equal to $F0, $FC [Flow: branch]
	cpx #$00F8.w		; E0 F8 00 ; Compare #$00F8.w with X register [Reads: X Index] [Flags: ZNC]
	sta $34.b,S		; 83 34 ; Store accumulator (stack relative) $34.b,S [Reads: Accumulator, Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $FEFE.w,X		; 3C FE FE ; Test bits $FEFE.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sty $3B.b		; 84 3B ; Store Y register to $3B.b [Reads: Y Index]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1C.b,S		; 23 1C ; AND accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $3B3F61.l,X		; 3F 61 3F 3B ; AND accumulator with memory (long,X) $3B3F61.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $053F.w,X		; 1D 3F 05 ; OR accumulator with memory $053F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7A.b		; 85 7A ; Store accumulator to $7A.b [Reads: Accumulator]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $028186.l,X		; 3F 86 81 02 ; AND accumulator with memory (long,X) $028186.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $E4.b		; 06 E4 ; Arithmetic shift left $E4.b [Reads: Direct Page] [Flags: ZNC]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $16.b		; E4 16 ; Compare $16.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $883C.w		; EC 3C 88 ; Compare $883C.w with X register [Reads: X Index] [Flags: ZNC]
	sta $FC0002.l		; 8F 02 00 FC ; Store accumulator (long) $FC0002.l [Reads: Accumulator]
	stx $99.b		; 86 99 ; Store X register to $99.b [Reads: X Index]
	cop $E4.b		; 02 E4 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($00.b),Y		; 31 00 ; AND accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx #$0321.w		; E0 21 03 ; Compare #$0321.w with X register [Reads: X Index] [Flags: ZNC]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $3C.b,S		; 03 3C ; OR accumulator with stack relative $3C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $0878.w		; 0C 78 08 ; Test and set bits $0878.w [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	clc		; 18 ; Clear carry flag [Flags: C]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr ($000C.w,X)		; FC 0C 00 ; Jump to subroutine indirect indexed ($000C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $0C.b,S		; 03 0C ; OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($57.b,S),Y		; 33 57 ; AND accumulator (stack relative indirect indexed) ($57.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$97.b]		; A7 97 ; Load accumulator (long) [$97.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($00.b,S),Y		; 93 00 ; Store accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$307C.w		; C0 7C 30 ; Compare #$307C.w with Y register [Reads: Y Index] [Flags: ZNC]
	inc $4F10.w,X		; FE 10 4F ; Increment memory $4F10.w,X [Reads: X Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $7A.b,S		; 83 7A ; Store accumulator (stack relative) $7A.b,S [Reads: Accumulator, Stack Pointer]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $8C		; 30 8C ; Branch if minus to $30, $8C [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $E9.b,X		; B5 E9 ; Load $E9.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0085.w,Y		; F9 85 00 ; Subtract with carry $0085.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $11.b,S		; 03 11 ; OR accumulator with stack relative $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $780E.w,X		; 3E 0E 78 ; Rotate left $780E.w,X [Reads: X Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr ($FE1C.w,X)		; FC 1C FE ; Jump to subroutine indirect indexed ($FE1C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	asl $03FF.w		; 0E FF 03 ; Arithmetic shift left $03FF.w [Flags: ZNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $5731.w		; 0C 31 57 ; Test and set bits $5731.w [Reads: Accumulator] [Flags: Z]
	lda $91.b,S		; A3 91 ; Load accumulator (stack relative) $91.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sty $1885.w		; 8C 85 18 ; Store Y register to $1885.w [Reads: Y Index]
	ora $11.b,S		; 03 11 ; OR accumulator with stack relative $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jmp $00EE10.l		; 5C 10 EE 00 ; Jump long to $00EE10.l [Flow: jump]
	eor $303F08.l		; 4F 08 3F 30 ; Exclusive OR accumulator with memory (long) $303F08.l [Writes: Accumulator] [Flags: ZN]
	sbc $C00080.l,X		; FF 80 00 C0 ; Subtract with carry (long,X) $C00080.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $AC		; 30 AC ; Branch if minus to $30, $AC [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $C9.b,X		; B5 C9 ; Load $C9.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($83.b),Y		; 71 83 ; Add with carry ($83.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $00.b		; 64 00 ; Store zero to $00.b
	ora ($0C.b,S),Y		; 13 0C ; OR accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($37.b,X)		; 01 37 ; Logical OR ($37.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $5F.b,X		; 16 5F ; Arithmetic shift left $5F.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $0300.w		; 1C 00 03 ; Test and reset bits $0300.w [Reads: Accumulator] [Flags: Z]
	ora $3E3F1D.l		; 0F 1D 3F 3E ; OR accumulator with memory (long) $3E3F1D.l [Writes: Accumulator] [Flags: ZN]
	and #$8562.w		; 29 62 85 ; Logical AND #$8562.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $70, $FC		; 70 FC ; Branch if overflow set to $70, $FC [Flow: branch]
	cpx #$00FE.w		; E0 FE 00 ; Compare #$00FE.w with X register [Reads: X Index] [Flags: ZNC]
	eor $FA.b,S		; 43 FA ; Exclusive OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $07.b		; 04 07 ; Test and set bits $07.b [Reads: Accumulator] [Flags: Z]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $88		; 30 88 ; Branch if minus to $30, $88 [Flow: branch]
	trb $E2.b		; 14 E2 ; Test and reset bits $E2.b [Reads: Accumulator] [Flags: Z]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	and #$0500.w		; 29 00 05 ; Logical AND #$0500.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $091F00.l		; 0F 00 1F 09 ; OR accumulator with memory (long) $091F00.l [Writes: Accumulator] [Flags: ZN]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00231F.l		; 0F 1F 23 00 ; OR accumulator with memory (long) $00231F.l [Writes: Accumulator] [Flags: ZN]
	ora ($10.b,S),Y		; 13 10 ; OR accumulator (stack relative indirect indexed) ($10.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $7E		; 10 7E ; Branch if plus to $10, $7E [Flow: branch]
	.db $10, $F9		; 10 F9 ; Branch if plus to $10, $F9 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $C7E4.w,X		; DD E4 C7 ; Compare accumulator $C7E4.w,X [Reads: X Index] [Flags: ZNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	ror $FBFF.w,X		; 7E FF FB ; Rotate right $FBFF.w,X [Reads: X Index] [Flags: ZNC]
	sbc $002B.w,X		; FD 2B 00 ; Subtract with carry $002B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $9C.b,S		; 83 9C ; Store accumulator (stack relative) $9C.b,S [Reads: Accumulator, Stack Pointer]
	ora $25.b,S		; 03 25 ; OR accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00231F.l		; 0F 1F 23 00 ; OR accumulator with memory (long) $00231F.l [Writes: Accumulator] [Flags: ZN]
	sta ($AC.b,S),Y		; 93 AC ; Store accumulator (stack relative indirect indexed) ($AC.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ora $25.b,S		; 03 25 ; OR accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $60		; B0 60 ; Branch if carry set to $B0, $60 [Flow: branch]
	ora $F7.b,S		; 03 F7 ; OR accumulator with stack relative $F7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	adc $002215.l,X		; 7F 15 22 00 ; Add long $002215.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $60.b		; 04 60 ; Test and set bits $60.b [Reads: Accumulator] [Flags: Z]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	sbc [$7F.b],Y		; F7 7F ; Subtract with carry (long indexed) [$7F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0306.w		; 0D 06 03 ; Logical OR $0306.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $A8FE02.l		; EF 02 FE A8 ; Subtract with carry (long) $A8FE02.l [Writes: Accumulator] [Flags: ZVNC]
	jsl $060400.l		; 22 00 04 06 ; Jump to subroutine long $060400.l [Writes: Stack Pointer] [Flow: call]
	ora $FEEF0F.l		; 0F 0F EF FE ; OR accumulator with memory (long) $FEEF0F.l [Writes: Accumulator] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$1C.b]		; 07 1C ; OR accumulator with memory (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $3B6F14.l,X		; 3F 14 6F 3B ; AND accumulator with memory (long,X) $3B6F14.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc [$3B.b]		; 67 3B ; Add with carry (long) [$3B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1C.b,S		; 03 1C ; OR accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $277F7F.l,X		; 3F 7F 7F 27 ; AND accumulator with memory (long,X) $277F7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $FC10.w,X		; 3C 10 FC ; Test bits $FC10.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	inc $DC.b,X		; F6 DC ; Increment memory $DC.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	inc $DC.b		; E6 DC ; Increment $DC.b [Reads: Direct Page] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $3C.b,S		; 03 3C ; OR accumulator with stack relative $3C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr ($FEFE.w,X)		; FC FE FE ; Jump to subroutine indirect indexed ($FEFE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpx $2F.b		; E4 2F ; Compare $2F.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $771FFF.l		; 2F FF 1F 77 ; AND accumulator with memory (long) $771FFF.l [Writes: Accumulator] [Flags: ZN]
	and $3A.b,X		; 35 3A ; Logical AND $3A.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $3B		; 10 3B ; Branch if plus to $10, $3B [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $011F08.l,X		; 1F 08 1F 01 ; Logical OR long $011F08.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $000800.l,X		; 1F 00 08 00 ; Logical OR long $000800.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$2F4A.w		; A0 4A 2F ; Load #$2F4A.w into Y register [Writes: Y Index] [Flags: ZN]
	bit $10.b		; 24 10 ; Test bits $10.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	.db $10, $17		; 10 17 ; Branch if plus to $10, $17 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $A4E618.l,X		; 1F 18 E6 A4 ; Logical OR long $A4E618.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	mvn $9C,$00		; 54 00 9C ; Move block negative $9C,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	.db $80, $F8		; 80 F8 ; Branch always to $80, $F8 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsr ($0864.w,X)		; FC 64 08 ; Jump to subroutine indirect indexed ($0864.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $43		; 10 43 ; Branch if plus to $10, $43 [Flow: branch]
	adc $3F4300.l,X		; 7F 00 43 3F ; Add long $3F4300.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $070F08.l,X		; 1F 08 0F 07 ; Logical OR long $070F08.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$22.b]		; 07 22 ; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $40.b,S		; 43 40 ; Exclusive OR accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr $1738.w		; 20 38 17 ; Jump to subroutine at $1738.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$44.b]		; 07 44 ; OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FC.b,S		; 43 FC ; Exclusive OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	ldy #$22E0.w		; A0 E0 22 ; Load #$22E0.w into Y register [Writes: Y Index] [Flags: ZN]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($02.b)		; 92 02 ; Store accumulator (indirect) ($02.b) [Reads: Accumulator, Direct Page]
	tsb $1C.b		; 04 1C ; Test and set bits $1C.b [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	.db $50, $E0		; 50 E0 ; Branch if overflow clear to $50, $E0 [Flow: branch]
	brk $4F.b		; 00 4F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $EB.b		; 06 EB ; Arithmetic shift left $EB.b [Reads: Direct Page] [Flags: ZNC]
	jsl $FC1AFA.l		; 22 FA 1A FC ; Jump to subroutine long $FC1AFA.l [Writes: Stack Pointer] [Flow: call]
	tsb $7E.b		; 04 7E ; Test and set bits $7E.b [Reads: Accumulator] [Flags: Z]
	asl $3F.b		; 06 3F ; Arithmetic shift left $3F.b [Reads: Direct Page] [Flags: ZNC]
	ora [$83.b]		; 07 83 ; OR accumulator with memory (long) [$83.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sty $1404.w		; 8C 04 14 ; Store Y register to $1404.w [Reads: Y Index]
	adc $859D.w,Y		; 79 9D 85 ; Add $859D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $61.b,S		; 83 61 ; Store accumulator (stack relative) $61.b,S [Reads: Accumulator, Stack Pointer]
	jsr $0817.w		; 20 17 08 ; Jump to subroutine at $0817.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tsb $E4.b		; 04 E4 ; Test and set bits $E4.b [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp.w [$7CA0]		; DC A0 7C ; Jump long indirect [$7CA0] [Flow: jump]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	cpy #$22C0.w		; C0 C0 22 ; Compare #$22C0.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $5C.b		; 86 5C ; Store X register to $5C.b [Reads: X Index]
	jmp ($08A4.w,X)		; 7C A4 08 ; Jump indirect indexed to ($08A4.w,X) [Reads: X Index] [Flow: jump]
	.db $30, $C0		; 30 C0 ; Branch if minus to $30, $C0 [Flow: branch]
	brk $1D.b		; 00 1D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $1C06.w,Y		; 19 06 1C ; OR accumulator with memory $1C06.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $260F0C.l,X		; 1F 0C 0F 26 ; Logical OR long $260F0C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $13171B.l,X		; 1F 1B 17 13 ; Logical OR long $13171B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0C0022.l		; 0F 22 00 0C ; OR accumulator with memory (long) $0C0022.l [Writes: Accumulator] [Flags: ZN]
	sbc $C6FFB8.l		; EF B8 FF C6 ; Subtract with carry (long) $C6FFB8.l [Writes: Accumulator] [Flags: ZVNC]
	inc $FF7C.w,X		; FE 7C FF ; Increment memory $FF7C.w,X [Reads: X Index] [Flags: ZN]
	adc ($FF.b)		; 72 FF ; Add with carry (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl $7E.b		; 06 7E ; Arithmetic shift left $7E.b [Reads: Direct Page] [Flags: ZNC]
	bit $223C.w,X		; 3C 3C 22 ; Test bits $223C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FDFEFF.l,X		; FF FF FE FD ; Subtract with carry (long,X) $FDFEFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $3C42.w,Y		; F9 42 3C ; Subtract with carry $3C42.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $030A.w,X		; 1D 0A 03 ; OR accumulator with memory $030A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $0703.w		; 0C 03 07 ; Test and set bits $0703.w [Reads: Accumulator] [Flags: Z]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $1F0600.l		; 22 00 06 1F ; Jump to subroutine long $1F0600.l [Writes: Stack Pointer] [Flow: call]
	ora $070F.w,X		; 1D 0F 07 ; OR accumulator with memory $070F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($86.b,X)		; 01 86 ; Logical OR ($86.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$05.b]		; 27 05 ; AND accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $FC.b		; 06 FC ; Arithmetic shift left $FC.b [Reads: Direct Page] [Flags: ZNC]
	.db $70, $F8		; 70 F8 ; Branch if overflow set to $70, $F8 [Flow: branch]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	jsl $FF1200.l		; 22 00 12 FF ; Jump to subroutine long $FF1200.l [Writes: Stack Pointer] [Flow: call]
	sbc $F8FCFE.l,X		; FF FE FC F8 ; Subtract with carry (long,X) $F8FCFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	ror $6E3D.w		; 6E 3D 6E ; Rotate right $6E3D.w [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $3817.w,X		; 3E 17 38 ; Rotate left $3817.w,X [Reads: X Index] [Flags: ZNC]
	ora $07070F.l		; 0F 0F 07 07 ; OR accumulator with memory (long) $07070F.l [Writes: Accumulator] [Flags: ZN]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc $383F7F.l,X		; 7F 7F 3F 38 ; Add long $383F7F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $000007.l		; 0F 07 00 00 ; OR accumulator with memory (long) $000007.l [Writes: Accumulator] [Flags: ZN]
	ror $BC.b,X		; 76 BC ; Rotate right $BC.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ror $DC.b,X		; 76 DC ; Rotate right $DC.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sta $60.b,S		; 83 60 ; Store accumulator (stack relative) $60.b,S [Reads: Accumulator, Stack Pointer]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$0026.w		; E0 26 00 ; Compare #$0026.w with X register [Reads: X Index] [Flags: ZNC]
	tsb $FE.b		; 04 FE ; Test and set bits $FE.b [Reads: Accumulator] [Flags: Z]
	inc $F83C.w,X		; FE 3C F8 ; Increment memory $F83C.w,X [Reads: X Index] [Flags: ZN]
	cpx #$0022.w		; E0 22 00 ; Compare #$0022.w with X register [Reads: X Index] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc ($3C.b,S),Y		; 73 3C ; Add with carry (stack relative indirect indexed) ($3C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	trb $0D3F.w		; 1C 3F 0D ; Test and reset bits $0D3F.w [Reads: Accumulator] [Flags: Z]
	and $051F12.l,X		; 3F 12 1F 05 ; AND accumulator with memory (long,X) $051F12.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$24.b]		; 07 24 ; OR accumulator with memory (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $3F3E7F.l,X		; 7F 7F 3E 3F ; Add long $3F3E7F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $000007.l,X		; 1F 07 00 00 ; Logical OR long $000007.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $BE3C.w		; CE 3C BE ; Decrement $BE3C.w [Flags: ZN]
	.db $10, $FC		; 10 FC ; Branch if plus to $10, $FC [Flow: branch]
	.db $50, $FC		; 50 FC ; Branch if overflow clear to $50, $FC [Flow: branch]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clv		; B8 ; Clear overflow flag [Flags: V]
	jsr ($3820.w,X)		; FC 20 38 ; Jump to subroutine indirect indexed ($3820.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsl $FE0600.l		; 22 00 06 FE ; Jump to subroutine long $FE0600.l [Writes: Stack Pointer] [Flow: call]
	inc $FCBC.w,X		; FE BC FC ; Increment memory $FCBC.w,X [Reads: X Index] [Flags: ZN]
	cpy $DC.b		; C4 DC ; Compare $DC.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	cpx $30.b		; E4 30 ; Compare $30.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $8F.b		; E4 8F ; Compare $8F.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $06.b,S		; 43 06 ; Exclusive OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cop $0B.b		; 02 0B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$1F.b]		; 07 1F ; OR accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1F0E.w		; 0D 0E 1F ; Logical OR $1F0E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	cpx #$3000.w		; E0 00 30 ; Compare #$3000.w with X register [Reads: X Index] [Flags: ZNC]
	cpy #$F008.w		; C0 08 F0 ; Compare #$F008.w with Y register [Reads: Y Index] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $D0, $F4		; D0 F4 ; Branch if not equal to $D0, $F4 [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	pea $F498.w		; F4 98 F4 ; Push absolute address $F498.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr $F0E0.w		; 20 E0 F0 ; Jump to subroutine at $F0E0.w [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($3C7C.w,X)		; FC 7C 3C ; Jump to subroutine indirect indexed ($3C7C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $06.b,S		; 43 06 ; Exclusive OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($F0.b,X)		; 01 F0 ; Logical OR ($F0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	stx $00.b,Y		; 96 00 ; Store X register $00.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	cpx #$042D.w		; E0 2D 04 ; Compare #$042D.w with X register [Reads: X Index] [Flags: ZNC]
	ora $08.b,S		; 03 08 ; OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$0B.b]		; 07 0B ; OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$17.b]		; 07 17 ; OR accumulator with memory (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0B17.w		; 0C 17 0B ; Test and set bits $0B17.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $03.b		; 06 03 ; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: ZNC]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0F1C1F.l		; 0F 1F 1C 0F ; OR accumulator with memory (long) $0F1C1F.l [Writes: Accumulator] [Flags: ZN]
	ora #$00C0.w		; 09 C0 00 ; Logical OR #$00C0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $10C0.w		; 20 C0 10 ; Jump to subroutine at $10C0.w [Writes: Stack Pointer] [Flow: call]
	cpx #$E0D0.w		; E0 D0 E0 ; Compare #$E0D0.w with X register [Reads: X Index] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $30, $E8		; 30 E8 ; Branch if minus to $30, $E8 [Flow: branch]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	.db $80, $78		; 80 78 ; Branch always to $80, $78 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpy #$F0E0.w		; C0 E0 F0 ; Compare #$F0E0.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $70, $98		; 70 98 ; Branch if overflow set to $70, $98 [Flow: branch]
	sta $F0.b		; 85 F0 ; Store accumulator to $F0.b [Reads: Accumulator]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $180F.w		; 1C 0F 18 ; Test and reset bits $180F.w [Reads: Accumulator] [Flags: Z]
	ora $1E0B1D.l		; 0F 1D 0B 1E ; OR accumulator with memory (long) $1E0B1D.l [Writes: Accumulator] [Flags: ZN]
	ora [$2E.b]		; 07 2E ; OR accumulator with memory (long) [$2E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b,S),Y		; 13 03 ; OR accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $1F.b,S		; 23 1F ; AND accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	.db $F0, $B8		; F0 B8 ; Branch if equal to $F0, $B8 [Flow: branch]
	.db $D0, $70		; D0 70 ; Branch if not equal to $D0, $70 [Flow: branch]
	cpx #$C078.w		; E0 78 C0 ; Compare #$C078.w with X register [Reads: X Index] [Flags: ZNC]
	cpy #$F0E0.w		; C0 E0 F0 ; Compare #$F0E0.w with Y register [Reads: Y Index] [Flags: ZNC]
	jsl $F001F8.l		; 22 F8 01 F0 ; Jump to subroutine long $F001F8.l [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	cpx $BF.b		; E4 BF ; Compare $BF.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $320800.l,X		; 1F 00 08 32 ; Logical OR long $320800.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($1A.b,X)		; 01 1A ; Logical OR ($1A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora #$040F.w		; 09 0F 04 ; Logical OR #$040F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $1F		; 10 1F ; Branch if plus to $10, $1F [Flow: branch]
	rol $0B16.w,X		; 3E 16 0B ; Rotate left $0B16.w,X [Reads: X Index] [Flags: ZNC]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $3C		; 30 3C ; Branch if minus to $30, $3C [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	bit $6ED8.w		; 2C D8 6E ; Test bits $6ED8.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ldy $78DE.w,X		; BC DE 78 ; Load Y register $78DE.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	inc $FEE4.w,X		; FE E4 FE ; Increment memory $FEE4.w,X [Reads: X Index] [Flags: ZN]
	trb $003C.w		; 1C 3C 00 ; Test and reset bits $003C.w [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	bit $7E3C.w,X		; 3C 3C 7E ; Test bits $7E3C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	inc $E2FA.w,X		; FE FA E2 ; Increment memory $E2FA.w,X [Reads: X Index] [Flags: ZN]
	bit $1F43.w,X		; 3C 43 1F ; Test bits $1F43.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $061B02.l,X		; 3F 02 1B 06 ; AND accumulator with memory (long,X) $061B02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0F0E.w,Y		; 19 0E 0F ; OR accumulator with memory $0F0E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $83.b		; 06 83 ; Arithmetic shift left $83.b [Reads: Direct Page] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cop $E0.b		; 02 E0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $1310.w		; 2C 10 13 ; Test bits $1310.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and [$1F.b]		; 27 1F ; AND accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $03060F.l,X		; 1F 0F 06 03 ; Logical OR long $03060F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $30, $38		; 30 38 ; Branch if minus to $30, $38 [Flow: branch]
	.db $D0, $2C		; D0 2C ; Branch if not equal to $D0, $2C [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	trb $5874.w		; 1C 74 58 ; Test and reset bits $5874.w [Reads: Accumulator] [Flags: Z]
	jsr ($F818.w,X)		; FC 18 F8 ; Jump to subroutine indirect indexed ($F818.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpx #$00F0.w		; E0 F0 00 ; Compare #$00F0.w with X register [Reads: X Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $BCFE.w,X		; 3C FE BC ; Test bits $BCFE.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	jsr ($F018.w,X)		; FC 18 F0 ; Jump to subroutine indirect indexed ($F018.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora [$0B.b],Y		; 17 0B ; OR accumulator with memory (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$18.b]		; 27 18 ; AND accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $022700.l,X		; 3F 00 27 02 ; AND accumulator with memory (long,X) $022700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $1E1B.w,X		; 3D 1B 1E ; AND accumulator with memory $1E1B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $100900.l		; 22 00 09 10 ; Jump to subroutine long $100900.l [Writes: Stack Pointer] [Flow: call]
	bit $3C.b		; 24 3C ; Test bits $3C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $1F27.w,X		; 3E 27 1F ; Rotate left $1F27.w,X [Reads: X Index] [Flags: ZNC]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx $D8.b		; E4 D8 ; Compare $D8.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	sta $B4.b,S		; 83 B4 ; Store accumulator (stack relative) $B4.b,S [Reads: Accumulator, Stack Pointer]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $70, $F8		; 70 F8 ; Branch if overflow set to $70, $F8 [Flow: branch]
	cpy #$B0F8.w		; C0 F8 B0 ; Compare #$B0F8.w with Y register [Reads: Y Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	tsb $34.b		; 04 34 ; Test and set bits $34.b [Reads: Accumulator] [Flags: Z]
	sec		; 38 ; Set carry flag [Flags: C]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sed		; F8 ; Set decimal flag [Flags: D]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $F0, $27		; F0 27 ; Branch if equal to $F0, $27 [Flow: branch]
	ora $0A17.w,Y		; 19 17 0A ; OR accumulator with memory $0A17.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1C07.w,X		; 1D 07 1C ; OR accumulator with memory $1C07.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0F0F1E.l		; 0F 1E 0F 0F ; OR accumulator with memory (long) $0F0F1E.l [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $270100.l		; 22 00 01 27 ; Jump to subroutine long $270100.l [Writes: Stack Pointer] [Flow: call]
	ora [$22.b],Y		; 17 22 ; OR accumulator with memory (long indexed) [$22.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $030F1A.l,X		; 1F 1A 0F 03 ; Logical OR long $030F1A.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx $58.b		; E4 58 ; Compare $58.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	ldy $74C0.w,X		; BC C0 74 ; Load Y register $74C0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $D0, $F8		; D0 F8 ; Branch if not equal to $D0, $F8 [Flow: branch]
	cpx #$90F8.w		; E0 F8 90 ; Compare #$90F8.w with X register [Reads: X Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $FC.b		; E4 FC ; Compare $FC.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $E8F8.w		; EC F8 E8 ; Compare $E8F8.w with X register [Reads: X Index] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $70, $E4		; 70 E4 ; Branch if overflow set to $70, $E4 [Flow: branch]
	lda $49E000.l,X		; BF 00 E0 49 ; Load long $49E000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $081B00.l		; 0F 00 1B 08 ; OR accumulator with memory (long) $081B00.l [Writes: Accumulator] [Flags: ZN]
	and $063F1C.l,X		; 3F 1C 3F 06 ; AND accumulator with memory (long,X) $063F1C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and [$01.b]		; 27 01 ; AND accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $2216.w		; 0E 16 22 ; Arithmetic shift left $2216.w [Flags: ZNC]
	and $173F.w,Y		; 39 3F 17 ; AND accumulator with memory $173F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$00C0.w		; 09 C0 00 ; Logical OR #$00C0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpx #$F000.w		; E0 00 F0 ; Compare #$F000.w with X register [Reads: X Index] [Flags: ZNC]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $D8		; 10 D8 ; Branch if plus to $10, $D8 [Flow: branch]
	.db $30, $EC		; 30 EC ; Branch if minus to $30, $EC [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	jmp ($2CF8.w)		; 6C F8 2C ; Jump indirect to ($2CF8.w) [Flow: jump]
	sec		; 38 ; Set carry flag [Flags: C]
	cpy #$B020.w		; C0 20 B0 ; Compare #$B020.w with Y register [Reads: Y Index] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $84.b		; 04 84 ; Test and set bits $84.b [Reads: Accumulator] [Flags: Z]
	cpy $03.b		; C4 03 ; Compare $03.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $37.b		; 00 37 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $7F		; 10 7F ; Branch if plus to $10, $7F [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	adc $034F0C.l,X		; 7F 0C 4F 03 ; Add long $034F0C.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $01		; 30 01 ; Branch if minus to $30, $01 [Flow: branch]
	trb $0300.w		; 1C 00 03 ; Test and reset bits $0300.w [Reads: Accumulator] [Flags: Z]
	trb $442D.w		; 1C 2D 44 ; Test and reset bits $442D.w [Reads: Accumulator] [Flags: Z]
	adc ($7E.b,S),Y		; 73 7E ; Add with carry (stack relative indirect indexed) ($7E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $008013.l		; 2F 13 80 00 ; AND accumulator with memory (long) $008013.l [Writes: Accumulator] [Flags: ZN]
	sty $A8.b		; 84 A8 ; Store Y register to $A8.b [Reads: Y Index]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr $60B0.w		; 20 B0 60 ; Jump to subroutine at $60B0.w [Writes: Stack Pointer] [Flow: call]
	eor $D8.b,S		; 43 D8 ; Exclusive OR accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $70, $80		; 70 80 ; Branch if overflow set to $70, $80 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $50, $90		; 50 90 ; Branch if overflow clear to $50, $90 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $0045.w		; 0E 45 00 ; Arithmetic shift left $0045.w [Flags: ZNC]
	ora $2F0111.l,X		; 1F 11 01 2F ; Logical OR long $2F0111.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($2F.b,S),Y		; 13 2F ; OR accumulator (stack relative indirect indexed) ($2F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $103C.w		; 1C 3C 10 ; Test and reset bits $103C.w [Reads: Accumulator] [Flags: Z]
	ora ($08.b),Y		; 11 08 ; OR accumulator with memory ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $1511.w		; 0E 11 15 ; Arithmetic shift left $1511.w [Flags: ZNC]
	ora ($2C.b)		; 12 2C ; OR accumulator with memory (indirect) ($2C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $2F.b,S		; 23 2F ; AND accumulator with stack relative $2F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $4570.w,X		; 1E 70 45 ; Arithmetic shift left $4570.w,X [Reads: X Index] [Flags: ZNC]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$8040.w		; E0 40 80 ; Compare #$8040.w with X register [Reads: X Index] [Flags: ZNC]
	pea $F4C8.w		; F4 C8 F4 ; Push absolute address $F4C8.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $8808.w,X		; 3C 08 88 ; Test bits $8808.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	.db $10, $70		; 10 70 ; Branch if plus to $10, $70 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	bit $C4.b,X		; 34 C4 ; Test bits $C4.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	pea $0E78.w		; F4 78 0E ; Push absolute address $0E78.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $3F.b		; 02 3F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $341E3E.l		; 0F 3E 1E 34 ; OR accumulator with memory (long) $341E3E.l [Writes: Accumulator] [Flags: ZN]
	trb $1E36.w		; 1C 36 1E ; Test and reset bits $1E36.w [Reads: Accumulator] [Flags: Z]
	ora $173F0F.l,X		; 1F 0F 3F 17 ; Logical OR long $173F0F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $301D.w		; 0E 1D 30 ; Arithmetic shift left $301D.w [Flags: ZNC]
	and ($23.b,X)		; 21 23 ; Logical AND ($23.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($10.b,X)		; 21 10 ; Logical AND ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsr ($7CF0.w,X)		; FC F0 7C ; Jump to subroutine indirect indexed ($7CF0.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	bit $6C38.w		; 2C 38 6C ; Test bits $6C38.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	cpx #$B870.w		; E0 70 B8 ; Compare #$B870.w with X register [Reads: X Index] [Flags: ZNC]
	tsb $C484.w		; 0C 84 C4 ; Test and set bits $C484.w [Reads: Accumulator] [Flags: Z]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	cpx $BF.b		; E4 BF ; Compare $BF.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $0B.b,S		; 43 0B ; Exclusive OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $18.b,S		; 03 18 ; OR accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $010700.l		; 0F 00 07 01 ; OR accumulator with memory (long) $010700.l [Writes: Accumulator] [Flags: ZN]
	ora $000604.l		; 0F 04 06 00 ; OR accumulator with memory (long) $000604.l [Writes: Accumulator] [Flags: ZN]
	tsb $07.b		; 04 07 ; Test and set bits $07.b [Reads: Accumulator] [Flags: Z]
	tsb $0F0C.w		; 0C 0C 0F ; Test and set bits $0F0C.w [Reads: Accumulator] [Flags: Z]
	ora [$0B.b]		; 07 0B ; OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $F8.b		; 06 F8 ; Arithmetic shift left $F8.b [Reads: Direct Page] [Flags: ZNC]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cld		; D8 ; Clear decimal flag [Flags: D]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jmp.w [$BCFA]		; DC FA BC ; Jump long indirect [$BCFA] [Flow: jump]
	stx $88.b		; 86 88 ; Store X register to $88.b [Reads: X Index]
	and ($02.b),Y		; 31 02 ; AND accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $3B.b		; 84 3B ; Store Y register to $3B.b [Reads: Y Index]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0700.w		; 0E 00 07 ; Arithmetic shift left $0700.w [Flags: ZNC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $090906.l		; 0F 06 09 09 ; OR accumulator with memory (long) $090906.l [Writes: Accumulator] [Flags: ZN]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$22.b]		; 07 22 ; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $02070C.l		; 0F 0C 07 02 ; OR accumulator with memory (long) $02070C.l [Writes: Accumulator] [Flags: ZN]
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $F4		; D0 F4 ; Branch if not equal to $D0, $F4 [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	jsr ($24D8.w,X)		; FC D8 24 ; Jump to subroutine indirect indexed ($24D8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $62.b		; 85 62 ; Store accumulator to $62.b [Reads: Accumulator]
	cop $14.b		; 02 14 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $38		; F0 38 ; Branch if equal to $F0, $38 [Flow: branch]
	bit $FC3C.w,X		; 3C 3C FC ; Test bits $FC3C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	jsr ($F018.w,X)		; FC 18 F0 ; Jump to subroutine indirect indexed ($F018.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $1B3F1A.l,X		; 3F 1A 3F 1B ; AND accumulator with memory (long,X) $1B3F1A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $03.b		; 24 03 ; Test bits $03.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $220303.l,X		; 1F 03 03 22 ; Logical OR long $220303.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $2726.w		; 1C 26 27 ; Test and reset bits $2726.w [Reads: Accumulator] [Flags: Z]
	and [$3F.b]		; 27 3F ; AND accumulator with memory (long) [$3F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $DC0003.l,X		; 1F 03 00 DC ; Logical OR long $DC0003.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pea $F800.w		; F4 00 F8 ; Push absolute address $F800.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $F0, $78		; F0 78 ; Branch if equal to $F0, $78 [Flow: branch]
	stx $91.b		; 86 91 ; Store X register to $91.b [Reads: X Index]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $7C.b,X		; 34 7C ; Test bits $7C.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	jsl $C805F8.l		; 22 F8 05 C8 ; Jump to subroutine long $C805F8.l [Writes: Stack Pointer] [Flow: call]
	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $F0, $3F		; F0 3F ; Branch if equal to $F0, $3F [Flow: branch]
	ora $891F.w,Y		; 19 1F 89 ; OR accumulator with memory $891F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $02.b,S		; A3 02 ; Load accumulator (stack relative) $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $260100.l		; 22 00 01 26 ; Jump to subroutine long $260100.l [Writes: Stack Pointer] [Flow: call]
	ora [$22.b],Y		; 17 22 ; OR accumulator with memory (long indexed) [$22.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $030F0A.l,X		; 1F 0A 0F 03 ; Logical OR long $030F0A.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($BC58.w,X)		; FC 58 BC ; Jump to subroutine indirect indexed ($BC58.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cld		; [PATTERN: Memory clearing operation] D8 ; Clear decimal flag [Flags: D]
	stz $C0.b		; 64 C0 ; Store zero to $C0.b
	sta [$C0.b]		; 87 C0 ; Store accumulator (long) [$C0.b] [Reads: Accumulator, Direct Page]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $E4.b		; 64 E4 ; Store zero to $E4.b
	cpx $FC.b		; E4 FC ; Compare $FC.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	sta $CC.b,S		; 83 CC ; Store accumulator (stack relative) $CC.b,S [Reads: Accumulator, Stack Pointer]
	cop $E4.b		; 02 E4 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $27FF00.l		; 2F 00 FF 27 ; AND accumulator with memory (long) $27FF00.l [Writes: Accumulator] [Flags: ZN]
	sbc $FFAA05.l,X		; FF 05 AA FF ; Subtract with carry (long,X) $FFAA05.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	eor $47.b,X		; 55 47 ; Exclusive OR accumulator with memory $47.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FC0300.l,X		; FF 00 03 FC ; Subtract with carry (long,X) $FC0300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $30.b,S		; 03 30 ; OR accumulator with stack relative $30.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $FF0045.l		; CF 45 00 FF ; Compare accumulator (long) $FF0045.l [Reads: Accumulator] [Flags: ZNC]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $E11E80.l,X		; 7F 80 1E E1 ; Add long $E11E80.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $FF		; 30 FF ; Branch if minus to $30, $FF [Flow: branch]
	pea $FFFF.w		; F4 FF FF ; Push absolute address $FFFF.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $DF.b,S		; 03 DF ; OR accumulator with stack relative $DF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and [$3F.b]		; 27 3F ; AND accumulator with memory (long) [$3F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $FC907F.l		; CF 7F 90 FC ; Compare accumulator (long) $FC907F.l [Reads: Accumulator] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $FF7D.w,X		; FE 7D FF ; Increment memory $FF7D.w,X [Reads: X Index] [Flags: ZN]
	inc $0FFD.w,X		; FE FD 0F ; Increment memory $0FFD.w,X [Reads: X Index] [Flags: ZN]
	nop		; EA ; No operation
	ora $1EF1.w,X		; 1D F1 1E ; OR accumulator with memory $1EF1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc $FF13.w,X		; FE 13 FF ; Increment memory $FF13.w,X [Reads: X Index] [Flags: ZN]
	ora ($F3.b,S),Y		; 13 F3 ; OR accumulator (stack relative indirect indexed) ($F3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $FB19F7.l,X		; 1F F7 19 FB ; Logical OR long $FB19F7.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	trb $62BF.w		; 1C BF 62 ; Test and reset bits $62BF.w [Reads: Accumulator] [Flags: Z]
	jsr ($3F0B.w,X)		; FC 0B 3F ; Jump to subroutine indirect indexed ($3F0B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $7E9F.w,X		; FE 9F 7E ; Increment memory $7E9F.w,X [Reads: X Index] [Flags: ZN]
	adc [$CE.b],Y		; 77 CE ; Add with carry (long indexed) [$CE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $BBFF.w		; 6E FF BB ; Rotate right $BBFF.w [Flags: ZNC]
	sbc $44FFD7.l,X		; FF D7 FF 44 ; Subtract with carry (long,X) $44FFD7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $600600.l,X		; FF 00 06 60 ; Subtract with carry (long,X) $600600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E0DFF0.l		; EF F0 DF E0 ; Subtract with carry (long) $E0DFF0.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF43C0.l,X		; FF C0 43 FF ; Subtract with carry (long,X) $FF43C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$E702.w		; E0 02 E7 ; Compare #$E702.w with X register [Reads: X Index] [Flags: ZNC]
	jsr ($43F7.w,X)		; FC F7 43 ; Jump to subroutine indirect indexed ($43F7.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($16FF.w,X)		; FC FF 16 ; Jump to subroutine indirect indexed ($16FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $FEF3.w,X		; FE F3 FE ; Increment memory $FEF3.w,X [Reads: X Index] [Flags: ZN]
	sbc ($FE.b),Y		; F1 FE ; Subtract with carry ($FE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $F9.b		; 66 F9 ; Rotate right $F9.b [Reads: Direct Page] [Flags: ZNC]
	cmp $FFF3.w		; CD F3 FF ; Compare $FFF3.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$FC.b]		; 07 FC ; OR accumulator with memory (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $EE3FF0.l,X		; 1F F0 3F EE ; Logical OR long $EE3FF0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $FCFF5E.l,X		; 7F 5E FF FC ; Add long $FCFF5E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0EFD62.l,X		; FF 62 FD 0E ; Subtract with carry (long,X) $0EFD62.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$C0FF.w		; C0 FF C0 ; Compare #$C0FF.w with Y register [Reads: Y Index] [Flags: ZNC]
	eor $E07FE0.l,X		; 5F E0 7F E0 ; Exclusive OR accumulator with memory (long,X) $E07FE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$3BF6.w		; 29 F6 3B ; Logical AND #$3BF6.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc $9F.b,X		; F6 9F ; Increment memory $9F.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	adc ($48.b,S),Y		; 73 48 ; Add with carry (stack relative indirect indexed) ($48.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $400200.l,X		; FF 00 02 40 ; Subtract with carry (long,X) $400200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $FF44F0.l,X		; BF F0 44 FF ; Load long $FF44F0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	sbc $E0DF0B.l,X		; FF 0B DF E0 ; Subtract with carry (long,X) $E0DF0B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $10FFB0.l		; 6F B0 FF 10 ; Add with carry (long) $10FFB0.l [Writes: Accumulator] [Flags: ZVNC]
	cmp $00FF78.l,X		; DF 78 FF 00 ; Compare accumulator (long,X) $00FF78.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc ($0C.b,S),Y		; F3 0C ; Subtract with carry (stack relative indirect indexed) ($0C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $F5.b		; 45 F5 ; Exclusive OR $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cpx #$F435.w		; E0 35 F4 ; Compare #$F435.w with X register [Reads: X Index] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sty $7B.b		; 84 7B ; Store Y register to $7B.b [Reads: Y Index]
	ldy $5B.b		; A4 5B ; Load $5B.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cmp $2FD030.l		; CF 30 D0 2F ; Compare accumulator (long) $2FD030.l [Reads: Accumulator] [Flags: ZNC]
	ora ($EE.b),Y		; 11 EE ; OR accumulator with memory ($EE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $A75FA0.l,X		; 5F A0 5F A7 ; Exclusive OR accumulator with memory (long,X) $A75FA0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc [$8C.b],Y		; 77 8C ; Add with carry (long indexed) [$8C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $A85F28.l,X		; DF 28 5F A8 ; Compare accumulator (long,X) $A85F28.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	stx $79.b		; 86 79 ; Store X register to $79.b [Reads: X Index]
	and $FFC6.w,Y		; 39 C6 FF ; AND accumulator with memory $FFC6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$FD.b],Y		; 77 FD ; Add with carry (long indexed) [$FD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E706F9.l,X		; FF F9 06 E7 ; Subtract with carry (long,X) $E706F9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $1FFD3B.l,X		; 1F 3B FD 1F ; Logical OR long $1FFD3B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpx #$13EC.w		; E0 EC 13 ; Compare #$13EC.w with X register [Reads: X Index] [Flags: ZNC]
	and ($CC.b,S),Y		; 33 CC ; AND accumulator (stack relative indirect indexed) ($CC.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $FFE3.w		; 1C E3 FF ; Test and reset bits $FFE3.w [Reads: Accumulator] [Flags: Z]
	sbc $75FFF2.l,X		; FF F2 FF 75 ; Subtract with carry (long,X) $75FFF2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stx $FF8F.w		; 8E 8F FF ; Store X register to $FF8F.w [Reads: X Index]
	eor $0600FF.l		; 4F FF 00 06 ; Exclusive OR accumulator with memory (long) $0600FF.l [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $FF7FFF.l		; CF FF 7F FF ; Compare accumulator (long) $FF7FFF.l [Reads: Accumulator] [Flags: ZNC]
	lda $02FF28.l,X		; BF 28 FF 02 ; Load long $02FF28.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $7483FD.l,X		; FF FD 83 74 ; Subtract with carry (long,X) $7483FD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C13E0A.l,X		; FF 0A 3E C1 ; Subtract with carry (long,X) $C13E0A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $9EE3.w,X		; 9D E3 9E ; Store accumulator to $9EE3.w,X [Reads: Accumulator, X Index]
	sbc ($CF.b,X)		; E1 CF ; Subtract with carry ($CF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $E3		; F0 E3 ; Branch if equal to $F0, $E3 [Flow: branch]
	jsr ($24F8.w,X)		; FC F8 24 ; Jump to subroutine indirect indexed ($24F8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $1CEB01.l,X		; FF 01 EB 1C ; Subtract with carry (long,X) $1CEB01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $FE0D.w		; 0D 0D FE ; Logical OR $FE0D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $4DBA.w		; 0D BA 4D ; Logical OR $4DBA.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $5FA9.w		; AD A9 5F ; Load $5FA9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	eor $7EAF.w,Y		; 59 AF 7E ; Exclusive OR accumulator with memory $7EAF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $45FFFE.l,X		; FF FE FF 45 ; Subtract with carry (long,X) $45FFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FE.w,X		; FD FE 00 ; Subtract with carry $00FE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $FE44.w,X		; BD 44 FE ; Load $FE44.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FF47.w,X		; FD 47 FF ; Subtract with carry $FF47.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$47E0.w		; C0 E0 47 ; Compare #$47E0.w with Y register [Reads: Y Index] [Flags: ZNC]
	inc $D5D1.w		; EE D1 D5 ; Increment $D5D1.w [Flags: ZN]
	nop		; EA ; No operation
	nop		; EA ; No operation
	cmp $D5.b,X		; D5 D5 ; Compare accumulator $D5.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	nop		; EA ; No operation
	sta $35E7.w,Y		; 99 E7 35 ; Store accumulator to $35E7.w,Y [Reads: Accumulator, Y Index]
	cmp $EF9F6D.l		; CF 6D 9F EF ; Compare accumulator (long) $EF9F6D.l [Reads: Accumulator] [Flags: ZNC]
	ora $96FF7E.l,X		; 1F 7E FF 96 ; Logical OR long $96FF7E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $67BF56.l,X		; FF 56 BF 67 ; Subtract with carry (long,X) $67BF56.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $B8FFFE.l,X		; BF FE FF B8 ; Load long $B8FFFE.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E3FED9.l,X		; FF D9 FE E3 ; Subtract with carry (long,X) $E3FED9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($FE79.w,X)		; FC 79 FE ; Jump to subroutine indirect indexed ($FE79.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sta $7C.b,S		; 83 7C ; Store accumulator (stack relative) $7C.b,S [Reads: Accumulator, Stack Pointer]
	ror $0081.w,X		; 7E 81 00 ; Rotate right $0081.w,X [Reads: X Index] [Flags: ZNC]
	sbc $5F33DF.l,X		; FF DF 33 5F ; Subtract with carry (long,X) $5F33DF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($17.b,S),Y		; B3 17 ; Load accumulator (stack relative indirect indexed) ($17.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	adc $DC7FBB.l,X		; 7F BB 7F DC ; Add long $DC7FBB.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $EFBF4E.l,X		; 3F 4E BF EF ; AND accumulator with memory (long,X) $EFBF4E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $77E8B7.l,X		; 1F B7 E8 77 ; Logical OR long $77E8B7.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc [$C8.b],Y		; F7 C8 ; Subtract with carry (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$D8.b]		; E7 D8 ; Subtract with carry (long) [$D8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $9C63D0.l		; AF D0 63 9C ; Load long $9C63D0.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $FF2901.l,X		; FF 01 29 FF ; Subtract with carry (long,X) $FF2901.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$1F4E.w		; E0 4E 1F ; Compare #$1F4E.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $F9BF47.l,X		; FF 47 BF F9 ; Subtract with carry (long,X) $F9BF47.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$A4.b]		; 07 A4 ; OR accumulator with memory (long) [$A4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	ldy $AE53.w		; AC 53 AE ; Load $AE53.w into Y register [Writes: Y Index] [Flags: ZN]
	eor ($A6.b),Y		; 51 A6 ; Exclusive OR accumulator with memory ($A6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $FD02.w,Y		; 59 02 FD ; Exclusive OR accumulator with memory $FD02.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $DB.b		; 24 DB ; Test bits $DB.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	trb $9CE3.w		; 1C E3 9C ; Test and reset bits $9CE3.w [Reads: Accumulator] [Flags: Z]
	adc $1C.b,S		; 63 1C ; Add with carry (stack relative) $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($1B.b,S),Y		; F3 1B ; Subtract with carry (stack relative indirect indexed) ($1B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$37.b],Y		; F7 37 ; Subtract with carry (long indexed) [$37.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $5FF92F.l		; EF 2F F9 5F ; Subtract with carry (long) $5FF92F.l [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $7F		; F0 7F ; Branch if equal to $F0, $7F [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc $B9FFD4.l,X		; FF D4 FF B9 ; Subtract with carry (long,X) $B9FFD4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $74E3.w,X		; DE E3 74 ; Decrement memory $74E3.w,X [Reads: X Index] [Flags: ZN]
	lda $FEFFFF.l		; AF FF FF FE ; Load long $FEFFFF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc ($FD.b),Y		; F1 FD ; Subtract with carry ($FD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	lsr $EF.b		; 46 EF ; Logical shift right $EF.b [Reads: Direct Page] [Flags: ZNC]
	jsr ($FFBF.w,X)		; FC BF FF ; Jump to subroutine indirect indexed ($FFBF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	jsr ($F837.w,X)		; FC 37 F8 ; Jump to subroutine indirect indexed ($F837.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($FFFF.w,X)		; FC FF FF ; Jump to subroutine indirect indexed ($FFFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sta $81.b,S		; 83 81 ; Store accumulator (stack relative) $81.b,S [Reads: Accumulator, Stack Pointer]
	adc $EFFE87.l,X		; 7F 87 FE EF ; Add long $EFFE87.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $FF96.w,X		; 7D 96 FF ; Add $FF96.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $57FFEF.l,X		; FF EF FF 57 ; Subtract with carry (long,X) $57FFEF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $45FF8A.l,X		; FF 8A FF 45 ; Subtract with carry (long,X) $45FF8A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $09.b		; 84 09 ; Store Y register to $09.b [Reads: Y Index]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $AA.b,X		; 55 AA ; Exclusive OR accumulator with memory $AA.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $EAFF.w,X		; FD FF EA ; Subtract with carry $EAFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $AAFF55.l,X		; FF 55 FF AA ; Subtract with carry (long,X) $AAFF55.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $098654.l,X		; FF 54 86 09 ; Subtract with carry (long,X) $098654.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $45.b		; 02 45 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $22E000.l,X		; FF 00 E0 22 ; Subtract with carry (long,X) $22E000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FC01.w,X		; FE 01 FC ; Increment memory $FC01.w,X [Reads: X Index] [Flags: ZN]
	ora $FA.b,S		; 03 FA ; OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$F7.b]		; 07 F7 ; OR accumulator with memory (long) [$F7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $9F00FF.l		; 0F FF 00 9F ; OR accumulator with memory (long) $9F00FF.l [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor [$B8.b],Y		; 57 B8 ; Exclusive OR accumulator with memory (long indexed) [$B8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $D87F78.l,X		; BF 78 7F D8 ; Load long $D87F78.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $F8D7F8.l		; 8F F8 D7 F8 ; Store accumulator (long) $F8D7F8.l [Reads: Accumulator]
	adc $FF0BF8.l,X		; 7F F8 0B FF ; Add long $FF0BF8.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($FF.b)		; 12 FF ; OR accumulator with memory (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $FF.b,X		; 16 FF ; Arithmetic shift left $FF.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $BFFF.w,X		; 5D FF BF ; Exclusive OR accumulator with memory $BFFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	tsb $7D.b		; 04 7D ; Test and set bits $7D.b [Reads: Accumulator] [Flags: Z]
	ldx $7FBE.w,Y		; BE BE 7F ; Load X register $7FBE.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ror $FF44.w		; 6E 44 FF ; Rotate right $FF44.w [Flags: ZNC]
	cmp $24BF00.l,X		; DF 00 BF 24 ; Compare accumulator (long,X) $24BF00.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc $F5CA0A.l,X		; FF 0A CA F5 ; Subtract with carry (long,X) $F5CA0A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy $FB.b		; C4 FB ; Compare $FB.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy #$D5FF.w		; C0 FF D5 ; Compare #$D5FF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $F7FFAA.l,X		; FF AA FF F7 ; Subtract with carry (long,X) $F7FFAA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	sbc [$AD.b],Y		; F7 AD ; Subtract with carry (long indexed) [$AD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($E6.b,S),Y		; F3 E6 ; Subtract with carry (stack relative indirect indexed) ($E6.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FCF3.w,Y		; F9 F3 FC ; Subtract with carry $FCF3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FCFE.w,Y		; F9 FE FC ; Subtract with carry $FCFE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $DF18FF.l		; 22 FF 18 DF ; Jump to subroutine long $DF18FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $E7FCF3.l,X		; FF F3 FC E7 ; Subtract with carry (long,X) $E7FCF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $E4.b		; E5 E4 ; Subtract $E4.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora #$D3F7.w		; 09 F7 D3 ; Logical OR #$D3F7.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $1CDFA6.l		; EF A6 DF 1C ; Subtract with carry (long) $1CDFA6.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $6D7FA9.l,X		; FF A9 7F 6D ; Subtract with carry (long,X) $6D7FA9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F3FF67.l,X		; FF 67 FF F3 ; Subtract with carry (long,X) $F3FF67.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $870BFF.l		; 22 FF 0B 87 ; Jump to subroutine long $870BFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $53DF28.l,X		; FF 28 DF 53 ; Subtract with carry (long,X) $53DF28.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $3FDF.w,X		; BC DF 3F ; Load Y register $3FDF.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sbc [$F8.b],Y		; F7 F8 ; Subtract with carry (long indexed) [$F8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $9283E0.l,X		; DF E0 83 92 ; Compare accumulator (long,X) $9283E0.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $F6.b,X		; 55 F6 ; Exclusive OR accumulator with memory $F6.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FFFF.w,Y		; F9 FF FF ; Subtract with carry $FFFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$FF.b]		; 67 FF ; Add with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $03FD00.l,X		; FF 00 FD 03 ; Subtract with carry (long,X) $03FD00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora [$F6.b]		; 07 F6 ; OR accumulator with memory (long) [$F6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $417FBE.l		; 0F BE 7F 41 ; OR accumulator with memory (long) $417FBE.l [Writes: Accumulator] [Flags: ZN]
	sbc $F6FFE1.l,X		; FF E1 FF F6 ; Subtract with carry (long,X) $F6FFE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E01F.w,Y		; F9 1F E0 ; Subtract with carry $E01F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF37FC.l,X		; FF FC 37 FF ; Subtract with carry (long,X) $FF37FC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1DEF19.l,X		; FF 19 EF 1D ; Subtract with carry (long,X) $1DEF19.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$8C.b],Y		; 77 8C ; Add with carry (long indexed) [$8C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$EC.b],Y		; 97 EC ; Store accumulator (long indexed) [$EC.b],Y [Reads: Accumulator, Direct Page, Y Index]
	cmp $EE.b,X		; D5 EE ; Compare accumulator $EE.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $38CF.w,X		; FD CF 38 ; Subtract with carry $38CF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $AD5F3C.l		; CF 3C 5F AD ; Compare accumulator (long) $AD5F3C.l [Reads: Accumulator] [Flags: ZNC]
	inc $EB8D.w,X		; FE 8D EB ; Increment memory $EB8D.w,X [Reads: X Index] [Flags: ZN]
	jmp.w [$7CE3]		; DC E3 7C ; Jump long indirect [$7CE3] [Flow: jump]
	cmp [$38.b],Y		; D7 38 ; Compare accumulator (long indexed) [$38.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	lda $ECF7FF.l,X		; BF FF F7 EC ; Load long $ECF7FF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $DD.b		; C6 DD ; Decrement $DD.b [Reads: Direct Page] [Flags: ZN]
	sbc $EE.b,S		; E3 EE ; Subtract stack-relative $EE.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc ($FF.b),Y		; F1 FF ; Subtract with carry ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $37F04F.l,X		; FF 4F F0 37 ; Subtract with carry (long,X) $37F04F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	adc $EF96.w,X		; 7D 96 EF ; Add $EF96.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$FE.b]		; 87 FE ; Store accumulator (long) [$FE.b] [Reads: Accumulator, Direct Page]
	cmp ($7F.b,X)		; C1 7F ; Compare accumulator ($7F.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sta [$FC.b]		; 87 FC ; Store accumulator (long) [$FC.b] [Reads: Accumulator, Direct Page]
	sbc $1730EF.l,X		; FF EF 30 17 ; Subtract with carry (long,X) $1730EF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	eor $F6.b,S		; 43 F6 ; Exclusive OR accumulator with stack relative $F6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FFF704.l,X		; FF 04 F7 FF ; Subtract with carry (long,X) $FFF704.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $FF24FD.l,X		; FF FD 24 FF ; Subtract with carry (long,X) $FF24FD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$FB31.w		; E0 31 FB ; Compare #$FB31.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $A57FAF.l,X		; FF AF 7F A5 ; Subtract with carry (long,X) $A57FAF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $C5FF65.l,X		; 7F 65 FF C5 ; Add long $C5FF65.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C7FDC6.l,X		; FF C6 FD C7 ; Subtract with carry (long,X) $C7FDC6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($FCCB.w,X)		; FC CB FC ; Jump to subroutine indirect indexed ($FCCB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $EDFEFD.l,X		; FF FD FE ED ; Subtract with carry (long,X) $EDFEFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FFEE.w,X		; FE EE FF ; Increment memory $FFEE.w,X [Reads: X Index] [Flags: ZN]
	sbc $FF67FF.l		; EF FF 67 FF ; Subtract with carry (long) $FF67FF.l [Writes: Accumulator] [Flags: ZVNC]
	adc $FF.b,S		; 63 FF ; Add with carry (stack relative) $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7F.b,S		; E3 7F ; Subtract stack-relative $7F.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	lda [$7B.b]		; A7 7B ; Load accumulator (long) [$7B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $F1FFEE.l,X		; FF EE FF F1 ; Subtract with carry (long,X) $F1FFEE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0FF95E.l,X		; FF 5E F9 0F ; Subtract with carry (long,X) $0FF95E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FE57AB.l,X		; FF AB 57 FE ; Subtract with carry (long,X) $FE57AB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($47.b,X)		; 01 47 ; Logical OR ($47.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $FB0900.l,X		; FF 00 09 FB ; Subtract with carry (long,X) $FB0900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$EC.b]		; 07 EC ; OR accumulator with memory (long) [$EC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $B53FD8.l,X		; 1F D8 3F B5 ; Logical OR long $B53FD8.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $1FFF.w,X		; 7E FF 1F ; Rotate right $1FFF.w,X [Reads: X Index] [Flags: ZNC]
	eor $DF.b		; 45 DF ; Exclusive OR $DF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $DD24E0.l,X		; 3F E0 24 DD ; AND accumulator with memory (long,X) $DD24E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $BC7FBD.l,X		; 3F BD 7F BC ; AND accumulator with memory (long,X) $BC7FBD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $DB7FB8.l,X		; 7F B8 7F DB ; Add long $DB7FB8.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$E8.b]		; E7 E8 ; Subtract with carry (long) [$E8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$C6.b],Y		; F7 C6 ; Subtract with carry (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F689.w,Y		; F9 89 F6 ; Subtract with carry $F689.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpx $96.b		; E4 96 ; Compare $96.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc #$C3BD.w		; E9 BD C3 ; Subtract #$C3BD.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	cmp [$EE.b],Y		; D7 EE ; Compare accumulator (long indexed) [$EE.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sbc $BFFFF4.l,X		; FF F4 FF BF ; Subtract with carry (long,X) $BFFFF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $CEFF9F.l,X		; FF 9F FF CE ; Subtract with carry (long,X) $CEFF9F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F9FFE0.l,X		; FF E0 FF F9 ; Subtract with carry (long,X) $F9FFE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $381CFF.l		; 22 FF 1C 38 ; Jump to subroutine long $381CFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $FCFFF2.l,X		; FF F2 FF FC ; Subtract with carry (long,X) $FCFFF2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $79FFF8.l,X		; FF F8 FF 79 ; Subtract with carry (long,X) $79FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FCF3.w,X		; FE F3 FC ; Increment memory $FCF3.w,X [Reads: X Index] [Flags: ZN]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	cmp [$FF.b]		; C7 FF ; Compare accumulator (long) [$FF.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $C33CF0.l		; 0F F0 3C C3 ; OR accumulator with memory (long) $C33CF0.l [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta [$E0.b]		; 87 E0 ; Store accumulator (long) [$E0.b] [Reads: Accumulator, Direct Page]
	ora $637F80.l,X		; 1F 80 7F 63 ; Logical OR long $637F80.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FF22F7.l,X		; FF F7 22 FF ; Subtract with carry (long,X) $FF22F7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($1E.b),Y		; 11 1E ; OR accumulator with memory ($1E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$FB.b]		; E7 FB ; Subtract with carry (long) [$FB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl $F9.b		; 06 F9 ; Arithmetic shift left $F9.b [Reads: Direct Page] [Flags: ZNC]
	asl $19.b		; 06 19 ; Arithmetic shift left $19.b [Reads: Direct Page] [Flags: ZNC]
	inc $39.b		; E6 39 ; Increment $39.b [Reads: Direct Page] [Flags: ZN]
	dec $03.b		; C6 03 ; Decrement $03.b [Reads: Direct Page] [Flags: ZN]
	jsr ($FC9B.w,X)		; FC 9B FC ; Jump to subroutine indirect indexed ($FC9B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $F9.b,X		; F6 F9 ; Increment memory $F9.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	rol $43F9.w,X		; 3E F9 43 ; Rotate left $43F9.w,X [Reads: X Index] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	bit $E743.w,X		; 3C 43 E7 ; Test bits $E743.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	cpx #$C031.w		; E0 31 C0 ; Compare #$C031.w with X register [Reads: X Index] [Flags: ZNC]
	and $187F98.l,X		; 3F 98 7F 18 ; AND accumulator with memory (long,X) $187F98.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $97EF17.l,X		; FF 17 EF 97 ; Subtract with carry (long,X) $97EF17.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $F64FB7.l		; 6F B7 4F F6 ; Add with carry (long) $F64FB7.l [Writes: Accumulator] [Flags: ZVNC]
	ora $264EB7.l		; 0F B7 4E 26 ; OR accumulator with memory (long) $264EB7.l [Writes: Accumulator] [Flags: ZN]
	cmp $4CFF0F.l,X		; DF 0F FF 4C ; Compare accumulator (long,X) $4CFF0F.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc $FFD8F7.l,X		; FF F7 D8 FF ; Subtract with carry (long,X) $FFD8F7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $BCFFE4.l,X		; BF E4 FF BC ; Load long $BCFFE4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc $F8BF.w,X		; FE BF F8 ; Increment memory $F8BF.w,X [Reads: X Index] [Flags: ZN]
	sbc [$9C.b]		; E7 9C ; Subtract with carry (long) [$9C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00.b,S		; E3 00 ; Subtract stack-relative $00.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $9E7F89.l,X		; FF 89 7F 9E ; Subtract with carry (long,X) $9E7F89.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$3D.b]		; 67 3D ; Add with carry (long) [$3D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $3C.b,S		; C3 3C ; Compare accumulator (stack relative) $3C.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $FB.b,S		; C3 FB ; Compare accumulator (stack relative) $FB.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc $43F609.l,X		; FF 09 F6 43 ; Subtract with carry (long,X) $43F609.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$6F33.w		; E0 33 6F ; Compare #$6F33.w with X register [Reads: X Index] [Flags: ZNC]
	sta $7A0EF5.l,X		; 9F F5 0E 7A ; Store accumulator (long,X) $7A0EF5.l,X [Reads: Accumulator, X Index]
	sta [$81.b]		; 87 81 ; Store accumulator (long) [$81.b] [Reads: Accumulator, Direct Page]
	sbc $FFFFE3.l,X		; FF E3 FF FF ; Subtract with carry (long,X) $FFFFE3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $00.b,S		; C3 00 ; Compare accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc $F8FFF6.l,X		; FF F6 FF F8 ; Subtract with carry (long,X) $F8FFF6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $B97FBE.l,X		; 7F BE 7F B9 ; Add long $B97FBE.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $EF3FDE.l,X		; 7F DE 3F EF ; Add long $EF3FDE.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FE07FB.l,X		; 1F FB 07 FE ; Logical OR long $FE07FB.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($C8.b,X)		; 01 C8 ; Logical OR ($C8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $A7FD86.l,X		; FF 86 FD A7 ; Subtract with carry (long,X) $A7FD86.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp.w [$C4BF]		; DC BF C4 ; Jump long indirect [$C4BF] [Flow: jump]
	ldx $87C7.w,Y		; BE C7 87 ; Load X register $87C7.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc $F7FF9E.l,X		; FF 9E FF F7 ; Subtract with carry (long,X) $F7FF9E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $3A73AE.l,X		; FF AE 73 3A ; Subtract with carry (long,X) $3A73AE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$43.b]		; E7 43 ; Subtract with carry (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($1F.b,S),Y		; F3 1F ; Subtract with carry (stack relative indirect indexed) ($1F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$76.b]		; 07 76 ; OR accumulator with memory (long) [$76.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $73DE3D.l,X		; 9F 3D DE 73 ; Store accumulator (long,X) $73DE3D.l,X [Reads: Accumulator, X Index]
	jsr ($F0CF.w,X)		; FC CF F0 ; Jump to subroutine indirect indexed ($F0CF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sta $24.b,S		; 83 24 ; Store accumulator (stack relative) $24.b,S [Reads: Accumulator, Stack Pointer]
	cop $83.b		; 02 83 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($02.b)		; B2 02 ; Load accumulator (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	inc $FF07.w,X		; FE 07 FF ; Increment memory $FF07.w,X [Reads: X Index] [Flags: ZN]
	ora $FD1FED.l		; 0F ED 1F FD ; OR accumulator with memory (long) $FD1FED.l [Writes: Accumulator] [Flags: ZN]
	ora $F7FD7B.l,X		; 1F 7B FD F7 ; Logical OR long $F7FD7B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	eor $EF.b		; 45 EF ; Exclusive OR $EF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$0E.b],Y		; F7 0E ; Subtract with carry (long indexed) [$0E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $FFB7F7.l		; 6F F7 B7 FF ; Add with carry (long) $FFB7F7.l [Writes: Accumulator] [Flags: ZVNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sbc $3A7DBA.l,X		; FF BA 7D 3A ; Subtract with carry (long,X) $3A7DBA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FEFD.w,X		; FD FD FE ; Subtract with carry $FEFD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($FEFF.w,X)		; FC FF FE ; Jump to subroutine indirect indexed ($FEFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($F7.b),Y		; 11 F7 ; OR accumulator with memory ($F7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $0FD72B.l,X		; FF 2B D7 0F ; Subtract with carry (long,X) $0FD72B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$3F.b],Y		; F7 3F ; Subtract with carry (long indexed) [$3F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$DF.b]		; C7 DF ; Compare accumulator (long) [$DF.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and [$1F.b]		; 27 1F ; AND accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$5F.b]		; E7 5F ; Subtract with carry (long) [$5F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$7F.b]		; E7 7F ; Subtract with carry (long) [$7F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$FB.b]		; C7 FB ; Compare accumulator (long) [$FB.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$47.b]		; C7 47 ; Compare accumulator (long) [$47.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$F6.b]		; 07 F6 ; OR accumulator with memory (long) [$F6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $EDFFFE.l,X		; FF FE FF ED ; Subtract with carry (long,X) $EDFFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $43FFDB.l,X		; FF DB FF 43 ; Subtract with carry (long,X) $43FFDB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $CF0BD3.l		; AF D3 0B CF ; Load long $CF0BD3.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($37.b,S),Y		; B3 37 ; Load accumulator (stack relative indirect indexed) ($37.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor [$FB.b]		; 47 FB ; Exclusive OR accumulator with memory (long) [$FB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $FB.b,X		; 56 FB ; Logical shift right $FB.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	stx $FB.b,Y		; 96 FB ; Store X register $FB.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	lda [$FB.b]		; A7 FB ; Load accumulator (long) [$FB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4300FF.l		; 4F FF 00 43 ; Exclusive OR accumulator with memory (long) $4300FF.l [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tsb $43.b		; 04 43 ; Test and set bits $43.b [Reads: Accumulator] [Flags: Z]
	sbc $4302.w,X		; FD 02 43 ; Subtract with carry $4302.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $4F01.w,X		; FE 01 4F ; Increment memory $4F01.w,X [Reads: X Index] [Flags: ZN]
	sbc $7F4300.l,X		; FF 00 43 7F ; Subtract with carry (long,X) $7F4300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $4F		; 80 4F ; Branch always to $80, $4F [Flow: branch]
	sbc $F74300.l,X		; FF 00 43 F7 ; Subtract with carry (long,X) $F74300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $EF.b,S		; 43 EF ; Exclusive OR accumulator with stack relative $EF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $10, $43		; 10 43 ; Branch if plus to $10, $43 [Flow: branch]
	cmp $BF4320.l,X		; DF 20 43 BF ; Compare accumulator (long,X) $BF4320.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor #$00FF.w		; 49 FF 00 ; Exclusive OR #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $EF.b		; 05 EF ; Logical OR $EF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $F7		; 10 F7 ; Branch if plus to $10, $F7 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tsb $4F.b		; 04 4F ; Test and set bits $4F.b [Reads: Accumulator] [Flags: Z]
	sbc $001700.l,X		; FF 00 17 00 ; Subtract with carry (long,X) $001700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E03FC0.l,X		; FF C0 3F E0 ; Subtract with carry (long,X) $E03FC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $F8EFF0.l,X		; DF F0 EF F8 ; Compare accumulator (long,X) $F8EFF0.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc [$F9.b],Y		; F7 F9 ; Subtract with carry (long indexed) [$F9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$CB.b],Y		; F7 CB ; Subtract with carry (long indexed) [$CB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $A9.b,X		; F5 A9 ; Subtract $A9.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$73.b],Y		; D7 73 ; Compare accumulator (long indexed) [$73.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sty $B06F.w		; 8C 6F B0 ; Store Y register to $B06F.w [Reads: Y Index]
	ror $70BF.w,X		; 7E BF 70 ; Rotate right $70BF.w,X [Reads: X Index] [Flags: ZNC]
	sbc $F8E743.l,X		; FF 43 E7 F8 ; Subtract with carry (long,X) $F8E743.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $F3.b,S		; 43 F3 ; Exclusive OR accumulator with stack relative $F3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr ($E203.w,X)		; FC 03 E2 ; Jump to subroutine indirect indexed ($E203.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $0FF0.w,X		; 1D F0 0F ; OR accumulator with memory $0FF0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $7F8043.l,X		; FF 43 80 7F ; Subtract with carry (long,X) $7F8043.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $C0.b,S		; 03 C0 ; OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $439768.l,X		; 3F 68 97 43 ; AND accumulator with memory (long,X) $439768.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	sbc $07FF0F.l,X		; FF 0F FF 07 ; Subtract with carry (long,X) $07FF0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $01,$FF		; 44 FF 01 ; Move block positive $01,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $3E.b		; 05 3E ; Logical OR $3E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($63.b,X)		; C1 63 ; Compare accumulator ($63.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	stz $3CFB.w		; 9C FB 3C ; Store zero to $3CFB.w
	eor $F7.b,S		; 43 F7 ; Exclusive OR accumulator with stack relative $F7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cpx #$7720.w		; E0 20 77 ; Compare #$7720.w with X register [Reads: X Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	adc [$FF.b],Y		; 77 FF ; Add with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $06FE.w,Y		; 79 FE 06 ; Add $06FE.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc [$72.b]		; E7 72 ; Subtract with carry (long) [$72.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $B81FE4.l		; 8F E4 1F B8 ; Store accumulator (long) $B81FE4.l [Reads: Accumulator]
	sbc $FFD7F8.l,X		; FF F8 D7 FF ; Subtract with carry (long,X) $FFD7F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $115CF3.l,X		; DF F3 5C 11 ; Compare accumulator (long,X) $115CF3.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc $07FE03.l		; EF 03 FE 07 ; Subtract with carry (long) $07FE03.l [Writes: Accumulator] [Flags: ZVNC]
	jsr ($FD06.w,X)		; FC 06 FD ; Jump to subroutine indirect indexed ($FD06.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	asl $22.b		; 06 22 ; Arithmetic shift left $22.b [Reads: Direct Page] [Flags: ZNC]
	sbc $0FF70B.l,X		; FF 0B F7 0F ; Subtract with carry (long,X) $0FF70B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	sta $FFBFFF.l		; 8F FF BF FF ; Store accumulator (long) $FFBFFF.l [Reads: Accumulator]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	ror $84F1.w		; 6E F1 84 ; Rotate right $84F1.w [Flags: ZNC]
	ldy $02.b		; A4 02 ; Load $02.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $006B83.l,X		; FF 83 6B 00 ; Subtract with carry (long,X) $006B83.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$70.b]		; 07 70 ; OR accumulator with memory (long) [$70.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $3BFF30.l,X		; FF 30 FF 3B ; Subtract with carry (long,X) $3BFF30.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($E11E.w,X)		; FC 1E E1 ; Jump to subroutine indirect indexed ($E11E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor [$00.b]		; 47 00 ; Exclusive OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $7FC043.l,X		; FF 43 C0 7F ; Subtract with carry (long,X) $7FC043.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FF40.w		; 0D 40 FF ; Logical OR $FF40.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$3FFF.w		; C0 FF 3F ; Compare #$3FFF.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$E01F.w		; C0 1F E0 ; Compare #$E01F.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora $F807F0.l		; 0F F0 07 F8 ; OR accumulator with memory (long) $F807F0.l [Writes: Accumulator] [Flags: ZN]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $02FD43.l,X		; FF 43 FD 02 ; Subtract with carry (long,X) $02FD43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $F8.b		; 05 F8 ; Logical OR $F8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$F0.b]		; 07 F0 ; OR accumulator with memory (long) [$F0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $451FE0.l		; 0F E0 1F 45 ; OR accumulator with memory (long) $451FE0.l [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $A28540.l,X		; BF 40 85 A2 ; Load long $A28540.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $44F3.w		; 0C F3 44 ; Test and set bits $44F3.w [Reads: Accumulator] [Flags: Z]
	sbc $030200.l,X		; FF 00 02 03 ; Subtract with carry (long,X) $030200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF4307.l,X		; FF 07 43 FF ; Subtract with carry (long,X) $FF4307.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0FF903.l		; 0F 03 F9 0F ; OR accumulator with memory (long) $0FF903.l [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	cmp $04A683.l,X		; DF 83 A6 04 ; Compare accumulator (long,X) $04A683.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	eor [$FF.b]		; 47 FF ; Exclusive OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$38.b]		; C7 38 ; Compare accumulator (long) [$38.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $609F90.l		; 6F 90 9F 60 ; Add with carry (long) $609F90.l [Writes: Accumulator] [Flags: ZVNC]
	ora $708FE0.l,X		; 1F E0 8F 70 ; Logical OR long $708FE0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($3E.b,X)		; C1 3E ; Compare accumulator ($3E.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	cmp $9FB3.w		; CD B3 9F ; Compare $9FB3.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc ($32.b),Y		; F1 32 ; Subtract with carry ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FEFD.w,X		; FD FD FE ; Subtract with carry $FEFD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FBFF.w,X		; FE FF FB ; Increment memory $FBFF.w,X [Reads: X Index] [Flags: ZN]
	sbc $FF22F9.l,X		; FF F9 22 FF ; Subtract with carry (long,X) $FF22F9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $FD13FF.l		; 22 FF 13 FD ; Jump to subroutine long $FD13FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $62FFFB.l,X		; FF FB FF 62 ; Subtract with carry (long,X) $62FFFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $DDFECF.l,X		; FF CF FE DD ; Subtract with carry (long,X) $DDFECF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FCFB.w,X		; FE FB FC ; Increment memory $FCFB.w,X [Reads: X Index] [Flags: ZN]
	sbc $FF80FF.l,X		; FF FF 80 FF ; Subtract with carry (long,X) $FF80FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $3FE1.w,X		; 1E E1 3F ; Arithmetic shift left $3FE1.w,X [Reads: X Index] [Flags: ZNC]
	cpy #$1F43.w		; C0 43 1F ; Compare #$1F43.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpx #$4F04.w		; E0 04 4F ; Compare #$4F04.w with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $46		; F0 46 ; Branch if equal to $F0, $46 [Flow: branch]
	sbc $220F.w,Y		; F9 0F 22 ; Subtract with carry $220F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $6740E0.l,X		; FF E0 40 67 ; Subtract with carry (long,X) $6740E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $7EAD.w,X		; FD AD 7E ; Subtract with carry $7EAD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $3467.w,X		; BC 67 34 ; Load Y register $3467.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sbc $F9FF64.l		; EF 64 FF F9 ; Subtract with carry (long) $F9FF64.l [Writes: Accumulator] [Flags: ZVNC]
	inc $FFCE.w,X		; FE CE FF ; Increment memory $FFCE.w,X [Reads: X Index] [Flags: ZN]
	lda $7F.b,S		; A3 7F ; Load accumulator (stack relative) $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $8BFF.w,Y		; 19 FF 8B ; OR accumulator with memory $8BFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $DFFFCF.l,X		; FF CF FF DF ; Subtract with carry (long,X) $DFFFCF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F7FFDD.l,X		; FF DD FF F7 ; Subtract with carry (long,X) $F7FFDD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sbc $9FF79F.l,X		; FF 9F F7 9F ; Subtract with carry (long,X) $9FF79F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F9DE.w,X		; FD DE F9 ; Subtract with carry $F9DE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FEFFFB.l,X		; FF FB FF FE ; Subtract with carry (long,X) $FEFFFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E6FF7F.l,X		; FF 7F FF E6 ; Subtract with carry (long,X) $E6FF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $9FFFFD.l,X		; 1F FD FF 9F ; Logical OR long $9FFFFD.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $9FFFFF.l,X		; 7F FF FF 9F ; Add long $9FFFFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $289F6C.l,X		; FF 6C 9F 28 ; Subtract with carry (long,X) $289F6C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $0FFFC2.l,X		; DF C2 FF 0F ; Compare accumulator (long,X) $0FFFC2.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	jsr ($FFF2.w,X)		; FC F2 FF ; Jump to subroutine indirect indexed ($FFF2.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FF22.w,X		; FD 22 FF ; Subtract with carry $FF22.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $C3FB35.l,X		; FF 35 FB C3 ; Subtract with carry (long,X) $C3FB35.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $21BF4E.l,X		; 3F 4E BF 21 ; AND accumulator with memory (long,X) $21BF4E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $3CFF3F.l,X		; FF 3F FF 3C ; Subtract with carry (long,X) $3CFF3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $78FFF8.l,X		; FF F8 FF 78 ; Subtract with carry (long,X) $78FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $3FFFC7.l,X		; FF C7 FF 3F ; Subtract with carry (long,X) $3FFFC7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $803FC0.l,X		; DF C0 3F 80 ; Compare accumulator (long,X) $803FC0.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $C00200.l,X		; FF 00 02 C0 ; Subtract with carry (long,X) $C00200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF4AE1.l,X		; FF E1 4A FF ; Subtract with carry (long,X) $FF4AE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $D9FF.w,X		; 3E FF D9 ; Rotate left $D9FF.w,X [Reads: X Index] [Flags: ZNC]
	sbc [$7C.b]		; E7 7C ; Subtract with carry (long) [$7C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	sbc $03FE01.l,X		; FF 01 FE 03 ; Subtract with carry (long,X) $03FE01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($F807.w,X)		; FC 07 F8 ; Jump to subroutine indirect indexed ($F807.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor $0F.b,S		; 43 0F ; Exclusive OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	sta $FF47F4.l		; 8F F4 47 FF ; Store accumulator (long) $FF47F4.l [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sbc $3EDD.w,X		; FD DD 3E ; Subtract with carry $3EDD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $F71F.w		; EE 1F F7 ; Increment $F71F.w [Flags: ZN]
	ora $07FB43.l		; 0F 43 FB 07 ; OR accumulator with memory (long) $07FB43.l [Writes: Accumulator] [Flags: ZN]
	ora $7B.b,S		; 03 7B ; OR accumulator with stack relative $7B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc [$FB.b]		; E7 FB ; Subtract with carry (long) [$FB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$43.b]		; E7 43 ; Subtract with carry (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and [$DF.b]		; 27 DF ; AND accumulator with memory (long) [$DF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $EF.b		; 04 EF ; Test and set bits $EF.b [Reads: Accumulator] [Flags: Z]
	eor $7FFF7F.l,X		; 5F 7F FF 7F ; Exclusive OR accumulator with memory (long,X) $7FFF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $BF43FF.l		; 22 FF 43 BF ; Jump to subroutine long $BF43FF.l [Writes: Stack Pointer] [Flow: call]
	cmp $00FF47.l,X		; DF 47 FF 00 ; Compare accumulator (long,X) $00FF47.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta $30CF60.l,X		; 9F 60 CF 30 ; Store accumulator (long,X) $30CF60.l,X [Reads: Accumulator, X Index]
	sbc [$18.b]		; E7 18 ; Subtract with carry (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($0C.b,S),Y		; F3 0C ; Subtract with carry (stack relative indirect indexed) ($0C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $C03F60.l,X		; 9F 60 3F C0 ; Store accumulator (long,X) $C03F60.l,X [Reads: Accumulator, X Index]
	sta $BE.b,S		; 83 BE ; Store accumulator (stack relative) $BE.b,S [Reads: Accumulator, Stack Pointer]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	inc $FF03.w,X		; FE 03 FF ; Increment memory $FF03.w,X [Reads: X Index] [Flags: ZN]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $33E000.l,X		; FF 00 E0 33 ; Subtract with carry (long,X) $33E000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $EFFFF7.l,X		; FF F7 FF EF ; Subtract with carry (long,X) $EFFFF7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $97FF9F.l,X		; FF 9F FF 97 ; Subtract with carry (long,X) $97FF9F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FDFFE6.l,X		; FF E6 FF FD ; Subtract with carry (long,X) $FDFFE6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FCFB.w,X		; FE FB FC ; Increment memory $FCFB.w,X [Reads: X Index] [Flags: ZN]
	sbc $FB.b,X		; F5 FB ; Subtract $FB.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	dec $FF.b		; C6 FF ; Decrement $FF.b [Reads: Direct Page] [Flags: ZN]
	sty $FBFF.w		; 8C FF FB ; Store Y register to $FBFF.w [Reads: Y Index]
	jsr ($FF9C.w,X)		; FC 9C FF ; Jump to subroutine indirect indexed ($FF9C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $10EFFF.l		; 0F FF EF 10 ; OR accumulator with memory (long) $10EFFF.l [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $3FFF70.l,X		; FF 70 FF 3F ; Subtract with carry (long,X) $3FFF70.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $CF7F9F.l,X		; FF 9F 7F CF ; Subtract with carry (long,X) $CF7F9F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $339F67.l,X		; 3F 67 9F 33 ; AND accumulator with memory (long,X) $339F67.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $698B74.l		; CF 74 8B 69 ; Compare accumulator (long) $698B74.l [Reads: Accumulator] [Flags: ZNC]
	sbc $F7FFFB.l,X		; FF FB FF F7 ; Subtract with carry (long,X) $F7FFFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	ora ($7E.b,S),Y		; 13 7E ; OR accumulator (stack relative indirect indexed) ($7E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $B8FFFC.l,X		; FF FC FF B8 ; Subtract with carry (long,X) $B8FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F7FDF2.l,X		; FF F2 FD F7 ; Subtract with carry (long,X) $F7FDF2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $FA.b		; E5 FA ; Subtract $FA.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stx $F9.b		; 86 F9 ; Store X register to $F9.b [Reads: X Index]
	.db $42, $BD		; 42 BD ; Reserved instruction
	lsr $B9.b		; 46 B9 ; Logical shift right $B9.b [Reads: Direct Page] [Flags: ZNC]
	sbc $BF4310.l		; EF 10 43 BF ; Subtract with carry (long) $BF4310.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BF6F0B.l,X		; FF 0B 6F BF ; Subtract with carry (long,X) $BF6F0B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $9F6CBF.l		; 4F BF 6C 9F ; Exclusive OR accumulator with memory (long) $9F6CBF.l [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp $FE4BB7.l,X		; DF B7 4B FE ; Compare accumulator (long,X) $FE4BB7.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	ora ($83.b,X)		; 01 83 ; Logical OR ($83.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sty $03.b		; 84 03 ; Store Y register to $03.b [Reads: Y Index]
	cpx #$C330.w		; E0 30 C3 ; Compare #$C330.w with X register [Reads: X Index] [Flags: ZNC]
	ldy $C1BE.w,X		; BC BE C1 ; Load Y register $C1BE.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cmp ($FF.b,X)		; C1 FF ; Compare accumulator ($FF.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	adc [$FF.b]		; 67 FF ; Add with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sbc [$1C.b]		; E7 1C ; Subtract with carry (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $5E.b,S		; E3 5E ; Subtract stack-relative $5E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	lda $BD3EDD.l,X		; BF DD 3E BD ; Load long $BD3EDD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $FE6D.w,X		; 7E 6D FE ; Rotate right $FE6D.w,X [Reads: X Index] [Flags: ZNC]
	cmp $BEFE.w,X		; DD FE BE ; Compare accumulator $BEFE.w,X [Reads: X Index] [Flags: ZNC]
	sbc $00FF6F.l,X		; FF 6F FF 00 ; Subtract with carry (long,X) $00FF6F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $B76897.l,X		; FF 97 68 B7 ; Subtract with carry (long,X) $B76897.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda ($4D.b)		; B2 4D ; Load accumulator (indirect) ($4D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $9E47.w,Y		; B9 47 9E ; Load $9E47.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($CE.b,X)		; 61 CE ; Add with carry ($CE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($63.b),Y		; 31 63 ; AND accumulator with memory ($63.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC738.l,X		; 9F 38 C7 7E ; Store accumulator (long,X) $7EC738.l,X [Reads: Accumulator, X Index]
	sbc $DDFE7F.l,X		; FF 7F FE DD ; Subtract with carry (long,X) $DDFE7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $5D,$FE		; 44 FE 5D ; Move block positive $5D,$FE [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $DD.b		; 05 DD ; Logical OR $DD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $FEBD.w,X		; FE BD FE ; Increment memory $FEBD.w,X [Reads: X Index] [Flags: ZN]
	ror $4DFF.w,X		; 7E FF 4D ; Rotate right $4DFF.w,X [Reads: X Index] [Flags: ZNC]
	inc $0401.w,X		; FE 01 04 ; Increment memory $0401.w,X [Reads: X Index] [Flags: ZN]
	jsr ($A503.w,X)		; FC 03 A5 ; Jump to subroutine indirect indexed ($A503.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FF4657.l,X		; FF 57 46 FF ; Subtract with carry (long,X) $FF4657.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF5C01.l,X		; 5F 01 5C FF ; Exclusive OR accumulator with memory (long,X) $FF5C01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $59.b,S		; 43 59 ; Exclusive OR accumulator with stack relative $59.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $3B03.w,X		; FE 03 3B ; Increment memory $3B03.w,X [Reads: X Index] [Flags: ZN]
	sbc [$FB.b]		; E7 FB ; Subtract with carry (long) [$FB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc [$43.b]		; 67 43 ; Add with carry (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc [$0A.b]		; E7 0A ; Subtract with carry (long) [$0A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $FDE7.w,X		; FE E7 FD ; Increment memory $FDE7.w,X [Reads: X Index] [Flags: ZN]
	sbc $80FF7F.l		; EF 7F FF 80 ; Subtract with carry (long) $80FF7F.l [Writes: Accumulator] [Flags: ZVNC]
	adc $3D9F7D.l,X		; 7F 7D 9F 3D ; Add long $3D9F7D.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $5B.b,S		; 83 5B ; Store accumulator (stack relative) $5B.b,S [Reads: Accumulator, Stack Pointer]
	asl $22.b		; 06 22 ; Arithmetic shift left $22.b [Reads: Direct Page] [Flags: ZNC]
	sbc $9FEF15.l,X		; FF 15 EF 9F ; Subtract with carry (long,X) $9FEF15.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1F.b,S		; E3 1F ; Subtract stack-relative $1F.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cmp $F132.w		; CD 32 F1 ; Compare $F132.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	asl $07F8.w		; 0E F8 07 ; Arithmetic shift left $07F8.w [Flags: ZNC]
	jsr ($FE03.w,X)		; FC 03 FE ; Jump to subroutine indirect indexed ($FE03.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $80, $9F		; 80 9F ; Branch always to $80, $9F [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc [$18.b]		; E7 18 ; Subtract with carry (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $4306.w,Y		; F9 06 43 ; Subtract with carry $4306.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7F0100.l,X		; FF 00 01 7F ; Subtract with carry (long,X) $7F0100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $83		; 80 83 ; Branch always to $80, $83 [Flow: branch]
	ldy #$0505.w		; A0 05 05 ; Load #$0505.w into Y register [Writes: Y Index] [Flags: ZN]
	sta $38C770.l		; 8F 70 C7 38 ; Store accumulator (long) $38C770.l [Reads: Accumulator]
	cpx #$FF1F.w		; E0 1F FF ; Compare #$FF1F.w with X register [Reads: X Index] [Flags: ZNC]
	ora $FD7FFE.l		; 0F FE 7F FD ; OR accumulator with memory (long) $FD7FFE.l [Writes: Accumulator] [Flags: ZN]
	lda $F7DFFB.l,X		; BF FB DF F7 ; Load long $F7DFFB.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $DFF7EF.l		; EF EF F7 DF ; Subtract with carry (long) $DFF7EF.l [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda $FE7FFD.l,X		; BF FD 7F FE ; Load long $FE7FFD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $9F0000.l		; 8F 00 00 9F ; Store accumulator (long) $9F0000.l [Reads: Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $3F		; F0 3F ; Branch if equal to $F0, $3F [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $7F		; F0 7F ; Branch if equal to $F0, $7F [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($FF.b),Y		; F1 FF ; Subtract with carry ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($FE.b,S),Y		; F3 FE ; Subtract with carry (stack relative indirect indexed) ($FE.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0CFF22.l,X		; FF 22 FF 0C ; Subtract with carry (long,X) $0CFF22.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$88D7.w		; C0 D7 88 ; Compare #$88D7.w with Y register [Reads: Y Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta [$DC.b],Y		; 97 DC ; Store accumulator (long indexed) [$DC.b],Y [Reads: Accumulator, Direct Page, Y Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	nop		; EA ; No operation
	sta ($E5.b),Y		; 91 E5 ; Store accumulator ($E5.b),Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $9D.b,S		; E3 9D ; Subtract stack-relative $9D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	jsl $0002FF.l		; 22 FF 02 00 ; Jump to subroutine long $0002FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $004300.l,X		; FF 00 43 00 ; Subtract with carry (long,X) $004300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FF44.l,X		; FF 44 FF 00 ; Subtract with carry (long,X) $00FF44.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $1C0003.l,X		; FF 03 00 1C ; Subtract with carry (long,X) $1C0003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $3D42.w,X		; 1D 42 3D ; OR accumulator with memory $3D42.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $C0.b,S		; 43 C0 ; Exclusive OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $1BA413.l,X		; 3F 13 A4 1B ; AND accumulator with memory (long,X) $1BA413.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora ($F0.b),Y		; 11 F0 ; OR accumulator with memory ($F0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	sbc $518E71.l,X		; FF 71 8E 51 ; Subtract with carry (long,X) $518E71.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stx $844A.w		; 8E 4A 84 ; Store X register to $844A.w [Reads: X Index]
	eor $80.b,X		; 55 80 ; Exclusive OR accumulator with memory $80.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	.db $80, $85		; 80 85 ; Branch always to $80, $85 [Flow: branch]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	cpx #$CF43.w		; E0 43 CF ; Compare #$CF43.w with X register [Reads: X Index] [Flags: ZNC]
	.db $30, $58		; 30 58 ; Branch if minus to $30, $58 [Flow: branch]
	jsr $2057.w		; 20 57 20 ; Jump to subroutine at $2057.w [Writes: Stack Pointer] [Flow: call]
	mvn $57,$23		; 54 23 57 ; Move block negative $57,$23 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	jsr $001F.w		; 20 1F 00 ; Jump to subroutine at $001F.w [Writes: Stack Pointer] [Flow: call]
	cpx #$001F.w		; E0 1F 00 ; Compare #$001F.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $3418E7.l,X		; FF E7 18 34 ; Subtract with carry (long,X) $3418E7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp $08.b,X		; D5 08 ; Compare accumulator $08.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $88.b,X		; 55 88 ; Exclusive OR accumulator with memory $88.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $08.b,X		; D5 08 ; Compare accumulator $08.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	adc $F90680.l,X		; 7F 80 06 F9 ; Add long $F90680.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $0C01.w,X		; FE 01 0C ; Increment memory $0C01.w,X [Reads: X Index] [Flags: ZN]
	ora $F4.b,S		; 03 F4 ; OR accumulator with stack relative $F4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $14.b,S		; 03 14 ; OR accumulator with stack relative $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $F4.b,S		; E3 F4 ; Subtract stack-relative $F4.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora $3F.b,S		; 03 3F ; OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($46.b,X)		; 01 46 ; Logical OR ($46.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sec		; 38 ; Set carry flag [Flags: C]
	stx $1470.w		; 8E 70 14 ; Store X register to $1470.w [Reads: X Index]
	cpx #$C038.w		; E0 38 C0 ; Compare #$C038.w with X register [Reads: X Index] [Flags: ZNC]
	mvp $04,$B8		; 44 B8 04 ; Move block positive $04,$B8 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $42, $FC		; 42 FC ; Reserved instruction
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $3C.b		; 24 3C ; Test bits $3C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	mvp $84,$7C		; 44 7C 84 ; Move block positive $84,$7C [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	jsr ($7C64.w,X)		; FC 64 7C ; Jump to subroutine indirect indexed ($7C64.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	mvp $3C,$24		; 44 24 3C ; Move block positive $3C,$24 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	jsl $42023C.l		; 22 3C 02 42 ; Jump to subroutine long $42023C.l [Writes: Stack Pointer] [Flow: call]
	ror $4681.w,X		; 7E 81 46 ; Rotate right $4681.w,X [Reads: X Index] [Flags: ZNC]
	sbc $690599.l,X		; FF 99 05 69 ; Subtract with carry (long,X) $690599.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $0C1E12.l		; 6F 12 1E 0C ; Add with carry (long) $0C1E12.l [Writes: Accumulator] [Flags: ZVNC]
	tsb $1243.w		; 0C 43 12 ; Test and set bits $1243.w [Reads: Accumulator] [Flags: Z]
	asl $2245.w,X		; 1E 45 22 ; Arithmetic shift left $2245.w,X [Reads: X Index] [Flags: ZNC]
	rol $5202.w,X		; 3E 02 52 ; Rotate left $5202.w,X [Reads: X Index] [Flags: ZNC]
	ror $2252.w,X		; 7E 52 22 ; Rotate right $2252.w,X [Reads: X Index] [Flags: ZNC]
	ror $8143.w,X		; 7E 43 81 ; Rotate right $8143.w,X [Reads: X Index] [Flags: ZNC]
	sbc $FE9E09.l,X		; FF 09 9E FE ; Subtract with carry (long,X) $FE9E09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $90, $F0		; 90 F0 ; Branch if carry clear to $90, $F0 [Flow: branch]
	stz $82FC.w		; 9C FC 82 ; Store zero to $82FC.w
	inc $FF81.w,X		; FE 81 FF ; Increment memory $FF81.w,X [Reads: X Index] [Flags: ZN]
	sta $A0.b,S		; 83 A0 ; Store accumulator (stack relative) $A0.b,S [Reads: Accumulator, Stack Pointer]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $82833E.l		; 22 3E 83 82 ; Jump to subroutine long $82833E.l [Writes: Stack Pointer] [Flow: call]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sty $82FC.w		; 8C FC 82 ; Store Y register to $82FC.w [Reads: Y Index]
	inc $7E7E.w,X		; FE 7E 7E ; Increment memory $7E7E.w,X [Reads: X Index] [Flags: ZN]
	eor $81.b,S		; 43 81 ; Exclusive OR accumulator with stack relative $81.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $7F7903.l,X		; FF 03 79 7F ; Subtract with carry (long,X) $7F7903.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$450F.w		; 09 0F 45 ; Logical OR #$450F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($1E.b)		; 12 1E ; OR accumulator with memory (indirect) ($1E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sty $90.b		; 84 90 ; Store Y register to $90.b [Reads: Y Index]
	brk $4A.b		; 00 4A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7E0199.l,X		; FF 99 01 7E ; Subtract with carry (long,X) $7E0199.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $8143.w,X		; 7E 43 81 ; Rotate right $8143.w,X [Reads: X Index] [Flags: ZNC]
	sbc $FE9E01.l,X		; FF 01 9E FE ; Subtract with carry (long,X) $FE9E01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $90.b,S		; 43 90 ; Exclusive OR accumulator with stack relative $90.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $83		; F0 83 ; Branch if equal to $F0, $83 [Flow: branch]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	brk $4F.b		; 00 4F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$99.b]		; E7 99 ; Subtract with carry (long) [$99.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and $3313FF.l		; 2F FF 13 33 ; AND accumulator with memory (long) $3313FF.l [Writes: Accumulator] [Flags: ZN]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $38.b,S		; 03 38 ; OR accumulator with stack relative $38.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$68.b]		; 07 68 ; OR accumulator with memory (long) [$68.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$60.b],Y		; 17 60 ; OR accumulator with memory (long indexed) [$60.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $F901FE.l,X		; 1F FE 01 F9 ; Logical OR long $F901FE.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5F.b		; 00 5F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $D5		; 80 D5 ; Branch always to $80, $D5 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $51.b,S		; 43 51 ; Exclusive OR accumulator with stack relative $51.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stx $F10B.w		; 8E 0B F1 ; Store X register to $F10B.w [Reads: X Index]
	asl $3FC0.w		; 0E C0 3F ; Arithmetic shift left $3FC0.w [Flags: ZNC]
	sta $007070.l		; 8F 70 70 00 ; Store accumulator (long) $007070.l [Reads: Accumulator]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	eor [$20.b],Y		; 57 20 ; Exclusive OR accumulator with memory (long indexed) [$20.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $54.b,S		; 43 54 ; Exclusive OR accumulator with stack relative $54.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $0B.b,S		; 23 0B ; AND accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jmp.w [$0023]		; DC 23 00 ; Jump long indirect [$0023] [Flow: jump]
	sbc $0F0E71.l,X		; FF 71 0E 0F ; Subtract with carry (long,X) $0F0E71.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp $08.b,X		; D5 08 ; Compare accumulator $08.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $55.b,S		; 43 55 ; Exclusive OR accumulator with stack relative $55.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$7723.w		; E0 23 77 ; Compare #$7723.w with X register [Reads: X Index] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	sbc $030C00.l,X		; FF 00 0C 03 ; Subtract with carry (long,X) $030C00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $03FF01.l,X		; FF 01 FF 03 ; Subtract with carry (long,X) $03FF01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1FFF07.l,X		; FF 07 FF 1F ; Subtract with carry (long,X) $1FFF07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $72F8F8.l,X		; FF F8 F8 72 ; Subtract with carry (long,X) $72F8F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($FEFE.w,X)		; FC FE FE ; Jump to subroutine indirect indexed ($FEFE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($F8FC.w,X)		; FC FC F8 ; Jump to subroutine indirect indexed ($F8FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	cpy #$23C0.w		; C0 C0 23 ; Compare #$23C0.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $4D.b		; 00 4D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $3C.b		; 24 3C ; Test bits $3C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $C4.b,S		; 83 C4 ; Store accumulator (stack relative) $C4.b,S [Reads: Accumulator, Stack Pointer]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora ($8E.b,X)		; 01 8E ; Logical OR ($8E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $8143.w,X		; FE 43 81 ; Increment memory $8143.w,X [Reads: X Index] [Flags: ZN]
	sbc $7E7E03.l,X		; FF 03 7E 7E ; Subtract with carry (long,X) $7E7E03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($7E.b)		; 52 7E ; Exclusive OR accumulator with memory (indirect) ($7E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $B2.b,S		; 43 B2 ; Exclusive OR accumulator with stack relative $B2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $8143.w,X		; FE 43 81 ; Increment memory $8143.w,X [Reads: X Index] [Flags: ZN]
	sbc $7E7201.l,X		; FF 01 72 7E ; Subtract with carry (long,X) $7E7201.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $9E.b,S		; 83 9E ; Store accumulator (stack relative) $9E.b,S [Reads: Accumulator, Stack Pointer]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$690F.w		; 09 0F 69 ; Logical OR #$690F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $81FF99.l		; 6F 99 FF 81 ; Add with carry (long) $81FF99.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $3C7E42.l,X		; FF 42 7E 3C ; Subtract with carry (long,X) $3C7E42.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $4881.w,X		; 3C 81 48 ; Test bits $4881.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sbc $BA8399.l,X		; FF 99 83 BA ; Subtract with carry (long,X) $BA8399.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $4202.w,X		; 3C 02 42 ; Test bits $4202.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ror $4881.w,X		; 7E 81 48 ; Rotate right $4881.w,X [Reads: X Index] [Flags: ZNC]
	sbc $420699.l,X		; FF 99 06 42 ; Subtract with carry (long,X) $420699.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $7C7C.w,X		; 7E 7C 7C ; Rotate right $7C7C.w,X [Reads: X Index] [Flags: ZNC]
	.db $82, $FE, $81		; 82 FE 81 ; Branch always long to $82, $FE, $81 [Flow: branch]
	lsr $FF.b		; 46 FF ; Logical shift right $FF.b [Reads: Direct Page] [Flags: ZNC]
	sta $8245.w,Y		; 99 45 82 ; Store accumulator to $8245.w,Y [Reads: Accumulator, Y Index]
	inc $9C01.w,X		; FE 01 9C ; Increment memory $9C01.w,X [Reads: X Index] [Flags: ZN]
	jsr ($9049.w,X)		; FC 49 90 ; Jump to subroutine indirect indexed ($9049.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor #$FF99.w		; 49 99 FF ; Exclusive OR #$FF99.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $81		; 10 81 ; Branch if plus to $10, $81 [Flow: branch]
	sbc $7CFE82.l,X		; FF 82 FE 7C ; Subtract with carry (long,X) $7CFE82.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp ($FFFF.w,X)		; 7C FF FF ; Jump indirect indexed to ($FFFF.w,X) [Reads: X Index] [Flow: jump]
	sty $B5FF.w		; 8C FF B5 ; Store Y register to $B5FF.w [Reads: Y Index]
	sbc $8DFFB4.l,X		; FF B4 FF 8D ; Subtract with carry (long,X) $8DFFB4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF26BC.l,X		; FF BC 26 FF ; Subtract with carry (long,X) $FF26BC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sbc $52FFCA.l,X		; FF CA FF 52 ; Subtract with carry (long,X) $52FFCA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $5AFFDA.l,X		; FF DA FF 5A ; Subtract with carry (long,X) $5AFFDA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $D6FF.w,Y		; 39 FF D6 ; AND accumulator with memory $D6FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $D6FFD0.l,X		; FF D0 FF D6 ; Subtract with carry (long,X) $D6FFD0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF2636.l,X		; FF 36 26 FF ; Subtract with carry (long,X) $FF2636.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $B4.b		; 04 B4 ; Test and set bits $B4.b [Reads: Accumulator] [Flags: Z]
	sbc $A6FF96.l,X		; FF 96 FF A6 ; Subtract with carry (long,X) $A6FF96.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx $24.b,Y		; B6 24 ; Load X register $24.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	sbc $227F00.l,X		; FF 00 7F 22 ; Subtract with carry (long,X) $227F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFF302.l,X		; FF 02 F3 FF ; Subtract with carry (long,X) $FFF302.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $44.b,S		; E3 44 ; Subtract stack-relative $44.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $6100F3.l,X		; FF F3 00 61 ; Subtract with carry (long,X) $6100F3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc $E3FFFF.l,X		; 7F FF FF E3 ; Add long $E3FFFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F3FFD9.l,X		; FF D9 FF F3 ; Subtract with carry (long,X) $F3FFD9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $41FFE7.l,X		; FF E7 FF 41 ; Subtract with carry (long,X) $41FFE7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	cop $F3.b		; 02 F3 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF44E3.l,X		; FF E3 44 FF ; Subtract with carry (long,X) $FF44E3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($00.b,S),Y		; F3 00 ; Subtract with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($26.b,X)		; 61 26 ; Add with carry ($26.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $026488.l,X		; FF 88 64 02 ; Subtract with carry (long,X) $026488.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	cop $C3.b		; 02 C3 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $9383F9.l,X		; FF F9 83 93 ; Subtract with carry (long,X) $9383F9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF2243.l,X		; FF 43 22 FF ; Subtract with carry (long,X) $FF2243.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp $FF.b,S		; C3 FF ; Compare accumulator (stack relative) $FF.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sta $F9FF.w,Y		; 99 FF F9 ; Store accumulator to $F9FF.w,Y [Reads: Accumulator, Y Index]
	sbc $E7FFE3.l,X		; FF E3 FF E7 ; Subtract with carry (long,X) $E7FFE3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $E700FF.l		; 22 FF 00 E7 ; Jump to subroutine long $E700FF.l [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $FFF808.l,X		; FF 08 F8 FF ; Subtract with carry (long,X) $FFF808.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFEEFF.l		; EF FF EE FF ; Subtract with carry (long) $FFEEFF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc ($22.b),Y		; F1 22 ; Subtract with carry ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF1F08.l,X		; FF 08 1F FF ; Subtract with carry (long,X) $FF1F08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $FFF7FF.l		; 6F FF F7 FF ; Add with carry (long) $FFF7FF.l [Writes: Accumulator] [Flags: ZVNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FF44BB.l,X		; FF BB 44 FF ; Subtract with carry (long,X) $FF44BB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $FB10.w,X		; DD 10 FB ; Compare accumulator $FB10.w,X [Reads: X Index] [Flags: ZNC]
	sbc $C7F9E7.l,X		; FF E7 F9 C7 ; Subtract with carry (long,X) $C7F9E7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	dec $E1F1.w		; CE F1 E1 ; Decrement $E1F1.w [Flags: ZN]
	dec $C8F7.w,X		; DE F7 C8 ; Decrement memory $C8F7.w,X [Reads: X Index] [Flags: ZN]
	sbc $FFFFE1.l,X		; FF E1 FF FF ; Subtract with carry (long,X) $FFFFE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $FF46.w,X		; DD 46 FF ; Compare accumulator $FF46.w,X [Reads: X Index] [Flags: ZNC]
	lda $DB02.w,X		; BD 02 DB ; Load $DB02.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FF26E7.l,X		; FF E7 26 FF ; Subtract with carry (long,X) $FF26E7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $B8FFBB.l,X		; FF BB FF B8 ; Subtract with carry (long,X) $B8FFBB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $8BFFBB.l,X		; FF BB FF 8B ; Subtract with carry (long,X) $8BFFBB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	tsb $F2.b		; 04 F2 ; Test and set bits $F2.b [Reads: Accumulator] [Flags: Z]
	sbc $F7FDF3.l,X		; FF F3 FD F7 ; Subtract with carry (long,X) $F7FDF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $F8,$FF		; 44 FF F8 ; Move block positive $F8,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $CB.b,S		; 03 CB ; OR accumulator with stack relative $CB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $83FCC7.l,X		; FF C7 FC 83 ; Subtract with carry (long,X) $83FCC7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $0B02.w		; 4E 02 0B ; Logical shift right $0B02.w [Flags: ZNC]
	adc $FF6FBF.l		; 6F BF 6F FF ; Add with carry (long) $FF6FBF.l [Writes: Accumulator] [Flags: ZVNC]
	sta $FFF7F7.l,X		; 9F F7 F7 FF ; Store accumulator (long,X) $FFF7F7.l,X [Reads: Accumulator, X Index]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora $27F7FF.l		; 0F FF F7 27 ; OR accumulator with memory (long) $27F7FF.l [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $7B.b		; 46 7B ; Logical shift right $7B.b [Reads: Direct Page] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $09,$FF		; 44 FF 09 ; Move block positive $09,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $79.b		; 00 79 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $D408FF.l		; 22 FF 08 D4 ; Jump to subroutine long $D408FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $C4FF55.l,X		; FF 55 FF C4 ; Subtract with carry (long,X) $C4FF55.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $6CFF6F.l,X		; FF 6F FF 6C ; Subtract with carry (long,X) $6CFF6F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	tsb $46.b		; 04 46 ; Test and set bits $46.b [Reads: Accumulator] [Flags: Z]
	sbc $6CFFED.l,X		; FF ED FF 6C ; Subtract with carry (long,X) $6CFFED.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $FF26.w		; 6D 26 FF ; Add $FF26.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror $AEFF.w		; 6E FF AE ; Rotate right $AEFF.w [Flags: ZNC]
	sbc $AFFF2E.l,X		; FF 2E FF AF ; Subtract with carry (long,X) $AFFF2E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF26A2.l,X		; FF A2 26 FF ; Subtract with carry (long,X) $FF26A2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $3F04FF.l		; 22 FF 04 3F ; Jump to subroutine long $3F04FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $3FFFBF.l,X		; FF BF FF 3F ; Subtract with carry (long,X) $3FFFBF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $48,$7F		; 44 7F 48 ; Move block positive $48,$7F [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $49.b		; 00 49 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $7F.b,S		; 43 7F ; Exclusive OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $025384.l,X		; FF 84 53 02 ; Subtract with carry (long,X) $025384.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $D3.b		; 04 D3 ; Test and set bits $D3.b [Reads: Accumulator] [Flags: Z]
	sbc $73FFC1.l,X		; FF C1 FF 73 ; Subtract with carry (long,X) $73FFC1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $0027FF.l		; 22 FF 27 00 ; Jump to subroutine long $0027FF.l [Writes: Stack Pointer] [Flow: call]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $24,$FC		; 44 FC 24 ; Move block positive $24,$FC [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora ($E4.b,X)		; 01 E4 ; Logical OR ($E4.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr ($FF25.w,X)		; FC 25 FF ; Jump to subroutine indirect indexed ($FF25.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldx $02.b,Y		; B6 02 ; Load X register $02.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	jsl $C288FF.l		; 22 FF 88 C2 ; Jump to subroutine long $C288FF.l [Writes: Stack Pointer] [Flow: call]
	cop $44.b		; 02 44 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FB02DD.l,X		; FF DD 02 FB ; Subtract with carry (long,X) $FB02DD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF48E1.l,X		; FF E1 48 FF ; Subtract with carry (long,X) $FF48E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$E100.w		; C0 00 E1 ; Compare #$E100.w with Y register [Reads: Y Index] [Flags: ZNC]
	jsl $DD00FF.l		; 22 FF 00 DD ; Jump to subroutine long $DD00FF.l [Writes: Stack Pointer] [Flow: call]
	lsr $FF.b		; 46 FF ; Logical shift right $FF.b [Reads: Direct Page] [Flags: ZNC]
	lda $DB02.w,X		; BD 02 DB ; Load $DB02.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FF26E7.l,X		; FF E7 26 FF ; Subtract with carry (long,X) $FF26E7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor [$FF.b]		; 47 FF ; Exclusive OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $FFC7FF.l,X		; DF FF C7 FF ; Compare accumulator (long,X) $FFC7FF.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$24.b]		; C7 24 ; Compare accumulator (long) [$24.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc $FFE306.l,X		; FF 06 E3 FF ; Subtract with carry (long,X) $FFE306.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$F2FF.w		; E0 FF F2 ; Compare #$F2FF.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $FF44FC.l,X		; FF FC 44 FF ; Subtract with carry (long,X) $FF44FC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $0F07FF.l		; 22 FF 07 0F ; Jump to subroutine long $0F07FF.l [Writes: Stack Pointer] [Flow: call]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$FF.b],Y		; 77 FF ; Add with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF448F.l,X		; FF 8F 44 FF ; Subtract with carry (long,X) $FF448F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$02.b],Y		; 97 02 ; Store accumulator (long indexed) [$02.b],Y [Reads: Accumulator, Direct Page, Y Index]
	ora $47FFFF.l,X		; 1F FF FF 47 ; Logical OR long $47FFFF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $4E.b		; 00 4E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $7F.b,S		; 43 7F ; Exclusive OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $42, $22		; 42 22 ; Reserved instruction
	adc $FF7908.l,X		; 7F 08 79 FF ; Add long $FF7908.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $14FF.w		; 1C FF 14 ; Test and reset bits $14FF.w [Reads: Accumulator] [Flags: Z]
	sbc [$74.b],Y		; F7 74 ; Subtract with carry (long indexed) [$74.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$7A.b],Y		; F7 7A ; Subtract with carry (long indexed) [$7A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FB.b,S		; 43 FB ; Exclusive OR accumulator with stack relative $FB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jsl $FF01FB.l		; 22 FB 01 FF ; Jump to subroutine long $FF01FB.l [Writes: Stack Pointer] [Flow: call]
	inc $FF44.w,X		; FE 44 FF ; Increment memory $FF44.w,X [Reads: X Index] [Flags: ZN]
	jsr ($F802.w,X)		; FC 02 F8 ; Jump to subroutine indirect indexed ($F802.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FF44FA.l,X		; FF FA 44 FF ; Subtract with carry (long,X) $FF44FA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FE01.w,X		; FD 01 FE ; Subtract with carry $FE01.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $3FFF44.l,X		; 7F 44 FF 3F ; Add long $3FFF44.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $1F.b,S		; 03 1F ; OR accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $449F7F.l,X		; FF 7F 9F 44 ; Subtract with carry (long,X) $449F7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7F013F.l,X		; FF 3F 01 7F ; Subtract with carry (long,X) $7F013F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FEFF44.l,X		; FF 44 FF FE ; Subtract with carry (long,X) $FEFF44.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF43FD.l,X		; FF FD 43 FF ; Subtract with carry (long,X) $FF43FD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FF22.w,X		; FE 22 FF ; Increment memory $FF22.w,X [Reads: X Index] [Flags: ZN]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $3F,$FF		; 44 FF 3F ; Move block positive $3F,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $1F.b,S		; 43 1F ; Exclusive OR accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FFBF43.l,X		; FF 43 BF FF ; Subtract with carry (long,X) $FFBF43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $4E.b		; 84 4E ; Store Y register to $4E.b [Reads: Y Index]
	cop $88.b		; 02 88 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $02.b,X		; 94 02 ; Store Y register $02.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	jsl $4901FF.l		; 22 FF 01 49 ; Jump to subroutine long $4901FF.l [Writes: Stack Pointer] [Flow: call]
	adc $FF9843.l,X		; 7F 43 98 FF ; Add long $FF9843.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $99.b		; 02 99 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $EF4329.l,X		; FF 29 43 EF ; Subtract with carry (long,X) $EF4329.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	jsl $E400EF.l		; 22 EF 00 E4 ; Jump to subroutine long $E400EF.l [Writes: Stack Pointer] [Flow: call]
	mvp $64,$FC		; 44 FC 64 ; Move block positive $64,$FC [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $E4.b,S		; 43 E4 ; Exclusive OR accumulator with stack relative $E4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr ($2102.w,X)		; FC 02 21 ; Jump to subroutine indirect indexed ($2102.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FF2221.l,X		; FF 21 22 FF ; Subtract with carry (long,X) $FF2221.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $FFBE.w		; 0E BE FF ; Arithmetic shift left $FFBE.w [Flags: ZNC]
	stz $C1FF.w		; 9C FF C1 ; Store zero to $C1FF.w
	sbc $B6FFA2.l,X		; FF A2 FF B6 ; Subtract with carry (long,X) $B6FFA2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E2FFC1.l,X		; FF C1 FF E2 ; Subtract with carry (long,X) $E2FFC1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF22E7.l,X		; FF E7 22 FF ; Subtract with carry (long,X) $FF22E7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta [$FF.b]		; 87 FF ; Store accumulator (long) [$FF.b] [Reads: Accumulator, Direct Page]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and [$9D.b]		; 27 9D ; AND accumulator with memory (long) [$9D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $ED.b,S		; E3 ED ; Subtract stack-relative $ED.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc ($F5.b,S),Y		; F3 F5 ; Subtract with carry (stack relative indirect indexed) ($F5.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc ($FF.b),Y		; F1 FF ; Subtract with carry ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ldx $FF.b		; A6 FF ; Load $FF.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx #$BEFF.w		; A2 FF BE ; Load #$BEFF.w into X register [Writes: X Index] [Flags: ZN]
	cmp $BFC7B8.l,X		; DF B8 C7 BF ; Compare accumulator (long,X) $BFC7B8.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cpy #$2280.w		; C0 80 22 ; Compare #$2280.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FBE503.l,X		; FF 03 E5 FB ; Subtract with carry (long,X) $FBE503.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $43F3.w		; 0D F3 43 ; Logical OR $43F3.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $0413.w		; ED 13 04 ; Subtract $0413.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora [$E7.b],Y		; 17 E7 ; OR accumulator with memory (long indexed) [$E7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $FF220F.l,X		; 1F 0F 22 FF ; Logical OR long $FF220F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($FE.b)		; 12 FE ; OR accumulator with memory (indirect) ($FE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $FBBFFD.l,X		; 7F FD BF FB ; Add long $FBBFFD.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $EFEFF7.l,X		; DF F7 EF EF ; Compare accumulator (long,X) $EFEFF7.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc [$DF.b],Y		; F7 DF ; Subtract with carry (long indexed) [$DF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda $FE7FFD.l,X		; BF FD 7F FE ; Load long $FE7FFD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $44E7FF.l,X		; FF FF E7 44 ; Subtract with carry (long,X) $44E7FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $8100DB.l,X		; FF DB 00 81 ; Subtract with carry (long,X) $8100DB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $FF24.w,X		; BD 24 FF ; Load $FF24.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $83.b		; 04 83 ; Test and set bits $83.b [Reads: Accumulator] [Flags: Z]
	sbc $83FFBD.l,X		; FF BD FF 83 ; Subtract with carry (long,X) $83FFBD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $BD,$FF		; 44 FF BD ; Move block positive $BD,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cop $C3.b		; 02 C3 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF44BD.l,X		; FF BD 44 FF ; Subtract with carry (long,X) $FF44BD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $FFBD02.l,X		; BF 02 BD FF ; Load long $FFBD02.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $24.b,S		; C3 24 ; Compare accumulator (stack relative) $24.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc $FF8702.l,X		; FF 02 87 FF ; Subtract with carry (long,X) $FF8702.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	mvp $BD,$FF		; 44 FF BD ; Move block positive $BD,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $BB.b		; 02 BB ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF2487.l,X		; FF 87 24 FF ; Subtract with carry (long,X) $FF2487.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $81.b		; 04 81 ; Test and set bits $81.b [Reads: Accumulator] [Flags: Z]
	sbc $83FFBF.l,X		; FF BF FF 83 ; Subtract with carry (long,X) $83FFBF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $BF,$FF		; 44 FF BF ; Move block positive $BF,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sty $42.b		; 84 42 ; Store Y register to $42.b [Reads: Y Index]
	ora $45.b		; 05 45 ; Logical OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FF24BF.l,X		; FF BF 24 FF ; Subtract with carry (long,X) $FF24BF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $2983.w,Y		; B9 83 29 ; Load $2983.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $24.b		; 05 24 ; Logical OR $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FFBD43.l,X		; FF 43 BD FF ; Subtract with carry (long,X) $FFBD43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $FF24.w,X		; BD 24 FF ; Load $FF24.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $C7.b		; 00 C7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $C700EF.l,X		; FF EF 00 C7 ; Subtract with carry (long,X) $C700EF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $FF.b		; 46 FF ; Logical shift right $FF.b [Reads: Direct Page] [Flags: ZNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	cop $BB.b		; 02 BB ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF24C7.l,X		; FF C7 24 FF ; Subtract with carry (long,X) $FF24C7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc $8FFFB7.l,X		; FF B7 FF 8F ; Subtract with carry (long,X) $8FFFB7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $B7FFAF.l,X		; FF AF FF B7 ; Subtract with carry (long,X) $B7FFAF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF24B9.l,X		; FF B9 24 FF ; Subtract with carry (long,X) $FF24B9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor #$FFBF.w		; 49 BF FF ; Exclusive OR #$FFBF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl $7D.b		; 06 7D ; Arithmetic shift left $7D.b [Reads: Direct Page] [Flags: ZNC]
	sbc $55FF39.l,X		; FF 39 FF 55 ; Subtract with carry (long,X) $55FF39.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF436D.l,X		; FF 6D 43 FF ; Subtract with carry (long,X) $FF436D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $FF24.w,X		; 7D 24 FF ; Add $FF24.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $BD.b		; 06 BD ; Arithmetic shift left $BD.b [Reads: Direct Page] [Flags: ZNC]
	sbc $ADFF9D.l,X		; FF 9D FF AD ; Subtract with carry (long,X) $ADFF9D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $6783B5.l,X		; FF B5 83 67 ; Subtract with carry (long,X) $6783B5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $24.b		; 05 24 ; Logical OR $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $48C300.l,X		; FF 00 C3 48 ; Subtract with carry (long,X) $48C300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C300BD.l,X		; FF BD 00 C3 ; Subtract with carry (long,X) $C300BD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $BD,$FF		; 44 FF BD ; Move block positive $BD,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $00FF24.l,X		; BF 24 FF 00 ; Load long $00FF24.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $44.b,S		; C3 44 ; Compare accumulator (stack relative) $44.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc $A504BD.l,X		; FF BD 04 A5 ; Subtract with carry (long,X) $A504BD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C5FFBB.l,X		; FF BB FF C5 ; Subtract with carry (long,X) $C5FFBB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $BD,$FF		; 44 FF BD ; Move block positive $BD,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $33.b,S		; 83 33 ; Store accumulator (stack relative) $33.b,S [Reads: Accumulator, Stack Pointer]
	ora $24.b		; 05 24 ; Logical OR $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FFC104.l,X		; FF 04 C1 FF ; Subtract with carry (long,X) $FFC104.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $44C3FF.l,X		; BF FF C3 44 ; Load long $44C3FF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $8300FD.l,X		; FF FD 00 83 ; Subtract with carry (long,X) $8300FD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor #$EFFF.w		; 49 FF EF ; Exclusive OR #$EFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	eor #$FFBD.w		; 49 BD FF ; Exclusive OR #$FFBD.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $C3.b		; 00 C3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	eor $BD.b,S		; 43 BD ; Exclusive OR accumulator with stack relative $BD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FFDB45.l,X		; FF 45 DB FF ; Subtract with carry (long,X) $FFDB45.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	eor #$FFB6.w		; 49 B6 FF ; Exclusive OR #$FFB6.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cop $BD.b		; 02 BD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF44DB.l,X		; FF DB 44 FF ; Subtract with carry (long,X) $FF44DB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$02.b]		; E7 02 ; Subtract with carry (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sbc $FF24BD.l,X		; FF BD 24 FF ; Subtract with carry (long,X) $FF24BD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $BB.b		; 02 BB ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF47D7.l,X		; FF D7 47 FF ; Subtract with carry (long,X) $FF47D7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $02FF24.l		; EF 24 FF 02 ; Subtract with carry (long) $02FF24.l [Writes: Accumulator] [Flags: ZVNC]
	sta ($FF.b,X)		; 81 FF ; Store accumulator ($FF.b,X) [Reads: Accumulator, X Index, Direct Page]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sty $B7.b		; 84 B7 ; Store Y register to $B7.b [Reads: Y Index]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $2881FF.l,X		; DF FF 81 28 ; Compare accumulator (long,X) $2881FF.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc $FFE702.l,X		; FF 02 E7 FF ; Subtract with carry (long,X) $FFE702.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$28.b]		; E7 28 ; Subtract with carry (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF8E04.l,X		; FF 04 8E FF ; Subtract with carry (long,X) $FF8E04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $FF.b,X		; B5 FF ; Load $FF.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $FF44.w		; 8D 44 FF ; Store accumulator to $FF44.w [Reads: Accumulator]
	lda $00.b,X		; B5 00 ; Load $00.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $FF24.w		; 8E 24 FF ; Store X register to $FF24.w [Reads: X Index]
	brk $6A.b		; 00 6A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $7100AA.l,X		; FF AA 00 71 ; Subtract with carry (long,X) $7100AA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $F091FF.l		; 22 FF 91 F0 ; Jump to subroutine long $F091FF.l [Writes: Stack Pointer] [Flow: call]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	inc $4C83.w,X		; FE 83 4C ; Increment memory $4C83.w,X [Reads: X Index] [Flags: ZN]
	tsb $44.b		; 04 44 ; Test and set bits $44.b [Reads: Accumulator] [Flags: Z]
	sbc $FE00FD.l,X		; FF FD 00 FE ; Subtract with carry (long,X) $FE00FD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $7B.b		; 84 7B ; Store Y register to $7B.b [Reads: Y Index]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	eor $FFBFFF.l,X		; 5F FF BF FF ; Exclusive OR accumulator with memory (long,X) $FFBFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $04FF24.l,X		; 5F 24 FF 04 ; Exclusive OR accumulator with memory (long,X) $04FF24.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sbc $FF4406.l,X		; FF 06 44 FF ; Subtract with carry (long,X) $FF4406.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $0E00F5.l,X		; FF F5 00 0E ; Subtract with carry (long,X) $0E00F5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $1B.b		; 04 1B ; Test and set bits $1B.b [Reads: Accumulator] [Flags: Z]
	sbc $EAFFE9.l,X		; FF E9 FF EA ; Subtract with carry (long,X) $EAFFE9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $EB,$FF		; 44 FF EB ; Move block positive $EB,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc $A8FFCB.l,X		; FF CB FF A8 ; Subtract with carry (long,X) $A8FFCB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $EBFF6B.l,X		; FF 6B FF EB ; Subtract with carry (long,X) $EBFF6B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF24E8.l,X		; FF E8 24 FF ; Subtract with carry (long,X) $FF24E8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jsr $EFFF.w		; 20 FF EF ; Jump to subroutine at $EFFF.w [Writes: Stack Pointer] [Flow: call]
	sbc $E0FF6F.l,X		; FF 6F FF E0 ; Subtract with carry (long,X) $E0FF6F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $2FFFEE.l,X		; FF EE FF 2F ; Subtract with carry (long,X) $2FFFEE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $6D,$FF		; 44 FF 6D ; Move block positive $6D,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $C0.b		; 04 C0 ; Test and set bits $C0.b [Reads: Accumulator] [Flags: Z]
	sbc $5EFFDE.l,X		; FF DE FF 5E ; Subtract with carry (long,X) $5EFFDE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($05.b)		; D2 05 ; Compare accumulator (indirect) ($05.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta [$FF.b]		; 87 FF ; Store accumulator (long) [$FF.b] [Reads: Accumulator, Direct Page]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $73FF7F.l,X		; FF 7F FF 73 ; Subtract with carry (long,X) $73FF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $87FF7B.l,X		; FF 7B FF 87 ; Subtract with carry (long,X) $87FF7B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $88.b		; 04 88 ; Test and set bits $88.b [Reads: Accumulator] [Flags: Z]
	sbc $8DFF7D.l,X		; FF 7D FF 8D ; Subtract with carry (long,X) $8DFF7D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $ED,$FF		; 44 FF ED ; Move block positive $ED,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	eor $BB.b,S		; 43 BB ; Exclusive OR accumulator with stack relative $BB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FFBD43.l,X		; FF 43 BD FF ; Subtract with carry (long,X) $FFBD43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $BE.b		; 02 BE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF2486.l,X		; FF 86 24 FF ; Subtract with carry (long,X) $FF2486.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda ($FF.b,X)		; A1 FF ; Load accumulator ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $FF63FF.l		; AF FF 63 FF ; Load long $FF63FF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $FFEFFF.l		; 6F FF EF FF ; Add with carry (long) $FFEFFF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc ($24.b,X)		; E1 24 ; Subtract with carry ($24.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $441F00.l,X		; FF 00 1F 44 ; Subtract with carry (long,X) $441F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1F006F.l,X		; FF 6F 00 1F ; Subtract with carry (long,X) $1F006F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $00FF24.l		; 6F 24 FF 00 ; Add with carry (long) $00FF24.l [Writes: Accumulator] [Flags: ZVNC]
	jmp.w [$FF44]		; DC 44 FF ; Jump long indirect [$FF44] [Flow: jump]
	lda $0400.w		; AD 00 04 ; Load $0400.w into accumulator [Writes: Accumulator] [Flags: ZN]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $24.b,X		; 75 24 ; Add $24.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $446300.l,X		; FF 00 63 44 ; Subtract with carry (long,X) $446300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $6300AD.l,X		; FF AD 00 63 ; Subtract with carry (long,X) $6300AD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $FF24.w		; AD 24 FF ; Load $FF24.w into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $9A.b		; 00 9A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $9C006A.l,X		; FF 6A 00 9C ; Subtract with carry (long,X) $9C006A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $B1.b		; 04 B1 ; Test and set bits $B1.b [Reads: Accumulator] [Flags: Z]
	sbc $B1FFAF.l,X		; FF AF FF B1 ; Subtract with carry (long,X) $B1FFAF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $BD,$FF		; 44 FF BD ; Move block positive $BD,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $06FFFF.l		; 22 FF FF 06 ; Jump to subroutine long $06FFFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $FF0DFF.l,X		; FF FF 0D FF ; Subtract with carry (long,X) $FF0DFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $FF.b,X		; 75 FF ; Add $FF.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $FF44.w		; 0D 44 FF ; Logical OR $FF44.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $00.b,X		; 75 00 ; Add $00.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl $FF24.w		; 0E 24 FF ; Arithmetic shift left $FF24.w [Flags: ZNC]
	brk $D8.b		; 00 D8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $D7,$FF		; 44 FF D7 ; Move block positive $D7,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $D6.b		; 04 D6 ; Test and set bits $D6.b [Reads: Accumulator] [Flags: Z]
	sbc $38FFD7.l,X		; FF D7 FF 38 ; Subtract with carry (long,X) $38FFD7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jsr ($7BFF.w,X)		; FC FF 7B ; Jump to subroutine indirect indexed ($7BFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $4BFFFB.l,X		; FF FB FF 4B ; Subtract with carry (long,X) $4BFFFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FCFF7B.l,X		; FF 7B FF FC ; Subtract with carry (long,X) $FCFF7B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $F5FFB5.l,X		; FF B5 FF F5 ; Subtract with carry (long,X) $F5FFB5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $AEFFE0.l,X		; FF E0 FF AE ; Subtract with carry (long,X) $AEFFE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF246E.l,X		; FF 6E 24 FF ; Subtract with carry (long,X) $FF246E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $DC00DB.l,X		; FF DB 00 DC ; Subtract with carry (long,X) $DC00DB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl $6E.b		; 06 6E ; Arithmetic shift left $6E.b [Reads: Direct Page] [Flags: ZNC]
	sbc $E0FFAE.l,X		; FF AE FF E0 ; Subtract with carry (long,X) $E0FFAE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $3983EE.l,X		; FF EE 83 39 ; Subtract with carry (long,X) $3983EE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF8B04.l,X		; FF 04 8B FF ; Subtract with carry (long,X) $FF8B04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $DAFF.w,Y		; D9 FF DA ; Compare accumulator $DAFF.w,Y [Reads: Y Index] [Flags: ZNC]
	mvp $DB,$FF		; 44 FF DB ; Move block positive $DB,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda ($FF.b),Y		; B1 FF ; Load accumulator ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $AFFF.w		; AE FF AF ; Load $AFFF.w into X register [Writes: X Index] [Flags: ZN]
	sbc $AEFF2C.l,X		; FF 2C FF AE ; Subtract with carry (long,X) $AEFF2C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF24B1.l,X		; FF B1 24 FF ; Subtract with carry (long,X) $FF24B1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	stz $FF.b,X		; 74 FF ; Store zero to $FF.b,X [Reads: X Index]
	and $FF.b,X		; 35 FF ; Logical AND $FF.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvn $65,$FF		; 54 FF 65 ; Move block negative $65,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc $74FF75.l,X		; FF 75 FF 74 ; Subtract with carry (long,X) $74FF75.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $20.b		; 04 20 ; Test and set bits $20.b [Reads: Accumulator] [Flags: Z]
	sbc $7BFFFB.l,X		; FF FB FF 7B ; Subtract with carry (long,X) $7BFFFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $FB,$FF		; 44 FF FB ; Move block positive $FB,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $3B.b		; 00 3B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F7.b		; E5 F7 ; Subtract $F7.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFC45.l,X		; FF 45 FC FF ; Subtract with carry (long,X) $FFFC45.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $FE.b		; 04 FE ; Test and set bits $FE.b [Reads: Accumulator] [Flags: Z]
	sbc $FCFFFD.l,X		; FF FD FF FC ; Subtract with carry (long,X) $FCFFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	trb $3B.b		; 14 3B ; Test and reset bits $3B.b [Reads: Accumulator] [Flags: Z]
	adc $738F83.l,X		; 7F 83 8F 73 ; Add long $738F83.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFF03.l,X		; FF 03 FF FF ; Subtract with carry (long,X) $FFFF03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $FDFEFB.l		; 8F FB FE FD ; Store accumulator (long) $FDFEFB.l [Reads: Accumulator]
	sbc $FEFE.w,X		; FD FE FE ; Subtract with carry $FEFE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $F3E3.w,X		; FD E3 F3 ; Subtract with carry $F3E3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy $FF43.w		; CC 43 FF ; Compare $FF43.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	sbc $7F730C.l,X		; FF 0C 73 7F ; Subtract with carry (long,X) $7F730C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $FF.b,S		; 83 FF ; Store accumulator (stack relative) $FF.b,S [Reads: Accumulator, Stack Pointer]
	ora [$7F.b]		; 07 7F ; OR accumulator with memory (long) [$7F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$FF.b]		; 87 FF ; Store accumulator (long) [$FF.b] [Reads: Accumulator, Direct Page]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $23FF03.l,X		; FF 03 FF 23 ; Subtract with carry (long,X) $23FF03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx $65.b		; E4 65 ; Compare $65.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $FFFC0B.l,X		; FF 0B FC FF ; Subtract with carry (long,X) $FFFC0B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($FC.b,S),Y		; F3 FC ; Subtract with carry (stack relative indirect indexed) ($FC.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F7EFF3.l		; EF F3 EF F7 ; Subtract with carry (long) $F7EFF3.l [Writes: Accumulator] [Flags: ZVNC]
	cmp [$EF.b],Y		; D7 EF ; Compare accumulator (long indexed) [$EF.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp $FF23ED.l,X		; DF ED 23 FF ; Compare accumulator (long,X) $FF23ED.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $FFCFFF.l,X		; 3F FF CF FF ; AND accumulator with memory (long,X) $FFCFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda [$FF.b],Y		; B7 FF ; Load accumulator (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$FF.b],Y		; 17 FF ; OR accumulator with memory (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	ora #$D5F6.w		; 09 F6 D5 ; Logical OR #$D5F6.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $E0F3EC.l		; EF EC F3 E0 ; Subtract with carry (long) $E0F3EC.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $FCFFF0.l,X		; FF F0 FF FC ; Subtract with carry (long,X) $FCFFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	sbc $F77FFB.l,X		; FF FB 7F F7 ; Subtract with carry (long,X) $F77FFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $CF0FF7.l		; AF F7 0F CF ; Load long $CF0FF7.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $FF263F.l,X		; 3F 3F 26 FF ; AND accumulator with memory (long,X) $FF263F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $FFF8.w		; 0C F8 FF ; Test and set bits $FFF8.w [Reads: Accumulator] [Flags: Z]
	sbc ($FF.b,S),Y		; F3 FF ; Subtract with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $EFFFF7.l,X		; FF F7 FF EF ; Subtract with carry (long,X) $EFFFF7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF22DF.l,X		; FF DF 22 FF ; Subtract with carry (long,X) $FF22DF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $FFCFFF.l,X		; 1F FF CF FF ; Logical OR long $FFCFFF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $FF1FFF.l		; 0F FF 1F FF ; OR accumulator with memory (long) $FF1FFF.l [Writes: Accumulator] [Flags: ZN]
	sbc $FFD7FF.l		; EF FF D7 FF ; Subtract with carry (long) $FFD7FF.l [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $DDFFD9.l,X		; FF D9 FF DD ; Subtract with carry (long,X) $DDFFD9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FCDF.w,X		; FE DF FC ; Increment memory $FCDF.w,X [Reads: X Index] [Flags: ZN]
	cmp $DFFF.w,X		; DD FF DF ; Compare accumulator $DFFF.w,X [Reads: X Index] [Flags: ZNC]
	sbc $F8FFE7.l,X		; FF E7 FF F8 ; Subtract with carry (long,X) $F8FFE7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $230CFF.l		; 22 FF 0C 23 ; Jump to subroutine long $230CFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $E3FF63.l,X		; FF 63 FF E3 ; Subtract with carry (long,X) $E3FF63.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $DBFF63.l,X		; 7F 63 FF DB ; Add long $DBFF63.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1FFFE7.l,X		; FF E7 FF 1F ; Subtract with carry (long,X) $1FFFE7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $BDFBFD.l,X		; 1F FD FB BD ; Logical OR long $BDFBFD.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($BE.b,S),Y		; F3 BE ; Subtract with carry (stack relative indirect indexed) ($BE.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FCD7.w,Y		; F9 D7 FC ; Subtract with carry $FCD7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	dec $FF.b,X		; D6 FF ; Decrement memory $FF.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	lda $FFFFF9.l,X		; BF F9 FF FF ; Load long $FFFFF9.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $CFBB7F.l,X		; DF 7F BB CF ; Compare accumulator (long,X) $CFBB7F.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	lda [$D9.b],Y		; B7 D9 ; Load accumulator (long indexed) [$D9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E7FF03.l,X		; FF 03 FF E7 ; Subtract with carry (long,X) $E7FF03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $E7FFFF.l,X		; 1F FF FF E7 ; Logical OR long $E7FFFF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $FF48F0.l,X		; BF F0 48 FF ; Load long $FF48F0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpx #$5884.w		; E0 84 58 ; Compare #$5884.w with X register [Reads: X Index] [Flags: ZNC]
	ora $0D.b,S		; 03 0D ; OR accumulator with stack relative $0D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $798773.l		; 8F 73 87 79 ; Store accumulator (long) $798773.l [Reads: Accumulator]
	cmp [$39.b]		; C7 39 ; Compare accumulator (long) [$39.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $01FF31.l		; CF 31 FF 01 ; Compare accumulator (long) $01FF31.l [Reads: Accumulator] [Flags: ZNC]
	sbc $0FFF03.l,X		; FF 03 FF 0F ; Subtract with carry (long,X) $0FFF03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $FFF00C.l,X		; FF 0C F0 FF ; Subtract with carry (long,X) $FFF00C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF.b		; E5 FF ; Subtract $FF.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc $8AFF85.l,X		; FF 85 FF 8A ; Subtract with carry (long,X) $8AFF85.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C0FF85.l,X		; FF 85 FF C0 ; Subtract with carry (long,X) $C0FF85.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $7F10FF.l		; 22 FF 10 7F ; Jump to subroutine long $7F10FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $AFFF1F.l,X		; FF 1F FF AF ; Subtract with carry (long,X) $AFFF1F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $A3FF57.l,X		; FF 57 FF A3 ; Subtract with carry (long,X) $A3FF57.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $3DFF5D.l,X		; FF 5D FF 3D ; Subtract with carry (long,X) $3DFF5D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FCFFE0.l,X		; FF E0 FF FC ; Subtract with carry (long,X) $FCFFE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $F30B.w,X		; FE 0B F3 ; Increment memory $F30B.w,X [Reads: X Index] [Flags: ZN]
	sbc $C7FFE3.l,X		; FF E3 FF C7 ; Subtract with carry (long,X) $C7FFE3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFCF.l,X		; FF CF FF FF ; Subtract with carry (long,X) $FFFFCF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $FBFF.w,X		; 7D FF FB ; Add $FBFF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $79.b		; 84 79 ; Store Y register to $79.b [Reads: Y Index]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $02FF29.l,X		; 1F 29 FF 02 ; Logical OR long $02FF29.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc $F8FF.w,X		; FE FF F8 ; Increment memory $F8FF.w,X [Reads: X Index] [Flags: ZN]
	mvp $F0,$FF		; 44 FF F0 ; Move block positive $F0,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $E0.b		; 04 E0 ; Test and set bits $E0.b [Reads: Accumulator] [Flags: Z]
	sbc $80FFC0.l,X		; FF C0 FF 80 ; Subtract with carry (long,X) $80FFC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $7F0CFF.l		; 22 FF 0C 7F ; Jump to subroutine long $7F0CFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $4FBF1F.l,X		; FF 1F BF 4F ; Subtract with carry (long,X) $4FBF1F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $778FEF.l,X		; 1F EF 8F 77 ; Logical OR long $778FEF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $19E713.l		; EF 13 E7 19 ; Subtract with carry (long) $19E713.l [Writes: Accumulator] [Flags: ZVNC]
	mvp $80,$FF		; 44 FF 80 ; Move block positive $80,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora ($C0.b,X)		; 01 C0 ; Logical OR ($C0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	mvp $F0,$FF		; 44 FF F0 ; Move block positive $F0,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $F39F61.l,X		; FF 61 9F F3 ; Subtract with carry (long,X) $F39F61.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0FFF44.l,X		; 1F 44 FF 0F ; Logical OR long $0FFF44.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF44FB.l,X		; FF FB 44 FF ; Subtract with carry (long,X) $FF44FB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$45.b],Y		; F7 45 ; Subtract with carry (long indexed) [$45.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FB0CFF.l		; EF FF 0C FB ; Subtract with carry (long) $FB0CFF.l [Writes: Accumulator] [Flags: ZVNC]
	inc $FDFF.w,X		; FE FF FD ; Increment memory $FDFF.w,X [Reads: X Index] [Flags: ZN]
	dec $9FFB.w		; CE FB 9F ; Decrement $9FFB.w [Flags: ZN]
	sbc [$FB.b],Y		; F7 FB ; Subtract with carry (long indexed) [$FB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F7FFF3.l		; EF F3 FF F7 ; Subtract with carry (long) $F7FFF3.l [Writes: Accumulator] [Flags: ZVNC]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $FFE1.w		; 0C E1 FF ; Test and set bits $FFE1.w [Reads: Accumulator] [Flags: Z]
	sbc ($FF.b),Y		; F1 FF ; Subtract with carry ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($FF.b),Y		; 31 FF ; AND accumulator with memory ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $DFFF.w		; 2D FF DF ; Logical AND $DFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $67FFA7.l,X		; FF A7 FF 67 ; Subtract with carry (long,X) $67FFA7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$FF.b],Y		; 37 FF ; AND accumulator with memory (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($81.b,X)		; 01 81 ; Logical OR ($81.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ror $FF45.w,X		; 7E 45 FF ; Rotate right $FF45.w,X [Reads: X Index] [Flags: ZNC]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7E8101.l,X		; FF 01 81 7E ; Subtract with carry (long,X) $7E8101.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor #$00FF.w		; 49 FF 00 ; Exclusive OR #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($81.b,X)		; 01 81 ; Logical OR ($81.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ror $FF4D.w,X		; 7E 4D FF ; Rotate right $FF4D.w,X [Reads: X Index] [Flags: ZNC]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $030025.l,X		; FF 25 00 03 ; Subtract with carry (long,X) $030025.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $04.b,S		; 43 04 ; Exclusive OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$0E.b]		; 07 0E ; OR accumulator with memory (long) [$0E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $458282.l		; 0F 82 82 45 ; OR accumulator with memory (long) $458282.l [Writes: Accumulator] [Flags: ZN]
	cmp [$4A.b]		; C7 4A ; Compare accumulator (long) [$4A.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $6EFF77.l		; CF 77 FF 6E ; Compare accumulator (long) $6EFF77.l [Reads: Accumulator] [Flags: ZNC]
	sbc $BEFF5E.l,X		; FF 5E FF BE ; Subtract with carry (long,X) $BEFF5E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $0025FF.l		; 22 FF 25 00 ; Jump to subroutine long $0025FF.l [Writes: Stack Pointer] [Flow: call]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	cpy #$23C0.w		; C0 C0 23 ; Compare #$23C0.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpx #$E126.w		; E0 26 E1 ; Compare #$E126.w with X register [Reads: X Index] [Flags: ZNC]
	trb $F3.b		; 14 F3 ; Test and reset bits $F3.b [Reads: Accumulator] [Flags: Z]
	cmp $08FF22.l,X		; DF 22 FF 08 ; Compare accumulator (long,X) $08FF22.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	adc [$FF.b]		; 67 FF ; Add with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sbc $AAFF6B.l,X		; FF 6B FF AA ; Subtract with carry (long,X) $AAFF6B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF22A7.l,X		; FF A7 22 FF ; Subtract with carry (long,X) $FF22A7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $8A0F09.l		; 4F 09 0F 8A ; Exclusive OR accumulator with memory (long) $8A0F09.l [Writes: Accumulator] [Flags: ZN]
	.db $70, $03		; 70 03 ; Branch if overflow set to $70, $03 [Flow: branch]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $22D2FC.l		; EF FC D2 22 ; Subtract with carry (long) $22D2FC.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF0044.l,X		; FF 44 00 FF ; Subtract with carry (long,X) $FF0044.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $0025FF.l		; 22 FF 25 00 ; Jump to subroutine long $0025FF.l [Writes: Stack Pointer] [Flow: call]
	tsb $FFD3.w		; 0C D3 FF ; Test and set bits $FFD3.w [Reads: Accumulator] [Flags: Z]
	cmp $FE.b,X		; D5 FE ; Compare accumulator $FE.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	inc $FCD7.w,X		; FE D7 FC ; Increment memory $FCD7.w,X [Reads: X Index] [Flags: ZN]
	cmp $E7FF.w,X		; DD FF E7 ; Compare accumulator $E7FF.w,X [Reads: X Index] [Flags: ZNC]
	sbc $FF22F9.l,X		; FF F9 22 FF ; Subtract with carry (long,X) $FF22F9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $04F395.l		; 4F 95 F3 04 ; Exclusive OR accumulator with memory (long) $04F395.l [Writes: Accumulator] [Flags: ZN]
	sty $F3.b,X		; 94 F3 ; Store Y register $F3.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	stx $F1.b,Y		; 96 F1 ; Store X register $F1.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta ($4A.b,S),Y		; 93 4A ; Store accumulator (stack relative indirect indexed) ($4A.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	.db $F0, $90		; F0 90 ; Branch if equal to $F0, $90 [Flow: branch]
	tsb $FFCB.w		; 0C CB FF ; Test and set bits $FFCB.w [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	adc $EB7FDB.l,X		; 7F DB 7F EB ; Add long $EB7FDB.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $67FF7B.l,X		; 3F 7B FF 67 ; AND accumulator with memory (long,X) $67FF7B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FF225F.l,X		; FF 5F 22 FF ; Subtract with carry (long,X) $FF225F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$0200.w		; 29 00 02 ; Logical AND #$0200.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $220000.l,X		; FF 00 00 22 ; Subtract with carry (long,X) $220000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $040029.l,X		; FF 29 00 04 ; Subtract with carry (long,X) $040029.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$6000.w		; C0 00 60 ; Compare #$6000.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $80, $20		; 80 20 ; Branch always to $80, $20 [Flow: branch]
	.db $50, $C0		; 50 C0 ; Branch if overflow clear to $50, $C0 [Flow: branch]
	ldy #$FF4F.w		; A0 4F FF ; Load #$FF4F.w into Y register [Writes: Y Index] [Flags: ZN]
	brk $2B.b		; 00 2B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $04C883.l,X		; FF 83 C8 04 ; Subtract with carry (long,X) $04C883.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $00FF.w		; 2E FF 00 ; Rotate left $00FF.w [Flags: ZNC]
	inc $FF26.w,X		; FE 26 FF ; Increment memory $FF26.w,X [Reads: X Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $87FFE0.l,X		; FF E0 FF 87 ; Subtract with carry (long,X) $87FFE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7FFF1F.l,X		; FF 1F FF 7F ; Subtract with carry (long,X) $7FFF1F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $F80CFF.l		; 22 FF 0C F8 ; Jump to subroutine long $F80CFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $E7FDF3.l,X		; FF F3 FD E7 ; Subtract with carry (long,X) $E7FDF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp $F99FF4.l		; CF F4 9F F9 ; Compare accumulator (long) $F99FF4.l [Reads: Accumulator] [Flags: ZNC]
	stz $9DF3.w,X		; 9E F3 9D ; Store zero to $9DF3.w,X [Reads: X Index]
	jsl $1F0CFF.l		; 22 FF 0C 1F ; Jump to subroutine long $1F0CFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $E73FCF.l,X		; FF CF 3F E7 ; Subtract with carry (long,X) $E73FCF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $79CFB3.l,X		; 5F B3 CF 79 ; Exclusive OR accumulator with memory (long,X) $79CFB3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $F92FF9.l		; 8F F9 2F F9 ; Store accumulator (long) $F92FF9.l [Reads: Accumulator]
	and $00FF.w		; 2D FF 00 ; Logical AND $00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc $FF23.w,X		; FE 23 FF ; Increment memory $FF23.w,X [Reads: X Index] [Flags: ZN]
	tsb $FBF1.w		; 0C F1 FB ; Test and set bits $FBF1.w [Reads: Accumulator] [Flags: Z]
	sbc $F7.b		; E5 F7 ; Subtract $F7.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$93EF.w		; C9 EF 93 ; Compare #$93EF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp $0FFFA7.l,X		; DF A7 FF 0F ; Compare accumulator (long,X) $0FFFA7.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc $32863F.l,X		; FF 3F 86 32 ; Subtract with carry (long,X) $32863F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $43		; F0 43 ; Branch if equal to $F0, $43 [Flow: branch]
	cmp $B903E0.l,X		; DF E0 03 B9 ; Compare accumulator (long,X) $B903E0.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	dec $90.b		; C6 90 ; Decrement $90.b [Reads: Direct Page] [Flags: ZN]
	sbc $034284.l		; EF 84 42 03 ; Subtract with carry (long) $034284.l [Writes: Accumulator] [Flags: ZVNC]
	cop $3F.b		; 02 3F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$0F.b],Y		; F7 0F ; Subtract with carry (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FB.b,S		; 43 FB ; Exclusive OR accumulator with stack relative $FB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $C513.w		; ED 13 C5 ; Subtract $C513.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $FC0FFF.l		; 22 FF 0F FC ; Jump to subroutine long $FC0FFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $CFFBF3.l,X		; FF F3 FB CF ; Subtract with carry (long,X) $CFFBF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sta $FD0FFB.l		; 8F FB 0F FD ; Store accumulator (long) $FD0FFB.l [Reads: Accumulator]
	ora [$FE.b]		; 07 FE ; OR accumulator with memory (long) [$FE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($FF.b,S),Y		; 93 FF ; Store accumulator (stack relative indirect indexed) ($FF.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sbc $FF468D.l,X		; FF 8D 46 FF ; Subtract with carry (long,X) $FF468D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $00.b,X		; B5 00 ; Load $00.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $FF26.w		; 8E 26 FF ; Store X register to $FF26.w [Reads: X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $A5FF.w		; AD FF A5 ; Load $A5FF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $A9FFA1.l,X		; FF A1 FF A9 ; Subtract with carry (long,X) $A9FFA1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF266D.l,X		; FF 6D 26 FF ; Subtract with carry (long,X) $FF266D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $48FF7B.l,X		; FF 7B FF 48 ; Subtract with carry (long,X) $48FF7B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $98FF6B.l,X		; FF 6B FF 98 ; Subtract with carry (long,X) $98FF6B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	brk $CD.b		; 00 CD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $B4,$FF		; 44 FF B4 ; Move block positive $B4,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $B5.b		; 02 B5 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF26CD.l,X		; FF CD 26 FF ; Subtract with carry (long,X) $FF26CD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $BF.b,S		; 43 BF ; Exclusive OR accumulator with stack relative $BF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF3F43.l,X		; FF 43 3F FF ; Subtract with carry (long,X) $FF3F43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	tsb $44.b		; 04 44 ; Test and set bits $44.b [Reads: Accumulator] [Flags: Z]
	sbc $6CFF6D.l,X		; FF 6D FF 6C ; Subtract with carry (long,X) $6CFF6D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $E3.b,S		; 83 E3 ; Store accumulator (stack relative) $E3.b,S [Reads: Accumulator, Stack Pointer]
	asl $26.b		; 06 26 ; Arithmetic shift left $26.b [Reads: Direct Page] [Flags: ZNC]
	sbc $FF5D08.l,X		; FF 08 5D FF ; Subtract with carry (long,X) $FF5D08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$55FF.w		; C9 FF 55 ; Compare #$55FF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $5DFFDD.l,X		; FF DD FF 5D ; Subtract with carry (long,X) $5DFFDD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $F9,$FF		; 44 FF F9 ; Move block positive $F9,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $F3.b,S		; 43 F3 ; Exclusive OR accumulator with stack relative $F3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FFE744.l,X		; FF 44 E7 FF ; Subtract with carry (long,X) $FFE744.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $1E.b,S		; 03 1E ; OR accumulator with stack relative $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $213F.w,X		; 1E 3F 21 ; Arithmetic shift left $213F.w,X [Reads: X Index] [Flags: ZNC]
	eor $3F.b,S		; 43 3F ; Exclusive OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $7F11.w		; 2D 11 7F ; Logical AND $7F11.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($FE.b,X)		; 41 FE ; Exclusive OR accumulator with memory ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $90F0.w,X		; 9E F0 90 ; Store zero to $90F0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $9B.b,X		; F6 9B ; Increment memory $9B.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	cmp $FFE7FD.l		; CF FD E7 FF ; Compare accumulator (long) $FFE7FD.l [Reads: Accumulator] [Flags: ZNC]
	sbc ($FF.b,S),Y		; F3 FF ; Subtract with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FF44.w,X		; FE 44 FF ; Increment memory $FF44.w,X [Reads: X Index] [Flags: ZN]
	jsr ($FF0A.w,X)		; FC 0A FF ; Jump to subroutine indirect indexed ($FF0A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc $F3DFF9.l		; 6F F9 DF F3 ; Add with carry (long) $F3DFF9.l [Writes: Accumulator] [Flags: ZVNC]
	lda $CFFFE7.l,X		; BF E7 FF CF ; Load long $CFFFE7.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FF447F.l,X		; FF 7F 44 FF ; Subtract with carry (long,X) $FF447F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $E3FF0D.l,X		; 3F 0D FF E3 ; AND accumulator with memory (long,X) $E3FF0D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FEFBF5.l,X		; FF F5 FB FE ; Subtract with carry (long,X) $FEFBF5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($EC.b),Y		; F1 EC ; Subtract with carry ($EC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	dec $FF.b		; C6 FF ; Decrement $FF.b [Reads: Direct Page] [Flags: ZN]
	sta $229FFF.l		; 8F FF 9F 22 ; Store accumulator (long) $229FFF.l [Reads: Accumulator]
	sbc $FFF407.l,X		; FF 07 F4 FF ; Subtract with carry (long,X) $FFF407.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc [$FD.b],Y		; F7 FD ; Subtract with carry (long indexed) [$FD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	inc $83E5.w,X		; FE E5 83 ; Increment memory $83E5.w,X [Reads: X Index] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $25.b		; 04 25 ; Test and set bits $25.b [Reads: Accumulator] [Flags: Z]
	sbc $FFFC05.l,X		; FF 05 FC FF ; Subtract with carry (long,X) $FFFC05.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($FD.b)		; F2 FD ; Subtract with carry (indirect) ($FD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $43F1.w		; EE F1 43 ; Increment $43F1.w [Flags: ZN]
	jmp.w [$43E3]		; DC E3 43 ; Jump long indirect [$43E3] [Flow: jump]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cmp [$87.b]		; C7 87 ; Compare accumulator (long) [$87.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $70, $06		; 70 06 ; Branch if overflow set to $70, $06 [Flow: branch]
	eor $FB.b,S		; 43 FB ; Exclusive OR accumulator with stack relative $FB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0D03.w,X		; FD 03 0D ; Subtract with carry $0D03.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($FF.b,S),Y		; F3 FF ; Subtract with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($FF.b),Y		; D1 FF ; Compare accumulator ($FF.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cpx #$9A84.w		; E0 84 9A ; Compare #$9A84.w with X register [Reads: X Index] [Flags: ZNC]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sty $BBFF.w		; 8C FF BB ; Store Y register to $BBFF.w [Reads: Y Index]
	sbc $BBFF8A.l,X		; FF 8A FF BB ; Subtract with carry (long,X) $BBFF8A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF268C.l,X		; FF 8C 26 FF ; Subtract with carry (long,X) $FF268C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $DA.b		; 00 DA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $FF.b		; 46 FF ; Logical shift right $FF.b [Reads: Direct Page] [Flags: ZNC]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $C5.b		; 84 C5 ; Store Y register to $C5.b [Reads: Y Index]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: ZNC]
	sta $BDFF.w		; 8D FF BD ; Store accumulator to $BDFF.w [Reads: Accumulator]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp ($FF.b),Y		; D1 FF ; Compare accumulator ($FF.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sta [$FF.b],Y		; 97 FF ; Store accumulator (long indexed) [$FF.b],Y [Reads: Accumulator, Direct Page, Y Index]
	eor ($FF.b),Y		; 51 FF ; Exclusive OR accumulator with memory ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp [$FF.b],Y		; D7 FF ; Compare accumulator (long indexed) [$FF.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($26.b),Y		; D1 26 ; Compare accumulator ($26.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sbc $FFFC0D.l,X		; FF 0D FC FF ; Subtract with carry (long,X) $FFFC0D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sbc #$D9F6.w		; E9 F6 D9 ; Subtract #$D9F6.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	inc $DB.b		; E6 DB ; Increment $DB.b [Reads: Direct Page] [Flags: ZN]
	cpx $BA.b		; E4 BA ; Compare $BA.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp $BC.b		; C5 BC ; Compare $BC.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $89.b,S		; C3 89 ; Compare accumulator (stack relative) $89.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	.db $70, $06		; 70 06 ; Branch if overflow set to $70, $06 [Flow: branch]
	ora $83.b		; 05 83 ; Logical OR $83.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $399F61.l,X		; 7F 61 9F 39 ; Add long $399F61.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$2F.b]		; C7 2F ; Compare accumulator (long) [$2F.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$FF22.w		; E0 22 FF ; Compare #$FF22.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $C0FFC7.l,X		; FF C7 FF C0 ; Subtract with carry (long,X) $C0FFC7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $DFFFD8.l,X		; FF D8 FF DF ; Subtract with carry (long,X) $DFFFD8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $D9EFDC.l		; EF DC EF D9 ; Subtract with carry (long) $D9EFDC.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFEED3.l		; EF D3 EE FF ; Subtract with carry (long) $FFEED3.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $2BEFF3.l,X		; FF F3 EF 2B ; Subtract with carry (long,X) $2BEFF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $83FFEF.l,X		; FF EF FF 83 ; Subtract with carry (long,X) $83FFEF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $FFEF.w,X		; 7D EF FF ; Add $FFEF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	adc $FFAF7B.l,X		; 7F 7B AF FF ; Add long $FFAF7B.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF46E3.l,X		; FF E3 46 FF ; Subtract with carry (long,X) $FF46E3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E300.w		; ED 00 E3 ; Subtract $E300.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	brk $CF.b		; 00 CF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $FF.b		; 46 FF ; Logical shift right $FF.b [Reads: Direct Page] [Flags: ZNC]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $04FF28.l		; CF 28 FF 04 ; Compare accumulator (long) $04FF28.l [Reads: Accumulator] [Flags: ZNC]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cmp $BEFF.w,X		; DD FF BE ; Compare accumulator $BEFF.w,X [Reads: X Index] [Flags: ZNC]
	lsr $FF.b		; 46 FF ; Logical shift right $FF.b [Reads: Direct Page] [Flags: ZNC]
	lda $FFDF0A.l,X		; BF 0A DF FF ; Load long $FFDF0A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FFF7FF.l		; EF FF F7 FF ; Subtract with carry (long) $FFF7FF.l [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $FEFFFD.l,X		; FF FD FF FE ; Subtract with carry (long,X) $FEFFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $0000.w		; 0D 00 00 ; Logical OR $0000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	adc $5F7847.l,X		; 7F 47 78 5F ; Add long $5F7847.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$3F.b]		; 27 3F ; AND accumulator with memory (long) [$3F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $3E1A.w,X		; 1E 1A 3E ; Arithmetic shift left $3E1A.w,X [Reads: X Index] [Flags: ZNC]
	jsl $051C23.l		; 22 23 1C 05 ; Jump to subroutine long $051C23.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$FE		; E2 FE
	trb $FC.b		; 14 FC ; Test and reset bits $FC.b [Reads: Accumulator] [Flags: Z]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $06.b,S		; 03 06 ; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0F.b		; 05 0F ; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$43.b		; 09 43 ; Logical OR #$43.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $070908.l		; 0F 08 09 07 ; OR accumulator with memory (long) $070908.l [Writes: Accumulator] [Flags: ZN]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	ora $C0.b,S		; 03 C0 ; OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy #$20.b		; C0 20 ; Compare #$20.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: ZNC]
	ldy #$43.b		; A0 43 ; Load #$43.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $B0, $50		; B0 50 ; Branch if carry set to $B0, $50 [Flow: branch]
	ora $F0.b		; 05 F0 ; Logical OR $F0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $E0		; 10 E0 ; Branch if plus to $10, $E0 [Flow: branch]
	jsr $C0C0.w		; 20 C0 C0 ; Jump to subroutine at $C0C0.w [Writes: Stack Pointer] [Flow: call]
	rol $00FF.w		; 2E FF 00 ; Rotate left $00FF.w [Flags: ZNC]
	inc $0023.w,X		; FE 23 00 ; Increment memory $0023.w,X [Reads: X Index] [Flags: ZN]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $00273F.l		; 22 3F 27 00 ; Jump to subroutine long $00273F.l [Writes: Stack Pointer] [Flow: call]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $FF68FF.l,X		; FF FF 68 FF ; Subtract with carry (long,X) $FF68FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $0DFF.w		; 2D FF 0D ; Logical AND $0DFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $6DFF4D.l,X		; FF 4D FF 6D ; Subtract with carry (long,X) $6DFF4D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	trb $E5DE.w		; 1C DE E5 ; Test and reset bits $E5DE.w [Reads: Accumulator] [Flags: Z]
	cmp $FBE2.w,X		; DD E2 FB ; Compare accumulator $FBE2.w,X [Reads: X Index] [Flags: ZNC]
	cpx $EF.b		; E4 EF ; Compare $EF.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $BBC6.w,Y		; F9 C6 BB ; Subtract with carry $BBC6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc #$FF.b		; E9 FF ; Subtract #$FF.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	jsr ($FFEF.w,X)		; FC EF FF ; Jump to subroutine indirect indexed ($FFEF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $DB37FB.l,X		; FF FB 37 DB ; Subtract with carry (long,X) $DB37FB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$BB.b],Y		; 77 BB ; Add with carry (long indexed) [$BB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$77.b],Y		; F7 77 ; Subtract with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $DFDFEF.l		; EF EF DF DF ; Subtract with carry (long) $DFDFEF.l [Writes: Accumulator] [Flags: ZVNC]
	and $FF223F.l,X		; 3F 3F 22 FF ; AND accumulator with memory (long,X) $FF223F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $002AFC.l		; 22 FC 2A 00 ; Jump to subroutine long $002AFC.l [Writes: Stack Pointer] [Flow: call]
	tsb $1C.b		; 04 1C ; Test and set bits $1C.b [Reads: Accumulator] [Flags: Z]
	ora $113F.w,Y		; 19 3F 11 ; OR accumulator with memory $113F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$43.b],Y		; 37 43 ; AND accumulator with memory (long indexed) [$43.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $04096E.l		; 22 6E 09 04 ; Jump to subroutine long $04096E.l [Writes: Stack Pointer] [Flow: call]
	jmp ($7878.w,X)		; 7C 78 78 ; Jump indirect indexed to ($7878.w,X) [Reads: X Index] [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $1E.b		; 02 1E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($1E.b)		; 12 1E ; OR accumulator with memory (indirect) ($1E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $04.b,S		; 43 04 ; Exclusive OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $0801.w		; 1C 01 08 ; Test and reset bits $0801.w [Reads: Accumulator] [Flags: Z]
	sec		; 38 ; Set carry flag [Flags: C]
	sta [$0C.b]		; 87 0C ; Store accumulator (long) [$0C.b] [Reads: Accumulator, Direct Page]
	ora ($0E.b,X)		; 01 0E ; Logical OR ($0E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $323F.w,Y		; 19 3F 32 ; OR accumulator with memory $323F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $1C04.w,X		; 3E 04 1C ; Rotate left $1C04.w,X [Reads: X Index] [Flags: ZNC]
	ora $3F.b		; 05 3F ; Logical OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($7E.b)		; 12 7E ; OR accumulator with memory (indirect) ($7E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($006C.w)		; 6C 6C 00 ; Jump indirect to ($006C.w) [Flow: jump]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $25.b,S		; 83 25 ; Store accumulator (stack relative) $25.b,S [Reads: Accumulator, Stack Pointer]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $3E32.w,X		; 3C 32 3E ; Test bits $3E32.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sta [$0A.b]		; 87 0A ; Store accumulator (long) [$0A.b] [Reads: Accumulator, Direct Page]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($37.b),Y		; 11 37 ; OR accumulator with memory ($37.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($3F.b),Y		; 11 3F ; OR accumulator with memory ($3F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($7E.b)		; 32 7E ; AND accumulator with memory (indirect) ($7E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ror $7E.b		; 66 7E ; Rotate right $7E.b [Reads: Direct Page] [Flags: ZNC]
	tsb $3C.b		; 04 3C ; Test and set bits $3C.b [Reads: Accumulator] [Flags: Z]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($1F.b,X)		; 01 1F ; Logical OR ($1F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $3584.w		; 0E 84 35 ; Arithmetic shift left $3584.w [Flags: ZNC]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $0E.b		; 02 0E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0F.b,X)		; 01 0F ; Logical OR ($0F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $1E.b		; 06 1E ; Arithmetic shift left $1E.b [Reads: Direct Page] [Flags: ZNC]
	tsb $3C.b		; 04 3C ; Test and set bits $3C.b [Reads: Accumulator] [Flags: Z]
	ora ($7E.b)		; 12 7E ; OR accumulator with memory (indirect) ($7E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit #$0A.b		; 89 0A ; Test bits #$0A.b with accumulator [Reads: Accumulator] [Flags: Z]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $213F.w,Y		; 19 3F 21 ; OR accumulator with memory $213F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc [$42.b]		; 67 42 ; Add with carry (long) [$42.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lsr $1883.w		; 4E 83 18 ; Logical shift right $1883.w [Flags: ZNC]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($3F.b,X)		; 01 3F ; Logical OR ($3F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($8C.b)		; 32 8C ; AND accumulator with memory (indirect) ($8C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora $11.b		; 05 11 ; Logical OR $11.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$02.b],Y		; 37 02 ; AND accumulator with memory (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $3E32.w,X		; 3E 32 3E ; Rotate left $3E32.w,X [Reads: X Index] [Flags: ZNC]
	sta $0C.b,S		; 83 0C ; Store accumulator (stack relative) $0C.b,S [Reads: Accumulator, Stack Pointer]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $FFFEFF.l,X		; FF FF FE FF ; Subtract with carry (long,X) $FFFEFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $E2BFFA.l,X		; BF FA BF E2 ; Load long $E2BFFA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	mvp $92,$FF		; 44 FF 92 ; Move block positive $92,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $CA.b,S		; 43 CA ; Exclusive OR accumulator with stack relative $CA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $7FFF06.l,X		; FF 06 FF 7F ; Subtract with carry (long,X) $7FFF06.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FDDF7D.l,X		; FF 7D DF FD ; Subtract with carry (long,X) $FDDF7D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $530249.l,X		; FF 49 02 53 ; Subtract with carry (long,X) $530249.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $002253.l,X		; FF 53 22 00 ; Subtract with carry (long,X) $002253.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $10.b,S		; 43 10 ; Exclusive OR accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($0043.w,X)		; 7C 43 00 ; Jump indirect indexed to ($0043.w,X) [Reads: X Index] [Flow: jump]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $FF.b		; C4 FF ; Compare $FF.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: ZNC]
	sbc ($FF.b,X)		; E1 FF ; Subtract with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc ($FD.b,S),Y		; F3 FD ; Subtract with carry (stack relative indirect indexed) ($FD.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($FE.b,S),Y		; F3 FE ; Subtract with carry (stack relative indirect indexed) ($FE.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FCFF.w,Y		; F9 FF FC ; Subtract with carry $FCFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $07FF23.l,X		; FF 23 FF 07 ; Subtract with carry (long,X) $07FF23.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C7FF87.l,X		; FF 87 FF C7 ; Subtract with carry (long,X) $C7FF87.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $CFBFCF.l,X		; FF CF BF CF ; Subtract with carry (long,X) $CFBFCF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $3FFF9F.l,X		; 7F 9F FF 3F ; Add long $3FFF9F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp.w [$DCE7]		; DC E7 DC ; Jump long indirect [$DCE7] [Flow: jump]
	sbc $EE.b,S		; E3 EE ; Subtract stack-relative $EE.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc ($EF.b,S),Y		; F3 EF ; Subtract with carry (stack relative indirect indexed) ($EF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($62.b),Y		; F1 62 ; Subtract with carry ($62.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$01.b],Y		; F7 01 ; Subtract with carry (long indexed) [$01.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $22FE.w,X		; FE FE 22 ; Increment memory $22FE.w,X [Reads: X Index] [Flags: ZN]
	sbc $020022.l,X		; FF 22 00 02 ; Subtract with carry (long,X) $020022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $36.b,X		; 36 36 ; Rotate left $36.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor #$43.b		; 49 43 ; Exclusive OR #$43.b with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $0541.w,X		; 3E 41 05 ; Rotate left $0541.w,X [Reads: X Index] [Flags: ZNC]
	trb $0822.w		; 1C 22 08 ; Test and reset bits $0822.w [Reads: Accumulator] [Flags: Z]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $01.b,S		; 83 01 ; Store accumulator (stack relative) $01.b,S [Reads: Accumulator, Stack Pointer]
	cop $0B.b		; 02 0B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $5D6B55.l,X		; 7F 55 6B 5D ; Add long $5D6B55.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $2A.b,S		; 63 2A ; Add with carry (stack relative) $2A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rol $14.b,X		; 36 14 ; Rotate left $14.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $0808.w		; 1C 08 08 ; Test and reset bits $0808.w [Reads: Accumulator] [Flags: Z]
	jsl $360100.l		; 22 00 01 36 ; Jump to subroutine long $360100.l [Writes: Stack Pointer] [Flow: call]
	rol $44.b,X		; 36 44 ; Rotate left $44.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc $1C053E.l,X		; 7F 3E 05 1C ; Add long $1C053E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $1C08.w,X		; 3E 08 1C ; Rotate left $1C08.w,X [Reads: X Index] [Flags: ZNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $140200.l		; 22 00 02 14 ; Jump to subroutine long $140200.l [Writes: Stack Pointer] [Flow: call]
	trb $2A.b		; 14 2A ; Test and reset bits $2A.b [Reads: Accumulator] [Flags: Z]
	eor $1C.b,S		; 43 1C ; Exclusive OR accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $140843.l		; 22 43 08 14 ; Jump to subroutine long $140843.l [Writes: Stack Pointer] [Flow: call]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsl $084A00.l		; 22 00 4A 08 ; Jump to subroutine long $084A00.l [Writes: Stack Pointer] [Flow: call]
	trb $01.b		; 14 01 ; Test and reset bits $01.b [Reads: Accumulator] [Flags: Z]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $E002FF.l		; 22 FF 02 E0 ; Jump to subroutine long $E002FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $F843C0.l,X		; FF C0 43 F8 ; Subtract with carry (long,X) $F843C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$45.b]		; C7 45 ; Compare accumulator (long) [$45.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc $FF22C0.l,X		; FF C0 22 FF ; Subtract with carry (long,X) $FF22C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $1F4307.l,X		; FF 07 43 1F ; Subtract with carry (long,X) $1F4307.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$45.b]		; E7 45 ; Subtract with carry (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $608307.l,X		; FF 07 83 60 ; Subtract with carry (long,X) $608307.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $47.b,S		; 23 47 ; AND accumulator with stack relative $47.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $3F785F.l,X		; 7F 5F 78 3F ; Add long $3F785F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$1A.b]		; 27 1A ; AND accumulator with memory (long) [$1A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $3E22.w,X		; 1E 22 3E ; Arithmetic shift left $3E22.w,X [Reads: X Index] [Flags: ZNC]
	trb $1F1C.w		; 1C 1C 1F ; Test and reset bits $1F1C.w [Reads: Accumulator] [Flags: Z]
	ora $672F31.l,X		; 1F 31 2F 67 ; Logical OR long $672F31.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $B5CF.w,Y		; 59 CF B5 ; Exclusive OR accumulator with memory $B5CF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	lda $BAF6.w		; AD F6 BA ; Load $BAF6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr ($F884.w,X)		; FC 84 F8 ; Jump to subroutine indirect indexed ($F884.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	trb $FE1C.w		; 1C 1C FE ; Test and reset bits $FE1C.w [Reads: Accumulator] [Flags: Z]
.ACCU 8
.INDEX 8
	sep #$FC		; E2 FC
	trb $E8.b		; 14 E8 ; Test and reset bits $E8.b [Reads: Accumulator] [Flags: Z]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $FF.b,S		; 83 FF ; Store accumulator (stack relative) $FF.b,S [Reads: Accumulator, Stack Pointer]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $EFFFE7.l,X		; FF E7 FF EF ; Subtract with carry (long,X) $EFFFE7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF22DF.l,X		; FF DF 22 FF ; Subtract with carry (long,X) $FF22DF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor #$22.b		; 49 22 ; Exclusive OR #$22.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ror $00.b		; 66 00 ; Rotate right $00.b [Reads: Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jsl $00057E.l		; 22 7E 05 00 ; Jump to subroutine long $00057E.l [Writes: Stack Pointer] [Flow: call]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $83FF77.l,X		; FF 77 FF 83 ; Subtract with carry (long,X) $83FF77.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $44.b		; 02 44 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $2241.w		; CC 41 22 ; Compare $2241.w with Y register [Reads: Y Index] [Flags: ZNC]
	cmp $000001.l		; CF 01 00 00 ; Compare accumulator (long) $000001.l [Reads: Accumulator] [Flags: ZNC]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $E3.b		; 05 E3 ; Logical OR $E3.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $BEE3DD.l,X		; FF DD E3 BE ; Subtract with carry (long,X) $BEE3DD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($45.b,X)		; C1 45 ; Compare accumulator ($45.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	lda $DF05C0.l,X		; BF C0 05 DF ; Load long $DF05C0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpx #$EF.b		; E0 EF ; Compare #$EF.b with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $F7		; F0 F7 ; Branch if equal to $F0, $F7 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	adc $FB.b,S		; 63 FB ; Add with carry (stack relative) $FB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $FFF708.l,X		; FF 08 F7 FF ; Subtract with carry (long,X) $FFF708.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $FF.b,S		; 83 FF ; Store accumulator (stack relative) $FF.b,S [Reads: Accumulator, Stack Pointer]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$FF.b],Y		; D7 FF ; Compare accumulator (long indexed) [$FF.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	lda [$2A.b],Y		; B7 2A ; Load accumulator (long indexed) [$2A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $44FE00.l,X		; FF 00 FE 44 ; Subtract with carry (long,X) $44FE00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FE00FD.l,X		; FF FD 00 FE ; Subtract with carry (long,X) $FE00FD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $DFC7.w		; 0C C7 DF ; Test and set bits $DFC7.w [Reads: Accumulator] [Flags: Z]
	lda $DB.b,S		; A3 DB ; Load accumulator (stack relative) $DB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $EF.b		; 25 EF ; Logical AND $EF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($77.b),Y		; 91 77 ; Store accumulator ($77.b),Y [Reads: Accumulator, Direct Page, Y Index]
	bit #$7F.b		; 89 7F ; Test bits #$7F.b with accumulator [Reads: Accumulator] [Flags: Z]
	cmp $9F.b,S		; C3 9F ; Compare accumulator (stack relative) $9F.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc [$25.b],Y		; F7 25 ; Subtract with carry (long indexed) [$25.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FDFE07.l,X		; FF 07 FE FD ; Subtract with carry (long,X) $FDFE07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E1FFF2.l,X		; FF F2 FF E1 ; Subtract with carry (long,X) $E1FFF2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$E8.b],Y		; F7 E8 ; Subtract with carry (long indexed) [$E8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $5E.b,S		; 83 5E ; Store accumulator (stack relative) $5E.b,S [Reads: Accumulator, Stack Pointer]
	cop $0D.b		; 02 0D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $FF6DFF.l,X		; 9F FF 6D FF ; Store accumulator (long,X) $FF6DFF.l,X [Reads: Accumulator, X Index]
	adc ($BF.b,S),Y		; 73 BF ; Add with carry (stack relative indirect indexed) ($BF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $87FF4F.l,X		; FF 4F FF 87 ; Subtract with carry (long,X) $87FF4F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $1BE737.l		; CF 37 E7 1B ; Compare accumulator (long) $1BE737.l [Reads: Accumulator] [Flags: ZNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $E7E09F.l		; 8F 9F E0 E7 ; Store accumulator (long) $E7E09F.l [Reads: Accumulator]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda $DEDE.w,Y		; B9 DE DE ; Load $DEDE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$DF.b]		; E7 DF ; Subtract with carry (long) [$DF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($22.b,X)		; E1 22 ; Subtract with carry ($22.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $44BF00.l,X		; FF 00 BF 44 ; Subtract with carry (long,X) $44BF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $26E01F.l,X		; FF 1F E0 26 ; Subtract with carry (long,X) $26E01F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $7F6FBF.l,X		; 3F BF 6F 7F ; AND accumulator with memory (long,X) $7F6FBF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $FF8FFF.l		; CF FF 8F FF ; Compare accumulator (long) $FF8FFF.l [Reads: Accumulator] [Flags: ZNC]
	inc $FCFF.w,X		; FE FF FC ; Increment memory $FCFF.w,X [Reads: X Index] [Flags: ZN]
	inc $FDF9.w,X		; FE F9 FD ; Increment memory $FDF9.w,X [Reads: X Index] [Flags: ZN]
	sbc ($FB.b)		; F2 FB ; Subtract with carry (indirect) ($FB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpx $FF.b		; E4 FF ; Compare $FF.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $3FF77F.l,X		; FF 7F F7 3F ; Subtract with carry (long,X) $3FF77F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($9F.b,S),Y		; 73 9F ; Add with carry (stack relative indirect indexed) ($9F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $9FCF.w,Y		; 39 CF 9F ; AND accumulator with memory $9FCF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc [$CF.b]		; 67 CF ; Add with carry (long) [$CF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($FF.b,S),Y		; 33 FF ; AND accumulator (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($F3.b,X)		; 01 F3 ; Logical OR ($F3.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $FF25.w		; 0C 25 FF ; Test and set bits $FF25.w [Reads: Accumulator] [Flags: Z]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $51.b,S		; 83 51 ; Store accumulator (stack relative) $51.b,S [Reads: Accumulator, Stack Pointer]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	cpy #$27.b		; C0 27 ; Compare #$27.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FF0F03.l,X		; FF 03 0F FF ; Subtract with carry (long,X) $FF0F03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $F7.b		; 45 F7 ; Exclusive OR $F7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0BFF22.l,X		; 1F 22 FF 0B ; Logical OR long $0BFF22.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp [$FF.b]		; C7 FF ; Compare accumulator (long) [$FF.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sta $FFCFFE.l,X		; 9F FE CF FF ; Store accumulator (long,X) $FFCFFE.l,X [Reads: Accumulator, X Index]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($22.b,S),Y		; F3 22 ; Subtract with carry (stack relative indirect indexed) ($22.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $43E100.l,X		; FF 00 E1 43 ; Subtract with carry (long,X) $43E100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $3F08F1.l,X		; FF F1 08 3F ; Subtract with carry (long,X) $3F08F1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $DF3F.w		; ED 3F DF ; Subtract $DF3F.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc $7FE7BF.l,X		; FF BF E7 7F ; Subtract with carry (long,X) $7FE7BF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$83.b]		; E7 83 ; Subtract with carry (long) [$83.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr ($FDFF.w,X)		; FC FF FD ; Jump to subroutine indirect indexed ($FDFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$F7.b		; E0 F7 ; Compare #$F7.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $83FEF7.l,X		; FF F7 FE 83 ; Subtract with carry (long,X) $83FEF7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $01		; B0 01 ; Branch if carry set to $B0, $01 [Flow: branch]
	cop $3F.b		; 02 3F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $9483BF.l,X		; FF BF 83 94 ; Subtract with carry (long,X) $9483BF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$EF.b]		; 07 EF ; OR accumulator with memory (long) [$EF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $227FEF.l,X		; FF EF 7F 22 ; Subtract with carry (long,X) $227FEF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $DDC10B.l,X		; FF 0B C1 DD ; Subtract with carry (long,X) $DDC10B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $DD.b,S		; E3 DD ; Subtract stack-relative $DD.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	lda $E3.b,S		; A3 E3 ; Load accumulator (stack relative) $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $8977.w,X		; 9D 77 89 ; Store accumulator to $8977.w,X [Reads: Accumulator, X Index]
	adc $229FD7.l		; 6F D7 9F 22 ; Add with carry (long) $229FD7.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $F820E0.l,X		; FF E0 20 F8 ; Subtract with carry (long,X) $F820E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $DFFFE7.l,X		; FF E7 FF DF ; Subtract with carry (long,X) $DFFFE7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FCDF.w,X		; FE DF FC ; Increment memory $FCDF.w,X [Reads: X Index] [Flags: ZN]
	lda $FFB9F8.l,X		; BF F8 B9 FF ; Load long $FFB9F8.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sbc $F8FFFC.l,X		; FF FC FF F8 ; Subtract with carry (long,X) $F8FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $EFFFF5.l,X		; FF F5 FF EF ; Subtract with carry (long,X) $EFFFF5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($DF.b,S),Y		; F3 DF ; Subtract with carry (stack relative indirect indexed) ($DF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$BF.b]		; E7 BF ; Subtract with carry (long) [$BF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $FF9FFF.l		; CF FF 9F FF ; Compare accumulator (long) $FF9FFF.l [Reads: Accumulator] [Flags: ZNC]
	sbc $9FFF6F.l,X		; FF 6F FF 9F ; Subtract with carry (long,X) $9FFF6F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $43FF.w		; 2C FF 43 ; Test bits $43FF.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	sbc $FF01D0.l		; EF D0 01 FF ; Subtract with carry (long) $FF01D0.l [Writes: Accumulator] [Flags: ZVNC]
	cpy #$44.b		; C0 44 ; Compare #$44.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $F003E0.l,X		; FF E0 03 F0 ; Subtract with carry (long,X) $F003E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $4AFFFC.l,X		; FF FC FF 4A ; Subtract with carry (long,X) $4AFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E702DF.l,X		; FF DF 02 E7 ; Subtract with carry (long,X) $E702DF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF22F8.l,X		; FF F8 22 FF ; Subtract with carry (long,X) $FF22F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $DF.b,S		; 43 DF ; Exclusive OR accumulator with stack relative $DF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx #$45.b		; E0 45 ; Compare #$45.b with X register [Reads: X Index] [Flags: ZNC]
	lda $CE02C0.l,X		; BF C0 02 CE ; Load long $CE02C0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($F0.b),Y		; F1 F0 ; Subtract with carry ($F0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$0F.b		; 09 0F ; Logical OR #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $41FF87.l,X		; FF 87 FF 41 ; Subtract with carry (long,X) $41FF87.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $63E3.w,X		; 3D E3 63 ; AND accumulator with memory $63E3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FF257F.l,X		; FF 7F 25 FF ; Subtract with carry (long,X) $FF257F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr ($FEF3.w,X)		; FC F3 FE ; Jump to subroutine indirect indexed ($FEF3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc ($FF.b,X)		; E1 FF ; Subtract with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($FF.b,X)		; C1 FF ; Compare accumulator ($FF.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sta $FF.b,S		; 83 FF ; Store accumulator (stack relative) $FF.b,S [Reads: Accumulator, Stack Pointer]
	sta [$FF.b]		; 87 FF ; Store accumulator (long) [$FF.b] [Reads: Accumulator, Direct Page]
	cmp $05FF22.l		; CF 22 FF 05 ; Compare accumulator (long) $05FF22.l [Reads: Accumulator] [Flags: ZNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $83.b,S		; 03 83 ; OR accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4B4C74.l		; 4F 74 4C 4B ; Exclusive OR accumulator with memory (long) $4B4C74.l [Writes: Accumulator] [Flags: ZN]
	sbc [$9F.b],Y		; F7 9F ; Subtract with carry (long indexed) [$9F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $39.b,S		; 83 39 ; Store accumulator (stack relative) $39.b,S [Reads: Accumulator, Stack Pointer]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $FAFFFD.l,X		; FF FD FF FA ; Subtract with carry (long,X) $FAFFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $EF9FF7.l		; CF F7 9F EF ; Compare accumulator (long) $EF9FF7.l [Reads: Accumulator] [Flags: ZNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $F7FFF3.l,X		; FF F3 FF F7 ; Subtract with carry (long,X) $F7FFF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $E30EFF.l		; 22 FF 0E E3 ; Jump to subroutine long $E30EFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $F37FF3.l,X		; FF F3 7F F3 ; Subtract with carry (long,X) $F37FF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $F99FF9.l,X		; 3F F9 9F F9 ; AND accumulator with memory (long,X) $F99FF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $F3EFF9.l		; CF F9 EF F3 ; Compare accumulator (long) $F3EFF9.l [Reads: Accumulator] [Flags: ZNC]
	sbc $F744FF.l,X		; FF FF 44 F7 ; Subtract with carry (long,X) $F744FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FC43.w,X		; FE 43 FC ; Increment memory $FC43.w,X [Reads: X Index] [Flags: ZN]
	sbc [$05.b],Y		; F7 05 ; Subtract with carry (long indexed) [$05.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FEF3.w,X		; FE F3 FE ; Increment memory $FEF3.w,X [Reads: X Index] [Flags: ZN]
	sbc $44FFE0.l,X		; FF E0 FF 44 ; Subtract with carry (long,X) $44FFE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $EF012F.l,X		; FF 2F 01 EF ; Subtract with carry (long,X) $EF012F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $7FAF43.l,X		; 3F 43 AF 7F ; AND accumulator with memory (long,X) $7FAF43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $CF.b,S		; 03 CF ; OR accumulator with stack relative $CF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $2707FF.l,X		; 7F FF 07 27 ; Add long $2707FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFE704.l,X		; FF 04 E7 FF ; Subtract with carry (long,X) $FFE704.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$FF.b]		; C7 FF ; Compare accumulator (long) [$FF.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sta $035683.l		; 8F 83 56 03 ; Store accumulator (long) $035683.l [Reads: Accumulator]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: ZNC]
	jmp.w [$DEBF]		; DC BF DE ; Jump long indirect [$DEBF] [Flow: jump]
	lda $849FE7.l,X		; BF E7 9F 84 ; Load long $849FE7.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	sbc $FFF705.l,X		; FF 05 F7 FF ; Subtract with carry (long,X) $FFF705.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $FE.b,S		; C3 FE ; Compare accumulator (stack relative) $FE.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	jsl $E708FF.l		; 22 FF 08 E7 ; Jump to subroutine long $E708FF.l [Writes: Stack Pointer] [Flow: call]
	sbc [$CB.b],Y		; F7 CB ; Subtract with carry (long indexed) [$CB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E1DFE1.l,X		; FF E1 DF E1 ; Subtract with carry (long,X) $E1DFE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $EC83CB.l,X		; BF CB 83 EC ; Load long $EC83CB.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($83.b,X)		; 01 83 ; Logical OR ($83.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $6C.b		; 84 6C ; Store Y register to $6C.b [Reads: Y Index]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $EFD7FF.l		; EF FF D7 EF ; Subtract with carry (long) $EFD7FF.l [Writes: Accumulator] [Flags: ZVNC]
	eor $E3.b		; 45 E3 ; Exclusive OR $E3.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FFEB06.l,X		; FF 06 EB FF ; Subtract with carry (long,X) $FFEB06.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sbc $1FFFE7.l,X		; FF E7 FF 1F ; Subtract with carry (long,X) $1FFFE7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $FAFF.w,X		; FE FF FA ; Increment memory $FAFF.w,X [Reads: X Index] [Flags: ZN]
	sbc $EEF9F0.l,X		; FF F0 F9 EE ; Subtract with carry (long,X) $EEF9F0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$E8.b],Y		; F7 E8 ; Subtract with carry (long indexed) [$E8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $C3.b		; 04 C3 ; Test and set bits $C3.b [Reads: Accumulator] [Flags: Z]
	sbc $A37F0B.l,X		; FF 0B 7F A3 ; Subtract with carry (long,X) $A37F0B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $E2.b		; 84 E2 ; Store Y register to $E2.b [Reads: Y Index]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $02FF22.l		; 0F 22 FF 02 ; OR accumulator with memory (long) $02FF22.l [Writes: Accumulator] [Flags: ZN]
	cmp $44CCFF.l,X		; DF FF CC 44 ; Compare accumulator (long,X) $44CCFF.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc $F404E0.l,X		; FF E0 04 F4 ; Subtract with carry (long,X) $F404E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E2FFE6.l,X		; FF E6 FF E2 ; Subtract with carry (long,X) $E2FFE6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $99.b		; 00 99 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $C5.b		; 00 C5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $C0,$FF		; 44 FF C0 ; Move block positive $C0,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	asl $CF.b		; 06 CF ; Arithmetic shift left $CF.b [Reads: Direct Page] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	cmp $FFCFFF.l,X		; DF FF CF FF ; Compare accumulator (long,X) $FFCFFF.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cpx #$22.b		; E0 22 ; Compare #$22.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $445700.l,X		; FF 00 57 44 ; Subtract with carry (long,X) $445700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF0107.l,X		; FF 07 01 FF ; Subtract with carry (long,X) $FF0107.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00FF23.l		; 0F 23 FF 00 ; OR accumulator with memory (long) $00FF23.l [Writes: Accumulator] [Flags: ZN]
	ora [$24.b]		; 07 24 ; OR accumulator with memory (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FDF204.l,X		; FF 04 F2 FD ; Subtract with carry (long,X) $FDF204.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($FF.b,S),Y		; F3 FF ; Subtract with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$44.b],Y		; F7 44 ; Subtract with carry (long indexed) [$44.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $CB02F8.l,X		; FF F8 02 CB ; Subtract with carry (long,X) $CB02F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($22C7.w,X)		; FC C7 22 ; Jump to subroutine indirect indexed ($22C7.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $BF7F0B.l,X		; FF 0B 7F BF ; Subtract with carry (long,X) $BF7F0B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $F76FFF.l		; 6F FF 6F F7 ; Add with carry (long) $F76FFF.l [Writes: Accumulator] [Flags: ZVNC]
	sta $0FF7FF.l,X		; 9F FF F7 0F ; Store accumulator (long,X) $0FF7FF.l,X [Reads: Accumulator, X Index]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc [$27.b],Y		; F7 27 ; Subtract with carry (long indexed) [$27.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFE47.l,X		; FF 47 FE FF ; Subtract with carry (long,X) $FFFE47.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $8704FF.l		; 22 FF 04 87 ; Jump to subroutine long $8704FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $31FF03.l,X		; FF 03 FF 31 ; Subtract with carry (long,X) $31FF03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $7F03.w,Y		; 79 03 7F ; Add $7F03.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($BF.b),Y		; F1 BF ; Subtract with carry ($BF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($22.b,X)		; 61 22 ; Add with carry ($22.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FEF802.l,X		; FF 02 F8 FE ; Subtract with carry (long,X) $FEF802.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($83.b),Y		; F1 83 ; Subtract with carry ($83.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($04.b,X)		; 61 04 ; Add with carry ($04.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $F8.b		; 05 F8 ; Logical OR $F8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$FC.b]		; E7 FC ; Subtract with carry (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F0.b,S		; E3 F0 ; Subtract stack-relative $F0.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cmp $19FF22.l		; CF 22 FF 19 ; Compare accumulator (long) $19FF22.l [Reads: Accumulator] [Flags: ZNC]
	adc $673BF7.l,X		; 7F F7 3B 67 ; Add long $673BF7.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $BD7B.w,Y		; B9 7B BD ; Load $BD7B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $4DFFAD.l,X		; 7F AD FF 4D ; Add long $4DFFAD.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FCC755.l		; EF 55 C7 FC ; Subtract with carry (long) $FCC755.l [Writes: Accumulator] [Flags: ZVNC]
	sta [$FC.b]		; 87 FC ; Store accumulator (long) [$FC.b] [Reads: Accumulator, Direct Page]
	sta $FF.b,S		; 83 FF ; Store accumulator (stack relative) $FF.b,S [Reads: Accumulator, Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sbc $98FFB0.l,X		; FF B0 FF 98 ; Subtract with carry (long,X) $98FFB0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF23C1.l,X		; FF C1 23 FF ; Subtract with carry (long,X) $FF23C1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $B0.b,S		; 83 B0 ; Store accumulator (stack relative) $B0.b,S [Reads: Accumulator, Stack Pointer]
	ora ($83.b,X)		; 01 83 ; Logical OR ($83.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpx $0004.w		; EC 04 00 ; Compare $0004.w with X register [Reads: X Index] [Flags: ZNC]
	adc $01FF24.l,X		; 7F 24 FF 01 ; Add long $01FF24.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sbc [$45.b]		; E7 45 ; Subtract with carry (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $DE04E0.l,X		; DF E0 04 DE ; Compare accumulator (long,X) $DE04E0.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc ($E7.b,X)		; E1 E7 ; Subtract with carry ($E7.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsl $1B0CFF.l		; 22 FF 0C 1B ; Jump to subroutine long $1B0CFF.l [Writes: Stack Pointer] [Flow: call]
	sbc [$A3.b]		; E7 A3 ; Subtract with carry (long) [$A3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $EB1FE3.l,X		; 5F E3 1F EB ; Exclusive OR accumulator with memory (long,X) $EB1FE3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$DB.b],Y		; 17 DB ; OR accumulator with memory (long indexed) [$DB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$E7.b]		; 27 E7 ; AND accumulator with memory (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF231F.l,X		; 1F 1F 23 FF ; Logical OR long $FF231F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $FF		; D0 FF ; Branch if not equal to $D0, $FF [Flow: branch]
	cmp ($FF.b,X)		; C1 FF ; Compare accumulator ($FF.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: ZNC]
	cmp ($FF.b,X)		; C1 FF ; Compare accumulator ($FF.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc $24.b,S		; E3 24 ; Subtract stack-relative $24.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $FF0F0A.l,X		; FF 0A 0F FF ; Subtract with carry (long,X) $FF0F0A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $FF3FFF.l,X		; DF FF 3F FF ; Compare accumulator (long,X) $FF3FFF.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	ora $FF5FFF.l,X		; 1F FF 5F FF ; Logical OR long $FF5FFF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $02FF24.l,X		; BF 24 FF 02 ; Load long $02FF24.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsr ($FF49.w,X)		; FC 49 FF ; Jump to subroutine indirect indexed ($FF49.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $FF22.w,X		; FE 22 FF ; Increment memory $FF22.w,X [Reads: X Index] [Flags: ZN]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $17.b		; 84 17 ; Store Y register to $17.b [Reads: Y Index]
	asl $83.b		; 06 83 ; Arithmetic shift left $83.b [Reads: Direct Page] [Flags: ZNC]
	cpx $0004.w		; EC 04 00 ; Compare $0004.w with X register [Reads: X Index] [Flags: ZNC]
	ora $045983.l,X		; 1F 83 59 04 ; Logical OR long $045983.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $DD.b,S		; 83 DD ; Store accumulator (stack relative) $DD.b,S [Reads: Accumulator, Stack Pointer]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $FF31.w,X		; FE 31 FF ; Increment memory $FF31.w,X [Reads: X Index] [Flags: ZN]
	sta $55.b,S		; 83 55 ; Store accumulator (stack relative) $55.b,S [Reads: Accumulator, Stack Pointer]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: ZNC]
	sta $FFC7FF.l		; 8F FF C7 FF ; Store accumulator (long) $FFC7FF.l [Reads: Accumulator]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: ZNC]
	sbc ($FF.b)		; F2 FF ; Subtract with carry (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($FF44.w,X)		; FC 44 FF ; Jump to subroutine indirect indexed ($FF44.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora #$FE.b		; 09 FE ; Logical OR #$FE.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $0FFBFF.l,X		; FF FF FB 0F ; Subtract with carry (long,X) $0FFBFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $77FF07.l,X		; FF 07 FF 77 ; Subtract with carry (long,X) $77FF07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $97FF44.l		; 8F 44 FF 97 ; Store accumulator (long) $97FF44.l [Reads: Accumulator]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $FC.b		; 06 FC ; Arithmetic shift left $FC.b [Reads: Direct Page] [Flags: ZNC]
	sbc $FFFA.w,X		; FD FA FF ; Subtract with carry $FFFA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($FF.b),Y		; F1 FF ; Subtract with carry ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $84.b,S		; E3 84 ; Subtract stack-relative $84.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc [$04.b]		; E7 04 ; Subtract with carry (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl $9F.b		; 06 9F ; Arithmetic shift left $9F.b [Reads: Direct Page] [Flags: ZNC]
	sbc $73BFFF.l,X		; FF FF BF 73 ; Subtract with carry (long,X) $73BFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF2B7F.l,X		; FF 7F 2B FF ; Subtract with carry (long,X) $FF2B7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $E1C6.w,Y		; F9 C6 E1 ; Subtract with carry $E1C6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $9FFD.w,X		; 9E FD 9F ; Store zero to $9FFD.w,X [Reads: X Index]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sta $BADF.w,X		; 9D DF BA ; Store accumulator to $BADF.w,X [Reads: Accumulator, X Index]
	sbc $2983DC.l		; EF DC 83 29 ; Subtract with carry (long) $2983DC.l [Writes: Accumulator] [Flags: ZVNC]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$9B.b]		; E7 9B ; Subtract with carry (long) [$9B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $BF.b,S		; C3 BF ; Compare accumulator (stack relative) $BF.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $3F.b,S		; C3 3F ; Compare accumulator (stack relative) $3F.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sta $44.b,S		; 83 44 ; Store accumulator (stack relative) $44.b,S [Reads: Accumulator, Stack Pointer]
	adc $FF0187.l,X		; 7F 87 01 FF ; Add long $FF0187.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$22.b]		; 87 22 ; Store accumulator (long) [$22.b] [Reads: Accumulator, Direct Page]
	sbc $FF1849.l,X		; FF 49 18 FF ; Subtract with carry (long,X) $FF1849.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	sbc $C3FF81.l,X		; FF 81 FF C3 ; Subtract with carry (long,X) $C3FF81.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $FF		; 50 FF ; Branch if overflow clear to $50, $FF [Flow: branch]
	sbc [$00.b]		; E7 00 ; Subtract with carry (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	mvp $00,$FF		; 44 FF 00 ; Move block positive $00,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $000011.l,X		; FF 11 00 00 ; Subtract with carry (long,X) $000011.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $447F3F.l,X		; 3F 3F 7F 44 ; AND accumulator with memory (long,X) $447F3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $4F7250.l		; 6F 50 72 4F ; Add with carry (long) $4F7250.l [Writes: Accumulator] [Flags: ZVNC]
	adc ($6D.b,S),Y		; 73 6D ; Add with carry (stack relative indirect indexed) ($6D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $7C4A.w,X		; 7E 4A 7C ; Rotate right $7C4A.w,X [Reads: X Index] [Flags: ZNC]
	mvp $00,$00		; 44 00 00 ; Move block positive $00,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	jsl $0003FF.l		; 22 FF 03 00 ; Jump to subroutine long $0003FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $220000.l,X		; FF 00 00 22 ; Subtract with carry (long,X) $220000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $310023.l,X		; FF 23 00 31 ; Subtract with carry (long,X) $310023.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFE108.l,X		; FF 08 E1 FF ; Subtract with carry (long,X) $FFE108.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E5FF.w,Y		; F9 FF E5 ; Subtract with carry $E5FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $4FFFFD.l,X		; FF FD FF 4F ; Subtract with carry (long,X) $4FFFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $7F,$FF		; 44 FF 7F ; Move block positive $7F,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $01, $03		; 62 01 03 ; Push effective relative address $62, $01, $03 [Writes: Stack Pointer]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $05.b,S		; 43 05 ; Exclusive OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $03FF22.l		; 0F 22 FF 03 ; OR accumulator with memory (long) $03FF22.l [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	sbc $074583.l,X		; FF 83 45 07 ; Subtract with carry (long,X) $074583.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $000001.l,X		; FF 01 00 00 ; Subtract with carry (long,X) $000001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $90.b,S		; 83 90 ; Store accumulator (stack relative) $90.b,S [Reads: Accumulator, Stack Pointer]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$E0.b		; A0 E0 ; Load #$E0.b into Y register [Writes: Y Index] [Flags: ZN]
	jsr $E3E0.w		; 20 E0 E3 ; Jump to subroutine at $E3E0.w [Writes: Stack Pointer] [Flow: call]
	cpx #$26.b		; E0 26 ; Compare #$26.b with X register [Reads: X Index] [Flags: ZNC]
	sbc ($D4.b,X)		; E1 D4 ; Subtract with carry ($D4.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($0F.b,S),Y		; F3 0F ; Subtract with carry (stack relative indirect indexed) ($0F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $77303F.l		; 0F 3F 30 77 ; OR accumulator with memory (long) $77303F.l [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	eor [$D7.b]		; 47 D7 ; Exclusive OR accumulator with memory (long) [$D7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $9FEF55.l		; AF 55 EF 9F ; Load long $9FEF55.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $F7.b		; 05 F7 ; Logical OR $F7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $F4FFF0.l,X		; FF F0 FF F4 ; Subtract with carry (long,X) $F4FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	eor $F7.b,S		; 43 F7 ; Exclusive OR accumulator with stack relative $F7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora $F6.b,S		; 03 F6 ; OR accumulator with stack relative $F6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $F9F7.w,Y		; F9 F7 F9 ; Subtract with carry $F9F7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $FB.b,S		; 63 FB ; Add with carry (stack relative) $FB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $FFFC0D.l,X		; FF 0D FC FF ; Subtract with carry (long,X) $FFFC0D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sbc [$F8.b]		; E7 F8 ; Subtract with carry (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E0DFF0.l		; EF F0 DF E0 ; Subtract with carry (long) $E0DFF0.l [Writes: Accumulator] [Flags: ZVNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cpx $D9.b		; E4 D9 ; Compare $D9.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	inc $FF.b		; E6 FF ; Increment $FF.b [Reads: Direct Page] [Flags: ZN]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $24FFFF.l,X		; FF FF FF 24 ; Subtract with carry (long,X) $24FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($24.b,X)		; 21 24 ; Logical AND ($24.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $21.b		; 24 21 ; Test bits $21.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsl $242424.l		; 22 24 24 24 ; Jump to subroutine long $242424.l [Writes: Stack Pointer] [Flow: call]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $242424.l		; 22 24 24 24 ; Jump to subroutine long $242424.l [Writes: Stack Pointer] [Flow: call]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $222222.l		; 22 22 22 22 ; Jump to subroutine long $222222.l [Writes: Stack Pointer] [Flow: call]
	jsl $222222.l		; 22 22 22 22 ; Jump to subroutine long $222222.l [Writes: Stack Pointer] [Flow: call]
	jsl $222222.l		; 22 22 22 22 ; Jump to subroutine long $222222.l [Writes: Stack Pointer] [Flow: call]
	jsl $222222.l		; 22 22 22 22 ; Jump to subroutine long $222222.l [Writes: Stack Pointer] [Flow: call]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($24.b,X)		; 21 24 ; Logical AND ($24.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsl $252421.l		; 22 21 24 25 ; Jump to subroutine long $252421.l [Writes: Stack Pointer] [Flow: call]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and [$22.b]		; 27 22 ; AND accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($25.b,X)		; 21 25 ; Logical AND ($25.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $27.b		; 26 27 ; Rotate left $27.b [Reads: Direct Page] [Flags: ZNC]
	and ($25.b,X)		; 21 25 ; Logical AND ($25.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	stz $63.b		; 64 63 ; Store zero to $63.b
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	.db $62, $62, $63		; 62 62 63 ; Push effective relative address $62, $62, $63 [Writes: Stack Pointer]
	adc $62.b,S		; [PATTERN: Memory clearing operation] 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $64.b,S		; 63 64 ; Add with carry (stack relative) $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $63.b		; 64 63 ; Store zero to $63.b
	adc $64.b,S		; 63 64 ; Add with carry (stack relative) $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $63.b		; 64 63 ; Store zero to $63.b
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $61		; 62 62 61 ; Push effective relative address $62, $62, $61 [Writes: Stack Pointer]
	adc ($6B.b,X)		; 61 6B ; Add with carry ($6B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $61, $61		; 62 61 61 ; Push effective relative address $62, $61, $61 [Writes: Stack Pointer]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $25.b		; 26 25 ; Rotate left $25.b [Reads: Direct Page] [Flags: ZNC]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $25.b		; 26 25 ; Rotate left $25.b [Reads: Direct Page] [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $25.b		; 26 25 ; Rotate left $25.b [Reads: Direct Page] [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $2A.b		; 25 2A ; Logical AND $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $24.b		; 26 24 ; Rotate left $24.b [Reads: Direct Page] [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $2A.b		; 25 2A ; Logical AND $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol $0C.b		; 26 0C ; Rotate left $0C.b [Reads: Direct Page] [Flags: ZNC]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0B0B.w		; 0C 0B 0B ; Test and set bits $0B0B.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0B0C.w		; 0C 0C 0B ; Test and set bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0B0C.w		; 0C 0C 0B ; Test and set bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0D0C.w		; 0C 0C 0D ; Test and set bits $0D0C.w [Reads: Accumulator] [Flags: Z]
	ora $0C0C.w		; 0D 0C 0C ; Logical OR $0C0C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0D0C.w		; 0C 0C 0D ; Test and set bits $0D0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0D0C.w		; 0C 0C 0D ; Test and set bits $0D0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0B.w		; 0C 0B 0C ; Test and set bits $0C0B.w [Reads: Accumulator] [Flags: Z]
	ora $0C0C.w		; 0D 0C 0C ; Logical OR $0C0C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0A0A.w		; 0C 0A 0A ; Test and set bits $0A0A.w [Reads: Accumulator] [Flags: Z]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0B0C.w		; 0C 0C 0B ; Test and set bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0B0B.w		; 0C 0B 0B ; Test and set bits $0B0B.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$03.b		; 09 03 ; Logical OR #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0B.b,S		; 03 0B ; OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0B.b,S		; 03 0B ; OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0D.w		; 0C 0D 0C ; Test and set bits $0C0D.w [Reads: Accumulator] [Flags: Z]
	tsb $0B03.w		; 0C 03 0B ; Test and set bits $0B03.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0D0D.w		; 0C 0D 0D ; Test and set bits $0D0D.w [Reads: Accumulator] [Flags: Z]
	tsb $0B0C.w		; 0C 0C 0B ; Test and set bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0D.w		; 0C 0D 0C ; Test and set bits $0C0D.w [Reads: Accumulator] [Flags: Z]
	tsb $0B0C.w		; 0C 0C 0B ; Test and set bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$03.b		; 09 03 ; Logical OR #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$03.b		; 09 03 ; Logical OR #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$03.b		; 09 03 ; Logical OR #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0B.b,S		; 03 0B ; OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$03.b		; 09 03 ; Logical OR #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0B.b,S		; 03 0B ; OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0903.w		; 0D 03 09 ; Logical OR $0903.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0C0D.w		; 0D 0D 0C ; Logical OR $0C0D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0C0D.w		; 0D 0D 0C ; Logical OR $0C0D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $030C.w		; 0C 0C 03 ; Test and set bits $030C.w [Reads: Accumulator] [Flags: Z]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $09.b,S		; 03 09 ; OR accumulator with stack relative $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$03.b		; 09 03 ; Logical OR #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0A.b,S		; 03 0A ; OR accumulator with stack relative $0A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0A0B.w		; 0D 0B 0A ; Logical OR $0A0B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$03.b		; 09 03 ; Logical OR #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0C.b,S		; 03 0C ; OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0B0D.w		; 0D 0D 0B ; Logical OR $0B0D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0C.b,S		; 03 0C ; OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $0D0C.w		; 0C 0C 0D ; Test and set bits $0D0C.w [Reads: Accumulator] [Flags: Z]
	ora $0A0B.w		; 0D 0B 0A ; Logical OR $0A0B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$62.b		; 09 62 ; Logical OR #$62.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $63		; 62 62 63 ; Push effective relative address $62, $62, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $63		; 62 62 63 ; Push effective relative address $62, $62, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $24.b,S		; 63 24 ; Add with carry (stack relative) $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $21.b		; 25 21 ; Logical AND $21.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($2A.b,X)		; 21 2A ; Logical AND ($2A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $21.b		; 25 21 ; Logical AND $21.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($2A.b,X)		; 21 2A ; Logical AND ($2A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $21.b		; 25 21 ; Logical AND $21.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($2A.b,X)		; 21 2A ; Logical AND ($2A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $21.b		; 25 21 ; Logical AND $21.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($2A.b,X)		; 21 2A ; Logical AND ($2A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $21.b		; 25 21 ; Logical AND $21.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($2A.b,X)		; 21 2A ; Logical AND ($2A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $21.b		; 25 21 ; Logical AND $21.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($2A.b,X)		; 21 2A ; Logical AND ($2A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $21.b		; 25 21 ; Logical AND $21.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($2A.b,X)		; 21 2A ; Logical AND ($2A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and ($25.b,X)		; 21 25 ; Logical AND ($25.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and ($25.b,X)		; 21 25 ; Logical AND ($25.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and ($25.b,X)		; 21 25 ; Logical AND ($25.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and ($25.b,X)		; 21 25 ; Logical AND ($25.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and ($25.b,X)		; 21 25 ; Logical AND ($25.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and ($25.b,X)		; 21 25 ; Logical AND ($25.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and ($25.b,X)		; 21 25 ; Logical AND ($25.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and ($25.b,X)		; 21 25 ; Logical AND ($25.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $64, $63		; 62 64 63 ; Push effective relative address $62, $64, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $64, $63		; 62 64 63 ; Push effective relative address $62, $64, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $62, $64		; 62 62 64 ; Push effective relative address $62, $62, $64 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $64, $63		; 62 64 63 ; Push effective relative address $62, $64, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $64, $63		; 62 64 63 ; Push effective relative address $62, $64, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $62, $64		; 62 62 64 ; Push effective relative address $62, $62, $64 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $63		; 62 62 63 ; Push effective relative address $62, $62, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $64.b,S		; 63 64 ; Add with carry (stack relative) $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $63		; 62 62 63 ; Push effective relative address $62, $62, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc ($63.b,X)		; 61 63 ; Add with carry ($63.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $62.b		; 64 62 ; Store zero to $62.b
	adc ($63.b,X)		; 61 63 ; Add with carry ($63.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $64.b,S		; 63 64 ; Add with carry (stack relative) $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc ($63.b,X)		; 61 63 ; Add with carry ($63.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $61		; 62 62 61 ; Push effective relative address $62, $62, $61 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $61, $63		; 62 61 63 ; Push effective relative address $62, $61, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $62.b		; 64 62 ; Store zero to $62.b
	adc ($63.b,X)		; 61 63 ; Add with carry ($63.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $64.b,S		; 63 64 ; Add with carry (stack relative) $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc ($63.b,X)		; 61 63 ; Add with carry ($63.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $61		; 62 62 61 ; Push effective relative address $62, $62, $61 [Writes: Stack Pointer]
	adc $26.b,S		; 63 26 ; Add with carry (stack relative) $26.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rol $21.b		; 26 21 ; Rotate left $21.b [Reads: Direct Page] [Flags: ZNC]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $26.b		; 24 26 ; Test bits $26.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $22.b		; 26 22 ; Rotate left $22.b [Reads: Direct Page] [Flags: ZNC]
	and ($24.b,X)		; 21 24 ; Logical AND ($24.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $26.b		; 25 26 ; Logical AND $26.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $22.b		; 26 22 ; Rotate left $22.b [Reads: Direct Page] [Flags: ZNC]
	jsl $242421.l		; 22 21 24 24 ; Jump to subroutine long $242421.l [Writes: Stack Pointer] [Flow: call]
	bit $26.b		; 24 26 ; Test bits $26.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $22.b		; 26 22 ; Rotate left $22.b [Reads: Direct Page] [Flags: ZNC]
	jsl $212122.l		; 22 22 21 21 ; Jump to subroutine long $212122.l [Writes: Stack Pointer] [Flow: call]
	and ($26.b,X)		; 21 26 ; Logical AND ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $27.b		; 26 27 ; Rotate left $27.b [Reads: Direct Page] [Flags: ZNC]
	jsl $222222.l		; 22 22 22 22 ; Jump to subroutine long $222222.l [Writes: Stack Pointer] [Flow: call]
	jsl $262626.l		; 22 26 26 26 ; Jump to subroutine long $262626.l [Writes: Stack Pointer] [Flow: call]
	and [$22.b]		; 27 22 ; AND accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $262222.l		; 22 22 22 26 ; Jump to subroutine long $262222.l [Writes: Stack Pointer] [Flow: call]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $27.b		; 26 27 ; Rotate left $27.b [Reads: Direct Page] [Flags: ZNC]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$26.b]		; 27 26 ; AND accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $24.b		; 26 24 ; Rotate left $24.b [Reads: Direct Page] [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($2A.b,X)		; 21 2A ; Logical AND ($2A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $21.b		; 24 21 ; Test bits $21.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsl $2A2121.l		; 22 21 21 2A ; Jump to subroutine long $2A2121.l [Writes: Stack Pointer] [Flow: call]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $262A21.l		; 22 21 2A 26 ; Jump to subroutine long $262A21.l [Writes: Stack Pointer] [Flow: call]
	jsl $222222.l		; 22 22 22 22 ; Jump to subroutine long $222222.l [Writes: Stack Pointer] [Flow: call]
	jsl $26262A.l		; 22 2A 26 26 ; Jump to subroutine long $26262A.l [Writes: Stack Pointer] [Flow: call]
	jsl $222222.l		; 22 22 22 22 ; Jump to subroutine long $222222.l [Writes: Stack Pointer] [Flow: call]
	and [$26.b]		; 27 26 ; AND accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $09.b,S		; 03 09 ; OR accumulator with stack relative $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $030C.w		; 0D 0C 03 ; Logical OR $030C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0C0C.w		; 0D 0C 0C ; Logical OR $0C0C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0909.w		; 0C 09 09 ; Test and set bits $0909.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $090C.w		; 0C 0C 09 ; Test and set bits $090C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $090C.w		; 0C 0C 09 ; Test and set bits $090C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0B.b,S		; 03 0B ; OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$03.b		; 09 03 ; Logical OR #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $020C.w		; 0C 0C 02 ; Test and set bits $020C.w [Reads: Accumulator] [Flags: Z]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0C0C.w		; 0D 0C 0C ; Logical OR $0C0C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0902.w		; 0C 02 09 ; Test and set bits $0902.w [Reads: Accumulator] [Flags: Z]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $020C.w		; 0D 0C 02 ; Logical OR $020C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $0A.b		; 02 0A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0C0D.w		; 0D 0D 0C ; Logical OR $0C0D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $020C.w		; 0C 0C 02 ; Test and set bits $020C.w [Reads: Accumulator] [Flags: Z]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0D0D.w		; 0C 0D 0D ; Test and set bits $0D0D.w [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0202.w		; 0C 02 02 ; Test and set bits $0202.w [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0B0B.w		; 0D 0B 0B ; Logical OR $0B0B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $63, $62		; 62 63 62 ; Push effective relative address $62, $63, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $63, $62		; 62 63 62 ; Push effective relative address $62, $63, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $63		; 62 62 63 ; Push effective relative address $62, $62, $63 [Writes: Stack Pointer]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $63		; 62 62 63 ; Push effective relative address $62, $62, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $24.b,S		; 63 24 ; Add with carry (stack relative) $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($2A.b,X)		; 21 2A ; Logical AND ($2A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $2A.b		; 25 2A ; Logical AND $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and ($25.b,X)		; 21 25 ; Logical AND ($25.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $25.b		; 26 25 ; Rotate left $25.b [Reads: Direct Page] [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $63, $64		; 62 63 64 ; Push effective relative address $62, $63, $64 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $63, $64		; 62 63 64 ; Push effective relative address $62, $63, $64 [Writes: Stack Pointer]
	adc $63.b,S		; [PATTERN: Memory clearing operation] 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $6B.b		; 64 6B ; Store zero to $6B.b
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $62, $63		; 62 62 63 ; Push effective relative address $62, $62, $63 [Writes: Stack Pointer]
	stz $64.b		; 64 64 ; Store zero to $64.b
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $67.b		; 66 67 ; Rotate right $67.b [Reads: Direct Page] [Flags: ZNC]
	ror $6B.b		; 66 6B ; Rotate right $6B.b [Reads: Direct Page] [Flags: ZNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; [PATTERN: Memory clearing operation] 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $64.b,S		; 63 64 ; Add with carry (stack relative) $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $62.b		; 64 62 ; Store zero to $62.b
	adc $64.b,S		; 63 64 ; Add with carry (stack relative) $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $62.b		; 64 62 ; Store zero to $62.b
	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	.db $62, $62, $63		; 62 62 63 ; Push effective relative address $62, $62, $63 [Writes: Stack Pointer]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $61		; 62 62 61 ; Push effective relative address $62, $62, $61 [Writes: Stack Pointer]
	ror $67.b		; 66 67 ; Rotate right $67.b [Reads: Direct Page] [Flags: ZNC]
	ror $61.b		; 66 61 ; Rotate right $61.b [Reads: Direct Page] [Flags: ZNC]
	ror $67.b		; 66 67 ; Rotate right $67.b [Reads: Direct Page] [Flags: ZNC]
	ror $61.b		; 66 61 ; Rotate right $61.b [Reads: Direct Page] [Flags: ZNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($63.b,X)		; 61 63 ; Add with carry ($63.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $61, $63		; 62 61 63 ; Push effective relative address $62, $61, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $64.b,S		; 63 64 ; Add with carry (stack relative) $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc ($63.b,X)		; 61 63 ; Add with carry ($63.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stz $63.b		; 64 63 ; Store zero to $63.b
	adc $64.b,S		; 63 64 ; Add with carry (stack relative) $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc ($63.b,X)		; 61 63 ; Add with carry ($63.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $64.b,S		; 63 64 ; Add with carry (stack relative) $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $63.b		; 64 63 ; Store zero to $63.b
	.db $62, $62, $61		; 62 62 61 ; Push effective relative address $62, $62, $61 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $61		; 62 62 61 ; Push effective relative address $62, $62, $61 [Writes: Stack Pointer]
	adc ($63.b,X)		; 61 63 ; Add with carry ($63.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $61, $61		; 62 61 61 ; Push effective relative address $62, $61, $61 [Writes: Stack Pointer]
	adc ($63.b,X)		; 61 63 ; Add with carry ($63.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($66.b,X)		; 61 66 ; Add with carry ($66.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc [$66.b]		; 67 66 ; Add with carry (long) [$66.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($63.b,X)		; 61 63 ; Add with carry ($63.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $64.b		; 64 64 ; Store zero to $64.b
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $63.b		; [PATTERN: Memory clearing operation] 64 63 ; Store zero to $63.b
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $63.b		; 64 63 ; Store zero to $63.b
	.db $62, $61, $63		; 62 61 63 ; Push effective relative address $62, $61, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $64.b		; 64 64 ; Store zero to $64.b
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	stz $63.b		; 64 63 ; Store zero to $63.b
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $61.b,S		; 63 61 ; Add with carry (stack relative) $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $63, $64		; 62 63 64 ; Push effective relative address $62, $63, $64 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0A0B.w		; 0C 0B 0A ; Test and set bits $0A0B.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0B0C.w		; 0C 0C 0B ; Test and set bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0B0B.w		; 0C 0B 0B ; Test and set bits $0B0B.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0B0C.w		; 0C 0C 0B ; Test and set bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0B0B.w		; 0C 0B 0B ; Test and set bits $0B0B.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0B0C.w		; 0C 0C 0B ; Test and set bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0D0D.w		; 0C 0D 0D ; Test and set bits $0D0D.w [Reads: Accumulator] [Flags: Z]
	ora $0A0A.w		; 0D 0A 0A ; Logical OR $0A0A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0D.w		; 0C 0D 0C ; Test and set bits $0C0D.w [Reads: Accumulator] [Flags: Z]
	tsb $0A0C.w		; 0C 0C 0A ; Test and set bits $0A0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0D.w		; 0C 0D 0C ; Test and set bits $0C0D.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0C0C.w		; 0D 0C 0C ; Logical OR $0C0C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0B0B.w		; 0C 0B 0B ; Test and set bits $0B0B.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0B0C.w		; 0C 0C 0B ; Test and set bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0B0C.w		; 0C 0C 0B ; Test and set bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0B0C.w		; 0C 0C 0B ; Test and set bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0B0B.w		; 0C 0B 0B ; Test and set bits $0B0B.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0B0C.w		; 0C 0C 0B ; Test and set bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0B0C.w		; 0C 0C 0B ; Test and set bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0B0B.w		; 0C 0B 0B ; Test and set bits $0B0B.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0B0C.w		; 0C 0C 0B ; Test and set bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0B0B.w		; 0C 0B 0B ; Test and set bits $0B0B.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0B0B.w		; 0C 0B 0B ; Test and set bits $0B0B.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0B.w		; 0C 0B 0C ; Test and set bits $0C0B.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0B.w		; 0C 0B 0C ; Test and set bits $0C0B.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0B0C.w		; 0C 0C 0B ; Test and set bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0B0C.w		; 0C 0C 0B ; Test and set bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$57		; 54 57 54 ; Move block negative $54,$57 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $57,$54		; 54 54 57 ; Move block negative $57,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$54.b],Y		; 57 54 ; Exclusive OR accumulator with memory (long indexed) [$54.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $57,$57		; 54 57 57 ; Move block negative $57,$57 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $54.b,X		; 56 54 ; Logical shift right $54.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $53.b,X		; 56 53 ; Logical shift right $53.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $53.b,X		; 56 53 ; Logical shift right $53.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor ($54.b,S),Y		; 53 54 ; XOR accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $57,$57		; 54 57 57 ; Move block negative $57,$57 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $53.b,X		; 56 53 ; Logical shift right $53.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor ($54.b,S),Y		; 53 54 ; XOR accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $57,$57		; 54 57 57 ; Move block negative $57,$57 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $53.b,X		; 56 53 ; Logical shift right $53.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor ($54.b,S),Y		; 53 54 ; XOR accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $57,$57		; 54 57 57 ; Move block negative $57,$57 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $53.b,X		; 56 53 ; Logical shift right $53.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor ($54.b,S),Y		; 53 54 ; XOR accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $57,$54		; 54 54 57 ; Move block negative $57,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $57,$57		; 54 57 57 ; Move block negative $57,$57 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $57.b,X		; 56 57 ; Logical shift right $57.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor [$54.b],Y		; 57 54 ; Exclusive OR accumulator with memory (long indexed) [$54.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $56,$53		; 54 53 56 ; Move block negative $56,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $53,$53		; 54 53 53 ; Move block negative $53,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $57.b,X		; 56 57 ; Logical shift right $57.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor [$54.b],Y		; 57 54 ; Exclusive OR accumulator with memory (long indexed) [$54.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $57.b,X		; 56 57 ; Logical shift right $57.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor [$54.b],Y		; 57 54 ; Exclusive OR accumulator with memory (long indexed) [$54.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $57.b,X		; 56 57 ; Logical shift right $57.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor [$54.b],Y		; 57 54 ; Exclusive OR accumulator with memory (long indexed) [$54.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $57.b,X		; 56 57 ; Logical shift right $57.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $53.b,X		; 56 53 ; Logical shift right $53.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor ($54.b,S),Y		; 53 54 ; XOR accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$56.b],Y		; 57 56 ; Exclusive OR accumulator with memory (long indexed) [$56.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $56,$57		; 54 57 56 ; Move block negative $56,$57 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $56,$57		; 54 57 56 ; Move block negative $56,$57 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $56,$57		; 54 57 56 ; Move block negative $56,$57 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $56,$57		; 54 57 56 ; Move block negative $56,$57 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $56,$57		; 54 57 56 ; Move block negative $56,$57 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $56,$57		; 54 57 56 ; Move block negative $56,$57 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $57,$57		; 54 57 57 ; Move block negative $57,$57 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $56.b,X		; 56 56 ; Logical shift right $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lsr $56.b,X		; 56 56 ; Logical shift right $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lsr $56.b,X		; 56 56 ; Logical shift right $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lsr $56.b,X		; 56 56 ; Logical shift right $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$53		; 54 53 54 ; Move block negative $54,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $53,$54		; 54 54 53 ; Move block negative $53,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$46		; 44 46 45 ; Move block positive $45,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	mvp $46,$45		; 44 45 46 ; Move block positive $46,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc ($63.b,X)		; 61 63 ; Add with carry ($63.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $62.b		; 64 62 ; Store zero to $62.b
	adc ($63.b,X)		; 61 63 ; Add with carry ($63.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $64.b,S		; 63 64 ; Add with carry (stack relative) $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc ($63.b,X)		; 61 63 ; Add with carry ($63.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $61		; 62 62 61 ; Push effective relative address $62, $62, $61 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $61, $63		; 62 61 63 ; Push effective relative address $62, $61, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $63.b		; [PATTERN: Memory clearing operation] 64 63 ; Store zero to $63.b
	.db $62, $62, $63		; 62 62 63 ; Push effective relative address $62, $62, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $63.b		; 64 63 ; Store zero to $63.b
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $64, $63		; 62 64 63 ; Push effective relative address $62, $64, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $64, $63		; 62 64 63 ; Push effective relative address $62, $64, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $62, $64		; 62 62 64 ; Push effective relative address $62, $62, $64 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $64, $63		; 62 64 63 ; Push effective relative address $62, $64, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $64		; 62 62 64 ; Push effective relative address $62, $62, $64 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $63.b		; 64 63 ; Store zero to $63.b
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0B0B.w		; 0C 0B 0B ; Test and set bits $0B0B.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0B0B.w		; 0C 0B 0B ; Test and set bits $0B0B.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0B0B.w		; 0C 0B 0B ; Test and set bits $0B0B.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0B0C.w		; 0C 0C 0B ; Test and set bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0B0B.w		; 0C 0B 0B ; Test and set bits $0B0B.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$07.b		; 09 07 ; Logical OR #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$07.b		; 09 07 ; Logical OR #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$09.b]		; 07 09 ; OR accumulator with memory (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $070C.w		; 0D 0C 07 ; Logical OR $070C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0C0C.w		; 0D 0C 0C ; Logical OR $0C0C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0909.w		; 0C 09 09 ; Test and set bits $0909.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $090C.w		; 0C 0C 09 ; Test and set bits $090C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$07.b		; 09 07 ; Logical OR #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$07.b		; 09 07 ; Logical OR #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$07.b		; 09 07 ; Logical OR #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$0B.b]		; 07 0B ; OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $090C.w		; 0C 0C 09 ; Test and set bits $090C.w [Reads: Accumulator] [Flags: Z]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0909.w		; 0C 09 09 ; Test and set bits $0909.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	asl $09.b		; 06 09 ; Arithmetic shift left $09.b [Reads: Direct Page] [Flags: ZNC]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	asl $09.b		; 06 09 ; Arithmetic shift left $09.b [Reads: Direct Page] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0606.w		; 0C 06 06 ; Test and set bits $0606.w [Reads: Accumulator] [Flags: Z]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	asl $09.b		; 06 09 ; Arithmetic shift left $09.b [Reads: Direct Page] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	asl $09.b		; 06 09 ; Arithmetic shift left $09.b [Reads: Direct Page] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$06.b		; 09 06 ; Logical OR #$06.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	asl $09.b		; 06 09 ; Arithmetic shift left $09.b [Reads: Direct Page] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	asl $24.b		; 06 24 ; Arithmetic shift left $24.b [Reads: Direct Page] [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $2E.b		; 25 2E ; Logical AND $2E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol CGADD.w		; 2E 21 21 ; Rotate left CGADD.w [Flags: ZNC]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $2E2222.l		; 22 22 22 2E ; Jump to subroutine long $2E2222.l [Writes: Stack Pointer] [Flow: call]
	and $272F2F.l		; 2F 2F 2F 27 ; AND accumulator with memory (long) $272F2F.l [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$2E.b]		; 27 2E ; AND accumulator with memory (long) [$2E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $2525.w		; 2D 25 25 ; Logical AND $2525.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $2121.w		; 2D 21 21 ; Logical AND $2121.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($42.b,X)		; 21 42 ; Logical AND ($42.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	jmp $4D4D.w		; 4C 4D 4D ; Jump to $4D4D.w [Flow: jump]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $4C		; 42 4C ; Reserved instruction
	eor $424D.w		; 4D 4D 42 ; Exclusive OR $424D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	jmp $4D4D.w		; 4C 4D 4D ; Jump to $4D4D.w [Flow: jump]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $4C		; 42 4C ; Reserved instruction
	eor $424D.w		; 4D 4D 42 ; Exclusive OR $424D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	jmp $4D4C.w		; 4C 4C 4D ; Jump to $4D4C.w [Flow: jump]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $4C		; 42 4C ; Reserved instruction
	eor $424D.w		; 4D 4D 42 ; Exclusive OR $424D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	jmp $4D4D.w		; 4C 4D 4D ; Jump to $4D4D.w [Flow: jump]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $4C		; 42 4C ; Reserved instruction
	eor $244D.w		; 4D 4D 24 ; Exclusive OR $244D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $2E.b		; 24 2E ; Test bits $2E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($2E.b,X)		; 21 2E ; Logical AND ($2E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $2E2F2F.l		; 2F 2F 2F 2E ; AND accumulator with memory (long) $2E2F2F.l [Writes: Accumulator] [Flags: ZN]
	jsl $222222.l		; 22 22 22 22 ; Jump to subroutine long $222222.l [Writes: Stack Pointer] [Flow: call]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol $2727.w		; 2E 27 27 ; Rotate left $2727.w [Flags: ZNC]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $2626.w		; 2D 26 26 ; Logical AND $2626.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($2D.b,X)		; 21 2D ; Logical AND ($2D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$56.b],Y		; 57 56 ; Exclusive OR accumulator with memory (long indexed) [$56.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $53,$56		; 54 56 53 ; Move block negative $53,$56 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($54.b,S),Y		; 53 54 ; XOR accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $53,$53		; 54 53 53 ; Move block negative $53,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($54.b,S),Y		; 53 54 ; XOR accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $57.b,X		; 56 57 ; Logical shift right $57.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $53,$54		; 54 54 53 ; Move block negative $53,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($56.b,S),Y		; 53 56 ; XOR accumulator (stack relative indirect indexed) ($56.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$53		; 54 53 54 ; Move block negative $54,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $11,$11		; 54 11 11 ; Move block negative $11,$11 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora ($17.b),Y		; 11 17 ; OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($14.b),Y		; 11 14 ; OR accumulator with memory ($14.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $11.b,X		; 15 11 ; OR accumulator with memory $11.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $11.b,X		; 15 11 ; OR accumulator with memory $11.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora ($17.b),Y		; 11 17 ; OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $11.b,X		; 16 11 ; Arithmetic shift left $11.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora ($16.b),Y		; 11 16 ; OR accumulator with memory ($16.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $11.b,X		; 15 11 ; OR accumulator with memory $11.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $11.b,X		; 16 11 ; Arithmetic shift left $11.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora [$16.b],Y		; 17 16 ; OR accumulator with memory (long indexed) [$16.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $11.b,X		; 15 11 ; OR accumulator with memory $11.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $42.b		; 46 42 ; Logical shift right $42.b [Reads: Direct Page] [Flags: ZNC]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $42.b		; 46 42 ; Logical shift right $42.b [Reads: Direct Page] [Flags: ZNC]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $48.b		; 45 48 ; Exclusive OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $42,$48		; 44 48 42 ; Move block positive $42,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $42.b		; 46 42 ; Logical shift right $42.b [Reads: Direct Page] [Flags: ZNC]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $42.b		; 46 42 ; Logical shift right $42.b [Reads: Direct Page] [Flags: ZNC]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $46		; 42 46 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: ZNC]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: ZNC]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $46		; 42 46 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $46		; 42 46 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $41		; 42 41 ; Reserved instruction
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($45.b,X)		; 41 45 ; Exclusive OR accumulator with memory ($45.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $48.b		; 45 48 ; Exclusive OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$46		; 44 46 45 ; Move block positive $45,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	mvp $46,$45		; 44 45 46 ; Move block positive $46,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $41.b		; 45 41 ; Exclusive OR $41.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($45.b,X)		; 41 45 ; Exclusive OR accumulator with memory ($45.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$46		; 44 46 45 ; Move block positive $45,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	mvp $46,$45		; 44 45 46 ; Move block positive $46,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $41.b		; 45 41 ; Exclusive OR $41.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $41.b		; 45 41 ; Exclusive OR $41.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$46		; 44 46 45 ; Move block positive $45,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	lsr $44.b		; 46 44 ; Logical shift right $44.b [Reads: Direct Page] [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$46		; 44 46 45 ; Move block positive $45,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	mvp $41,$44		; 44 44 41 ; Move block positive $41,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $45,$46		; 44 46 45 ; Move block positive $45,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $45,$46		; 44 46 45 ; Move block positive $45,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $48.b		; 45 48 ; Exclusive OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$46		; 44 46 45 ; Move block positive $45,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$46		; 44 46 45 ; Move block positive $45,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$46		; 44 46 45 ; Move block positive $45,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$45		; 44 45 44 ; Move block positive $44,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $44.b		; 45 44 ; Exclusive OR $44.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $44.b		; 45 44 ; Exclusive OR $44.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $44.b		; 45 44 ; Exclusive OR $44.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $45,$45		; 44 45 45 ; Move block positive $45,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $45,$45		; 44 45 45 ; Move block positive $45,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$45		; 44 45 44 ; Move block positive $44,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $44.b		; 45 44 ; Exclusive OR $44.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $45,$44		; 44 44 45 ; Move block positive $45,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $44.b		; 45 44 ; Exclusive OR $44.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $45,$45		; 44 45 45 ; Move block positive $45,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $44.b		; 45 44 ; Exclusive OR $44.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$44		; 44 44 45 ; Move block positive $45,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $06.b		; 45 06 ; Exclusive OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	asl $09.b		; 06 09 ; Arithmetic shift left $09.b [Reads: Direct Page] [Flags: ZNC]
	ora #$06.b		; 09 06 ; Logical OR #$06.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	asl $09.b		; 06 09 ; Arithmetic shift left $09.b [Reads: Direct Page] [Flags: ZNC]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	asl $09.b		; 06 09 ; Arithmetic shift left $09.b [Reads: Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $070C.w		; 0D 0C 07 ; Logical OR $070C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0C0C.w		; 0D 0C 0C ; Logical OR $0C0C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0907.w		; 0C 07 09 ; Test and set bits $0907.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $090C.w		; 0C 0C 09 ; Test and set bits $090C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2F2C.w		; 2E 2C 2F ; Rotate left $2F2C.w [Flags: ZNC]
	and $242424.l		; 2F 24 24 24 ; AND accumulator with memory (long) $242424.l [Writes: Accumulator] [Flags: ZN]
	bit $2E.b		; 24 2E ; Test bits $2E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $2F2F.w		; 2C 2F 2F ; Test bits $2F2F.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2F2C.w		; 2E 2C 2F ; Rotate left $2F2C.w [Flags: ZNC]
	rol $2424.w		; 2E 24 24 ; Rotate left $2424.w [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2F2C.w		; 2E 2C 2F ; Rotate left $2F2C.w [Flags: ZNC]
	rol $2424.w		; 2E 24 24 ; Rotate left $2424.w [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2F2C.w		; 2E 2C 2F ; Rotate left $2F2C.w [Flags: ZNC]
	rol $2424.w		; 2E 24 24 ; Rotate left $2424.w [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2F2C.w		; 2E 2C 2F ; Rotate left $2F2C.w [Flags: ZNC]
	rol $2424.w		; 2E 24 24 ; Rotate left $2424.w [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2F2C.w		; 2E 2C 2F ; Rotate left $2F2C.w [Flags: ZNC]
	rol $2424.w		; 2E 24 24 ; Rotate left $2424.w [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2F2C.w		; 2E 2C 2F ; Rotate left $2F2C.w [Flags: ZNC]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $2F2F2F.l		; 2F 2F 2F 2F ; AND accumulator with memory (long) $2F2F2F.l [Writes: Accumulator] [Flags: ZN]
	and $2F2F2F.l		; 2F 2F 2F 2F ; AND accumulator with memory (long) $2F2F2F.l [Writes: Accumulator] [Flags: ZN]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol $2D2E.w		; 2E 2E 2D ; Rotate left $2D2E.w [Flags: ZNC]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $2C2C.w		; 2D 2C 2C ; Logical AND $2C2C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $2C2C.w		; 2C 2C 2C ; Test bits $2C2C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $2C2C.w		; 2C 2C 2C ; Test bits $2C2C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and ($2F.b,X)		; 21 2F ; Logical AND ($2F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $28212E.l		; 2F 2E 21 28 ; AND accumulator with memory (long) $28212E.l [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $21.b		; 24 21 ; Test bits $21.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $2E2C.w		; 2C 2C 2E ; Test bits $2E2C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and ($28.b,X)		; 21 28 ; Logical AND ($28.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2E.b		; 24 2E ; Test bits $2E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($2C.b,X)		; 21 2C ; Logical AND ($2C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2821.w		; 2E 21 28 ; Rotate left $2821.w [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2E.b		; 24 2E ; Test bits $2E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($2C.b,X)		; 21 2C ; Logical AND ($2C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2821.w		; 2E 21 28 ; Rotate left $2821.w [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2E.b		; 24 2E ; Test bits $2E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($2C.b,X)		; 21 2C ; Logical AND ($2C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2821.w		; 2E 21 28 ; Rotate left $2821.w [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2E.b		; 24 2E ; Test bits $2E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($2C.b,X)		; 21 2C ; Logical AND ($2C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2821.w		; 2E 21 28 ; Rotate left $2821.w [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2E.b		; 24 2E ; Test bits $2E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($2C.b,X)		; 21 2C ; Logical AND ($2C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2821.w		; 2E 21 28 ; Rotate left $2821.w [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2E.b		; 24 2E ; Test bits $2E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($2C.b,X)		; 21 2C ; Logical AND ($2C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2821.w		; 2E 21 28 ; Rotate left $2821.w [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $42.b		; 24 42 ; Test bits $42.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	jmp $4D4D.w		; 4C 4D 4D ; Jump to $4D4D.w [Flow: jump]
	eor $42.b,S		; 43 42 ; Exclusive OR accumulator with stack relative $42.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $42, $4E		; 42 4E ; Reserved instruction
	jmp $4D4C.w		; 4C 4C 4D ; Jump to $4D4C.w [Flow: jump]
	eor DMASRC4L.w		; 4D 42 43 ; Exclusive OR DMASRC4L.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4E.b,S		; 43 4E ; Exclusive OR accumulator with stack relative $4E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($4C.b,X)		; 41 4C ; Exclusive OR accumulator with memory ($4C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $414C.w		; 4D 4C 41 ; Exclusive OR $414C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $4C41.w		; 4E 41 4C ; Logical shift right $4C41.w [Flags: ZNC]
	eor $444D.w		; 4D 4D 44 ; Exclusive OR $444D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $4E,$44		; 44 44 4E ; Move block positive $4E,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($4C.b,X)		; 41 4C ; Exclusive OR accumulator with memory ($4C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $444D.w		; 4D 4D 44 ; Exclusive OR $444D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $4E,$44		; 44 44 4E ; Move block positive $4E,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($4C.b,X)		; 41 4C ; Exclusive OR accumulator with memory ($4C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4A4D.w		; 4D 4D 4A ; Exclusive OR $4A4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr $4C41.w		; 4E 41 4C ; Logical shift right $4C41.w [Flags: ZNC]
	eor $494C.w		; 4D 4C 49 ; Exclusive OR $494C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $4C41.w		; 4E 41 4C ; Logical shift right $4C41.w [Flags: ZNC]
	eor $4C4D.w		; 4D 4D 4C ; Exclusive OR $4C4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $424C.w		; 4D 4C 42 ; Exclusive OR $424C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $4C4D.w		; 4D 4D 4C ; Exclusive OR $4C4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $4242.w		; 4E 42 42 ; Logical shift right $4242.w [Flags: ZNC]
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $4C4D.w		; 4D 4D 4C ; Exclusive OR $4C4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr DMASRC4H.w		; 4E 43 43 ; Logical shift right DMASRC4H.w [Flags: ZNC]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $4C4D.w		; 4D 4D 4C ; Exclusive OR $4C4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $4141.w		; 4E 41 41 ; Logical shift right $4141.w [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $4C4D.w		; 4C 4D 4C ; Jump to $4C4D.w [Flow: jump]
	lsr $4141.w		; 4E 41 41 ; Logical shift right $4141.w [Flags: ZNC]
	mvp $4D,$44		; 44 44 4D ; Move block positive $4D,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $4E4C.w		; 4D 4C 4E ; Exclusive OR $4E4C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4D,$44		; 44 44 4D ; Move block positive $4D,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $4E4C.w		; 4D 4C 4E ; Exclusive OR $4E4C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $4C4D.w		; 4D 4D 4C ; Exclusive OR $4C4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $4141.w		; 4E 41 41 ; Logical shift right $4141.w [Flags: ZNC]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp ($6C6D.w)		; 6C 6D 6C ; Jump indirect to ($6C6D.w) [Flow: jump]
	adc $6D6C.w		; 6D 6C 6D ; Add $6D6C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jmp ($6D6D.w)		; 6C 6D 6D ; Jump indirect to ($6D6D.w) [Flow: jump]
	ror $6E6D.w		; 6E 6D 6E ; Rotate right $6E6D.w [Flags: ZNC]
	adc $6D6E.w		; 6D 6E 6D ; Add $6D6E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ror $6E6D.w		; 6E 6D 6E ; Rotate right $6E6D.w [Flags: ZNC]
	adc $6D6E.w		; 6D 6E 6D ; Add $6D6E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ror $6E6D.w		; 6E 6D 6E ; Rotate right $6E6D.w [Flags: ZNC]
	adc $6D6E.w		; 6D 6E 6D ; Add $6D6E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ror $6E6D.w		; 6E 6D 6E ; Rotate right $6E6D.w [Flags: ZNC]
	adc $6D6E.w		; 6D 6E 6D ; Add $6D6E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ror $6E6D.w		; 6E 6D 6E ; Rotate right $6E6D.w [Flags: ZNC]
	adc $6D6E.w		; 6D 6E 6D ; Add $6D6E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ror $6E6D.w		; 6E 6D 6E ; Rotate right $6E6D.w [Flags: ZNC]
	adc $6D6E.w		; 6D 6E 6D ; Add $6D6E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ror $6E6D.w		; 6E 6D 6E ; Rotate right $6E6D.w [Flags: ZNC]
	adc ($66.b,X)		; 61 66 ; Add with carry ($66.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($66.b,X)		; 61 66 ; Add with carry ($66.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($66.b,X)		; 61 66 ; Add with carry ($66.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($66.b,X)		; 61 66 ; Add with carry ($66.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor [$48.b]		; 47 48 ; Exclusive OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $46		; 42 46 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: ZNC]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: ZNC]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $48,$47		; 44 47 48 ; Move block positive $48,$47 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $48,$46		; 44 46 48 ; Move block positive $48,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4A,$44		; 44 44 4A ; Move block positive $4A,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: ZNC]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $49,$41		; 44 41 49 ; Move block positive $49,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$42.b		; 49 42 ; Exclusive OR #$42.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $42.b		; 46 42 ; Logical shift right $42.b [Reads: Direct Page] [Flags: ZNC]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $42.b		; 46 42 ; Logical shift right $42.b [Reads: Direct Page] [Flags: ZNC]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $42.b		; 46 42 ; Logical shift right $42.b [Reads: Direct Page] [Flags: ZNC]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $46		; 42 46 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $46		; 42 46 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $46		; 42 46 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $46		; 42 46 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $46		; 42 46 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $46		; 42 46 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $46		; 42 46 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $45		; 42 45 ; Reserved instruction
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $48.b		; 45 48 ; Exclusive OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $47.b		; 45 47 ; Exclusive OR $47.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$48.b]		; 47 48 ; Exclusive OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $44.b		; 46 44 ; Logical shift right $44.b [Reads: Direct Page] [Flags: ZNC]
	lsr $47.b		; 46 47 ; Logical shift right $47.b [Reads: Direct Page] [Flags: ZNC]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $48,$47		; 44 47 48 ; Move block positive $48,$47 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $48,$47		; 44 47 48 ; Move block positive $48,$47 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $41.b		; 45 41 ; Exclusive OR $41.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$45.b]		; 47 45 ; Exclusive OR accumulator with memory (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$41.b]		; 47 41 ; Exclusive OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$41.b]		; 47 41 ; Exclusive OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$45		; 44 45 45 ; Move block positive $45,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $48.b		; 45 48 ; Exclusive OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$41.b]		; 47 41 ; Exclusive OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$44		; 44 44 45 ; Move block positive $45,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($45.b,X)		; 41 45 ; Exclusive OR accumulator with memory ($45.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$44		; 44 44 45 ; Move block positive $45,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $41.b		; 45 41 ; Exclusive OR $41.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$48.b]		; 47 48 ; Exclusive OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $41.b		; 45 41 ; Exclusive OR $41.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$47		; 44 47 45 ; Move block positive $45,$47 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$45		; 44 45 45 ; Move block positive $45,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	eor $41.b		; 45 41 ; Exclusive OR $41.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $48.b		; 45 48 ; Exclusive OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $48,$46		; 44 46 48 ; Move block positive $48,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$41.b]		; 47 41 ; Exclusive OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $47,$46		; 44 46 47 ; Move block positive $47,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $41,$46		; 44 46 41 ; Move block positive $41,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$46		; 44 46 45 ; Move block positive $45,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $41,$44		; 44 44 41 ; Move block positive $41,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	eor $44.b		; 45 44 ; Exclusive OR $44.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$46		; 44 46 45 ; Move block positive $45,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$46		; 44 46 45 ; Move block positive $45,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$06.b		; 09 06 ; Logical OR #$06.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	ora [$0B.b]		; 07 0B ; OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	ora [$0C.b]		; 07 0C ; OR accumulator with memory (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0B0B.w		; 0C 0B 0B ; Test and set bits $0B0B.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$0C.b]		; 07 0C ; OR accumulator with memory (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$0C.b]		; 07 0C ; OR accumulator with memory (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0B0B.w		; 0C 0B 0B ; Test and set bits $0B0B.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0B0C.w		; 0C 0C 0B ; Test and set bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	and $3939.w,Y		; 39 39 39 ; AND accumulator with memory $3939.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $3839.w,Y		; 39 39 38 ; AND accumulator with memory $3839.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($39.b),Y		; 31 39 ; AND accumulator with memory ($39.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	and $3939.w,Y		; 39 39 39 ; AND accumulator with memory $3939.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	and ($38.b),Y		; 31 38 ; AND accumulator with memory ($38.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $3939.w,Y		; 39 39 39 ; AND accumulator with memory $3939.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $3138.w,Y		; 39 38 31 ; AND accumulator with memory $3138.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $38.b,X		; 34 38 ; Test bits $38.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $3839.w,Y		; 39 39 38 ; AND accumulator with memory $3839.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($38.b),Y		; 31 38 ; AND accumulator with memory ($38.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $3838.w,Y		; 39 38 38 ; AND accumulator with memory $3838.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($38.b),Y		; 31 38 ; AND accumulator with memory ($38.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $39.b,X		; 34 39 ; Test bits $39.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	and ($38.b),Y		; 31 38 ; AND accumulator with memory ($38.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	and ($38.b),Y		; 31 38 ; AND accumulator with memory ($38.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $31.b,X		; 34 31 ; Test bits $31.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2F2C.w		; 2E 2C 2F ; Rotate left $2F2C.w [Flags: ZNC]
	rol $2424.w		; 2E 24 24 ; Rotate left $2424.w [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2F2C.w		; 2E 2C 2F ; Rotate left $2F2C.w [Flags: ZNC]
	bit $2424.w		; 2C 24 24 ; Test bits $2424.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2F2C.w		; 2E 2C 2F ; Rotate left $2F2C.w [Flags: ZNC]
	and $242424.l		; 2F 24 24 24 ; AND accumulator with memory (long) $242424.l [Writes: Accumulator] [Flags: ZN]
	bit $2E.b		; 24 2E ; Test bits $2E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $2424.w		; 2D 24 24 ; Logical AND $2424.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $2C2C.w		; 2C 2C 2C ; Test bits $2C2C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $2424.w		; 2C 24 24 ; Test bits $2424.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	eor $4C4D.w		; 4D 4D 4C ; Exclusive OR $4C4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $4D		; 42 4D ; Reserved instruction
	jmp $424C.w		; 4C 4C 42 ; Jump to $424C.w [Flow: jump]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $4C4D.w		; 4D 4D 4C ; Exclusive OR $4C4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $4D		; 42 4D ; Reserved instruction
	eor $424C.w		; 4D 4C 42 ; Exclusive OR $424C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $4C4D.w		; 4D 4D 4C ; Exclusive OR $4C4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $4C		; 42 4C ; Reserved instruction
	eor $424C.w		; 4D 4C 42 ; Exclusive OR $424C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $4C4D.w		; 4D 4D 4C ; Exclusive OR $4C4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $4D		; 42 4D ; Reserved instruction
	eor $424C.w		; 4D 4C 42 ; Exclusive OR $424C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	rol $2C21.w		; 2E 21 2C ; Rotate left $2C21.w [Flags: ZNC]
	rol $2821.w		; 2E 21 28 ; Rotate left $2821.w [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2C.b		; 24 2C ; Test bits $2C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $2E2C.w		; 2C 2C 2E ; Test bits $2E2C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and ($28.b,X)		; 21 28 ; Logical AND ($28.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2F.b		; 24 2F ; Test bits $2F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $212E2F.l		; 2F 2F 2E 21 ; AND accumulator with memory (long) $212E2F.l [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2E.b		; 24 2E ; Test bits $2E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	and ($28.b,X)		; 21 28 ; Logical AND ($28.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2D.b		; 24 2D ; Test bits $2D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $2C2D.w		; 2D 2D 2C ; Logical AND $2C2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($28.b,X)		; 21 28 ; Logical AND ($28.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2C.b		; 24 2C ; Test bits $2C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $2C2C.w		; 2C 2C 2C ; Test bits $2C2C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and ($28.b,X)		; 21 28 ; Logical AND ($28.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $21.b		; 24 21 ; Test bits $21.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $28.b		; 24 28 ; Test bits $28.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $49.b		; 24 49 ; Test bits $49.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $4C41.w		; 4E 41 4C ; Logical shift right $4C41.w [Flags: ZNC]
	eor $494D.w		; 4D 4D 49 ; Exclusive OR $494D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $4C41.w		; 4E 41 4C ; Logical shift right $4C41.w [Flags: ZNC]
	eor $494C.w		; 4D 4C 49 ; Exclusive OR $494C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $4C41.w		; 4E 41 4C ; Logical shift right $4C41.w [Flags: ZNC]
	eor $494D.w		; 4D 4D 49 ; Exclusive OR $494D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4C41.w		; 4D 41 4C ; Exclusive OR $4C41.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $434D.w		; 4D 4D 43 ; Exclusive OR $434D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $4C41.w		; 4D 41 4C ; Exclusive OR $4C41.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $434D.w		; 4D 4D 43 ; Exclusive OR $434D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $42.b,S		; 43 42 ; Exclusive OR accumulator with stack relative $42.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jmp $4C4C.w		; 4C 4C 4C ; Jump to $4C4C.w [Flow: jump]
	jmp $424C.w		; 4C 4C 42 ; Jump to $424C.w [Flow: jump]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $4D		; 42 4D ; Reserved instruction
	eor $4E4C.w		; 4D 4C 4E ; Exclusive OR $4E4C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $4C4D.w		; 4C 4D 4C ; Jump to $4C4D.w [Flow: jump]
	lsr $4141.w		; 4E 41 41 ; Logical shift right $4141.w [Flags: ZNC]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4C4D.w		; 4D 4D 4C ; Exclusive OR $4C4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $4141.w		; 4E 41 41 ; Logical shift right $4141.w [Flags: ZNC]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4C4D.w		; 4D 4D 4C ; Exclusive OR $4C4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4141.w		; 4D 41 41 ; Exclusive OR $4141.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4C4D.w		; 4D 4D 4C ; Exclusive OR $4C4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4241.w		; 4D 41 42 ; Exclusive OR $4241.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jmp $4C4C.w		; 4C 4C 4C ; Jump to $4C4C.w [Flow: jump]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $42.b,S		; 43 42 ; Exclusive OR accumulator with stack relative $42.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $6C		; 42 6C ; Reserved instruction
	adc ($69.b,X)		; 61 69 ; Add with carry ($69.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$61.b		; 69 61 ; Add #$61.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jmp ($6D6C.w)		; 6C 6C 6D ; Jump indirect to ($6D6C.w) [Flow: jump]
	adc $6961.w		; 6D 61 69 ; Add $6961.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$61.b		; 69 61 ; Add #$61.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ror $6E6D.w		; 6E 6D 6E ; Rotate right $6E6D.w [Flags: ZNC]
	adc $696E.w		; 6D 6E 69 ; Add $696E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$61.b		; 69 61 ; Add #$61.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jmp ($6E6D.w)		; 6C 6D 6E ; Jump indirect to ($6E6D.w) [Flow: jump]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$69.b		; 69 69 ; Add #$69.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $616E.w		; 6D 6E 61 ; Add $616E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$69.b		; 69 69 ; Add #$69.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$61.b		; 69 61 ; Add #$61.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc ($6D.b,X)		; 61 6D ; Add with carry ($6D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $6E6D.w		; 6E 6D 6E ; Rotate right $6E6D.w [Flags: ZNC]
	adc #$69.b		; 69 69 ; Add #$69.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc ($6E.b,X)		; 61 6E ; Add with carry ($6E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $616E.w		; 6D 6E 61 ; Add $616E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc ($69.b,X)		; 61 69 ; Add with carry ($69.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$61.b		; 69 61 ; Add #$61.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ror $61.b		; 66 61 ; Rotate right $61.b [Reads: Direct Page] [Flags: ZNC]
	ror $61.b		; 66 61 ; Rotate right $61.b [Reads: Direct Page] [Flags: ZNC]
	adc #$69.b		; 69 69 ; Add #$69.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$61.b		; 69 61 ; Add #$61.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($15.b,X)		; 61 15 ; Add with carry ($15.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $15.b,X		; 16 15 ; Arithmetic shift left $15.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($18.b),Y		; 11 18 ; OR accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $15.b,X		; 16 15 ; Arithmetic shift left $15.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $11.b,X		; 15 11 ; OR accumulator with memory $11.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$15.b],Y		; 17 15 ; OR accumulator with memory (long indexed) [$15.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $15.b,X		; 16 15 ; Arithmetic shift left $15.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $11.b,X		; 15 11 ; OR accumulator with memory $11.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $11.b,X		; 16 11 ; Arithmetic shift left $11.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $11.b,X		; 15 11 ; OR accumulator with memory $11.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $11.b,X		; 15 11 ; OR accumulator with memory $11.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $15.b,X		; 16 15 ; Arithmetic shift left $15.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $11.b,X		; 15 11 ; OR accumulator with memory $11.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $15.b,X		; 16 15 ; Arithmetic shift left $15.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $11.b,X		; 15 11 ; OR accumulator with memory $11.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $16.b,X		; 15 16 ; OR accumulator with memory $16.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $15.b,X		; 16 15 ; Arithmetic shift left $15.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $11.b,X		; 15 11 ; OR accumulator with memory $11.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $42.b		; 46 42 ; Logical shift right $42.b [Reads: Direct Page] [Flags: ZNC]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $48,$45		; 44 45 48 ; Move block positive $48,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $42,$45		; 44 45 42 ; Move block positive $42,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $42,$42		; 44 42 42 ; Move block positive $42,$42 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: ZNC]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $48		; 42 48 ; Reserved instruction
	eor $41.b		; 45 41 ; Exclusive OR $41.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $45		; 42 45 ; Reserved instruction
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $44		; 42 44 ; Reserved instruction
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $44.b		; 45 44 ; Exclusive OR $44.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $44.b		; 45 44 ; Exclusive OR $44.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $44.b		; 46 44 ; Logical shift right $44.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$45.b]		; 47 45 ; Exclusive OR accumulator with memory (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $44.b		; 46 44 ; Logical shift right $44.b [Reads: Direct Page] [Flags: ZNC]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $47,$44		; 44 44 47 ; Move block positive $47,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$41.b]		; 47 41 ; Exclusive OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($42.b,X)		; 41 42 ; Exclusive OR accumulator with memory ($42.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $44		; 42 44 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $42,$42		; 44 42 42 ; Move block positive $42,$42 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $42,$42		; 44 42 42 ; Move block positive $42,$42 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $42,$42		; 44 42 42 ; Move block positive $42,$42 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $42,$42		; 44 42 42 ; Move block positive $42,$42 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $42,$42		; 44 42 42 ; Move block positive $42,$42 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $42,$42		; 44 42 42 ; Move block positive $42,$42 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $42,$42		; 44 42 42 ; Move block positive $42,$42 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: ZNC]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: ZNC]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor $464B4B.l		; 4F 4B 4B 46 ; Exclusive OR accumulator with memory (long) $464B4B.l [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $48464F.l		; 4F 4F 46 48 ; Exclusive OR accumulator with memory (long) $48464F.l [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: ZNC]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$44		; 44 44 46 ; Move block positive $46,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $222222.l		; 22 22 22 22 ; Jump to subroutine long $222222.l [Writes: Stack Pointer] [Flow: call]
	jsl $222222.l		; 22 22 22 22 ; Jump to subroutine long $222222.l [Writes: Stack Pointer] [Flow: call]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvn $53,$54		; 54 54 53 ; Move block negative $53,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($51.b,S),Y		; 53 51 ; XOR accumulator (stack relative indirect indexed) ($51.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($54.b),Y		; 51 54 ; Exclusive OR accumulator with memory ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $59,$53		; 54 53 59 ; Move block negative $59,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($5D.b),Y		; 51 5D ; Exclusive OR accumulator with memory ($5D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5451.w,X		; 5D 51 54 ; Exclusive OR accumulator with memory $5451.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$53		; 54 53 54 ; Move block negative $54,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $545D.w,X		; 5D 5D 54 ; Exclusive OR accumulator with memory $545D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$59		; 54 59 54 ; Move block negative $54,$59 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $51,$51		; 54 51 51 ; Move block negative $51,$51 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	jmp $545454.l		; 5C 54 54 54 ; Jump long to $545454.l [Flow: jump]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $53,$54		; 54 54 53 ; Move block negative $53,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $53,$54		; 54 54 53 ; Move block negative $53,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($54.b,S),Y		; 53 54 ; XOR accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $5959.w,Y		; 59 59 59 ; Exclusive OR accumulator with memory $5959.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5454.w,Y		; 59 54 54 ; Exclusive OR accumulator with memory $5454.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $53,$54		; 54 54 53 ; Move block negative $53,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($54.b,S),Y		; 53 54 ; XOR accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $51,$51		; 54 51 51 ; Move block negative $51,$51 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $5959.w,Y		; 59 59 59 ; Exclusive OR accumulator with memory $5959.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($54.b,S),Y		; 53 54 ; XOR accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $51,$5C		; 54 5C 51 ; Move block negative $51,$5C [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($54.b,S),Y		; 53 54 ; XOR accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $51,$51		; 54 51 51 ; Move block negative $51,$51 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $5454.w,Y		; 59 54 54 ; Exclusive OR accumulator with memory $5454.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b),Y		; 51 53 ; Exclusive OR accumulator with memory ($53.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($54.b),Y		; 51 54 ; Exclusive OR accumulator with memory ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($54.b,S),Y		; 53 54 ; XOR accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $59,$59		; 54 59 59 ; Move block negative $59,$59 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $5459.w,Y		; 59 59 54 ; Exclusive OR accumulator with memory $5459.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $21,$21		; 54 21 21 ; Move block negative $21,$21 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol $2E2D.w		; 2E 2D 2E ; Rotate left $2E2D.w [Flags: ZNC]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($2E.b,X)		; 21 2E ; Logical AND ($2E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2D2E.w		; 2E 2E 2D ; Rotate left $2D2E.w [Flags: ZNC]
	rol $2F2F.w		; 2E 2F 2F ; Rotate left $2F2F.w [Flags: ZNC]
	and $2D2D2D.l		; 2F 2D 2D 2D ; AND accumulator with memory (long) $2D2D2D.l [Writes: Accumulator] [Flags: ZN]
	and $2F2E.w		; 2D 2E 2F ; Logical AND $2F2E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $21212E.l		; 2F 2E 21 21 ; AND accumulator with memory (long) $21212E.l [Writes: Accumulator] [Flags: ZN]
	and ($2C.b,X)		; 21 2C ; Logical AND ($2C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol CGADD.w		; 2E 21 21 ; Rotate left CGADD.w [Flags: ZNC]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($2C.b,X)		; 21 2C ; Logical AND ($2C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $2121.w		; 2C 21 21 ; Test bits $2121.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($2D.b,X)		; 21 2D ; Logical AND ($2D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $212C.w		; 2D 2C 21 ; Logical AND $212C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol TMW.w		; 2E 2E 21 ; Rotate left TMW.w [Flags: ZNC]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($2F.b,X)		; 21 2F ; Logical AND ($2F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $2F2F2F.l		; 2F 2F 2F 2F ; AND accumulator with memory (long) $2F2F2F.l [Writes: Accumulator] [Flags: ZN]
	and $2F2F2F.l		; 2F 2F 2F 2F ; AND accumulator with memory (long) $2F2F2F.l [Writes: Accumulator] [Flags: ZN]
	and $2F2F2F.l		; 2F 2F 2F 2F ; AND accumulator with memory (long) $2F2F2F.l [Writes: Accumulator] [Flags: ZN]
	and $2E2F2F.l		; 2F 2F 2F 2E ; AND accumulator with memory (long) $2E2F2F.l [Writes: Accumulator] [Flags: ZN]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol $2D2D.w		; 2E 2D 2D ; Rotate left $2D2D.w [Flags: ZNC]
	and $2121.w		; 2D 21 21 ; Logical AND $2121.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $424242.l		; 4F 42 42 42 ; Exclusive OR accumulator with memory (long) $424242.l [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $4B4242.l		; 4F 42 42 4B ; Exclusive OR accumulator with memory (long) $4B4242.l [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $42,$42		; 44 42 42 ; Move block positive $42,$42 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $4B		; 42 4B ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $42,$48		; 44 48 42 ; Move block positive $42,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $4B		; 42 4B ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $15.b,X		; 16 15 ; Arithmetic shift left $15.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $11.b,X		; 15 11 ; OR accumulator with memory $11.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $15.b,X		; 16 15 ; Arithmetic shift left $15.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $11.b,X		; 16 11 ; Arithmetic shift left $11.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $11.b,X		; 15 11 ; OR accumulator with memory $11.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $17.b,X		; 16 17 ; Arithmetic shift left $17.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $11.b,X		; 16 11 ; Arithmetic shift left $11.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $11.b,X		; 15 11 ; OR accumulator with memory $11.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $11.b,X		; 15 11 ; OR accumulator with memory $11.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $11.b,X		; 16 11 ; Arithmetic shift left $11.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $11.b,X		; 16 11 ; Arithmetic shift left $11.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b,S),Y		; 33 31 ; AND accumulator (stack relative indirect indexed) ($31.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $313C.w,X		; 3D 3C 31 ; AND accumulator with memory $313C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b,S),Y		; 33 31 ; AND accumulator (stack relative indirect indexed) ($31.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $313F.w,X		; 3D 3F 31 ; AND accumulator with memory $313F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $3331.w,X		; 3C 31 33 ; Test bits $3331.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and ($3F.b),Y		; 31 3F ; AND accumulator with memory ($3F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $313F.w,X		; 3D 3F 31 ; AND accumulator with memory $313F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $333E.w,X		; 3C 3E 33 ; Test bits $333E.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and ($3F.b),Y		; 31 3F ; AND accumulator with memory ($3F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $313C3C.l,X		; 3F 3C 3C 31 ; AND accumulator with memory (long,X) $313C3C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $0C0C.w,X		; 3E 0C 0C ; Rotate left $0C0C.w,X [Reads: X Index] [Flags: ZNC]
	tsb $0B0C.w		; 0C 0C 0B ; Test and set bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0C.b,S		; 03 0C ; OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $0A0B.w		; 0C 0B 0A ; Test and set bits $0A0B.w [Reads: Accumulator] [Flags: Z]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $0A0B.w		; 0C 0B 0A ; Test and set bits $0A0B.w [Reads: Accumulator] [Flags: Z]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $0B.b		; 04 0B ; Test and set bits $0B.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $09.b		; 04 09 ; Test and set bits $09.b [Reads: Accumulator] [Flags: Z]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $34.b		; 04 34 ; Test and set bits $34.b [Reads: Accumulator] [Flags: Z]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $33.b,X		; 35 33 ; Logical AND $33.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $01.b,X		; 34 01 ; Test bits $01.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0103.w		; 0C 03 01 ; Test and set bits $0103.w [Reads: Accumulator] [Flags: Z]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $040C.w		; 0C 0C 04 ; Test and set bits $040C.w [Reads: Accumulator] [Flags: Z]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0404.w		; 0C 04 04 ; Test and set bits $0404.w [Reads: Accumulator] [Flags: Z]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: ZNC]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $46		; 42 46 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: ZNC]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor ($42.b,X)		; 41 42 ; Exclusive OR accumulator with memory ($42.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $48		; 42 48 ; Reserved instruction
	eor ($42.b,X)		; 41 42 ; Exclusive OR accumulator with memory ($42.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $48.b,S		; 43 48 ; Exclusive OR accumulator with stack relative $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($42.b,X)		; 41 42 ; Exclusive OR accumulator with memory ($42.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $43		; 42 43 ; Reserved instruction
	.db $42, $48		; 42 48 ; Reserved instruction
	eor ($42.b,X)		; 41 42 ; Exclusive OR accumulator with memory ($42.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $42.b,S		; 43 42 ; Exclusive OR accumulator with stack relative $42.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($42.b,X)		; 41 42 ; Exclusive OR accumulator with memory ($42.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $43		; 42 43 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $41.b,S		; 43 41 ; Exclusive OR accumulator with stack relative $41.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $41.b,S		; 43 41 ; Exclusive OR accumulator with stack relative $41.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $42,$48		; 44 48 42 ; Move block positive $42,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4C.b,X)		; 41 4C ; Exclusive OR accumulator with memory ($4C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $4541.w		; 4C 41 45 ; Jump to $4541.w [Flow: jump]
	eor $48.b		; 45 48 ; Exclusive OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4C.b,X)		; 41 4C ; Exclusive OR accumulator with memory ($4C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $4741.w		; 4C 41 47 ; Jump to $4741.w [Flow: jump]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $47,$44		; 44 44 47 ; Move block positive $47,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$41.b]		; 47 41 ; Exclusive OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $414C.w		; 4C 4C 41 ; Jump to $414C.w [Flow: jump]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4C.b,X)		; 41 4C ; Exclusive OR accumulator with memory ($4C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $4141.w		; 4C 41 41 ; Jump to $4141.w [Flow: jump]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$41.b]		; 47 41 ; Exclusive OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$42.b]		; 47 42 ; Exclusive OR accumulator with memory (long) [$42.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$4A.b		; 49 4A ; Exclusive OR #$4A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$4C.b		; 49 4C ; Exclusive OR #$4C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4A4D.w		; 4D 4D 4A ; Exclusive OR $4A4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$4C.b		; 49 4C ; Exclusive OR #$4C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4B4E.w		; 4D 4E 4B ; Exclusive OR $4B4E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $4E4D.w		; 4C 4D 4E ; Jump to $4E4D.w [Flow: jump]
	.db $42, $4B		; 42 4B ; Reserved instruction
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jmp $4C4D.w		; 4C 4D 4C ; Jump to $4C4D.w [Flow: jump]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $42, $4B		; 42 4B ; Reserved instruction
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor $4241.w		; 4D 41 42 ; Exclusive OR $4241.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: ZNC]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $46		; 42 46 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $46		; 42 46 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $46		; 42 46 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $46		; 42 46 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $45		; 42 45 ; Reserved instruction
	eor $48.b		; 45 48 ; Exclusive OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $41.b		; 45 41 ; Exclusive OR $41.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($45.b,X)		; 41 45 ; Exclusive OR accumulator with memory ($45.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $44.b		; 46 44 ; Logical shift right $44.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $2E		; 42 2E ; Reserved instruction
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($2E.b,X)		; 21 2E ; Logical AND ($2E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $2E2E.w		; 2D 2E 2E ; Logical AND $2E2E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $2F2F.w		; 2E 2F 2F ; Rotate left $2F2F.w [Flags: ZNC]
	and $2E2D2E.l		; 2F 2E 2D 2E ; AND accumulator with memory (long) $2E2D2E.l [Writes: Accumulator] [Flags: ZN]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	and $2D2E2F.l		; 2F 2F 2E 2D ; AND accumulator with memory (long) $2D2E2F.l [Writes: Accumulator] [Flags: ZN]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol TMAIN.w		; 2E 2C 21 ; Rotate left TMAIN.w [Flags: ZNC]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($2D.b,X)		; 21 2D ; Logical AND ($2D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $212D.w		; 2D 2D 21 ; Logical AND $212D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $212C.w		; 2C 2C 21 ; Test bits $212C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $2D2D.w		; 2C 2D 2D ; Test bits $2D2D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $2F2F2F.l		; 2F 2F 2F 2F ; AND accumulator with memory (long) $2F2F2F.l [Writes: Accumulator] [Flags: ZN]
	and $2F2F2F.l		; 2F 2F 2F 2F ; AND accumulator with memory (long) $2F2F2F.l [Writes: Accumulator] [Flags: ZN]
	and $2F2F2F.l		; 2F 2F 2F 2F ; AND accumulator with memory (long) $2F2F2F.l [Writes: Accumulator] [Flags: ZN]
	and $2F2F2F.l		; 2F 2F 2F 2F ; AND accumulator with memory (long) $2F2F2F.l [Writes: Accumulator] [Flags: ZN]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol TMW.w		; 2E 2E 21 ; Rotate left TMW.w [Flags: ZNC]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $2C2C.w		; 2C 2C 2C ; Test bits $2C2C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $2C2C.w		; 2C 2C 2C ; Test bits $2C2C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($28.b,X)		; 21 28 ; Logical AND ($28.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $42.b		; 24 42 ; Test bits $42.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $4F		; 42 4F ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $424242.l		; 4F 42 42 42 ; Exclusive OR accumulator with memory (long) $424242.l [Writes: Accumulator] [Flags: ZN]
	.db $42, $41		; 42 41 ; Reserved instruction
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $44		; 42 44 ; Reserved instruction
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	mvp $41,$44		; 44 44 41 ; Move block positive $41,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $45		; 42 45 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	and $3B3B3E.l,X		; 3F 3E 3B 3B ; AND accumulator with memory (long,X) $3B3B3E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $3B3B3E.l,X		; 3F 3E 3B 3B ; AND accumulator with memory (long,X) $3B3B3E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $3B3B3E.l,X		; 3F 3E 3B 3B ; AND accumulator with memory (long,X) $3B3B3E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $3B3B3E.l,X		; 3F 3E 3B 3B ; AND accumulator with memory (long,X) $3B3B3E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $3B3B3E.l,X		; 3F 3E 3B 3B ; AND accumulator with memory (long,X) $3B3B3E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and ($3F.b),Y		; 31 3F ; AND accumulator with memory ($3F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $3F3F3F.l,X		; 3F 3F 3F 3F ; AND accumulator with memory (long,X) $3F3F3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $3F313A.l,X		; 3F 3A 31 3F ; AND accumulator with memory (long,X) $3F313A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $313A.w,X		; 3E 3A 31 ; Rotate left $313A.w,X [Reads: X Index] [Flags: ZNC]
	and $31313F.l,X		; 3F 3F 31 31 ; AND accumulator with memory (long,X) $31313F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $3A3E.w,X		; 3E 3E 3A ; Rotate left $3A3E.w,X [Reads: X Index] [Flags: ZNC]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($3A.b),Y		; 31 3A ; AND accumulator with memory ($3A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $3B3B31.l,X		; 3F 31 3B 3B ; AND accumulator with memory (long,X) $3B3B31.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $3F3F3B.l,X		; 3F 3B 3F 3F ; AND accumulator with memory (long,X) $3F3F3B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($3B.b),Y		; 31 3B ; AND accumulator with memory ($3B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $313B3F.l,X		; 3F 3F 3B 31 ; AND accumulator with memory (long,X) $313B3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $32.b,X		; 35 32 ; Logical AND $32.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $21.b		; 24 21 ; Test bits $21.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($2A.b,X)		; 21 2A ; Logical AND ($2A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($2A.b,X)		; 21 2A ; Logical AND ($2A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $21.b		; 24 21 ; Test bits $21.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsl $2A2121.l		; 22 21 21 2A ; Jump to subroutine long $2A2121.l [Writes: Stack Pointer] [Flow: call]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $262A21.l		; 22 21 2A 26 ; Jump to subroutine long $262A21.l [Writes: Stack Pointer] [Flow: call]
	and ($2E.b,X)		; 21 2E ; Logical AND ($2E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2221.w		; 2E 21 22 ; Rotate left $2221.w [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $262721.l		; 22 21 27 26 ; Jump to subroutine long $262721.l [Writes: Stack Pointer] [Flow: call]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and ($2E.b,X)		; 21 2E ; Logical AND ($2E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2621.w		; 2E 21 26 ; Rotate left $2621.w [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $21.b		; 26 21 ; Rotate left $21.b [Reads: Direct Page] [Flags: ZNC]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($26.b,X)		; 21 26 ; Logical AND ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $45.b		; 26 45 ; Rotate left $45.b [Reads: Direct Page] [Flags: ZNC]
	eor $47.b		; 45 47 ; Exclusive OR $47.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$45.b]		; 47 45 ; Exclusive OR accumulator with memory (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $47.b		; 46 47 ; Logical shift right $47.b [Reads: Direct Page] [Flags: ZNC]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor $47.b		; 45 47 ; Exclusive OR $47.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$45.b]		; 47 45 ; Exclusive OR accumulator with memory (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	eor $47.b		; 45 47 ; Exclusive OR $47.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor $47.b		; 45 47 ; Exclusive OR $47.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$45.b]		; 47 45 ; Exclusive OR accumulator with memory (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$45.b]		; 47 45 ; Exclusive OR accumulator with memory (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $47.b		; 45 47 ; Exclusive OR $47.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$45.b]		; 47 45 ; Exclusive OR accumulator with memory (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $49.b		; 45 49 ; Exclusive OR $49.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $42.b		; 46 42 ; Logical shift right $42.b [Reads: Direct Page] [Flags: ZNC]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $4D		; 42 4D ; Reserved instruction
	eor $4D4D.w		; 4D 4D 4D ; Exclusive OR $4D4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4D4D.w		; 4D 4D 4D ; Exclusive OR $4D4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4D4D.w		; 4D 4D 4D ; Exclusive OR $4D4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4D4D.w		; 4D 4D 4D ; Exclusive OR $4D4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4D47.w		; 4D 47 4D ; Exclusive OR $4D47.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $4C4C.w		; 4C 4C 4C ; Jump to $4C4C.w [Flow: jump]
	jmp $4C4C.w		; 4C 4C 4C ; Jump to $4C4C.w [Flow: jump]
	jmp $4C4C.w		; 4C 4C 4C ; Jump to $4C4C.w [Flow: jump]
	eor $474D.w		; 4D 4D 47 ; Exclusive OR $474D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4D4D.w		; 4D 4D 4D ; Exclusive OR $4D4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $4D4C.w		; 4C 4C 4D ; Jump to $4D4C.w [Flow: jump]
	eor $4D4D.w		; 4D 4D 4D ; Exclusive OR $4D4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4C4D.w		; 4D 4D 4C ; Exclusive OR $4C4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $4D4D.w		; 4C 4D 4D ; Jump to $4D4D.w [Flow: jump]
	eor $474D.w		; 4D 4D 47 ; Exclusive OR $474D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4C4C.w		; 4D 4C 4C ; Exclusive OR $4C4C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4D4D.w		; 4D 4D 4D ; Exclusive OR $4D4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4D4D.w		; 4D 4D 4D ; Exclusive OR $4D4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $4D4C.w		; 4C 4C 4D ; Jump to $4D4C.w [Flow: jump]
	eor [$4D.b]		; 47 4D ; Exclusive OR accumulator with memory (long) [$4D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4D4D.w		; 4D 4D 4D ; Exclusive OR $4D4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $4D4C.w		; 4C 4C 4D ; Jump to $4D4C.w [Flow: jump]
	eor $4D4D.w		; 4D 4D 4D ; Exclusive OR $4D4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4C47.w		; 4D 47 4C ; Exclusive OR $4C47.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $4C4C.w		; 4C 4C 4C ; Jump to $4C4C.w [Flow: jump]
	jmp $4C4C.w		; 4C 4C 4C ; Jump to $4C4C.w [Flow: jump]
	jmp $244C.w		; 4C 4C 24 ; Jump to $244C.w [Flow: jump]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $21.b		; 25 21 ; Logical AND $21.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $222222.l		; 22 22 22 22 ; Jump to subroutine long $222222.l [Writes: Stack Pointer] [Flow: call]
	jsl $272222.l		; 22 22 22 27 ; Jump to subroutine long $272222.l [Writes: Stack Pointer] [Flow: call]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$26.b]		; 27 26 ; AND accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $25.b		; 26 25 ; Rotate left $25.b [Reads: Direct Page] [Flags: ZNC]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $26.b		; 25 26 ; Logical AND $26.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $24.b		; 26 24 ; Rotate left $24.b [Reads: Direct Page] [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $2E.b		; 24 2E ; Test bits $2E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	and $2D2E.w		; 2D 2E 2D ; Logical AND $2D2E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $212D.w		; 2D 2D 21 ; Logical AND $212D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($2E.b,X)		; 21 2E ; Logical AND ($2E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $212F2F.l		; 2F 2F 2F 21 ; AND accumulator with memory (long) $212F2F.l [Writes: Accumulator] [Flags: ZN]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol $2F2F.w		; 2E 2F 2F ; Rotate left $2F2F.w [Flags: ZNC]
	and $2C2121.l		; 2F 21 21 2C ; AND accumulator with memory (long) $2C2121.l [Writes: Accumulator] [Flags: ZN]
	bit $2E2C.w		; 2C 2C 2E ; Test bits $2E2C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $212D.w		; 2C 2D 21 ; Test bits $212D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol $2C2E.w		; 2E 2E 2C ; Rotate left $2C2E.w [Flags: ZNC]
	and $2D21.w		; 2D 21 2D ; Logical AND $2D21.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $212D.w		; 2D 2D 21 ; Logical AND $212D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($2E.b,X)		; 21 2E ; Logical AND ($2E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $2E2D.w		; 2E 2D 2E ; Rotate left $2E2D.w [Flags: ZNC]
	rol $2D2E.w		; 2E 2E 2D ; Rotate left $2D2E.w [Flags: ZNC]
	and $2E2D.w		; 2D 2D 2E ; Logical AND $2E2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol $2F21.w		; 2E 21 2F ; Rotate left $2F21.w [Flags: ZNC]
	and $2C2C2F.l		; 2F 2F 2C 2C ; AND accumulator with memory (long) $2C2C2F.l [Writes: Accumulator] [Flags: ZN]
	bit $2121.w		; 2C 21 21 ; Test bits $2121.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $212F2F.l		; 2F 2F 2F 21 ; AND accumulator with memory (long) $212F2F.l [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($2E.b,X)		; 21 2E ; Logical AND ($2E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol TMW.w		; 2E 2E 21 ; Rotate left TMW.w [Flags: ZNC]
	and $212C.w		; 2D 2C 21 ; Logical AND $212C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($2D.b,X)		; 21 2D ; Logical AND ($2D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $212D.w		; 2D 2D 21 ; Logical AND $212D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $422C.w		; 2D 2C 42 ; Logical AND $422C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $4E4E.w		; 4E 4E 4E ; Logical shift right $4E4E.w [Flags: ZNC]
	lsr $4E4E.w		; 4E 4E 4E ; Logical shift right $4E4E.w [Flags: ZNC]
	lsr $4E41.w		; 4E 41 4E ; Logical shift right $4E41.w [Flags: ZNC]
	eor $4D4D.w		; 4D 4D 4D ; Exclusive OR $4D4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4D4D.w		; 4D 4D 4D ; Exclusive OR $4D4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $42.b		; 46 42 ; Logical shift right $42.b [Reads: Direct Page] [Flags: ZNC]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $42.b		; 46 42 ; Logical shift right $42.b [Reads: Direct Page] [Flags: ZNC]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($45.b,X)		; 41 45 ; Exclusive OR accumulator with memory ($45.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $4E4E.w		; 4E 4E 4E ; Logical shift right $4E4E.w [Flags: ZNC]
	eor ($48.b,X)		; 41 48 ; Exclusive OR accumulator with memory ($48.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4D.b		; 45 4D ; Exclusive OR $4D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $414E.w		; 4D 4E 41 ; Exclusive OR $414E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$45.b]		; 47 45 ; Exclusive OR accumulator with memory (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $49.b		; 45 49 ; Exclusive OR $49.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $49.b		; 45 49 ; Exclusive OR $49.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $49.b		; 45 49 ; Exclusive OR $49.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $49.b		; 45 49 ; Exclusive OR $49.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b)		; 32 34 ; AND accumulator with memory (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b)		; 32 34 ; AND accumulator with memory (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b)		; 32 34 ; AND accumulator with memory (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b)		; 32 34 ; AND accumulator with memory (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b)		; 32 34 ; AND accumulator with memory (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b)		; 32 34 ; AND accumulator with memory (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b)		; 32 34 ; AND accumulator with memory (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $33.b,X		; 35 33 ; Logical AND $33.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $32.b,X		; 35 32 ; Logical AND $32.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $32.b,X		; 35 32 ; Logical AND $32.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $32.b,X		; 35 32 ; Logical AND $32.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $32.b,X		; 35 32 ; Logical AND $32.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $32.b,X		; 35 32 ; Logical AND $32.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $32.b,X		; 35 32 ; Logical AND $32.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $32.b,X		; 35 32 ; Logical AND $32.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($35.b,S),Y		; 33 35 ; AND accumulator (stack relative indirect indexed) ($35.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b)		; 32 33 ; AND accumulator with memory (indirect) ($33.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b)		; 32 33 ; AND accumulator with memory (indirect) ($33.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b)		; 32 33 ; AND accumulator with memory (indirect) ($33.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b)		; 32 33 ; AND accumulator with memory (indirect) ($33.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and ($24.b,X)		; 21 24 ; Logical AND ($24.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	jsl $252421.l		; 22 21 24 25 ; Jump to subroutine long $252421.l [Writes: Stack Pointer] [Flow: call]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	jsl $242122.l		; 22 22 21 24 ; Jump to subroutine long $242122.l [Writes: Stack Pointer] [Flow: call]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	jsl $212122.l		; 22 22 21 21 ; Jump to subroutine long $212122.l [Writes: Stack Pointer] [Flow: call]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and [$22.b]		; 27 22 ; AND accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($2E.b,X)		; 21 2E ; Logical AND ($2E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2621.w		; 2E 21 26 ; Rotate left $2621.w [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and [$21.b]		; 27 21 ; AND accumulator with memory (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $262122.l		; 22 22 21 26 ; Jump to subroutine long $262122.l [Writes: Stack Pointer] [Flow: call]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $21.b		; 26 21 ; Rotate left $21.b [Reads: Direct Page] [Flags: ZNC]
	rol TMW.w		; 2E 2E 21 ; Rotate left TMW.w [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $2E2122.l		; 22 22 21 2E ; Jump to subroutine long $2E2122.l [Writes: Stack Pointer] [Flow: call]
	rol $2221.w		; 2E 21 22 ; Rotate left $2221.w [Flags: ZNC]
	jsl $212222.l		; 22 22 22 21 ; Jump to subroutine long $212222.l [Writes: Stack Pointer] [Flow: call]
	jsl $222122.l		; 22 22 21 22 ; Jump to subroutine long $222122.l [Writes: Stack Pointer] [Flow: call]
	jsl $212727.l		; 22 27 27 21 ; Jump to subroutine long $212727.l [Writes: Stack Pointer] [Flow: call]
	rol TMW.w		; 2E 2E 21 ; Rotate left TMW.w [Flags: ZNC]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $44.b		; 46 44 ; Logical shift right $44.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $45.b		; 46 45 ; Logical shift right $45.b [Reads: Direct Page] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $11.b		; 14 11 ; Test and reset bits $11.b [Reads: Accumulator] [Flags: Z]
	ora ($17.b),Y		; 11 17 ; OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $11.b,X		; 15 11 ; OR accumulator with memory $11.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora ($17.b),Y		; 11 17 ; OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora ($17.b),Y		; 11 17 ; OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora ($16.b),Y		; 11 16 ; OR accumulator with memory ($16.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($17.b),Y		; 11 17 ; OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora ($16.b),Y		; 11 16 ; OR accumulator with memory ($16.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($16.b),Y		; 11 16 ; OR accumulator with memory ($16.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $11.b,X		; 16 11 ; Arithmetic shift left $11.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $16.b,X		; 15 16 ; OR accumulator with memory $16.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $17.b,X		; 16 17 ; Arithmetic shift left $17.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $16.b,X		; 15 16 ; OR accumulator with memory $16.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$15.b],Y		; 17 15 ; OR accumulator with memory (long indexed) [$15.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $16.b,X		; 15 16 ; OR accumulator with memory $16.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $16.b,X		; 15 16 ; OR accumulator with memory $16.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($16.b),Y		; 11 16 ; OR accumulator with memory ($16.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$16.b],Y		; 17 16 ; OR accumulator with memory (long indexed) [$16.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora [$15.b],Y		; 17 15 ; OR accumulator with memory (long indexed) [$15.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $16.b,X		; 15 16 ; OR accumulator with memory $16.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($17.b),Y		; 11 17 ; OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $16.b,X		; 15 16 ; OR accumulator with memory $16.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($17.b),Y		; 11 17 ; OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $16.b,X		; 15 16 ; OR accumulator with memory $16.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$16.b],Y		; 17 16 ; OR accumulator with memory (long indexed) [$16.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($17.b),Y		; 11 17 ; OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $16.b,X		; 15 16 ; OR accumulator with memory $16.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($17.b),Y		; 11 17 ; OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $16.b,X		; 15 16 ; OR accumulator with memory $16.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($17.b),Y		; 11 17 ; OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($16.b),Y		; 11 16 ; OR accumulator with memory ($16.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($17.b),Y		; 11 17 ; OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($17.b),Y		; 11 17 ; OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$16.b],Y		; 17 16 ; OR accumulator with memory (long indexed) [$16.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($16.b),Y		; 11 16 ; OR accumulator with memory ($16.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($16.b),Y		; 11 16 ; OR accumulator with memory ($16.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($17.b),Y		; 11 17 ; OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($17.b),Y		; 11 17 ; OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($17.b),Y		; 11 17 ; OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($16.b),Y		; 11 16 ; OR accumulator with memory ($16.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $21212F.l		; 2F 2F 21 21 ; AND accumulator with memory (long) $21212F.l [Writes: Accumulator] [Flags: ZN]
	and $212D.w		; 2D 2D 21 ; Logical AND $212D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($2F.b,X)		; 21 2F ; Logical AND ($2F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $2F2F2F.l		; 2F 2F 2F 2F ; AND accumulator with memory (long) $2F2F2F.l [Writes: Accumulator] [Flags: ZN]
	and $2E2F2F.l		; 2F 2F 2F 2E ; AND accumulator with memory (long) $2E2F2F.l [Writes: Accumulator] [Flags: ZN]
	rol $2F2F.w		; 2E 2F 2F ; Rotate left $2F2F.w [Flags: ZNC]
	and $2F2F2F.l		; 2F 2F 2F 2F ; AND accumulator with memory (long) $2F2F2F.l [Writes: Accumulator] [Flags: ZN]
	and $2F2E.w		; 2D 2E 2F ; Logical AND $2F2E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $2E2F2F.l		; 2F 2F 2F 2E ; AND accumulator with memory (long) $2E2F2F.l [Writes: Accumulator] [Flags: ZN]
	rol $2E2C.w		; 2E 2C 2E ; Rotate left $2E2C.w [Flags: ZNC]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	bit $2D2D.w		; 2C 2D 2D ; Test bits $2D2D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $2D2D.w		; 2C 2D 2D ; Test bits $2D2D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $212D.w		; 2D 2D 21 ; Logical AND $212D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($2F.b,X)		; 21 2F ; Logical AND ($2F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $2F2F2F.l		; 2F 2F 2F 2F ; AND accumulator with memory (long) $2F2F2F.l [Writes: Accumulator] [Flags: ZN]
	and $2F2F2F.l		; 2F 2F 2F 2F ; AND accumulator with memory (long) $2F2F2F.l [Writes: Accumulator] [Flags: ZN]
	and $2F2F2F.l		; 2F 2F 2F 2F ; AND accumulator with memory (long) $2F2F2F.l [Writes: Accumulator] [Flags: ZN]
	and $2E2F2F.l		; 2F 2F 2F 2E ; AND accumulator with memory (long) $2E2F2F.l [Writes: Accumulator] [Flags: ZN]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	and $2F2F2F.l		; 2F 2F 2F 2F ; AND accumulator with memory (long) $2F2F2F.l [Writes: Accumulator] [Flags: ZN]
	rol $2E2D.w		; 2E 2D 2E ; Rotate left $2E2D.w [Flags: ZNC]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	rol $2E2E.w		; 2E 2E 2E ; Rotate left $2E2E.w [Flags: ZNC]
	bit $2121.w		; 2C 21 21 ; Test bits $2121.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $2C2D.w		; 2D 2D 2C ; Logical AND $2C2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $2D2D.w		; 2D 2D 2D ; Logical AND $2D2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $2C2D.w		; 2D 2D 2C ; Logical AND $2C2D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $4C.b		; 46 4C ; Logical shift right $4C.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $47,$44		; 44 44 47 ; Move block positive $47,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$41.b]		; 47 41 ; Exclusive OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($45.b,X)		; 41 45 ; Exclusive OR accumulator with memory ($45.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4D.b		; 45 4D ; Exclusive OR $4D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $4E4E.w		; 4E 4E 4E ; Logical shift right $4E4E.w [Flags: ZNC]
	lsr $4C4E.w		; 4E 4E 4C ; Logical shift right $4C4E.w [Flags: ZNC]
	.db $42, $4C		; 42 4C ; Reserved instruction
	jmp $4241.w		; 4C 41 42 ; Jump to $4241.w [Flow: jump]
	.db $42, $4C		; 42 4C ; Reserved instruction
	eor ($42.b,X)		; 41 42 ; Exclusive OR accumulator with memory ($42.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $414D.w		; 4C 4D 41 ; Jump to $414D.w [Flow: jump]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4141.w		; 4D 41 41 ; Exclusive OR $4141.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $4E4E.w		; 4D 4E 4E ; Exclusive OR $4E4E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $4E4E.w		; 4E 4E 4E ; Logical shift right $4E4E.w [Flags: ZNC]
	jmp $4C42.w		; 4C 42 4C ; Jump to $4C42.w [Flow: jump]
	jmp $4241.w		; 4C 41 42 ; Jump to $4241.w [Flow: jump]
	.db $42, $4C		; 42 4C ; Reserved instruction
	eor ($42.b,X)		; 41 42 ; Exclusive OR accumulator with memory ($42.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $414D.w		; 4C 4D 41 ; Jump to $414D.w [Flow: jump]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $4141.w		; 4E 41 41 ; Logical shift right $4141.w [Flags: ZNC]
	eor $48.b		; 45 48 ; Exclusive OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $49,$41		; 44 41 49 ; Move block positive $49,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$45.b		; 49 45 ; Exclusive OR #$45.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $49,$41		; 44 41 49 ; Move block positive $49,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$45.b		; 49 45 ; Exclusive OR #$45.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $49,$41		; 44 41 49 ; Move block positive $49,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$45.b		; 49 45 ; Exclusive OR #$45.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $49,$41		; 44 41 49 ; Move block positive $49,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$45.b		; 49 45 ; Exclusive OR #$45.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $49,$41		; 44 41 49 ; Move block positive $49,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$45.b		; 49 45 ; Exclusive OR #$45.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $49,$41		; 44 41 49 ; Move block positive $49,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$45.b		; 49 45 ; Exclusive OR #$45.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $49,$41		; 44 41 49 ; Move block positive $49,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$45.b		; 49 45 ; Exclusive OR #$45.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $49,$41		; 44 41 49 ; Move block positive $49,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$34.b		; 49 34 ; Exclusive OR #$34.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $38.b,X		; 35 38 ; Logical AND $38.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($34.b),Y		; 31 34 ; AND accumulator with memory ($34.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $38.b,X		; 35 38 ; Logical AND $38.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $3534.w,Y		; 39 34 35 ; AND accumulator with memory $3534.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $3232.w,Y		; 39 32 32 ; AND accumulator with memory $3232.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $3534.w,Y		; 39 34 35 ; AND accumulator with memory $3534.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $3534.w,Y		; 39 34 35 ; AND accumulator with memory $3534.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $3133.w,Y		; 39 33 31 ; AND accumulator with memory $3133.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and ($39.b),Y		; 31 39 ; AND accumulator with memory ($39.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $3A31.w,Y		; 39 31 3A ; AND accumulator with memory $3A31.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($39.b),Y		; 31 39 ; AND accumulator with memory ($39.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor ($5C.b),Y		; 51 5C ; Exclusive OR accumulator with memory ($5C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5D5D.w,X		; 5D 5D 5D ; Exclusive OR accumulator with memory $5D5D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $5B5D.w,X		; 5D 5D 5B ; Exclusive OR accumulator with memory $5B5D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5C.b),Y		; 51 5C ; Exclusive OR accumulator with memory ($5C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5D5C.w,X		; 5D 5C 5D ; Exclusive OR accumulator with memory $5D5C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $5B5D.w,X		; 5D 5D 5B ; Exclusive OR accumulator with memory $5B5D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5C.b),Y		; 51 5C ; Exclusive OR accumulator with memory ($5C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $5C5C51.l		; 5C 51 5C 5C ; Jump long to $5C5C51.l [Flow: jump]
	jmp $51515B.l		; 5C 5B 51 51 ; Jump long to $51515B.l [Flow: jump]
	eor ($58.b),Y		; 51 58 ; Exclusive OR accumulator with memory ($58.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($56.b),Y		; 51 56 ; Exclusive OR accumulator with memory ($56.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $56.b,X		; 56 56 ; Logical shift right $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lsr $56.b,X		; 56 56 ; Logical shift right $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lsr $56.b,X		; 56 56 ; Logical shift right $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lsr $58.b,X		; 56 58 ; Logical shift right $58.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($36.b),Y		; 31 36 ; AND accumulator with memory ($36.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $36.b,X		; 36 36 ; Rotate left $36.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($36.b),Y		; 31 36 ; AND accumulator with memory ($36.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $36.b,X		; 36 36 ; Rotate left $36.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b,S),Y		; 33 31 ; AND accumulator (stack relative indirect indexed) ($31.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $36.b,X		; 36 36 ; Rotate left $36.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and [$36.b],Y		; 37 36 ; AND accumulator with memory (long indexed) [$36.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($36.b),Y		; 31 36 ; AND accumulator with memory ($36.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $37.b,X		; 36 37 ; Rotate left $37.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and [$36.b],Y		; 37 36 ; AND accumulator with memory (long indexed) [$36.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $64.b,S		; 63 64 ; Add with carry (stack relative) $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $63, $62		; 62 63 62 ; Push effective relative address $62, $63, $62 [Writes: Stack Pointer]
	adc $64.b,S		; 63 64 ; Add with carry (stack relative) $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b		; 65 63 ; Add $63.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $61, $62		; 62 61 62 ; Push effective relative address $62, $61, $62 [Writes: Stack Pointer]
	.db $62, $63, $64		; 62 63 64 ; Push effective relative address $62, $63, $64 [Writes: Stack Pointer]
	adc $63.b		; 65 63 ; Add $63.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $63, $64		; 62 63 64 ; Push effective relative address $62, $63, $64 [Writes: Stack Pointer]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $61, $63		; 62 61 63 ; Push effective relative address $62, $61, $63 [Writes: Stack Pointer]
	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	.db $62, $62, $61		; 62 62 61 ; Push effective relative address $62, $62, $61 [Writes: Stack Pointer]
	adc ($63.b,X)		; 61 63 ; Add with carry ($63.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $61		; 62 62 61 ; Push effective relative address $62, $62, $61 [Writes: Stack Pointer]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $65.b,S		; 63 65 ; Add with carry (stack relative) $65.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $63.b		; 64 63 ; Store zero to $63.b
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	.db $62, $6B, $6B		; 62 6B 6B ; Push effective relative address $62, $6B, $6B [Writes: Stack Pointer]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $61, $6B		; 62 61 6B ; Push effective relative address $62, $61, $6B [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $65.b,S		; 63 65 ; Add with carry (stack relative) $65.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $63.b		; 64 63 ; Store zero to $63.b
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($6B.b,X)		; 61 6B ; Add with carry ($6B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($6B.b,X)		; 61 6B ; Add with carry ($6B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $65.b,S		; 63 65 ; Add with carry (stack relative) $65.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $63.b		; 64 63 ; Store zero to $63.b
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	.db $62, $6B, $6B		; 62 6B 6B ; Push effective relative address $62, $6B, $6B [Writes: Stack Pointer]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $61, $6B		; 62 61 6B ; Push effective relative address $62, $61, $6B [Writes: Stack Pointer]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($6B.b,X)		; 61 6B ; Add with carry ($6B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$44.b		; 49 44 ; Exclusive OR #$44.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $49.b		; 45 49 ; Exclusive OR $49.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $44,$47		; 44 47 44 ; Move block positive $44,$47 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$48.b]		; 47 48 ; Exclusive OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$44.b		; 49 44 ; Exclusive OR #$44.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $49,$47		; 44 47 49 ; Move block positive $49,$47 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $47,$47		; 44 47 47 ; Move block positive $47,$47 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$4A.b		; 49 4A ; Exclusive OR #$4A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $47,$47		; 44 47 47 ; Move block positive $47,$47 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$49.b]		; 47 49 ; Exclusive OR accumulator with memory (long) [$49.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$4A.b		; 49 4A ; Exclusive OR #$4A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $47,$47		; 44 47 47 ; Move block positive $47,$47 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$4A.b		; 49 4A ; Exclusive OR #$4A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $49,$44		; 44 44 49 ; Move block positive $49,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$4A.b		; 49 4A ; Exclusive OR #$4A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $48.b		; 45 48 ; Exclusive OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $49,$41		; 44 41 49 ; Move block positive $49,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$48.b		; 49 48 ; Exclusive OR #$48.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$41.b]		; 47 41 ; Exclusive OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$44		; 44 44 41 ; Move block positive $41,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$41.b]		; 47 41 ; Exclusive OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $44.b		; 45 44 ; Exclusive OR $44.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $44.b		; 45 44 ; Exclusive OR $44.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$4B.b		; 49 4B ; Exclusive OR #$4B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $41		; 42 41 ; Reserved instruction
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $41,$44		; 44 44 41 ; Move block positive $41,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$48.b		; 49 48 ; Exclusive OR #$48.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$47.b		; 49 47 ; Exclusive OR #$47.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$48.b]		; 47 48 ; Exclusive OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $49,$41		; 44 41 49 ; Move block positive $49,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$45.b		; 49 45 ; Exclusive OR #$45.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $49,$41		; 44 41 49 ; Move block positive $49,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$45.b		; 49 45 ; Exclusive OR #$45.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $49,$41		; 44 41 49 ; Move block positive $49,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$42.b		; 49 42 ; Exclusive OR #$42.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $43		; 42 43 ; Reserved instruction
	eor $49.b,S		; 43 49 ; Exclusive OR accumulator with stack relative $49.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$42.b		; 49 42 ; Exclusive OR #$42.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($42.b,X)		; 41 42 ; Exclusive OR accumulator with memory ($42.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $41.b,S		; 43 41 ; Exclusive OR accumulator with stack relative $41.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $47,$44		; 44 44 47 ; Move block positive $47,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$41.b]		; 47 41 ; Exclusive OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($42.b,X)		; 41 42 ; Exclusive OR accumulator with memory ($42.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $42.b,S		; 43 42 ; Exclusive OR accumulator with stack relative $42.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $42.b		; 45 42 ; Exclusive OR $42.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $48,$48		; 44 48 48 ; Move block positive $48,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $48,$48		; 44 48 48 ; Move block positive $48,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$41.b]		; 47 41 ; Exclusive OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$41.b]		; 47 41 ; Exclusive OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$47		; 44 47 44 ; Move block positive $44,$47 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $45,$45		; 44 45 45 ; Move block positive $45,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $45,$45		; 44 45 45 ; Move block positive $45,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($42.b,X)		; 41 42 ; Exclusive OR accumulator with memory ($42.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $31		; 42 31 ; Reserved instruction
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $3A.b,X		; 35 3A ; Logical AND $3A.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $3B.b,X		; 34 3B ; Test bits $3B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $3B.b,X		; 35 3B ; Logical AND $3B.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $3B.b,X		; 34 3B ; Test bits $3B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and ($42.b),Y		; 31 42 ; AND accumulator with memory ($42.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $31		; 42 31 ; Reserved instruction
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $33.b,X		; 35 33 ; Logical AND $33.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($31.b,S),Y		; 33 31 ; AND accumulator (stack relative indirect indexed) ($31.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($31.b,S),Y		; 33 31 ; AND accumulator (stack relative indirect indexed) ($31.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($31.b,S),Y		; 33 31 ; AND accumulator (stack relative indirect indexed) ($31.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b),Y		; 31 34 ; AND accumulator with memory ($34.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $32.b,X		; 34 32 ; Test bits $32.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $31.b,X		; 34 31 ; Test bits $31.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $31.b,X		; 34 31 ; Test bits $31.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $3D.b,X		; 35 3D ; Logical AND $3D.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $3C.b,X		; 34 3C ; Test bits $3C.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $3331.w,X		; 3D 31 33 ; AND accumulator with memory $3331.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $3D3C.w,X		; 3C 3C 3D ; Test bits $3D3C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $3C.b,X		; 35 3C ; Logical AND $3C.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $3D3C.w,X		; 3C 3C 3D ; Test bits $3D3C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $3C3C.w,X		; 3C 3C 3C ; Test bits $3C3C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	bit $313D.w,X		; 3C 3D 31 ; Test bits $313D.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $3C3C.w,X		; 3C 3C 3C ; Test bits $3C3C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	bit $3D3C.w,X		; 3C 3C 3D ; Test bits $3D3C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $3C3C.w,X		; 3C 3C 3C ; Test bits $3C3C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	bit $3C3C.w,X		; 3C 3C 3C ; Test bits $3C3C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $3131.w,X		; 3D 31 31 ; AND accumulator with memory $3131.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $36.b,X		; 35 36 ; Logical AND $36.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $36.b,X		; 34 36 ; Test bits $36.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol $31.b,X		; 36 31 ; Rotate left $31.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $37.b,X		; 34 37 ; Test bits $37.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol $36.b,X		; 36 36 ; Rotate left $36.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $37.b,X		; 35 37 ; Logical AND $37.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$36.b],Y		; 37 36 ; AND accumulator with memory (long indexed) [$36.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $31.b,X		; 36 31 ; Rotate left $31.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $37.b,X		; 35 37 ; Logical AND $37.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$37.b],Y		; 37 37 ; AND accumulator with memory (long indexed) [$37.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $36.b,X		; 36 36 ; Rotate left $36.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $37.b,X		; 34 37 ; Test bits $37.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and [$37.b],Y		; 37 37 ; AND accumulator with memory (long indexed) [$37.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$36.b],Y		; 37 36 ; AND accumulator with memory (long indexed) [$36.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $31.b,X		; 36 31 ; Rotate left $31.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and ($37.b,S),Y		; 33 37 ; AND accumulator (stack relative indirect indexed) ($37.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$37.b],Y		; 37 37 ; AND accumulator with memory (long indexed) [$37.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$37.b],Y		; 37 37 ; AND accumulator with memory (long indexed) [$37.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $36.b,X		; 36 36 ; Rotate left $36.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and ($54.b),Y		; 31 54 ; AND accumulator with memory ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($55.b,S),Y		; 53 55 ; XOR accumulator (stack relative indirect indexed) ($55.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $53,$53		; 54 53 53 ; Move block negative $53,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $53,$52		; 54 52 53 ; Move block negative $53,$52 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $53.b,X		; 55 53 ; Exclusive OR accumulator with memory $53.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b)		; 52 53 ; Exclusive OR accumulator with memory (indirect) ($53.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $53,$52		; 54 52 53 ; Move block negative $53,$52 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b)		; 52 53 ; Exclusive OR accumulator with memory (indirect) ($53.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($55.b,S),Y		; 53 55 ; XOR accumulator (stack relative indirect indexed) ($55.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($52.b,S),Y		; 53 52 ; XOR accumulator (stack relative indirect indexed) ($52.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b)		; 52 53 ; Exclusive OR accumulator with memory (indirect) ($53.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($54.b,S),Y		; 53 54 ; XOR accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b)		; 52 53 ; Exclusive OR accumulator with memory (indirect) ($53.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvn $53,$53		; 54 53 53 ; Move block negative $53,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($52.b,S),Y		; 53 52 ; XOR accumulator (stack relative indirect indexed) ($52.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($52.b,S),Y		; 53 52 ; XOR accumulator (stack relative indirect indexed) ($52.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $34,$54		; 54 54 34 ; Move block negative $34,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $3334.w,X		; 3D 34 33 ; AND accumulator with memory $3334.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $343C.w,X		; 3D 3C 34 ; AND accumulator with memory $343C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b)		; 32 31 ; AND accumulator with memory (indirect) ($31.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $3C3C.w,X		; 3D 3C 3C ; AND accumulator with memory $3C3C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $3C3C.w,X		; 3D 3C 3C ; AND accumulator with memory $3C3C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $3233.w,X		; 3C 33 32 ; Test bits $3233.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and ($3D.b),Y		; 31 3D ; AND accumulator with memory ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $3C3C.w,X		; 3C 3C 3C ; Test bits $3C3C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	bit $3133.w,X		; 3C 33 31 ; Test bits $3133.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $3C3C.w,X		; 3D 3C 3C ; AND accumulator with memory $3C3C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $3C3C.w,X		; 3C 3C 3C ; Test bits $3C3C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and ($3D.b),Y		; 31 3D ; AND accumulator with memory ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $3C3C.w,X		; 3C 3C 3C ; Test bits $3C3C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	bit $3C3C.w,X		; 3C 3C 3C ; Test bits $3C3C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	eor ($42.b,X)		; 41 42 ; Exclusive OR accumulator with memory ($42.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $41.b		; 45 41 ; Exclusive OR $41.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($42.b,X)		; 41 42 ; Exclusive OR accumulator with memory ($42.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $41.b		; 45 41 ; Exclusive OR $41.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($48.b,X)		; 41 48 ; Exclusive OR accumulator with memory ($48.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $41.b		; 45 41 ; Exclusive OR $41.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $49.b		; 45 49 ; Exclusive OR $49.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $45,$47		; 44 47 45 ; Move block positive $45,$47 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$49.b]		; 47 49 ; Exclusive OR accumulator with memory (long) [$49.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$45.b]		; 47 45 ; Exclusive OR accumulator with memory (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$49.b]		; 47 49 ; Exclusive OR accumulator with memory (long) [$49.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $47,$47		; 44 47 47 ; Move block positive $47,$47 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $48.b		; 45 48 ; Exclusive OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$4A.b		; 49 4A ; Exclusive OR #$4A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$45.b]		; 47 45 ; Exclusive OR accumulator with memory (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$4A.b		; 49 4A ; Exclusive OR #$4A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $47.b		; 45 47 ; Exclusive OR $47.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($43.b,X)		; 41 43 ; Exclusive OR accumulator with memory ($43.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $47,$44		; 44 44 47 ; Move block positive $47,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$49.b]		; 47 49 ; Exclusive OR accumulator with memory (long) [$49.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $42.b,S		; 43 42 ; Exclusive OR accumulator with stack relative $42.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $42, $44		; 42 44 ; Reserved instruction
	mvp $49,$49		; 44 49 49 ; Move block positive $49,$49 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($43.b,X)		; 41 43 ; Exclusive OR accumulator with memory ($43.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor [$48.b]		; 47 48 ; Exclusive OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$48.b]		; 47 48 ; Exclusive OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$48.b		; 49 48 ; Exclusive OR #$48.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$44		; 44 44 41 ; Move block positive $41,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($4A.b,X)		; 41 4A ; Exclusive OR accumulator with memory ($4A.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$46.b		; 49 46 ; Exclusive OR #$46.b with accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $41,$44		; 44 44 41 ; Move block positive $41,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$46.b		; 49 46 ; Exclusive OR #$46.b with accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $41		; 42 41 ; Reserved instruction
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $41.b,S		; 43 41 ; Exclusive OR accumulator with stack relative $41.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $41.b,S		; 43 41 ; Exclusive OR accumulator with stack relative $41.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5B.b),Y		; 51 5B ; Exclusive OR accumulator with memory ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor ($5C.b),Y		; 51 5C ; Exclusive OR accumulator with memory ($5C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5D5D.w,X		; 5D 5D 5D ; Exclusive OR accumulator with memory $5D5D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp $515B51.l		; 5C 51 5B 51 ; Jump long to $515B51.l [Flow: jump]
	jmp $5D5D5D.l		; 5C 5D 5D 5D ; Jump long to $5D5D5D.l [Flow: jump]
	jmp $515B51.l		; 5C 51 5B 51 ; Jump long to $515B51.l [Flow: jump]
	jmp $5C515C.l		; 5C 5C 51 5C ; Jump long to $5C515C.l [Flow: jump]
	jmp $515B51.l		; 5C 51 5B 51 ; Jump long to $515B51.l [Flow: jump]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $5151.w,X		; 5E 51 51 ; Logical shift right $5151.w,X [Reads: X Index] [Flags: ZNC]
	eor ($5B.b),Y		; 51 5B ; Exclusive OR accumulator with memory ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($52.b)		; 52 52 ; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b)		; 52 51 ; Exclusive OR accumulator with memory (indirect) ($51.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $515E.w,X		; 5E 5E 51 ; Logical shift right $515E.w,X [Reads: X Index] [Flags: ZNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($52.b)		; 52 52 ; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5B.b),Y		; 51 5B ; Exclusive OR accumulator with memory ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($52.b,S),Y		; 53 52 ; XOR accumulator (stack relative indirect indexed) ($52.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b)		; 52 51 ; Exclusive OR accumulator with memory (indirect) ($51.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($5B.b),Y		; 51 5B ; Exclusive OR accumulator with memory ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $51,$5B		; 54 5B 51 ; Move block negative $51,$5B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $5C,$51		; 54 51 5C ; Move block negative $5C,$51 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $545D.w,X		; 5D 5D 54 ; Exclusive OR accumulator with memory $545D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($5C.b),Y		; 51 5C ; Exclusive OR accumulator with memory ($5C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $545D.w,X		; 5D 5D 54 ; Exclusive OR accumulator with memory $545D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$53		; 54 53 54 ; Move block negative $54,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($5C.b),Y		; 51 5C ; Exclusive OR accumulator with memory ($5C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $545451.l		; 5C 51 54 54 ; Jump long to $545451.l [Flow: jump]
	mvn $51,$54		; 54 54 51 ; Move block negative $51,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $5454.w,X		; 5E 54 54 ; Logical shift right $5454.w,X [Reads: X Index] [Flags: ZNC]
	mvn $51,$54		; 54 54 51 ; Move block negative $51,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $565E.w,X		; 5E 5E 56 ; Logical shift right $565E.w,X [Reads: X Index] [Flags: ZNC]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $51,$51		; 54 51 51 ; Move block negative $51,$51 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $5B,$5B		; 54 5B 5B ; Move block negative $5B,$5B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $515C.w,X		; 5D 5C 51 ; Exclusive OR accumulator with memory $515C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $515C.w,X		; 5D 5C 51 ; Exclusive OR accumulator with memory $515C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	jmp $5B515C.l		; 5C 5C 51 5B ; Jump long to $5B515C.l [Flow: jump]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5B.b),Y		; 51 5B ; Exclusive OR accumulator with memory ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $515E.w,X		; 5E 5E 51 ; Logical shift right $515E.w,X [Reads: X Index] [Flags: ZNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	mvn $53,$54		; 54 54 53 ; Move block negative $53,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5B.b),Y		; 51 5B ; Exclusive OR accumulator with memory ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$24.b		; 49 24 ; Exclusive OR #$24.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $27.b		; 24 27 ; Test bits $27.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and [$26.b]		; 27 26 ; AND accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and [$26.b]		; 27 26 ; AND accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and [$26.b]		; 27 26 ; AND accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $27.b		; 26 27 ; Rotate left $27.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and [$24.b]		; 27 24 ; AND accumulator with memory (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $54.b		; 24 54 ; Test bits $54.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	mvn $57,$53		; 54 53 57 ; Move block negative $57,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$53.b],Y		; 57 53 ; Exclusive OR accumulator with memory (long indexed) [$53.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $57,$53		; 54 53 57 ; Move block negative $57,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$53.b],Y		; 57 53 ; Exclusive OR accumulator with memory (long indexed) [$53.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $57,$53		; 54 53 57 ; Move block negative $57,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$53.b],Y		; 57 53 ; Exclusive OR accumulator with memory (long indexed) [$53.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $57,$53		; 54 53 57 ; Move block negative $57,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$53.b],Y		; 57 53 ; Exclusive OR accumulator with memory (long indexed) [$53.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $57,$53		; 54 53 57 ; Move block negative $57,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$53.b],Y		; 57 53 ; Exclusive OR accumulator with memory (long indexed) [$53.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $57,$53		; 54 53 57 ; Move block negative $57,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$53.b],Y		; 57 53 ; Exclusive OR accumulator with memory (long indexed) [$53.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $57,$53		; 54 53 57 ; Move block negative $57,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$53.b],Y		; 57 53 ; Exclusive OR accumulator with memory (long indexed) [$53.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $57,$53		; 54 53 57 ; Move block negative $57,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$53.b],Y		; 57 53 ; Exclusive OR accumulator with memory (long indexed) [$53.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $42,$54		; 54 54 42 ; Move block negative $42,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $4F		; 42 4F ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$48.b]		; 47 48 ; Exclusive OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $42,$47		; 44 47 42 ; Move block positive $42,$47 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $474142.l		; 4F 42 41 47 ; Exclusive OR accumulator with memory (long) $474142.l [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $474142.l		; 4F 42 41 47 ; Exclusive OR accumulator with memory (long) $474142.l [Writes: Accumulator] [Flags: ZN]
	eor [$48.b]		; 47 48 ; Exclusive OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$44		; 44 44 41 ; Move block positive $41,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $414142.l		; 4F 42 41 41 ; Exclusive OR accumulator with memory (long) $414142.l [Writes: Accumulator] [Flags: ZN]
	eor $48.b		; 45 48 ; Exclusive OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $454242.l		; 4F 42 42 45 ; Exclusive OR accumulator with memory (long) $454242.l [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $48,$45		; 44 45 48 ; Move block positive $48,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$41.b]		; 47 41 ; Exclusive OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $47,$45		; 44 45 47 ; Move block positive $47,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $41,$45		; 44 45 41 ; Move block positive $41,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$44		; 44 44 45 ; Move block positive $45,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $41,$44		; 44 44 41 ; Move block positive $41,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$41		; 44 41 45 ; Move block positive $45,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $41,$44		; 44 44 41 ; Move block positive $41,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$41		; 44 41 44 ; Move block positive $44,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $44.b		; 45 44 ; Exclusive OR $44.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $54.b		; 45 54 ; Exclusive OR $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvn $57,$53		; 54 53 57 ; Move block negative $57,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$53.b],Y		; 57 53 ; Exclusive OR accumulator with memory (long indexed) [$53.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($57.b,S),Y		; 53 57 ; XOR accumulator (stack relative indirect indexed) ($57.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$53.b],Y		; 57 53 ; Exclusive OR accumulator with memory (long indexed) [$53.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $57,$53		; 54 53 57 ; Move block negative $57,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$53.b],Y		; 57 53 ; Exclusive OR accumulator with memory (long indexed) [$53.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $49,$49		; 54 49 49 ; Move block negative $49,$49 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $4B.b		; 46 4B ; Logical shift right $4B.b [Reads: Direct Page] [Flags: ZNC]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $4B.b		; 46 4B ; Logical shift right $4B.b [Reads: Direct Page] [Flags: ZNC]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $47,$4B		; 44 4B 47 ; Move block positive $47,$4B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $49.b		; 46 49 ; Logical shift right $49.b [Reads: Direct Page] [Flags: ZNC]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $47,$4B		; 44 4B 47 ; Move block positive $47,$4B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $49.b		; 46 49 ; Logical shift right $49.b [Reads: Direct Page] [Flags: ZNC]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $4B.b		; 46 4B ; Logical shift right $4B.b [Reads: Direct Page] [Flags: ZNC]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $48,$48		; 44 48 48 ; Move block positive $48,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $44.b		; 45 44 ; Exclusive OR $44.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$46		; 44 46 44 ; Move block positive $44,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $47,$47		; 44 47 47 ; Move block positive $47,$47 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$41		; 44 41 44 ; Move block positive $44,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$41		; 44 41 44 ; Move block positive $44,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$41.b]		; 47 41 ; Exclusive OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $48,$48		; 44 48 48 ; Move block positive $48,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $44.b		; 45 44 ; Exclusive OR $44.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$46		; 44 46 44 ; Move block positive $44,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $47,$47		; 44 47 47 ; Move block positive $47,$47 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$41.b]		; 47 41 ; Exclusive OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor [$48.b]		; 47 48 ; Exclusive OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$46		; 44 46 46 ; Move block positive $46,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$46		; 44 46 46 ; Move block positive $46,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$46		; 44 46 46 ; Move block positive $46,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $47,$45		; 44 45 47 ; Move block positive $47,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $47,$45		; 44 45 47 ; Move block positive $47,$45 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$46		; 44 46 46 ; Move block positive $46,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$46		; 44 46 46 ; Move block positive $46,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$46		; 44 46 41 ; Move block positive $41,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $4D4D.w		; 4E 4D 4D ; Logical shift right $4D4D.w [Flags: ZNC]
	eor $4D4D.w		; 4D 4D 4D ; Exclusive OR $4D4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4E41.w		; 4D 41 4E ; Exclusive OR $4E41.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $4E4E.w		; 4E 4E 4E ; Logical shift right $4E4E.w [Flags: ZNC]
	lsr $4E4E.w		; 4E 4E 4E ; Logical shift right $4E4E.w [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4D.b,X)		; 41 4D ; Exclusive OR accumulator with memory ($4D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4D4D.w		; 4D 4D 4D ; Exclusive OR $4D4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4D41.w		; 4D 41 4D ; Exclusive OR $4D41.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $4141.w		; 4C 41 41 ; Jump to $4141.w [Flow: jump]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4D.b,X)		; 41 4D ; Exclusive OR accumulator with memory ($4D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4646.w		; 4D 46 46 ; Exclusive OR $4646.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor $4141.w		; 4D 41 41 ; Exclusive OR $4141.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4646.w		; 4D 46 46 ; Exclusive OR $4646.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4E4D.w		; 4D 4D 4E ; Exclusive OR $4E4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $4E.b		; 46 4E ; Logical shift right $4E.b [Reads: Direct Page] [Flags: ZNC]
	lsr $414E.w		; 4E 4E 41 ; Logical shift right $414E.w [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4D4D.w		; 4D 4D 4D ; Exclusive OR $4D4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$48.b]		; 47 48 ; Exclusive OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor $414D.w		; 4D 4D 41 ; Exclusive OR $414D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $48,$44		; 44 44 48 ; Move block positive $48,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	rol $21.b		; 26 21 ; Rotate left $21.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $21.b		; 26 21 ; Rotate left $21.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and [$26.b]		; 27 26 ; AND accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($26.b,X)		; 21 26 ; Logical AND ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$26.b]		; 27 26 ; AND accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $27.b		; 26 27 ; Rotate left $27.b [Reads: Direct Page] [Flags: ZNC]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and ($27.b,X)		; 21 27 ; Logical AND ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $27.b		; 26 27 ; Rotate left $27.b [Reads: Direct Page] [Flags: ZNC]
	rol $27.b		; 26 27 ; Rotate left $27.b [Reads: Direct Page] [Flags: ZNC]
	and ($26.b,X)		; 21 26 ; Logical AND ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($26.b,X)		; 21 26 ; Logical AND ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($26.b,X)		; 21 26 ; Logical AND ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($26.b,X)		; 21 26 ; Logical AND ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($26.b,X)		; 21 26 ; Logical AND ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$21.b]		; 27 21 ; AND accumulator with memory (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$21.b]		; 27 21 ; AND accumulator with memory (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$21.b]		; 27 21 ; AND accumulator with memory (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($27.b,X)		; 21 27 ; Logical AND ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $27.b		; 26 27 ; Rotate left $27.b [Reads: Direct Page] [Flags: ZNC]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$26.b]		; 27 26 ; AND accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($6B.b,X)		; 61 6B ; Add with carry ($6B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($6E.b,X)		; 61 6E ; Add with carry ($6E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $6E6E.w		; 6E 6E 6E ; Rotate right $6E6E.w [Flags: ZNC]
	ror $6B61.w		; 6E 61 6B ; Rotate right $6B61.w [Flags: ZNC]
	adc ($6E.b,X)		; 61 6E ; Add with carry ($6E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	ror $6E.b		; 66 6E ; Rotate right $6E.b [Reads: Direct Page] [Flags: ZNC]
	adc ($6B.b,X)		; 61 6B ; Add with carry ($6B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($6E.b,X)		; 61 6E ; Add with carry ($6E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $6E6E.w		; 6E 6E 6E ; Rotate right $6E6E.w [Flags: ZNC]
	ror $6B61.w		; 6E 61 6B ; Rotate right $6B61.w [Flags: ZNC]
	adc ($66.b,X)		; 61 66 ; Add with carry ($66.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $61.b		; 66 61 ; Rotate right $61.b [Reads: Direct Page] [Flags: ZNC]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	adc ($6B.b,X)		; 61 6B ; Add with carry ($6B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	.db $62, $62, $63		; 62 62 63 ; Push effective relative address $62, $62, $63 [Writes: Stack Pointer]
	adc $62.b,S		; [PATTERN: Memory clearing operation] 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $64.b,S		; 63 64 ; Add with carry (stack relative) $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $63.b		; 64 63 ; Store zero to $63.b
	adc $64.b,S		; 63 64 ; Add with carry (stack relative) $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $63.b		; 64 63 ; Store zero to $63.b
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor $4141.w		; 4D 41 41 ; Exclusive OR $4141.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $414C.w		; 4C 4C 41 ; Jump to $414C.w [Flow: jump]
	eor ($4D.b,X)		; 41 4D ; Exclusive OR accumulator with memory ($4D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4D.b,X)		; 41 4D ; Exclusive OR accumulator with memory ($4D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $4E4E.w		; 4C 4E 4E ; Jump to $4E4E.w [Flow: jump]
	jmp $414D.w		; 4C 4D 41 ; Jump to $414D.w [Flow: jump]
	eor ($4C.b,X)		; 41 4C ; Exclusive OR accumulator with memory ($4C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $4D4D.w		; 4C 4D 4D ; Jump to $4D4D.w [Flow: jump]
	jmp $414C.w		; 4C 4C 41 ; Jump to $414C.w [Flow: jump]
	eor ($4D.b,X)		; 41 4D ; Exclusive OR accumulator with memory ($4D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $4C4C.w		; 4C 4C 4C ; Jump to $4C4C.w [Flow: jump]
	jmp $414D.w		; 4C 4D 41 ; Jump to $414D.w [Flow: jump]
	eor ($4C.b,X)		; 41 4C ; Exclusive OR accumulator with memory ($4C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4141.w		; 4D 41 41 ; Exclusive OR $4141.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $414C.w		; 4D 4C 41 ; Exclusive OR $414C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($4C.b,X)		; 41 4C ; Exclusive OR accumulator with memory ($4C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4C.b,X)		; 41 4C ; Exclusive OR accumulator with memory ($4C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $4C41.w		; 4C 41 4C ; Jump to $4C41.w [Flow: jump]
	eor ($42.b,X)		; 41 42 ; Exclusive OR accumulator with memory ($42.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $414C.w		; 4C 4C 41 ; Jump to $414C.w [Flow: jump]
	eor ($42.b,X)		; 41 42 ; Exclusive OR accumulator with memory ($42.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2F2F.w		; 2E 2F 2F ; Rotate left $2F2F.w [Flags: ZNC]
	rol $2424.w		; 2E 24 24 ; Rotate left $2424.w [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2F2F.w		; 2E 2F 2F ; Rotate left $2F2F.w [Flags: ZNC]
	rol $2424.w		; 2E 24 24 ; Rotate left $2424.w [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2F2F.w		; 2E 2F 2F ; Rotate left $2F2F.w [Flags: ZNC]
	rol $2424.w		; 2E 24 24 ; Rotate left $2424.w [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2F2F.w		; 2E 2F 2F ; Rotate left $2F2F.w [Flags: ZNC]
	rol $2424.w		; 2E 24 24 ; Rotate left $2424.w [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2F2F.w		; 2E 2F 2F ; Rotate left $2F2F.w [Flags: ZNC]
	rol $2424.w		; 2E 24 24 ; Rotate left $2424.w [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2F2F.w		; 2E 2F 2F ; Rotate left $2F2F.w [Flags: ZNC]
	rol $2424.w		; 2E 24 24 ; Rotate left $2424.w [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2F2F.w		; 2E 2F 2F ; Rotate left $2F2F.w [Flags: ZNC]
	rol $2424.w		; 2E 24 24 ; Rotate left $2424.w [Flags: ZNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $2F2F.w		; 2E 2F 2F ; Rotate left $2F2F.w [Flags: ZNC]
	rol TMW.w		; 2E 2E 21 ; Rotate left TMW.w [Flags: ZNC]
	bit $212E.w		; 2C 2E 21 ; Test bits $212E.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2E.b		; 24 2E ; Test bits $2E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($2C.b,X)		; 21 2C ; Logical AND ($2C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2821.w		; 2E 21 28 ; Rotate left $2821.w [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2E.b		; 24 2E ; Test bits $2E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($2C.b,X)		; 21 2C ; Logical AND ($2C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2821.w		; 2E 21 28 ; Rotate left $2821.w [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2E.b		; 24 2E ; Test bits $2E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($2C.b,X)		; 21 2C ; Logical AND ($2C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2821.w		; 2E 21 28 ; Rotate left $2821.w [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2E.b		; 24 2E ; Test bits $2E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($2C.b,X)		; 21 2C ; Logical AND ($2C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2821.w		; 2E 21 28 ; Rotate left $2821.w [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2E.b		; 24 2E ; Test bits $2E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($2C.b,X)		; 21 2C ; Logical AND ($2C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2821.w		; 2E 21 28 ; Rotate left $2821.w [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2E.b		; 24 2E ; Test bits $2E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($2C.b,X)		; 21 2C ; Logical AND ($2C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2821.w		; 2E 21 28 ; Rotate left $2821.w [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2E.b		; 24 2E ; Test bits $2E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($2C.b,X)		; 21 2C ; Logical AND ($2C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2821.w		; 2E 21 28 ; Rotate left $2821.w [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $41.b		; 24 41 ; Test bits $41.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($48.b,X)		; 41 48 ; Exclusive OR accumulator with memory ($48.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $53,$53		; 54 53 53 ; Move block negative $53,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $49,$49		; 54 49 49 ; Move block negative $49,$49 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$41		; 44 41 46 ; Move block positive $46,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $49.b		; 46 49 ; Logical shift right $49.b [Reads: Direct Page] [Flags: ZNC]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$49.b]		; 47 49 ; Exclusive OR accumulator with memory (long) [$49.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $44.b,S		; 43 44 ; Exclusive OR accumulator with stack relative $44.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$43.b]		; 47 43 ; Exclusive OR accumulator with memory (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor $5D5D.w,X		; 5D 5D 5D ; Exclusive OR accumulator with memory $5D5D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $5C5D.w,X		; 5D 5D 5C ; Exclusive OR accumulator with memory $5C5D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5B.b),Y		; 51 5B ; Exclusive OR accumulator with memory ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5D5D.w,X		; 5D 5D 5D ; Exclusive OR accumulator with memory $5D5D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp $515C5D.l		; 5C 5D 5C 51 ; Jump long to $515C5D.l [Flow: jump]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	jmp $515C5C.l		; 5C 5C 5C 51 ; Jump long to $515C5C.l [Flow: jump]
	jmp $5B515C.l		; 5C 5C 51 5B ; Jump long to $5B515C.l [Flow: jump]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5E.b),Y		; 51 5E ; Exclusive OR accumulator with memory ($5E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5B.b),Y		; 51 5B ; Exclusive OR accumulator with memory ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $56.b,X		; 56 56 ; Logical shift right $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lsr $56.b,X		; 56 56 ; Logical shift right $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lsr $56.b,X		; 56 56 ; Logical shift right $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lsr $56.b,X		; 56 56 ; Logical shift right $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $42, $41		; 42 41 ; Reserved instruction
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $41		; 42 41 ; Reserved instruction
	eor ($45.b,X)		; 41 45 ; Exclusive OR accumulator with memory ($45.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $46		; 42 46 ; Reserved instruction
	eor $47.b		; 45 47 ; Exclusive OR $47.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $48		; 42 48 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $46		; 42 46 ; Reserved instruction
	eor [$4B.b]		; 47 4B ; Exclusive OR accumulator with memory (long) [$4B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$46.b		; 49 46 ; Exclusive OR #$46.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$4B.b]		; 47 4B ; Exclusive OR accumulator with memory (long) [$4B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$46.b		; 49 46 ; Exclusive OR #$46.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$4B.b]		; 47 4B ; Exclusive OR accumulator with memory (long) [$4B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $47.b		; 46 47 ; Logical shift right $47.b [Reads: Direct Page] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $47.b		; 46 47 ; Logical shift right $47.b [Reads: Direct Page] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $47.b		; 46 47 ; Logical shift right $47.b [Reads: Direct Page] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $47.b		; 46 47 ; Logical shift right $47.b [Reads: Direct Page] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$46.b		; 49 46 ; Exclusive OR #$46.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$4B.b]		; 47 4B ; Exclusive OR accumulator with memory (long) [$4B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$63.b		; 49 63 ; Exclusive OR #$63.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; [PATTERN: Memory clearing operation] 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $64.b,S		; 63 64 ; Add with carry (stack relative) $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $64.b		; 64 64 ; Store zero to $64.b
	stz $63.b		; 64 63 ; Store zero to $63.b
	adc $63.b,S		; [PATTERN: Memory clearing operation] 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	stz $62.b		; 64 62 ; Store zero to $62.b
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	stz $63.b		; 64 63 ; Store zero to $63.b
	stz $62.b		; 64 62 ; Store zero to $62.b
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $64, $63		; 62 64 63 ; Push effective relative address $62, $64, $63 [Writes: Stack Pointer]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $61		; 62 62 61 ; Push effective relative address $62, $62, $61 [Writes: Stack Pointer]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; [PATTERN: Memory clearing operation] 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $61, $61		; 62 61 61 ; Push effective relative address $62, $61, $61 [Writes: Stack Pointer]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stz $64.b		; 64 64 ; Store zero to $64.b
	stz $64.b		; 64 64 ; Store zero to $64.b
	.db $62, $61, $33		; 62 61 33 ; Push effective relative address $62, $61, $33 [Writes: Stack Pointer]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b)		; 32 33 ; AND accumulator with memory (indirect) ($33.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b)		; 32 33 ; AND accumulator with memory (indirect) ($33.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b)		; 32 33 ; AND accumulator with memory (indirect) ($33.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($33.b)		; 32 33 ; AND accumulator with memory (indirect) ($33.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($34.b)		; 32 34 ; AND accumulator with memory (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $32.b,X		; 34 32 ; Test bits $32.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($46.b,S),Y		; 33 46 ; AND accumulator (stack relative indirect indexed) ($46.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$43.b]		; 47 43 ; Exclusive OR accumulator with memory (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$46		; 44 46 41 ; Move block positive $41,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$41		; 44 41 44 ; Move block positive $44,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$43.b]		; 47 43 ; Exclusive OR accumulator with memory (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	mvp $46,$46		; 44 46 46 ; Move block positive $46,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$41.b]		; 47 41 ; Exclusive OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor $42.b,S		; 43 42 ; Exclusive OR accumulator with stack relative $42.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $42,$4B		; 44 4B 42 ; Move block positive $42,$4B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	lsr $4B.b		; 46 4B ; Logical shift right $4B.b [Reads: Direct Page] [Flags: ZNC]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	lsr $4B.b		; 46 4B ; Logical shift right $4B.b [Reads: Direct Page] [Flags: ZNC]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	mvp $47,$4B		; 44 4B 47 ; Move block positive $47,$4B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $47,$4B		; 44 4B 47 ; Move block positive $47,$4B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	mvp $46,$41		; 44 41 46 ; Move block positive $46,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $47.b		; 46 47 ; Logical shift right $47.b [Reads: Direct Page] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$4B.b]		; 47 4B ; Exclusive OR accumulator with memory (long) [$4B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$4B.b]		; 47 4B ; Exclusive OR accumulator with memory (long) [$4B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $47.b		; 46 47 ; Logical shift right $47.b [Reads: Direct Page] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	mvp $46,$41		; 44 41 46 ; Move block positive $46,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $47.b		; 46 47 ; Logical shift right $47.b [Reads: Direct Page] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	mvp $46,$41		; 44 41 46 ; Move block positive $46,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $47.b		; 46 47 ; Logical shift right $47.b [Reads: Direct Page] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $47.b		; 46 47 ; Logical shift right $47.b [Reads: Direct Page] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $47.b		; 46 47 ; Logical shift right $47.b [Reads: Direct Page] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $61.b		; 65 61 ; Add $61.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($69.b,X)		; 61 69 ; Add with carry ($69.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $61.b		; 65 61 ; Add $61.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($69.b,X)		; 61 69 ; Add with carry ($69.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $61.b		; 65 61 ; Add $61.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($69.b,X)		; 61 69 ; Add with carry ($69.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $61.b		; 65 61 ; Add $61.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($69.b,X)		; 61 69 ; Add with carry ($69.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $62, $62		; 62 62 62 ; Push effective relative address $62, $62, $62 [Writes: Stack Pointer]
	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	eor [$41.b]		; 47 41 ; Exclusive OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4D.b,X)		; 41 4D ; Exclusive OR accumulator with memory ($4D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4C4C.w		; 4D 4C 4C ; Exclusive OR $4C4C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $414D.w		; 4D 4D 41 ; Exclusive OR $414D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($4D.b,X)		; 41 4D ; Exclusive OR accumulator with memory ($4D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4141.w		; 4D 41 41 ; Exclusive OR $4141.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4C41.w		; 4D 41 4C ; Exclusive OR $4C41.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $4D41.w		; 4C 41 4D ; Jump to $4D41.w [Flow: jump]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4C41.w		; 4D 41 4C ; Exclusive OR $4C41.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $4D41.w		; 4C 41 4D ; Jump to $4D41.w [Flow: jump]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4141.w		; 4D 41 41 ; Exclusive OR $4141.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4141.w		; 4D 41 41 ; Exclusive OR $4141.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4D4D.w		; 4D 4D 4D ; Exclusive OR $4D4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4D4D.w		; 4D 4D 4D ; Exclusive OR $4D4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($59.b,X)		; 41 59 ; Exclusive OR accumulator with memory ($59.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $5159.w,Y		; 59 59 51 ; Exclusive OR accumulator with memory $5159.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($59.b),Y		; 51 59 ; Exclusive OR accumulator with memory ($59.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5959.w,Y		; 59 59 59 ; Exclusive OR accumulator with memory $5959.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $515D.w,X		; 5D 5D 51 ; Exclusive OR accumulator with memory $515D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($59.b),Y		; 51 59 ; Exclusive OR accumulator with memory ($59.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5D.b),Y		; 51 5D ; Exclusive OR accumulator with memory ($5D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $5C5E5E.l		; 5C 5E 5E 5C ; Jump long to $5C5E5E.l [Flow: jump]
	eor $5151.w,X		; 5D 51 51 ; Exclusive OR accumulator with memory $5151.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp $5D5D5C.l		; 5C 5C 5D 5D ; Jump long to $5D5D5C.l [Flow: jump]
	jmp $59515C.l		; 5C 5C 51 59 ; Jump long to $59515C.l [Flow: jump]
	eor ($5C.b),Y		; 51 5C ; Exclusive OR accumulator with memory ($5C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5C5D.w,X		; 5D 5D 5C ; Exclusive OR accumulator with memory $5C5D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($59.b),Y		; 51 59 ; Exclusive OR accumulator with memory ($59.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5C.b),Y		; 51 5C ; Exclusive OR accumulator with memory ($5C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5C5C.w,X		; 5D 5C 5C ; Exclusive OR accumulator with memory $5C5C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $515C.w,X		; 5D 5C 51 ; Exclusive OR accumulator with memory $515C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5C.b),Y		; 51 5C ; Exclusive OR accumulator with memory ($5C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5151.w,X		; 5D 51 51 ; Exclusive OR accumulator with memory $5151.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $515C.w,X		; 5D 5C 51 ; Exclusive OR accumulator with memory $515C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $5151.w,Y		; 59 51 51 ; Exclusive OR accumulator with memory $5151.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $4646.w,Y		; 59 46 46 ; Exclusive OR accumulator with memory $4646.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $46,$46		; 44 46 46 ; Move block positive $46,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $44.b		; 46 44 ; Logical shift right $44.b [Reads: Direct Page] [Flags: ZNC]
	jmp $4C4C.w		; 4C 4C 4C ; Jump to $4C4C.w [Flow: jump]
	jmp $4644.w		; 4C 44 46 ; Jump to $4644.w [Flow: jump]
	mvp $4D,$4C		; 44 4C 4D ; Move block positive $4D,$4C [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $4D4E.w		; 4D 4E 4D ; Exclusive OR $4D4E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $4444.w		; 4C 44 44 ; Jump to $4444.w [Flow: jump]
	jmp $4E4D.w		; 4C 4D 4E ; Jump to $4E4D.w [Flow: jump]
	lsr $4C4D.w		; 4E 4D 4C ; Logical shift right $4C4D.w [Flags: ZNC]
	mvp $4C,$44		; 44 44 4C ; Move block positive $4C,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $4C4C.w		; 4D 4C 4C ; Exclusive OR $4C4C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $444C.w		; 4D 4C 44 ; Exclusive OR $444C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $4D,$41		; 44 41 4D ; Move block positive $4D,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4441.w		; 4D 41 44 ; Exclusive OR $4441.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $44.b		; 46 44 ; Logical shift right $44.b [Reads: Direct Page] [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $3B,$46		; 44 46 3B ; Move block positive $3B,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($3B.b),Y		; 31 3B ; AND accumulator with memory ($3B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $3B.b,X		; 34 3B ; Test bits $3B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $3B.b,X		; 34 3B ; Test bits $3B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $31.b,X		; 34 31 ; Test bits $31.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $41.b,X		; 34 41 ; Test bits $41.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	eor #$4F.b		; 49 4F ; Exclusive OR #$4F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $41414A.l		; 4F 4A 41 41 ; Exclusive OR accumulator with memory (long) $41414A.l [Writes: Accumulator] [Flags: ZN]
	mvp $41,$42		; 44 42 41 ; Move block positive $41,$42 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $444A4F.l		; 4F 4F 4A 44 ; Exclusive OR accumulator with memory (long) $444A4F.l [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $414A4F.l		; 4F 4F 4A 41 ; Exclusive OR accumulator with memory (long) $414A4F.l [Writes: Accumulator] [Flags: ZN]
	mvp $42,$44		; 44 44 42 ; Move block positive $42,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($4F.b,X)		; 41 4F ; Exclusive OR accumulator with memory ($4F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $44414A.l		; 4F 4A 41 44 ; Exclusive OR accumulator with memory (long) $44414A.l [Writes: Accumulator] [Flags: ZN]
	mvp $49,$41		; 44 41 49 ; Move block positive $49,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $444A4F.l		; 4F 4F 4A 44 ; Exclusive OR accumulator with memory (long) $444A4F.l [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $41		; 42 41 ; Reserved instruction
	eor $414A4F.l		; 4F 4F 4A 41 ; Exclusive OR accumulator with memory (long) $414A4F.l [Writes: Accumulator] [Flags: ZN]
	mvp $41,$44		; 44 44 41 ; Move block positive $41,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($4F.b,X)		; 41 4F ; Exclusive OR accumulator with memory ($4F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $41444A.l		; 4F 4A 44 41 ; Exclusive OR accumulator with memory (long) $41444A.l [Writes: Accumulator] [Flags: ZN]
	mvp $41,$42		; 44 42 41 ; Move block positive $41,$42 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $414A4F.l		; 4F 4F 4A 41 ; Exclusive OR accumulator with memory (long) $414A4F.l [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$4F.b		; 49 4F ; Exclusive OR #$4F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $4A4F4F.l		; 4F 4F 4F 4A ; Exclusive OR accumulator with memory (long) $4A4F4F.l [Writes: Accumulator] [Flags: ZN]
	eor $4F4F4F.l		; 4F 4F 4F 4F ; Exclusive OR accumulator with memory (long) $4F4F4F.l [Writes: Accumulator] [Flags: ZN]
	eor $4F4F4F.l		; 4F 4F 4F 4F ; Exclusive OR accumulator with memory (long) $4F4F4F.l [Writes: Accumulator] [Flags: ZN]
	eor $494A4F.l		; 4F 4F 4A 49 ; Exclusive OR accumulator with memory (long) $494A4F.l [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$4A.b		; 49 4A ; Exclusive OR #$4A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$4A.b		; 49 4A ; Exclusive OR #$4A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($42.b,X)		; 41 42 ; Exclusive OR accumulator with memory ($42.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($42.b,X)		; 41 42 ; Exclusive OR accumulator with memory ($42.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $41		; 42 41 ; Reserved instruction
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$41		; 44 41 44 ; Move block positive $44,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $44,$41		; 44 41 44 ; Move block positive $44,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $41494F.l		; 4F 4F 49 41 ; Exclusive OR accumulator with memory (long) $41494F.l [Writes: Accumulator] [Flags: ZN]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4F4F4A.l		; 4F 4A 4F 4F ; Exclusive OR accumulator with memory (long) $4F4F4A.l [Writes: Accumulator] [Flags: ZN]
	eor $4F4F4A.l		; 4F 4A 4F 4F ; Exclusive OR accumulator with memory (long) $4F4F4A.l [Writes: Accumulator] [Flags: ZN]
	eor $4F4F4F.l		; 4F 4F 4F 4F ; Exclusive OR accumulator with memory (long) $4F4F4F.l [Writes: Accumulator] [Flags: ZN]
	eor $4F4F4F.l		; 4F 4F 4F 4F ; Exclusive OR accumulator with memory (long) $4F4F4F.l [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$4F.b		; 49 4F ; Exclusive OR #$4F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $494A4A.l		; 4F 4A 4A 49 ; Exclusive OR accumulator with memory (long) $494A4A.l [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $414A4F.l		; 4F 4F 4A 41 ; Exclusive OR accumulator with memory (long) $414A4F.l [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $414A4F.l		; 4F 4F 4A 41 ; Exclusive OR accumulator with memory (long) $414A4F.l [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $414A4F.l		; 4F 4F 4A 41 ; Exclusive OR accumulator with memory (long) $414A4F.l [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $41		; 42 41 ; Reserved instruction
	eor $414A4F.l		; 4F 4F 4A 41 ; Exclusive OR accumulator with memory (long) $414A4F.l [Writes: Accumulator] [Flags: ZN]
	mvp $54,$44		; 44 44 54 ; Move block positive $54,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($54.b),Y		; 51 54 ; Exclusive OR accumulator with memory ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($5D.b),Y		; 51 5D ; Exclusive OR accumulator with memory ($5D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $545451.l		; 5C 51 54 54 ; Jump long to $545451.l [Flow: jump]
	mvn $51,$54		; 54 54 51 ; Move block negative $51,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	jmp $545151.l		; 5C 51 51 54 ; Jump long to $545151.l [Flow: jump]
	mvn $54,$53		; 54 53 54 ; Move block negative $54,$53 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($54.b),Y		; 51 54 ; Exclusive OR accumulator with memory ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $51,$51		; 54 51 51 ; Move block negative $51,$51 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $5E,$51		; 54 51 5E ; Move block negative $5E,$51 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $51,$51		; 54 51 51 ; Move block negative $51,$51 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $54,$54		; 54 54 54 ; Move block negative $54,$54 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5B.b),Y		; 51 5B ; Exclusive OR accumulator with memory ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5E.b),Y		; 51 5E ; Exclusive OR accumulator with memory ($5E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $5E5E.w,X		; 5E 5E 5E ; Logical shift right $5E5E.w,X [Reads: X Index] [Flags: ZNC]
	lsr $5B51.w,X		; 5E 51 5B ; Logical shift right $5B51.w,X [Reads: X Index] [Flags: ZNC]
	eor ($5E.b),Y		; 51 5E ; Exclusive OR accumulator with memory ($5E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $56.b,X		; 56 56 ; Logical shift right $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lsr $5E.b,X		; 56 5E ; Logical shift right $5E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor ($5B.b),Y		; 51 5B ; Exclusive OR accumulator with memory ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5E.b),Y		; 51 5E ; Exclusive OR accumulator with memory ($5E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $5E5E.w,X		; 5E 5E 5E ; Logical shift right $5E5E.w,X [Reads: X Index] [Flags: ZNC]
	lsr $5B51.w,X		; 5E 51 5B ; Logical shift right $5B51.w,X [Reads: X Index] [Flags: ZNC]
	eor ($56.b),Y		; 51 56 ; Exclusive OR accumulator with memory ($56.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $51.b,X		; 56 51 ; Logical shift right $51.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lsr $56.b,X		; 56 56 ; Logical shift right $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor ($5B.b),Y		; 51 5B ; Exclusive OR accumulator with memory ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5B.b),Y		; 51 5B ; Exclusive OR accumulator with memory ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$44.b		; 49 44 ; Exclusive OR #$44.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $47.b,S		; 43 47 ; Exclusive OR accumulator with stack relative $47.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $47.b,S		; 43 47 ; Exclusive OR accumulator with stack relative $47.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$46.b		; 49 46 ; Exclusive OR #$46.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$69.b		; 49 69 ; Exclusive OR #$69.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$69.b		; 69 69 ; Add #$69.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$69.b		; 69 69 ; Add #$69.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$69.b		; 69 69 ; Add #$69.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$69.b		; 69 69 ; Add #$69.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$69.b		; 69 69 ; Add #$69.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$69.b		; 69 69 ; Add #$69.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$69.b		; 69 69 ; Add #$69.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$69.b		; 69 69 ; Add #$69.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$69.b		; 69 69 ; Add #$69.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$69.b		; 69 69 ; Add #$69.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$69.b		; 69 69 ; Add #$69.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$69.b		; 69 69 ; Add #$69.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$69.b		; 69 69 ; Add #$69.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$69.b		; 69 69 ; Add #$69.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$69.b		; 69 69 ; Add #$69.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$61.b		; 69 61 ; Add #$61.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $65.b		; 65 65 ; Add $65.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $65.b		; 65 65 ; Add $65.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b		; 65 62 ; Add $62.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $61		; 62 62 61 ; Push effective relative address $62, $62, $61 [Writes: Stack Pointer]
	.db $62, $6B, $6B		; 62 6B 6B ; Push effective relative address $62, $6B, $6B [Writes: Stack Pointer]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $62, $61		; 62 62 61 ; Push effective relative address $62, $62, $61 [Writes: Stack Pointer]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $47,$43		; 44 43 47 ; Move block positive $47,$43 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $47.b,S		; 43 47 ; Exclusive OR accumulator with stack relative $47.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $4B.b		; 46 4B ; Logical shift right $4B.b [Reads: Direct Page] [Flags: ZNC]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $4B.b		; 46 4B ; Logical shift right $4B.b [Reads: Direct Page] [Flags: ZNC]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $47,$4B		; 44 4B 47 ; Move block positive $47,$4B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	mvp $46,$41		; 44 41 46 ; Move block positive $46,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	mvp $46,$46		; 44 46 46 ; Move block positive $46,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$4B.b]		; 47 4B ; Exclusive OR accumulator with memory (long) [$4B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	mvp $47,$46		; 44 46 47 ; Move block positive $47,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	mvp $4B,$41		; 44 41 4B ; Move block positive $4B,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $47.b		; 46 47 ; Logical shift right $47.b [Reads: Direct Page] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $47.b		; 46 47 ; Logical shift right $47.b [Reads: Direct Page] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $42, $41		; 42 41 ; Reserved instruction
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	mvp $41,$4B		; 44 4B 41 ; Move block positive $41,$4B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $47,$4B		; 44 4B 47 ; Move block positive $47,$4B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $49.b		; 46 49 ; Logical shift right $49.b [Reads: Direct Page] [Flags: ZNC]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $4B.b		; 46 4B ; Logical shift right $4B.b [Reads: Direct Page] [Flags: ZNC]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($43.b,X)		; 41 43 ; Exclusive OR accumulator with memory ($43.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$4B.b]		; 47 4B ; Exclusive OR accumulator with memory (long) [$4B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	mvp $47,$46		; 44 46 47 ; Move block positive $47,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $47.b		; 46 47 ; Logical shift right $47.b [Reads: Direct Page] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$46.b		; 49 46 ; Exclusive OR #$46.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$4B.b]		; 47 4B ; Exclusive OR accumulator with memory (long) [$4B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$46.b		; 49 46 ; Exclusive OR #$46.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	mvp $47,$46		; 44 46 47 ; Move block positive $47,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $47,$47		; 44 47 47 ; Move block positive $47,$47 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4B.b,X)		; 41 4B ; Exclusive OR accumulator with memory ($4B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$46		; 44 46 41 ; Move block positive $41,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $47,$47		; 44 47 47 ; Move block positive $47,$47 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $494949.l		; 4F 49 49 49 ; Exclusive OR accumulator with memory (long) $494949.l [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $414949.l		; 4F 49 49 41 ; Exclusive OR accumulator with memory (long) $414949.l [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$48.b]		; 47 48 ; Exclusive OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $474E.w		; 4E 4E 47 ; Logical shift right $474E.w [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $464D.w		; 4E 4D 46 ; Logical shift right $464D.w [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $464E.w		; 4E 4E 46 ; Logical shift right $464E.w [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $454C.w		; 4D 4C 45 ; Exclusive OR $454C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $48.b		; 45 48 ; Exclusive OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $44.b		; 45 44 ; Exclusive OR $44.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($4D.b,X)		; 41 4D ; Exclusive OR accumulator with memory ($4D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($45.b,X)		; 41 45 ; Exclusive OR accumulator with memory ($45.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $44.b		; 45 44 ; Exclusive OR $44.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $414E.w		; 4E 4E 41 ; Logical shift right $414E.w [Flags: ZNC]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $414E.w		; 4D 4E 41 ; Exclusive OR $414E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr $414E.w		; 4E 4E 41 ; Logical shift right $414E.w [Flags: ZNC]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	jmp $414D.w		; 4C 4D 41 ; Jump to $414D.w [Flow: jump]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $46,$48		; 44 48 46 ; Move block positive $46,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($4D.b,X)		; 41 4D ; Exclusive OR accumulator with memory ($4D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $41.b		; 45 41 ; Exclusive OR $41.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $47.b		; 45 47 ; Exclusive OR $47.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$48		; 44 48 45 ; Move block positive $45,$48 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $48.b		; 45 48 ; Exclusive OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $44.b		; 46 44 ; Logical shift right $44.b [Reads: Direct Page] [Flags: ZNC]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: ZNC]
	eor #$4F.b		; 49 4F ; Exclusive OR #$4F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $41414A.l		; 4F 4A 41 41 ; Exclusive OR accumulator with memory (long) $41414A.l [Writes: Accumulator] [Flags: ZN]
	mvp $41,$42		; 44 42 41 ; Move block positive $41,$42 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $444A4F.l		; 4F 4F 4A 44 ; Exclusive OR accumulator with memory (long) $444A4F.l [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $414A4F.l		; 4F 4F 4A 41 ; Exclusive OR accumulator with memory (long) $414A4F.l [Writes: Accumulator] [Flags: ZN]
	mvp $42,$44		; 44 44 42 ; Move block positive $42,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($4F.b,X)		; 41 4F ; Exclusive OR accumulator with memory ($4F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $44414A.l		; 4F 4A 41 44 ; Exclusive OR accumulator with memory (long) $44414A.l [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $41		; 42 41 ; Reserved instruction
	mvp $44,$41		; 44 41 44 ; Move block positive $44,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	mvp $44,$42		; 44 42 44 ; Move block positive $44,$42 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $44		; 42 44 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $4F		; 42 4F ; Reserved instruction
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $444A4F.l		; 4F 4F 4A 44 ; Exclusive OR accumulator with memory (long) $444A4F.l [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4F4F4F.l		; 4F 4F 4F 4F ; Exclusive OR accumulator with memory (long) $4F4F4F.l [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $49,$4A		; 44 4A 49 ; Move block positive $49,$4A [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $41444A.l		; 4F 4A 44 41 ; Exclusive OR accumulator with memory (long) $41444A.l [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($42.b,X)		; 41 42 ; Exclusive OR accumulator with memory ($42.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($42.b,X)		; 41 42 ; Exclusive OR accumulator with memory ($42.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$42		; 44 42 41 ; Move block positive $41,$42 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $42,$42		; 44 42 42 ; Move block positive $42,$42 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor [$48.b]		; 47 48 ; Exclusive OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $49,$41		; 44 41 49 ; Move block positive $49,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$47.b		; 49 47 ; Exclusive OR #$47.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $4A,$41		; 44 41 4A ; Move block positive $4A,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor #$48.b		; 49 48 ; Exclusive OR #$48.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $41,$44		; 44 44 41 ; Move block positive $41,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$46.b		; 49 46 ; Exclusive OR #$46.b with accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $41,$44		; 44 44 41 ; Move block positive $41,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$46.b		; 49 46 ; Exclusive OR #$46.b with accumulator [Writes: Accumulator] [Flags: ZN]
	mvp $41,$41		; 44 41 41 ; Move block positive $41,$41 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor ($4A.b,X)		; 41 4A ; Exclusive OR accumulator with memory ($4A.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $49.b,S		; 43 49 ; Exclusive OR accumulator with stack relative $49.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor $49.b,S		; 43 49 ; Exclusive OR accumulator with stack relative $49.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	jsl $242122.l		; 22 22 21 24 ; Jump to subroutine long $242122.l [Writes: Stack Pointer] [Flow: call]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	jsl $212222.l		; 22 22 22 21 ; Jump to subroutine long $212222.l [Writes: Stack Pointer] [Flow: call]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and [$22.b]		; 27 22 ; AND accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $222222.l		; 22 22 22 22 ; Jump to subroutine long $222222.l [Writes: Stack Pointer] [Flow: call]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $27.b		; 26 27 ; Rotate left $27.b [Reads: Direct Page] [Flags: ZNC]
	jsl $222222.l		; 22 22 22 22 ; Jump to subroutine long $222222.l [Writes: Stack Pointer] [Flow: call]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $25.b		; 26 25 ; Rotate left $25.b [Reads: Direct Page] [Flags: ZNC]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $21.b		; 24 21 ; Test bits $21.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsl $2A2121.l		; 22 21 21 2A ; Jump to subroutine long $2A2121.l [Writes: Stack Pointer] [Flow: call]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $262A21.l		; 22 21 2A 26 ; Jump to subroutine long $262A21.l [Writes: Stack Pointer] [Flow: call]
	jsl $222222.l		; 22 22 22 22 ; Jump to subroutine long $222222.l [Writes: Stack Pointer] [Flow: call]
	jsl $26262A.l		; 22 2A 26 26 ; Jump to subroutine long $26262A.l [Writes: Stack Pointer] [Flow: call]
	jsl $222222.l		; 22 22 22 22 ; Jump to subroutine long $222222.l [Writes: Stack Pointer] [Flow: call]
	and [$26.b]		; 27 26 ; AND accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$4A.b		; 49 4A ; Exclusive OR #$4A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $4D		; 42 4D ; Reserved instruction
	eor $4949.w		; 4D 49 49 ; Exclusive OR $4949.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $4D		; 42 4D ; Reserved instruction
	eor $4949.w		; 4D 49 49 ; Exclusive OR $4949.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $4E		; 42 4E ; Reserved instruction
	eor $4A49.w		; 4D 49 4A ; Exclusive OR $4A49.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $4C		; 42 4C ; Reserved instruction
	eor $4A49.w		; 4D 49 4A ; Exclusive OR $4A49.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	eor ($4D.b,X)		; 41 4D ; Exclusive OR accumulator with memory ($4D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$4A.b		; 49 4A ; Exclusive OR #$4A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $42, $5B		; 42 5B ; Reserved instruction
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5B.b),Y		; 51 5B ; Exclusive OR accumulator with memory ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor ($5C.b),Y		; 51 5C ; Exclusive OR accumulator with memory ($5C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5D5D.w,X		; 5D 5D 5D ; Exclusive OR accumulator with memory $5D5D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp $515B51.l		; 5C 51 5B 51 ; Jump long to $515B51.l [Flow: jump]
	jmp $5D5D5D.l		; 5C 5D 5D 5D ; Jump long to $5D5D5D.l [Flow: jump]
	jmp $515B51.l		; 5C 51 5B 51 ; Jump long to $515B51.l [Flow: jump]
	jmp $5C515C.l		; 5C 5C 51 5C ; Jump long to $5C515C.l [Flow: jump]
	jmp $515B51.l		; 5C 51 5B 51 ; Jump long to $515B51.l [Flow: jump]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $5151.w,X		; 5E 51 51 ; Logical shift right $5151.w,X [Reads: X Index] [Flags: ZNC]
	eor ($5B.b),Y		; 51 5B ; Exclusive OR accumulator with memory ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5E.b),Y		; 51 5E ; Exclusive OR accumulator with memory ($5E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $5E56.w,X		; 5E 56 5E ; Logical shift right $5E56.w,X [Reads: X Index] [Flags: ZNC]
	lsr $5B51.w,X		; 5E 51 5B ; Logical shift right $5B51.w,X [Reads: X Index] [Flags: ZNC]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5B.b),Y		; 51 5B ; Exclusive OR accumulator with memory ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	ora $1919.w,Y		; 19 19 19 ; OR accumulator with memory $1919.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1119.w,Y		; 19 19 11 ; OR accumulator with memory $1119.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1919.w,Y		; 19 19 19 ; OR accumulator with memory $1919.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1C1B.w,Y		; 19 1B 1C ; OR accumulator with memory $1C1B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $191C.w		; 1C 1C 19 ; Test and reset bits $191C.w [Reads: Accumulator] [Flags: Z]
	ora $1919.w,Y		; 19 19 19 ; OR accumulator with memory $1919.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $1A1A.w		; 1C 1A 1A ; Test and reset bits $1A1A.w [Reads: Accumulator] [Flags: Z]
	ora $1919.w,Y		; 19 19 19 ; OR accumulator with memory $1919.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1C1B.w,Y		; 19 1B 1C ; OR accumulator with memory $1C1B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $1919.w,Y		; 19 19 19 ; OR accumulator with memory $1919.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1C1B.w,Y		; 19 1B 1C ; OR accumulator with memory $1C1B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	trb $1919.w		; 1C 19 19 ; Test and reset bits $1919.w [Reads: Accumulator] [Flags: Z]
	ora $1B19.w,Y		; 19 19 1B ; OR accumulator with memory $1B19.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $1C1A.w		; 1C 1A 1C ; Test and reset bits $1C1A.w [Reads: Accumulator] [Flags: Z]
	ora $1919.w,Y		; 19 19 19 ; OR accumulator with memory $1919.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1C1B.w,Y		; 19 1B 1C ; OR accumulator with memory $1C1B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	trb $1919.w		; 1C 19 19 ; Test and reset bits $1919.w [Reads: Accumulator] [Flags: Z]
	ora $1B19.w,Y		; 19 19 1B ; OR accumulator with memory $1B19.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $1C1A.w		; 1C 1A 1C ; Test and reset bits $1C1A.w [Reads: Accumulator] [Flags: Z]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($19.b),Y		; 11 19 ; OR accumulator with memory ($19.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $1C1C.w		; 1C 1C 1C ; Test and reset bits $1C1C.w [Reads: Accumulator] [Flags: Z]
	trb $1C1C.w		; 1C 1C 1C ; Test and reset bits $1C1C.w [Reads: Accumulator] [Flags: Z]
	trb $1A1A.w		; 1C 1A 1A ; Test and reset bits $1A1A.w [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	trb $1B1A.w		; 1C 1A 1B ; Test and reset bits $1B1A.w [Reads: Accumulator] [Flags: Z]
	trb $1B1C.w		; 1C 1C 1B ; Test and reset bits $1B1C.w [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $1C1A.w		; 1C 1A 1C ; Test and reset bits $1C1A.w [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $1A1C.w		; 1C 1C 1A ; Test and reset bits $1A1C.w [Reads: Accumulator] [Flags: Z]
	trb $1B1A.w		; 1C 1A 1B ; Test and reset bits $1B1A.w [Reads: Accumulator] [Flags: Z]
	trb $1A1C.w		; 1C 1C 1A ; Test and reset bits $1A1C.w [Reads: Accumulator] [Flags: Z]
	trb $1C1A.w		; 1C 1A 1C ; Test and reset bits $1C1A.w [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	trb $1A1C.w		; 1C 1C 1A ; Test and reset bits $1A1C.w [Reads: Accumulator] [Flags: Z]
	trb $1C1A.w		; 1C 1A 1C ; Test and reset bits $1C1A.w [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $1C1A.w		; 1C 1A 1C ; Test and reset bits $1C1A.w [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $1919.w,Y		; 19 19 19 ; OR accumulator with memory $1919.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1C1B.w,Y		; 19 1B 1C ; OR accumulator with memory $1C1B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	trb $1919.w		; 1C 19 19 ; Test and reset bits $1919.w [Reads: Accumulator] [Flags: Z]
	ora $1B19.w,Y		; 19 19 1B ; OR accumulator with memory $1B19.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $1C1A.w		; 1C 1A 1C ; Test and reset bits $1C1A.w [Reads: Accumulator] [Flags: Z]
	ora $1919.w,Y		; 19 19 19 ; OR accumulator with memory $1919.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1C1B.w,Y		; 19 1B 1C ; OR accumulator with memory $1C1B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	trb $1919.w		; 1C 19 19 ; Test and reset bits $1919.w [Reads: Accumulator] [Flags: Z]
	ora $1B19.w,Y		; 19 19 1B ; OR accumulator with memory $1B19.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $1C1A.w		; 1C 1A 1C ; Test and reset bits $1C1A.w [Reads: Accumulator] [Flags: Z]
	ora $1919.w,Y		; 19 19 19 ; OR accumulator with memory $1919.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1C1B.w,Y		; 19 1B 1C ; OR accumulator with memory $1C1B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $1919.w,Y		; 19 19 19 ; OR accumulator with memory $1919.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1C1B.w,Y		; 19 1B 1C ; OR accumulator with memory $1C1B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $191C.w		; 1C 1C 19 ; Test and reset bits $191C.w [Reads: Accumulator] [Flags: Z]
	ora $1919.w,Y		; 19 19 19 ; OR accumulator with memory $1919.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $1919.w,Y		; 19 19 19 ; OR accumulator with memory $1919.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1A19.w,Y		; 19 19 1A ; OR accumulator with memory $1A19.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $1C1A.w		; 1C 1A 1C ; Test and reset bits $1C1A.w [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $1C1A.w		; 1C 1A 1C ; Test and reset bits $1C1A.w [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	trb $111C.w		; 1C 1C 11 ; Test and reset bits $111C.w [Reads: Accumulator] [Flags: Z]
	trb $1C1A.w		; 1C 1A 1C ; Test and reset bits $1C1A.w [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	trb $1B1A.w		; 1C 1A 1B ; Test and reset bits $1B1A.w [Reads: Accumulator] [Flags: Z]
	trb $1A1C.w		; 1C 1C 1A ; Test and reset bits $1A1C.w [Reads: Accumulator] [Flags: Z]
	trb $1B1A.w		; 1C 1A 1B ; Test and reset bits $1B1A.w [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $1C1A.w		; 1C 1A 1C ; Test and reset bits $1C1A.w [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $1C1C.w		; 1C 1C 1C ; Test and reset bits $1C1C.w [Reads: Accumulator] [Flags: Z]
	trb $1B1A.w		; 1C 1A 1B ; Test and reset bits $1B1A.w [Reads: Accumulator] [Flags: Z]
	trb $1B1C.w		; 1C 1C 1B ; Test and reset bits $1B1C.w [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($1A.b),Y		; 11 1A ; OR accumulator with memory ($1A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $6B6B.w,Y		; 19 6B 6B ; OR accumulator with memory $6B6B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $64.b,S		; 63 64 ; Add with carry (stack relative) $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $63.b		; 65 63 ; Add $63.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $63, $63		; 62 63 63 ; Push effective relative address $62, $63, $63 [Writes: Stack Pointer]
	.db $62, $6B, $63		; 62 6B 63 ; Push effective relative address $62, $6B, $63 [Writes: Stack Pointer]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $61, $63		; 62 61 63 ; Push effective relative address $62, $61, $63 [Writes: Stack Pointer]
	stz $65.b		; 64 65 ; Store zero to $65.b
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($6B.b,X)		; 61 6B ; Add with carry ($6B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($6B.b,X)		; 61 6B ; Add with carry ($6B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $44.b		; 45 44 ; Exclusive OR $44.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$46		; 44 46 45 ; Move block positive $45,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$45.b]		; 47 45 ; Exclusive OR accumulator with memory (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$47		; 44 47 44 ; Move block positive $44,$47 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $47,$47		; 44 47 47 ; Move block positive $47,$47 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $44.b		; 46 44 ; Logical shift right $44.b [Reads: Direct Page] [Flags: ZNC]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $44.b		; 45 44 ; Exclusive OR $44.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $45,$46		; 44 46 45 ; Move block positive $45,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $47.b		; 45 47 ; Exclusive OR $47.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $44,$47		; 44 47 44 ; Move block positive $44,$47 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $47,$47		; 44 47 47 ; Move block positive $47,$47 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $44.b		; 46 44 ; Logical shift right $44.b [Reads: Direct Page] [Flags: ZNC]
	eor ($46.b,X)		; 41 46 ; Exclusive OR accumulator with memory ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $47.b		; 46 47 ; Logical shift right $47.b [Reads: Direct Page] [Flags: ZNC]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor ($5C.b),Y		; 51 5C ; Exclusive OR accumulator with memory ($5C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5D5D.w,X		; 5D 5D 5D ; Exclusive OR accumulator with memory $5D5D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $5B5D.w,X		; 5D 5D 5B ; Exclusive OR accumulator with memory $5B5D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5C.b),Y		; 51 5C ; Exclusive OR accumulator with memory ($5C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5D5C.w,X		; 5D 5C 5D ; Exclusive OR accumulator with memory $5D5C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $5B5D.w,X		; 5D 5D 5B ; Exclusive OR accumulator with memory $5B5D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5C.b),Y		; 51 5C ; Exclusive OR accumulator with memory ($5C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $5C5C51.l		; 5C 51 5C 5C ; Jump long to $5C5C51.l [Flow: jump]
	jmp $51515B.l		; 5C 5B 51 51 ; Jump long to $51515B.l [Flow: jump]
	eor ($5E.b),Y		; 51 5E ; Exclusive OR accumulator with memory ($5E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5B.b),Y		; 51 5B ; Exclusive OR accumulator with memory ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5E.b),Y		; 51 5E ; Exclusive OR accumulator with memory ($5E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $5E56.w,X		; 5E 56 5E ; Logical shift right $5E56.w,X [Reads: X Index] [Flags: ZNC]
	lsr $5B56.w,X		; 5E 56 5B ; Logical shift right $5B56.w,X [Reads: X Index] [Flags: ZNC]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5B.b),Y		; 51 5B ; Exclusive OR accumulator with memory ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	eor $5D5D.w,X		; 5D 5D 5D ; Exclusive OR accumulator with memory $5D5D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $5C5D.w,X		; 5D 5D 5C ; Exclusive OR accumulator with memory $5C5D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5B.b),Y		; 51 5B ; Exclusive OR accumulator with memory ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5D5D.w,X		; 5D 5D 5D ; Exclusive OR accumulator with memory $5D5D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp $515C5D.l		; 5C 5D 5C 51 ; Jump long to $515C5D.l [Flow: jump]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	jmp $515C5C.l		; 5C 5C 5C 51 ; Jump long to $515C5C.l [Flow: jump]
	jmp $5B515C.l		; 5C 5C 51 5B ; Jump long to $5B515C.l [Flow: jump]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5E.b),Y		; 51 5E ; Exclusive OR accumulator with memory ($5E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5B.b),Y		; 51 5B ; Exclusive OR accumulator with memory ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $5E56.w,X		; 5E 56 5E ; Logical shift right $5E56.w,X [Reads: X Index] [Flags: ZNC]
	lsr $5E.b,X		; 56 5E ; Logical shift right $5E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lsr $5B51.w,X		; 5E 51 5B ; Logical shift right $5B51.w,X [Reads: X Index] [Flags: ZNC]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($5B.b),Y		; 51 5B ; Exclusive OR accumulator with memory ($5B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b),Y		; 31 34 ; AND accumulator with memory ($34.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $31.b,X		; 34 31 ; Test bits $31.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($34.b),Y		; 31 34 ; AND accumulator with memory ($34.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $39.b,X		; 34 39 ; Test bits $39.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and $3434.w,Y		; 39 34 34 ; AND accumulator with memory $3434.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $39.b,X		; 34 39 ; Test bits $39.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $3134.w,Y		; 39 34 31 ; AND accumulator with memory $3134.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($34.b),Y		; 31 34 ; AND accumulator with memory ($34.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $3131.w,Y		; 39 31 31 ; AND accumulator with memory $3131.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $3134.w,Y		; 39 34 31 ; AND accumulator with memory $3134.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $3131.w,Y		; 39 31 31 ; AND accumulator with memory $3131.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $39		; Opcode 39 overrunning bank boundry at 0C7FFD. Skipping. ; AND accumulator with memory $39 [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $31		; Opcode 31 overrunning bank boundry at 0C7FFE. Skipping. ; AND accumulator with memory $31 [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $31		; Opcode 31 overrunning bank boundry at 0C7FFF. Skipping. ; AND accumulator with memory $31 [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
.ENDS
