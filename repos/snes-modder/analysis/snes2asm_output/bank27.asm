.BANK 27 SLOT 0
.ORG $0000

.SECTION "Bank27" FORCE

	lda $D0002C.l,X		; BF 2C 00 D0 ; Load long $D0002C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $28		; 80 28 ; Branch always to $80, $28 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $D0.b		; 46 D0 ; Logical shift right $D0.b [Reads: Direct Page] [Flags: ZNC]
	cpx $3ADB.w		; EC DB 3A ; Compare $3ADB.w with X register [Reads: X Index] [Flags: ZNC]
	sbc ($31.b,X)		; E1 31 ; Subtract with carry ($31.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpx $F9.b		; E4 F9 ; Compare $F9.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	inc $1E.b		; E6 1E ; Increment $1E.b [Reads: Direct Page] [Flags: ZN]
	sbc #$0B.b		; E9 0B ; Subtract #$0B.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cpx $F1D1.w		; EC D1 F1 ; Compare $F1D1.w with X register [Reads: X Index] [Flags: ZNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc ($04.b,X)		; E1 04 ; Subtract with carry ($04.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($80.b,S),Y		; F3 80 ; Subtract with carry (stack relative indirect indexed) ($80.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $09.b,X		; F5 09 ; Subtract $09.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FB6A.w,Y		; F9 6A FB ; Subtract with carry $FB6A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $2B.b		; 00 2B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $B32F.w,Y		; 59 2F B3 ; Exclusive OR accumulator with memory $B32F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2B.b		; 00 2B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $B32F.w,Y		; 59 2F B3 ; Exclusive OR accumulator with memory $B32F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ror $D0.b,X		; 76 D0 ; Rotate right $D0.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ror $D0.b		; 66 D0 ; Rotate right $D0.b [Reads: Direct Page] [Flags: ZNC]
	stx $D0.b		; 86 D0 ; Store X register to $D0.b [Reads: X Index]
	stx $D0.b		; 86 D0 ; Store X register to $D0.b [Reads: X Index]
	stx $D0.b,Y		; 96 D0 ; Store X register $D0.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $D0.b		; 86 D0 ; Store X register to $D0.b [Reads: X Index]
	ldx $D0.b		; A6 D0 ; Load $D0.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $D0.b,Y		; B6 D0 ; Load X register $D0.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	dec $D0.b,X		; D6 D0 ; Decrement memory $D0.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	inc $D0.b		; E6 D0 ; Increment $D0.b [Reads: Direct Page] [Flags: ZN]
	dec $D0.b		; C6 D0 ; Decrement $D0.b [Reads: Direct Page] [Flags: ZN]
	inc $D0.b,X		; F6 D0 ; Increment memory $D0.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	asl $D1.b		; 06 D1 ; Arithmetic shift left $D1.b [Reads: Direct Page] [Flags: ZNC]
	sbc $D04A00.l,X		; FF 00 4A D0 ; Subtract with carry (long,X) $D04A00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $D1.b,X		; 16 D1 ; Arithmetic shift left $D1.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cmp ($2C.b),Y		; D1 2C ; Compare accumulator ($2C.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($34.b),Y		; D1 34 ; Compare accumulator ($34.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($43.b),Y		; D1 43 ; Compare accumulator ($43.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($00.b),Y		; D1 00 ; Compare accumulator ($00.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $47.b		; 00 47 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($54.b),Y		; D1 54 ; Compare accumulator ($54.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($85.b),Y		; D1 85 ; Compare accumulator ($85.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($99.b),Y		; D1 99 ; Compare accumulator ($99.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($B9.b),Y		; D1 B9 ; Compare accumulator ($B9.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($D9.b),Y		; D1 D9 ; Compare accumulator ($D9.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($19.b),Y		; D1 19 ; Compare accumulator ($19.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($58.b)		; D2 58 ; Compare accumulator (indirect) ($58.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp ($78.b)		; D2 78 ; Compare accumulator (indirect) ($78.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp ($97.b)		; D2 97 ; Compare accumulator (indirect) ($97.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp ($B9.b)		; D2 B9 ; Compare accumulator (indirect) ($B9.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp ($C5.b)		; D2 C5 ; Compare accumulator (indirect) ($C5.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp ($DC.b)		; D2 DC ; Compare accumulator (indirect) ($DC.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp ($01.b)		; D2 01 ; Compare accumulator (indirect) ($01.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp ($09.b,S),Y		; D3 09 ; Compare accumulator (stack relative indirect indexed) ($09.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cmp ($3B.b,S),Y		; D3 3B ; Compare accumulator (stack relative indirect indexed) ($3B.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cmp ($00.b,S),Y		; D3 00 ; Compare accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	brk $59.b		; 00 59 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($8F.b,S),Y		; D3 8F ; Compare accumulator (stack relative indirect indexed) ($8F.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cmp ($A6.b,S),Y		; D3 A6 ; Compare accumulator (stack relative indirect indexed) ($A6.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cmp ($C5.b,S),Y		; D3 C5 ; Compare accumulator (stack relative indirect indexed) ($C5.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cmp ($EB.b,S),Y		; D3 EB ; Compare accumulator (stack relative indirect indexed) ($EB.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cmp ($F3.b,S),Y		; D3 F3 ; Compare accumulator (stack relative indirect indexed) ($F3.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cmp ($27.b,S),Y		; D3 27 ; Compare accumulator (stack relative indirect indexed) ($27.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	pei ($00.b)		; D4 00 ; Push effective indirect address ($00.b) [Reads: Direct Page] [Writes: Stack Pointer]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pei ($74.b)		; D4 74 ; Push effective indirect address ($74.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($99.b)		; D4 99 ; Push effective indirect address ($99.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($C6.b)		; D4 C6 ; Push effective indirect address ($C6.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($E6.b)		; D4 E6 ; Push effective indirect address ($E6.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($EE.b)		; D4 EE ; Push effective indirect address ($EE.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($2B.b)		; D4 2B ; Push effective indirect address ($2B.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $00.b,X		; D5 00 ; Compare accumulator $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $6E.b,X		; D5 6E ; Compare accumulator $6E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp $96.b,X		; D5 96 ; Compare accumulator $96.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp $AF.b,X		; D5 AF ; Compare accumulator $AF.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp $C9.b,X		; D5 C9 ; Compare accumulator $C9.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp $25.b,X		; D5 25 ; Compare accumulator $25.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dec $62.b,X		; D6 62 ; Decrement memory $62.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dec $7A.b,X		; D6 7A ; Decrement memory $7A.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dec $93.b,X		; D6 93 ; Decrement memory $93.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dec $9F.b,X		; D6 9F ; Decrement memory $9F.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dec $AE.b,X		; D6 AE ; Decrement memory $AE.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dec $C7.b,X		; D6 C7 ; Decrement memory $C7.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dec $CD.b,X		; D6 CD ; Decrement memory $CD.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dec $00.b,X		; D6 00 ; Decrement memory $00.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$00.b],Y		; D7 00 ; Compare accumulator (long indexed) [$00.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$1B.b],Y		; D7 1B ; Compare accumulator (long indexed) [$1B.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp [$1F.b],Y		; D7 1F ; Compare accumulator (long indexed) [$1F.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp [$2D.b],Y		; D7 2D ; Compare accumulator (long indexed) [$2D.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp [$35.b],Y		; D7 35 ; Compare accumulator (long indexed) [$35.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp [$00.b],Y		; D7 00 ; Compare accumulator (long indexed) [$00.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$00.b],Y		; D7 00 ; Compare accumulator (long indexed) [$00.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	brk $55.b		; 00 55 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$6C.b],Y		; D7 6C ; Compare accumulator (long indexed) [$6C.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp [$70.b],Y		; D7 70 ; Compare accumulator (long indexed) [$70.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp [$7C.b],Y		; D7 7C ; Compare accumulator (long indexed) [$7C.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp [$82.b],Y		; D7 82 ; Compare accumulator (long indexed) [$82.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp [$8D.b],Y		; D7 8D ; Compare accumulator (long indexed) [$8D.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp [$A8.b],Y		; D7 A8 ; Compare accumulator (long indexed) [$A8.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp [$00.b],Y		; D7 00 ; Compare accumulator (long indexed) [$00.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$DA.b],Y		; D7 DA ; Compare accumulator (long indexed) [$DA.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp [$DE.b],Y		; D7 DE ; Compare accumulator (long indexed) [$DE.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp [$FA.b],Y		; D7 FA ; Compare accumulator (long indexed) [$FA.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp [$46.b],Y		; D7 46 ; Compare accumulator (long indexed) [$46.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	stz $D8.b,X		; 74 D8 ; Store zero to $D8.b,X [Reads: X Index]
	ldx #$D8.b		; A2 D8 ; Load #$D8.b into X register [Writes: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $D8D2D8.l,X		; BF D8 D2 D8 ; Load long $D8D2D8.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $D8.b,X		; D6 D8 ; Decrement memory $D8.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dec $F0D8.w,X		; DE D8 F0 ; Decrement memory $F0D8.w,X [Reads: X Index] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pea $FED8.w		; F4 D8 FE ; Push absolute address $FED8.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sbc [$1B.b]		; E7 1B ; Subtract with carry (long) [$1B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $6014.w,X		; 1E 14 60 ; Arithmetic shift left $6014.w,X [Reads: X Index] [Flags: ZNC]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $01D90C.l		; EF 0C D9 01 ; Subtract with carry (long) $01D90C.l [Writes: Accumulator] [Flags: ZVNC]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $D9.b		; 25 D9 ; Logical AND $D9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $EF01D9.l,X		; 3F D9 01 EF ; AND accumulator with memory (long,X) $EF01D9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $ED01.w,Y		; D9 01 ED ; Compare accumulator $ED01.w,Y [Reads: Y Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $1D.b,S		; E3 1D ; Subtract stack-relative $1D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	sbc ($0F.b,X)		; E1 0F ; Subtract with carry ($0F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $01D976.l		; EF 76 D9 01 ; Subtract with carry (long) $01D976.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $E08C.w		; ED 8C E0 ; Subtract $E08C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $1D.b,S		; E3 1D ; Subtract stack-relative $1D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ora [$E5.b],Y		; 17 E5 ; OR accumulator with memory (long indexed) [$E5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc [$15.b]		; E7 15 ; Subtract with carry (long) [$15.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $F802.w,X		; 1E 02 F8 ; Arithmetic shift left $F802.w,X [Reads: X Index] [Flags: ZNC]
	asl $1E1E.w,X		; 1E 1E 1E ; Arithmetic shift left $1E1E.w,X [Reads: X Index] [Flags: ZNC]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $0814.w,X		; 1E 14 08 ; Arithmetic shift left $0814.w,X [Reads: X Index] [Flags: ZNC]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $ABAB.w,X		; 3D AB AB ; AND accumulator with memory $ABAB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $A9AB.w		; 0C AB A9 ; Test and set bits $A9AB.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $12AB.w		; 6D AB 12 ; Add $12AB.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldy $3D06.w		; AC 06 3D ; Load $3D06.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $AB6D60.l		; AF 60 6D AB ; Load long $AB6D60.l into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $E114.w,X		; 1E 14 E1 ; Arithmetic shift left $E114.w,X [Reads: X Index] [Flags: ZNC]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $6D1893.l,X		; 7F 93 18 6D ; Add long $6D1893.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $60.b,X		; 94 60 ; Store Y register $60.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta ($ED.b,S),Y		; 93 ED ; Store accumulator (stack relative indirect indexed) ($ED.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $E114.w,X		; 1E 14 E1 ; Arithmetic shift left $E114.w,X [Reads: X Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $A6A6.w,X		; 3D A6 A6 ; AND accumulator with memory $A6A6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $A4A6.w		; 0C A6 A4 ; Test and set bits $A4A6.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $12A6.w		; 6D A6 12 ; Add $12A6.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda [$06.b]		; A7 06 ; Load accumulator (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $60AA.w,X		; 3D AA 60 ; AND accumulator with memory $60AA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $EDA6.w		; 6D A6 ED ; Add $EDA6.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $E114.w,X		; 1E 14 E1 ; Arithmetic shift left $E114.w,X [Reads: X Index] [Flags: ZNC]
	tsb $C908.w		; 0C 08 C9 ; Test and set bits $C908.w [Reads: Accumulator] [Flags: Z]
	.db $10, $C9		; 10 C9 ; Branch if plus to $10, $C9 [Flow: branch]
	tsb $3D.b		; 04 3D ; Test and set bits $3D.b [Reads: Accumulator] [Flags: Z]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $9FA1.w		; 0C A1 9F ; Test and set bits $9FA1.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $12A1.w		; 6D A1 12 ; Add $12A1.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: ZN]
	and $60A5.w,X		; 3D A5 60 ; AND accumulator with memory $60A5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $EDA1.w		; 6D A1 ED ; Add $EDA1.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: ZNC]
	tsb $7D.b		; 04 7D ; Test and set bits $7D.b [Reads: Accumulator] [Flags: Z]
	sta [$87.b]		; 87 87 ; Store accumulator (long) [$87.b] [Reads: Accumulator, Direct Page]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $7D0687.l,X		; 7F 87 06 7D ; Add long $7D0687.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $7B.b		; 06 7B ; Arithmetic shift left $7B.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora #$7C.b		; 09 7C ; Logical OR #$7C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora $C9.b,S		; 03 C9 ; OR accumulator with stack relative $C9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $7E.b		; 06 7E ; Arithmetic shift left $7E.b [Reads: Direct Page] [Flags: ZNC]
	sta [$06.b]		; 87 06 ; Store accumulator (long) [$06.b] [Reads: Accumulator, Direct Page]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sta [$06.b]		; 87 06 ; Store accumulator (long) [$06.b] [Reads: Accumulator, Direct Page]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta [$06.b]		; 87 06 ; Store accumulator (long) [$06.b] [Reads: Accumulator, Direct Page]
	ror $87.b,X		; 76 87 ; Rotate right $87.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $77.b		; 06 77 ; Arithmetic shift left $77.b [Reads: Direct Page] [Flags: ZNC]
	sta [$06.b]		; 87 06 ; Store accumulator (long) [$06.b] [Reads: Accumulator, Direct Page]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta [$06.b]		; 87 06 ; Store accumulator (long) [$06.b] [Reads: Accumulator, Direct Page]
	adc $0687.w,Y		; 79 87 06 ; Add $0687.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sta [$06.b]		; 87 06 ; Store accumulator (long) [$06.b] [Reads: Accumulator, Direct Page]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$06.b]		; 87 06 ; Store accumulator (long) [$06.b] [Reads: Accumulator, Direct Page]
	jmp ($0687.w,X)		; 7C 87 06 ; Jump indirect indexed to ($0687.w,X) [Reads: X Index] [Flow: jump]
	adc $0687.w,X		; 7D 87 06 ; Add $0687.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $0687.w,X		; 7E 87 06 ; Rotate right $0687.w,X [Reads: X Index] [Flags: ZNC]
	adc $0C8787.l,X		; 7F 87 87 0C ; Add long $0C8787.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$ED.b]		; 87 ED ; Store accumulator (long) [$ED.b] [Reads: Accumulator, Direct Page]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	tsb $7F4B.w		; 0C 4B 7F ; Test and set bits $7F4B.w [Reads: Accumulator] [Flags: Z]
	sta $E0.b,X		; 95 E0 ; Store accumulator to $E0.b,X [Reads: Accumulator, X Index]
	cop $06.b		; 02 06 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $7C.b		; 06 7C ; Arithmetic shift left $7C.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora $C9.b,S		; 03 C9 ; OR accumulator with stack relative $C9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ror $0687.w,X		; 7E 87 06 ; Rotate right $0687.w,X [Reads: X Index] [Flags: ZNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sta [$06.b]		; 87 06 ; Store accumulator (long) [$06.b] [Reads: Accumulator, Direct Page]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta [$06.b]		; 87 06 ; Store accumulator (long) [$06.b] [Reads: Accumulator, Direct Page]
	ror $87.b,X		; 76 87 ; Rotate right $87.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $77.b		; 06 77 ; Arithmetic shift left $77.b [Reads: Direct Page] [Flags: ZNC]
	sta [$06.b]		; 87 06 ; Store accumulator (long) [$06.b] [Reads: Accumulator, Direct Page]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta [$06.b]		; 87 06 ; Store accumulator (long) [$06.b] [Reads: Accumulator, Direct Page]
	adc $0687.w,Y		; 79 87 06 ; Add $0687.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sta [$06.b]		; 87 06 ; Store accumulator (long) [$06.b] [Reads: Accumulator, Direct Page]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$06.b]		; 87 06 ; Store accumulator (long) [$06.b] [Reads: Accumulator, Direct Page]
	jmp ($0687.w,X)		; 7C 87 06 ; Jump indirect indexed to ($0687.w,X) [Reads: X Index] [Flow: jump]
	adc $0687.w,X		; 7D 87 06 ; Add $0687.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $1587.w,X		; 7E 87 15 ; Rotate right $1587.w,X [Reads: X Index] [Flags: ZNC]
	adc $C90687.l,X		; 7F 87 06 C9 ; Add long $C90687.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E08C.w		; ED 8C E0 ; Subtract $E08C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl $E3.b,X		; 16 E3 ; Arithmetic shift left $E3.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	trb $E1.b		; 14 E1 ; Test and reset bits $E1.b [Reads: Accumulator] [Flags: Z]
	ora [$08.b]		; 07 08 ; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $B2B2.w,X		; 3D B2 B2 ; AND accumulator with memory $B2B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $B0B2.w		; 0C B2 B0 ; Test and set bits $B0B2.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $12B2.w		; 6D B2 12 ; Add $12B2.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($06.b,S),Y		; B3 06 ; Load accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $60B6.w,X		; 3D B6 60 ; AND accumulator with memory $60B6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $EDB2.w		; 6D B2 ED ; Add $EDB2.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldy #$E0.b		; A0 E0 ; Load #$E0.b into Y register [Writes: Y Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $17.b,S		; E3 17 ; Subtract stack-relative $17.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $E112.w,X		; 1E 12 E1 ; Arithmetic shift left $E112.w,X [Reads: X Index] [Flags: ZNC]
	ora #$10.b		; 09 10 ; Logical OR #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	tsb $3D.b		; 04 3D ; Test and set bits $3D.b [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	tsb $A9AB.w		; 0C AB A9 ; Test and set bits $A9AB.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $12AB.w		; 6D AB 12 ; Add $12AB.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldy $3D06.w		; AC 06 3D ; Load $3D06.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $AB6D58.l		; AF 58 6D AB ; Load long $AB6D58.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $EF14.w,X		; 1E 14 EF ; Arithmetic shift left $EF14.w,X [Reads: X Index] [Flags: ZNC]
	tsb $01D9.w		; 0C D9 01 ; Test and set bits $01D9.w [Reads: Accumulator] [Flags: Z]
	cmp #$AB.b		; C9 AB ; Compare #$AB.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$AB.b		; C9 AB ; Compare #$AB.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda #$C9.b		; A9 C9 ; Load #$C9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$AB.b		; A9 AB ; Load #$AB.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$AB.b		; C9 AB ; Compare #$AB.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	tsb $AB2D.w		; 0C 2D AB ; Test and set bits $AB2D.w [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldy $00AA.w		; AC AA 00 ; Load $00AA.w into Y register [Writes: Y Index] [Flags: ZN]
	sbc $E08C.w		; ED 8C E0 ; Subtract $E08C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $EF14.w,X		; 1E 14 EF ; Arithmetic shift left $EF14.w,X [Reads: X Index] [Flags: ZNC]
	lda [$D9.b]		; A7 D9 ; Load accumulator (long) [$D9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $C901D9.l,X		; 3F D9 01 C9 ; AND accumulator with memory (long,X) $C901D9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldx $C9.b		; A6 C9 ; Load $C9.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $A4.b		; A6 A4 ; Load $A4.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cmp #$A4.b		; C9 A4 ; Compare #$A4.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldx $C9.b		; A6 C9 ; Load $C9.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	asl $A6.b		; 06 A6 ; Arithmetic shift left $A6.b [Reads: Direct Page] [Flags: ZNC]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda [$A5.b]		; A7 A5 ; Load accumulator (long) [$A5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $1D.b,S		; E3 1D ; Subtract stack-relative $1D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $F9AB.w,X		; 7D AB F9 ; Add $F9AB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $0C.b		; 24 0C ; Test bits $0C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ldx $24.b		; A6 24 ; Load $24.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	adc $0CC8.w		; 6D C8 0C ; Add $0CC8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldy $08AE.w		; AC AE 08 ; Load $08AE.w into Y register [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldx $7D60.w		; AE 60 7D ; Load $7D60.w into X register [Writes: X Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sbc $0C24.w,Y		; F9 24 0C ; Subtract with carry $0C24.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $30.b		; A6 30 ; Load $30.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$ED.b		; C9 ED ; Compare #$ED.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $02D9B7.l		; EF B7 D9 02 ; Subtract with carry (long) $02D9B7.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $19.b,S		; E3 19 ; Subtract stack-relative $19.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $E117.w,X		; 1E 17 E1 ; Arithmetic shift left $E117.w,X [Reads: X Index] [Flags: ZNC]
	ora [$60.b]		; 07 60 ; OR accumulator with memory (long) [$60.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $04AB.w,Y		; 79 AB 04 ; Add $04AB.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $7B04.w		; AD 04 7B ; Load $7B04.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $7C04.w		; AE 04 7C ; Load $7C04.w into X register [Writes: X Index] [Flags: ZN]
	lda $B17D04.l		; AF 04 7D B1 ; Load long $B17D04.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $B22D.w		; 0C 2D B2 ; Test and set bits $B22D.w [Reads: Accumulator] [Flags: Z]
	cmp #$B2.b		; C9 B2 ; Compare #$B2.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda ($06.b)		; B2 06 ; Load accumulator (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $B5B5.w		; 0C B5 B5 ; Test and set bits $B5B5.w [Reads: Accumulator] [Flags: Z]
	asl $7B.b		; 06 7B ; Arithmetic shift left $7B.b [Reads: Direct Page] [Flags: ZNC]
	lda ($B2.b,S),Y		; B3 B2 ; Load accumulator (stack relative indirect indexed) ($B2.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($06.b),Y		; B1 06 ; Load accumulator ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	.db $B0, $ED		; B0 ED ; Branch if carry set to $B0, $ED [Flow: branch]
	sty $0AE0.w		; 8C E0 0A ; Store Y register to $0AE0.w [Reads: Y Index]
	sbc $1D.b,S		; E3 1D ; Subtract stack-relative $1D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $A6AB.w		; 6D AB A6 ; Add $A6AB.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	bit $C8.b		; 24 C8 ; Test bits $C8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $ACAB.w		; 0C AB AC ; Test and set bits $ACAB.w [Reads: Accumulator] [Flags: Z]
	ldx $C808.w		; AE 08 C8 ; Load $C808.w into X register [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldx $AB30.w		; AE 30 AB ; Load $AB30.w into X register [Writes: X Index] [Flags: ZN]
	ldx $C8.b		; A6 C8 ; Load $C8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cmp #$ED.b		; C9 ED ; Compare #$ED.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $0C14.w,X		; 1E 14 0C ; Arithmetic shift left $0C14.w,X [Reads: X Index] [Flags: ZNC]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $C9B0.w		; 2D B0 C9 ; Logical AND $C9B0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $B0, $AE		; B0 AE ; Branch if carry set to $B0, $AE [Flow: branch]
	cmp #$AE.b		; C9 AE ; Compare #$AE.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $C9		; B0 C9 ; Branch if carry set to $B0, $C9 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: ZNC]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	tsb $B02D.w		; 0C 2D B0 ; Test and set bits $B02D.w [Reads: Accumulator] [Flags: Z]
	.db $B0, $B1		; B0 B1 ; Branch if carry set to $B0, $B1 [Flow: branch]
	lda $C9B0C9.l		; AF C9 B0 C9 ; Load long $C9B0C9.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $B0, $AE		; B0 AE ; Branch if carry set to $B0, $AE [Flow: branch]
	cmp #$AE.b		; C9 AE ; Compare #$AE.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $C9		; B0 C9 ; Branch if carry set to $B0, $C9 [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: ZNC]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	tsb $B02D.w		; 0C 2D B0 ; Test and set bits $B02D.w [Reads: Accumulator] [Flags: Z]
	.db $B0, $B1		; B0 B1 ; Branch if carry set to $B0, $B1 [Flow: branch]
	lda $8CED00.l		; AF 00 ED 8C ; Load long $8CED00.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $3014.w,X		; 1E 14 30 ; Arithmetic shift left $3014.w,X [Reads: X Index] [Flags: ZNC]
	adc $A2A4.w,X		; 7D A4 A2 ; Add $A2A4.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $A3.b		; A5 A3 ; Load $A3.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $A4		; 30 A4 ; Branch if minus to $30, $A4 [Flow: branch]
	ldx #$A4.b		; A2 A4 ; Load #$A4.b into X register [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $A3.b		; A5 A3 ; Load $A3.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $19.b,S		; E3 19 ; Subtract stack-relative $19.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $EF17.w,X		; 1E 17 EF ; Arithmetic shift left $EF17.w,X [Reads: X Index] [Flags: ZNC]
	tsb $01D9.w		; 0C D9 01 ; Test and set bits $01D9.w [Reads: Accumulator] [Flags: Z]
	cmp #$AB.b		; C9 AB ; Compare #$AB.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$AB.b		; C9 AB ; Compare #$AB.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda #$C9.b		; A9 C9 ; Load #$C9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$AB.b		; A9 AB ; Load #$AB.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$AB.b		; C9 AB ; Compare #$AB.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	asl $AB.b		; 06 AB ; Arithmetic shift left $AB.b [Reads: Direct Page] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	tsb $ABAB.w		; 0C AB AB ; Test and set bits $ABAB.w [Reads: Accumulator] [Flags: Z]
	ldy $EDAA.w		; AC AA ED ; Load $EDAA.w into Y register [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $1D.b,S		; E3 1D ; Subtract stack-relative $1D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $F9B0.w,X		; 7D B0 F9 ; Add $F9B0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $0C.b		; 24 0C ; Test bits $0C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	bit $6D.b		; 24 6D ; Test bits $6D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $10B0.w		; 0C B0 10 ; Test and set bits $10B0.w [Reads: Accumulator] [Flags: Z]
	lda $08.b,X		; B5 08 ; Load $08.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($C8.b,S),Y		; B3 C8 ; Load accumulator (stack relative indirect indexed) ($C8.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($AF.b),Y		; B1 AF ; Load accumulator ($AF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $F9B0.w,X		; 7D B0 F9 ; Add $F9B0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $0C.b		; 24 0C ; Test bits $0C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	.db $30, $68		; 30 68 ; Branch if minus to $30, $68 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$ED.b		; C9 ED ; Compare #$ED.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $02D9CF.l		; EF CF D9 02 ; Subtract with carry (long) $02D9CF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $19.b,S		; E3 19 ; Subtract stack-relative $19.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $6017.w,X		; 1E 17 60 ; Arithmetic shift left $6017.w,X [Reads: X Index] [Flags: ZNC]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $04B0.w,Y		; 79 B0 04 ; Add $04B0.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda ($04.b)		; B2 04 ; Load accumulator (indirect) ($04.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($04.b,S),Y		; B3 04 ; Load accumulator (stack relative indirect indexed) ($04.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($04B4.w,X)		; 7C B4 04 ; Jump indirect indexed to ($04B4.w,X) [Reads: X Index] [Flow: jump]
	adc $0CB6.w,X		; 7D B6 0C ; Add $0CB6.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda [$24.b],Y		; B7 24 ; Load accumulator (long indexed) [$24.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $06C8.w		; 4D C8 06 ; Exclusive OR $06C8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $B7B7.w		; 2D B7 B7 ; Logical AND $B7B7.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $BABA.w		; 0C BA BA ; Test and set bits $BABA.w [Reads: Accumulator] [Flags: Z]
	asl $7D.b		; 06 7D ; Arithmetic shift left $7D.b [Reads: Direct Page] [Flags: ZNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	lda [$06.b],Y		; B7 06 ; Load accumulator (long indexed) [$06.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $06B6.w,X		; 7D B6 06 ; Add $06B6.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $EDB5.w		; 2D B5 ED ; Logical AND $EDB5.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sty $0AE0.w		; 8C E0 0A ; Store Y register to $0AE0.w [Reads: Y Index]
	sbc $1D.b,S		; E3 1D ; Subtract stack-relative $1D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $ABB0.w		; 6D B0 AB ; Add $ABB0.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	bit $C8.b		; 24 C8 ; Test bits $C8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $10B0.w		; 0C B0 10 ; Test and set bits $10B0.w [Reads: Accumulator] [Flags: Z]
	lda $08.b,X		; B5 08 ; Load $08.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($C8.b,S),Y		; B3 C8 ; Load accumulator (stack relative indirect indexed) ($C8.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($AF.b),Y		; B1 AF ; Load accumulator ($AF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $B0		; 30 B0 ; Branch if minus to $30, $B0 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cmp #$ED.b		; C9 ED ; Compare #$ED.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $19.b,S		; E3 19 ; Subtract stack-relative $19.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $E117.w,X		; 1E 17 E1 ; Arithmetic shift left $E117.w,X [Reads: X Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $B2B2.w		; 2D B2 B2 ; Logical AND $B2B2.w with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $B3B2.w		; 0C B2 B3 ; Test and set bits $B3B2.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $B3.b,X		; B5 B3 ; Load $B3.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($60.b)		; B2 60 ; Load accumulator (indirect) ($60.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $B3B2.w		; 0C B2 B3 ; Test and set bits $B3B2.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $B3.b,X		; B5 B3 ; Load $B3.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $2014.w,X		; 1E 14 20 ; Arithmetic shift left $2014.w,X [Reads: X Index] [Flags: ZNC]
	adc $0894.w,X		; 7D 94 08 ; Add $0894.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldy #$30.b		; A0 30 ; Load #$30.b into Y register [Writes: Y Index] [Flags: ZN]
	lda [$20.b]		; A7 20 ; Load accumulator (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($08.b,S),Y		; 93 08 ; Store accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sta $20A630.l,X		; 9F 30 A6 20 ; Store accumulator (long,X) $20A630.l,X [Reads: Accumulator, X Index]
	sty $08.b,X		; 94 08 ; Store Y register $08.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldy #$30.b		; A0 30 ; Load #$30.b into Y register [Writes: Y Index] [Flags: ZN]
	lda [$20.b]		; A7 20 ; Load accumulator (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($08.b,S),Y		; 93 08 ; Store accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sta $EDA630.l,X		; 9F 30 A6 ED ; Store accumulator (long,X) $EDA630.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $19.b,S		; E3 19 ; Subtract stack-relative $19.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $E117.w,X		; 1E 17 E1 ; Arithmetic shift left $E117.w,X [Reads: X Index] [Flags: ZNC]
	asl $60.b		; 06 60 ; Arithmetic shift left $60.b [Reads: Direct Page] [Flags: ZNC]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $AFAF.w		; 2D AF AF ; Logical AND $AFAF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $AF0CAF.l		; AF AF 0C AF ; Load long $AF0CAF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	lda ($B0.b)		; B2 B0 ; Load accumulator (indirect) ($B0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $18C960.l		; AF 60 C9 18 ; Load long $18C960.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $AF08AF.l		; AF AF 08 AF ; Load long $AF08AF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $B0AF0C.l		; AF 0C AF B0 ; Load long $B0AF0C.l into accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($B0.b)		; B2 B0 ; Load accumulator (indirect) ($B0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $E0C8ED.l		; AF ED C8 E0 ; Load long $E0C8ED.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $1D.b,S		; E3 1D ; Subtract stack-relative $1D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	sbc ($0F.b,X)		; E1 0F ; Subtract with carry ($0F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsr $A96D.w		; 20 6D A9 ; Jump to subroutine at $A96D.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda [$A6.b]		; A7 A6 ; Load accumulator (long) [$A6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0CA4.w		; 0C A4 0C ; Test and set bits $0CA4.w [Reads: Accumulator] [Flags: Z]
	eor $0CA6.w		; 4D A6 0C ; Exclusive OR $0CA6.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $B0A9.w,X		; 3D A9 B0 ; AND accumulator with memory $B0A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $01D9E7.l		; EF E7 D9 01 ; Subtract with carry (long) $01D9E7.l [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $EDAB.w,X		; 5D AB ED ; Exclusive OR accumulator with memory $EDAB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $02D9FA.l		; EF FA D9 02 ; Subtract with carry (long) $02D9FA.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cop $E1.b		; 02 E1 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $6D.b,S		; 03 6D ; OR accumulator with stack relative $6D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $68.b		; 06 68 ; Arithmetic shift left $68.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $6A.b		; 06 6A ; Arithmetic shift left $6A.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and ($C9.b,S),Y		; 33 C9 ; AND accumulator (stack relative indirect indexed) ($C9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $68.b		; 06 68 ; Arithmetic shift left $68.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $6A.b		; 06 6A ; Arithmetic shift left $6A.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and ($C9.b,S),Y		; 33 C9 ; AND accumulator (stack relative indirect indexed) ($C9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $08A9.w		; 6D A9 08 ; Add $08A9.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda [$A6.b]		; A7 A6 ; Load accumulator (long) [$A6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0CA4.w		; 0C A4 0C ; Test and set bits $0CA4.w [Reads: Accumulator] [Flags: Z]
	eor $0CA6.w		; 4D A6 0C ; Exclusive OR $0CA6.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $B0A9.w,X		; 3D A9 B0 ; AND accumulator with memory $B0A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $01D9E7.l		; EF E7 D9 01 ; Subtract with carry (long) $01D9E7.l [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	eor $E0AB.w,X		; 5D AB E0 ; Exclusive OR accumulator with memory $E0AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tsb $C960.w		; 0C 60 C9 ; Test and set bits $C960.w [Reads: Accumulator] [Flags: Z]
	jsr $A66D.w		; 20 6D A6 ; Jump to subroutine at $A66D.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $A2.b		; A4 A2 ; Load $A2.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	tsb $0CA0.w		; 0C A0 0C ; Test and set bits $0CA0.w [Reads: Accumulator] [Flags: Z]
	eor $0CA2.w		; 4D A2 0C ; Exclusive OR $0CA2.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $A6A4.w,X		; 3D A4 A6 ; AND accumulator with memory $A6A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr $A76D.w		; 20 6D A7 ; Jump to subroutine at $A76D.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx $A4.b		; A6 A4 ; Load $A4.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	tsb $0CA2.w		; 0C A2 0C ; Test and set bits $0CA2.w [Reads: Accumulator] [Flags: Z]
	eor $0CA4.w		; 4D A4 0C ; Exclusive OR $0CA4.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $A7A6.w,X		; 3D A6 A7 ; AND accumulator with memory $A7A6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $2814.w,X		; 1E 14 28 ; Arithmetic shift left $2814.w,X [Reads: X Index] [Flags: ZNC]
	adc $0896.w,X		; 7D 96 08 ; Add $0896.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $7830.w,X		; 9D 30 78 ; Store accumulator to $7830.w,X [Reads: Accumulator, X Index]
	ldx #$28.b		; A2 28 ; Load #$28.b into X register [Writes: X Index] [Flags: ZN]
	adc $0894.w,X		; 7D 94 08 ; Add $0894.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $30, $78		; 30 78 ; Branch if minus to $30, $78 [Flow: branch]
	ldy #$28.b		; A0 28 ; Load #$28.b into Y register [Writes: Y Index] [Flags: ZN]
	adc $0895.w,X		; 7D 95 08 ; Add $0895.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $30, $78		; 30 78 ; Branch if minus to $30, $78 [Flow: branch]
	lda ($28.b,X)		; A1 28 ; Load accumulator ($28.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $089A.w,X		; 7D 9A 08 ; Add $089A.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($30.b,X)		; A1 30 ; Load accumulator ($30.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ldx $E0.b		; A6 E0 ; Load $E0.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora #$40.b		; 09 40 ; Logical OR #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor $04B5.w,X		; 5D B5 04 ; Exclusive OR accumulator with memory $04B5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $08B5.w,X		; 3D B5 08 ; AND accumulator with memory $08B5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $EF.b,X		; B5 EF ; Load $EF.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$DA.b]		; 27 DA ; AND accumulator with memory (long) [$DA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $60.b		; 02 60 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $EDB9.w,X		; 5D B9 ED ; Exclusive OR accumulator with memory $EDB9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	jsr $A96D.w		; 20 6D A9 ; Jump to subroutine at $A96D.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda [$A6.b]		; A7 A6 ; Load accumulator (long) [$A6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0CA4.w		; 0C A4 0C ; Test and set bits $0CA4.w [Reads: Accumulator] [Flags: Z]
	eor $0CA6.w		; 4D A6 0C ; Exclusive OR $0CA6.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $ABA9.w,X		; 3D A9 AB ; AND accumulator with memory $ABA9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $01DA33.l		; EF 33 DA 01 ; Subtract with carry (long) $01DA33.l [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $EDB2.w		; 6D B2 ED ; Add $EDB2.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: ZNC]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $68.b		; 06 68 ; Arithmetic shift left $68.b [Reads: Direct Page] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $6A.b		; 06 6A ; Arithmetic shift left $6A.b [Reads: Direct Page] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $8A8A.w		; 0C 8A 8A ; Test and set bits $8A8A.w [Reads: Accumulator] [Flags: Z]
	tsb $8A2D.w		; 0C 2D 8A ; Test and set bits $8A2D.w [Reads: Accumulator] [Flags: Z]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr $885D.w		; 20 5D 88 ; Jump to subroutine at $885D.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $8888.w		; 0C 88 88 ; Test and set bits $8888.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	bit #$06.b		; 89 06 ; Test bits #$06.b with accumulator [Reads: Accumulator] [Flags: Z]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit #$06.b		; 89 06 ; Test bits #$06.b with accumulator [Reads: Accumulator] [Flags: Z]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	bit #$06.b		; 89 06 ; Test bits #$06.b with accumulator [Reads: Accumulator] [Flags: Z]
	adc #$89.b		; 69 89 ; Add #$89.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	asl $6A.b		; 06 6A ; Arithmetic shift left $6A.b [Reads: Direct Page] [Flags: ZNC]
	bit #$06.b		; 89 06 ; Test bits #$06.b with accumulator [Reads: Accumulator] [Flags: Z]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit #$06.b		; 89 06 ; Test bits #$06.b with accumulator [Reads: Accumulator] [Flags: Z]
	jmp ($0689.w)		; 6C 89 06 ; Jump indirect to ($0689.w) [Flow: jump]
	adc $0C89.w		; 6D 89 0C ; Add $0C89.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	bit #$89.b		; 89 89 ; Test bits #$89.b with accumulator [Reads: Accumulator] [Flags: Z]
	tsb $892D.w		; 0C 2D 89 ; Test and set bits $892D.w [Reads: Accumulator] [Flags: Z]
	bit #$20.b		; 89 20 ; Test bits #$20.b with accumulator [Reads: Accumulator] [Flags: Z]
	eor $088E.w,X		; 5D 8E 08 ; Exclusive OR accumulator with memory $088E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stx $0C8E.w		; 8E 8E 0C ; Store X register to $0C8E.w [Reads: X Index]
	stx $088E.w		; 8E 8E 08 ; Store X register to $088E.w [Reads: X Index]
	stx $8E8E.w		; 8E 8E 8E ; Store X register to $8E8E.w [Reads: X Index]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cop $E1.b		; 02 E1 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $6D.b,S		; 03 6D ; OR accumulator with stack relative $6D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $68.b		; 06 68 ; Arithmetic shift left $68.b [Reads: Direct Page] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $6A.b		; 06 6A ; Arithmetic shift left $6A.b [Reads: Direct Page] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($C9.b,S),Y		; 33 C9 ; AND accumulator (stack relative indirect indexed) ($C9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	bit #$06.b		; 89 06 ; Test bits #$06.b with accumulator [Reads: Accumulator] [Flags: Z]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit #$06.b		; 89 06 ; Test bits #$06.b with accumulator [Reads: Accumulator] [Flags: Z]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	bit #$06.b		; 89 06 ; Test bits #$06.b with accumulator [Reads: Accumulator] [Flags: Z]
	adc #$89.b		; 69 89 ; Add #$89.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	asl $6A.b		; 06 6A ; Arithmetic shift left $6A.b [Reads: Direct Page] [Flags: ZNC]
	bit #$06.b		; 89 06 ; Test bits #$06.b with accumulator [Reads: Accumulator] [Flags: Z]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit #$06.b		; 89 06 ; Test bits #$06.b with accumulator [Reads: Accumulator] [Flags: Z]
	jmp ($0689.w)		; 6C 89 06 ; Jump indirect to ($0689.w) [Flow: jump]
	adc $3389.w		; 6D 89 33 ; Add $3389.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$60.b		; C9 60 ; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $08A9.w		; 6D A9 08 ; Add $08A9.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda [$A6.b]		; A7 A6 ; Load accumulator (long) [$A6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0CA4.w		; 0C A4 0C ; Test and set bits $0CA4.w [Reads: Accumulator] [Flags: Z]
	eor $0CA6.w		; 4D A6 0C ; Exclusive OR $0CA6.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $ABA9.w,X		; 3D A9 AB ; AND accumulator with memory $ABA9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $01DA33.l		; EF 33 DA 01 ; Subtract with carry (long) $01DA33.l [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	adc $E0B2.w		; 6D B2 E0 ; Add $E0B2.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora [$40.b]		; 07 40 ; OR accumulator with memory (long) [$40.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor $04B2.w,X		; 5D B2 04 ; Exclusive OR accumulator with memory $04B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $08B2.w,X		; 3D B2 08 ; AND accumulator with memory $08B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($EF.b)		; B2 EF ; Load accumulator (indirect) ($EF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($DA.b)		; 52 DA ; Exclusive OR accumulator with memory (indirect) ($DA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $60.b		; 02 60 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $EFB0.w,X		; 5D B0 EF ; Exclusive OR accumulator with memory $EFB0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $01DA.w,X		; 5E DA 01 ; Logical shift right $01DA.w,X [Reads: X Index] [Flags: ZNC]
	sbc $01DA73.l		; EF 73 DA 01 ; Subtract with carry (long) $01DA73.l [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $00AE.w		; 6D AE 00 ; Add $00AE.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sbc $01DA82.l		; EF 82 DA 01 ; Subtract with carry (long) $01DA82.l [Writes: Accumulator] [Flags: ZVNC]
	tsb $9393.w		; 0C 93 93 ; Test and set bits $9393.w [Reads: Accumulator] [Flags: Z]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($E0.b,S),Y		; 93 E0 ; Store accumulator (stack relative indirect indexed) ($E0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc ($0F.b,X)		; E1 0F ; Subtract with carry ($0F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $03DAA7.l		; EF A7 DA 03 ; Subtract with carry (long) $03DAA7.l [Writes: Accumulator] [Flags: ZVNC]
	tsb $AB59.w		; 0C 59 AB ; Test and set bits $AB59.w [Reads: Accumulator] [Flags: Z]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor #$AB.b		; 49 AB ; Exclusive OR #$AB.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	tsb $AB69.w		; 0C 69 AB ; Test and set bits $AB69.w [Reads: Accumulator] [Flags: Z]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor #$AB.b		; 49 AB ; Exclusive OR #$AB.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$E1.b		; C9 E1 ; Compare #$E1.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	tsb $B9EF.w		; 0C EF B9 ; Test and set bits $B9EF.w [Reads: Accumulator] [Flags: Z]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cop $18.b		; 02 18 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $8C088C.l		; 6F 8C 08 8C ; Add with carry (long) $8C088C.l [Writes: Accumulator] [Flags: ZVNC]
	sty $248C.w		; 8C 8C 24 ; Store Y register to $248C.w [Reads: Y Index]
	sty $4D06.w		; 8C 06 4D ; Store Y register to $4D06.w [Reads: Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8A088A.l		; 6F 8A 08 8A ; Add with carry (long) $8A088A.l [Writes: Accumulator] [Flags: ZVNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $8A.b		; 24 8A ; Test bits $8A.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: ZNC]
	bit #$89.b		; 89 89 ; Test bits #$89.b with accumulator [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $890889.l		; 6F 89 08 89 ; Add with carry (long) $890889.l [Writes: Accumulator] [Flags: ZVNC]
	bit #$89.b		; 89 89 ; Test bits #$89.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit $89.b		; 24 89 ; Test bits $89.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: ZNC]
	sta [$87.b]		; 87 87 ; Store accumulator (long) [$87.b] [Reads: Accumulator, Direct Page]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $870887.l		; 6F 87 08 87 ; Add with carry (long) $870887.l [Writes: Accumulator] [Flags: ZVNC]
	sta [$87.b]		; 87 87 ; Store accumulator (long) [$87.b] [Reads: Accumulator, Direct Page]
	bit $87.b		; 24 87 ; Test bits $87.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: ZNC]
	sty $EF8C.w		; 8C 8C EF ; Store Y register to $EF8C.w [Reads: Y Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc ($DA.b,S),Y		; 73 DA ; Add with carry (stack relative indirect indexed) ($DA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($5A.b,X)		; 01 5A ; Logical OR ($5A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $EFAE.w		; 6D AE EF ; Add $EFAE.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sbc $3001DA.l,X		; FF DA 01 30 ; Subtract with carry (long,X) $3001DA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $A1.b		; A5 A1 ; Load $A1.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $10.b		; A4 10 ; Load $10.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx #$9E.b		; A2 9E ; Load #$9E.b into X register [Writes: X Index] [Flags: ZN]
	ldx #$60.b		; A2 60 ; Load #$60.b into X register [Writes: X Index] [Flags: ZN]
	sta $0BEF00.l,X		; 9F 00 EF 0B ; Store accumulator (long,X) $0BEF00.l,X [Reads: Accumulator, X Index]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	ora ($ED.b,X)		; 01 ED ; Logical OR ($ED.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ldy $E0.b,X		; B4 E0 ; Load Y register $E0.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc ($0F.b,X)		; E1 0F ; Subtract with carry ($0F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $02DAA7.l		; EF A7 DA 02 ; Subtract with carry (long) $02DAA7.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01DB3B.l		; EF 3B DB 01 ; Subtract with carry (long) $01DB3B.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $E1B4.w		; ED B4 E1 ; Subtract $E1B4.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tsb $5EEF.w		; 0C EF 5E ; Test and set bits $5EEF.w [Reads: Accumulator] [Flags: Z]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $DB.b,S		; C3 DB ; Compare accumulator (stack relative) $DB.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	ora ($54.b,X)		; 01 54 ; Logical OR ($54.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $4D0687.l		; 6F 87 06 4D ; Add with carry (long) $4D0687.l [Writes: Accumulator] [Flags: ZVNC]
	.db $82, $82, $E0		; 82 82 E0 ; Branch always long to $82, $82, $E0 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$3C.b		; C9 3C ; Compare #$3C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $0C9F.w		; 6D 9F 0C ; Add $0C9F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($A2.b,X)		; A1 A2 ; Load accumulator ($A2.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $30.b		; A6 30 ; Load $30.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $A1.b		; A5 A1 ; Load $A1.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	stz $58A1.w,X		; 9E A1 58 ; Store zero to $58A1.w,X [Reads: X Index]
	sta $DAFFEF.l,X		; 9F EF FF DA ; Store accumulator (long,X) $DAFFEF.l,X [Reads: Accumulator, X Index]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $A1.b		; A5 A1 ; Load $A1.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $10.b		; A4 10 ; Load $10.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx #$9E.b		; A2 9E ; Load #$9E.b into X register [Writes: X Index] [Flags: ZN]
	ldx #$42.b		; A2 42 ; Load #$42.b into X register [Writes: X Index] [Flags: ZN]
	sta $060BE0.l,X		; 9F E0 0B 06 ; Store accumulator (long,X) $060BE0.l,X [Reads: Accumulator, X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $B0AE.w		; AD AE B0 ; Load $B0AE.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $01DB0B.l		; EF 0B DB 01 ; Subtract with carry (long) $01DB0B.l [Writes: Accumulator] [Flags: ZVNC]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc ($0F.b,X)		; E1 0F ; Subtract with carry ($0F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $02DAA7.l		; EF A7 DA 02 ; Subtract with carry (long) $02DAA7.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01DB3B.l		; EF 3B DB 01 ; Subtract with carry (long) $01DB3B.l [Writes: Accumulator] [Flags: ZVNC]
	sbc ($0C.b,X)		; E1 0C ; Subtract with carry ($0C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $01DB5E.l		; EF 5E DB 01 ; Subtract with carry (long) $01DB5E.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01DBC3.l		; EF C3 DB 01 ; Subtract with carry (long) $01DBC3.l [Writes: Accumulator] [Flags: ZVNC]
	mvn $87,$6F		; 54 6F 87 ; Move block negative $87,$6F [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: ZNC]
	sty $E08C.w		; 8C 8C E0 ; Store Y register to $E08C.w [Reads: Y Index]
	asl $E1.b,X		; 16 E1 ; Arithmetic shift left $E1.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $E38C.w		; ED 8C E3 ; Subtract $E38C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl $1414.w,X		; 1E 14 14 ; Arithmetic shift left $1414.w,X [Reads: X Index] [Flags: ZNC]
	bit $AB6D.w,X		; 3C 6D AB ; Test bits $AB6D.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	tsb $AEAD.w		; 0C AD AE ; Test and set bits $AEAD.w [Reads: Accumulator] [Flags: Z]
	lda ($30.b)		; B2 30 ; Load accumulator (indirect) ($30.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($AD.b),Y		; B1 AD ; Load accumulator ($AD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
	ldx $AEAA.w		; AE AA AE ; Load $AEAA.w into X register [Writes: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$3C.b		; C9 3C ; Compare #$3C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $0C9F.w		; 6D 9F 0C ; Add $0C9F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($A2.b,X)		; A1 A2 ; Load accumulator ($A2.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $30.b		; A6 30 ; Load $30.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $A1.b		; A5 A1 ; Load $A1.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	stz $58A1.w,X		; 9E A1 58 ; Store zero to $58A1.w,X [Reads: X Index]
	sta $DA5EEF.l,X		; 9F EF 5E DA ; Store accumulator (long,X) $DA5EEF.l,X [Reads: Accumulator, X Index]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $06B2.w		; 6D B2 06 ; Add $06B2.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and $B2B2.w		; 2D B2 B2 ; Logical AND $B2B2.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $AEB2.w		; 0C B2 AE ; Test and set bits $AEB2.w [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda ($24.b)		; B2 24 ; Load accumulator (indirect) ($24.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $06B0.w		; 6D B0 06 ; Add $06B0.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and $B0B0.w		; 2D B0 B0 ; Logical AND $B0B0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $AAB0.w		; 0C B0 AA ; Test and set bits $AAB0.w [Reads: Accumulator] [Flags: Z]
	lda [$B0.b]		; A7 B0 ; Load accumulator (long) [$B0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $82, $DA, $01		; 82 DA 01 ; Branch always long to $82, $DA, $01 [Flow: branch]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc ($0F.b,X)		; E1 0F ; Subtract with carry ($0F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $02DBD9.l		; EF D9 DB 02 ; Subtract with carry (long) $02DBD9.l [Writes: Accumulator] [Flags: ZVNC]
	tsb $AA59.w		; 0C 59 AA ; Test and set bits $AA59.w [Reads: Accumulator] [Flags: Z]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor #$AA.b		; 49 AA ; Exclusive OR #$AA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tsb $AA59.w		; 0C 59 AA ; Test and set bits $AA59.w [Reads: Accumulator] [Flags: Z]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor #$AA.b		; 49 AA ; Exclusive OR #$AA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tsb $5D0C.w		; 0C 0C 5D ; Test and set bits $5D0C.w [Reads: Accumulator] [Flags: Z]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	and $08A7.w,Y		; 39 A7 08 ; AND accumulator with memory $08A7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	jmp $390CB0.l		; 5C B0 0C 39 ; Jump long to $390CB0.l [Flow: jump]
	lda [$08.b]		; A7 08 ; Load accumulator (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	and $B0B0.w,Y		; 39 B0 B0 ; AND accumulator with memory $B0B0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $AE5D.w		; 0C 5D AE ; Test and set bits $AE5D.w [Reads: Accumulator] [Flags: Z]
	tsb $A639.w		; 0C 39 A6 ; Test and set bits $A639.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	tsb $AE5C.w		; 0C 5C AE ; Test and set bits $AE5C.w [Reads: Accumulator] [Flags: Z]
	tsb $A639.w		; 0C 39 A6 ; Test and set bits $A639.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ldx $3908.w		; AE 08 39 ; Load $3908.w into X register [Writes: X Index] [Flags: ZN]
	ldx $0CAE.w		; AE AE 0C ; Load $0CAE.w into X register [Writes: X Index] [Flags: ZN]
	eor $0CAD.w,X		; 5D AD 0C ; Exclusive OR accumulator with memory $0CAD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $08A7.w,Y		; 39 A7 08 ; AND accumulator with memory $08A7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $AD5C.w		; 0C 5C AD ; Test and set bits $AD5C.w [Reads: Accumulator] [Flags: Z]
	tsb $A739.w		; 0C 39 A7 ; Test and set bits $A739.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lda $3908.w		; AD 08 39 ; Load $3908.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $20AD.w		; AD AD 20 ; Load $20AD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $4F088C.l		; 6F 8C 08 4F ; Add with carry (long) $4F088C.l [Writes: Accumulator] [Flags: ZVNC]
	sty $0C8C.w		; 8C 8C 0C ; Store Y register to $0C8C.w [Reads: Y Index]
	adc $088C8C.l		; 6F 8C 8C 08 ; Add with carry (long) $088C8C.l [Writes: Accumulator] [Flags: ZVNC]
	eor $8C8C.w		; 4D 8C 8C ; Exclusive OR $8C8C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sty $6F20.w		; 8C 20 6F ; Store Y register to $6F20.w [Reads: Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $0C8A8A.l		; 4F 8A 8A 0C ; Exclusive OR accumulator with memory (long) $0C8A8A.l [Writes: Accumulator] [Flags: ZN]
	adc $088A8A.l		; 6F 8A 8A 08 ; Add with carry (long) $088A8A.l [Writes: Accumulator] [Flags: ZVNC]
	eor $8A8A.w		; 4D 8A 8A ; Exclusive OR $8A8A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr $896F.w		; 20 6F 89 ; Jump to subroutine at $896F.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit #$89.b		; 89 89 ; Test bits #$89.b with accumulator [Reads: Accumulator] [Flags: Z]
	tsb $8989.w		; 0C 89 89 ; Test and set bits $8989.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $8787.w		; 4D 87 87 ; Exclusive OR $8787.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta [$E0.b]		; 87 E0 ; Store accumulator (long) [$E0.b] [Reads: Accumulator, Direct Page]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora #$E3.b		; 09 E3 ; Logical OR #$E3.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $181B.w,X		; 1D 1B 18 ; OR accumulator with memory $181B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $6D.b		; 24 6D ; Test bits $6D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	asl $2D.b		; 06 2D ; Arithmetic shift left $2D.b [Reads: Direct Page] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	tsb $A8AB.w		; 0C AB A8 ; Test and set bits $A8AB.w [Reads: Accumulator] [Flags: Z]
	lda $AB.b,S		; A3 AB ; Load accumulator (stack relative) $AB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $6D.b		; 24 6D ; Test bits $6D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	and $A9A9.w		; 2D A9 A9 ; Logical AND $A9A9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $A6A9.w		; 0C A9 A6 ; Test and set bits $A6A9.w [Reads: Accumulator] [Flags: Z]
	ldx #$A9.b		; A2 A9 ; Load #$A9.b into X register [Writes: X Index] [Flags: ZN]
	bit $6D.b		; 24 6D ; Test bits $6D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	lda [$06.b]		; A7 06 ; Load accumulator (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $A7A7.w		; 2D A7 A7 ; Logical AND $A7A7.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $A4A7.w		; 0C A7 A4 ; Test and set bits $A4A7.w [Reads: Accumulator] [Flags: Z]
	ldx #$A7.b		; A2 A7 ; Load #$A7.b into X register [Writes: X Index] [Flags: ZN]
	sbc $01DAE8.l		; EF E8 DA 01 ; Subtract with carry (long) $01DAE8.l [Writes: Accumulator] [Flags: ZVNC]
	bit $6D.b		; 24 6D ; Test bits $6D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	lda ($06.b)		; B2 06 ; Load accumulator (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $B2B2.w		; 2D B2 B2 ; Logical AND $B2B2.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $AEB2.w		; 0C B2 AE ; Test and set bits $AEB2.w [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda ($24.b)		; B2 24 ; Load accumulator (indirect) ($24.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $06B0.w		; 6D B0 06 ; Add $06B0.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and $B0B0.w		; 2D B0 B0 ; Logical AND $B0B0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $AAB0.w		; 0C B0 AA ; Test and set bits $AAB0.w [Reads: Accumulator] [Flags: Z]
	lda [$06.b]		; A7 06 ; Load accumulator (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $E7		; B0 E7 ; Branch if carry set to $B0, $E7 [Flow: branch]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $6014.w,X		; 1E 14 60 ; Arithmetic shift left $6014.w,X [Reads: X Index] [Flags: ZNC]
	adc $C9A6.w		; 6D A6 C9 ; Add $C9A6.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sbc $01D90C.l		; EF 0C D9 01 ; Subtract with carry (long) $01D90C.l [Writes: Accumulator] [Flags: ZVNC]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $D9.b		; 25 D9 ; Logical AND $D9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $EF01D9.l,X		; 3F D9 01 EF ; AND accumulator with memory (long,X) $EF01D9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $ED01.w,Y		; D9 01 ED ; Compare accumulator $ED01.w,Y [Reads: Y Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $1D.b,S		; E3 1D ; Subtract stack-relative $1D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	sbc ($07.b,X)		; E1 07 ; Subtract with carry ($07.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $E1AE.w		; 6D AE E1 ; Add $E1AE.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora $C9C9C9.l		; 0F C9 C9 C9 ; OR accumulator with memory (long) $C9C9C9.l [Writes: Accumulator] [Flags: ZN]
	sbc $01D976.l		; EF 76 D9 01 ; Subtract with carry (long) $01D976.l [Writes: Accumulator] [Flags: ZVNC]
	asl $C9.b		; 06 C9 ; Arithmetic shift left $C9.b [Reads: Direct Page] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $5AAE.w		; 6D AE 5A ; Add $5AAE.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$60.b		; C9 60 ; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $E08C.w		; ED 8C E0 ; Subtract $E08C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $1D.b,S		; E3 1D ; Subtract stack-relative $1D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $C9AB.w		; 2D AB C9 ; Logical AND $C9AB.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda #$C9.b		; A9 C9 ; Load #$C9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$AB.b		; A9 AB ; Load #$AB.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$AB.b		; C9 AB ; Compare #$AB.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	tsb $AB2D.w		; 0C 2D AB ; Test and set bits $AB2D.w [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldy $00AA.w		; AC AA 00 ; Load $00AA.w into Y register [Writes: Y Index] [Flags: ZN]
	sbc $E08C.w		; ED 8C E0 ; Subtract $E08C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $E114.w,X		; 1E 14 E1 ; Arithmetic shift left $E114.w,X [Reads: X Index] [Flags: ZNC]
	ora $30.b		; 05 30 ; Logical OR $30.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $9D9F.w,X		; 7D 9F 9D ; Add $9D9F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $9EA018.l,X		; 9F 18 A0 9E ; Store accumulator (long,X) $9EA018.l,X [Reads: Accumulator, X Index]
	.db $30, $9F		; 30 9F ; Branch if minus to $30, $9F [Flow: branch]
	sta $189F.w,X		; 9D 9F 18 ; Store accumulator to $189F.w,X [Reads: Accumulator, X Index]
	ldy #$9E.b		; A0 9E ; Load #$9E.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $19.b,S		; E3 19 ; Subtract stack-relative $19.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $0C17.w,X		; 1E 17 0C ; Arithmetic shift left $0C17.w,X [Reads: X Index] [Flags: ZNC]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $C9A6.w		; 2D A6 C9 ; Logical AND $C9A6.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $A4.b		; A6 A4 ; Load $A4.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cmp #$A4.b		; C9 A4 ; Compare #$A4.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldx $C9.b		; A6 C9 ; Load $C9.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: ZNC]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	tsb $A62D.w		; 0C 2D A6 ; Test and set bits $A62D.w [Reads: Accumulator] [Flags: Z]
	ldx $A7.b		; A6 A7 ; Load $A7.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$A6.b		; C9 A6 ; Compare #$A6.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$A6.b		; C9 A6 ; Compare #$A6.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldy $C9.b		; A4 C9 ; Load $C9.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $A6.b		; A4 A6 ; Load $A6.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cmp #$A6.b		; C9 A6 ; Compare #$A6.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	eor $A6A6.w		; 4D A6 A6 ; Exclusive OR $A6A6.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $A62D.w		; 0C 2D A6 ; Test and set bits $A62D.w [Reads: Accumulator] [Flags: Z]
	ldx $A7.b		; A6 A7 ; Load $A7.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $1887.w		; 6D 87 18 ; Add $1887.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta [$0C.b]		; 87 0C ; Store accumulator (long) [$0C.b] [Reads: Accumulator, Direct Page]
	sta [$24.b]		; 87 24 ; Store accumulator (long) [$24.b] [Reads: Accumulator, Direct Page]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	sta [$C9.b]		; 87 C9 ; Store accumulator (long) [$C9.b] [Reads: Accumulator, Direct Page]
	sta [$87.b]		; 87 87 ; Store accumulator (long) [$87.b] [Reads: Accumulator, Direct Page]
	asl $87.b		; 06 87 ; Arithmetic shift left $87.b [Reads: Direct Page] [Flags: ZNC]
	sta [$0C.b]		; 87 0C ; Store accumulator (long) [$0C.b] [Reads: Accumulator, Direct Page]
	sta [$87.b]		; 87 87 ; Store accumulator (long) [$87.b] [Reads: Accumulator, Direct Page]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	stx $87.b		; 86 87 ; Store X register to $87.b [Reads: X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $0C87.w,X		; 3D 87 0C ; AND accumulator with memory $0C87.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$24.b]		; 87 24 ; Store accumulator (long) [$24.b] [Reads: Accumulator, Direct Page]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	adc $C987.w		; 6D 87 C9 ; Add $C987.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta [$87.b]		; 87 87 ; Store accumulator (long) [$87.b] [Reads: Accumulator, Direct Page]
	asl $87.b		; 06 87 ; Arithmetic shift left $87.b [Reads: Direct Page] [Flags: ZNC]
	sta [$0C.b]		; 87 0C ; Store accumulator (long) [$0C.b] [Reads: Accumulator, Direct Page]
	sta [$87.b]		; 87 87 ; Store accumulator (long) [$87.b] [Reads: Accumulator, Direct Page]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	sta $189F9D.l,X		; 9F 9D 9F 18 ; Store accumulator (long,X) $189F9D.l,X [Reads: Accumulator, X Index]
	ldy #$9E.b		; A0 9E ; Load #$9E.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $30, $9F		; 30 9F ; Branch if minus to $30, $9F [Flow: branch]
	sta $189F.w,X		; 9D 9F 18 ; Store accumulator to $189F.w,X [Reads: Accumulator, X Index]
	ldy #$9E.b		; A0 9E ; Load #$9E.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1887.w,X		; 3D 87 18 ; AND accumulator with memory $1887.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$0C.b]		; 87 0C ; Store accumulator (long) [$0C.b] [Reads: Accumulator, Direct Page]
	sta [$24.b]		; 87 24 ; Store accumulator (long) [$24.b] [Reads: Accumulator, Direct Page]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	adc $C987.w		; 6D 87 C9 ; Add $C987.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta [$87.b]		; 87 87 ; Store accumulator (long) [$87.b] [Reads: Accumulator, Direct Page]
	asl $87.b		; 06 87 ; Arithmetic shift left $87.b [Reads: Direct Page] [Flags: ZNC]
	sta [$0C.b]		; 87 0C ; Store accumulator (long) [$0C.b] [Reads: Accumulator, Direct Page]
	sta [$87.b]		; 87 87 ; Store accumulator (long) [$87.b] [Reads: Accumulator, Direct Page]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	tsb $8C3D.w		; 0C 3D 8C ; Test and set bits $8C3D.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	sty $8C0C.w		; 8C 0C 8C ; Store Y register to $8C0C.w [Reads: Y Index]
	bit $8A.b		; 24 8A ; Test bits $8A.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $8C6D.w		; 0C 6D 8C ; Test and set bits $8C6D.w [Reads: Accumulator] [Flags: Z]
	cmp #$8C.b		; C9 8C ; Compare #$8C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sty $8C06.w		; 8C 06 8C ; Store Y register to $8C06.w [Reads: Y Index]
	sty $8C0C.w		; 8C 0C 8C ; Store Y register to $8C0C.w [Reads: Y Index]
	sty $8B8D.w		; 8C 8D 8B ; Store Y register to $8B8D.w [Reads: Y Index]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $20AB.w,X		; 5D AB 20 ; Exclusive OR accumulator with memory $20AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $08A9.w		; 6D A9 08 ; Add $08A9.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda [$A6.b]		; A7 A6 ; Load accumulator (long) [$A6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0CA4.w		; 0C A4 0C ; Test and set bits $0CA4.w [Reads: Accumulator] [Flags: Z]
	eor $0CA6.w		; 4D A6 0C ; Exclusive OR $0CA6.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $B0A9.w,X		; 3D A9 B0 ; AND accumulator with memory $B0A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $0688.w		; 6D 88 06 ; Add $0688.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $68.b		; 06 68 ; Arithmetic shift left $68.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $6A.b		; 06 6A ; Arithmetic shift left $6A.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $8888.w		; 0C 88 88 ; Test and set bits $8888.w [Reads: Accumulator] [Flags: Z]
	tsb $882D.w		; 0C 2D 88 ; Test and set bits $882D.w [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	jsr $875D.w		; 20 5D 87 ; Jump to subroutine at $875D.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta [$87.b]		; 87 87 ; Store accumulator (long) [$87.b] [Reads: Accumulator, Direct Page]
	tsb $8787.w		; 0C 87 87 ; Test and set bits $8787.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta [$87.b]		; 87 87 ; Store accumulator (long) [$87.b] [Reads: Accumulator, Direct Page]
	sta [$00.b]		; 87 00 ; Store accumulator (long) [$00.b] [Reads: Accumulator, Direct Page]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor $04B7.w,X		; 5D B7 04 ; Exclusive OR accumulator with memory $04B7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $B7B7.w,X		; 3D B7 B7 ; AND accumulator with memory $B7B7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $AE6D.w		; 20 6D AE ; Jump to subroutine at $AE6D.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $0CAB.w		; AC AB 0C ; Load $0CAB.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	eor $0CAB.w		; 4D AB 0C ; Exclusive OR $0CAB.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $AEAC.w,X		; 3D AC AE ; AND accumulator with memory $AEAC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr $B06D.w		; 20 6D B0 ; Jump to subroutine at $B06D.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx $0CAD.w		; AE AD 0C ; Load $0CAD.w into X register [Writes: X Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	tsb $AD4D.w		; 0C 4D AD ; Test and set bits $AD4D.w [Reads: Accumulator] [Flags: Z]
	tsb $AE3D.w		; 0C 3D AE ; Test and set bits $AE3D.w [Reads: Accumulator] [Flags: Z]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor $04B0.w,X		; 5D B0 04 ; Exclusive OR accumulator with memory $04B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $B0B0.w,X		; 3D B0 B0 ; AND accumulator with memory $B0B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: ZNC]
	sbc ($07.b,X)		; E1 07 ; Subtract with carry ($07.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	trb $24.b		; 14 24 ; Test and reset bits $24.b [Reads: Accumulator] [Flags: Z]
	adc $06B3.w		; 6D B3 06 ; Add $06B3.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and $B3B3.w		; 2D B3 B3 ; Logical AND $B3B3.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $B0B3.w		; 0C B3 B0 ; Test and set bits $B0B3.w [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda ($00.b,S),Y		; B3 00 ; Load accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $24B2.w		; 6D B2 24 ; Add $24B2.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	and $B0B0.w		; 2D B0 B0 ; Logical AND $B0B0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $ABB0.w		; 0C B0 AB ; Test and set bits $ABB0.w [Reads: Accumulator] [Flags: Z]
	lda [$B0.b]		; A7 B0 ; Load accumulator (long) [$B0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $986D.w		; 0C 6D 98 ; Test and set bits $986D.w [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $9696.w		; 0C 96 96 ; Test and set bits $9696.w [Reads: Accumulator] [Flags: Z]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $0C.b,Y		; 96 0C ; Store X register $0C.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $95.b,X		; 95 95 ; Store accumulator to $95.b,X [Reads: Accumulator, X Index]
	sta $95.b,X		; 95 95 ; Store accumulator to $95.b,X [Reads: Accumulator, X Index]
	sta $95.b,X		; 95 95 ; Store accumulator to $95.b,X [Reads: Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $95.b,X		; 95 95 ; Store accumulator to $95.b,X [Reads: Accumulator, X Index]
	sta $00.b,X		; 95 00 ; Store accumulator to $00.b,X [Reads: Accumulator, X Index]
	tsb $AB59.w		; 0C 59 AB ; Test and set bits $AB59.w [Reads: Accumulator] [Flags: Z]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor #$AB.b		; 49 AB ; Exclusive OR #$AB.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	tsb $AB59.w		; 0C 59 AB ; Test and set bits $AB59.w [Reads: Accumulator] [Flags: Z]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor #$AB.b		; 49 AB ; Exclusive OR #$AB.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	tsb $B05D.w		; 0C 5D B0 ; Test and set bits $B05D.w [Reads: Accumulator] [Flags: Z]
	tsb $A739.w		; 0C 39 A7 ; Test and set bits $A739.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	jmp $390CB0.l		; 5C B0 0C 39 ; Jump long to $390CB0.l [Flow: jump]
	lda [$0C.b]		; A7 0C ; Load accumulator (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	and $0CA7.w,Y		; 39 A7 0C ; AND accumulator with memory $0CA7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $0CAE.w,X		; 5D AE 0C ; Exclusive OR accumulator with memory $0CAE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $08A6.w,Y		; 39 A6 08 ; AND accumulator with memory $08A6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	tsb $AE5C.w		; 0C 5C AE ; Test and set bits $AE5C.w [Reads: Accumulator] [Flags: Z]
	tsb $A639.w		; 0C 39 A6 ; Test and set bits $A639.w [Reads: Accumulator] [Flags: Z]
	tsb $AE4B.w		; 0C 4B AE ; Test and set bits $AE4B.w [Reads: Accumulator] [Flags: Z]
	tsb $A639.w		; 0C 39 A6 ; Test and set bits $A639.w [Reads: Accumulator] [Flags: Z]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc ($0E.b,X)		; E1 0E ; Subtract with carry ($0E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	asl $C9.b		; 06 C9 ; Arithmetic shift left $C9.b [Reads: Direct Page] [Flags: ZNC]
	bit $6D.b		; 24 6D ; Test bits $6D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	lda ($06.b,S),Y		; B3 06 ; Load accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $B3B3.w		; 2D B3 B3 ; Logical AND $B3B3.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $B0B3.w		; 0C B3 B0 ; Test and set bits $B0B3.w [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda ($00.b,S),Y		; B3 00 ; Load accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc ($07.b,X)		; E1 07 ; Subtract with carry ($07.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $9F6D.w,X		; 3C 6D 9F ; Test bits $9F6D.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	tsb $A2A1.w		; 0C A1 A2 ; Test and set bits $A2A1.w [Reads: Accumulator] [Flags: Z]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	tsb $936D.w		; 0C 6D 93 ; Test and set bits $936D.w [Reads: Accumulator] [Flags: Z]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($08.b,S),Y		; 93 08 ; Store accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($0C.b,S),Y		; 93 0C ; Store accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta $95.b,X		; 95 95 ; Store accumulator to $95.b,X [Reads: Accumulator, X Index]
	sta $95.b,X		; 95 95 ; Store accumulator to $95.b,X [Reads: Accumulator, X Index]
	sta $95.b,X		; 95 95 ; Store accumulator to $95.b,X [Reads: Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $95.b,X		; 95 95 ; Store accumulator to $95.b,X [Reads: Accumulator, X Index]
	sta $0C.b,X		; 95 0C ; Store accumulator to $0C.b,X [Reads: Accumulator, X Index]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Accumulator, Direct Page]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Accumulator, Direct Page]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Accumulator, Direct Page]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Accumulator, Direct Page]
	sta ($0C.b)		; 92 0C ; Store accumulator (indirect) ($0C.b) [Reads: Accumulator, Direct Page]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($00.b,S),Y		; 93 00 ; Store accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	tsb $AD59.w		; 0C 59 AD ; Test and set bits $AD59.w [Reads: Accumulator] [Flags: Z]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor #$AD.b		; 49 AD ; Exclusive OR #$AD.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $0CAD.w		; AD AD 0C ; Load $0CAD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	eor $C9AD.w,Y		; 59 AD C9 ; Exclusive OR accumulator with memory $C9AD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $AD49.w		; 0C 49 AD ; Test and set bits $AD49.w [Reads: Accumulator] [Flags: Z]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor $C9AB.w,Y		; 59 AB C9 ; Exclusive OR accumulator with memory $C9AB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor #$AB.b		; 49 AB ; Exclusive OR #$AB.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	tsb $AB59.w		; 0C 59 AB ; Test and set bits $AB59.w [Reads: Accumulator] [Flags: Z]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor #$AB.b		; 49 AB ; Exclusive OR #$AB.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	tsb $AE5D.w		; 0C 5D AE ; Test and set bits $AE5D.w [Reads: Accumulator] [Flags: Z]
	tsb $A639.w		; 0C 39 A6 ; Test and set bits $A639.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ldx $3908.w		; AE 08 39 ; Load $3908.w into X register [Writes: X Index] [Flags: ZN]
	ldx $0CAE.w		; AE AE 0C ; Load $0CAE.w into X register [Writes: X Index] [Flags: ZN]
	jmp $390CAE.l		; 5C AE 0C 39 ; Jump long to $390CAE.l [Flow: jump]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ldx $390C.w		; AE 0C 39 ; Load $390C.w into X register [Writes: X Index] [Flags: ZN]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	eor $0CB1.w,X		; 5D B1 0C ; Exclusive OR accumulator with memory $0CB1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $08A8.w,Y		; 39 A8 08 ; AND accumulator with memory $08A8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lda ($08.b),Y		; B1 08 ; Load accumulator ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $B1B1.w,Y		; 39 B1 B1 ; AND accumulator with memory $B1B1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $B15C.w		; 0C 5C B1 ; Test and set bits $B15C.w [Reads: Accumulator] [Flags: Z]
	tsb $A839.w		; 0C 39 A8 ; Test and set bits $A839.w [Reads: Accumulator] [Flags: Z]
	tsb $B14B.w		; 0C 4B B1 ; Test and set bits $B14B.w [Reads: Accumulator] [Flags: Z]
	tsb $A839.w		; 0C 39 A8 ; Test and set bits $A839.w [Reads: Accumulator] [Flags: Z]
	tsb $B05D.w		; 0C 5D B0 ; Test and set bits $B05D.w [Reads: Accumulator] [Flags: Z]
	tsb $A739.w		; 0C 39 A7 ; Test and set bits $A739.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	and $B0B0.w,Y		; 39 B0 B0 ; AND accumulator with memory $B0B0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $B05C.w		; 0C 5C B0 ; Test and set bits $B05C.w [Reads: Accumulator] [Flags: Z]
	tsb $A739.w		; 0C 39 A7 ; Test and set bits $A739.w [Reads: Accumulator] [Flags: Z]
	tsb $B04B.w		; 0C 4B B0 ; Test and set bits $B04B.w [Reads: Accumulator] [Flags: Z]
	tsb $A739.w		; 0C 39 A7 ; Test and set bits $A739.w [Reads: Accumulator] [Flags: Z]
	tsb $AE5D.w		; 0C 5D AE ; Test and set bits $AE5D.w [Reads: Accumulator] [Flags: Z]
	tsb $A639.w		; 0C 39 A6 ; Test and set bits $A639.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ldx $3908.w		; AE 08 39 ; Load $3908.w into X register [Writes: X Index] [Flags: ZN]
	ldx $0CAE.w		; AE AE 0C ; Load $0CAE.w into X register [Writes: X Index] [Flags: ZN]
	jmp $390CAE.l		; 5C AE 0C 39 ; Jump long to $390CAE.l [Flow: jump]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ldx $390C.w		; AE 0C 39 ; Load $390C.w into X register [Writes: X Index] [Flags: ZN]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	mvn $87,$6F		; 54 6F 87 ; Move block negative $87,$6F [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: ZNC]
	bit #$89.b		; 89 89 ; Test bits #$89.b with accumulator [Reads: Accumulator] [Flags: Z]
	mvn $89,$6F		; 54 6F 89 ; Move block negative $89,$6F [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: ZNC]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	mvn $86,$6F		; 54 6F 86 ; Move block negative $86,$6F [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: ZNC]
	sta [$87.b]		; 87 87 ; Store accumulator (long) [$87.b] [Reads: Accumulator, Direct Page]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $C9AB.w,Y		; 59 AB C9 ; Exclusive OR accumulator with memory $C9AB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor #$AB.b		; 49 AB ; Exclusive OR #$AB.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	tsb $AB59.w		; 0C 59 AB ; Test and set bits $AB59.w [Reads: Accumulator] [Flags: Z]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor #$AB.b		; 49 AB ; Exclusive OR #$AB.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	asl $1EDC.w		; 0E DC 1E ; Arithmetic shift left $1EDC.w [Flags: ZNC]
	jmp.w [$DC2E]		; DC 2E DC ; Jump long indirect [$DC2E] [Flow: jump]
	rol $4EDC.w,X		; 3E DC 4E ; Rotate left $4EDC.w,X [Reads: X Index] [Flags: ZNC]
	jmp.w [$00FF]		; DC FF 00 ; Jump long indirect [$00FF] [Flow: jump]
	sbc ($DB.b)		; F2 DB ; Subtract with carry (indirect) ($DB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $9DDC.w,X		; 7E DC 9D ; Rotate right $9DDC.w,X [Reads: X Index] [Flags: ZNC]
	jmp.w [$DCAC]		; DC AC DC ; Jump long indirect [$DCAC] [Flow: jump]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jmp.w [$DCCA]		; DC CA DC ; Jump long indirect [$DCCA] [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $DEDC.w,Y		; D9 DC DE ; Compare accumulator $DEDC.w,Y [Reads: Y Index] [Flags: ZNC]
	jmp.w [$DCE5]		; DC E5 DC ; Jump long indirect [$DCE5] [Flow: jump]
	cpx $F3DC.w		; EC DC F3 ; Compare $F3DC.w with X register [Reads: X Index] [Flags: ZNC]
	jmp.w [$DCFA]		; DC FA DC ; Jump long indirect [$DCFA] [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$DD.b		; 09 DD ; Logical OR #$DD.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $DD.b		; 25 DD ; Logical AND $DD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $DD53DD.l,X		; 3F DD 53 DD ; AND accumulator with memory (long,X) $DD53DD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cmp $DD8C.w,X		; DD 8C DD ; Compare accumulator $DD8C.w,X [Reads: X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $DDB0DD.l,X		; 9F DD B0 DD ; Store accumulator (long,X) $DDB0DD.l,X [Reads: Accumulator, X Index]
	cpy #$DD.b		; C0 DD ; Compare #$DD.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $DD		; D0 DD ; Branch if not equal to $D0, $DD [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$DD.b		; E0 DD ; Compare #$DD.b with X register [Reads: X Index] [Flags: ZNC]
	sbc ($DD.b),Y		; F1 DD ; Subtract with carry ($DD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $DE.b		; 06 DE ; Arithmetic shift left $DE.b [Reads: Direct Page] [Flags: ZNC]
	asl $DE.b,X		; 16 DE ; Arithmetic shift left $DE.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	rol $DE.b		; 26 DE ; Rotate left $DE.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvn $86,$DE		; 54 DE 86 ; Move block negative $86,$DE [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	dec $DEB7.w,X		; DE B7 DE ; Decrement memory $DEB7.w,X [Reads: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $DF08.w,X		; DE 08 DF ; Decrement memory $DF08.w,X [Reads: X Index] [Flags: ZN]
	bit $DF.b		; 24 DF ; Test bits $DF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cmp $77DF52.l,X		; DF 52 DF 77 ; Compare accumulator (long,X) $77DF52.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $B0DFA0.l,X		; DF A0 DF B0 ; Compare accumulator (long,X) $B0DFA0.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $00DFCA.l,X		; DF CA DF 00 ; Compare accumulator (long,X) $00DFCA.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CE.b		; 00 CE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $F4DFDF.l,X		; DF DF DF F4 ; Compare accumulator (long,X) $F4DFDF.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $00E004.l,X		; DF 04 E0 00 ; Compare accumulator (long,X) $00E004.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$E5.b],Y		; 17 E5 ; OR accumulator with memory (long indexed) [$E5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc [$0E.b]		; E7 0E ; Subtract with carry (long) [$0E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $F802.w,X		; 1E 02 F8 ; Arithmetic shift left $F802.w,X [Reads: X Index] [Flags: ZNC]
	asl $2828.w,X		; 1E 28 28 ; Arithmetic shift left $2828.w,X [Reads: X Index] [Flags: ZNC]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	trb $18.b		; 14 18 ; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	asl $7D60.w,X		; 1E 60 7D ; Arithmetic shift left $7D60.w,X [Reads: X Index] [Flags: ZNC]
	sta $00C8.w,Y		; 99 C8 00 ; Store accumulator to $00C8.w,Y [Reads: Accumulator, Y Index]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	trb $18.b		; 14 18 ; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	asl $C90C.w,X		; 1E 0C C9 ; Arithmetic shift left $C90C.w,X [Reads: X Index] [Flags: ZNC]
	mvn $93,$7D		; 54 7D 93 ; Move block negative $93,$7D [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	trb $18.b		; 14 18 ; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	asl $C918.w,X		; 1E 18 C9 ; Arithmetic shift left $C918.w,X [Reads: X Index] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $6092.w,X		; 7D 92 60 ; Add $6092.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	trb $18.b		; 14 18 ; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	asl $C924.w,X		; 1E 24 C9 ; Arithmetic shift left $C924.w,X [Reads: X Index] [Flags: ZNC]
	bit $9E7D.w,X		; 3C 7D 9E ; Test bits $9E7D.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	trb $18.b		; 14 18 ; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	asl $C930.w,X		; 1E 30 C9 ; Arithmetic shift left $C930.w,X [Reads: X Index] [Flags: ZNC]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $C899.w,X		; 7D 99 C8 ; Add $C899.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $6093.w,X		; 7D 93 60 ; Add $6093.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $6092.w,X		; 7D 92 60 ; Add $6092.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $C9.b		; 24 C9 ; Test bits $C9.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $9E7D.w,X		; 3C 7D 9E ; Test bits $9E7D.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $30, $C9		; 30 C9 ; Branch if minus to $30, $C9 [Flow: branch]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $C93C.w,X		; 1E 3C C9 ; Arithmetic shift left $C93C.w,X [Reads: X Index] [Flags: ZNC]
	bit $7D.b		; 24 7D ; Test bits $7D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $189B.w,X		; 7D 9B 18 ; Add $189B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$30.b],Y		; 97 30 ; Store accumulator (long indexed) [$30.b],Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $54C80C.l,X		; 9F 0C C8 54 ; Store accumulator (long,X) $54C80C.l,X [Reads: Accumulator, X Index]
	sty $E8.b,X		; 94 E8 ; Store Y register $E8.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $9348.w,X		; 1D 48 93 ; OR accumulator with memory $9348.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx #$60.b		; A2 60 ; Load #$60.b into X register [Writes: X Index] [Flags: ZN]
	ldx #$60.b		; A2 60 ; Load #$60.b into X register [Writes: X Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $309C.w,X		; 7D 9C 30 ; Add $309C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $C8.b		; 24 C8 ; Test bits $C8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $189E.w,X		; 3C 9E 18 ; Test bits $189E.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta ($0C.b,S),Y		; 93 0C ; Store accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta ($0C.b)		; 92 0C ; Store accumulator (indirect) ($0C.b) [Reads: Accumulator, Direct Page]
	lda ($60.b,X)		; A1 60 ; Load accumulator ($60.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($60.b,X)		; A1 60 ; Load accumulator ($60.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $309D.w,X		; 7D 9D 30 ; Add $309D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	stx $60.b,Y		; 96 60 ; Store X register $60.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda [$60.b]		; A7 60 ; Load accumulator (long) [$60.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $C9.b		; 24 C9 ; Test bits $C9.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $A17D.w,X		; 3C 7D A1 ; Test bits $A17D.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	.db $30, $C8		; 30 C8 ; Branch if minus to $30, $C8 [Flow: branch]
	bit $24C8.w,X		; 3C C8 24 ; Test bits $24C8.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sta $60.b,X		; 95 60 ; Store accumulator to $60.b,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $C8.b		; 24 C8 ; Test bits $C8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $6097.w,X		; 3C 97 60 ; Test bits $6097.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sta [$E0.b],Y		; 97 E0 ; Store accumulator (long indexed) [$E0.b],Y [Reads: Accumulator, Direct Page, Y Index]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $7D0C97.l,X		; 7F 97 0C 7D ; Add long $7D0C97.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$97.b],Y		; 97 97 ; Store accumulator (long indexed) [$97.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$0C.b],Y		; 97 0C ; Store accumulator (long indexed) [$0C.b],Y [Reads: Accumulator, Direct Page, Y Index]
	adc $7D0C97.l,X		; 7F 97 0C 7D ; Add long $7D0C97.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$97.b],Y		; 97 97 ; Store accumulator (long indexed) [$97.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$30.b],Y		; 97 30 ; Store accumulator (long indexed) [$30.b],Y [Reads: Accumulator, Direct Page, Y Index]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $C8A0.w,X		; 7D A0 C8 ; Add $C8A0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvn $0C,$C8		; 54 C8 0C ; Move block negative $0C,$C8 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sta $C860.w,X		; 9D 60 C8 ; Store accumulator to $C860.w,X [Reads: Accumulator, X Index]
	.db $30, $C8		; 30 C8 ; Branch if minus to $30, $C8 [Flow: branch]
	sta $9D60.w,X		; 9D 60 9D ; Store accumulator to $9D60.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $24C9.w,X		; 3C C9 24 ; Test bits $24C9.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	adc $3098.w,X		; 7D 98 30 ; Add $3098.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; [PATTERN: Memory clearing operation] C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	stz $C83C.w		; 9C 3C C8 ; Store zero to $C83C.w
	bit $9C.b		; 24 9C ; Test bits $9C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $5860.w		; 9C 60 58 ; Store zero to $5860.w
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $01E015.l		; EF 15 E0 01 ; Subtract with carry (long) $01E015.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01E021.l		; EF 21 E0 01 ; Subtract with carry (long) $01E021.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01E02C.l		; EF 2C E0 01 ; Subtract with carry (long) $01E02C.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01E021.l		; EF 21 E0 01 ; Subtract with carry (long) $01E021.l [Writes: Accumulator] [Flags: ZVNC]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$E0.b],Y		; 37 E0 ; AND accumulator with memory (long indexed) [$E0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $42, $E0		; 42 E0 ; Reserved instruction
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jmp $01E0.w		; 4C E0 01 ; Jump to $01E0.w [Flow: jump]
	sbc $01E042.l		; EF 42 E0 01 ; Subtract with carry (long) $01E042.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01E056.l		; EF 56 E0 01 ; Subtract with carry (long) $01E056.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01E062.l		; EF 62 E0 01 ; Subtract with carry (long) $01E062.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01E06D.l		; EF 6D E0 01 ; Subtract with carry (long) $01E06D.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01E062.l		; EF 62 E0 01 ; Subtract with carry (long) $01E062.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $02E078.l		; EF 78 E0 02 ; Subtract with carry (long) $02E078.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $02E085.l		; EF 85 E0 02 ; Subtract with carry (long) $02E085.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $02E092.l		; EF 92 E0 02 ; Subtract with carry (long) $02E092.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $02E085.l		; EF 85 E0 02 ; Subtract with carry (long) $02E085.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01E015.l		; EF 15 E0 01 ; Subtract with carry (long) $01E015.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01E021.l		; EF 21 E0 01 ; Subtract with carry (long) $01E021.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01E02C.l		; EF 2C E0 01 ; Subtract with carry (long) $01E02C.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01E09F.l		; EF 9F E0 01 ; Subtract with carry (long) $01E09F.l [Writes: Accumulator] [Flags: ZVNC]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$E0.b],Y		; 37 E0 ; AND accumulator with memory (long indexed) [$E0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $42, $E0		; 42 E0 ; Reserved instruction
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jmp $01E0.w		; 4C E0 01 ; Jump to $01E0.w [Flow: jump]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $18.b,S		; A3 18 ; Load accumulator (stack relative) $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $C8.b,S		; A3 C8 ; Load accumulator (stack relative) $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $EF.b,S		; A3 EF ; Load accumulator (stack relative) $EF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr $E0.b,X		; 56 E0 ; Logical shift right $E0.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $62, $E0, $01		; 62 E0 01 ; Push effective relative address $62, $E0, $01 [Writes: Stack Pointer]
	sbc $01E06D.l		; EF 6D E0 01 ; Subtract with carry (long) $01E06D.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01E0AA.l		; EF AA E0 01 ; Subtract with carry (long) $01E0AA.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $02E078.l		; EF 78 E0 02 ; Subtract with carry (long) $02E078.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $02E085.l		; EF 85 E0 02 ; Subtract with carry (long) $02E085.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $02E092.l		; EF 92 E0 02 ; Subtract with carry (long) $02E092.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $02E0B5.l		; EF B5 E0 02 ; Subtract with carry (long) $02E0B5.l [Writes: Accumulator] [Flags: ZVNC]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $48DC.w		; ED DC 48 ; Subtract $48DC.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	adc $0CAD.w,X		; 7D AD 0C ; Add $0CAD.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $48AD.w		; AC AD 48 ; Load $48AD.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $ACAD0C.l		; AF 0C AD AC ; Load long $ACAD0C.l into accumulator [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $A4.b		; A5 A4 ; Load $A4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $0CAB.w,X		; 7D AB 0C ; Add $0CAB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $AB0C.w		; AD 0C AB ; Load $AB0C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $48.b,S		; A3 48 ; Load accumulator (stack relative) $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $A2.b,S		; A3 A2 ; Load accumulator (stack relative) $A2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lda $0C.b,S		; A3 0C ; Load accumulator (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $24A9.w,X		; 7D A9 24 ; Add $24A9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $54C8.w		; 6D C8 54 ; Add $54C8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $0CA9.w,X		; 7D A9 0C ; Add $0CA9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	bit $A8.b		; 24 A8 ; Test bits $A8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $C86D.w		; 0C 6D C8 ; Test and set bits $C86D.w [Reads: Accumulator] [Flags: Z]
	mvn $A8,$7D		; 54 7D A8 ; Move block negative $A8,$7D [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $30C9.w		; 0C C9 30 ; Test and set bits $30C9.w [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	bit $AB.b		; 24 AB ; Test bits $AB.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $C86D.w		; 0C 6D C8 ; Test and set bits $C86D.w [Reads: Accumulator] [Flags: Z]
	mvn $AB,$7D		; 54 7D AB ; Move block negative $AB,$7D [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $30C9.w		; 0C C9 30 ; Test and set bits $30C9.w [Reads: Accumulator] [Flags: Z]
	ldy $AC24.w		; AC 24 AC ; Load $AC24.w into Y register [Writes: Y Index] [Flags: ZN]
	tsb $C86D.w		; 0C 6D C8 ; Test and set bits $C86D.w [Reads: Accumulator] [Flags: Z]
	mvn $AC,$7D		; 54 7D AC ; Move block negative $AC,$7D [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $18AA.w,X		; 7D AA 18 ; Add $18AA.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $48C8.w		; 6D C8 48 ; Add $48C8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $18AA.w,X		; 7D AA 18 ; Add $18AA.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $48C8.w		; 6D C8 48 ; Add $48C8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $18A9.w,X		; 7D A9 18 ; Add $18A9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldy $AC18.w		; AC 18 AC ; Load $AC18.w into Y register [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $48C8.w		; 6D C8 48 ; Add $48C8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $18AC.w,X		; 7D AC 18 ; Add $18AC.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $AD18.w		; AD 18 AD ; Load $AD18.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $48C8.w		; 6D C8 48 ; Add $48C8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $24AD.w,X		; 7D AD 24 ; Add $24AD.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $0CB1.w,X		; 7D B1 0C ; Add $0CB1.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($24.b),Y		; B1 24 ; Load accumulator ($24.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $3CC8.w		; 6D C8 3C ; Add $3CC8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $24B1.w,X		; 7D B1 24 ; Add $24B1.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	.db $B0, $24		; B0 24 ; Branch if carry set to $B0, $24 [Flow: branch]
	adc $3CC8.w		; 6D C8 3C ; Add $3CC8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $24B0.w,X		; 7D B0 24 ; Add $24B0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda ($0C.b,S),Y		; B3 0C ; Load accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($24.b,S),Y		; B3 24 ; Load accumulator (stack relative indirect indexed) ($24.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $3CC8.w		; 6D C8 3C ; Add $3CC8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $24B3.w,X		; 7D B3 24 ; Add $24B3.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldy $0C.b,X		; B4 0C ; Load Y register $0C.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $24.b,X		; B4 24 ; Load Y register $24.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	adc $3CC8.w		; 6D C8 3C ; Add $3CC8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $EFB4.w,X		; 7D B4 EF ; Add $EFB4.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
.ACCU 16
	rep #$E0		; C2 E0
	cop $EF.b		; 02 EF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $0C02E0.l		; CF E0 02 0C ; Compare accumulator (long) $0C02E0.l [Reads: Accumulator] [Flags: ZNC]
	eor $5D0C9D.l,X		; 5F 9D 0C 5D ; Exclusive OR accumulator with memory (long,X) $5D0C9D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $9D9D.w,X		; 9D 9D 9D ; Store accumulator to $9D9D.w,X [Reads: Accumulator, X Index]
	sta $9D9D.w,X		; 9D 9D 9D ; Store accumulator to $9D9D.w,X [Reads: Accumulator, X Index]
	sta $9D9D.w,X		; 9D 9D 9D ; Store accumulator to $9D9D.w,X [Reads: Accumulator, X Index]
	sta $9D9D.w,X		; 9D 9D 9D ; Store accumulator to $9D9D.w,X [Reads: Accumulator, X Index]
	sta $9D9D.w,X		; 9D 9D 9D ; Store accumulator to $9D9D.w,X [Reads: Accumulator, X Index]
	sbc $02E0DC.l		; EF DC E0 02 ; Subtract with carry (long) $02E0DC.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $EFDC.w		; ED DC EF ; Subtract $EFDC.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc $E0.b		; E5 E0 ; Subtract $E0.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $B0, $3C		; B0 3C ; Branch if carry set to $B0, $3C [Flow: branch]
	lda $A8A90C.l		; AF 0C A9 A8 ; Load long $A8A90C.l into accumulator [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $0CA7.w,X		; 3C A7 0C ; Test bits $0CA7.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ldx $A7.b		; A6 A7 ; Load $A7.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldy $B248.w		; AC 48 B2 ; Load $B248.w into Y register [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx $AD60.w		; AE 60 AD ; Load $AD60.w into X register [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $01E0F1.l		; EF F1 E0 01 ; Subtract with carry (long) $01E0F1.l [Writes: Accumulator] [Flags: ZVNC]
	tsb $30C9.w		; 0C C9 30 ; Test and set bits $30C9.w [Reads: Accumulator] [Flags: Z]
	adc $24A9.w,X		; 7D A9 24 ; Add $24A9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda #$C80C.w		; A9 0C C8 ; Load #$C80C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	mvn $0C,$A9		; 54 A9 0C ; Move block negative $0C,$A9 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cmp #$A830.w		; C9 30 A8 ; Compare #$A830.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	bit $A8.b		; 24 A8 ; Test bits $A8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $54C8.w		; 0C C8 54 ; Test and set bits $54C8.w [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tsb $30C9.w		; 0C C9 30 ; Test and set bits $30C9.w [Reads: Accumulator] [Flags: Z]
	lda [$24.b]		; A7 24 ; Load accumulator (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$0C.b]		; A7 0C ; Load accumulator (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	mvn $0C,$A7		; 54 A7 0C ; Move block negative $0C,$A7 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cmp #$A630.w		; C9 30 A6 ; Compare #$A630.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	bit $A6.b		; 24 A6 ; Test bits $A6.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $54C8.w		; 0C C8 54 ; Test and set bits $54C8.w [Reads: Accumulator] [Flags: Z]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$7D30.w		; C9 30 7D ; Compare #$7D30.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$A930.w		; C9 30 A9 ; Compare #$A930.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda #$48C8.w		; A9 C8 48 ; Load #$48C8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$C918.w		; A9 18 C9 ; Load #$C918.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $30, $A8		; 30 A8 ; Branch if minus to $30, $A8 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$A730.w		; C9 30 A7 ; Compare #$A730.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda [$C8.b]		; A7 C8 ; Load accumulator (long) [$C8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda [$24.b]		; A7 24 ; Load accumulator (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$7D30.w		; C9 30 7D ; Compare #$7D30.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda ($0C.b),Y		; B1 0C ; Load accumulator ($0C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($24.b),Y		; B1 24 ; Load accumulator ($24.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $24B1.w,X		; 3C B1 24 ; Test bits $24B1.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cmp #$B030.w		; C9 30 B0 ; Compare #$B030.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	tsb $24B0.w		; 0C B0 24 ; Test and set bits $24B0.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $24B0.w,X		; 3C B0 24 ; Test bits $24B0.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cmp #$AF30.w		; C9 30 AF ; Compare #$AF30.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	tsb $24AF.w		; 0C AF 24 ; Test and set bits $24AF.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $24AF.w,X		; 3C AF 24 ; Test bits $24AF.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cmp #$AE30.w		; C9 30 AE ; Compare #$AE30.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	tsb $24AE.w		; 0C AE 24 ; Test and set bits $24AE.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $EFAE.w,X		; 3C AE EF ; Test bits $EFAE.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
.ACCU 16
	rep #$E0		; C2 E0
	cop $EF.b		; 02 EF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $EF02E0.l		; CF E0 02 EF ; Compare accumulator (long) $EF02E0.l [Reads: Accumulator] [Flags: ZNC]
	jsr $02E1.w		; 20 E1 02 ; Jump to subroutine at $02E1.w [Writes: Stack Pointer] [Flow: call]
	sbc $02E12D.l		; EF 2D E1 02 ; Subtract with carry (long) $02E12D.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01E0E5.l		; EF E5 E0 01 ; Subtract with carry (long) $01E0E5.l [Writes: Accumulator] [Flags: ZVNC]
	tsb $3CAF.w		; 0C AF 3C ; Test and set bits $3CAF.w [Reads: Accumulator] [Flags: Z]
	ldx $A90C.w		; AE 0C A9 ; Load $A90C.w into X register [Writes: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $0CA7.w,X		; 3C A7 0C ; Test bits $0CA7.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ldx $A7.b		; A6 A7 ; Load $A7.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $AF48.w		; AE 48 AF ; Load $AF48.w into X register [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda ($60.b),Y		; B1 60 ; Load accumulator ($60.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $AE		; B0 AE ; Branch if carry set to $B0, $AE [Flow: branch]
	sbc $01E0F1.l		; EF F1 E0 01 ; Subtract with carry (long) $01E0F1.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01E015.l		; EF 15 E0 01 ; Subtract with carry (long) $01E015.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01E021.l		; EF 21 E0 01 ; Subtract with carry (long) $01E021.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01E02C.l		; EF 2C E0 01 ; Subtract with carry (long) $01E02C.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01E09F.l		; EF 9F E0 01 ; Subtract with carry (long) $01E09F.l [Writes: Accumulator] [Flags: ZVNC]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$E0.b],Y		; 37 E0 ; AND accumulator with memory (long indexed) [$E0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $42, $E0		; 42 E0 ; Reserved instruction
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jmp $01E0.w		; 4C E0 01 ; Jump to $01E0.w [Flow: jump]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$A330.w		; C9 30 A3 ; Compare #$A330.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $C8.b,S		; A3 C8 ; Load accumulator (stack relative) $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $EF.b,S		; A3 EF ; Load accumulator (stack relative) $EF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr $E0.b,X		; 56 E0 ; Logical shift right $E0.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $62, $E0, $01		; 62 E0 01 ; Push effective relative address $62, $E0, $01 [Writes: Stack Pointer]
	sbc $01E06D.l		; EF 6D E0 01 ; Subtract with carry (long) $01E06D.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01E0AA.l		; EF AA E0 01 ; Subtract with carry (long) $01E0AA.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $02E078.l		; EF 78 E0 02 ; Subtract with carry (long) $02E078.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $02E085.l		; EF 85 E0 02 ; Subtract with carry (long) $02E085.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $02E092.l		; EF 92 E0 02 ; Subtract with carry (long) $02E092.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $02E0B5.l		; EF B5 E0 02 ; Subtract with carry (long) $02E0B5.l [Writes: Accumulator] [Flags: ZVNC]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$7D30.w		; C9 30 7D ; Compare #$7D30.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	mvn $00,$A5		; 54 A5 00 ; Move block negative $00,$A5 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $30C9.w		; 0C C9 30 ; Test and set bits $30C9.w [Reads: Accumulator] [Flags: Z]
	ldy $24.b		; A4 24 ; Load $24.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	mvn $00,$A4		; 54 A4 00 ; Move block negative $00,$A4 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $30C9.w		; 0C C9 30 ; Test and set bits $30C9.w [Reads: Accumulator] [Flags: Z]
	lda $24.b,S		; A3 24 ; Load accumulator (stack relative) $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $0C.b,S		; A3 0C ; Load accumulator (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	mvn $00,$A3		; 54 A3 00 ; Move block negative $00,$A3 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$7D30.w		; C9 30 7D ; Compare #$7D30.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldx $18.b		; A6 18 ; Load $18.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $C8.b		; A6 C8 ; Load $C8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$A530.w		; C9 30 A5 ; Compare #$A530.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$A430.w		; C9 30 A4 ; Compare #$A430.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $C8.b		; A4 C8 ; Load $C8.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	bit $C9.b		; 24 C9 ; Test bits $C9.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	lda $AD0C.w		; AD 0C AD ; Load $AD0C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	bit $C8.b		; 24 C8 ; Test bits $C8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $00AD.w,X		; 3C AD 00 ; Test bits $00AD.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	bit $C9.b		; 24 C9 ; Test bits $C9.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	.db $30, $AC		; 30 AC ; Branch if minus to $30, $AC [Flow: branch]
	tsb $24AC.w		; 0C AC 24 ; Test and set bits $24AC.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $00AC.w,X		; 3C AC 00 ; Test bits $00AC.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	bit $C9.b		; 24 C9 ; Test bits $C9.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	.db $30, $AB		; 30 AB ; Branch if minus to $30, $AB [Flow: branch]
	tsb $24AB.w		; 0C AB 24 ; Test and set bits $24AB.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $00AB.w,X		; 3C AB 00 ; Test bits $00AB.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	tsb $975F.w		; 0C 5F 97 ; Test and set bits $975F.w [Reads: Accumulator] [Flags: Z]
	tsb $975D.w		; 0C 5D 97 ; Test and set bits $975D.w [Reads: Accumulator] [Flags: Z]
	sta [$97.b],Y		; 97 97 ; Store accumulator (long indexed) [$97.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$97.b],Y		; 97 97 ; Store accumulator (long indexed) [$97.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$97.b],Y		; 97 97 ; Store accumulator (long indexed) [$97.b],Y [Reads: Accumulator, Direct Page, Y Index]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $5D0C96.l,X		; 5F 96 0C 5D ; Exclusive OR accumulator with memory (long,X) $5D0C96.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $96.b,Y		; 96 96 ; Store X register $96.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $00.b,Y		; 96 00 ; Store X register $00.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tsb $955F.w		; 0C 5F 95 ; Test and set bits $955F.w [Reads: Accumulator] [Flags: Z]
	tsb $955D.w		; 0C 5D 95 ; Test and set bits $955D.w [Reads: Accumulator] [Flags: Z]
	sta $95.b,X		; 95 95 ; Store accumulator to $95.b,X [Reads: Accumulator, X Index]
	sta $95.b,X		; 95 95 ; Store accumulator to $95.b,X [Reads: Accumulator, X Index]
	sta $95.b,X		; 95 95 ; Store accumulator to $95.b,X [Reads: Accumulator, X Index]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$A230.w		; C9 30 A2 ; Compare #$A230.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	bit $A2.b		; 24 A2 ; Test bits $A2.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $54C8.w		; 0C C8 54 ; Test and set bits $54C8.w [Reads: Accumulator] [Flags: Z]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	bit $C9.b		; 24 C9 ; Test bits $C9.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	.db $30, $AA		; 30 AA ; Branch if minus to $30, $AA [Flow: branch]
	tsb $24AA.w		; 0C AA 24 ; Test and set bits $24AA.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $00AA.w,X		; 3C AA 00 ; Test bits $00AA.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	tsb $945F.w		; 0C 5F 94 ; Test and set bits $945F.w [Reads: Accumulator] [Flags: Z]
	tsb $945D.w		; 0C 5D 94 ; Test and set bits $945D.w [Reads: Accumulator] [Flags: Z]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sty $94.b,X		; 94 94 ; Store Y register $94.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $5D0C9B.l,X		; 5F 9B 0C 5D ; Exclusive OR accumulator with memory (long,X) $5D0C9B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $5D0C9A.l,X		; 5F 9A 0C 5D ; Exclusive OR accumulator with memory (long,X) $5D0C9A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; [PATTERN: Memory clearing operation] 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	brk $9E.b		; 00 9E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $9E9E.w,X		; 9E 9E 9E ; Store zero to $9E9E.w,X [Reads: X Index]
	stz $9E9E.w,X		; 9E 9E 9E ; Store zero to $9E9E.w,X [Reads: X Index]
	stz $3C00.w,X		; 9E 00 3C ; Store zero to $3C00.w,X [Reads: X Index]
	adc $0CA2.w,X		; 7D A2 0C ; Add $0CA2.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $A9.b		; A5 A9 ; Load $A9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($48.b),Y		; B1 48 ; Load accumulator ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $18		; B0 18 ; Branch if carry set to $B0, $18 [Flow: branch]
	ldy $E000.w		; AC 00 E0 ; Load $E000.w into Y register [Writes: Y Index] [Flags: ZN]
	ora ($ED.b),Y		; 11 ED ; OR accumulator with memory ($ED.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $0CB1.w,X		; 7D B1 0C ; Add $0CB1.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $B1		; B0 B1 ; Branch if carry set to $B0, $B1 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda ($0C.b,S),Y		; B3 0C ; Load accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($B0.b),Y		; B1 B0 ; Load accumulator ($B0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$C848.w		; A9 48 C8 ; Load #$C848.w into accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$08A8.w		; A9 A8 08 ; Load #$08A8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lda #$7D48.w		; A9 48 7D ; Load #$7D48.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AFAE0C.l		; AF 0C AE AF ; Load long $AFAE0C.l into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda ($0C.b),Y		; B1 0C ; Load accumulator ($0C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $A760AE.l		; AF AE 60 A7 ; Load long $A760AE.l into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda [$A6.b]		; A7 A6 ; Load accumulator (long) [$A6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $995F.w		; 0C 5F 99 ; Test and set bits $995F.w [Reads: Accumulator] [Flags: Z]
	tsb $995D.w		; 0C 5D 99 ; Test and set bits $995D.w [Reads: Accumulator] [Flags: Z]
	sta $9999.w,Y		; 99 99 99 ; Store accumulator to $9999.w,Y [Reads: Accumulator, Y Index]
	sta $9999.w,Y		; 99 99 99 ; Store accumulator to $9999.w,Y [Reads: Accumulator, Y Index]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $5D0C98.l,X		; 5F 98 0C 5D ; Exclusive OR accumulator with memory (long,X) $5D0C98.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $56.b		; 00 56 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($46.b,X)		; E1 46 ; Subtract with carry ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($66.b,X)		; E1 66 ; Subtract with carry ($66.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($FF.b,X)		; E1 FF ; Subtract with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($00.b,X)		; E1 00 ; Subtract with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $76.b		; 00 76 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($85.b,X)		; E1 85 ; Subtract with carry ($85.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($93.b,X)		; E1 93 ; Subtract with carry ($93.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($AE.b,X)		; E1 AE ; Subtract with carry ($AE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($C9.b,X)		; E1 C9 ; Subtract with carry ($C9.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($D6.b,X)		; E1 D6 ; Subtract with carry ($D6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($19.b,X)		; E1 19 ; Subtract with carry ($19.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sep #$00		; E2 00 ; Set processor status bits #$00 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	brk $5C.b		; 00 5C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
.ACCU 8
.INDEX 8
	sep #$7D		; E2 7D
	sep #$8B		; E2 8B ; Set processor status bits #$8B [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
.ACCU 8
	sep #$A6		; E2 A6
	sep #$C1		; E2 C1 ; Set processor status bits #$C1 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sep #$CE		; E2 CE ; Set processor status bits #$CE [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sep #$00		; E2 00 ; Set processor status bits #$00 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $1B.b,S		; E3 1B ; Subtract stack-relative $1B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $29.b,S		; E3 29 ; Subtract stack-relative $29.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $44.b,S		; E3 44 ; Subtract stack-relative $44.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $5F.b,S		; E3 5F ; Subtract stack-relative $5F.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $6C.b,S		; E3 6C ; Subtract stack-relative $6C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $AF.b,S		; E3 AF ; Subtract stack-relative $AF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $00.b,S		; E3 00 ; Subtract stack-relative $00.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc ($07.b,X)		; E1 07 ; Subtract with carry ($07.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora $EF1E.w,Y		; 19 1E EF ; OR accumulator with memory $EF1E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($E3.b,S),Y		; F3 E3 ; Subtract with carry (stack relative indirect indexed) ($E3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $E3.b		; 05 E3 ; Logical OR $E3.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $00EF.w,X		; 1E EF 00 ; Arithmetic shift left $00EF.w,X [Reads: X Index] [Flags: ZNC]
	cpx $04.b		; E4 04 ; Compare $04.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora #$E3.b		; 09 E3 ; Logical OR #$E3.b with accumulator [Writes: Accumulator] [Flags: ZN]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $C960.w,X		; 1E 60 C9 ; Arithmetic shift left $C960.w,X [Reads: X Index] [Flags: ZNC]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $ABAB.w		; 2D AB AB ; Logical AND $ABAB.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $ACAD.w		; AD AD AC ; Load $ACAD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $C930.w		; AC 30 C9 ; Load $C930.w into Y register [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora ($ED.b),Y		; 11 ED ; OR accumulator with memory ($ED.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc ($0B.b,X)		; E1 0B ; Subtract with carry ($0B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora $601E.w,Y		; 19 1E 60 ; OR accumulator with memory $601E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	asl $2D.b		; 06 2D ; Arithmetic shift left $2D.b [Reads: Direct Page] [Flags: ZNC]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $C9		; 30 C9 ; Branch if minus to $30, $C9 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cop $ED.b		; 02 ED ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	mvn $85,$7D		; 54 7D 85 ; Move block negative $85,$7D [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $EF85.w		; 0C 85 EF ; Test and set bits $EF85.w [Reads: Accumulator] [Flags: Z]
	ora $03E4.w		; 0D E4 03 ; Logical OR $03E4.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpx #$10.b		; E0 10 ; Compare #$10.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $60C8.w		; ED C8 60 ; Subtract $60C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $E0B7.w,X		; 7D B7 E0 ; Add $E0B7.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $128C.w		; ED 8C 12 ; Subtract $128C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $03BA.w,X		; 1D BA 03 ; OR accumulator with memory $03BA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $B9B8.w,X		; 7D B8 B9 ; Add $B9B8.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($1D.b)		; 12 1D ; OR accumulator with memory (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda $1D12.w,Y		; B9 12 1D ; Load $1D12.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda $1D12.w,Y		; B9 12 1D ; Load $1D12.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda [$B8.b],Y		; B7 B8 ; Load accumulator (long indexed) [$B8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($1D.b)		; 12 1D ; OR accumulator with memory (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda $1D12.w,Y		; B9 12 1D ; Load $1D12.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda $1D12.w,Y		; B9 12 1D ; Load $1D12.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda $1D18.w,Y		; B9 18 1D ; Load $1D18.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	cpx #$10.b		; E0 10 ; Compare #$10.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $60C8.w		; ED C8 60 ; Subtract $60C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cmp #$3C.b		; C9 3C ; Compare #$3C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $E0BB.w,X		; 7D BB E0 ; Add $E0BB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $128C.w		; ED 8C 12 ; Subtract $128C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $03B8.w,X		; 1D B8 03 ; OR accumulator with memory $03B8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $B7B6.w,X		; 7D B6 B7 ; Add $B7B6.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($1D.b)		; 12 1D ; OR accumulator with memory (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx $B7.b,Y		; B6 B7 ; Load X register $B7.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ora ($1D.b)		; 12 1D ; OR accumulator with memory (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx $B7.b,Y		; B6 B7 ; Load X register $B7.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ora ($1D.b)		; 12 1D ; OR accumulator with memory (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx $B7.b,Y		; B6 B7 ; Load X register $B7.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ora ($1D.b)		; 12 1D ; OR accumulator with memory (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx $B7.b,Y		; B6 B7 ; Load X register $B7.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ora ($1D.b)		; 12 1D ; OR accumulator with memory (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx $B7.b,Y		; B6 B7 ; Load X register $B7.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ora ($1D.b)		; 12 1D ; OR accumulator with memory (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx $B7.b,Y		; B6 B7 ; Load X register $B7.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $FAB8.w,X		; 1D B8 FA ; OR accumulator with memory $FAB8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $C8E5.w,Y		; 19 E5 C8 ; OR accumulator with memory $C8E5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$19.b]		; E7 19 ; Subtract with carry (long) [$19.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $14F802.l,X		; 5F 02 F8 14 ; Exclusive OR accumulator with memory (long,X) $14F802.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $ED1E.w,X		; 1E 1E ED ; Arithmetic shift left $ED1E.w,X [Reads: X Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc ($07.b,X)		; E1 07 ; Subtract with carry ($07.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora $EF1E.w,Y		; 19 1E EF ; OR accumulator with memory $EF1E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($E3.b,S),Y		; F3 E3 ; Subtract with carry (stack relative indirect indexed) ($E3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $E3.b		; 05 E3 ; Logical OR $E3.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $00EF.w,X		; 1E EF 00 ; Arithmetic shift left $00EF.w,X [Reads: X Index] [Flags: ZNC]
	cpx $04.b		; E4 04 ; Compare $04.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora #$E3.b		; 09 E3 ; Logical OR #$E3.b with accumulator [Writes: Accumulator] [Flags: ZN]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $C960.w,X		; 1E 60 C9 ; Arithmetic shift left $C960.w,X [Reads: X Index] [Flags: ZNC]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $ABAB.w		; 2D AB AB ; Logical AND $ABAB.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $ACAD.w		; AD AD AC ; Load $ACAD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $C930.w		; AC 30 C9 ; Load $C930.w into Y register [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora ($ED.b),Y		; 11 ED ; OR accumulator with memory ($ED.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc ($0B.b,X)		; E1 0B ; Subtract with carry ($0B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora $601E.w,Y		; 19 1E 60 ; OR accumulator with memory $601E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	asl $2D.b		; 06 2D ; Arithmetic shift left $2D.b [Reads: Direct Page] [Flags: ZNC]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $C9		; 30 C9 ; Branch if minus to $30, $C9 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cop $ED.b		; 02 ED ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	mvn $0C,$C9		; 54 C9 0C ; Move block negative $0C,$C9 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	adc $EF85.w,X		; 7D 85 EF ; Add $EF85.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $03E4.w		; 0D E4 03 ; Logical OR $03E4.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpx #$10.b		; E0 10 ; Compare #$10.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $60C8.w		; ED C8 60 ; Subtract $60C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $E0B7.w,X		; 7D B7 E0 ; Add $E0B7.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $128C.w		; ED 8C 12 ; Subtract $128C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $03BA.w,X		; 1D BA 03 ; OR accumulator with memory $03BA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $B9B8.w,X		; 7D B8 B9 ; Add $B9B8.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($1D.b)		; 12 1D ; OR accumulator with memory (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda $1D12.w,Y		; B9 12 1D ; Load $1D12.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda $1D18.w,Y		; B9 18 1D ; Load $1D18.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ora ($BA.b)		; 12 BA ; OR accumulator with memory (indirect) ($BA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda $1D12.w,Y		; B9 12 1D ; Load $1D12.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda $1D12.w,Y		; B9 12 1D ; Load $1D12.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda $1D18.w,Y		; B9 18 1D ; Load $1D18.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc ($07.b,X)		; E1 07 ; Subtract with carry ($07.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora $EF1E.w,Y		; 19 1E EF ; OR accumulator with memory $EF1E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($E4.b)		; 12 E4 ; OR accumulator with memory (indirect) ($E4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $E3.b		; 05 E3 ; Logical OR $E3.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $1FEF.w,X		; 1E EF 1F ; Arithmetic shift left $1FEF.w,X [Reads: X Index] [Flags: ZNC]
	cpx $04.b		; E4 04 ; Compare $04.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora #$E3.b		; 09 E3 ; Logical OR #$E3.b with accumulator [Writes: Accumulator] [Flags: ZN]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	asl $C960.w,X		; 1E 60 C9 ; Arithmetic shift left $C960.w,X [Reads: X Index] [Flags: ZNC]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $ACAC.w		; 2D AC AC ; Logical AND $ACAC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldx $ADAE.w		; AE AE AD ; Load $ADAE.w into X register [Writes: X Index] [Flags: ZN]
	lda $C930.w		; AD 30 C9 ; Load $C930.w into accumulator [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora ($ED.b),Y		; 11 ED ; OR accumulator with memory ($ED.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc ($0B.b,X)		; E1 0B ; Subtract with carry ($0B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora $601E.w,Y		; 19 1E 60 ; OR accumulator with memory $601E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	asl $2D.b		; 06 2D ; Arithmetic shift left $2D.b [Reads: Direct Page] [Flags: ZNC]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	.db $30, $C9		; 30 C9 ; Branch if minus to $30, $C9 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cop $ED.b		; 02 ED ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	mvn $86,$7D		; 54 7D 86 ; Move block negative $86,$7D [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $EF86.w		; 0C 86 EF ; Test and set bits $EF86.w [Reads: Accumulator] [Flags: Z]
	bit $03E4.w		; 2C E4 03 ; Test bits $03E4.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	cpx #$10.b		; E0 10 ; Compare #$10.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $60C8.w		; ED C8 60 ; Subtract $60C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $E0B8.w,X		; 7D B8 E0 ; Add $E0B8.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $128C.w		; ED 8C 12 ; Subtract $128C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $03BB.w,X		; 1D BB 03 ; OR accumulator with memory $03BB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $BAB9.w,X		; 7D B9 BA ; Add $BAB9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($1D.b)		; 12 1D ; OR accumulator with memory (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $12BA.w,Y		; B9 BA 12 ; Load $12BA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $03BB.w,X		; 1D BB 03 ; OR accumulator with memory $03BB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $BAB9.w,X		; 7D B9 BA ; Add $BAB9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($1D.b)		; 12 1D ; OR accumulator with memory (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda $1D12.w,Y		; B9 12 1D ; Load $1D12.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $12BA.w,Y		; B9 BA 12 ; Load $12BA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $03BB.w,X		; 1D BB 03 ; OR accumulator with memory $03BB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $BAB9.w,X		; 7D B9 BA ; Add $BAB9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($1D.b)		; 12 1D ; OR accumulator with memory (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $18BA.w,Y		; B9 BA 18 ; Load $18BA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $E0BB.w,X		; 1D BB E0 ; OR accumulator with memory $E0BB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $ED		; 10 ED ; Branch if plus to $10, $ED [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$3C.b		; C9 3C ; Compare #$3C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $E0BC.w,X		; 7D BC E0 ; Add $E0BC.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $128C.w		; ED 8C 12 ; Subtract $128C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $03B9.w,X		; 1D B9 03 ; OR accumulator with memory $03B9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $B8B7.w,X		; 7D B7 B8 ; Add $B8B7.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($1D.b)		; 12 1D ; OR accumulator with memory (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $7D03.w,Y		; B9 03 7D ; Load $7D03.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$B8.b],Y		; B7 B8 ; Load accumulator (long indexed) [$B8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($1D.b)		; 12 1D ; OR accumulator with memory (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $7D03.w,Y		; B9 03 7D ; Load $7D03.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$B8.b],Y		; B7 B8 ; Load accumulator (long indexed) [$B8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($1D.b)		; 12 1D ; OR accumulator with memory (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $7D03.w,Y		; B9 03 7D ; Load $7D03.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$B8.b],Y		; B7 B8 ; Load accumulator (long indexed) [$B8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($1D.b)		; 12 1D ; OR accumulator with memory (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $7D03.w,Y		; B9 03 7D ; Load $7D03.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$B8.b],Y		; B7 B8 ; Load accumulator (long indexed) [$B8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($1D.b)		; 12 1D ; OR accumulator with memory (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $7D03.w,Y		; B9 03 7D ; Load $7D03.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$B8.b],Y		; B7 B8 ; Load accumulator (long indexed) [$B8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($1D.b)		; 12 1D ; OR accumulator with memory (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $7D03.w,Y		; B9 03 7D ; Load $7D03.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$B8.b],Y		; B7 B8 ; Load accumulator (long indexed) [$B8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $00B9.w,X		; 1D B9 00 ; OR accumulator with memory $00B9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $1898.w,X		; 1D 98 18 ; OR accumulator with memory $1898.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1898.w,Y		; 19 98 18 ; OR accumulator with memory $1898.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$98.b],Y		; 17 98 ; OR accumulator with memory (long indexed) [$98.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1891.w,X		; 1D 91 18 ; OR accumulator with memory $1891.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1891.w,Y		; 19 91 18 ; OR accumulator with memory $1891.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($18.b),Y		; 91 18 ; Store accumulator ($18.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ora [$91.b],Y		; 17 91 ; OR accumulator with memory (long indexed) [$91.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $54.b		; 00 54 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $1899.w,X		; 1D 99 18 ; OR accumulator with memory $1899.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1899.w,Y		; 19 99 18 ; OR accumulator with memory $1899.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $1718.w,Y		; 99 18 17 ; Store accumulator to $1718.w,Y [Reads: Accumulator, Y Index]
	sta $1800.w,Y		; 99 00 18 ; Store accumulator to $1800.w,Y [Reads: Accumulator, Y Index]
	ora $1892.w,X		; 1D 92 18 ; OR accumulator with memory $1892.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1892.w,Y		; 19 92 18 ; OR accumulator with memory $1892.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($18.b)		; 92 18 ; Store accumulator (indirect) ($18.b) [Reads: Accumulator, Direct Page]
	ora [$92.b],Y		; 17 92 ; OR accumulator with memory (long indexed) [$92.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $54.b		; 00 54 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $0C.b		; 86 0C ; Store X register to $0C.b [Reads: X Index]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	and $E4.b,X		; 35 E4 ; Logical AND $E4.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $E4.b		; 45 E4 ; Exclusive OR $E4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $E4D5E4.l,X		; 9F E4 D5 E4 ; Store accumulator (long,X) $E4D5E4.l,X [Reads: Accumulator, X Index]
	and $9DE5.w,Y		; 39 E5 9D ; AND accumulator with memory $9DE5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $01.b		; E5 01 ; Subtract $01.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $4B.b		; E6 4B ; Increment $4B.b [Reads: Direct Page] [Flags: ZN]
	inc $91.b		; E6 91 ; Increment $91.b [Reads: Direct Page] [Flags: ZN]
	inc $FA.b		; E6 FA ; Increment $FA.b [Reads: Direct Page] [Flags: ZN]
	ora $E5.b,X		; 15 E5 ; OR accumulator with memory $E5.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $E7.b,X		; B4 E7 ; Load Y register $E7.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ora $28FFF5.l,X		; 1F F5 FF 28 ; Logical OR long $28FFF5.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cop $E0.b		; 02 E0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora $ED.b,X		; 15 ED ; OR accumulator with memory $ED.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $B2B2.w,X		; 3D B2 B2 ; AND accumulator with memory $B2B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $B25D.w		; 0C 5D B2 ; Test and set bits $B25D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	tsb $B05D.w		; 0C 5D B0 ; Test and set bits $B05D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	ldx $0CAE.w		; AE AE 0C ; Load $0CAE.w into X register [Writes: X Index] [Flags: ZN]
	ldx $5D0C.w		; AE 0C 5D ; Load $5D0C.w into X register [Writes: X Index] [Flags: ZN]
	.db $B0, $EF		; B0 EF ; Branch if carry set to $B0, $EF [Flow: branch]
	jmp.w [$01E6]		; DC E6 01 ; Jump long indirect [$01E6] [Flow: jump]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora $C90C.w,Y		; 19 0C C9 ; OR accumulator with memory $C90C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	clv		; B8 ; Clear overflow flag [Flags: V]
	tsb $B85D.w		; 0C 5D B8 ; Test and set bits $B85D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	tsb $B65D.w		; 0C 5D B6 ; Test and set bits $B65D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	tsb $10B4.w		; 0C B4 10 ; Test and set bits $10B4.w [Reads: Accumulator] [Flags: Z]
	eor $60B8.w,X		; 5D B8 60 ; Exclusive OR accumulator with memory $60B8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $18BA.w		; 6D BA 18 ; Add $18BA.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cpx #$11.b		; E0 11 ; Compare #$11.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $ED1E.w,X		; 1E 1E ED ; Arithmetic shift left $ED1E.w,X [Reads: X Index] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $0C91.w		; 6D 91 0C ; Add $0C91.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $9191.w,X		; 3D 91 91 ; AND accumulator with memory $9191.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $916D.w		; 0C 6D 91 ; Test and set bits $916D.w [Reads: Accumulator] [Flags: Z]
	sta ($08.b),Y		; 91 08 ; Store accumulator ($08.b),Y [Reads: Accumulator, Direct Page, Y Index]
	eor $9291.w,X		; 5D 91 92 ; Exclusive OR accumulator with memory $9291.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($60.b,S),Y		; 93 60 ; Store accumulator (stack relative indirect indexed) ($60.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	adc $0C94.w		; 6D 94 0C ; Add $0C94.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $9494.w,X		; 3D 94 94 ; AND accumulator with memory $9494.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $946D.w		; 0C 6D 94 ; Test and set bits $946D.w [Reads: Accumulator] [Flags: Z]
	sty $08.b,X		; 94 08 ; Store Y register $08.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	eor $9594.w,X		; 5D 94 95 ; Exclusive OR accumulator with memory $9594.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stx $64.b,Y		; 96 64 ; Store X register $64.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	adc $6097.w		; 6D 97 60 ; Add $6097.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $22.b,S		; E3 22 ; Subtract stack-relative $22.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	.db $30, $0A		; 30 0A ; Branch if minus to $30, $0A [Flow: branch]
	sbc $F4DC.w		; ED DC F4 ; Subtract $F4DC.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc ($08.b,X)		; E1 08 ; Subtract with carry ($08.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsb $06C9.w		; 0C C9 06 ; Test and set bits $06C9.w [Reads: Accumulator] [Flags: Z]
	and $AEAE.w,X		; 3D AE AE ; AND accumulator with memory $AEAE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $AE5D.w		; 0C 5D AE ; Test and set bits $AE5D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	lda $0CAD.w		; AD AD 0C ; Load $0CAD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	eor $06AD.w,X		; 5D AD 06 ; Exclusive OR accumulator with memory $06AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $ABAB.w,X		; 3D AB AB ; AND accumulator with memory $ABAB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $0CAB.w		; 0C AB 0C ; Test and set bits $0CAB.w [Reads: Accumulator] [Flags: Z]
	eor $48AD.w,X		; 5D AD 48 ; Exclusive OR accumulator with memory $48AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $06C9.w		; 0C C9 06 ; Test and set bits $06C9.w [Reads: Accumulator] [Flags: Z]
	and $B1B1.w,X		; 3D B1 B1 ; AND accumulator with memory $B1B1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $B15D.w		; 0C 5D B1 ; Test and set bits $B15D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	tsb $B05D.w		; 0C 5D B0 ; Test and set bits $B05D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	ldx $0CAE.w		; AE AE 0C ; Load $0CAE.w into X register [Writes: X Index] [Flags: ZN]
	ldx $5D0C.w		; AE 0C 5D ; Load $5D0C.w into X register [Writes: X Index] [Flags: ZN]
	.db $B0, $48		; B0 48 ; Branch if carry set to $B0, $48 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $06C9.w		; 0C C9 06 ; Test and set bits $06C9.w [Reads: Accumulator] [Flags: Z]
	and $B4B4.w,X		; 3D B4 B4 ; AND accumulator with memory $B4B4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $B45D.w		; 0C 5D B4 ; Test and set bits $B45D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $B35D.w		; 0C 5D B3 ; Test and set bits $B35D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $10B1.w		; 0C B1 10 ; Test and set bits $10B1.w [Reads: Accumulator] [Flags: Z]
	eor $60B4.w,X		; 5D B4 60 ; Exclusive OR accumulator with memory $60B4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $18B7.w		; 6D B7 18 ; Add $18B7.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	bit $ED0A.w		; 2C 0A ED ; Test bits $ED0A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	jmp.w [$0FF4]		; DC F4 0F ; Jump long indirect [$0FF4] [Flow: jump]
	sbc ($0C.b,X)		; E1 0C ; Subtract with carry ($0C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsb $06C9.w		; 0C C9 06 ; Test and set bits $06C9.w [Reads: Accumulator] [Flags: Z]
	and $ABAB.w,X		; 3D AB AB ; AND accumulator with memory $ABAB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $AB5D.w		; 0C 5D AB ; Test and set bits $AB5D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $A95D.w		; 0C 5D A9 ; Test and set bits $A95D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0CA7.w		; 0C A7 0C ; Test and set bits $0CA7.w [Reads: Accumulator] [Flags: Z]
	eor $48A9.w,X		; 5D A9 48 ; Exclusive OR accumulator with memory $48A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $06C9.w		; 0C C9 06 ; Test and set bits $06C9.w [Reads: Accumulator] [Flags: Z]
	and $AEAE.w,X		; 3D AE AE ; AND accumulator with memory $AEAE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $AE5D.w		; 0C 5D AE ; Test and set bits $AE5D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	ldy $0CAC.w		; AC AC 0C ; Load $0CAC.w into Y register [Writes: Y Index] [Flags: ZN]
	eor $06AC.w,X		; 5D AC 06 ; Exclusive OR accumulator with memory $06AC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $AAAA.w,X		; 3D AA AA ; AND accumulator with memory $AAAA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $0CAA.w		; 0C AA 0C ; Test and set bits $0CAA.w [Reads: Accumulator] [Flags: Z]
	eor $48AC.w,X		; 5D AC 48 ; Exclusive OR accumulator with memory $48AC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $06C9.w		; 0C C9 06 ; Test and set bits $06C9.w [Reads: Accumulator] [Flags: Z]
	and $B1B1.w,X		; 3D B1 B1 ; AND accumulator with memory $B1B1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $B15D.w		; 0C 5D B1 ; Test and set bits $B15D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	lda $5D0CAF.l		; AF AF 0C 5D ; Load long $5D0CAF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AD3D06.l		; AF 06 3D AD ; Load long $AD3D06.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AD0C.w		; AD 0C AD ; Load $AD0C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $5D		; 10 5D ; Branch if plus to $10, $5D [Flow: branch]
	lda ($60.b,S),Y		; B3 60 ; Load accumulator (stack relative indirect indexed) ($60.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $18B3.w		; 6D B3 18 ; Add $18B3.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $19.b,S		; E3 19 ; Subtract stack-relative $19.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	and ($0E.b)		; 32 0E ; AND accumulator with memory (indirect) ($0E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $F4DC.w		; ED DC F4 ; Subtract $F4DC.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $E1.b		; 05 E1 ; Logical OR $E1.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $C90C.w		; 0E 0C C9 ; Arithmetic shift left $C90C.w [Flags: ZNC]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $A75D.w		; 0C 5D A7 ; Test and set bits $A75D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	tsb $A65D.w		; 0C 5D A6 ; Test and set bits $A65D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	tsb $0CA4.w		; 0C A4 0C ; Test and set bits $0CA4.w [Reads: Accumulator] [Flags: Z]
	eor $48A6.w,X		; 5D A6 48 ; Exclusive OR accumulator with memory $48A6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $06C9.w		; 0C C9 06 ; Test and set bits $06C9.w [Reads: Accumulator] [Flags: Z]
	and $AAAA.w,X		; 3D AA AA ; AND accumulator with memory $AAAA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $AA5D.w		; 0C 5D AA ; Test and set bits $AA5D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $A95D.w		; 0C 5D A9 ; Test and set bits $A95D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0CA7.w		; 0C A7 0C ; Test and set bits $0CA7.w [Reads: Accumulator] [Flags: Z]
	eor $48A9.w,X		; 5D A9 48 ; Exclusive OR accumulator with memory $48A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $06C9.w		; 0C C9 06 ; Test and set bits $06C9.w [Reads: Accumulator] [Flags: Z]
	and $ADAD.w,X		; 3D AD AD ; AND accumulator with memory $ADAD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $AD5D.w		; 0C 5D AD ; Test and set bits $AD5D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	ldy $0CAC.w		; AC AC 0C ; Load $0CAC.w into Y register [Writes: Y Index] [Flags: ZN]
	eor $06AC.w,X		; 5D AC 06 ; Exclusive OR accumulator with memory $06AC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $AAAA.w,X		; 3D AA AA ; AND accumulator with memory $AAAA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $10AA.w		; 0C AA 10 ; Test and set bits $10AA.w [Reads: Accumulator] [Flags: Z]
	eor $60AF.w,X		; 5D AF 60 ; Exclusive OR accumulator with memory $60AF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $18AE.w		; 6D AE 18 ; Add $18AE.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $1B.b,S		; E3 1B ; Subtract stack-relative $1B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $ED1C.w,X		; 1E 1C ED ; Arithmetic shift left $ED1C.w,X [Reads: X Index] [Flags: ZNC]
	ldy #$E1.b		; A0 E1 ; Load #$E1.b into Y register [Writes: Y Index] [Flags: ZN]
	asl $14.b		; 06 14 ; Arithmetic shift left $14.b [Reads: Direct Page] [Flags: ZNC]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $B2B2.w,X		; 3D B2 B2 ; AND accumulator with memory $B2B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $B25D.w		; 0C 5D B2 ; Test and set bits $B25D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	tsb $B05D.w		; 0C 5D B0 ; Test and set bits $B05D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	ldx $0CAE.w		; AE AE 0C ; Load $0CAE.w into X register [Writes: X Index] [Flags: ZN]
	ldx $5D0C.w		; AE 0C 5D ; Load $5D0C.w into X register [Writes: X Index] [Flags: ZN]
	.db $B0, $EF		; B0 EF ; Branch if carry set to $B0, $EF [Flow: branch]
	jmp.w [$01E6]		; DC E6 01 ; Jump long indirect [$01E6] [Flow: jump]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $06C9.w		; 0C C9 06 ; Test and set bits $06C9.w [Reads: Accumulator] [Flags: Z]
	and $B8B8.w,X		; 3D B8 B8 ; AND accumulator with memory $B8B8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $B85D.w		; 0C 5D B8 ; Test and set bits $B85D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	tsb $B65D.w		; 0C 5D B6 ; Test and set bits $B65D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	tsb $10B4.w		; 0C B4 10 ; Test and set bits $10B4.w [Reads: Accumulator] [Flags: Z]
	eor $5CB8.w,X		; 5D B8 5C ; Exclusive OR accumulator with memory $5CB8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $18BA.w		; 6D BA 18 ; Add $18BA.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	tsb $C9.b		; 04 C9 ; Test and set bits $C9.b [Reads: Accumulator] [Flags: Z]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E1B4.w		; ED B4 E1 ; Subtract $E1B4.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	trb $54.b		; 14 54 ; Test and reset bits $54.b [Reads: Accumulator] [Flags: Z]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor $E2A1.w		; 4D A1 E2 ; Exclusive OR $E2A1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $AD.b		; A6 AD ; Load $AD.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda ($0C.b)		; B2 0C ; Load accumulator (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $B5B0.w,X		; 3D B0 B5 ; AND accumulator with memory $B5B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	mvn $BC,$4D		; 54 4D BC ; Move block negative $BC,$4D [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc ($14.b,X)		; E1 14 ; Subtract with carry ($14.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
.ACCU 8
	sep #$60		; E2 60
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $A9.b		; A4 A9 ; Load $A9.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda #$B0.b		; A9 B0 ; Load #$B0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $0C.b,X		; B5 0C ; Load $0C.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $B8B3.w,X		; 3D B3 B8 ; AND accumulator with memory $B8B3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	lda $ED02E0.l,X		; BF E0 02 ED ; Load long $ED02E0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $E1		; F0 E1 ; Branch if equal to $F0, $E1 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $8F79.w		; 0C 79 8F ; Test and set bits $8F79.w [Reads: Accumulator] [Flags: Z]
	tsb $8F7A.w		; 0C 7A 8F ; Test and set bits $8F7A.w [Reads: Accumulator] [Flags: Z]
	tsb $8F7B.w		; 0C 7B 8F ; Test and set bits $8F7B.w [Reads: Accumulator] [Flags: Z]
	tsb $8F7C.w		; 0C 7C 8F ; Test and set bits $8F7C.w [Reads: Accumulator] [Flags: Z]
	tsb $8F7D.w		; 0C 7D 8F ; Test and set bits $8F7D.w [Reads: Accumulator] [Flags: Z]
	tsb $8F7E.w		; 0C 7E 8F ; Test and set bits $8F7E.w [Reads: Accumulator] [Flags: Z]
	.db $50, $7F		; 50 7F ; Branch if overflow clear to $50, $7F [Flow: branch]
	sta $ED0FE0.l		; 8F E0 0F ED ; Store accumulator (long) $ED0FE0.l [Reads: Accumulator]
	ldy $E1.b,X		; B4 E1 ; Load Y register $E1.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	trb $5A.b		; 14 5A ; Test and reset bits $5A.b [Reads: Accumulator] [Flags: Z]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor $E2A4.w		; 4D A4 E2 ; Exclusive OR $E2A4.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$B0.b		; A9 B0 ; Load #$B0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $0C.b,X		; B5 0C ; Load $0C.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $B9B2.w,X		; 3D B2 B9 ; AND accumulator with memory $B9B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	mvn $E1,$C9		; 54 C9 E1 ; Move block negative $E1,$C9 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	trb $E2.b		; 14 E2 ; Test and reset bits $E2.b [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $ACA7.w		; 4D A7 AC ; Exclusive OR $ACA7.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $B8B3.w		; AC B3 B8 ; Load $B8B3.w into Y register [Writes: Y Index] [Flags: ZN]
	tsb $B53D.w		; 0C 3D B5 ; Test and set bits $B53D.w [Reads: Accumulator] [Flags: Z]
	ldy $C960.w,X		; BC 60 C9 ; Load Y register $C960.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E1F0.w		; ED F0 E1 ; Subtract $E1F0.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $77.b		; 06 77 ; Arithmetic shift left $77.b [Reads: Direct Page] [Flags: ZNC]
	sta $8F780C.l		; 8F 0C 78 8F ; Store accumulator (long) $8F780C.l [Reads: Accumulator]
	tsb $8F79.w		; 0C 79 8F ; Test and set bits $8F79.w [Reads: Accumulator] [Flags: Z]
	tsb $8F7A.w		; 0C 7A 8F ; Test and set bits $8F7A.w [Reads: Accumulator] [Flags: Z]
	tsb $8F7B.w		; 0C 7B 8F ; Test and set bits $8F7B.w [Reads: Accumulator] [Flags: Z]
	tsb $8F7C.w		; 0C 7C 8F ; Test and set bits $8F7C.w [Reads: Accumulator] [Flags: Z]
	tsb $8F7D.w		; 0C 7D 8F ; Test and set bits $8F7D.w [Reads: Accumulator] [Flags: Z]
	bit $8F7F.w,X		; 3C 7F 8F ; Test bits $8F7F.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	tsb $00C9.w		; 0C C9 00 ; Test and set bits $00C9.w [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $06C9.w		; 0C C9 06 ; Test and set bits $06C9.w [Reads: Accumulator] [Flags: Z]
	and $B5B5.w,X		; 3D B5 B5 ; AND accumulator with memory $B5B5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $B55D.w		; 0C 5D B5 ; Test and set bits $B55D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $B35D.w		; 0C 5D B3 ; Test and set bits $B35D.w [Reads: Accumulator] [Flags: Z]
	asl $3D.b		; 06 3D ; Arithmetic shift left $3D.b [Reads: Direct Page] [Flags: ZNC]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $0CB1.w		; 0C B1 0C ; Test and set bits $0CB1.w [Reads: Accumulator] [Flags: Z]
	eor $00B3.w,X		; 5D B3 00 ; Exclusive OR accumulator with memory $00B3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$E7.b		; 49 E7 ; Exclusive OR #$E7.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $39E7.w,Y		; 19 E7 39 ; OR accumulator with memory $39E7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$09.b]		; E7 09 ; Subtract with carry (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$29.b]		; E7 29 ; Subtract with carry (long) [$29.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	brk $59.b		; 00 59 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$64.b]		; E7 64 ; Subtract with carry (long) [$64.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$72.b]		; E7 72 ; Subtract with carry (long) [$72.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$78.b]		; E7 78 ; Subtract with carry (long) [$78.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$86.b]		; E7 86 ; Subtract with carry (long) [$86.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$8C.b]		; E7 8C ; Subtract with carry (long) [$8C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$00.b]		; E7 00 ; Subtract with carry (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A1.b		; 00 A1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$BD.b]		; E7 BD ; Subtract with carry (long) [$BD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$D7.b]		; E7 D7 ; Subtract with carry (long) [$D7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$F6.b]		; E7 F6 ; Subtract with carry (long) [$F6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$0C.b]		; E7 0C ; Subtract with carry (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	and $E8.b,S		; 23 E8 ; AND accumulator with stack relative $E8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $E8		; 42 E8 ; Reserved instruction
	mvn $77,$E8		; 54 E8 77 ; Move block negative $77,$E8 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta ($E8.b,X)		; 81 E8 ; Store accumulator ($E8.b,X) [Reads: Accumulator, X Index, Direct Page]
	ldy $E8.b		; A4 E8 ; Load $E8.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx $00E8.w		; AE E8 00 ; Load $00E8.w into X register [Writes: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CE.b		; 00 CE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp $E8.b,X		; D5 E8 ; Compare accumulator $E8.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp $DCE8.w,Y		; D9 E8 DC ; Compare accumulator $DCE8.w,Y [Reads: Y Index] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $0000E8.l,X		; DF E8 00 00 ; Compare accumulator (long,X) $0000E8.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $00E8.w		; EC E8 00 ; Compare $00E8.w with X register [Reads: X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $A4AB.w,X		; 7D AB A4 ; Add $A4AB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $A4ABA6.l		; AF A6 AB A4 ; Load long $A4ABA6.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $EF00B2.l		; AF B2 00 EF ; Load long $EF00B2.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl $E9.b		; 06 E9 ; Arithmetic shift left $E9.b [Reads: Direct Page] [Flags: ZNC]
	ora ($C9.b,X)		; 01 C9 ; Logical OR ($C9.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $30, $A7		; 30 A7 ; Branch if minus to $30, $A7 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $B0, $C8		; B0 C8 ; Branch if carry set to $B0, $C8 [Flow: branch]
	.db $30, $B0		; 30 B0 ; Branch if minus to $30, $B0 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $8C6D60.l		; AF 60 6D 8C ; Load long $8C6D60.l into accumulator [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit #$60.b		; 89 60 ; Test bits #$60.b with accumulator [Reads: Accumulator] [Flags: Z]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9493.w,X		; 7D 93 94 ; Add $9493.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $93		; 30 93 ; Branch if minus to $30, $93 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($94.b,S),Y		; 93 94 ; Store accumulator (stack relative indirect indexed) ($94.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	.db $30, $93		; 30 93 ; Branch if minus to $30, $93 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $9798.w		; 6D 98 97 ; Add $9798.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	stx $95.b,Y		; 96 95 ; Store X register $95.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $A7AB.w,X		; 7D AB A7 ; Add $A7AB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $B0.b		; A4 B0 ; Load $B0.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $A3A6AB.l		; AF AB A6 A3 ; Load long $A3A6AB.l into accumulator [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda [$A4.b]		; A7 A4 ; Load accumulator (long) [$A4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $AF		; B0 AF ; Branch if carry set to $B0, $AF [Flow: branch]
	.db $B0, $B2		; B0 B2 ; Branch if carry set to $B0, $B2 [Flow: branch]
	.db $10, $AF		; 10 AF ; Branch if plus to $10, $AF [Flow: branch]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $E3.b,X		; 15 E3 ; OR accumulator with memory $E3.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $1864.w,X		; 1E 64 18 ; Arithmetic shift left $1864.w,X [Reads: X Index] [Flags: ZNC]
	adc $9D9B.w,X		; 7D 9B 9D ; Add $9D9B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $9A		; 30 9A ; Branch if minus to $30, $9A [Flow: branch]
	sbc $01E913.l		; EF 13 E9 01 ; Subtract with carry (long) $01E913.l [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9D9B.w,X		; 7D 9B 9D ; Add $9D9B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $9A		; 30 9A ; Branch if minus to $30, $9A [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$15.b		; E0 15 ; Compare #$15.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $0E.b,S		; E3 0E ; Subtract stack-relative $0E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $50, $30		; 50 30 ; Branch if overflow clear to $50, $30 [Flow: branch]
	adc $9798.w,X		; 7D 98 97 ; Add $9798.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $5D		; 30 5D ; Branch if minus to $30, $5D [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta [$30.b],Y		; 97 30 ; Store accumulator (long indexed) [$30.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$60.b],Y		; 97 60 ; Store accumulator (long indexed) [$60.b],Y [Reads: Accumulator, Direct Page, Y Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $E3.b,X		; 15 E3 ; OR accumulator with memory $E3.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $1A.b		; 14 1A ; Test and reset bits $1A.b [Reads: Accumulator] [Flags: Z]
	lsr $60.b		; 46 60 ; Logical shift right $60.b [Reads: Direct Page] [Flags: ZNC]
	adc $F988.w,X		; 7D 88 F9 ; Add $F988.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta [$30.b]		; 87 30 ; Store accumulator (long) [$30.b] [Reads: Accumulator, Direct Page]
	adc $30C8.w		; 6D C8 30 ; Add $30C8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $6088.w,X		; 7D 88 60 ; Add $6088.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $3087.w		; 6D 87 30 ; Add $3087.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $8788.w,X		; 7D 88 87 ; Add $8788.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $E3.b,X		; 15 E3 ; OR accumulator with memory $E3.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $9192.w,X		; 7D 92 91 ; Add $9192.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $E3.b,X		; 15 E3 ; OR accumulator with memory $E3.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($3C.b)		; 12 3C ; OR accumulator with memory (indirect) ($3C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $F9A4.w,X		; 7D A4 F9 ; Add $F9A4.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $02.b,X		; 16 02 ; Arithmetic shift left $02.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ldx $A3.b		; A6 A3 ; Load $A3.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $E0A0.w		; ED A0 E0 ; Subtract $E0A0.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $E3.b,X		; 15 E3 ; OR accumulator with memory $E3.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $501E.w		; 0E 1E 50 ; Arithmetic shift left $501E.w [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $F99B.w,X		; 7D 9B F9 ; Add $F99B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $04.b		; 14 04 ; Test and reset bits $04.b [Reads: Accumulator] [Flags: Z]
	sta $EF9A.w,X		; 9D 9A EF ; Store accumulator to $EF9A.w,X [Reads: Accumulator, X Index]
	ora ($E9.b,S),Y		; 13 E9 ; OR accumulator (stack relative indirect indexed) ($E9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $9D9B.w,X		; 7D 9B 9D ; Add $9D9B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $9A		; 30 9A ; Branch if minus to $30, $9A [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $C8B0B0.l		; AF B0 B0 C8 ; Load long $C8B0B0.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $C8A7B0.l		; AF B0 A7 C8 ; Load long $C8A7B0.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1800C8.l		; AF C8 00 18 ; Load long $1800C8.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $18AB.w,X		; 7D AB 18 ; Add $18AB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda [$C8.b],Y		; B7 C8 ; Load accumulator (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $B2		; 30 B2 ; Branch if minus to $30, $B2 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $30, $AB		; 30 AB ; Branch if minus to $30, $AB [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda [$C8.b],Y		; B7 C8 ; Load accumulator (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $B2		; 30 B2 ; Branch if minus to $30, $B2 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $30, $AD		; 30 AD ; Branch if minus to $30, $AD [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $C8.b		; A4 C8 ; Load $C8.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $30, $A7		; 30 A7 ; Branch if minus to $30, $A7 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $B0, $60		; B0 60 ; Branch if carry set to $B0, $60 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $8788.w		; 6D 88 87 ; Add $8788.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta [$86.b]		; 87 86 ; Store accumulator (long) [$86.b] [Reads: Accumulator, Direct Page]
	stx $87.b		; 86 87 ; Store X register to $87.b [Reads: X Index]
	sta [$30.b]		; 87 30 ; Store accumulator (long) [$30.b] [Reads: Accumulator, Direct Page]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $A4A7.w,X		; 7D A7 A4 ; Add $A4A7.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $A4.b,S		; A3 A4 ; Load accumulator (stack relative) $A4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx $A3.b		; A6 A3 ; Load $A3.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	.db $30, $C9		; 30 C9 ; Branch if minus to $30, $C9 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda [$A4.b]		; A7 A4 ; Load accumulator (long) [$A4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $A4.b,S		; A3 A4 ; Load accumulator (stack relative) $A4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx $A3.b		; A6 A3 ; Load $A3.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldy $A3.b		; A4 A3 ; Load $A3.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $A1.b		; A4 A1 ; Load $A1.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	stz $A7A1.w,X		; 9E A1 A7 ; Store zero to $A7A1.w,X [Reads: X Index]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$AC.b		; A9 AC ; Load #$AC.b into accumulator [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda #$A6.b		; A9 A6 ; Load #$A6.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $60.b,S		; A3 60 ; Load accumulator (stack relative) $60.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $9394.w		; 6D 94 93 ; Add $9394.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sty $93.b,X		; 94 93 ; Store Y register $93.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Accumulator, Direct Page]
	sta ($93.b,S),Y		; 93 93 ; Store accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $ABB0.w,X		; 7D B0 AB ; Add $ABB0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $B7		; B0 B7 ; Branch if carry set to $B0, $B7 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($AF.b)		; B2 AF ; Load accumulator (indirect) ($AF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	.db $B0, $AB		; B0 AB ; Branch if carry set to $B0, $AB [Flow: branch]
	.db $B0, $B7		; B0 B7 ; Branch if carry set to $B0, $B7 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($AF.b)		; B2 AF ; Load accumulator (indirect) ($AF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	.db $B0, $AD		; B0 AD ; Branch if carry set to $B0, $AD [Flow: branch]
	lda [$A4.b]		; A7 A4 ; Load accumulator (long) [$A4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$AA.b]		; A7 AA ; Load accumulator (long) [$AA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $60		; B0 60 ; Branch if carry set to $B0, $60 [Flow: branch]
	lda $30C858.l		; AF 58 C8 30 ; Load long $30C858.l into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $A4AB.w,X		; 7D AB A4 ; Add $A4AB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $EF00A6.l		; AF A6 00 EF ; Load long $EF00A6.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl $E9.b		; 06 E9 ; Arithmetic shift left $E9.b [Reads: Direct Page] [Flags: ZNC]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $A7AB.w,X		; 7D AB A7 ; Add $A7AB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $B0.b		; A4 B0 ; Load $B0.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $10A6AB.l		; AF AB A6 10 ; Load long $10A6AB.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $FA.b,S		; A3 FA ; Load accumulator (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $C8.b		; E5 C8 ; Subtract $C8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$19.b]		; E7 19 ; Subtract with carry (long) [$19.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl $F71E.w,X		; 1E 1E F7 ; Arithmetic shift left $F71E.w,X [Reads: X Index] [Flags: ZNC]
	cop $14.b		; 02 14 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $ED.b		; 02 ED ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$15.b		; E0 15 ; Compare #$15.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $0A.b,S		; E3 0A ; Subtract stack-relative $0A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $3064.w,X		; 1E 64 30 ; Arithmetic shift left $3064.w,X [Reads: X Index] [Flags: ZNC]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $18A7.w,X		; 7D A7 18 ; Add $18A7.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $C8		; B0 C8 ; Branch if carry set to $B0, $C8 [Flow: branch]
	.db $30, $AB		; 30 AB ; Branch if minus to $30, $AB [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $00.b,S		; A3 00 ; Load accumulator (stack relative) $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $30, $5D		; 30 5D ; Branch if minus to $30, $5D [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9D9B.w,X		; 7D 9B 9D ; Add $9D9B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $009A.w		; 6D 9A 00 ; Add $009A.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc #$2A.b		; E9 2A ; Subtract #$2A.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc #$5A.b		; E9 5A ; Subtract #$5A.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc #$FF.b		; E9 FF ; Subtract #$FF.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $6A.b		; 00 6A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$7D.b		; E9 7D ; Subtract #$7D.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc #$A3.b		; E9 A3 ; Subtract #$A3.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc #$D0.b		; E9 D0 ; Subtract #$D0.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc #$FD.b		; E9 FD ; Subtract #$FD.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	nop		; EA ; No operation
	eor #$EA.b		; 49 EA ; Exclusive OR #$EA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ror $EA.b		; 66 EA ; Rotate right $EA.b [Reads: Direct Page] [Flags: ZNC]
	sta $EA.b,S		; 83 EA ; Store accumulator (stack relative) $EA.b,S [Reads: Accumulator, Stack Pointer]
	sta $00EA.w,Y		; 99 EA 00 ; Store accumulator to $00EA.w,Y [Reads: Accumulator, Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DB.b		; 00 DB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	nop		; EA ; No operation
	sbc ($EA.b)		; F2 EA ; Subtract with carry (indirect) ($EA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $51EB.w,X		; 3E EB 51 ; Rotate left $51EB.w,X [Reads: X Index] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	adc [$EB.b],Y		; 77 EB ; Add with carry (long indexed) [$EB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $EB.b		; A4 EB ; Load $EB.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cmp ($EB.b),Y		; D1 EB ; Compare accumulator ($EB.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $898E.w,X		; 5D 8E 89 ; Exclusive OR accumulator with memory $898E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stx $8E89.w		; 8E 89 8E ; Store X register to $8E89.w [Reads: X Index]
	bit #$8E.b		; 89 8E ; Test bits #$8E.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$EF.b		; 89 EF ; Test bits #$EF.b with accumulator [Reads: Accumulator] [Flags: Z]
	inc $03EB.w		; EE EB 03 ; Increment $03EB.w [Flags: ZN]
	brk $ED.b		; [PATTERN: Memory clearing operation] 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp.w [$0BE0]		; DC E0 0B ; Jump long indirect [$0BE0] [Flow: jump]
	tsb $956D.w		; 0C 6D 95 ; Test and set bits $956D.w [Reads: Accumulator] [Flags: Z]
	stz $95A1.w		; 9C A1 95 ; Store zero to $95A1.w
	stz $96A1.w		; 9C A1 96 ; Store zero to $96A1.w
	ldx #$95.b		; [PATTERN: Memory clearing operation] A2 95 ; Load #$95.b into X register [Writes: X Index] [Flags: ZN]
	stz $95A1.w		; 9C A1 95 ; Store zero to $95A1.w
	stz $94A1.w		; 9C A1 94 ; Store zero to $94A1.w
	ldy #$95.b		; A0 95 ; Load #$95.b into Y register [Writes: Y Index] [Flags: ZN]
	stz $95A1.w		; 9C A1 95 ; Store zero to $95A1.w
	stz $96A1.w		; [PATTERN: Memory clearing operation] 9C A1 96 ; Store zero to $96A1.w
	ldx #$95.b		; A2 95 ; Load #$95.b into X register [Writes: X Index] [Flags: ZN]
	stz $95A1.w		; 9C A1 95 ; Store zero to $95A1.w
	stz $94A1.w		; 9C A1 94 ; Store zero to $94A1.w
	ldy #$ED.b		; A0 ED ; Load #$ED.b into Y register [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $18B9.w		; 6D B9 18 ; Add $18B9.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $BAC9.w,Y		; B9 C9 BA ; Load $BAC9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $C918.w,Y		; B9 18 C9 ; Load $C918.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $C9B9.w		; 0C B9 C9 ; Test and set bits $C9B9.w [Reads: Accumulator] [Flags: Z]
	clv		; B8 ; Clear overflow flag [Flags: V]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $C918.w,Y		; B9 18 C9 ; Load $C918.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $C9B9.w		; 0C B9 C9 ; Test and set bits $C9B9.w [Reads: Accumulator] [Flags: Z]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $C918.w,Y		; B9 18 C9 ; Load $C918.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $C9B9.w		; 0C B9 C9 ; Test and set bits $C9B9.w [Reads: Accumulator] [Flags: Z]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $18B4.w		; 6D B4 18 ; Add $18B4.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldy $C9.b,X		; B4 C9 ; Load Y register $C9.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $18.b,X		; B5 18 ; Load $18.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldy $18.b,X		; B4 18 ; Load Y register $18.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldy $C9.b,X		; B4 C9 ; Load Y register $C9.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda ($18.b,S),Y		; B3 18 ; Load accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldy $18.b,X		; B4 18 ; Load Y register $18.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldy $C9.b,X		; B4 C9 ; Load Y register $C9.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $18.b,X		; B5 18 ; Load $18.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldy $18.b,X		; B4 18 ; Load Y register $18.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldy $C9.b,X		; B4 C9 ; Load Y register $C9.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda ($ED.b,S),Y		; B3 ED ; Load accumulator (stack relative indirect indexed) ($ED.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cpx #$14.b		; E0 14 ; Compare #$14.b with X register [Reads: X Index] [Flags: ZNC]
	tsb $6D.b		; 04 6D ; Test and set bits $6D.b [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tsb $06A8.w		; 0C A8 06 ; Test and set bits $06A8.w [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tsb $A8A8.w		; 0C A8 A8 ; Test and set bits $A8A8.w [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tsb $A8.b		; 04 A8 ; Test and set bits $A8.b [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tsb $EFA8.w		; 0C A8 EF ; Test and set bits $EFA8.w [Reads: Accumulator] [Flags: Z]
	sbc [$EB.b],Y		; F7 EB ; Subtract with carry (long indexed) [$EB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FA.b,S		; 03 FA ; OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$E5.b],Y		; 17 E5 ; OR accumulator with memory (long indexed) [$E5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc [$25.b]		; E7 25 ; Subtract with carry (long) [$25.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $F802.w,X		; 1E 02 F8 ; Arithmetic shift left $F802.w,X [Reads: X Index] [Flags: ZNC]
	asl $1E1E.w,X		; 1E 1E 1E ; Arithmetic shift left $1E1E.w,X [Reads: X Index] [Flags: ZNC]
	sbc $E0C8.w		; ED C8 E0 ; Subtract $E0C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $2414.w,X		; 1E 14 24 ; Arithmetic shift left $2414.w,X [Reads: X Index] [Flags: ZNC]
	adc $BBBC.w		; 6D BC BB ; Add $BBBC.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $24.b,X		; B5 24 ; Load $24.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $B3.b,X		; B4 B3 ; Load Y register $B3.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	tsb $AEAF.w		; 0C AF AE ; Test and set bits $AEAF.w [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $B4.b		; 04 B4 ; Test and set bits $B4.b [Reads: Accumulator] [Flags: Z]
	lda ($B2.b,S),Y		; B3 B2 ; Load accumulator (stack relative indirect indexed) ($B2.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($AF.b),Y		; B1 AF ; Load accumulator ($AF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $ED00.w		; AE 00 ED ; Load $ED00.w into X register [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $2414.w,X		; 1E 14 24 ; Arithmetic shift left $2414.w,X [Reads: X Index] [Flags: ZNC]
	adc $B6B7.w		; 6D B7 B6 ; Add $B6B7.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $B0, $24		; B0 24 ; Branch if carry set to $B0, $24 [Flow: branch]
	lda $AA0CAE.l		; AF AE 0C AA ; Load long $AA0CAE.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$48.b		; A9 48 ; Load #$48.b into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $B0.b		; 04 B0 ; Test and set bits $B0.b [Reads: Accumulator] [Flags: Z]
	lda $ACADAE.l		; AF AE AD AC ; Load long $ACADAE.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$ED.b		; A9 ED ; Load #$ED.b into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $2414.w,X		; 1E 14 24 ; Arithmetic shift left $2414.w,X [Reads: X Index] [Flags: ZNC]
	adc $B1B2.w		; 6D B2 B1 ; Add $B1B2.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	bit $AA.b		; 24 AA ; Test bits $AA.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $A4.b		; A5 A4 ; Load $A4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $A8.b		; 04 A8 ; Test and set bits $A8.b [Reads: Accumulator] [Flags: Z]
	lda [$A6.b]		; A7 A6 ; Load accumulator (long) [$A6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $A3.b		; A5 A3 ; Load $A3.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx #$ED.b		; A2 ED ; Load #$ED.b into X register [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $2414.w,X		; 1E 14 24 ; Arithmetic shift left $2414.w,X [Reads: X Index] [Flags: ZNC]
	adc $ABAC.w		; 6D AC AB ; Add $ABAC.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $A3.b		; A4 A3 ; Load $A3.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	tsb $9E9F.w		; 0C 9F 9E ; Test and set bits $9E9F.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $E0FA.w		; ED FA E0 ; Subtract $E0FA.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $8989.w		; 6D 89 89 ; Add $8989.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	bit #$18.b		; 89 18 ; Test bits #$18.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$04.b		; 89 04 ; Test bits #$04.b with accumulator [Reads: Accumulator] [Flags: Z]
	sta [$87.b]		; 87 87 ; Store accumulator (long) [$87.b] [Reads: Accumulator, Direct Page]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sta [$18.b]		; 87 18 ; Store accumulator (long) [$18.b] [Reads: Accumulator, Direct Page]
	sta [$04.b]		; 87 04 ; Store accumulator (long) [$04.b] [Reads: Accumulator, Direct Page]
	sta $85.b		; 85 85 ; Store accumulator to $85.b [Reads: Accumulator]
	tsb $69.b		; 04 69 ; Test and set bits $69.b [Reads: Accumulator] [Flags: Z]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	adc $85.b		; 65 85 ; Add $85.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsb $66.b		; 04 66 ; Test and set bits $66.b [Reads: Accumulator] [Flags: Z]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	adc [$85.b]		; 67 85 ; Add with carry (long) [$85.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsb $68.b		; 04 68 ; Test and set bits $68.b [Reads: Accumulator] [Flags: Z]
	sta $85.b		; 85 85 ; Store accumulator to $85.b [Reads: Accumulator]
	tsb $69.b		; 04 69 ; Test and set bits $69.b [Reads: Accumulator] [Flags: Z]
	sta $85.b		; 85 85 ; Store accumulator to $85.b [Reads: Accumulator]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $85.b		; 85 85 ; Store accumulator to $85.b [Reads: Accumulator]
	tsb $6B.b		; 04 6B ; Test and set bits $6B.b [Reads: Accumulator] [Flags: Z]
	sta $85.b		; 85 85 ; Store accumulator to $85.b [Reads: Accumulator]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jmp ($8585.w)		; 6C 85 85 ; Jump indirect to ($8585.w) [Flow: jump]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	adc $8585.w		; 6D 85 85 ; Add $8585.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tsb $6F.b		; 04 6F ; Test and set bits $6F.b [Reads: Accumulator] [Flags: Z]
	sta $85.b		; 85 85 ; Store accumulator to $85.b [Reads: Accumulator]
	sta $E5.b		; 85 E5 ; Store accumulator to $E5.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc [$19.b]		; E7 19 ; Subtract with carry (long) [$19.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E0FA.w		; ED FA E0 ; Subtract $E0FA.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $898E.w,X		; 5D 8E 89 ; Exclusive OR accumulator with memory $898E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stx $8E89.w		; 8E 89 8E ; Store X register to $8E89.w [Reads: X Index]
	bit #$8E.b		; 89 8E ; Test bits #$8E.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$EF.b		; 89 EF ; Test bits #$EF.b with accumulator [Reads: Accumulator] [Flags: Z]
	inc $03EB.w		; EE EB 03 ; Increment $03EB.w [Flags: ZN]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: ZNC]
	tsb $926D.w		; 0C 6D 92 ; Test and set bits $926D.w [Reads: Accumulator] [Flags: Z]
	sta ($92.b,S),Y		; 93 92 ; Store accumulator (stack relative indirect indexed) ($92.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($96.b,S),Y		; 93 96 ; Store accumulator (stack relative indirect indexed) ($96.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta $96.b,X		; 95 96 ; Store accumulator to $96.b,X [Reads: Accumulator, X Index]
	sta $92.b,X		; 95 92 ; Store accumulator to $92.b,X [Reads: Accumulator, X Index]
	sta ($96.b,S),Y		; 93 96 ; Store accumulator (stack relative indirect indexed) ($96.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta $94.b,X		; 95 94 ; Store accumulator to $94.b,X [Reads: Accumulator, X Index]
	sta ($91.b,S),Y		; 93 91 ; Store accumulator (stack relative indirect indexed) ($91.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Accumulator, Direct Page]
	sta ($92.b,S),Y		; 93 92 ; Store accumulator (stack relative indirect indexed) ($92.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($96.b,S),Y		; 93 96 ; Store accumulator (stack relative indirect indexed) ($96.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta $96.b,X		; 95 96 ; Store accumulator to $96.b,X [Reads: Accumulator, X Index]
	sta $92.b,X		; 95 92 ; Store accumulator to $92.b,X [Reads: Accumulator, X Index]
	sta ($96.b,S),Y		; 93 96 ; Store accumulator (stack relative indirect indexed) ($96.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta $94.b,X		; 95 94 ; Store accumulator to $94.b,X [Reads: Accumulator, X Index]
	sta ($91.b,S),Y		; 93 91 ; Store accumulator (stack relative indirect indexed) ($91.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($ED.b)		; 92 ED ; Store accumulator (indirect) ($ED.b) [Reads: Accumulator, Direct Page]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: ZNC]
	tsb $9E6D.w		; 0C 6D 9E ; Test and set bits $9E6D.w [Reads: Accumulator] [Flags: Z]
	sta $A29F9E.l,X		; 9F 9E 9F A2 ; Store accumulator (long,X) $A29F9E.l,X [Reads: Accumulator, X Index]
	lda ($A2.b,X)		; A1 A2 ; Load accumulator ($A2.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($9E.b,X)		; A1 9E ; Load accumulator ($9E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $A0A1A2.l,X		; 9F A2 A1 A0 ; Store accumulator (long,X) $A0A1A2.l,X [Reads: Accumulator, X Index]
	sta $9E9E9D.l,X		; 9F 9D 9E 9E ; Store accumulator (long,X) $9E9E9D.l,X [Reads: Accumulator, X Index]
	sta $A29F9E.l,X		; 9F 9E 9F A2 ; Store accumulator (long,X) $A29F9E.l,X [Reads: Accumulator, X Index]
	lda ($A2.b,X)		; A1 A2 ; Load accumulator ($A2.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($9E.b,X)		; A1 9E ; Load accumulator ($9E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $A0A1A2.l,X		; 9F A2 A1 A0 ; Store accumulator (long,X) $A0A1A2.l,X [Reads: Accumulator, X Index]
	sta $ED9E9D.l,X		; 9F 9D 9E ED ; Store accumulator (long,X) $ED9E9D.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: ZNC]
	tsb $8E5D.w		; 0C 5D 8E ; Test and set bits $8E5D.w [Reads: Accumulator] [Flags: Z]
	bit #$8E.b		; 89 8E ; Test bits #$8E.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$8E.b		; 89 8E ; Test bits #$8E.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$8E.b		; 89 8E ; Test bits #$8E.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$EF.b		; 89 EF ; Test bits #$EF.b with accumulator [Reads: Accumulator] [Flags: Z]
	inc $03EB.w		; EE EB 03 ; Increment $03EB.w [Flags: ZN]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp.w [$0BE0]		; DC E0 0B ; Jump long indirect [$0BE0] [Flow: jump]
	tsb $9A6D.w		; 0C 6D 9A ; Test and set bits $9A6D.w [Reads: Accumulator] [Flags: Z]
	lda ($A6.b,X)		; A1 A6 ; Load accumulator ($A6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	lda ($A6.b,X)		; A1 A6 ; Load accumulator ($A6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda [$9A.b]		; A7 9A ; Load accumulator (long) [$9A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($A6.b,X)		; A1 A6 ; Load accumulator ($A6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	lda ($A6.b,X)		; A1 A6 ; Load accumulator ($A6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $9AA5.w,Y		; 99 A5 9A ; Store accumulator to $9AA5.w,Y [Reads: Accumulator, Y Index]
	lda ($A6.b,X)		; A1 A6 ; Load accumulator ($A6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	lda ($A6.b,X)		; A1 A6 ; Load accumulator ($A6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda [$9A.b]		; A7 9A ; Load accumulator (long) [$9A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($A6.b,X)		; A1 A6 ; Load accumulator ($A6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	lda ($A6.b,X)		; A1 A6 ; Load accumulator ($A6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $EDA5.w,Y		; 99 A5 ED ; Store accumulator to $EDA5.w,Y [Reads: Accumulator, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $18BE.w		; 6D BE 18 ; Add $18BE.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldx $BFC9.w,Y		; BE C9 BF ; Load X register $BFC9.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldx $C918.w,Y		; BE 18 C9 ; Load X register $C918.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tsb $C9BE.w		; 0C BE C9 ; Test and set bits $C9BE.w [Reads: Accumulator] [Flags: Z]
	lda $C918.w,X		; BD 18 C9 ; Load $C918.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $18BE.w		; 0C BE 18 ; Test and set bits $18BE.w [Reads: Accumulator] [Flags: Z]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldx $BFC9.w,Y		; BE C9 BF ; Load X register $BFC9.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldx $C918.w,Y		; BE 18 C9 ; Load X register $C918.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tsb $C9BE.w		; 0C BE C9 ; Test and set bits $C9BE.w [Reads: Accumulator] [Flags: Z]
	lda $C8ED.w,X		; BD ED C8 ; Load $C8ED.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $18B9.w		; 6D B9 18 ; Add $18B9.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $BAC9.w,Y		; B9 C9 BA ; Load $BAC9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $C918.w,Y		; B9 18 C9 ; Load $C918.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $C9B9.w		; 0C B9 C9 ; Test and set bits $C9B9.w [Reads: Accumulator] [Flags: Z]
	clv		; B8 ; Clear overflow flag [Flags: V]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $C918.w,Y		; B9 18 C9 ; Load $C918.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $C9B9.w		; 0C B9 C9 ; Test and set bits $C9B9.w [Reads: Accumulator] [Flags: Z]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $C918.w,Y		; B9 18 C9 ; Load $C918.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $C9B9.w		; 0C B9 C9 ; Test and set bits $C9B9.w [Reads: Accumulator] [Flags: Z]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sbc $E0AA.w		; ED AA E0 ; Subtract $E0AA.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	trb $04.b		; 14 04 ; Test and reset bits $04.b [Reads: Accumulator] [Flags: Z]
	adc $A8A8.w		; 6D A8 A8 ; Add $A8A8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tsb $06A8.w		; 0C A8 06 ; Test and set bits $06A8.w [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tsb $A8A8.w		; 0C A8 A8 ; Test and set bits $A8A8.w [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tsb $A8.b		; 04 A8 ; Test and set bits $A8.b [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tsb $EFA8.w		; 0C A8 EF ; Test and set bits $EFA8.w [Reads: Accumulator] [Flags: Z]
	sbc [$EB.b],Y		; F7 EB ; Subtract with carry (long indexed) [$EB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stx $8E89.w		; 8E 89 8E ; Store X register to $8E89.w [Reads: X Index]
	bit #$8E.b		; 89 8E ; Test bits #$8E.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$8E.b		; 89 8E ; Test bits #$8E.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$00.b		; 89 00 ; Test bits #$00.b with accumulator [Reads: Accumulator] [Flags: Z]
	tsb $A8.b		; 04 A8 ; Test and set bits $A8.b [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tsb $06A8.w		; 0C A8 06 ; Test and set bits $06A8.w [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tsb $A8A8.w		; 0C A8 A8 ; Test and set bits $A8A8.w [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tsb $A8.b		; 04 A8 ; Test and set bits $A8.b [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tsb $00A8.w		; 0C A8 00 ; Test and set bits $00A8.w [Reads: Accumulator] [Flags: Z]
	and $1DEC.w		; 2D EC 1D ; Logical AND $1DEC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpx $EC3D.w		; EC 3D EC ; Compare $EC3D.w with X register [Reads: X Index] [Flags: ZNC]
	eor $5DEC.w		; 4D EC 5D ; Exclusive OR $5DEC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpx $EC6D.w		; EC 6D EC ; Compare $EC6D.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $EC0D00.l,X		; FF 00 0D EC ; Subtract with carry (long,X) $EC0D00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $86EC.w,X		; 7D EC 86 ; Add $86EC.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx $EC8E.w		; EC 8E EC ; Compare $EC8E.w with X register [Reads: X Index] [Flags: ZNC]
	lda $EC.b		; A5 EC ; Load $EC.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $EC.b,X		; B5 EC ; Load $EC.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $ECEC.w		; CC EC EC ; Compare $ECEC.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpx $0000.w		; EC 00 00 ; Compare $0000.w with X register [Reads: X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $EC.b,X		; F6 EC ; Increment memory $EC.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	and $ED87ED.l,X		; 3F ED 87 ED ; AND accumulator with memory (long,X) $ED87ED.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $EDA8.w		; ED A8 ED ; Subtract $EDA8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $42ED.w,Y		; B9 ED 42 ; Load $42ED.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $EE8A.w		; EE 8A EE ; Increment $EE8A.w [Flags: ZN]
	ldy #$EE.b		; A0 EE ; Load #$EE.b into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$EE.b		; C9 EE ; Compare #$EE.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp $0000EE.l,X		; DF EE 00 00 ; Compare accumulator (long,X) $0000EE.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	inc $EF0F.w		; EE 0F EF ; Increment $EF0F.w [Flags: ZN]
	and $EF.b		; 25 EF ; Logical AND $EF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $EF.b,X		; 35 EF ; Logical AND $EF.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$EF.b]		; 47 EF ; Exclusive OR accumulator with memory (long) [$EF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sbc $000000.l		; EF 00 00 00 ; Subtract with carry (long) $000000.l [Writes: Accumulator] [Flags: ZVNC]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8BEF87.l		; EF 87 EF 8B ; Subtract with carry (long) $8BEF87.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $97EF91.l		; EF 91 EF 97 ; Subtract with carry (long) $97EF91.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $00EFA0.l		; EF A0 EF 00 ; Subtract with carry (long) $00EFA0.l [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$ED.b		; 09 ED ; Logical OR #$ED.b with accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $01EFA7.l		; EF A7 EF 01 ; Subtract with carry (long) $01EFA7.l [Writes: Accumulator] [Flags: ZVNC]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$ED.b		; 09 ED ; Logical OR #$ED.b with accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $01F028.l		; EF 28 F0 01 ; Subtract with carry (long) $01F028.l [Writes: Accumulator] [Flags: ZVNC]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E1F0.w		; ED F0 E1 ; Subtract $E1F0.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $3010.w		; 1C 10 30 ; Test and reset bits $3010.w [Reads: Accumulator] [Flags: Z]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $9A9B.w		; 6D 9B 9A ; Add $9A9B.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldy #$EF.b		; A0 EF ; Load #$EF.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl $E3.b		; 06 E3 ; Arithmetic shift left $E3.b [Reads: Direct Page] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $EF12.w,X		; 1D 12 EF ; OR accumulator with memory $EF12.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $F0.b,X		; B5 F0 ; Load $F0.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E1B4.w		; ED B4 E1 ; Subtract $E1B4.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl $1CE3.w		; 0E E3 1C ; Arithmetic shift left $1CE3.w [Flags: ZNC]
	trb $3810.w		; 1C 10 38 ; Test and reset bits $3810.w [Reads: Accumulator] [Flags: Z]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $9A9B.w		; 6D 9B 9A ; Add $9A9B.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldy #$EF.b		; A0 EF ; Load #$EF.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($58.b,X)		; 01 58 ; Logical OR ($58.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ora $50E5.w,Y		; 19 E5 50 ; OR accumulator with memory $50E5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $28.b		; E6 28 ; Increment $28.b [Reads: Direct Page] [Flags: ZN]
	ldy $E7.b,X		; B4 E7 ; Load Y register $E7.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ora $FFF5.w,X		; 1D F5 FF ; OR accumulator with memory $FFF5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $F802.w,X		; 1E 02 F8 ; Arithmetic shift left $F802.w,X [Reads: X Index] [Flags: ZNC]
	and ($28.b)		; 32 28 ; AND accumulator with memory (indirect) ($28.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl $A7EF.w		; 0E EF A7 ; Arithmetic shift left $A7EF.w [Flags: ZNC]
	sbc $E00001.l		; EF 01 00 E0 ; Subtract with carry (long) $E00001.l [Writes: Accumulator] [Flags: ZVNC]
	ora #$ED.b		; 09 ED ; Logical OR #$ED.b with accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc ($0C.b,X)		; E1 0C ; Subtract with carry ($0C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $01F028.l		; EF 28 F0 01 ; Subtract with carry (long) $01F028.l [Writes: Accumulator] [Flags: ZVNC]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $EFC8.w		; ED C8 EF ; Subtract $EFC8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	lda [$EF.b]		; A7 EF ; Load accumulator (long) [$EF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $06B3.w		; 6D B3 06 ; Add $06B3.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$B3.b		; 69 B3 ; Add #$B3.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b,S),Y		; B3 06 ; Load accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$B3.b		; 69 B3 ; Add #$B3.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b,S),Y		; B3 06 ; Load accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$B3.b		; 69 B3 ; Add #$B3.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b,S),Y		; B3 06 ; Load accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$B3.b		; 69 B3 ; Add #$B3.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	lda $06.b,X		; B5 06 ; Load $06.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$B5.b		; 69 B5 ; Add #$B5.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda $06.b,X		; B5 06 ; Load $06.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$B5.b		; 69 B5 ; Add #$B5.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	lda $06.b,X		; B5 06 ; Load $06.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$B5.b		; 69 B5 ; Add #$B5.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda $06.b,X		; B5 06 ; Load $06.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$B5.b		; 69 B5 ; Add #$B5.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$ED.b		; 09 ED ; Logical OR #$ED.b with accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $01F028.l		; EF 28 F0 01 ; Subtract with carry (long) $01F028.l [Writes: Accumulator] [Flags: ZVNC]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	lda $6906.w		; AD 06 69 ; Load $6906.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda $6906.w		; AD 06 69 ; Load $6906.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	lda $6906.w		; AD 06 69 ; Load $6906.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda $6906.w		; AD 06 69 ; Load $6906.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	lda $AF6906.l		; AF 06 69 AF ; Load long $AF6906.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $6B06AF.l		; AF AF 06 6B ; Load long $6B06AF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AF6906.l		; AF 06 69 AF ; Load long $AF6906.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $6C06AF.l		; AF AF 06 6C ; Load long $6C06AF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AF6906.l		; AF 06 69 AF ; Load long $AF6906.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $6B06AF.l		; AF AF 06 6B ; Load long $6B06AF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AF6906.l		; AF 06 69 AF ; Load long $AF6906.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $C930AF.l		; AF AF 30 C9 ; Load long $C930AF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $6D		; 10 6D ; Branch if plus to $10, $6D [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ldy #$EF.b		; A0 EF ; Load #$EF.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $01F0B5.l		; EF B5 F0 01 ; Subtract with carry (long) $01F0B5.l [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $9394.w		; 0C 94 93 ; Test and set bits $9394.w [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $9596.w		; 0C 96 95 ; Test and set bits $9596.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $9A9B.w		; 6D 9B 9A ; Add $9A9B.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldy #$EF.b		; A0 EF ; Load #$EF.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $06B4.w		; ED B4 06 ; Subtract $06B4.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	adc $06B3.w		; 6D B3 06 ; Add $06B3.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$B3.b		; 69 B3 ; Add #$B3.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b,S),Y		; B3 06 ; Load accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$B3.b		; 69 B3 ; Add #$B3.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b,S),Y		; B3 06 ; Load accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$B3.b		; 69 B3 ; Add #$B3.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b,S),Y		; B3 06 ; Load accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$B3.b		; 69 B3 ; Add #$B3.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b)		; B2 06 ; Load accumulator (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$B2.b		; 69 B2 ; Add #$B2.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b)		; B2 06 ; Load accumulator (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$B2.b		; 69 B2 ; Add #$B2.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b)		; B2 06 ; Load accumulator (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$B2.b		; 69 B2 ; Add #$B2.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b)		; B2 06 ; Load accumulator (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$B2.b		; 69 B2 ; Add #$B2.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b),Y		; B1 06 ; Load accumulator ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$B1.b		; 69 B1 ; Add #$B1.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b),Y		; B1 06 ; Load accumulator ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$B1.b		; 69 B1 ; Add #$B1.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b),Y		; B1 06 ; Load accumulator ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$B1.b		; 69 B1 ; Add #$B1.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($06.b),Y		; B1 06 ; Load accumulator ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$B1.b		; 69 B1 ; Add #$B1.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	adc #$B0.b		; 69 B0 ; Add #$B0.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	adc #$B0.b		; 69 B0 ; Add #$B0.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	adc #$B0.b		; 69 B0 ; Add #$B0.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	adc #$B0.b		; 69 B0 ; Add #$B0.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	sbc $04F0D3.l		; EF D3 F0 04 ; Subtract with carry (long) $04F0D3.l [Writes: Accumulator] [Flags: ZVNC]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$ED.b		; 09 ED ; Logical OR #$ED.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $06.b,X		; B4 06 ; Load Y register $06.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	adc $06AD.w		; 6D AD 06 ; Add $06AD.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$AD.b		; 69 AD ; Add #$AD.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda $06AD.w		; AD AD 06 ; Load $06AD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $6906.w		; AD 06 69 ; Load $6906.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	lda $6906.w		; AD 06 69 ; Load $6906.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda $6906.w		; AD 06 69 ; Load $6906.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $01F0E4.l		; EF E4 F0 01 ; Subtract with carry (long) $01F0E4.l [Writes: Accumulator] [Flags: ZVNC]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sbc $04F125.l		; EF 25 F1 04 ; Subtract with carry (long) $04F125.l [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $C9		; 30 C9 ; Branch if minus to $30, $C9 [Flow: branch]
	.db $10, $6D		; 10 6D ; Branch if plus to $10, $6D [Flow: branch]
	sta $EFA49E.l,X		; 9F 9E A4 EF ; Store accumulator (long,X) $EFA49E.l,X [Reads: Accumulator, X Index]
	rol $F1.b,X		; 36 F1 ; Rotate left $F1.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $A5A6.w		; 0C A6 A5 ; Test and set bits $A5A6.w [Reads: Accumulator] [Flags: Z]
	.db $30, $C8		; 30 C8 ; Branch if minus to $30, $C8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $30, $C9		; 30 C9 ; Branch if minus to $30, $C9 [Flow: branch]
	.db $10, $6D		; 10 6D ; Branch if plus to $10, $6D [Flow: branch]
	sta ($92.b,S),Y		; 93 92 ; Store accumulator (stack relative indirect indexed) ($92.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $97		; 30 97 ; Branch if minus to $30, $97 [Flow: branch]
	bit $91.b		; 24 91 ; Test bits $91.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $3090.w		; 0C 90 30 ; Test and set bits $3090.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $90		; 10 90 ; Branch if plus to $10, $90 [Flow: branch]
	sta $953096.l		; 8F 96 30 95 ; Store accumulator (long) $953096.l [Reads: Accumulator]
	bit $8F.b		; 24 8F ; Test bits $8F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $608E.w		; 0C 8E 60 ; Test and set bits $608E.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $9C9D.w		; 0C 9D 9C ; Test and set bits $9C9D.w [Reads: Accumulator] [Flags: Z]
	.db $30, $C8		; 30 C8 ; Branch if minus to $30, $C8 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $A8A9.w		; 0C A9 A8 ; Test and set bits $A8A9.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $9E9F.w		; 6D 9F 9E ; Add $9E9F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldy $EF.b		; A4 EF ; Load $EF.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	rol $F1.b,X		; 36 F1 ; Rotate left $F1.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $A5A6.w		; 0C A6 A5 ; Test and set bits $A5A6.w [Reads: Accumulator] [Flags: Z]
	.db $30, $C8		; 30 C8 ; Branch if minus to $30, $C8 [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E1F0.w		; ED F0 E1 ; Subtract $E1F0.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $6010.w		; 1C 10 60 ; Test and reset bits $6010.w [Reads: Accumulator] [Flags: Z]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $0CC8.w		; 6D C8 0C ; Add $0CC8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldy #$9F.b		; A0 9F ; Load #$9F.b into Y register [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: ZNC]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	ldx $4EEF.w		; AE EF 4E ; Load $4EEF.w into X register [Writes: X Index] [Flags: ZN]
	sbc ($03.b),Y		; F1 03 ; Subtract with carry ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc #$A8.b		; 69 A8 ; Add #$A8.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sbc $03F15F.l		; EF 5F F1 03 ; Subtract with carry (long) $03F15F.l [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $2499.w		; 0C 99 24 ; Test and set bits $2499.w [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $A4A5.w		; 0C A5 A4 ; Test and set bits $A4A5.w [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $9C6D.w		; 0C 6D 9C ; Test and set bits $9C6D.w [Reads: Accumulator] [Flags: Z]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $30, $C8		; 30 C8 ; Branch if minus to $30, $C8 [Flow: branch]
	tsb $A7A8.w		; 0C A8 A7 ; Test and set bits $A7A8.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	adc $0CC8.w		; 6D C8 0C ; Add $0CC8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $1898.w,Y		; 99 98 18 ; Store accumulator to $1898.w,Y [Reads: Accumulator, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $A4A5.w		; 0C A5 A4 ; Test and set bits $A4A5.w [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $30, $C8		; 30 C8 ; Branch if minus to $30, $C8 [Flow: branch]
	tsb $9F6D.w		; 0C 6D 9F ; Test and set bits $9F6D.w [Reads: Accumulator] [Flags: Z]
	stz $C818.w,X		; 9E 18 C8 ; Store zero to $C818.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda $AFAFAF.l		; AF AF AF AF ; Load long $AFAFAF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $6906AF.l		; AF AF 06 69 ; Load long $6906AF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $6C06AF.l		; AF AF 06 6C ; Load long $6C06AF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AF6906.l		; AF 06 69 AF ; Load long $AF6906.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $6B06AF.l		; AF AF 06 6B ; Load long $6B06AF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AF6906.l		; AF 06 69 AF ; Load long $AF6906.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $70EFAF.l		; AF AF EF 70 ; Load long $70EFAF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc ($01.b),Y		; F1 01 ; Subtract with carry ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $C8A8.w,X		; 7D A8 C8 ; Add $C8A8.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $C899.w		; 6D 99 C8 ; Add $C899.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$58.b		; C9 58 ; Compare #$58.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $60A8.w,X		; 7D A8 60 ; Add $60A8.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $C89F.w		; 6D 9F C8 ; Add $C89F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $06AF.w		; 6D AF 06 ; Add $06AF.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$AF.b		; 69 AF ; Add #$AF.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda $6B06AF.l		; AF AF 06 6B ; Load long $6B06AF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AF6906.l		; AF 06 69 AF ; Load long $AF6906.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $6C06AF.l		; AF AF 06 6C ; Load long $6C06AF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AF6906.l		; AF 06 69 AF ; Load long $AF6906.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $6B06AF.l		; AF AF 06 6B ; Load long $6B06AF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AF6906.l		; AF 06 69 AF ; Load long $AF6906.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $6D06AF.l		; AF AF 06 6D ; Load long $6D06AF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $6906.w		; AE 06 69 ; Load $6906.w into X register [Writes: X Index] [Flags: ZN]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	ldx $6906.w		; AE 06 69 ; Load $6906.w into X register [Writes: X Index] [Flags: ZN]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	ldx $6906.w		; AE 06 69 ; Load $6906.w into X register [Writes: X Index] [Flags: ZN]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	ldx $6906.w		; AE 06 69 ; Load $6906.w into X register [Writes: X Index] [Flags: ZN]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b)		; B2 06 ; Load accumulator (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$B2.b		; 69 B2 ; Add #$B2.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b)		; B2 06 ; Load accumulator (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$B2.b		; 69 B2 ; Add #$B2.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b)		; B2 06 ; Load accumulator (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$B2.b		; 69 B2 ; Add #$B2.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b)		; B2 06 ; Load accumulator (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$B2.b		; 69 B2 ; Add #$B2.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b),Y		; B1 06 ; Load accumulator ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$B1.b		; 69 B1 ; Add #$B1.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b),Y		; B1 06 ; Load accumulator ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$B1.b		; 69 B1 ; Add #$B1.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b),Y		; B1 06 ; Load accumulator ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$B1.b		; 69 B1 ; Add #$B1.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b),Y		; B1 06 ; Load accumulator ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$B1.b		; 69 B1 ; Add #$B1.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $06A9.w		; 6D A9 06 ; Add $06A9.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$A9.b		; 69 A9 ; Add #$A9.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$A9.b		; 69 A9 ; Add #$A9.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$A9.b		; 69 A9 ; Add #$A9.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$A9.b		; 69 A9 ; Add #$A9.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	ldy $6906.w		; AC 06 69 ; Load $6906.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	ldy $6906.w		; AC 06 69 ; Load $6906.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	ldy $6906.w		; AC 06 69 ; Load $6906.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	ldy $6906.w		; AC 06 69 ; Load $6906.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: ZN]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $0C9624.l,X		; 9F 24 96 0C ; Store accumulator (long,X) $0C9624.l,X [Reads: Accumulator, X Index]
	sta $48.b,X		; 95 48 ; Store accumulator to $48.b,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $A1A2.w		; 0C A2 A1 ; Test and set bits $A1A2.w [Reads: Accumulator] [Flags: Z]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $8E8F.w		; 6D 8F 8E ; Add $8E8F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sty $30.b,X		; 94 30 ; Store Y register $30.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta ($24.b,S),Y		; 93 24 ; Store accumulator (stack relative indirect indexed) ($24.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $4889.w		; 0C 89 48 ; Test and set bits $4889.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $9192.w		; 0C 92 91 ; Test and set bits $9192.w [Reads: Accumulator] [Flags: Z]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $A3A4.w		; 0C A4 A3 ; Test and set bits $A3A4.w [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $A5A6.w		; 0C A6 A5 ; Test and set bits $A5A6.w [Reads: Accumulator] [Flags: Z]
	brk $AF.b		; 00 AF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $AFAFAF.l		; AF AF AF AF ; Load long $AFAFAF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AFAFAF.l		; AF AF AF AF ; Load long $AFAFAF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AFAFAF.l		; AF AF AF AF ; Load long $AFAFAF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $00AFAF.l		; AF AF AF 00 ; Load long $00AFAF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	ldy $6906.w		; AC 06 69 ; Load $6906.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	ldy $6906.w		; AC 06 69 ; Load $6906.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	ldy $6906.w		; AC 06 69 ; Load $6906.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	ldy $6906.w		; AC 06 69 ; Load $6906.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: ZN]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	asl $69.b		; 06 69 ; Arithmetic shift left $69.b [Reads: Direct Page] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $30, $A3		; 30 A3 ; Branch if minus to $30, $A3 [Flow: branch]
	bit $9D.b		; 24 9D ; Test bits $9D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $309C.w		; 0C 9C 30 ; Test and set bits $309C.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $9C		; 10 9C ; Branch if plus to $10, $9C [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldx #$30.b		; A2 30 ; Load #$30.b into X register [Writes: X Index] [Flags: ZN]
	lda ($24.b,X)		; A1 24 ; Load accumulator ($24.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	tsb $489A.w		; 0C 9A 48 ; Test and set bits $489A.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $999A.w		; 0C 9A 99 ; Test and set bits $999A.w [Reads: Accumulator] [Flags: Z]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $06AE.w		; 6D AE 06 ; Add $06AE.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$AE.b		; 69 AE ; Add #$AE.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldx $06AE.w		; AE AE 06 ; Load $06AE.w into X register [Writes: X Index] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $6906.w		; AE 06 69 ; Load $6906.w into X register [Writes: X Index] [Flags: ZN]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	ldx $6906.w		; AE 06 69 ; Load $6906.w into X register [Writes: X Index] [Flags: ZN]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	ldx $6906.w		; AE 06 69 ; Load $6906.w into X register [Writes: X Index] [Flags: ZN]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b)		; B2 06 ; Load accumulator (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$B2.b		; 69 B2 ; Add #$B2.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b)		; B2 06 ; Load accumulator (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$B2.b		; 69 B2 ; Add #$B2.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b)		; B2 06 ; Load accumulator (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$B2.b		; 69 B2 ; Add #$B2.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b)		; B2 06 ; Load accumulator (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$B2.b		; 69 B2 ; Add #$B2.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B2.b)		; B2 B2 ; Load accumulator (indirect) ($B2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b),Y		; B1 06 ; Load accumulator ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$B1.b		; 69 B1 ; Add #$B1.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b),Y		; B1 06 ; Load accumulator ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$B1.b		; 69 B1 ; Add #$B1.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b),Y		; B1 06 ; Load accumulator ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$B1.b		; 69 B1 ; Add #$B1.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: ZNC]
	lda ($06.b),Y		; B1 06 ; Load accumulator ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$B1.b		; 69 B1 ; Add #$B1.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($DB.b),Y		; F1 DB ; Subtract with carry ($DB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($FF.b),Y		; F1 FF ; Subtract with carry ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $D1.b		; 00 D1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($0A.b),Y		; F1 0A ; Subtract with carry ($0A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($2C.b)		; F2 2C ; Subtract with carry (indirect) ($2C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($4A.b)		; F2 4A ; Subtract with carry (indirect) ($4A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($00.b)		; F2 00 ; Subtract with carry (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $56.b		; 00 56 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($00.b)		; F2 00 ; Subtract with carry (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $65.b		; 00 65 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($00.b)		; F2 00 ; Subtract with carry (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($F2.b)		; 72 F2 ; Add with carry (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($C8.b,X)		; 01 C8 ; Logical OR ($C8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	stx $18.b		; 86 18 ; Store X register to $18.b [Reads: X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $88.b		; 84 88 ; Store Y register to $88.b [Reads: Y Index]
	sbc $02F28F.l		; EF 8F F2 02 ; Subtract with carry (long) $02F28F.l [Writes: Accumulator] [Flags: ZVNC]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $64ED.w		; 0E ED 64 ; Arithmetic shift left $64ED.w [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $ACAC.w		; 2D AC AC ; Logical AND $ACAC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $A7AC.w		; AC AC A7 ; Load $A7AC.w into Y register [Writes: Y Index] [Flags: ZN]
	lda [$AA.b]		; A7 AA ; Load accumulator (long) [$AA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $A7AC.w		; AC AC A7 ; Load $A7AC.w into Y register [Writes: Y Index] [Flags: ZN]
	lda [$AA.b]		; A7 AA ; Load accumulator (long) [$AA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $02F29C.l		; EF 9C F2 02 ; Subtract with carry (long) $02F29C.l [Writes: Accumulator] [Flags: ZVNC]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $0CA0.w		; ED A0 0C ; Subtract $0CA0.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	adc $BAB6.w		; 6D B6 BA ; Add $BAB6.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldy $B8.b,X		; B4 B8 ; Load Y register $B8.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda ($B7.b)		; B2 B7 ; Load accumulator (indirect) ($B7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $BA.b,Y		; B6 BA ; Load X register $BA.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	sbc $01F2B5.l		; EF B5 F2 01 ; Subtract with carry (long) $01F2B5.l [Writes: Accumulator] [Flags: ZVNC]
	ldx $BA.b,Y		; B6 BA ; Load X register $BA.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ldy $B8.b,X		; B4 B8 ; Load Y register $B8.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda ($B7.b)		; B2 B7 ; Load accumulator (indirect) ($B7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $BA.b,Y		; B6 BA ; Load X register $BA.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	sbc $01F2B5.l		; EF B5 F2 01 ; Subtract with carry (long) $01F2B5.l [Writes: Accumulator] [Flags: ZVNC]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $EFE6.w		; ED E6 EF ; Subtract $EFE6.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	dec $F2.b		; C6 F2 ; Decrement $F2.b [Reads: Direct Page] [Flags: ZN]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $F2.b,S		; E3 F2 ; Subtract stack-relative $F2.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora ($FA.b,X)		; 01 FA ; Logical OR ($FA.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $72EF.w,Y		; 19 EF 72 ; OR accumulator with memory $72EF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($01.b)		; F2 01 ; Subtract with carry (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $01F2F1.l		; EF F1 F2 01 ; Subtract with carry (long) $01F2F1.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01F28F.l		; EF 8F F2 01 ; Subtract with carry (long) $01F28F.l [Writes: Accumulator] [Flags: ZVNC]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $E6ED.w		; 0E ED E6 ; Arithmetic shift left $E6ED.w [Flags: ZNC]
	sbc $01F2C6.l		; EF C6 F2 01 ; Subtract with carry (long) $01F2C6.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01F2E3.l		; EF E3 F2 01 ; Subtract with carry (long) $01F2E3.l [Writes: Accumulator] [Flags: ZVNC]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $E7.b,X		; B4 E7 ; Load Y register $E7.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ora $00FFF5.l,X		; 1F F5 FF 00 ; Logical OR long $00FFF5.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $1E.b		; 02 1E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $50, $50		; 50 50 ; Branch if overflow clear to $50, $50 [Flow: branch]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $18FA.w		; ED FA 18 ; Subtract $18FA.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	adc $8A86.w		; 6D 86 8A ; Add $8A86.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sty $0C.b		; 84 0C ; Store Y register to $0C.b [Reads: Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $82, $00, $86		; 82 00 86 ; Branch always long to $82, $00, $86 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $0C.b		; 84 0C ; Store Y register to $0C.b [Reads: Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $82, $C8, $86		; 82 C8 86 ; Branch always long to $82, $C8, $86 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $88.b		; 84 88 ; Store Y register to $88.b [Reads: Y Index]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $A7A7.w		; AC A7 A7 ; Load $A7A7.w into Y register [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $A7AC.w		; AC AC A7 ; Load $A7AC.w into Y register [Writes: Y Index] [Flags: ZN]
	lda [$AA.b]		; A7 AA ; Load accumulator (long) [$AA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $A7AC.w		; AC AC A7 ; Load $A7AC.w into Y register [Writes: Y Index] [Flags: ZN]
	lda [$AA.b]		; A7 AA ; Load accumulator (long) [$AA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda ($B7.b)		; B2 B7 ; Load accumulator (indirect) ($B7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $BA.b,Y		; B6 BA ; Load X register $BA.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ldy $B8.b,X		; B4 B8 ; Load Y register $B8.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda ($B7.b)		; B2 B7 ; Load accumulator (indirect) ($B7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $BA.b,Y		; B6 BA ; Load X register $BA.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ldy $B8.b,X		; B4 B8 ; Load Y register $B8.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda ($B7.b)		; B2 B7 ; Load accumulator (indirect) ($B7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $8A86.w		; 6D 86 8A ; Add $8A86.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sty $0C.b		; 84 0C ; Store Y register to $0C.b [Reads: Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $82, $C8, $86		; 82 C8 86 ; Branch always long to $82, $C8, $86 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $88.b		; 84 88 ; Store Y register to $88.b [Reads: Y Index]
	stx $8A.b		; 86 8A ; Store X register to $8A.b [Reads: X Index]
	sty $0C.b		; 84 0C ; Store Y register to $0C.b [Reads: Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $82, $C8, $86		; 82 C8 86 ; Branch always long to $82, $C8, $86 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $88.b		; 84 88 ; Store Y register to $88.b [Reads: Y Index]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $0C.b		; 84 0C ; Store Y register to $0C.b [Reads: Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $82, $C8, $86		; 82 C8 86 ; Branch always long to $82, $C8, $86 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $12.b		; 84 12 ; Store Y register to $12.b [Reads: Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $18.b		; 86 18 ; Store X register to $18.b [Reads: X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $88.b		; 84 88 ; Store Y register to $88.b [Reads: Y Index]
	stx $8A.b		; 86 8A ; Store X register to $8A.b [Reads: X Index]
	sty $0C.b		; 84 0C ; Store Y register to $0C.b [Reads: Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $82, $C8, $86		; 82 C8 86 ; Branch always long to $82, $C8, $86 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $88.b		; 84 88 ; Store Y register to $88.b [Reads: Y Index]
	brk $42.b		; 00 42 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($12.b,S),Y		; F3 12 ; Subtract with carry (stack relative indirect indexed) ($12.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($22.b,S),Y		; F3 22 ; Subtract with carry (stack relative indirect indexed) ($22.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($32.b,S),Y		; F3 32 ; Subtract with carry (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($FF.b,S),Y		; F3 FF ; Subtract with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($00.b,S),Y		; F3 00 ; Subtract with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $52.b		; 00 52 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($74.b,S),Y		; F3 74 ; Subtract with carry (stack relative indirect indexed) ($74.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($00.b,S),Y		; F3 00 ; Subtract with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $87.b		; 00 87 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($98.b,S),Y		; F3 98 ; Subtract with carry (stack relative indirect indexed) ($98.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($00.b,S),Y		; F3 00 ; Subtract with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B7.b		; 00 B7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($C4.b,S),Y		; F3 C4 ; Subtract with carry (stack relative indirect indexed) ($C4.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($CE.b,S),Y		; F3 CE ; Subtract with carry (stack relative indirect indexed) ($CE.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($E0.b,S),Y		; F3 E0 ; Subtract with carry (stack relative indirect indexed) ($E0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($E4.b,S),Y		; F3 E4 ; Subtract with carry (stack relative indirect indexed) ($E4.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($00.b,S),Y		; F3 00 ; Subtract with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($FB.b,S),Y		; F3 FB ; Subtract with carry (stack relative indirect indexed) ($FB.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($08.b,S),Y		; F3 08 ; Subtract with carry (stack relative indirect indexed) ($08.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	pea $F42F.w		; F4 2F F4 ; Push absolute address $F42F.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	pea $0000.w		; F4 00 00 ; Push absolute address $0000.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $F497F4.l,X		; 5F F4 97 F4 ; Exclusive OR accumulator with memory (long,X) $F497F4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy $D0F4.w,X		; BC F4 D0 ; Load Y register $D0F4.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	pea $F4EF.w		; F4 EF F4 ; Push absolute address $F4EF.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	asl $00F5.w		; 0E F5 00 ; Arithmetic shift left $00F5.w [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc [$15.b]		; E7 15 ; Subtract with carry (long) [$15.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $EE64.w		; ED 64 EE ; Subtract $EE64.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	bit $E9C8.w,X		; 3C C8 E9 ; Test bits $E9C8.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	trb $E11E.w		; 1C 1E E1 ; Test and reset bits $E11E.w [Reads: Accumulator] [Flags: Z]
	asl $7D30.w		; 0E 30 7D ; Arithmetic shift left $7D30.w [Flags: ZNC]
	lda $EFB218.l		; AF 18 B2 EF ; Load long $EFB218.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $F5.b,S		; 23 F5 ; AND accumulator with stack relative $F5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda ($0C.b)		; B2 0C ; Load accumulator (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $AF		; B0 AF ; Branch if carry set to $B0, $AF [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $E000.w		; AD 00 E0 ; Load $E000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $EE64.w		; ED 64 EE ; Subtract $EE64.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $C8		; 50 C8 ; Branch if overflow clear to $50, $C8 [Flow: branch]
	sbc ($06.b,X)		; E1 06 ; Subtract with carry ($06.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $9898.w		; 6D 98 98 ; Add $9898.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$96.b],Y		; 97 96 ; Store accumulator (long indexed) [$96.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta $9A.b,X		; 95 9A ; Store accumulator to $9A.b,X [Reads: Accumulator, X Index]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $EE64.w		; ED 64 EE ; Subtract $EE64.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $C8		; 50 C8 ; Branch if overflow clear to $50, $C8 [Flow: branch]
	sbc ($0A.b,X)		; E1 0A ; Subtract with carry ($0A.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $18.b,S		; E3 18 ; Subtract stack-relative $18.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $01F537.l		; EF 37 F5 01 ; Subtract with carry (long) $01F537.l [Writes: Accumulator] [Flags: ZVNC]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $EE64.w		; ED 64 EE ; Subtract $EE64.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $A0		; 50 A0 ; Branch if overflow clear to $50, $A0 [Flow: branch]
	sbc $1A.b,S		; E3 1A ; Subtract stack-relative $1A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $E11E.w		; 1C 1E E1 ; Test and reset bits $E11E.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $18AF.w,X		; 7D AF 18 ; Add $18AF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($EF.b)		; B2 EF ; Load accumulator (indirect) ($EF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $F5.b,S		; 23 F5 ; AND accumulator with stack relative $F5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda ($0C.b)		; B2 0C ; Load accumulator (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $AF		; B0 AF ; Branch if carry set to $B0, $AF [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	lda $7D30.w		; AD 30 7D ; Load $7D30.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $EFB218.l		; AF 18 B2 EF ; Load long $EFB218.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and $F5.b,S		; 23 F5 ; AND accumulator with stack relative $F5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ldx $00C8.w,Y		; BE C8 00 ; Load X register $00C8.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $9898.w		; 6D 98 98 ; Add $9898.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$96.b],Y		; 97 96 ; Store accumulator (long indexed) [$96.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta $9A.b,X		; 95 9A ; Store accumulator to $9A.b,X [Reads: Accumulator, X Index]
	cpx #$15.b		; E0 15 ; Compare #$15.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E382.w		; ED 82 E3 ; Subtract $E382.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	trb $1C1C.w		; 1C 1C 1C ; Test and reset bits $1C1C.w [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $AAA8.w,X		; 7D A8 AA ; Add $AAA8.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$A8.b		; A9 A8 ; Load #$A8.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $EF.b		; A6 EF ; Load $EF.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	and [$F5.b],Y		; 37 F5 ; AND accumulator with memory (long indexed) [$F5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $18AF.w,X		; 7D AF 18 ; Add $18AF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($EF.b)		; B2 EF ; Load accumulator (indirect) ($EF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $F5.b,S		; 23 F5 ; AND accumulator with stack relative $F5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ldx $C840.w,Y		; BE 40 C8 ; Load X register $C840.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cpx #$16.b		; E0 16 ; Compare #$16.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $01F562.l		; EF 62 F5 01 ; Subtract with carry (long) $01F562.l [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $9C9D.w		; 6D 9D 9C ; Add $9C9D.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $9B9C.w,X		; 9D 9C 9B ; Store accumulator to $9B9C.w,X [Reads: Accumulator, X Index]
	.db $30, $9A		; 30 9A ; Branch if minus to $30, $9A [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($E0.b,S),Y		; 93 E0 ; Store accumulator (stack relative indirect indexed) ($E0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $181C.w		; 1C 1C 18 ; Test and reset bits $181C.w [Reads: Accumulator] [Flags: Z]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $18A4.w		; 6D A4 18 ; Add $18A4.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $18.b,S		; A3 18 ; Load accumulator (stack relative) $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda ($18.b,X)		; A1 18 ; Load accumulator ($18.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sta $30C918.l,X		; 9F 18 C9 30 ; Store accumulator (long,X) $30C918.l,X [Reads: Accumulator, X Index]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $18.b,S		; A3 18 ; Load accumulator (stack relative) $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldx #$18.b		; A2 18 ; Load #$18.b into X register [Writes: X Index] [Flags: ZN]
	cmp #$A1.b		; C9 A1 ; Compare #$A1.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sta $C90C.w,X		; 9D 0C C9 ; Store accumulator to $C90C.w,X [Reads: Accumulator, X Index]
	tsb $A46D.w		; 0C 6D A4 ; Test and set bits $A46D.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A8		; 30 A8 ; Branch if minus to $30, $A8 [Flow: branch]
	tsb $A3C9.w		; 0C C9 A3 ; Test and set bits $A3C9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A6		; 30 A6 ; Branch if minus to $30, $A6 [Flow: branch]
	tsb $A1C9.w		; 0C C9 A1 ; Test and set bits $A1C9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A4		; 30 A4 ; Branch if minus to $30, $A4 [Flow: branch]
	tsb $9FC9.w		; 0C C9 9F ; Test and set bits $9FC9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A3		; 30 A3 ; Branch if minus to $30, $A3 [Flow: branch]
	tsb $A4C9.w		; 0C C9 A4 ; Test and set bits $A4C9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A8		; 30 A8 ; Branch if minus to $30, $A8 [Flow: branch]
	tsb $A3C9.w		; 0C C9 A3 ; Test and set bits $A3C9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A6		; 30 A6 ; Branch if minus to $30, $A6 [Flow: branch]
	tsb $A2C9.w		; 0C C9 A2 ; Test and set bits $A2C9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A5		; 30 A5 ; Branch if minus to $30, $A5 [Flow: branch]
	tsb $A1C9.w		; 0C C9 A1 ; Test and set bits $A1C9.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $A3.b		; A4 A3 ; Load $A3.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sbc $01F562.l		; EF 62 F5 01 ; Subtract with carry (long) $01F562.l [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $B4.b		; E5 B4 ; Subtract $B4.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $F802.w,X		; 3C 02 F8 ; Test bits $F802.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	asl $2828.w,X		; 1E 28 28 ; Arithmetic shift left $2828.w,X [Reads: X Index] [Flags: ZNC]
	sbc [$1D.b]		; E7 1D ; Subtract with carry (long) [$1D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	trb $E116.w		; 1C 16 E1 ; Test and reset bits $E116.w [Reads: Accumulator] [Flags: Z]
	asl $C90C.w		; 0E 0C C9 ; Arithmetic shift left $C90C.w [Flags: ZNC]
	asl $AB6D.w		; 0E 6D AB ; Arithmetic shift left $AB6D.w [Flags: ZNC]
	ora $0CAD.w		; 0D AD 0C ; Logical OR $0CAD.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $0AB00B.l		; AF 0B B0 0A ; Load long $0AB00B.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($09.b)		; B2 09 ; Load accumulator (indirect) ($09.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $08.b,X		; B4 08 ; Load Y register $08.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $18.b,X		; B5 18 ; Load $18.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$B5.b],Y		; B7 B5 ; Load accumulator (long indexed) [$B5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $60BA.w,X		; BC BA 60 ; Load Y register $60BA.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	adc $30BB.w,X		; 7D BB 30 ; Add $30BB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $E3A0.w		; ED A0 E3 ; Subtract $E3A0.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora [$E1.b],Y		; 17 E1 ; OR accumulator with memory (long indexed) [$E1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $C914.w		; 0C 14 C9 ; Test and set bits $C914.w [Reads: Accumulator] [Flags: Z]
	asl $AB6D.w		; 0E 6D AB ; Arithmetic shift left $AB6D.w [Flags: ZNC]
	ora $0CAD.w		; 0D AD 0C ; Logical OR $0CAD.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $0AB00B.l		; AF 0B B0 0A ; Load long $0AB00B.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($09.b)		; B2 09 ; Load accumulator (indirect) ($09.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $08.b,X		; B4 08 ; Load Y register $08.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $18.b,X		; B5 18 ; Load $18.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$B5.b],Y		; B7 B5 ; Load accumulator (long indexed) [$B5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $60BA.w,X		; BC BA 60 ; Load Y register $60BA.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	adc $28BB.w,X		; 7D BB 28 ; Add $28BB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	trb $141A.w		; 1C 1A 14 ; Test and reset bits $141A.w [Reads: Accumulator] [Flags: Z]
	sbc ($06.b,X)		; E1 06 ; Subtract with carry ($06.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $30C9.w,Y		; 59 C9 30 ; Exclusive OR accumulator with memory $30C9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $A2A0.w,X		; 7D A0 A2 ; Add $A2A0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $E0C830.l,X		; 9F 30 C8 E0 ; Store accumulator (long,X) $E0C830.l,X [Reads: Accumulator, X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora [$E1.b],Y		; 17 E1 ; OR accumulator with memory (long indexed) [$E1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and ($C9.b,S),Y		; 33 C9 ; AND accumulator (stack relative indirect indexed) ($C9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc $0AA8.w		; 6D A8 0A ; Add $0AA8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $A718.w		; AD 18 A7 ; Load $A718.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $AC.b		; A6 AC ; Load $AC.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $30AA.w,X		; 7D AA 30 ; Add $30AA.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora [$E1.b],Y		; 17 E1 ; OR accumulator with memory (long indexed) [$E1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and ($C9.b,S),Y		; 33 C9 ; AND accumulator (stack relative indirect indexed) ($C9.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc $0A9F.w		; 6D 9F 0A ; Add $0A9F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($09.b,X)		; A1 09 ; Load accumulator ($09.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $08.b,S		; A3 08 ; Load accumulator (stack relative) $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $B0, $AE		; B0 AE ; Branch if carry set to $B0, $AE [Flow: branch]
	lda $B3.b,X		; B5 B3 ; Load $B3.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $30B2.w,X		; 7D B2 30 ; Add $30B2.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	trb $141A.w		; 1C 1A 14 ; Test and reset bits $141A.w [Reads: Accumulator] [Flags: Z]
	sbc ($04.b,X)		; E1 04 ; Subtract with carry ($04.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $30C9.w,Y		; 59 C9 30 ; Exclusive OR accumulator with memory $30C9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $9694.w,X		; 7D 94 96 ; Add $9694.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta ($30.b,S),Y		; 93 30 ; Store accumulator (stack relative indirect indexed) ($30.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $AB0C.w		; AD 0C AB ; Load $AB0C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AF30.w		; AD 30 AF ; Load $AF30.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda ($48.b)		; B2 48 ; Load accumulator (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $AF30.w		; AD 30 AF ; Load $AF30.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda ($30.b)		; B2 30 ; Load accumulator (indirect) ($30.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $B718.w,Y		; B9 18 B7 ; Load $B718.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $309F.w		; 6D 9F 30 ; Add $309F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tsb $A1C9.w		; 0C C9 A1 ; Test and set bits $A1C9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $AA		; 30 AA ; Branch if minus to $30, $AA [Flow: branch]
	tsb $9FC9.w		; 0C C9 9F ; Test and set bits $9FC9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A8		; 30 A8 ; Branch if minus to $30, $A8 [Flow: branch]
	tsb $A1C9.w		; 0C C9 A1 ; Test and set bits $A1C9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $AA		; 30 AA ; Branch if minus to $30, $AA [Flow: branch]
	tsb $A6C9.w		; 0C C9 A6 ; Test and set bits $A6C9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $AB		; 30 AB ; Branch if minus to $30, $AB [Flow: branch]
	tsb $A5C9.w		; 0C C9 A5 ; Test and set bits $A5C9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $AB		; 30 AB ; Branch if minus to $30, $AB [Flow: branch]
	tsb $A4C9.w		; 0C C9 A4 ; Test and set bits $A4C9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $AB		; 30 AB ; Branch if minus to $30, $AB [Flow: branch]
	tsb $A4C9.w		; 0C C9 A4 ; Test and set bits $A4C9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $AA		; 30 AA ; Branch if minus to $30, $AA [Flow: branch]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $0CB2.w,X		; 7D B2 0C ; Add $0CB2.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $AF		; B0 AF ; Branch if carry set to $B0, $AF [Flow: branch]
	.db $B0, $AF		; B0 AF ; Branch if carry set to $B0, $AF [Flow: branch]
	.db $30, $AB		; 30 AB ; Branch if minus to $30, $AB [Flow: branch]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	lda $ADAFAD.l		; AF AD AF AD ; Load long $ADAFAD.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $30, $A8		; 30 A8 ; Branch if minus to $30, $A8 [Flow: branch]
	lda ($0C.b)		; B2 0C ; Load accumulator (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $AF		; B0 AF ; Branch if carry set to $B0, $AF [Flow: branch]
	.db $B0, $AF		; B0 AF ; Branch if carry set to $B0, $AF [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	.db $B0, $48		; B0 48 ; Branch if carry set to $B0, $48 [Flow: branch]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $8CF5.w		; 9C F5 8C ; Store zero to $8CF5.w
	sbc $AC.b,X		; F5 AC ; Subtract $AC.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00.b,X		; F5 00 ; Subtract $00.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $BC.b		; 00 BC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $D9.b,X		; F5 D9 ; Subtract $D9.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $03.b,X		; F5 03 ; Subtract $03.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $30.b,X		; F6 30 ; Increment memory $30.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	inc $5D.b,X		; F6 5D ; Increment memory $5D.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	inc $8A.b,X		; F6 8A ; Increment memory $8A.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	inc $A1.b,X		; F6 A1 ; Increment memory $A1.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	inc $D8.b,X		; F6 D8 ; Increment memory $D8.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	inc $F4.b,X		; F6 F4 ; Increment memory $F4.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	inc $24.b,X		; F6 24 ; Increment memory $24.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc [$3E.b],Y		; F7 3E ; Subtract with carry (long indexed) [$3E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$5E.b],Y		; F7 5E ; Subtract with carry (long indexed) [$5E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$7E.b],Y		; F7 7E ; Subtract with carry (long indexed) [$7E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$9D.b],Y		; F7 9D ; Subtract with carry (long indexed) [$9D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$B4.b],Y		; F7 B4 ; Subtract with carry (long indexed) [$B4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$CB.b],Y		; F7 CB ; Subtract with carry (long indexed) [$CB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$E2.b],Y		; F7 E2 ; Subtract with carry (long indexed) [$E2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$EE.b],Y		; F7 EE ; Subtract with carry (long indexed) [$EE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$16.b],Y		; F7 16 ; Subtract with carry (long indexed) [$16.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	eor ($F8.b,X)		; 41 F8 ; Exclusive OR accumulator with memory ($F8.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($97F8.w)		; 6C F8 97 ; Jump indirect to ($97F8.w) [Flow: jump]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda ($F8.b,X)		; A1 F8 ; Load accumulator ($F8.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	sed		; F8 ; Set decimal flag [Flags: D]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $EE64.w		; ED 64 EE ; Subtract $EE64.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	stx $F0.b,Y		; 96 F0 ; Store X register $F0.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sbc $1A.b,S		; E3 1A ; Subtract stack-relative $1A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $E11E.w		; 1C 1E E1 ; Test and reset bits $E11E.w [Reads: Accumulator] [Flags: Z]
	asl $D8EF.w		; 0E EF D8 ; Arithmetic shift left $D8EF.w [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpx $F8.b		; E4 F8 ; Compare $F8.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda ($0C.b)		; B2 0C ; Load accumulator (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $AF		; B0 AF ; Branch if carry set to $B0, $AF [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $ED00.w		; AD 00 ED ; Load $ED00.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc ($14.b,X)		; E1 14 ; Subtract with carry ($14.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
.INDEX 8
	sep #$90		; E2 90
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $ABAB.w,X		; 7D AB AB ; Add $ABAB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.INDEX 8
	sep #$90		; E2 90
	trb $AB.b		; 14 AB ; Test and reset bits $AB.b [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.INDEX 8
	sep #$90		; E2 90
	brk $AB.b		; 00 AB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.INDEX 8
	sep #$90		; E2 90
	trb $AB.b		; 14 AB ; Test and reset bits $AB.b [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sbc $E178.w		; ED 78 E1 ; Subtract $E178.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	trb $E2.b		; 14 E2 ; Test and reset bits $E2.b [Reads: Accumulator] [Flags: Z]
	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	asl $C9.b		; 06 C9 ; Arithmetic shift left $C9.b [Reads: Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $A8A8.w,X		; 7D A8 A8 ; Add $A8A8.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.INDEX 8
	sep #$90		; E2 90
	trb $A8.b		; 14 A8 ; Test and reset bits $A8.b [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.INDEX 8
	sep #$90		; E2 90
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.INDEX 8
	sep #$90		; E2 90
	trb $A8.b		; 14 A8 ; Test and reset bits $A8.b [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ora ($A6.b)		; 12 A6 ; OR accumulator with memory (indirect) ($A6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $E178.w		; ED 78 E1 ; Subtract $E178.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $E2.b		; 00 E2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $14		; 90 14 ; Branch if carry clear to $90, $14 [Flow: branch]
	tsb $18C9.w		; 0C C9 18 ; Test and set bits $18C9.w [Reads: Accumulator] [Flags: Z]
	adc $A6A6.w,X		; 7D A6 A6 ; Add $A6A6.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
.INDEX 8
	sep #$90		; E2 90
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $E2.b		; A6 E2 ; Load $E2.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	.db $90, $14		; 90 14 ; Branch if carry clear to $90, $14 [Flow: branch]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
.INDEX 8
	sep #$90		; E2 90
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	tsb $EDA4.w		; 0C A4 ED ; Test and set bits $EDA4.w [Reads: Accumulator] [Flags: Z]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc ($00.b,X)		; E1 00 ; Subtract with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
.INDEX 8
	sep #$90		; E2 90
	trb $12.b		; 14 12 ; Test and reset bits $12.b [Reads: Accumulator] [Flags: Z]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $A3A3.w,X		; 7D A3 A3 ; Add $A3A3.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
.INDEX 8
	sep #$90		; E2 90
	brk $A3.b		; 00 A3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $E2.b,S		; A3 E2 ; Load accumulator (stack relative) $E2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $90, $14		; 90 14 ; Branch if carry clear to $90, $14 [Flow: branch]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $A2.b,S		; A3 A2 ; Load accumulator (stack relative) $A2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: ZN]
.INDEX 8
	sep #$90		; E2 90
	brk $A1.b		; 00 A1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $A1.b		; 06 A1 ; Arithmetic shift left $A1.b [Reads: Direct Page] [Flags: ZNC]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $EE64.w		; ED 64 EE ; Subtract $EE64.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sty $E1DC.w		; 8C DC E1 ; Store Y register to $E1DC.w [Reads: Y Index]
	asl $E3.b		; 06 E3 ; Arithmetic shift left $E3.b [Reads: Direct Page] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $10, $14		; 10 14 ; Branch if plus to $10, $14 [Flow: branch]
	sbc $01F8F3.l		; EF F3 F8 01 ; Subtract with carry (long) $01F8F3.l [Writes: Accumulator] [Flags: ZVNC]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $A2.b,S		; A3 A2 ; Load accumulator (stack relative) $A2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda ($A6.b,X)		; A1 A6 ; Load accumulator ($A6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $EE64.w		; ED 64 EE ; Subtract $EE64.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	stx $DC.b,Y		; 96 DC ; Store X register $DC.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sbc ($0A.b,X)		; E1 0A ; Subtract with carry ($0A.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	adc $309F.w		; 6D 9F 30 ; Add $309F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tsb $A1C9.w		; 0C C9 A1 ; Test and set bits $A1C9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $AA		; 30 AA ; Branch if minus to $30, $AA [Flow: branch]
	tsb $9FC9.w		; 0C C9 9F ; Test and set bits $9FC9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A8		; 30 A8 ; Branch if minus to $30, $A8 [Flow: branch]
	tsb $A1C9.w		; 0C C9 A1 ; Test and set bits $A1C9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $AA		; 30 AA ; Branch if minus to $30, $AA [Flow: branch]
	tsb $9FC9.w		; 0C C9 9F ; Test and set bits $9FC9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A6		; 30 A6 ; Branch if minus to $30, $A6 [Flow: branch]
	tsb $9FC9.w		; 0C C9 9F ; Test and set bits $9FC9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A5		; 30 A5 ; Branch if minus to $30, $A5 [Flow: branch]
	tsb $9FC9.w		; 0C C9 9F ; Test and set bits $9FC9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A4		; 30 A4 ; Branch if minus to $30, $A4 [Flow: branch]
	tsb $A1C9.w		; 0C C9 A1 ; Test and set bits $A1C9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $AA		; 30 AA ; Branch if minus to $30, $AA [Flow: branch]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $EE64.w		; ED 64 EE ; Subtract $EE64.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ldy #$C8.b		; A0 C8 ; Load #$C8.b into Y register [Writes: Y Index] [Flags: ZN]
	sbc $1A.b,S		; E3 1A ; Subtract stack-relative $1A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $E11E.w		; 1C 1E E1 ; Test and reset bits $E11E.w [Reads: Accumulator] [Flags: Z]
	tsb $F8EF.w		; 0C EF F8 ; Test and set bits $F8EF.w [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpx $F8.b		; E4 F8 ; Compare $F8.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda ($0C.b)		; B2 0C ; Load accumulator (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $AF		; B0 AF ; Branch if carry set to $B0, $AF [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	lda $18FA.w		; AD FA 18 ; Load $18FA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $B4.b		; E5 B4 ; Subtract $B4.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $F802.w,X		; 3C 02 F8 ; Test bits $F802.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	asl $2828.w,X		; 1E 28 28 ; Arithmetic shift left $2828.w,X [Reads: X Index] [Flags: ZNC]
	sbc [$21.b]		; E7 21 ; Subtract with carry (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ldy $3E.b,X		; B4 3E ; Load Y register $3E.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $EF14.w		; ED 14 EF ; Subtract $EF14.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $F9.b		; 05 F9 ; Logical OR $F9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($C9.b,X)		; 01 C9 ; Logical OR ($C9.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp #$E7.b		; C9 E7 ; Compare #$E7.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $E0.b,X		; 15 E0 ; OR accumulator with memory $E0.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $14E1.w		; 0E E1 14 ; Arithmetic shift left $14E1.w [Flags: ZNC]
	inc $7850.w		; EE 50 78 ; Increment $7850.w [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $ABAB.w,X		; 7D AB AB ; Add $ABAB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $A0ED.w		; 0E ED A0 ; Arithmetic shift left $A0ED.w [Flags: ZNC]
	sbc ($14.b,X)		; E1 14 ; Subtract with carry ($14.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sta $A6A3.w,X		; 9D A3 A6 ; Store accumulator to $A6A3.w,X [Reads: Accumulator, X Index]
	inc $3CFA.w		; EE FA 3C ; Increment $3CFA.w [Flags: ZN]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AD10.w		; AD 10 AD ; Load $AD10.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $E0AD.w		; AD AD E0 ; Load $E0AD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl $A0ED.w		; 0E ED A0 ; Arithmetic shift left $A0ED.w [Flags: ZNC]
	sbc ($0D.b,X)		; E1 0D ; Subtract with carry ($0D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsb $30C9.w		; 0C C9 30 ; Test and set bits $30C9.w [Reads: Accumulator] [Flags: Z]
	adc $A19D.w,X		; 7D 9D A1 ; Add $A19D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $A9.b		; A6 A9 ; Load $A9.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	inc $3CFA.w		; EE FA 3C ; Increment $3CFA.w [Flags: ZN]
	lda $24AFAF.l		; AF AF AF 24 ; Load long $24AFAF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $10C804.l		; AF 04 C8 10 ; Load long $10C804.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AFAFAF.l		; AF AF AF AF ; Load long $AFAFAF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $E0AF0C.l		; AF 0C AF E0 ; Load long $E0AF0C.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl $A0ED.w		; 0E ED A0 ; Arithmetic shift left $A0ED.w [Flags: ZNC]
	sbc ($08.b,X)		; E1 08 ; Subtract with carry ($08.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $A3A1.w,X		; 7D A1 A3 ; Add $A3A1.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda #$AD.b		; A9 AD ; Load #$AD.b into accumulator [Writes: Accumulator] [Flags: ZN]
	inc $3CFA.w		; EE FA 3C ; Increment $3CFA.w [Flags: ZN]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $C808.w		; AD 08 C8 ; Load $C808.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $AD		; 10 AD ; Branch if plus to $10, $AD [Flow: branch]
	lda $ADAD.w		; AD AD AD ; Load $ADAD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AD08.w		; AD 08 AD ; Load $AD08.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E1A0.w		; ED A0 E1 ; Subtract $E1A0.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $A6A3.w,X		; 7D A3 A6 ; Add $A6A3.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $EEAF.w		; AD AF EE ; Load $EEAF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	bit $AFAF.w,X		; 3C AF AF ; Test bits $AFAF.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	lda $C8AF0C.l		; AF 0C AF C8 ; Load long $C8AF0C.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $AF		; 10 AF ; Branch if plus to $10, $AF [Flow: branch]
	lda $AFAFAF.l		; AF AF AF AF ; Load long $AFAFAF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $AF.b		; 04 AF ; Test and set bits $AF.b [Reads: Accumulator] [Flags: Z]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E114.w		; ED 14 E1 ; Subtract $E114.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $05EF.w		; 0D EF 05 ; Logical OR $05EF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $C901.w,Y		; F9 01 C9 ; Subtract with carry $C901.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$EE.b		; C9 EE ; Compare #$EE.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $50, $78		; 50 78 ; Branch if overflow clear to $50, $78 [Flow: branch]
	asl $18C9.w,X		; 1E C9 18 ; Arithmetic shift left $18C9.w,X [Reads: X Index] [Flags: ZNC]
	adc $A8A8.w,X		; 7D A8 A8 ; Add $A8A8.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($A8.b)		; 12 A8 ; OR accumulator with memory (indirect) ($A8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E114.w		; ED 14 E1 ; Subtract $E114.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora [$EF.b]		; 07 EF ; OR accumulator with memory (long) [$EF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $F9.b		; 05 F9 ; Logical OR $F9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($C9.b,X)		; 01 C9 ; Logical OR ($C9.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp #$EE.b		; C9 EE ; Compare #$EE.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $50, $78		; 50 78 ; Branch if overflow clear to $50, $78 [Flow: branch]
	bit $C9.b		; 24 C9 ; Test bits $C9.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $A6A6.w,X		; 7D A6 A6 ; Add $A6A6.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $E0A6.w		; 0C A6 E0 ; Test and set bits $E0A6.w [Reads: Accumulator] [Flags: Z]
	asl $14ED.w		; 0E ED 14 ; Arithmetic shift left $14ED.w [Flags: ZNC]
	sbc ($00.b,X)		; E1 00 ; Subtract with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $01F905.l		; EF 05 F9 01 ; Subtract with carry (long) $01F905.l [Writes: Accumulator] [Flags: ZVNC]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	inc $7850.w		; EE 50 78 ; Increment $7850.w [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $A3A3.w,X		; 7D A3 A3 ; Add $A3A3.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $A3.b		; 06 A3 ; Arithmetic shift left $A3.b [Reads: Direct Page] [Flags: ZNC]
	sbc $01F8D8.l		; EF D8 F8 01 ; Subtract with carry (long) $01F8D8.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01F8E4.l		; EF E4 F8 01 ; Subtract with carry (long) $01F8E4.l [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx $00C8.w,Y		; BE C8 00 ; Load X register $00C8.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc ($14.b,X)		; E1 14 ; Subtract with carry ($14.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
.INDEX 8
	sep #$90		; E2 90
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $ABAB.w,X		; 7D AB AB ; Add $ABAB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.INDEX 8
	sep #$90		; E2 90
	trb $AB.b		; 14 AB ; Test and reset bits $AB.b [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.INDEX 8
	sep #$90		; E2 90
	brk $AB.b		; 00 AB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.INDEX 8
	sep #$90		; E2 90
	trb $AB.b		; 14 AB ; Test and reset bits $AB.b [Reads: Accumulator] [Flags: Z]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sbc ($14.b,X)		; E1 14 ; Subtract with carry ($14.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
.INDEX 8
	sep #$90		; E2 90
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $A8A8.w,X		; 7D A8 A8 ; Add $A8A8.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.INDEX 8
	sep #$90		; E2 90
	trb $A8.b		; 14 A8 ; Test and reset bits $A8.b [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.INDEX 8
	sep #$90		; E2 90
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.INDEX 8
	sep #$90		; E2 90
	trb $A8.b		; 14 A8 ; Test and reset bits $A8.b [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ora ($A6.b)		; 12 A6 ; OR accumulator with memory (indirect) ($A6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc ($00.b,X)		; E1 00 ; Subtract with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
.INDEX 8
	sep #$90		; E2 90
	trb $0C.b		; 14 0C ; Test and reset bits $0C.b [Reads: Accumulator] [Flags: Z]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $A6A6.w,X		; 7D A6 A6 ; Add $A6A6.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
.INDEX 8
	sep #$90		; E2 90
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $E2.b		; A6 E2 ; Load $E2.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	.db $90, $14		; 90 14 ; Branch if carry clear to $90, $14 [Flow: branch]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
.INDEX 8
	sep #$90		; E2 90
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	tsb $E1A4.w		; 0C A4 E1 ; Test and set bits $E1A4.w [Reads: Accumulator] [Flags: Z]
	brk $E2.b		; 00 E2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $14		; 90 14 ; Branch if carry clear to $90, $14 [Flow: branch]
	ora ($C9.b)		; 12 C9 ; OR accumulator with memory (indirect) ($C9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $A3A3.w,X		; 7D A3 A3 ; Add $A3A3.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $A1.b,S		; A3 A1 ; Load accumulator (stack relative) $A1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
.INDEX 8
	sep #$90		; E2 90
	brk $A3.b		; 00 A3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($E2.b,X)		; A1 E2 ; Load accumulator ($E2.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $90, $14		; 90 14 ; Branch if carry clear to $90, $14 [Flow: branch]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $A2.b,S		; A3 A2 ; Load accumulator (stack relative) $A2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx #$A2.b		; A2 A2 ; Load #$A2.b into X register [Writes: X Index] [Flags: ZN]
.INDEX 8
	sep #$90		; E2 90
	brk $A1.b		; 00 A1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $A1.b		; 06 A1 ; Arithmetic shift left $A1.b [Reads: Direct Page] [Flags: ZNC]
	sbc $01F8F3.l		; EF F3 F8 01 ; Subtract with carry (long) $01F8F3.l [Writes: Accumulator] [Flags: ZVNC]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $A2.b,S		; A3 A2 ; Load accumulator (stack relative) $A2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda ($A6.b,X)		; A1 A6 ; Load accumulator ($A6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	adc $309F.w		; 6D 9F 30 ; Add $309F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tsb $A1C9.w		; 0C C9 A1 ; Test and set bits $A1C9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $AA		; 30 AA ; Branch if minus to $30, $AA [Flow: branch]
	tsb $9FC9.w		; 0C C9 9F ; Test and set bits $9FC9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A8		; 30 A8 ; Branch if minus to $30, $A8 [Flow: branch]
	tsb $A1C9.w		; 0C C9 A1 ; Test and set bits $A1C9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $AA		; 30 AA ; Branch if minus to $30, $AA [Flow: branch]
	tsb $9FC9.w		; 0C C9 9F ; Test and set bits $9FC9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A6		; 30 A6 ; Branch if minus to $30, $A6 [Flow: branch]
	tsb $9FC9.w		; 0C C9 9F ; Test and set bits $9FC9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A5		; 30 A5 ; Branch if minus to $30, $A5 [Flow: branch]
	tsb $9FC9.w		; 0C C9 9F ; Test and set bits $9FC9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A4		; 30 A4 ; Branch if minus to $30, $A4 [Flow: branch]
	tsb $A1C9.w		; 0C C9 A1 ; Test and set bits $A1C9.w [Reads: Accumulator] [Flags: Z]
	.db $30, $AA		; 30 AA ; Branch if minus to $30, $AA [Flow: branch]
	sbc $01F8F8.l		; EF F8 F8 01 ; Subtract with carry (long) $01F8F8.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $01F8E4.l		; EF E4 F8 01 ; Subtract with carry (long) $01F8E4.l [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx $C840.w,Y		; BE 40 C8 ; Load X register $C840.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $18AF.w		; 6D AF 18 ; Add $18AF.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($30.b)		; B2 30 ; Load accumulator (indirect) ($30.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $0CAD.w,X		; 7D AD 0C ; Add $0CAD.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $3000.w		; AD 00 30 ; Load $3000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $48B218.l		; AF 18 B2 48 ; Load long $48B218.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AF30.w		; AD 30 AF ; Load $AF30.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda ($30.b)		; B2 30 ; Load accumulator (indirect) ($30.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $B718.w,Y		; B9 18 B7 ; Load $B718.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $A4A4.w		; 6D A4 A4 ; Add $A4A4.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $18AF.w		; 6D AF 18 ; Add $18AF.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($30.b)		; B2 30 ; Load accumulator (indirect) ($30.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $AB0C.w		; AD 0C AB ; Load $AB0C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $6000.w		; AD 00 60 ; Load $6000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F915.w,Y		; F9 15 F9 ; Subtract with carry $F915.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $F9.b,X		; 35 F9 ; Logical AND $F9.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $F90B00.l,X		; FF 00 0B F9 ; Subtract with carry (long,X) $F90B00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $F9.b		; 45 F9 ; Exclusive OR $F9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $F985.w,Y		; F9 85 F9 ; Subtract with carry $F985.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy #$F9.b		; A0 F9 ; Load #$F9.b into Y register [Writes: Y Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc $F9E6.w,Y		; F9 E6 F9 ; Subtract with carry $F9E6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $FA.b		; 14 FA ; Test and reset bits $FA.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FA61FA.l,X		; 3F FA 61 FA ; AND accumulator with memory (long,X) $FA61FA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $70, $FA		; 70 FA ; Branch if overflow set to $70, $FA [Flow: branch]
	sta ($FA.b,X)		; 81 FA ; Store accumulator ($FA.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta ($FA.b)		; 92 FA ; Store accumulator (indirect) ($FA.b) [Reads: Accumulator, Direct Page]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $FA.b,S		; A3 FA ; Load accumulator (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx $FA.b,Y		; B6 FA ; Load X register $FA.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cpx #$FA.b		; E0 FA ; Compare #$FA.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $FA.b,X		; F5 FA ; Subtract $FA.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	mvp $00,$FB		; 44 FB 00 ; Move block positive $00,$FB [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$F5.b		; A0 F5 ; Load #$F5.b into Y register [Writes: Y Index] [Flags: ZN]
	sbc $F72828.l,X		; FF 28 28 F7 ; Subtract with carry (long,X) $F72828.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $50.b		; 02 50 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $E7.b		; 02 E7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($E0.b,X)		; 21 E0 ; Logical AND ($E0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $E18CED.l		; 0F ED 8C E1 ; OR accumulator with memory (long) $E18CED.l [Writes: Accumulator] [Flags: ZN]
	cop $30.b		; 02 30 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $B8BA.w,X		; 7D BA B8 ; Add $B8BA.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda [$B8.b],Y		; B7 B8 ; Load accumulator (long indexed) [$B8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ldx $B5.b,Y		; B6 B5 ; Load X register $B5.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ldx $B6.b,Y		; B6 B6 ; Load X register $B6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	lda $B4.b,X		; B5 B4 ; Load $B4.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $B5.b,X		; B5 B5 ; Load $B5.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($B2.b,S),Y		; B3 B2 ; Load accumulator (stack relative indirect indexed) ($B2.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($00.b,S),Y		; B3 00 ; Load accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E18C.w		; ED 8C E1 ; Subtract $E18C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $B3B3.w,X		; 7D B3 B3 ; Add $B3B3.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $AFAFAF.l		; AF AF AF AF ; Load long $AFAFAF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	bit $AE.b		; 24 AE ; Test bits $AE.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E18C.w		; ED 8C E1 ; Subtract $E18C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl $18.b		; 06 18 ; Arithmetic shift left $18.b [Reads: Direct Page] [Flags: ZNC]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $AFAF.w,X		; 7D AF AF ; Add $AFAF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $AEAEAF.l		; AF AF AE AE ; Load long $AEAEAF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $ACAE.w		; AE AE AC ; Load $ACAE.w into X register [Writes: X Index] [Flags: ZN]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E18C.w		; ED 8C E1 ; Subtract $E18C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $C9.b		; 24 C9 ; Test bits $C9.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy $AAAA.w		; AC AA AA ; Load $AAAA.w into Y register [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda [$A7.b]		; A7 A7 ; Load accumulator (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$0C.b]		; A7 0C ; Load accumulator (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$E0.b]		; A7 E0 ; Load accumulator (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $E1C8ED.l		; 0F ED C8 E1 ; OR accumulator with memory (long) $E1C8ED.l [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $7D.b		; 24 7D ; Test bits $7D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx #$24.b		; A2 24 ; Load #$24.b into X register [Writes: X Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	bit $8A.b		; 24 8A ; Test bits $8A.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy #$24.b		; A0 24 ; Load #$24.b into Y register [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $8824.w,Y		; 99 24 88 ; Store accumulator to $8824.w,Y [Reads: Accumulator, Y Index]
	bit $249E.w,X		; 3C 9E 24 ; Test bits $249E.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta $9918.w,X		; 9D 18 99 ; Store accumulator to $9918.w,X [Reads: Accumulator, X Index]
	bit $86.b		; 24 86 ; Test bits $86.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $249D.w,X		; 3C 9D 24 ; Test bits $249D.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	stx $9B.b		; 86 9B ; Store X register to $9B.b [Reads: X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $E1C8ED.l		; 0F ED C8 E1 ; OR accumulator with memory (long) $E1C8ED.l [Writes: Accumulator] [Flags: ZN]
	asl $C90C.w		; 0E 0C C9 ; Arithmetic shift left $C90C.w [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $0C97.w,X		; 7D 97 0C ; Add $0C97.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $A2.b		; 24 A2 ; Test bits $A2.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stx $0C.b,Y		; 96 0C ; Store X register $0C.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $A0.b		; 24 A0 ; Test bits $A0.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	mvn $0C,$94		; 54 94 0C ; Move block negative $0C,$94 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $94.b		; 24 94 ; Test bits $94.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: ZN]
	sta [$C8.b],Y		; 97 C8 ; Store accumulator (long indexed) [$C8.b],Y [Reads: Accumulator, Direct Page, Y Index]
	mvn $0C,$92		; 54 92 0C ; Move block negative $0C,$92 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $92.b		; 24 92 ; Test bits $92.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $E0.b,S		; A3 E0 ; Load accumulator (stack relative) $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $E1C8ED.l		; 0F ED C8 E1 ; OR accumulator with memory (long) $E1C8ED.l [Writes: Accumulator] [Flags: ZN]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $189B.w,X		; 7D 9B 18 ; Add $189B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $A0.b		; 24 A0 ; Test bits $A0.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy #$C8.b		; A0 C8 ; Load #$C8.b into Y register [Writes: Y Index] [Flags: ZN]
	mvn $18,$99		; 54 99 18 ; Move block negative $18,$99 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $9E.b		; 24 9E ; Test bits $9E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	clc		; 18 ; Clear carry flag [Flags: C]
	stz $48C8.w,X		; 9E C8 48 ; Store zero to $48C8.w,X [Reads: X Index]
	sta [$18.b],Y		; 97 18 ; Store accumulator (long indexed) [$18.b],Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $9E.b		; 24 9E ; Test bits $9E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sta $C818.w,X		; 9D 18 C8 ; Store accumulator to $C818.w,X [Reads: Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stx $18.b,Y		; 96 18 ; Store X register $18.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $9D.b		; 24 9D ; Test bits $9D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	stz $19FA.w,X		; 9E FA 19 ; Store zero to $19FA.w,X [Reads: X Index]
	sbc $B4.b		; E5 B4 ; Subtract $B4.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $02		; 50 02 ; Branch if overflow clear to $50, $02 [Flow: branch]
	sbc [$33.b]		; E7 33 ; Subtract with carry (long) [$33.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lsr $0FE0.w		; 4E E0 0F ; Logical shift right $0FE0.w [Flags: ZNC]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $9D9B.w,X		; 7D 9B 9D ; Add $9D9B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy #$A3.b		; A0 A3 ; Load #$A3.b into Y register [Writes: Y Index] [Flags: ZN]
	lda [$A9.b]		; A7 A9 ; Load accumulator (long) [$A9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $E1B4ED.l		; 0F ED B4 E1 ; OR accumulator with memory (long) $E1B4ED.l [Writes: Accumulator] [Flags: ZN]
	ora ($30.b)		; 12 30 ; OR accumulator with memory (indirect) ($30.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $918D.w,X		; 7D 8D 91 ; Add $918D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $97.b,X		; 94 97 ; Store Y register $97.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sta $0FE0.w,X		; 9D E0 0F ; Store accumulator to $0FE0.w,X [Reads: Accumulator, X Index]
	sbc $E1B4.w		; ED B4 E1 ; Subtract $E1B4.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl $C904.w		; 0E 04 C9 ; Arithmetic shift left $C904.w [Flags: ZNC]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	sta ($94.b),Y		; 91 94 ; Store accumulator ($94.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta [$9B.b],Y		; 97 9B ; Store accumulator (long indexed) [$9B.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta $A03C.w,X		; 9D 3C A0 ; Store accumulator to $A03C.w,X [Reads: Accumulator, X Index]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E1B4.w		; ED B4 E1 ; Subtract $E1B4.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $9794.w,X		; 7D 94 97 ; Add $9794.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sta $38A0.w,X		; 9D A0 38 ; Store accumulator to $38A0.w,X [Reads: Accumulator, X Index]
	lda $E0.b,S		; A3 E0 ; Load accumulator (stack relative) $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $E1B4ED.l		; 0F ED B4 E1 ; OR accumulator with memory (long) $E1B4ED.l [Writes: Accumulator] [Flags: ZN]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: ZNC]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $9B97.w,X		; 7D 97 9B ; Add $9B97.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $A3A0.w,X		; 9D A0 A3 ; Store accumulator to $A3A0.w,X [Reads: Accumulator, X Index]
	bit $A7.b,X		; 34 A7 ; Test bits $A7.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda [$B8.b],Y		; B7 B8 ; Load accumulator (long indexed) [$B8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	lda $BDBA.w,Y		; B9 BA BD ; Load $BDBA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ldx $B5.b,Y		; B6 B5 ; Load X register $B5.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $B3B3.w,X		; 7D B3 B3 ; Add $B3B3.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $24AFAF.l		; AF AF AF 24 ; Load long $24AFAF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $30C918.l		; AF 18 C9 30 ; Load long $30C918.l into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $AFAF.w,X		; 7D AF AF ; Add $AFAF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $B1B1AF.l		; AF AF B1 B1 ; Load long $B1B1AF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $AFAFAF.l		; AF AF AF AF ; Load long $AFAFAF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $C924.w		; AC 24 C9 ; Load $C924.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $30, $7D		; 30 7D ; Branch if minus to $30, $7D [Flow: branch]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy $ABAB.w		; AC AB AB ; Load $ABAB.w into Y register [Writes: Y Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldy $ACAC.w		; AC AC AC ; Load $ACAC.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy $A9A9.w		; AC A9 A9 ; Load $A9A9.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $3C8B.w,X		; 7D 8B 3C ; Add $3C8B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx #$24.b		; A2 24 ; Load #$24.b into X register [Writes: X Index] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ldy #$18.b		; A0 18 ; Load #$18.b into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$24.b		; A0 24 ; Load #$24.b into Y register [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $24A5.w,X		; 3C A5 24 ; Test bits $24A5.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sta $A518A2.l		; 8F A2 18 A5 ; Store accumulator (long) $A518A2.l [Reads: Accumulator]
	bit $88.b		; 24 88 ; Test bits $88.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $24A3.w,X		; 3C A3 24 ; Test bits $24A3.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldx #$18.b		; A2 18 ; Load #$18.b into X register [Writes: X Index] [Flags: ZN]
	ldy #$24.b		; A0 24 ; Load #$24.b into Y register [Writes: Y Index] [Flags: ZN]
	sta $A33C.w		; 8D 3C A3 ; Store accumulator to $A33C.w [Reads: Accumulator]
	bit $8D.b		; 24 8D ; Test bits $8D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ldy #$18.b		; A0 18 ; Load #$18.b into Y register [Writes: Y Index] [Flags: ZN]
	ldy $C90C.w		; AC 0C C9 ; Load $C90C.w into Y register [Writes: Y Index] [Flags: ZN]
	mvn $97,$7D		; 54 7D 97 ; Move block negative $97,$7D [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $24C8.w		; 0C C8 24 ; Test and set bits $24C8.w [Reads: Accumulator] [Flags: Z]
	sta [$A7.b],Y		; 97 A7 ; Store accumulator (long indexed) [$A7.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tsb $C89B.w		; 0C 9B C8 ; Test and set bits $C89B.w [Reads: Accumulator] [Flags: Z]
	mvn $0C,$96		; 54 96 0C ; Move block negative $0C,$96 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $9B.b		; 24 9B ; Test bits $9B.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tsb $C8A2.w		; 0C A2 C8 ; Test and set bits $C8A2.w [Reads: Accumulator] [Flags: Z]
	mvn $0C,$94		; 54 94 0C ; Move block negative $0C,$94 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $94.b		; 24 94 ; Test bits $94.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	mvn $0C,$99		; 54 99 0C ; Move block negative $0C,$99 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $99.b		; 24 99 ; Test bits $99.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc $189B.w,X		; 7D 9B 18 ; Add $189B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $A2.b		; 24 A2 ; Test bits $A2.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ldx #$18.b		; A2 18 ; Load #$18.b into X register [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $C818.w,Y		; 99 18 C8 ; Store accumulator to $C818.w,Y [Reads: Accumulator, Y Index]
	bit $A5.b		; 24 A5 ; Test bits $A5.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	lda [$18.b]		; A7 18 ; Load accumulator (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $A3.b		; 24 A3 ; Test bits $A3.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	lda $18.b,S		; A3 18 ; Load accumulator (stack relative) $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy #$18.b		; A0 18 ; Load #$18.b into Y register [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	bit $A3.b		; 24 A3 ; Test bits $A3.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $FB6C00.l,X		; FF 00 6C FB ; Subtract with carry (long,X) $FB6C00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
.ACCU 16
.INDEX 16
	rep #$FB		; C2 FB
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $FC06FB.l		; EF FB 06 FC ; Subtract with carry (long) $FC06FB.l [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($FC.b,X)		; 21 FC ; Logical AND ($FC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $FC5CFC.l,X		; 3F FC 5C FC ; AND accumulator with memory (long,X) $FC5CFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $8EFC.w,Y		; 79 FC 8E ; Add $8EFC.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0000.w,X)		; FC 00 00 ; Jump to subroutine indirect indexed ($0000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $FC.b,S		; A3 FC ; Load accumulator (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$ED09.w		; E0 09 ED ; Compare #$ED09.w with X register [Reads: X Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $1A.b,S		; E3 1A ; Subtract stack-relative $1A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $E118.w		; 1C 18 E1 ; Test and reset bits $E118.w [Reads: Accumulator] [Flags: Z]
	tsb $7D58.w		; 0C 58 7D ; Test and set bits $7D58.w [Reads: Accumulator] [Flags: Z]
	ldx #$A108.w		; A2 08 A1 ; Load #$A108.w into X register [Writes: X Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lda $08.b,S		; A3 08 ; Load accumulator (stack relative) $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx #$A658.w		; A2 58 A6 ; Load #$A658.w into X register [Writes: X Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $60.b		; A5 60 ; Load $60.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$C8ED.w		; 09 ED C8 ; Logical OR #$C8ED.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $1A.b,S		; E3 1A ; Subtract stack-relative $1A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $E118.w		; 1C 18 E1 ; Test and reset bits $E118.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	adc $089D.w,X		; 7D 9D 08 ; Add $089D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $9E58.w		; 9C 58 9E ; Store zero to $9E58.w
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $A158.w,X		; 9D 58 A1 ; Store accumulator to $A158.w,X [Reads: Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy #$A360.w		; A0 60 A3 ; Load #$A360.w into Y register [Writes: Y Index] [Flags: ZN]
	cpx #$ED09.w		; E0 09 ED ; Compare #$ED09.w with X register [Reads: X Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $1A.b,S		; E3 1A ; Subtract stack-relative $1A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $E118.w		; 1C 18 E1 ; Test and reset bits $E118.w [Reads: Accumulator] [Flags: Z]
	tsb $30.b		; 04 30 ; Test and set bits $30.b [Reads: Accumulator] [Flags: Z]
	adc $938C.w,X		; 7D 8C 93 ; Add $938C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $8C93.w		; 8C 93 8C ; Store Y register to $8C93.w [Reads: Y Index]
	sta ($8C.b,S),Y		; 93 8C ; Store accumulator (stack relative indirect indexed) ($8C.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($E0.b,S),Y		; 93 E0 ; Store accumulator (stack relative indirect indexed) ($E0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ora #$A0ED.w		; 09 ED A0 ; Logical OR #$A0ED.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $1A.b,S		; E3 1A ; Subtract stack-relative $1A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $E118.w		; 1C 18 E1 ; Test and reset bits $E118.w [Reads: Accumulator] [Flags: Z]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$7D30.w		; C9 30 7D ; Compare #$7D30.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sty $8C93.w		; 8C 93 8C ; Store Y register to $8C93.w [Reads: Y Index]
	sta ($8C.b,S),Y		; 93 8C ; Store accumulator (stack relative indirect indexed) ($8C.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($8C.b,S),Y		; 93 8C ; Store accumulator (stack relative indirect indexed) ($8C.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sta ($E0.b,S),Y		; 93 E0 ; Store accumulator (stack relative indirect indexed) ($E0.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ora #$A0ED.w		; 09 ED A0 ; Logical OR #$A0ED.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $1A.b,S		; E3 1A ; Subtract stack-relative $1A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $E118.w		; 1C 18 E1 ; Test and reset bits $E118.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$7D58.w		; C9 58 7D ; Compare #$7D58.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldx #$A108.w		; A2 08 A1 ; Load #$A108.w into X register [Writes: X Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lda $08.b,S		; A3 08 ; Load accumulator (stack relative) $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx #$A658.w		; A2 58 A6 ; Load #$A658.w into X register [Writes: X Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $58.b		; A5 58 ; Load $58.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cpx #$ED09.w		; E0 09 ED ; Compare #$ED09.w with X register [Reads: X Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $1A.b,S		; E3 1A ; Subtract stack-relative $1A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $E118.w		; 1C 18 E1 ; Test and reset bits $E118.w [Reads: Accumulator] [Flags: Z]
	tsb $7D60.w		; 0C 60 7D ; Test and set bits $7D60.w [Reads: Accumulator] [Flags: Z]
	lda [$58.b]		; A7 58 ; Load accumulator (long) [$58.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $50.b		; A6 50 ; Load $50.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$A848.w		; A9 48 A8 ; Load #$A848.w into accumulator [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	bit $AD.b,X		; 34 AD ; Test bits $AD.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $30, $AC		; 30 AC ; Branch if minus to $30, $AC [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $09E000.l		; AF 00 E0 09 ; Load long $09E000.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	trb $E118.w		; 1C 18 E1 ; Test and reset bits $E118.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $58A2.w,X		; 7D A2 58 ; Add $58A2.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($50.b,X)		; A1 50 ; Load accumulator ($50.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $48.b		; A4 48 ; Load $48.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $40.b,S		; A3 40 ; Load accumulator (stack relative) $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx $38.b		; A6 38 ; Load $38.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $34.b		; A5 34 ; Load $34.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	.db $30, $A7		; 30 A7 ; Branch if minus to $30, $A7 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cpx #$ED09.w		; E0 09 ED ; Compare #$ED09.w with X register [Reads: X Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $1A.b,S		; E3 1A ; Subtract stack-relative $1A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $E118.w		; 1C 18 E1 ; Test and reset bits $E118.w [Reads: Accumulator] [Flags: Z]
	tsb $60.b		; 04 60 ; Test and set bits $60.b [Reads: Accumulator] [Flags: Z]
	adc $5892.w,X		; 7D 92 58 ; Add $5892.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($50.b),Y		; 91 50 ; Store accumulator ($50.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sty $48.b,X		; 94 48 ; Store Y register $48.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta ($40.b,S),Y		; 93 40 ; Store accumulator (stack relative indirect indexed) ($40.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	stx $38.b,Y		; 96 38 ; Store X register $38.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $34.b,X		; 95 34 ; Store accumulator to $34.b,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $97		; 30 97 ; Branch if minus to $30, $97 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$7D60.w		; C9 60 7D ; Compare #$7D60.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sta ($58.b)		; 92 58 ; Store accumulator (indirect) ($58.b) [Reads: Accumulator, Direct Page]
	sta ($50.b),Y		; 91 50 ; Store accumulator ($50.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sty $48.b,X		; 94 48 ; Store Y register $48.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta ($40.b,S),Y		; 93 40 ; Store accumulator (stack relative indirect indexed) ($40.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	stx $38.b,Y		; 96 38 ; Store X register $38.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $34.b,X		; 95 34 ; Store accumulator to $34.b,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $97		; 30 97 ; Branch if minus to $30, $97 [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$7D60.w		; C9 60 7D ; Compare #$7D60.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	.db $50, $A9		; 50 A9 ; Branch if overflow clear to $50, $A9 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	bit $AD.b,X		; 34 AD ; Test bits $AD.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	.db $30, $AC		; 30 AC ; Branch if minus to $30, $AC [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lda $E519FA.l		; AF FA 19 E5 ; Load long $E519FA.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $F5.b,X		; B4 F5 ; Load Y register $F5.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	sbc $F72828.l,X		; FF 28 28 F7 ; Subtract with carry (long,X) $F72828.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $14.b		; 02 14 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $E7.b		; 02 E7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $09E0.w,Y		; 19 E0 09 ; OR accumulator with memory $09E0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E3C8.w		; ED C8 E3 ; Subtract $E3C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	trb $E118.w		; 1C 18 E1 ; Test and reset bits $E118.w [Reads: Accumulator] [Flags: Z]
	tsb $C918.w		; 0C 18 C9 ; Test and set bits $C918.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0005.w		; 0C 05 00 ; Test and set bits $0005.w [Reads: Accumulator] [Flags: Z]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	tsb $2B.b		; 04 2B ; Test and set bits $2B.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $2B.b		; 14 2B ; Test and reset bits $2B.b [Reads: Accumulator] [Flags: Z]
	rol $5B2B.w,X		; 3E 2B 5B ; Rotate left $5B2B.w,X [Reads: X Index] [Flags: ZNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	sta $2B.b,X		; 95 2B ; Store accumulator to $2B.b,X [Reads: Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ora $C8E5.w,Y		; 19 E5 C8 ; OR accumulator with memory $C8E5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $02.b		; 14 02 ; Test and reset bits $02.b [Reads: Accumulator] [Flags: Z]
	sbc [$19.b]		; E7 19 ; Subtract with carry (long) [$19.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$ED0B.w		; E0 0B ED ; Compare #$ED0B.w with X register [Reads: X Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc ($12.b,X)		; E1 12 ; Subtract with carry ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	ldx #$A4A3.w		; A2 A3 A4 ; Load #$A4A3.w into X register [Writes: X Index] [Flags: ZN]
	lda $A4.b,S		; A3 A4 ; Load accumulator (stack relative) $A4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$A9A8.w		; A9 A8 A9 ; Load #$A9A8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $B0AF.w		; AE AF B0 ; Load $B0AF.w into X register [Writes: X Index] [Flags: ZN]
	lda $BAB5B4.l		; AF B4 B5 BA ; Load long $BAB5B4.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	cmp #$E000.w		; C9 00 E0 ; Compare #$E000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	cmp #$6D06.w		; C9 06 6D ; Compare #$6D06.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldx #$A4A3.w		; A2 A3 A4 ; Load #$A4A3.w into X register [Writes: X Index] [Flags: ZN]
	lda $A4.b,S		; A3 A4 ; Load accumulator (stack relative) $A4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$A9A8.w		; A9 A8 A9 ; Load #$A9A8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $B0AF.w		; AE AF B0 ; Load $B0AF.w into X register [Writes: X Index] [Flags: ZN]
	lda $BAB5B4.l		; AF B4 B5 BA ; Load long $BAB5B4.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$0BE0.w		; C9 E0 0B ; Compare #$0BE0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $E1C8.w		; ED C8 E1 ; Subtract $E1C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tsb $C924.w		; 0C 24 C9 ; Test and set bits $C924.w [Reads: Accumulator] [Flags: Z]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	ldx #$A4A3.w		; A2 A3 A4 ; Load #$A4A3.w into X register [Writes: X Index] [Flags: ZN]
	lda $A4.b,S		; A3 A4 ; Load accumulator (stack relative) $A4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$A9A8.w		; A9 A8 A9 ; Load #$A9A8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $B0AF.w		; AE AF B0 ; Load $B0AF.w into X register [Writes: X Index] [Flags: ZN]
	lda $BAB5B4.l		; AF B4 B5 BA ; Load long $BAB5B4.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	rol $C9.b,X		; 36 C9 ; Rotate left $C9.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx #$ED0B.w		; E0 0B ED ; Compare #$ED0B.w with X register [Reads: X Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc ($08.b,X)		; E1 08 ; Subtract with carry ($08.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $C9.b,X		; 36 C9 ; Rotate left $C9.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $6D.b		; 06 6D ; Arithmetic shift left $6D.b [Reads: Direct Page] [Flags: ZNC]
	ldx #$A4A3.w		; A2 A3 A4 ; Load #$A4A3.w into X register [Writes: X Index] [Flags: ZN]
	lda $A4.b,S		; A3 A4 ; Load accumulator (stack relative) $A4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$A9A8.w		; A9 A8 A9 ; Load #$A9A8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $B0AF.w		; AE AF B0 ; Load $B0AF.w into X register [Writes: X Index] [Flags: ZN]
	lda $BAB5B4.l		; AF B4 B5 BA ; Load long $BAB5B4.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	bit $C9.b		; 24 C9 ; Test bits $C9.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cpx #$ED0B.w		; E0 0B ED ; Compare #$ED0B.w with X register [Reads: X Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc ($04.b,X)		; E1 04 ; Subtract with carry ($04.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$6D06.w		; C9 06 6D ; Compare #$6D06.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldx #$A4A3.w		; A2 A3 A4 ; Load #$A4A3.w into X register [Writes: X Index] [Flags: ZN]
	lda $A4.b,S		; A3 A4 ; Load accumulator (stack relative) $A4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$A9A8.w		; A9 A8 A9 ; Load #$A9A8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $B0AF.w		; AE AF B0 ; Load $B0AF.w into X register [Writes: X Index] [Flags: ZN]
	lda $BAB5B4.l		; AF B4 B5 BA ; Load long $BAB5B4.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ora ($C9.b)		; 12 C9 ; OR accumulator with memory (indirect) ($C9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $D3.b		; 00 D3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	cmp $2B.b,S		; C3 2B ; Compare accumulator (stack relative) $2B.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc $2B.b,S		; E3 2B ; Subtract stack-relative $2B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora $2C.b,S		; 03 2C ; OR accumulator with stack relative $2C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc ($2B.b,S),Y		; F3 2B ; Subtract with carry (stack relative indirect indexed) ($2B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $2BB500.l,X		; FF 00 B5 2B ; Subtract with carry (long,X) $2BB500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($2C.b,S),Y		; 13 2C ; OR accumulator (stack relative indirect indexed) ($2C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $2C4D.w		; 2C 4D 2C ; Test bits $2C4D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $2C87.w		; 2C 87 2C ; Test bits $2C87.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ldy $2C.b		; A4 2C ; Load $2C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $2C		; B0 2C ; Branch if carry set to $B0, $2C [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pea $FE2C.w		; F4 2C FE ; Push absolute address $FE2C.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	bit $2D1C.w		; 2C 1C 2D ; Test bits $2D1C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $0000.w		; 2D 00 00 ; Logical AND $0000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $2D642D.l		; 4F 2D 64 2D ; Exclusive OR accumulator with memory (long) $2D642D.l [Writes: Accumulator] [Flags: ZN]
	sta [$2D.b]		; 87 2D ; Store accumulator (long) [$2D.b] [Reads: Accumulator, Direct Page]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	and $2DA1.w		; 2D A1 2D ; Logical AND $2DA1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda [$2D.b],Y		; B7 2D ; Load accumulator (long indexed) [$2D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $002D.w		; CD 2D 00 ; Compare $002D.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $D9.b		; 00 D9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $2DDE.w		; 2D DE 2D ; Logical AND $2DDE.w with accumulator [Writes: Accumulator] [Flags: ZN]
.ACCU 8
	sep #$2D		; E2 2D
	nop		; EA ; No operation
	and $2E1C.w		; 2D 1C 2E ; Logical AND $2E1C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $002E.w		; 4E 2E 00 ; Logical shift right $002E.w [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $2E9F.w		; 2E 9F 2E ; Rotate left $2E9F.w [Flags: ZNC]
	ldy $B02E.w		; AC 2E B0 ; Load $B02E.w into Y register [Writes: Y Index] [Flags: ZN]
	rol $2EB9.w		; 2E B9 2E ; Rotate left $2EB9.w [Flags: ZNC]
.ACCU 16
	rep #$2E		; C2 2E
	wai		; CB ; Wait for interrupt
	rol $0000.w		; 2E 00 00 ; Rotate left $0000.w [Flags: ZNC]
	tsb $8C6D.w		; 0C 6D 8C ; Test and set bits $8C6D.w [Reads: Accumulator] [Flags: Z]
	sta ($98.b,S),Y		; 93 98 ; Store accumulator (stack relative indirect indexed) ($98.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta $919B96.l		; 8F 96 9B 91 ; Store accumulator (long) $919B96.l [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $9B94.w,X		; 9D 94 9B ; Store accumulator to $9B94.w,X [Reads: Accumulator, X Index]
	ldy #$9F93.w		; A0 93 9F ; Load #$9F93.w into Y register [Writes: Y Index] [Flags: ZN]
	sbc $062EDB.l		; EF DB 2E 06 ; Subtract with carry (long) $062EDB.l [Writes: Accumulator] [Flags: ZVNC]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	nop		; EA ; No operation
	rol $0C06.w		; 2E 06 0C ; Rotate left $0C06.w [Flags: ZNC]
	adc $0CA9.w		; 6D A9 0C ; Add $0CA9.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$A9A9.w		; 69 A9 A9 ; Add #$A9A9.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tsb $A96D.w		; 0C 6D A9 ; Test and set bits $A96D.w [Reads: Accumulator] [Flags: Z]
	tsb $A969.w		; 0C 69 A9 ; Test and set bits $A969.w [Reads: Accumulator] [Flags: Z]
	lda #$6D0C.w		; A9 0C 6D ; Load #$6D0C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$690C.w		; A9 0C 69 ; Load #$690C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$06A9.w		; A9 A9 06 ; Load #$06A9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $A9A9.w		; 6D A9 A9 ; Add $A9A9.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tsb $A9A9.w		; 0C A9 A9 ; Test and set bits $A9A9.w [Reads: Accumulator] [Flags: Z]
	asl $A9.b		; 06 A9 ; Arithmetic shift left $A9.b [Reads: Direct Page] [Flags: ZNC]
	lda #$A90C.w		; A9 0C A9 ; Load #$A90C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpx #$ED11.w		; E0 11 ED ; Compare #$ED11.w with X register [Reads: X Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $48A4.w		; 6D A4 48 ; Add $48A4.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda [$48.b]		; A7 48 ; Load accumulator (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldx $60.b		; A6 60 ; Load $60.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldy $60.b		; A4 60 ; Load $60.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$C960.w		; C9 60 C9 ; Compare #$C960.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$11E0.w		; C9 E0 11 ; Compare #$11E0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $60C8.w		; ED C8 60 ; Subtract $60C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	adc $489F.w		; 6D 9F 48 ; Add $489F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$C848.w		; A2 48 C8 ; Load #$C848.w into X register [Writes: X Index] [Flags: ZN]
	lda ($60.b,X)		; A1 60 ; Load accumulator ($60.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldy #$C848.w		; A0 48 C8 ; Load #$C848.w into Y register [Writes: Y Index] [Flags: ZN]
	sta $C8C860.l,X		; 9F 60 C8 C8 ; Store accumulator (long,X) $C8C860.l,X [Reads: Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$C960.w		; C9 60 C9 ; Compare #$C960.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$11E0.w		; C9 E0 11 ; Compare #$11E0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $60C8.w		; ED C8 60 ; Subtract $60C8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	adc $489A.w		; 6D 9A 48 ; Add $489A.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $C848.w,X		; 9D 48 C8 ; Store accumulator to $C848.w,X [Reads: Accumulator, X Index]
	stz $C860.w		; 9C 60 C8 ; Store zero to $C860.w
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$C960.w		; C9 60 C9 ; Compare #$C960.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$7D24.w		; C9 24 7D ; Compare #$7D24.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sty $918F.w		; 8C 8F 91 ; Store Y register to $918F.w [Reads: Y Index]
	sty $18.b,X		; 94 18 ; Store Y register $18.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta ($EF.b,S),Y		; 93 EF ; Store accumulator (stack relative indirect indexed) ($EF.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ora $062F.w		; 0D 2F 06 ; Logical OR $062F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ora $C8E5.w,Y		; 19 E5 C8 ; OR accumulator with memory $C8E5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl $F71E.w,X		; 1E 1E F7 ; Arithmetic shift left $F71E.w,X [Reads: X Index] [Flags: ZNC]
	cop $14.b		; 02 14 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $E7.b		; 02 E7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($E0.b),Y		; 31 E0 ; AND accumulator with memory ($E0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $06DC.w		; ED DC 06 ; Subtract $06DC.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	adc $B2B3.w		; 6D B3 B2 ; Add $B2B3.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($B0.b),Y		; B1 B0 ; Load accumulator ($B0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $B0B1B2.l		; AF B2 B1 B0 ; Load long $B0B1B2.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $ACADAE.l		; AF AE AD AC ; Load long $ACADAE.l into accumulator [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$E0A8.w		; A9 A8 E0 ; Load #$E0A8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	tsb $938C.w		; 0C 8C 93 ; Test and set bits $938C.w [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $919B96.l		; 8F 96 9B 91 ; Store accumulator (long) $919B96.l [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $9B94.w,X		; 9D 94 9B ; Store accumulator to $9B94.w,X [Reads: Accumulator, X Index]
	ldy #$9F93.w		; A0 93 9F ; Load #$9F93.w into Y register [Writes: Y Index] [Flags: ZN]
	sty $9893.w		; 8C 93 98 ; Store Y register to $9893.w [Reads: Y Index]
	sta $919B96.l		; 8F 96 9B 91 ; Store accumulator (long) $919B96.l [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $9B94.w,X		; 9D 94 9B ; Store accumulator to $9B94.w,X [Reads: Accumulator, X Index]
	ldy #$9F93.w		; A0 93 9F ; Load #$9F93.w into Y register [Writes: Y Index] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($ED.b,S),Y		; 13 ED ; OR accumulator (stack relative indirect indexed) ($ED.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$C960.w		; A0 60 C9 ; Load #$C960.w into Y register [Writes: Y Index] [Flags: ZN]
	sbc $022EEA.l		; EF EA 2E 02 ; Subtract with carry (long) $022EEA.l [Writes: Accumulator] [Flags: ZVNC]
	cpx #$ED0B.w		; E0 0B ED ; Compare #$ED0B.w with X register [Reads: X Index] [Flags: ZNC]
	jmp.w [$6D06]		; DC 06 6D ; Jump long indirect [$6D06] [Flow: jump]
	lda $ACADAE.l		; AF AE AD AC ; Load long $ACADAE.l into accumulator [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldx $ACAD.w		; AE AD AC ; Load $ACAD.w into X register [Writes: X Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$A7A8.w		; A9 A8 A7 ; Load #$A7A8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $A5.b		; A6 A5 ; Load $A5.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldy $60.b		; A4 60 ; Load $60.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cmp #$C948.w		; C9 48 C9 ; Compare #$C948.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$C948.w		; C9 48 C9 ; Compare #$C948.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cpx #$ED0B.w		; E0 0B ED ; Compare #$ED0B.w with X register [Reads: X Index] [Flags: ZNC]
	jmp.w [$6D06]		; DC 06 6D ; Jump long indirect [$6D06] [Flow: jump]
	lda #$A7A8.w		; A9 A8 A7 ; Load #$A7A8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $A5.b		; A6 A5 ; Load $A5.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda [$A6.b]		; A7 A6 ; Load accumulator (long) [$A6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $A4.b		; A5 A4 ; Load $A4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $A2.b,S		; A3 A2 ; Load accumulator (stack relative) $A2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda ($A0.b,X)		; A1 A0 ; Load accumulator ($A0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $C9609E.l,X		; 9F 9E 60 C9 ; Store accumulator (long,X) $C9609E.l,X [Reads: Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$C960.w		; C9 60 C9 ; Compare #$C960.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$02E0.w		; C9 E0 02 ; Compare #$02E0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $60B4.w		; ED B4 60 ; Subtract $60B4.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cmp #$7D24.w		; C9 24 7D ; Compare #$7D24.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sty $918F.w		; 8C 8F 91 ; Store Y register to $918F.w [Reads: Y Index]
	sty $18.b,X		; 94 18 ; Store Y register $18.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta ($24.b,S),Y		; 93 24 ; Store accumulator (stack relative indirect indexed) ($24.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sty $918F.w		; 8C 8F 91 ; Store Y register to $918F.w [Reads: Y Index]
	sty $18.b,X		; 94 18 ; Store Y register $18.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta ($0C.b,S),Y		; [PATTERN: Memory clearing operation] 93 0C ; Store accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	adc $9992.w		; 6D 92 99 ; Add $9992.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	stz $9C95.w,X		; 9E 95 9C ; Store zero to $9C95.w,X [Reads: X Index]
	lda ($97.b,X)		; A1 97 ; Load accumulator ($97.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $9AA3.w,X		; 9E A3 9A ; Store zero to $9AA3.w,X [Reads: X Index]
	lda ($A6.b,X)		; A1 A6 ; Load accumulator ($A6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $EFA5.w,Y		; 99 A5 EF ; Store accumulator to $EFA5.w,Y [Reads: Accumulator, Y Index]
	ora $2F.b,X		; 15 2F ; OR accumulator with memory $2F.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cpx #$ED0B.w		; E0 0B ED ; Compare #$ED0B.w with X register [Reads: X Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $B16D.w		; 0C 6D B1 ; Test and set bits $B16D.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $3C.b,Y		; B6 3C ; Load X register $3C.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $48B7.w		; 0C B7 48 ; Test and set bits $48B7.w [Reads: Accumulator] [Flags: Z]
	.db $B0, $54		; B0 54 ; Branch if carry set to $B0, $54 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $60B5.w		; 0C B5 60 ; Test and set bits $60B5.w [Reads: Accumulator] [Flags: Z]
	ldy $C83C.w		; AC 3C C8 ; Load $C83C.w into Y register [Writes: Y Index] [Flags: ZN]
	tsb $60AB.w		; 0C AB 60 ; Test and set bits $60AB.w [Reads: Accumulator] [Flags: Z]
	lda ($3C.b)		; B2 3C ; Load accumulator (indirect) ($3C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $60B3.w		; 0C B3 60 ; Test and set bits $60B3.w [Reads: Accumulator] [Flags: Z]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	bit $EFC8.w,X		; 3C C8 EF ; Test bits $EFC8.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	nop		; EA ; No operation
	rol $E005.w		; 2E 05 E0 ; Rotate left $E005.w [Flags: ZNC]
	ora ($ED.b),Y		; 11 ED ; OR accumulator with memory ($ED.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $48AA.w		; 6D AA 48 ; Add $48AA.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $C848.w		; AD 48 C8 ; Load $C848.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $C860.w		; AC 60 C8 ; Load $C860.w into Y register [Writes: Y Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$ED11.w		; E0 11 ED ; Compare #$ED11.w with X register [Reads: X Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $48A5.w		; 6D A5 48 ; Add $48A5.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$60.b]		; A7 60 ; Load accumulator (long) [$60.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldx $48.b		; A6 48 ; Load $48.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $60.b		; A5 60 ; Load $60.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$ED11.w		; E0 11 ED ; Compare #$ED11.w with X register [Reads: X Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $48A0.w		; 6D A0 48 ; Add $48A0.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $48.b,S		; A3 48 ; Load accumulator (stack relative) $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldx #$C860.w		; A2 60 C8 ; Load #$C860.w into X register [Writes: X Index] [Flags: ZN]
	lda ($48.b,X)		; A1 48 ; Load accumulator ($48.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldy #$C860.w		; A0 60 C8 ; Load #$C860.w into Y register [Writes: Y Index] [Flags: ZN]
	bit $7D.b		; 24 7D ; Test bits $7D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sta ($95.b)		; 92 95 ; Store accumulator (indirect) ($95.b) [Reads: Accumulator, Direct Page]
	sta [$9A.b],Y		; 97 9A ; Store accumulator (long indexed) [$9A.b],Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $24EF.w,Y		; 99 EF 24 ; Store accumulator to $24EF.w,Y [Reads: Accumulator, Y Index]
	and $2CEF04.l		; 2F 04 EF 2C ; AND accumulator with memory (long) $2CEF04.l [Writes: Accumulator] [Flags: ZN]
	and $EF0001.l		; 2F 01 00 EF ; AND accumulator with memory (long) $EF0001.l [Writes: Accumulator] [Flags: ZN]
	bit $012F.w		; 2C 2F 01 ; Test bits $012F.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	cpx #$ED13.w		; E0 13 ED ; Compare #$ED13.w with X register [Reads: X Index] [Flags: ZNC]
	ldy #$EAEF.w		; A0 EF EA ; Load #$EAEF.w into Y register [Writes: Y Index] [Flags: ZN]
	rol $0C03.w		; 2E 03 0C ; Rotate left $0C03.w [Flags: ZNC]
	eor $18AF.w		; 4D AF 18 ; Exclusive OR $18AF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AFAF0C.l		; AF 0C AF AF ; Load long $AFAF0C.l into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $AFAF0C.l		; AF 0C AF AF ; Load long $AFAF0C.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $18AFAF.l		; AF AF AF 18 ; Load long $18AFAF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $18AE0C.l		; AF 0C AE 18 ; Load long $18AE0C.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $AE0C.w		; AE 0C AE ; Load $AE0C.w into X register [Writes: X Index] [Flags: ZN]
	ldx $AE18.w		; AE 18 AE ; Load $AE18.w into X register [Writes: X Index] [Flags: ZN]
	ldx $AE0C.w		; AE 0C AE ; Load $AE0C.w into X register [Writes: X Index] [Flags: ZN]
	ldx $18AE.w		; AE AE 18 ; Load $18AE.w into X register [Writes: X Index] [Flags: ZN]
	ldx $AD0C.w		; AE 0C AD ; Load $AD0C.w into X register [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $AD0C.w		; AD 0C AD ; Load $AD0C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AD18.w		; AD 18 AD ; Load $AD18.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AC0C.w		; AD 0C AC ; Load $AC0C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $18AC.w		; AC AC 18 ; Load $18AC.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy $4D0C.w		; AC 0C 4D ; Load $4D0C.w into Y register [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tsb $AAAA.w		; 0C AA AA ; Test and set bits $AAAA.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tsb $AAAA.w		; 0C AA AA ; Test and set bits $AAAA.w [Reads: Accumulator] [Flags: Z]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tsb $18A9.w		; 0C A9 18 ; Test and set bits $18A9.w [Reads: Accumulator] [Flags: Z]
	lda #$A90C.w		; A9 0C A9 ; Load #$A90C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$A918.w		; A9 18 A9 ; Load #$A918.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$A90C.w		; A9 0C A9 ; Load #$A90C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$18A9.w		; A9 A9 18 ; Load #$18A9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$A80C.w		; A9 0C A8 ; Load #$A80C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tsb $A8A8.w		; 0C A8 A8 ; Test and set bits $A8A8.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tsb $A7A7.w		; 0C A7 A7 ; Test and set bits $A7A7.w [Reads: Accumulator] [Flags: Z]
	lda [$18.b]		; A7 18 ; Load accumulator (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$0C.b]		; A7 0C ; Load accumulator (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $18A4.w		; 4D A4 18 ; Exclusive OR $18A4.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $A4.b		; A4 A4 ; Load $A4.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $18.b,S		; A3 18 ; Load accumulator (stack relative) $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $0C.b,S		; A3 0C ; Load accumulator (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $A3A3.w		; 0C A3 A3 ; Test and set bits $A3A3.w [Reads: Accumulator] [Flags: Z]
	lda $18.b,S		; A3 18 ; Load accumulator (stack relative) $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $0C.b,S		; A3 0C ; Load accumulator (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx #$A218.w		; A2 18 A2 ; Load #$A218.w into X register [Writes: X Index] [Flags: ZN]
	tsb $A2A2.w		; 0C A2 A2 ; Test and set bits $A2A2.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx #$0CA2.w		; A2 A2 0C ; Load #$0CA2.w into X register [Writes: X Index] [Flags: ZN]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($18.b,X)		; A1 18 ; Load accumulator ($18.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($0C.b,X)		; A1 0C ; Load accumulator ($0C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $9891.w		; 6D 91 98 ; Add $9891.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $9B94.w,X		; 9D 94 9B ; Store accumulator to $9B94.w,X [Reads: Accumulator, X Index]
	ldy #$9D96.w		; A0 96 9D ; Load #$9D96.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx #$A099.w		; A2 99 A0 ; Load #$A099.w into X register [Writes: X Index] [Flags: ZN]
	lda $98.b		; A5 98 ; Load $98.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $90.b		; A4 90 ; Load $90.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sta [$9C.b],Y		; 97 9C ; Store accumulator (long indexed) [$9C.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($9A.b,S),Y		; 93 9A ; Store accumulator (stack relative indirect indexed) ($9A.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta $A19C95.l,X		; 9F 95 9C A1 ; Store accumulator (long,X) $A19C95.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $A397A4.l,X		; 9F A4 97 A3 ; Store accumulator (long,X) $A397A4.l,X [Reads: Accumulator, X Index]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $60AA.w		; 6D AA 60 ; Add $60AA.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda #$C83C.w		; A9 3C C8 ; Load #$C83C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $48A9.w		; 0C A9 48 ; Test and set bits $48A9.w [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	mvn $EF,$C8		; 54 C8 EF ; Move block negative $EF,$C8 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	nop		; EA ; No operation
	rol $6002.w		; 2E 02 60 ; Rotate left $6002.w [Flags: ZNC]
	adc $48A9.w		; 6D A9 48 ; Add $48A9.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $48A4.w		; 6D A4 48 ; Add $48A4.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $48.b,S		; A3 48 ; Load accumulator (stack relative) $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $489F.w		; 6D 9F 48 ; Add $489F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $C848.w,X		; 9E 48 C8 ; Store zero to $C848.w,X [Reads: X Index]
	bit $7D.b		; 24 7D ; Test bits $7D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sta ($94.b),Y		; 91 94 ; Store accumulator ($94.b),Y [Reads: Accumulator, Direct Page, Y Index]
	stx $99.b,Y		; 96 99 ; Store X register $99.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $90.b		; 24 90 ; Test bits $90.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sta ($95.b,S),Y		; 93 95 ; Store accumulator (stack relative indirect indexed) ($95.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sty $9893.w		; 8C 93 98 ; Store Y register to $9893.w [Reads: Y Index]
	sta $919B96.l		; 8F 96 9B 91 ; Store accumulator (long) $919B96.l [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $9B94.w,X		; 9D 94 9B ; Store accumulator to $9B94.w,X [Reads: Accumulator, X Index]
	ldy #$9F93.w		; A0 93 9F ; Load #$9F93.w into Y register [Writes: Y Index] [Flags: ZN]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $0CA9.w		; 6D A9 0C ; Add $0CA9.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$A9A9.w		; 69 A9 A9 ; Add #$A9A9.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tsb $A96D.w		; 0C 6D A9 ; Test and set bits $A96D.w [Reads: Accumulator] [Flags: Z]
	tsb $A969.w		; 0C 69 A9 ; Test and set bits $A969.w [Reads: Accumulator] [Flags: Z]
	lda #$6D0C.w		; A9 0C 6D ; Load #$6D0C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$690C.w		; A9 0C 69 ; Load #$690C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$0CA9.w		; A9 A9 0C ; Load #$0CA9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $0CA9.w		; 6D A9 0C ; Add $0CA9.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc #$A9A9.w		; 69 A9 A9 ; Add #$A9A9.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tsb $A96D.w		; 0C 6D A9 ; Test and set bits $A96D.w [Reads: Accumulator] [Flags: Z]
	tsb $A969.w		; 0C 69 A9 ; Test and set bits $A969.w [Reads: Accumulator] [Flags: Z]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $918F.w		; 8C 8F 91 ; Store Y register to $918F.w [Reads: Y Index]
	sty $18.b,X		; 94 18 ; Store Y register $18.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sta ($00.b,S),Y		; [PATTERN: Memory clearing operation] 93 00 ; Store accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($99.b)		; 92 99 ; Store accumulator (indirect) ($99.b) [Reads: Accumulator, Direct Page]
	stz $9C95.w,X		; 9E 95 9C ; Store zero to $9C95.w,X [Reads: X Index]
	lda ($97.b,X)		; A1 97 ; Load accumulator ($97.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $9AA3.w,X		; 9E A3 9A ; Store zero to $9AA3.w,X [Reads: X Index]
	lda ($A6.b,X)		; A1 A6 ; Load accumulator ($A6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $00A5.w,Y		; 99 A5 00 ; Store accumulator to $00A5.w,Y [Reads: Accumulator, Y Index]
	bit $92.b		; 24 92 ; Test bits $92.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sta $97.b,X		; 95 97 ; Store accumulator to $97.b,X [Reads: Accumulator, X Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $0C00.w,Y		; 99 00 0C ; Store accumulator to $0C00.w,Y [Reads: Accumulator, Y Index]
	adc $968F.w		; 6D 8F 96 ; Add $968F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	stz $AAA5.w,X		; 9E A5 AA ; Store zero to $AAA5.w,X [Reads: X Index]
	ldy $A0A7.w		; AC A7 A0 ; Load $A0A7.w into Y register [Writes: Y Index] [Flags: ZN]
	sta [$9E.b],Y		; 97 9E ; Store accumulator (long indexed) [$9E.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $96.b,S		; A3 96 ; Load accumulator (stack relative) $96.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx #$958E.w		; A2 8E 95 ; Load #$958E.w into X register [Writes: X Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sta $A9A4.w,X		; 9D A4 A9 ; Store accumulator to $A9A4.w,X [Reads: Accumulator, X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldx $9F.b		; A6 9F ; Load $9F.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stx $9D.b,Y		; 96 9D ; Store X register $9D.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ldx #$A195.w		; A2 95 A1 ; Load #$A195.w into X register [Writes: X Index] [Flags: ZN]
	sta $9994.w		; 8D 94 99 ; Store accumulator to $9994.w [Reads: Accumulator]
	stz $A8A3.w		; 9C A3 A8 ; Store zero to $A8A3.w
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $A9.b		; A5 A9 ; Load $A9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $A0A7.w		; AC A7 A0 ; Load $A0A7.w into Y register [Writes: Y Index] [Flags: ZN]
	sta $6700AB.l,X		; 9F AB 00 67 ; Store accumulator (long,X) $6700AB.l,X [Reads: Accumulator, X Index]
	and $78FB78.l		; 2F 78 FB 78 ; AND accumulator with memory (long) $78FB78.l [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $2F5B00.l,X		; FF 00 5B 2F ; Subtract with carry (long,X) $2F5B00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$2F.b],Y		; 77 2F ; Add with carry (long indexed) [$2F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($2F.b,X)		; A1 2F ; Load accumulator ($2F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $2F.b,Y		; B6 2F ; Load X register $2F.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	and $F52FE0.l		; 2F E0 2F F5 ; AND accumulator with memory (long) $F52FE0.l [Writes: Accumulator] [Flags: ZN]
	and $000000.l		; 2F 00 00 00 ; AND accumulator with memory (long) $000000.l [Writes: Accumulator] [Flags: ZN]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $C8E5.w,Y		; 19 E5 C8 ; OR accumulator with memory $C8E5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $02.b		; 14 02 ; Test and reset bits $02.b [Reads: Accumulator] [Flags: Z]
	sbc [$19.b]		; E7 19 ; Subtract with carry (long) [$19.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$ED09.w		; E0 09 ED ; Compare #$ED09.w with X register [Reads: X Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $1A.b,S		; E3 1A ; Subtract stack-relative $1A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $E118.w		; 1C 18 E1 ; Test and reset bits $E118.w [Reads: Accumulator] [Flags: Z]
	tsb $6D08.w		; 0C 08 6D ; Test and set bits $6D08.w [Reads: Accumulator] [Flags: Z]
	lda $10.b,X		; B5 10 ; Load $10.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $08.b,X		; B4 08 ; Load Y register $08.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $08AE10.l		; AF 10 AE 08 ; Load long $08AE10.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$A3A8.w		; A9 A8 A3 ; Load #$A3A8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $A2		; 10 A2 ; Branch if plus to $10, $A2 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$C8ED.w		; 09 ED C8 ; Logical OR #$C8ED.w with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $10A9.w		; 6D A9 10 ; Add $10A9.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $10.b,S		; A3 10 ; Load accumulator (stack relative) $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldx #$9D08.w		; A2 08 9D ; Load #$9D08.w into X register [Writes: X Index] [Flags: ZN]
	stz $1097.w		; 9C 97 10 ; Store zero to $1097.w
	stx $60.b,Y		; 96 60 ; Store X register $60.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$ED09.w		; E0 09 ED ; Compare #$ED09.w with X register [Reads: X Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $10AF.w		; 6D AF 10 ; Add $10AF.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldx $A908.w		; AE 08 A9 ; Load $A908.w into X register [Writes: X Index] [Flags: ZN]
	.db $10, $A8		; 10 A8 ; Branch if plus to $10, $A8 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $A2.b,S		; A3 A2 ; Load accumulator (stack relative) $A2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $9C10.w,X		; 9D 10 9C ; Store accumulator to $9C10.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$ED09.w		; E0 09 ED ; Compare #$ED09.w with X register [Reads: X Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $10AE.w		; 6D AE 10 ; Add $10AE.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda $A808.w		; AD 08 A8 ; Load $A808.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $A7		; 10 A7 ; Branch if plus to $10, $A7 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx #$9CA1.w		; A2 A1 9C ; Load #$9CA1.w into X register [Writes: X Index] [Flags: ZN]
	.db $10, $9B		; 10 9B ; Branch if plus to $10, $9B [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$ED09.w		; E0 09 ED ; Compare #$ED09.w with X register [Reads: X Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $109D.w		; 6D 9D 10 ; Add $109D.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	stz $9708.w		; 9C 08 97 ; Store zero to $9708.w
	.db $10, $96		; 10 96 ; Branch if plus to $10, $96 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	.db $10, $8A		; 10 8A ; Branch if plus to $10, $8A [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpx #$ED02.w		; E0 02 ED ; Compare #$ED02.w with X register [Reads: X Index] [Flags: ZNC]
	jmp.w [$7D08]		; DC 08 7D ; Jump long indirect [$7D08] [Flow: jump]
	bit #$8910.w		; 89 10 89 ; Test bits #$8910.w with accumulator [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit #$8910.w		; 89 10 89 ; Test bits #$8910.w with accumulator [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit #$8989.w		; 89 89 89 ; Test bits #$8989.w with accumulator [Reads: Accumulator] [Flags: Z]
	.db $10, $89		; 10 89 ; Branch if plus to $10, $89 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cpy #$0000.w		; C0 00 00 ; Compare #$0000.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$4E0C.w		; E0 0C 4E ; Compare #$4E0C.w with X register [Reads: X Index] [Flags: ZNC]
	ora ($CE.b)		; 12 CE ; OR accumulator with memory (indirect) ($CE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($62.b)		; 12 62 ; OR accumulator with memory (indirect) ($62.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($E2.b),Y		; 11 E2 ; OR accumulator with memory ($E2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($3C.b),Y		; 11 3C ; OR accumulator with memory ($3C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$BC.b]		; 07 BC ; OR accumulator with memory (long) [$BC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$E0.b]		; 07 E0 ; OR accumulator with memory (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $003C.w		; 0C 3C 00 ; Test and set bits $003C.w [Reads: Accumulator] [Flags: Z]
	ldx $3E00.w,Y		; BE 00 3E ; Load X register $3E00.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $70.b,S		; 03 70 ; OR accumulator with stack relative $70.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($A4.b,X)		; 01 A4 ; Logical OR ($A4.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $24.b,S		; 03 24 ; OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $18.b		; 04 18 ; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	ora $8A.b		; 05 8A ; Logical OR $8A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $0A.b		; 02 0A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5B.b		; 00 5B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5B.b		; 00 5B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5B.b		; 00 5B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $76.b		; 00 76 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc $7A79.w,Y		; 79 79 7A ; Add $7A79.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($7E7D.w,X)		; 7C 7D 7E ; Jump indirect indexed to ($7E7D.w,X) [Reads: X Index] [Flow: jump]
	ror $807F.w,X		; 7E 7F 80 ; Rotate right $807F.w,X [Reads: X Index] [Flags: ZNC]
	.db $80, $81		; 80 81 ; Branch always to $80, $81 [Flow: branch]
	.db $82, $8B, $4B		; 82 8B 4B ; Branch always long to $82, $8B, $4B [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$FFF8.w		; 29 F8 FF ; Logical AND #$FFF8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0708.w		; ED 08 07 ; Subtract $0708.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and $070A.w		; 2D 0A 07 ; Logical AND $070A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$FFF8.w		; 29 F8 FF ; Logical AND #$FFF8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $070C.w		; ED 0C 07 ; Subtract $070C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and $070E.w		; 2D 0E 07 ; Logical AND $070E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx #$0024.w		; A2 24 00 ; Load #$0024.w into X register [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $B800.w,X		; DD 00 B8 ; Compare accumulator $B800.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $040A.w		; AD 0A 04 ; Load $040A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $B826.w,X		; DD 26 B8 ; Compare accumulator $B826.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $ED		; 10 ED ; Branch if plus to $10, $ED [Flow: branch]
	ldx #$0026.w		; A2 26 00 ; Load #$0026.w into X register [Writes: X Index] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3CA.l		; 8F CA F3 7E ; Store accumulator (long) $7EF3CA.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $B84C.w,X		; BD 4C B8 ; Load $B84C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $010E.w		; 8D 0E 01 ; Store accumulator to $010E.w [Reads: Accumulator]
	stz $010F.w		; 9C 0F 01 ; Store zero to $010F.w
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $C500.w,X		; FE 00 C5 ; Increment memory $C500.w,X [Reads: X Index] [Flags: ZN]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($15.b,X)		; 01 15 ; Logical OR ($15.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($75.b,X)		; 01 75 ; Logical OR ($75.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($56.b,X)		; 01 56 ; Logical OR ($56.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($F5.b,X)		; 01 F5 ; Logical OR ($F5.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $E2.b		; 00 E2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($19.b,X)		; 01 19 ; Logical OR ($19.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($77.b,X)		; 01 77 ; Logical OR ($77.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($3F.b,X)		; 01 3F ; Logical OR ($3F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($72.b,X)		; 01 72 ; Logical OR ($72.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($61.b,X)		; 01 61 ; Logical OR ($61.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($72.b,X)		; 01 72 ; Logical OR ($72.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($4C.b,X)		; 01 4C ; Logical OR ($4C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($56.b,X)		; 01 56 ; Logical OR ($56.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($EF.b,X)		; 01 EF ; Logical OR ($EF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($73.b,X)		; 01 73 ; Logical OR ($73.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($49.b,X)		; 01 49 ; Logical OR ($49.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($75.b,X)		; 01 75 ; Logical OR ($75.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($CC.b,X)		; 01 CC ; Logical OR ($CC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($5E.b,X)		; 01 5E ; Logical OR ($5E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($67.b,X)		; 01 67 ; Logical OR ($67.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($28.b,X)		; 01 28 ; Logical OR ($28.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($31.b,X)		; 01 31 ; Logical OR ($31.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($6D.b,X)		; 01 6D ; Logical OR ($6D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($63.b,X)		; 01 63 ; Logical OR ($63.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($73.b,X)		; 01 73 ; Logical OR ($73.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($77.b,X)		; 01 77 ; Logical OR ($77.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($4A.b,X)		; 01 4A ; Logical OR ($4A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($C4.b,X)		; 01 C4 ; Logical OR ($C4.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $4F.b		; 00 4F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($15.b,X)		; 01 15 ; Logical OR ($15.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($14.b,X)		; 01 14 ; Logical OR ($14.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($74.b,X)		; 01 74 ; Logical OR ($74.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($55.b,X)		; 01 55 ; Logical OR ($55.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($F5.b,X)		; 01 F5 ; Logical OR ($F5.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $EE.b		; 00 EE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($46.b,X)		; 01 46 ; Logical OR ($46.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($71.b,X)		; 01 71 ; Logical OR ($71.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($55.b,X)		; 01 55 ; Logical OR ($55.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($37.b,X)		; 01 37 ; Logical OR ($37.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($74.b,X)		; 01 74 ; Logical OR ($74.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($73.b,X)		; 01 73 ; Logical OR ($73.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($21.b,X)		; 01 21 ; Logical OR ($21.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($64.b,X)		; 01 64 ; Logical OR ($64.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($55.b,X)		; 01 55 ; Logical OR ($55.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($57.b,X)		; 01 57 ; Logical OR ($57.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($28.b,X)		; 01 28 ; Logical OR ($28.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($14.b,X)		; 01 14 ; Logical OR ($14.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($13.b,X)		; 01 13 ; Logical OR ($13.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($61.b,X)		; 01 61 ; Logical OR ($61.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($49.b,X)		; 01 49 ; Logical OR ($49.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($17.b,X)		; 01 17 ; Logical OR ($17.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($74.b,X)		; 01 74 ; Logical OR ($74.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($CC.b,X)		; 01 CC ; Logical OR ($CC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($31.b,X)		; 01 31 ; Logical OR ($31.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($51.b,X)		; 01 51 ; Logical OR ($51.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $4E.b		; 00 4E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($31.b,X)		; 01 31 ; Logical OR ($31.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($7A.b,X)		; 01 7A ; Logical OR ($7A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($63.b,X)		; 01 63 ; Logical OR ($63.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($72.b,X)		; 01 72 ; Logical OR ($72.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($BD.b,X)		; 01 BD ; Logical OR ($BD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($52.b,X)		; 01 52 ; Logical OR ($52.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($67.b,X)		; 01 67 ; Logical OR ($67.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($2C.b,X)		; 01 2C ; Logical OR ($2C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4A.b		; 00 4A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4A.b		; 00 4A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7B.b		; 00 7B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5E.b		; 00 5E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $75.b		; 00 75 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $47.b		; 00 47 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5B.b		; 00 5B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $74.b		; 00 74 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3B.b		; 00 3B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $42.b		; 00 42 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $35.b		; 00 35 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $69.b		; 00 69 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $53.b		; 00 53 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $35.b		; 00 35 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2E.b		; 00 2E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5B.b		; 00 5B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $51.b		; 00 51 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5E.b		; 00 5E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6F.b		; 00 6F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $77.b		; 00 77 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $37.b		; 00 37 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6E.b		; 00 6E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $56.b		; 00 56 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3A.b		; 00 3A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $35.b		; 00 35 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $75.b		; 00 75 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5A.b		; 00 5A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2B.b		; 00 2B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6B.b		; 00 6B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3A.b		; 00 3A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $37.b		; 00 37 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $77.b		; 00 77 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $35.b		; 00 35 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $37.b		; 00 37 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $77.b		; 00 77 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $96.b		; 00 96 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$AA.b]		; 07 AA ; OR accumulator with memory (long) [$AA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($BE.b,X)		; 01 BE ; Logical OR ($BE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$58.b]		; 07 58 ; OR accumulator with memory (long) [$58.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $8E.b		; 06 8E ; Arithmetic shift left $8E.b [Reads: Direct Page] [Flags: ZNC]
	ora [$6A.b],Y		; 17 6A ; OR accumulator with memory (long indexed) [$6A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($A4.b,X)		; 01 A4 ; Logical OR ($A4.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $38.b		; 05 38 ; Logical OR $38.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $10.b		; 05 10 ; Logical OR $10.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $A4.b		; 05 A4 ; Logical OR $A4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($4C.b,X)		; 01 4C ; Logical OR ($4C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $54.b		; 05 54 ; Logical OR $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $36.b		; 05 36 ; Logical OR $36.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: ZNC]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ora $6E.b,S		; 03 6E ; OR accumulator with stack relative $6E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($F6.b)		; 12 F6 ; OR accumulator with memory (indirect) ($F6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$56.b]		; 07 56 ; OR accumulator with memory (long) [$56.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $06.b,X		; 34 06 ; Test bits $06.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol $03.b,X		; 36 03 ; Rotate left $03.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $62, $0E, $6E		; 62 0E 6E ; Push effective relative address $62, $0E, $6E [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $62, $11, $62		; 62 11 62 ; Push effective relative address $62, $11, $62 [Writes: Stack Pointer]
	asl $1058.w		; 0E 58 10 ; Arithmetic shift left $1058.w [Flags: ZNC]
	lsr $0B.b,X		; 56 0B ; Logical shift right $0B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	stz $12.b,X		; 74 12 ; Store zero to $12.b,X [Reads: X Index]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	inc $07.b,X		; F6 07 ; Increment memory $07.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora ($38.b),Y		; 11 38 ; OR accumulator with memory ($38.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($B8.b)		; 12 B8 ; OR accumulator with memory (indirect) ($B8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $02BE.w		; 0C BE 02 ; Test and set bits $02BE.w [Reads: Accumulator] [Flags: Z]
	rol $EA07.w		; 2E 07 EA ; Rotate left $EA07.w [Flags: ZNC]
	ora ($A4.b,X)		; 01 A4 ; Logical OR ($A4.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $1C.b		; 06 1C ; Arithmetic shift left $1C.b [Reads: Direct Page] [Flags: ZNC]
	.db $10, $48		; 10 48 ; Branch if plus to $10, $48 [Flow: branch]
	ora ($DC.b)		; 12 DC ; OR accumulator with memory (indirect) ($DC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $DC.b		; 06 DC ; Arithmetic shift left $DC.b [Reads: Direct Page] [Flags: ZNC]
	ora ($56.b)		; 12 56 ; OR accumulator with memory (indirect) ($56.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0336.w		; 0E 36 03 ; Arithmetic shift left $0336.w [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($A4.b),Y		; 11 A4 ; OR accumulator with memory ($A4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1450.w,X		; 1D 50 14 ; OR accumulator with memory $1450.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	asl $DE.b		; 06 DE ; Arithmetic shift left $DE.b [Reads: Direct Page] [Flags: ZNC]
	ora $BE.b,S		; 03 BE ; OR accumulator with stack relative $BE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $09A0.w		; 0D A0 09 ; Logical OR $09A0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	stz $DE0D.w		; 9C 0D DE ; Store zero to $DE0D.w
	ora ($94.b,X)		; 01 94 ; Logical OR ($94.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $16.b		; 02 16 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $68.b		; 06 68 ; Arithmetic shift left $68.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora ($DE.b,X)		; 01 DE ; Logical OR ($DE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $68.b,S		; 03 68 ; OR accumulator with stack relative $68.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0B18.w		; 0D 18 0B ; Logical OR $0B18.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $6414.w		; 4E 14 64 ; Logical shift right $6414.w [Flags: ZNC]
	ora ($D0.b)		; 12 D0 ; OR accumulator with memory (indirect) ($D0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	inc $13.b		; E6 13 ; Increment $13.b [Reads: Direct Page] [Flags: ZN]
	stz $3609.w,X		; 9E 09 36 ; Store zero to $3609.w,X [Reads: X Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rol $1A.b,X		; 36 1A ; Rotate left $1A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	stx $8C03.w		; 8E 03 8C ; Store X register to $8C03.w [Reads: X Index]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $B0, $14		; B0 14 ; Branch if carry set to $B0, $14 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	stz $09.b		; 64 09 ; Store zero to $09.b
	rol $6E07.w		; 2E 07 6E ; Rotate left $6E07.w [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ror $0612.w		; 6E 12 06 ; Rotate right $0612.w [Flags: ZNC]
	ora #$A2.b		; 09 A2 ; Logical OR #$A2.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $96.b		; 02 96 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$68.b]		; 07 68 ; OR accumulator with memory (long) [$68.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0934.w		; 0D 34 09 ; Logical OR $0934.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $06.b,X		; 36 06 ; Rotate left $06.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	asl $B2.b		; 06 B2 ; Arithmetic shift left $B2.b [Reads: Direct Page] [Flags: ZNC]
	ora ($2C.b,X)		; 01 2C ; Logical OR ($2C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora #$AA.b		; 09 AA ; Logical OR #$AA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $B2.b		; 02 B2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $8C.b		; 05 8C ; Logical OR $8C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $D4.b		; 00 D4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0224.w		; 0C 24 02 ; Test and set bits $0224.w [Reads: Accumulator] [Flags: Z]
	ora ($06.b)		; 12 06 ; OR accumulator with memory (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $13.b		; E6 13 ; Increment $13.b [Reads: Direct Page] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora $64.b		; 05 64 ; Logical OR $64.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$AE.b		; 09 AE ; Logical OR #$AE.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $039A.w		; 0D 9A 03 ; Logical OR $039A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	stz $9E08.w,X		; 9E 08 9E ; Store zero to $9E08.w,X [Reads: X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $B209.w		; 2C 09 B2 ; Test bits $B209.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora $120934.l		; 0F 34 09 12 ; OR accumulator with memory (long) $120934.l [Writes: Accumulator] [Flags: ZN]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $30.b		; 02 30 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $24.b,S		; 03 24 ; OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $74.b		; 02 74 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($9A.b)		; 12 9A ; OR accumulator with memory (indirect) ($9A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	stx $6417.w		; 8E 17 64 ; Store X register to $6417.w [Reads: X Index]
	ora #$8C.b		; 09 8C ; Logical OR #$8C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($0A.b,X)		; 01 0A ; Logical OR ($0A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $0A.b		; 06 0A ; Arithmetic shift left $0A.b [Reads: Direct Page] [Flags: ZNC]
	asl $28.b		; 06 28 ; Arithmetic shift left $28.b [Reads: Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora [$30.b]		; 07 30 ; OR accumulator with memory (long) [$30.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $30.b,S		; 03 30 ; OR accumulator with stack relative $30.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1E.b,S		; 03 1E ; OR accumulator with stack relative $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $05.b		; 06 05 ; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: ZNC]
	tsb $0C04.w		; 0C 04 0C ; Test and set bits $0C04.w [Reads: Accumulator] [Flags: Z]
	tsb $8C.b		; 04 8C ; Test and set bits $8C.b [Reads: Accumulator] [Flags: Z]
	ora [$58.b],Y		; 17 58 ; OR accumulator with memory (long indexed) [$58.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0208.w		; 0D 08 02 ; Logical OR $0208.w with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0E0D.w		; 0C 0D 0E ; Test and set bits $0E0D.w [Reads: Accumulator] [Flags: Z]
	ora $121110.l		; 0F 10 11 12 ; OR accumulator with memory (long) $121110.l [Writes: Accumulator] [Flags: ZN]
	ora ($14.b,S),Y		; 13 14 ; OR accumulator (stack relative indirect indexed) ($14.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $16.b,X		; 15 16 ; OR accumulator with memory $16.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$18.b],Y		; 17 18 ; OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1B1A.w,Y		; 19 1A 1B ; OR accumulator with memory $1B1A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $1E1D.w		; 1C 1D 1E ; Test and reset bits $1E1D.w [Reads: Accumulator] [Flags: Z]
	ora $222120.l,X		; 1F 20 21 22 ; Logical OR long $222120.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $24.b,S		; 23 24 ; AND accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $26.b		; 25 26 ; Logical AND $26.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$28.b]		; 27 28 ; AND accumulator with memory (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$2A.b		; 29 2A ; Logical AND #$2A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	bit $2E2D.w		; 2C 2D 2E ; Test bits $2E2D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $323130.l		; 2F 30 31 32 ; AND accumulator with memory (long) $323130.l [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $36.b,X		; 35 36 ; Logical AND $36.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$38.b],Y		; 37 38 ; AND accumulator with memory (long indexed) [$38.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $3B3A.w,Y		; 39 3A 3B ; AND accumulator with memory $3B3A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $3E3D.w,X		; 3C 3D 3E ; Test bits $3E3D.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $424140.l,X		; 3F 40 41 42 ; AND accumulator with memory (long,X) $424140.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $44.b,S		; 43 44 ; Exclusive OR accumulator with stack relative $44.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $46.b		; 45 46 ; Exclusive OR $46.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$48.b]		; 47 48 ; Exclusive OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$4A.b		; 49 4A ; Exclusive OR #$4A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	jmp $4E4D.w		; 4C 4D 4E ; Jump to $4E4D.w [Flow: jump]
	eor $525150.l		; 4F 50 51 52 ; Exclusive OR accumulator with memory (long) $525150.l [Writes: Accumulator] [Flags: ZN]
	eor ($54.b,S),Y		; 53 54 ; XOR accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5E.b,X		; 55 5E ; Exclusive OR accumulator with memory $5E.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	eor $5B5A.w,Y		; 59 5A 5B ; Exclusive OR accumulator with memory $5B5A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $5F5E5D.l		; 5C 5D 5E 5F ; Jump long to $5F5E5D.l [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $64.b,S		; 63 64 ; Add with carry (stack relative) $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $66.b		; 65 66 ; Add $66.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc [$68.b]		; 67 68 ; Add with carry (long) [$68.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$6A.b		; 69 6A ; Add #$6A.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lsr $5E.b,X		; 56 5E ; Logical shift right $5E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lsr $6058.w,X		; 5E 58 60 ; Logical shift right $6058.w,X [Reads: X Index] [Flags: ZNC]
	lsr $5E4D.w,X		; 5E 4D 5E ; Logical shift right $5E4D.w,X [Reads: X Index] [Flags: ZNC]
	adc $60.b		; 65 60 ; Add $60.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor [$6B.b],Y		; 57 6B ; Exclusive OR accumulator with memory (long indexed) [$6B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($71.b),Y		; 71 71 ; Add with carry ($71.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $6F6E.w		; 6D 6E 6F ; Add $6F6E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $6C		; 70 6C ; Branch if overflow set to $70, $6C [Flow: branch]
	adc ($83.b)		; 72 83 ; Add with carry (indirect) ($83.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sty $5E.b		; 84 5E ; Store Y register to $5E.b [Reads: Y Index]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0007.w		; 69 07 00 ; Add #$0007.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0708.w		; ED 08 07 ; Subtract $0708.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and $070A.w		; 2D 0A 07 ; Logical AND $070A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $070C.w		; ED 0C 07 ; Subtract $070C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and $070E.w		; 2D 0E 07 ; Logical AND $070E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $59		; D0 59 ; Branch if not equal to $D0, $59 [Flow: branch]
	lda $0F8002.l,X		; BF 02 80 0F ; Load long $0F8002.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$41FF.w		; 29 FF 41 ; Logical AND #$41FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$00E9.w		; C9 E9 00 ; Compare #$00E9.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $2B		; F0 2B ; Branch if equal to $F0, $2B [Flow: branch]
	cmp #$0149.w		; C9 49 01 ; Compare #$0149.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $4C		; F0 4C ; Branch if equal to $F0, $4C [Flow: branch]
	cmp #$0169.w		; C9 69 01 ; Compare #$0169.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $47		; F0 47 ; Branch if equal to $F0, $47 [Flow: branch]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda $7E2002.l,X		; BF 02 20 7E ; Load long $7E2002.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0F8000.l,X		; BF 00 80 0F ; Load long $0F8000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$41FF.w		; 29 FF 41 ; Logical AND #$41FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$4149.w		; C9 49 41 ; Compare #$4149.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	cmp #$4169.w		; C9 69 41 ; Compare #$4169.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $2B		; F0 2B ; Branch if equal to $F0, $2B [Flow: branch]
	cmp #$40E9.w		; C9 E9 40 ; Compare #$40E9.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $60		; D0 60 ; Branch if not equal to $D0, $60 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$0DA4.w		; A9 A4 0D ; Load #$0DA4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1BC97C.l		; 22 7C C9 1B ; Jump to subroutine long $1BC97C.l [Writes: Stack Pointer] [Flow: call]
	lda #$0DA6.w		; A9 A6 0D ; Load #$0DA6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	ldy #$0002.w		; A0 02 00 ; Load #$0002.w into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1BC983.l		; 22 83 C9 1B ; Jump to subroutine long $1BC983.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $80, $3A		; 80 3A ; Branch always to $80, $3A [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	stz $0692.w		; 9C 92 06 ; Store zero to $0692.w
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $C9.b,S		; 03 C9 ; OR accumulator with stack relative $C9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $21		; B0 21 ; Branch if carry set to $B0, $21 [Flow: branch]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($06.b)		; 92 06 ; Store accumulator (indirect) ($06.b) [Reads: Accumulator, Direct Page]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$80.b		; E9 80 ; Subtract #$80.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $E2.b		; [PATTERN: Memory clearing operation] 06 E2 ; Arithmetic shift left $E2.b [Reads: Direct Page] [Flags: ZNC]
	jsr $15A9.w		; 20 A9 15 ; Jump to subroutine at $15A9.w [Writes: Stack Pointer] [Flow: call]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $0690.w		; 9C 90 06 ; Store zero to $0690.w
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0F8004.l,X		; BF 04 80 0F ; Load long $0F8004.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $80.b		; 06 80 ; Arithmetic shift left $80.b [Reads: Direct Page] [Flags: ZNC]
	ora $01FF29.l		; 0F 29 FF 01 ; OR accumulator with memory (long) $01FF29.l [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ldx #$56.b		; A2 56 ; Load #$56.b into X register [Writes: X Index] [Flags: ZN]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DF.b		; 00 DF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $D01BB8.l,X		; BF B8 1B D0 ; Load long $D01BB8.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $1BB917.l,X		; DF 17 B9 1B ; Compare accumulator (long,X) $1BB917.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $EC		; 10 EC ; Branch if plus to $10, $EC [Flow: branch]
	stz $04B8.w		; 9C B8 04 ; Store zero to $04B8.w
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $04B8.w		; AD B8 04 ; Load $04B8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $F8		; D0 F8 ; Branch if not equal to $D0, $F8 [Flow: branch]
	inc $04B8.w		; EE B8 04 ; Increment $04B8.w [Flags: ZN]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jmp $0FFDAA.l		; 5C AA FD 0F ; Jump long to $0FFDAA.l [Flow: jump]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: ZN]
	ora ($A5.b,X)		; 01 A5 ; Logical OR ($A5.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $30, $67		; 30 67 ; Branch if minus to $30, $67 [Flow: branch]
	cmp $1BBA71.l,X		; DF 71 BA 1B ; Compare accumulator (long,X) $1BBA71.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	.db $D0, $F6		; D0 F6 ; Branch if not equal to $D0, $F6 [Flow: branch]
	lda $040A.w		; AD 0A 04 ; Load $040A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $1BB96F.l,X		; DF 6F B9 1B ; Compare accumulator (long,X) $1BB96F.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	.db $D0, $EB		; D0 EB ; Branch if not equal to $D0, $EB [Flow: branch]
	lda $7EF3D3.l		; AF D3 F3 7E ; Load long $7EF3D3.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($AD.b)		; 32 AD ; AND accumulator with memory (indirect) ($AD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cop $29.b		; 02 29 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $01C900.l,X		; FF 00 C9 01 ; Subtract with carry (long,X) $01C900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $CCAF.w,X		; BD AF CC ; Load $CCAF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($7E.b,S),Y		; F3 7E ; Subtract with carry (stack relative indirect indexed) ($7E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $05C9.w,X		; 1E C9 05 ; Arithmetic shift left $05C9.w,X [Reads: X Index] [Flags: ZNC]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0EC9.w,Y		; 19 C9 0E ; OR accumulator with memory $0EC9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $C9.b		; 14 C9 ; Test and reset bits $C9.b [Reads: Accumulator] [Flags: Z]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $C9.b		; 05 C9 ; Logical OR $C9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpx #$76.b		; E0 76 ; Compare #$76.b with X register [Reads: X Index] [Flags: ZNC]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $8A.b,Y		; 96 8A ; Store X register $8A.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; [PATTERN: Memory clearing operation] AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	lda $1BBB73.l,X		; BF 73 BB 1B ; Load long $1BBB73.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $010E.w		; 8D 0E 01 ; Store accumulator to $010E.w [Reads: Accumulator]
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	stz $46.b		; 64 46 ; Store zero to $46.b
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $10.b		; [PATTERN: Memory clearing operation] 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $010C.w		; 8D 0C 01 ; Store accumulator to $010C.w [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1B.b		; [PATTERN: Memory clearing operation] A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jmp $01DABB.l		; 5C BB DA 01 ; Jump long to $01DABB.l [Flow: jump]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $04B2.w		; 9C B2 04 ; Store zero to $04B2.w
	stz $76.b		; 64 76 ; Store zero to $76.b
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0708.w		; ED 08 07 ; Subtract $0708.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and $070A.w		; 2D 0A 07 ; Logical AND $070A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $070C.w		; ED 0C 07 ; Subtract $070C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and $070E.w		; 2D 0E 07 ; Logical AND $070E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$0002.w		; 29 02 00 ; Logical AND #$0002.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$0040.w		; 29 40 00 ; Logical AND #$0040.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $3B		; F0 3B ; Branch if equal to $F0, $3B [Flow: branch]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy #$0002.w		; A0 02 00 ; Load #$0002.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$0036.w		; C9 36 00 ; Compare #$0036.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	ldy #$0004.w		; A0 04 00 ; Load #$0004.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$072A.w		; C9 2A 07 ; Compare #$072A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $23		; D0 23 ; Branch if not equal to $D0, $23 [Flow: branch]
	jmp $BE8D.w		; 4C 8D BE ; Jump to $BE8D.w [Flow: jump]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$021B.w		; C9 1B 02 ; Compare #$021B.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda #$11.b		; A9 11 ; Load #$11.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	jsl $0EDD67.l		; 22 67 DD 0E ; Jump to subroutine long $0EDD67.l [Writes: Stack Pointer] [Flow: call]
	lda #$0DCB.w		; A9 CB 0D ; Load #$0DCB.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $BEC3.w		; 4C C3 BE ; Jump to $BEC3.w [Flow: jump]
	jsr $BF1E.w		; 20 1E BF ; Jump to subroutine at $BF1E.w [Writes: Stack Pointer] [Flow: call]
	jmp $BF1A.w		; 4C 1A BF ; Jump to $BF1A.w [Flow: jump]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$0034.w		; C9 34 00 ; Compare #$0034.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $45		; F0 45 ; Branch if equal to $F0, $45 [Flow: branch]
	cmp #$0071.w		; C9 71 00 ; Compare #$0071.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $40		; F0 40 ; Branch if equal to $F0, $40 [Flow: branch]
	cmp #$0035.w		; C9 35 00 ; Compare #$0035.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $3B		; F0 3B ; Branch if equal to $F0, $3B [Flow: branch]
	cmp #$010D.w		; C9 0D 01 ; Compare #$010D.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $36		; F0 36 ; Branch if equal to $F0, $36 [Flow: branch]
	cmp #$010F.w		; C9 0F 01 ; Compare #$010F.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $31		; F0 31 ; Branch if equal to $F0, $31 [Flow: branch]
	cmp #$00E1.w		; C9 E1 00 ; Compare #$00E1.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $2C		; F0 2C ; Branch if equal to $F0, $2C [Flow: branch]
	cmp #$00E2.w		; C9 E2 00 ; Compare #$00E2.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $27		; F0 27 ; Branch if equal to $F0, $27 [Flow: branch]
	cmp #$00DA.w		; C9 DA 00 ; Compare #$00DA.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	cmp #$00F8.w		; C9 F8 00 ; Compare #$00F8.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	cmp #$010E.w		; C9 0E 01 ; Compare #$010E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	cmp #$037E.w		; C9 7E 03 ; Compare #$037E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $32		; F0 32 ; Branch if equal to $F0, $32 [Flow: branch]
	ldy #$0002.w		; A0 02 00 ; Load #$0002.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$0036.w		; C9 36 00 ; Compare #$0036.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $5A		; F0 5A ; Branch if equal to $F0, $5A [Flow: branch]
	ldy #$0004.w		; A0 04 00 ; Load #$0004.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$072A.w		; C9 2A 07 ; Compare #$072A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $52		; F0 52 ; Branch if equal to $F0, $52 [Flow: branch]
	jmp $BF1A.w		; 4C 1A BF ; Jump to $BF1A.w [Flow: jump]
	lda $037A.w		; AD 7A 03 ; Load $037A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0001.w		; C9 01 00 ; Compare #$0001.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $F2		; D0 F2 ; Branch if not equal to $D0, $F2 [Flow: branch]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$002A.w		; C9 2A 00 ; Compare #$002A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	cpx #$0492.w		; E0 92 04 ; Compare #$0492.w with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stx $04B2.w		; 8E B2 04 ; Store X register to $04B2.w [Reads: X Index]
	ldy #$0DC9.w		; A0 C9 0D ; Load #$0DC9.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $80, $5D		; 80 5D ; Branch always to $80, $5D [Flow: branch]
	lda $037A.w		; AD 7A 03 ; Load $037A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0001.w		; C9 01 00 ; Compare #$0001.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $BF1A.w		; 4C 1A BF ; Jump to $BF1A.w [Flow: jump]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0008.w		; E9 08 00 ; Subtract #$0008.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0008.w		; E9 08 00 ; Subtract #$0008.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and #$FFF8.w		; 29 F8 FF ; Logical AND #$FFF8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $76.b		; 85 76 ; Store accumulator to $76.b [Reads: Accumulator]
	ldy #$0DC5.w		; A0 C5 0D ; Load #$0DC5.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $80, $2D		; 80 2D ; Branch always to $80, $2D [Flow: branch]
	lda $037A.w		; AD 7A 03 ; Load $037A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0001.w		; C9 01 00 ; Compare #$0001.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $42		; F0 42 ; Branch if equal to $F0, $42 [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$FFFE.w		; 29 FE FF ; Logical AND #$FFFE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$FFF0.w		; 29 F0 FF ; Logical AND #$FFF0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	sty $76.b		; 84 76 ; Store Y register to $76.b [Reads: Y Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy #$0DC7.w		; A0 C7 0D ; Load #$0DC7.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$072A.w		; C9 2A 07 ; Compare #$072A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	ldy #$0DC8.w		; A0 C8 0D ; Load #$0DC8.w into Y register [Writes: Y Index] [Flags: ZN]
	sty $0E.b		; 84 0E ; Store Y register to $0E.b [Reads: Y Index]
	jsr $C8A4.w		; 20 A4 C8 ; Jump to subroutine at $C8A4.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	jsl $0EDD40.l		; 22 40 DD 0E ; Jump to subroutine long $0EDD40.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BC980.l		; 22 80 C9 1B ; Jump to subroutine long $1BC980.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0008.w		; 29 08 00 ; Logical AND #$0008.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0F8000.l,X		; BF 00 80 0F ; Load long $0F8000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01FF.w		; 29 FF 01 ; Logical AND #$01FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0E9459.l,X		; BF 59 94 0E ; Load long $0E9459.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $74.b		; A5 74 ; Load $74.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $76.b		; A5 76 ; Load $76.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	jsl $06812D.l		; 22 2D 81 06 ; Jump to subroutine long $06812D.l [Writes: Stack Pointer] [Flow: call]
	jsl $0991C3.l		; 22 C3 91 09 ; Jump to subroutine long $0991C3.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0F8000.l,X		; BF 00 80 0F ; Load long $0F8000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($AA.b,X)		; 01 AA ; Logical OR ($AA.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $0E9459.l,X		; BF 59 94 0E ; Load long $0E9459.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	cmp #$50.b		; C9 50 ; Compare #$50.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $15		; 90 15 ; Branch if carry clear to $90, $15 [Flow: branch]
	ldy #$1A.b		; A0 1A ; Load #$1A.b into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$52.b		; C9 52 ; Compare #$52.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $0C		; 90 0C ; Branch if carry clear to $90, $0C [Flow: branch]
	ldy #$11.b		; A0 11 ; Load #$11.b into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$58.b		; C9 58 ; Compare #$58.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	sty $012E.w		; 8C 2E 01 ; Store Y register to $012E.w [Reads: Y Index]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $80FF.w,X		; FE FF 80 ; Increment memory $80FF.w,X [Reads: X Index] [Flags: ZN]
	sbc $00FF7E.l,X		; FF 7E FF 00 ; Subtract with carry (long,X) $00FF7E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF80.l,X		; FF 80 FF 00 ; Subtract with carry (long,X) $00FF80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FE0000.l,X		; FF 00 00 FE ; Subtract with carry (long,X) $FE0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $292FA5.l,X		; FF A5 2F 29 ; Subtract with carry (long,X) $292FA5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $A5AA00.l,X		; FF 00 AA A5 ; Subtract with carry (long,X) $A5AA00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $7F18.w		; 20 18 7F ; Jump to subroutine at $7F18.w [Writes: Stack Pointer] [Flow: call]
	adc $D3.b		; 65 D3 ; Add $D3.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora [$29.b]		; 07 29 ; OR accumulator with memory (long) [$29.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0708.w		; ED 08 07 ; Subtract $0708.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and $070A.w		; 2D 0A 07 ; Logical AND $070A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $07D36D.l,X		; 7F 6D D3 07 ; Add long $07D36D.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$FFF0.w		; 29 F0 FF ; Logical AND #$FFF0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $070C.w		; ED 0C 07 ; Subtract $070C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and $070E.w		; 2D 0E 07 ; Logical AND $070E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	jsr $BF64.w		; 20 64 BF ; Jump to subroutine at $BF64.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$036D.w		; C9 6D 03 ; Compare #$036D.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $2C		; F0 2C ; Branch if equal to $F0, $2C [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$036E.w		; C9 6E 03 ; Compare #$036E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $26		; F0 26 ; Branch if equal to $F0, $26 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$0374.w		; C9 74 03 ; Compare #$0374.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$0375.w		; C9 75 03 ; Compare #$0375.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$023B.w		; C9 3B 02 ; Compare #$023B.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$023C.w		; C9 3C 02 ; Compare #$023C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$023D.w		; C9 3D 02 ; Compare #$023D.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	cmp #$023E.w		; C9 3E 02 ; Compare #$023E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	jmp $C09F.w		; 4C 9F C0 ; Jump to $C09F.w [Flow: jump]
	ldy #$0DC7.w		; A0 C7 0D ; Load #$0DC7.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$0036.w		; C9 36 00 ; Compare #$0036.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	ldy #$0DC8.w		; A0 C8 0D ; Load #$0DC8.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$072A.w		; C9 2A 07 ; Compare #$072A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	ldy #$0DCA.w		; A0 CA 0D ; Load #$0DCA.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$020F.w		; C9 0F 02 ; Compare #$020F.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	cmp #$0239.w		; C9 39 02 ; Compare #$0239.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$0101.w		; C9 01 01 ; Compare #$0101.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $22		; D0 22 ; Branch if not equal to $D0, $22 [Flow: branch]
	ldy #$0DC6.w		; A0 C6 0D ; Load #$0DC6.w into Y register [Writes: Y Index] [Flags: ZN]
	sty $0E.b		; 84 0E ; Store Y register to $0E.b [Reads: Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $C8A4.w		; 20 A4 C8 ; Jump to subroutine at $C8A4.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	jsl $0EDD40.l		; 22 40 DD 0E ; Jump to subroutine long $0EDD40.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BC980.l		; 22 80 C9 1B ; Jump to subroutine long $1BC980.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0008.w		; 29 08 00 ; Logical AND #$0008.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0F8000.l,X		; BF 00 80 0F ; Load long $0F8000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01FF.w		; 29 FF 01 ; Logical AND #$01FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0E9459.l,X		; BF 59 94 0E ; Load long $0E9459.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 8
.INDEX 8
	sep #$31		; E2 31
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$C7.b		; A0 C7 ; Load #$C7.b into Y register [Writes: Y Index] [Flags: ZN]
	ora $36C9.w		; 0D C9 36 ; Logical OR $36C9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	jsr $BF64.w		; 20 64 BF ; Jump to subroutine at $BF64.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	jsr $BF64.w		; 20 64 BF ; Jump to subroutine at $BF64.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$0226.w		; C9 26 02 ; Compare #$0226.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$0227.w		; C9 27 02 ; Compare #$0227.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$0228.w		; C9 28 02 ; Compare #$0228.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	cmp #$0229.w		; C9 29 02 ; Compare #$0229.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $B7		; D0 B7 ; Branch if not equal to $D0, $B7 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sty $0C.b		; 84 0C ; Store Y register to $0C.b [Reads: Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	adc $1BBF4C.l,X		; 7F 4C BF 1B ; Add long $1BBF4C.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0698.w		; 8D 98 06 ; Store accumulator to $0698.w [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$0028.w		; A9 28 00 ; Load #$0028.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0692.w		; 8D 92 06 ; Store accumulator to $0692.w [Reads: Accumulator]
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	jsr $C8A4.w		; 20 A4 C8 ; Jump to subroutine at $C8A4.w [Writes: Stack Pointer] [Flow: call]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7EF280.l,X		; BF 80 F2 7E ; Load long $7EF280.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF280.l,X		; 9F 80 F2 7E ; Store accumulator (long,X) $7EF280.l,X [Reads: Accumulator, X Index]
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda #$0050.w		; A9 50 00 ; Load #$0050.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0692.w		; 8D 92 06 ; Store accumulator to $0692.w [Reads: Accumulator]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $1BBF54.l,X		; 7F 54 BF 1B ; Add long $1BBF54.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $1BBF5C.l,X		; 7F 5C BF 1B ; Add long $1BBF5C.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; [PATTERN: Memory clearing operation] 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	jsl $02AD5C.l		; 22 5C AD 02 ; Jump to subroutine long $02AD5C.l [Writes: Stack Pointer] [Flow: call]
	jmp $C024.w		; 4C 24 C0 ; Jump to $C024.w [Flow: jump]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	stz $08.b		; 64 08 ; Store zero to $08.b
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0014.w		; E9 14 00 ; Subtract #$0014.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and #$FFF8.w		; 29 F8 FF ; Logical AND #$FFF8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0488.w		; 8D 88 04 ; Store accumulator to $0488.w [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0017.w		; E9 17 00 ; Subtract #$0017.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and #$FFF8.w		; 29 F8 FF ; Logical AND #$FFF8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0486.w		; 8D 86 04 ; Store accumulator to $0486.w [Reads: Accumulator]
	lda $0488.w		; AD 88 04 ; Load $0488.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0708.w		; ED 08 07 ; Subtract $0708.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and $070A.w		; 2D 0A 07 ; Logical AND $070A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $CA.b		; 85 CA ; Store accumulator to $CA.b [Reads: Accumulator]
	lda $0486.w		; AD 86 04 ; Load $0486.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C155.w		; 20 55 C1 ; Jump to subroutine at $C155.w [Writes: Stack Pointer] [Flow: call]
	lda $0486.w		; AD 86 04 ; Load $0486.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsr $C155.w		; 20 55 C1 ; Jump to subroutine at $C155.w [Writes: Stack Pointer] [Flow: call]
	lda $0486.w		; AD 86 04 ; Load $0486.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0020.w		; 69 20 00 ; Add #$0020.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsr $C155.w		; 20 55 C1 ; Jump to subroutine at $C155.w [Writes: Stack Pointer] [Flow: call]
	lda $0488.w		; AD 88 04 ; Load $0488.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0488.w		; 8D 88 04 ; Store accumulator to $0488.w [Reads: Accumulator]
	dec $C8.b		; C6 C8 ; Decrement $C8.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $C9		; D0 C9 ; Branch if not equal to $D0, $C9 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $070C.w		; ED 0C 07 ; Subtract $070C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and $070E.w		; 2D 0E 07 ; Logical AND $070E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CA.b		; 65 CA ; Add $CA.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	stx $04.b		; 86 04 ; Store X register to $04.b [Reads: X Index]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $F000.w		; 0D 00 F0 ; Logical OR $F000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	stz $BF.b		; 64 BF ; Store zero to $BF.b
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $C7A0.w,X		; 7E A0 C7 ; Rotate right $C7A0.w,X [Reads: X Index] [Flags: ZNC]
	ora $02A2.w		; 0D A2 02 ; Logical OR $02A2.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $00.b,X		; 36 00 ; Rotate left $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: ZN]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora $2AC9.w		; 0D C9 2A ; Logical OR $2AC9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$F0.b]		; 07 F0 ; OR accumulator with memory (long) [$F0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp #$7E.b		; C9 7E ; Compare #$7E.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $A0.b		; 45 A0 ; Exclusive OR $A0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $0D.b		; C5 0D ; Compare $0D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: ZN]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sty $0E.b		; 84 0E ; Store Y register to $0E.b [Reads: Y Index]
	ldx $04.b		; A6 04 ; Load $04.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	jsr $C8A4.w		; 20 A4 C8 ; Jump to subroutine at $C8A4.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	jsl $0EDD40.l		; 22 40 DD 0E ; Jump to subroutine long $0EDD40.l [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $C9.b,S		; 83 C9 ; Store accumulator (stack relative) $C9.b,S [Reads: Accumulator, Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and #$F8.b		; 29 F8 ; Logical AND #$F8.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $AD0085.l,X		; FF 85 00 AD ; Subtract with carry (long,X) $AD0085.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $29.b		; 04 29 ; Test and set bits $29.b [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $A50285.l,X		; FF 85 02 A5 ; Subtract with carry (long,X) $A50285.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $06812D.l		; 22 2D 81 06 ; Jump to subroutine long $06812D.l [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $04.b		; A6 04 ; Load $04.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	jsr $C8A4.w		; 20 A4 C8 ; Jump to subroutine at $C8A4.w [Writes: Stack Pointer] [Flow: call]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0DB4.w		; C9 B4 0D ; Compare #$0DB4.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	jsl $0EDD40.l		; 22 40 DD 0E ; Jump to subroutine long $0EDD40.l [Writes: Stack Pointer] [Flow: call]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1BC983.l		; 22 83 C9 1B ; Jump to subroutine long $1BC983.l [Writes: Stack Pointer] [Flow: call]
	lda #$0DB5.w		; A9 B5 0D ; Load #$0DB5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	jsl $0EDD40.l		; 22 40 DD 0E ; Jump to subroutine long $0EDD40.l [Writes: Stack Pointer] [Flow: call]
	ldy #$0002.w		; A0 02 00 ; Load #$0002.w into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1BC983.l		; 22 83 C9 1B ; Jump to subroutine long $1BC983.l [Writes: Stack Pointer] [Flow: call]
	stz $0E.b		; 64 0E ; Store zero to $0E.b
.ACCU 8
	sep #$20		; E2 20
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7EF280.l,X		; BF 80 F2 7E ; Load long $7EF280.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF280.l,X		; 9F 80 F2 7E ; Store accumulator (long,X) $7EF280.l,X [Reads: Accumulator, X Index]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$0068.w		; A9 68 00 ; Load #$0068.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0692.w		; 8D 92 06 ; Store accumulator to $0692.w [Reads: Accumulator]
	lda #$0C3E.w		; A9 3E 0C ; Load #$0C3E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0698.w		; 8D 98 06 ; Store accumulator to $0698.w [Reads: Accumulator]
	jsl $02AD5C.l		; 22 5C AD 02 ; Jump to subroutine long $02AD5C.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0C42.w		; A2 42 0C ; Load #$0C42.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E21.w		; A9 21 0E ; Load #$0E21.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1BC983.l		; 22 83 C9 1B ; Jump to subroutine long $1BC983.l [Writes: Stack Pointer] [Flow: call]
	ldx #$0CC0.w		; A2 C0 0C ; Load #$0CC0.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E25.w		; A9 25 0E ; Load #$0E25.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	ldy #$0002.w		; A0 02 00 ; Load #$0002.w into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1BC983.l		; 22 83 C9 1B ; Jump to subroutine long $1BC983.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $7EF298.l		; AF 98 F2 7E ; Load long $7EF298.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF298.l		; 8F 98 F2 7E ; Store accumulator (long) $7EF298.l [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0D3E.w		; A2 3E 0D ; Load #$0D3E.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E1B.w		; A9 1B 0E ; Load #$0E1B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1BC97C.l		; 22 7C C9 1B ; Jump to subroutine long $1BC97C.l [Writes: Stack Pointer] [Flow: call]
	ldx #$0D40.w		; A2 40 0D ; Load #$0D40.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E1C.w		; A9 1C 0E ; Load #$0E1C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0DBE.w		; A2 BE 0D ; Load #$0DBE.w into X register [Writes: X Index] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0E3E.w		; A2 3E 0E ; Load #$0E3E.w into X register [Writes: X Index] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1012.w,Y		; 99 12 10 ; Store accumulator to $1012.w,Y [Reads: Accumulator, Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $7EF2D8.l		; AF D8 F2 7E ; Load long $7EF2D8.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF2D8.l		; 8F D8 F2 7E ; Store accumulator (long) $7EF2D8.l [Reads: Accumulator]
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$03BC.w		; A2 BC 03 ; Load #$03BC.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E3F.w		; A9 3F 0E ; Load #$0E3F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1BC97C.l		; 22 7C C9 1B ; Jump to subroutine long $1BC97C.l [Writes: Stack Pointer] [Flow: call]
	ldx #$03BE.w		; A2 BE 03 ; Load #$03BE.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E40.w		; A9 40 0E ; Load #$0E40.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$043C.w		; A2 3C 04 ; Load #$043C.w into X register [Writes: X Index] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$04BC.w		; A2 BC 04 ; Load #$04BC.w into X register [Writes: X Index] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1012.w,Y		; 99 12 10 ; Store accumulator to $1012.w,Y [Reads: Accumulator, Y Index]
	lda #$3515.w		; A9 15 35 ; Load #$3515.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $7EF2DB.l		; AF DB F2 7E ; Load long $7EF2DB.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF2DB.l		; 8F DB F2 7E ; Store accumulator (long) $7EF2DB.l [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $F9C3.w,Y		; F9 C3 F9 ; Subtract with carry $F9C3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $07.b,S		; C3 07 ; Compare accumulator (stack relative) $07.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cpy $15.b		; C4 15 ; Compare $15.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $15.b		; C4 15 ; Compare $15.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $26.b		; C4 26 ; Compare $26.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $26.b		; C4 26 ; Compare $26.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $29.b		; C4 29 ; Compare $29.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $F9.b		; C4 F9 ; Compare $F9.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cmp $F9.b,S		; C3 F9 ; Compare accumulator (stack relative) $F9.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $2B.b,S		; C3 2B ; Compare accumulator (stack relative) $2B.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cpy $15.b		; C4 15 ; Compare $15.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $15.b		; C4 15 ; Compare $15.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $26.b		; C4 26 ; Compare $26.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $26.b		; C4 26 ; Compare $26.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $30.b		; C4 30 ; Compare $30.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $35.b		; C4 35 ; Compare $35.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $3D.b		; C4 3D ; Compare $3D.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $45.b		; C4 45 ; Compare $45.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $50.b		; C4 50 ; Compare $50.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $64.b		; C4 64 ; Compare $64.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $78.b		; C4 78 ; Compare $78.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $80.b		; C4 80 ; Compare $80.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $8E.b		; C4 8E ; Compare $8E.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $93.b		; C4 93 ; Compare $93.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $93.b		; C4 93 ; Compare $93.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $CB.b		; C4 CB ; Compare $CB.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $D6.b		; C4 D6 ; Compare $D6.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $D6.b		; C4 D6 ; Compare $D6.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $2C.b		; C4 2C ; Compare $2C.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cmp $32.b		; C5 32 ; Compare $32.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $32.b		; C5 32 ; Compare $32.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $93.b		; C5 93 ; Compare $93.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cpy $93.b		; C4 93 ; Compare $93.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $34.b		; C4 34 ; Compare $34.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cmp $D6.b		; C5 D6 ; Compare $D6.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cpy $D6.b		; C4 D6 ; Compare $D6.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $45.b		; C4 45 ; Compare $45.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cmp $32.b		; C5 32 ; Compare $32.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $32.b		; C5 32 ; Compare $32.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $4A.b		; C5 4A ; Compare $4A.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $4F.b		; C5 4F ; Compare $4F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $5B.b		; C5 5B ; Compare $5B.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $5D.b		; C5 5D ; Compare $5D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $74.b		; C5 74 ; Compare $74.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $8C.b		; C5 8C ; Compare $8C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $8C.b		; C5 8C ; Compare $8C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $8E.b		; C5 8E ; Compare $8E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $96.b		; C5 96 ; Compare $96.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $96.b		; C5 96 ; Compare $96.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $A4.b		; C5 A4 ; Compare $A4.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $AF.b		; C5 AF ; Compare $AF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $B7.b		; C5 B7 ; Compare $B7.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $BF.b		; C5 BF ; Compare $BF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $BF.b		; C5 BF ; Compare $BF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $D0.b		; C5 D0 ; Compare $D0.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $96.b		; C5 96 ; Compare $96.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $96.b		; C5 96 ; Compare $96.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $DB.b		; C5 DB ; Compare $DB.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $E6.b		; C5 E6 ; Compare $E6.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $EB.b		; C5 EB ; Compare $EB.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $BF.b		; C5 BF ; Compare $BF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $BF.b		; C5 BF ; Compare $BF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $F3.b		; C5 F3 ; Compare $F3.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $F8.b		; C5 F8 ; Compare $F8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $F8.b		; C5 F8 ; Compare $F8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $18.b		; C5 18 ; Compare $18.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	dec $2F.b		; C6 2F ; Decrement $2F.b [Reads: Direct Page] [Flags: ZN]
	dec $2F.b		; C6 2F ; Decrement $2F.b [Reads: Direct Page] [Flags: ZN]
	dec $4F.b		; C6 4F ; Decrement $4F.b [Reads: Direct Page] [Flags: ZN]
	dec $4F.b		; C6 4F ; Decrement $4F.b [Reads: Direct Page] [Flags: ZN]
	dec $58.b		; C6 58 ; Decrement $58.b [Reads: Direct Page] [Flags: ZN]
	dec $F8.b		; C6 F8 ; Decrement $F8.b [Reads: Direct Page] [Flags: ZN]
	cmp $F8.b		; C5 F8 ; Compare $F8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $58.b		; C5 58 ; Compare $58.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	dec $2F.b		; C6 2F ; Decrement $2F.b [Reads: Direct Page] [Flags: ZN]
	dec $2F.b		; C6 2F ; Decrement $2F.b [Reads: Direct Page] [Flags: ZN]
	dec $4F.b		; C6 4F ; Decrement $4F.b [Reads: Direct Page] [Flags: ZN]
	dec $4F.b		; C6 4F ; Decrement $4F.b [Reads: Direct Page] [Flags: ZN]
	dec $5A.b		; C6 5A ; Decrement $5A.b [Reads: Direct Page] [Flags: ZN]
	dec $6B.b		; C6 6B ; Decrement $6B.b [Reads: Direct Page] [Flags: ZN]
	dec $7F.b		; C6 7F ; Decrement $7F.b [Reads: Direct Page] [Flags: ZN]
	dec $99.b		; C6 99 ; Decrement $99.b [Reads: Direct Page] [Flags: ZN]
	dec $B0.b		; C6 B0 ; Decrement $B0.b [Reads: Direct Page] [Flags: ZN]
	dec $E2.b		; C6 E2 ; Decrement $E2.b [Reads: Direct Page] [Flags: ZN]
	dec $F0.b		; C6 F0 ; Decrement $F0.b [Reads: Direct Page] [Flags: ZN]
	dec $F8.b		; C6 F8 ; Decrement $F8.b [Reads: Direct Page] [Flags: ZN]
	dec $0F.b		; C6 0F ; Decrement $0F.b [Reads: Direct Page] [Flags: ZN]
	cmp [$17.b]		; C7 17 ; Compare accumulator (long) [$17.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$17.b]		; C7 17 ; Compare accumulator (long) [$17.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$67.b]		; C7 67 ; Compare accumulator (long) [$67.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$87.b]		; C7 87 ; Compare accumulator (long) [$87.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$87.b]		; C7 87 ; Compare accumulator (long) [$87.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$9C.b]		; C7 9C ; Compare accumulator (long) [$9C.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$9C.b]		; C7 9C ; Compare accumulator (long) [$9C.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$9C.b]		; C7 9C ; Compare accumulator (long) [$9C.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$17.b]		; C7 17 ; Compare accumulator (long) [$17.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$17.b]		; C7 17 ; Compare accumulator (long) [$17.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$9E.b]		; C7 9E ; Compare accumulator (long) [$9E.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$87.b]		; C7 87 ; Compare accumulator (long) [$87.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$87.b]		; C7 87 ; Compare accumulator (long) [$87.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$B2.b]		; C7 B2 ; Compare accumulator (long) [$B2.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$9C.b]		; C7 9C ; Compare accumulator (long) [$9C.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$9C.b]		; C7 9C ; Compare accumulator (long) [$9C.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$B7.b]		; C7 B7 ; Compare accumulator (long) [$B7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$C5.b]		; C7 C5 ; Compare accumulator (long) [$C5.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$D7.b]		; C7 D7 ; Compare accumulator (long) [$D7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$D9.b]		; C7 D9 ; Compare accumulator (long) [$D9.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$ED.b]		; C7 ED ; Compare accumulator (long) [$ED.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$0B.b]		; C7 0B ; Compare accumulator (long) [$0B.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora $1BC8.w		; 0D C8 1B ; Logical OR $1BC8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and $C8.b,S		; 23 C8 ; AND accumulator with stack relative $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $40C8.w,X		; 3E C8 40 ; Rotate left $40C8.w,X [Reads: X Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor [$C8.b],Y		; 57 C8 ; Exclusive OR accumulator with memory (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$C8.b],Y		; 57 C8 ; Exclusive OR accumulator with memory (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $C81BC8.l,X		; 5F C8 1B C8 ; Exclusive OR accumulator with memory (long,X) $C81BC8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc $7BC8.w		; 6D C8 7B ; Add $7BC8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	stx $C8.b		; 86 C8 ; Store X register to $C8.b [Reads: X Index]
	eor [$C8.b],Y		; 57 C8 ; Exclusive OR accumulator with memory (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$C8.b],Y		; 57 C8 ; Exclusive OR accumulator with memory (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $C8.b,X		; 94 C8 ; Store Y register $C8.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	tsb $E0.b		; 04 E0 ; Test and set bits $E0.b [Reads: Accumulator] [Flags: Z]
	.db $10, $80		; 10 80 ; Branch if plus to $10, $80 [Flow: branch]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $0104AE.l,X		; FF AE 04 01 ; Subtract with carry (long,X) $0104AE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $0D.b,X		; 16 0D ; Arithmetic shift left $0D.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $A4.b,S		; 03 A4 ; OR accumulator with stack relative $A4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $A001.w		; 0D 01 A0 ; Logical OR $A001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $FF01.w		; 0E 01 FF ; Arithmetic shift left $FF01.w [Flags: ZNC]
	sbc $05186A.l,X		; FF 6A 18 05 ; Subtract with carry (long,X) $05186A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($18.b)		; 72 18 ; Add with carry (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $6E.b		; 05 6E ; Logical OR $6E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $6A04.w,Y		; 19 04 6A ; OR accumulator with memory $6A04.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $72.b		; 05 72 ; Logical OR $72.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $FF.b		; 05 FF ; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $821D4A.l,X		; FF 4A 1D 82 ; Subtract with carry (long,X) $821D4A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0730FF.l,X		; FF FF 30 07 ; Subtract with carry (long,X) $0730FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $060618.l,X		; FF 18 06 06 ; Subtract with carry (long,X) $060618.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0B28FF.l,X		; FF FF 28 0B ; Subtract with carry (long,X) $0B28FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $2E.b		; 04 2E ; Test and set bits $2E.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $82, $FF, $FF		; 82 FF FF ; Branch always long to $82, $FF, $FF [Flow: branch]
	bit $0A.b,X		; 34 0A ; Test bits $0A.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora $8E.b		; 05 8E ; Logical OR $8E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF06.w		; 0D 06 FF ; Logical OR $FF06.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $060530.l,X		; FF 30 05 06 ; Subtract with carry (long,X) $060530.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $B2.b		; 04 B2 ; Test and set bits $B2.b [Reads: Accumulator] [Flags: Z]
	ora #$06.b		; 09 06 ; Logical OR #$06.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $0506FF.l,X		; FF FF 06 05 ; Subtract with carry (long,X) $0506FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $A0.b		; 84 A0 ; Store Y register to $A0.b [Reads: Y Index]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $08.b,X		; 34 08 ; Test bits $08.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tsb $A8.b		; 04 A8 ; Test and set bits $A8.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $A2.b		; 04 A2 ; Test and set bits $A2.b [Reads: Accumulator] [Flags: Z]
	ora #$06.b		; 09 06 ; Logical OR #$06.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $09.b,Y		; B6 09 ; Load X register $09.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	sbc $010490.l,X		; FF 90 04 01 ; Subtract with carry (long,X) $010490.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($04.b)		; 92 04 ; Store accumulator (indirect) ($04.b) [Reads: Accumulator, Direct Page]
	ora ($1C.b,X)		; 01 1C ; Logical OR ($1C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora [$04.b]		; 07 04 ; OR accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $8C.b		; 04 8C ; Test and set bits $8C.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $050390.l,X		; FF 90 03 05 ; Subtract with carry (long,X) $050390.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora [$80.b]		; 07 80 ; OR accumulator with memory (long) [$80.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $079CFF.l,X		; FF FF 9C 07 ; Subtract with carry (long,X) $079CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $28.b,S		; 03 28 ; OR accumulator with stack relative $28.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $0E1CFF.l,X		; FF FF 1C 0E ; Subtract with carry (long,X) $0E1CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: ZNC]
	sbc $040AF8.l,X		; FF F8 0A 04 ; Subtract with carry (long,X) $040AF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $EE.b		; 05 EE ; Logical OR $EE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $1201.w		; 0E 01 12 ; Arithmetic shift left $1201.w [Flags: ZNC]
	ora ($03.b),Y		; 11 03 ; OR accumulator with memory ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $0411.w,X		; 1E 11 04 ; Arithmetic shift left $0411.w,X [Reads: X Index] [Flags: ZNC]
	asl $12.b,X		; 16 12 ; Arithmetic shift left $12.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($A0.b,X)		; 01 A0 ; Logical OR ($A0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($13.b)		; 92 13 ; Store accumulator (indirect) ($13.b) [Reads: Accumulator, Direct Page]
	ora ($9E.b,X)		; 01 9E ; Logical OR ($9E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,S),Y		; 13 01 ; OR accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsb $96.b		; 04 96 ; Test and set bits $96.b [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsb $9A.b		; 04 9A ; Test and set bits $9A.b [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $14.b		; 05 14 ; Logical OR $14.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	trb $B286.w		; 1C 86 B2 ; Test and reset bits $B286.w [Reads: Accumulator] [Flags: Z]
	trb $6A03.w		; 1C 03 6A ; Test and reset bits $6A03.w [Reads: Accumulator] [Flags: Z]
	ora $06.b,X		; 15 06 ; OR accumulator with memory $06.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
.INDEX 8
	sep #$15		; E2 15
	tsb $EE.b		; 04 EE ; Test and set bits $EE.b [Reads: Accumulator] [Flags: Z]
	ora $04.b,X		; 15 04 ; OR accumulator with memory $04.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $04AAFF.l,X		; FF FF AA 04 ; Subtract with carry (long,X) $04AAFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $98.b,S		; 03 98 ; OR accumulator with stack relative $98.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $AA.b		; 05 AA ; Logical OR $AA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF04.w		; 0D 04 FF ; Logical OR $FF04.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $01028C.l,X		; FF 8C 02 01 ; Subtract with carry (long,X) $01028C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0404.w		; 0C 04 04 ; Test and set bits $0404.w [Reads: Accumulator] [Flags: Z]
	asl $0404.w		; 0E 04 04 ; Arithmetic shift left $0404.w [Flags: ZNC]
	bit $07.b		; 24 07 ; Test bits $07.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $EC.b,S		; 03 EC ; OR accumulator with stack relative $EC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $05		; 70 05 ; Branch if overflow set to $70, $05 [Flow: branch]
	.db $80, $5C		; 80 5C ; Branch always to $80, $5C [Flow: branch]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora #$06.b		; 09 06 ; Logical OR #$06.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $D801.w		; 0E 01 D8 ; Arithmetic shift left $D801.w [Flags: ZNC]
	asl $5A01.w		; 0E 01 5A ; Arithmetic shift left $5A01.w [Flags: ZNC]
	ora $0FD801.l		; 0F 01 D8 0F ; OR accumulator with memory (long) $0FD801.l [Writes: Accumulator] [Flags: ZN]
	ora ($B4.b,X)		; 01 B4 ; Logical OR ($B4.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	stz $0416.w		; 9C 16 04 ; Store zero to $0416.w
	ldy #$16.b		; A0 16 ; Load #$16.b into Y register [Writes: Y Index] [Flags: ZN]
	ora ($A2.b,X)		; 01 A2 ; Logical OR ($A2.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $01.b,X		; 16 01 ; Arithmetic shift left $01.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	trb $9201.w		; 1C 01 92 ; Test and reset bits $9201.w [Reads: Accumulator] [Flags: Z]
	ora $D404.w,X		; 1D 04 D4 ; OR accumulator with memory $D404.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	mvn $01,$15		; 54 15 01 ; Move block negative $01,$15 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ora $01.b,X		; 15 01 ; OR accumulator with memory $01.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $0115.w,X		; DE 15 01 ; Decrement memory $0115.w,X [Reads: X Index] [Flags: ZN]
	eor ($16.b)		; 52 16 ; Exclusive OR accumulator with memory (indirect) ($16.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($66.b,X)		; 01 66 ; Logical OR ($66.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $01.b,X		; 16 01 ; Arithmetic shift left $01.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $70, $1D		; 70 1D ; Branch if overflow set to $70, $1D [Flow: branch]
	ora $DA.b		; 05 DA ; Logical OR $DA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $E004.w,X		; 1D 04 E0 ; OR accumulator with memory $E004.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $FF06.w,X		; 1D 06 FF ; OR accumulator with memory $FF06.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $010230.l,X		; FF 30 02 01 ; Subtract with carry (long,X) $010230.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $02.b,X		; 34 02 ; Test bits $02.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora $FF.b		; 05 FF ; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $050428.l,X		; FF 28 04 05 ; Subtract with carry (long,X) $050428.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $010B.w		; 0E 0B 01 ; Arithmetic shift left $010B.w [Flags: ZNC]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	ora ($16.b,X)		; 01 16 ; Logical OR ($16.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($16.b,X)		; 01 16 ; Logical OR ($16.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $FF04.w		; 0C 04 FF ; Test and set bits $FF04.w [Reads: Accumulator] [Flags: Z]
	sbc $060908.l,X		; FF 08 09 06 ; Subtract with carry (long,X) $060908.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $072AFF.l,X		; FF FF 2A 07 ; Subtract with carry (long,X) $072AFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	sbc $010308.l,X		; FF 08 03 01 ; Subtract with carry (long,X) $010308.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $26.b		; 04 26 ; Test and set bits $26.b [Reads: Accumulator] [Flags: Z]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $031EFF.l,X		; FF FF 1E 03 ; Subtract with carry (long,X) $031EFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $84.b,S		; 03 84 ; OR accumulator with stack relative $84.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $1A04.w		; 0C 04 1A ; Test and set bits $1A04.w [Reads: Accumulator] [Flags: Z]
	tsb $8E06.w		; 0C 06 8E ; Test and set bits $8E06.w [Reads: Accumulator] [Flags: Z]
	tsb $9601.w		; 0C 01 96 ; Test and set bits $9601.w [Reads: Accumulator] [Flags: Z]
	tsb $FF01.w		; 0C 01 FF ; Test and set bits $FF01.w [Reads: Accumulator] [Flags: Z]
	sbc $010214.l,X		; FF 14 02 01 ; Subtract with carry (long,X) $010214.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $0108.w,X		; 9E 08 01 ; Store zero to $0108.w,X [Reads: X Index]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sty $09.b		; 84 09 ; Store Y register to $09.b [Reads: Y Index]
	tsb $1C.b		; 04 1C ; Test and set bits $1C.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $B4.b		; 05 B4 ; Logical OR $B4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $B6.b		; 06 B6 ; Arithmetic shift left $B6.b [Reads: Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $820BB2.l,X		; FF B2 0B 82 ; Subtract with carry (long,X) $820BB2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($0D.b)		; 12 0D ; OR accumulator with memory (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF.b		; 05 FF ; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $840358.l,X		; FF 58 03 84 ; Subtract with carry (long,X) $840358.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $0A		; 50 0A ; Branch if overflow clear to $50, $0A [Flow: branch]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	trb $06.b		; 14 06 ; Test and reset bits $06.b [Reads: Accumulator] [Flags: Z]
	sty $1D.b,X		; 94 1D ; Store Y register $1D.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	.db $82, $FF, $FF		; 82 FF FF ; Branch always long to $82, $FF, $FF [Flow: branch]
	asl $0505.w,X		; 1E 05 05 ; Arithmetic shift left $0505.w,X [Reads: X Index] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $0505.w		; 9C 05 05 ; Store zero to $0505.w
	sbc $02A8FF.l,X		; FF FF A8 02 ; Subtract with carry (long,X) $02A8FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $82, $14, $0B		; 82 14 0B ; Branch always long to $82, $14, $0B [Flow: branch]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8603B0.l,X		; FF B0 03 86 ; Subtract with carry (long,X) $8603B0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $0404.w		; 8C 04 04 ; Store Y register to $0404.w [Reads: Y Index]
	sbc $0A30FF.l,X		; FF FF 30 0A ; Subtract with carry (long,X) $0A30FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $10.b		; 04 10 ; Test and set bits $10.b [Reads: Accumulator] [Flags: Z]
	tsb $5606.w		; 0C 06 56 ; Test and set bits $5606.w [Reads: Accumulator] [Flags: Z]
	ora $180C82.l		; 0F 82 0C 18 ; OR accumulator with memory (long) $180C82.l [Writes: Accumulator] [Flags: ZN]
	stx $DE.b		; 86 DE ; Store X register to $DE.b [Reads: X Index]
	trb $FF03.w		; 1C 03 FF ; Test and reset bits $FF03.w [Reads: Accumulator] [Flags: Z]
	sbc $860288.l,X		; FF 88 02 86 ; Subtract with carry (long,X) $860288.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $8404.w		; 0C 04 84 ; Test and set bits $8404.w [Reads: Accumulator] [Flags: Z]
	sbc $081EFF.l,X		; FF FF 1E 08 ; Subtract with carry (long,X) $081EFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $AC.b		; 02 AC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$06.b		; 09 06 ; Logical OR #$06.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $840A.w,X		; 1E 0A 84 ; Arithmetic shift left $840A.w,X [Reads: X Index] [Flags: ZNC]
	sbc $061AFF.l,X		; FF FF 1A 06 ; Subtract with carry (long,X) $061AFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $030696.l,X		; FF 96 06 03 ; Subtract with carry (long,X) $030696.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $07		; 10 07 ; Branch if plus to $10, $07 [Flow: branch]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	sbc $040C28.l,X		; FF 28 0C 04 ; Subtract with carry (long,X) $040C28.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0338FF.l,X		; FF FF 38 03 ; Subtract with carry (long,X) $0338FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $6A.b		; 04 6A ; Test and set bits $6A.b [Reads: Accumulator] [Flags: Z]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $70, $05		; 70 05 ; Branch if overflow set to $70, $05 [Flow: branch]
	ora $F2.b,S		; 03 F2 ; OR accumulator with stack relative $F2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	ora $38.b,S		; 03 38 ; OR accumulator with stack relative $38.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $BC06.w,X		; 1D 06 BC ; OR accumulator with memory $BC06.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $5E05.w,X		; 1D 05 5E ; OR accumulator with memory $5E05.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	cpx #$10.b		; E0 10 ; Compare #$10.b with X register [Reads: X Index] [Flags: ZNC]
	.db $80, $62		; 80 62 ; Branch always to $80, $62 [Flow: branch]
	ora ($01.b),Y		; 11 01 ; OR accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $04ACFF.l,X		; FF FF AC 04 ; Subtract with carry (long,X) $04ACFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($B4.b,X)		; 01 B4 ; Logical OR ($B4.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$03.b		; 09 03 ; Logical OR #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $A401.w		; 0D 01 A4 ; Logical OR $A401.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $1E01.w		; 0D 01 1E ; Logical OR $1E01.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $A801.w		; 0E 01 A8 ; Arithmetic shift left $A801.w [Flags: ZNC]
	asl $FF01.w		; 0E 01 FF ; Arithmetic shift left $FF01.w [Flags: ZNC]
	sbc $040A60.l,X		; FF 60 0A 04 ; Subtract with carry (long,X) $040A60.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $E6.b		; 04 E6 ; Test and set bits $E6.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $60.b		; 04 60 ; Test and set bits $60.b [Reads: Accumulator] [Flags: Z]
	ora $2004.w		; 0D 04 20 ; Logical OR $2004.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0401.w,Y		; 19 01 04 ; OR accumulator with memory $0401.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsb $EE.b		; 04 EE ; Test and set bits $EE.b [Reads: Accumulator] [Flags: Z]
	ora [$06.b],Y		; 17 06 ; OR accumulator with memory (long indexed) [$06.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ora $7406.w,Y		; 19 06 74 ; OR accumulator with memory $7406.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $EE06.w,Y		; 19 06 EE ; OR accumulator with memory $EE06.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: ZNC]
	sbc $840868.l,X		; FF 68 08 84 ; Subtract with carry (long,X) $840868.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora ($05.b,S),Y		; 13 05 ; OR accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	trb $05.b		; 14 05 ; Test and reset bits $05.b [Reads: Accumulator] [Flags: Z]
	sbc $06AEFF.l,X		; FF FF AE 06 ; Subtract with carry (long,X) $06AEFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $B4.b		; 05 B4 ; Logical OR $B4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $05.b		; 06 05 ; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: ZNC]
	and ($08.b)		; 32 08 ; AND accumulator with memory (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $32.b		; 06 32 ; Arithmetic shift left $32.b [Reads: Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $1C.b		; 06 1C ; Arithmetic shift left $1C.b [Reads: Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: ZNC]
	sbc $01040C.l,X		; FF 0C 04 01 ; Subtract with carry (long,X) $01040C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($07.b)		; 92 07 ; Store accumulator (indirect) ($07.b) [Reads: Accumulator, Direct Page]
	ora ($98.b,X)		; 01 98 ; Logical OR ($98.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$04.b]		; 07 04 ; OR accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $0407.w,X		; 9E 07 04 ; Store zero to $0407.w,X [Reads: X Index]
	ldy $07.b		; A4 07 ; Load $07.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $030716.l,X		; FF 16 07 03 ; Subtract with carry (long,X) $030716.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $0A.b,X		; 34 0A ; Test bits $0A.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora $A4.b		; 05 A4 ; Logical OR $A4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($98.b,X)		; 01 98 ; Logical OR ($98.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($1A.b,X)		; 01 1A ; Logical OR ($1A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $1801.w		; 0C 01 18 ; Test and set bits $1801.w [Reads: Accumulator] [Flags: Z]
	ora $8E01.w		; 0D 01 8E ; Logical OR $8E01.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $FF04.w		; 0D 04 FF ; Logical OR $FF04.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $0604B2.l,X		; FF B2 04 06 ; Subtract with carry (long,X) $0604B2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $05		; 30 05 ; Branch if minus to $30, $05 [Flow: branch]
	asl $AE.b		; 06 AE ; Arithmetic shift left $AE.b [Reads: Direct Page] [Flags: ZNC]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($88.b,X)		; 01 88 ; Logical OR ($88.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($B2.b,X)		; 01 B2 ; Logical OR ($B2.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $0584FF.l,X		; FF FF 84 05 ; Subtract with carry (long,X) $0584FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $B8.b		; 05 B8 ; Logical OR $B8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	ora $88.b		; 05 88 ; Logical OR $88.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $05.b		; 06 05 ; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora [$05.b]		; 07 05 ; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sty $0507.w		; 8C 07 05 ; Store Y register to $0507.w [Reads: Y Index]
	ldy #$07.b		; A0 07 ; Load #$07.b into Y register [Writes: Y Index] [Flags: ZN]
	ora ($B6.b,X)		; 01 B6 ; Logical OR ($B6.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $2E0108.l		; 22 08 01 2E ; Jump to subroutine long $2E0108.l [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($A6.b,X)		; 01 A6 ; Logical OR ($A6.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($B0.b,X)		; 01 B0 ; Logical OR ($B0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $09.b,X		; 34 09 ; Test bits $09.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($B6.b,X)		; 01 B6 ; Logical OR ($B6.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $0490FF.l,X		; FF FF 90 04 ; Subtract with carry (long,X) $0490FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $92.b		; 04 92 ; Test and set bits $92.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ldx $0105.w		; AE 05 01 ; Load $0105.w into X register [Writes: X Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $038AFF.l,X		; FF FF 8A 03 ; Subtract with carry (long,X) $038AFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $88.b		; 05 88 ; Logical OR $88.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$04.b]		; 07 04 ; OR accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $079CFF.l,X		; FF FF 9C 07 ; Subtract with carry (long,X) $079CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $A6.b		; 04 A6 ; Test and set bits $A6.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $09.b		; A6 09 ; Load $09.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($98.b,X)		; 01 98 ; Logical OR ($98.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $1A01.w		; 0C 01 1A ; Test and set bits $1A01.w [Reads: Accumulator] [Flags: Z]
	ora $FF01.w		; 0D 01 FF ; Logical OR $FF01.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $060E1C.l,X		; FF 1C 0E 06 ; Subtract with carry (long,X) $060E1C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $060E.w		; 20 0E 06 ; Jump to subroutine at $060E.w [Writes: Stack Pointer] [Flow: call]
	sbc $049AFF.l,X		; FF FF 9A 04 ; Subtract with carry (long,X) $049AFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $96.b		; 04 96 ; Test and set bits $96.b [Reads: Accumulator] [Flags: Z]
	tsb $5403.w		; 0C 03 54 ; Test and set bits $5403.w [Reads: Accumulator] [Flags: Z]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZNC]
	lsr $06.b,X		; 56 06 ; Logical shift right $06.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($F8.b,X)		; 01 F8 ; Logical OR ($F8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $FA.b		; 04 FA ; Test and set bits $FA.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $D6.b		; 04 D6 ; Test and set bits $D6.b [Reads: Accumulator] [Flags: Z]
	tsb $6401.w		; 0C 01 64 ; Test and set bits $6401.w [Reads: Accumulator] [Flags: Z]
	asl $6601.w		; 0E 01 66 ; Arithmetic shift left $6601.w [Flags: ZNC]
	ora $109201.l		; 0F 01 92 10 ; OR accumulator with memory (long) $109201.l [Writes: Accumulator] [Flags: ZN]
	ora ($A0.b,X)		; 01 A0 ; Logical OR ($A0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	trb $11.b		; 14 11 ; Test and reset bits $11.b [Reads: Accumulator] [Flags: Z]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0412.w,X		; 1E 12 04 ; Arithmetic shift left $0412.w,X [Reads: X Index] [Flags: ZNC]
	stx $12.b,Y		; 96 12 ; Store X register $12.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ora ($9C.b,X)		; 01 9C ; Logical OR ($9C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $1404.w,Y		; 19 04 14 ; OR accumulator with memory $1404.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsb $98.b		; 04 98 ; Test and set bits $98.b [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsb $1E.b		; 04 1E ; Test and set bits $1E.b [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tsb $34.b		; 04 34 ; Test and set bits $34.b [Reads: Accumulator] [Flags: Z]
	trb $A605.w		; 1C 05 A6 ; Test and reset bits $A605.w [Reads: Accumulator] [Flags: Z]
	trb $B605.w		; 1C 05 B6 ; Test and reset bits $B605.w [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	stx $EC.b		; 86 EC ; Store X register to $EC.b [Reads: X Index]
	trb $01.b		; 14 01 ; Test and reset bits $01.b [Reads: Accumulator] [Flags: Z]
.INDEX 8
	sep #$15		; E2 15
	ora ($4A.b,X)		; 01 4A ; Logical OR ($4A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsb $48.b		; 04 48 ; Test and set bits $48.b [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $06041A.l,X		; FF 1A 04 06 ; Subtract with carry (long,X) $06041A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $08.b,X		; B4 08 ; Load Y register $08.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ora ($32.b,X)		; 01 32 ; Logical OR ($32.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($32.b,X)		; 01 32 ; Logical OR ($32.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $2601.w		; 0C 01 26 ; Test and set bits $2601.w [Reads: Accumulator] [Flags: Z]
	tsb $2C01.w		; 0C 01 2C ; Test and set bits $2C01.w [Reads: Accumulator] [Flags: Z]
	tsb $3001.w		; 0C 01 30 ; Test and set bits $3001.w [Reads: Accumulator] [Flags: Z]
	tsb $8E01.w		; 0C 01 8E ; Test and set bits $8E01.w [Reads: Accumulator] [Flags: Z]
	tsb $B405.w		; 0C 05 B4 ; Test and set bits $B405.w [Reads: Accumulator] [Flags: Z]
	tsb $FF01.w		; 0C 01 FF ; Test and set bits $FF01.w [Reads: Accumulator] [Flags: Z]
	sbc $860E2E.l,X		; FF 2E 0E 86 ; Subtract with carry (long,X) $860E2E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	trb $0E04.w		; 1C 04 0E ; Test and reset bits $0E04.w [Reads: Accumulator] [Flags: Z]
	asl $1201.w,X		; 1E 01 12 ; Arithmetic shift left $1201.w,X [Reads: X Index] [Flags: ZNC]
	asl $DA01.w,X		; 1E 01 DA ; Arithmetic shift left $DA01.w,X [Reads: X Index] [Flags: ZNC]
	ora $6001.w,X		; 1D 01 60 ; OR accumulator with memory $6001.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $7201.w,X		; 1E 01 72 ; Arithmetic shift left $7201.w,X [Reads: X Index] [Flags: ZNC]
	asl $FF03.w,X		; 1E 03 FF ; Arithmetic shift left $FF03.w,X [Reads: X Index] [Flags: ZNC]
	sbc $040428.l,X		; FF 28 04 04 ; Subtract with carry (long,X) $040428.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($0B.b)		; 92 0B ; Store accumulator (indirect) ($0B.b) [Reads: Accumulator, Direct Page]
	ora ($92.b,X)		; 01 92 ; Logical OR ($92.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $9601.w		; 0C 01 96 ; Test and set bits $9601.w [Reads: Accumulator] [Flags: Z]
	tsb $9201.w		; 0C 01 92 ; Test and set bits $9201.w [Reads: Accumulator] [Flags: Z]
	ora $1001.w		; 0D 01 10 ; Logical OR $1001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $FF01.w		; 0E 01 FF ; Arithmetic shift left $FF01.w [Flags: ZNC]
	sbc $060908.l,X		; FF 08 09 06 ; Subtract with carry (long,X) $060908.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0420FF.l,X		; FF FF 20 04 ; Subtract with carry (long,X) $0420FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($28.b,X)		; 01 28 ; Logical OR ($28.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	jsr $0309.w		; 20 09 03 ; Jump to subroutine at $0309.w [Writes: Stack Pointer] [Flow: call]
	lda ($0A.b)		; B2 0A ; Load accumulator (indirect) ($0A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	sbc $010408.l,X		; FF 08 04 01 ; Subtract with carry (long,X) $010408.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0104.w		; 0C 04 01 ; Test and set bits $0104.w [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora [$04.b]		; 07 04 ; OR accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $09.b		; 26 09 ; Rotate left $09.b [Reads: Direct Page] [Flags: ZNC]
	ora ($A4.b,X)		; 01 A4 ; Logical OR ($A4.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $09.b		; A6 09 ; Load $09.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $040320.l,X		; FF 20 03 04 ; Subtract with carry (long,X) $040320.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	sty $0E.b		; 84 0E ; Store Y register to $0E.b [Reads: Y Index]
	tsb $1201.w		; 0C 01 12 ; Test and set bits $1201.w [Reads: Accumulator] [Flags: Z]
	tsb $9601.w		; 0C 01 96 ; Test and set bits $9601.w [Reads: Accumulator] [Flags: Z]
	tsb $9A01.w		; 0C 01 9A ; Test and set bits $9A01.w [Reads: Accumulator] [Flags: Z]
	tsb $FF01.w		; 0C 01 FF ; Test and set bits $FF01.w [Reads: Accumulator] [Flags: Z]
	sbc $010226.l,X		; FF 26 02 01 ; Subtract with carry (long,X) $010226.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	ora ($9C.b,X)		; 01 9C ; Logical OR ($9C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($09.b)		; 12 09 ; OR accumulator with memory (indirect) ($09.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($1E.b,X)		; 01 1E ; Logical OR ($1E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sty $09.b		; 84 09 ; Store Y register to $09.b [Reads: Y Index]
	tsb $B4.b		; 04 B4 ; Test and set bits $B4.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $36.b		; 04 36 ; Test and set bits $36.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $B8.b		; 04 B8 ; Test and set bits $B8.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	sbc $050B24.l,X		; FF 24 0B 05 ; Subtract with carry (long,X) $050B24.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $050B.w		; 8C 0B 05 ; Store Y register to $050B.w [Reads: Y Index]
	stx $0B.b,Y		; 96 0B ; Store X register $0B.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ora $12.b		; 05 12 ; Logical OR $12.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF05.w		; 0D 05 FF ; Logical OR $FF05.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $061406.l,X		; FF 06 14 06 ; Subtract with carry (long,X) $061406.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stx $14.b		; 86 14 ; Store X register to $14.b [Reads: X Index]
	asl $FF.b		; [PATTERN: Memory clearing operation] 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: ZNC]
	sbc $04051C.l,X		; FF 1C 05 04 ; Subtract with carry (long,X) $04051C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $0405.w,X		; 1E 05 04 ; Arithmetic shift left $0405.w,X [Reads: X Index] [Flags: ZNC]
	stz $0405.w		; 9C 05 04 ; Store zero to $0405.w
	stz $0405.w,X		; 9E 05 04 ; Store zero to $0405.w,X [Reads: X Index]
	rol $06.b		; 26 06 ; Rotate left $06.b [Reads: Direct Page] [Flags: ZNC]
	ora $8C.b,S		; 03 8C ; OR accumulator with stack relative $8C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($90.b,X)		; 01 90 ; Logical OR ($90.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $0C01.w		; 0C 01 0C ; Test and set bits $0C01.w [Reads: Accumulator] [Flags: Z]
	ora $FF01.w		; 0D 01 FF ; Logical OR $FF01.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $8603B0.l,X		; FF B0 03 86 ; Subtract with carry (long,X) $8603B0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0104.w		; 0C 04 01 ; Test and set bits $0104.w [Reads: Accumulator] [Flags: Z]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	ora ($14.b,X)		; 01 14 ; Logical OR ($14.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	stz $040D.w,X		; 9E 0D 04 ; Store zero to $040D.w,X [Reads: X Index]
	sbc $0298FF.l,X		; FF FF 98 02 ; Subtract with carry (long,X) $0298FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $10.b		; 06 10 ; Arithmetic shift left $10.b [Reads: Direct Page] [Flags: ZNC]
	tsb $FF04.w		; 0C 04 FF ; Test and set bits $FF04.w [Reads: Accumulator] [Flags: Z]
	sbc $860288.l,X		; FF 88 02 86 ; Subtract with carry (long,X) $860288.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora $06.b,S		; 03 06 ; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $8404.w		; 0C 04 84 ; Test and set bits $8404.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0526FF.l,X		; FF FF 26 05 ; Subtract with carry (long,X) $0526FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $2A.b		; 05 2A ; Logical OR $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $0505.w		; 2E 05 05 ; Rotate left $0505.w [Flags: ZNC]
	ldy $0609.w		; AC 09 06 ; Load $0609.w into Y register [Writes: Y Index] [Flags: ZN]
	sbc $0420FF.l,X		; FF FF 20 04 ; Subtract with carry (long,X) $0420FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $1A.b		; 06 1A ; Arithmetic shift left $1A.b [Reads: Direct Page] [Flags: ZNC]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: ZNC]
	stx $06.b,Y		; 96 06 ; Store X register $06.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	sbc $0502A8.l,X		; FF A8 02 05 ; Subtract with carry (long,X) $0502A8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $03.b,X		; 16 03 ; Arithmetic shift left $03.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $98.b		; 06 98 ; Arithmetic shift left $98.b [Reads: Direct Page] [Flags: ZNC]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	trb $07.b		; 14 07 ; Test and reset bits $07.b [Reads: Accumulator] [Flags: Z]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	sbc $0402AE.l,X		; FF AE 02 04 ; Subtract with carry (long,X) $0402AE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	tsb $FF04.w		; 0C 04 FF ; Test and set bits $FF04.w [Reads: Accumulator] [Flags: Z]
	sbc $120DCC.l,X		; FF CC 0D 12 ; Subtract with carry (long,X) $120DCC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $860DB4.l,X		; FF B4 0D 86 ; Subtract with carry (long,X) $860DB4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $AD.b		; 04 AD ; Test and set bits $AD.b [Reads: Accumulator] [Flags: Z]
	stz $290B.w		; 9C 0B 29 ; Store zero to $290B.w
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $0B9C.w		; 8D 9C 0B ; Store accumulator to $0B9C.w [Reads: Accumulator]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $B0.b		; 00 B0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $AA0A.w,X		; 7D 0A AA ; Add $AA0A.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $1BC2F9.l,X		; BF F9 C2 1B ; Load long $1BC2F9.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A0.b		; 02 A0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C8FF.w,X		; FD FF C8 ; Subtract with carry $C8FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $2963F0.l,X		; FF F0 63 29 ; Subtract with carry (long,X) $2963F0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $04C57F.l,X		; FF 7F C5 04 ; Subtract with carry (long,X) $04C57F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $EF		; D0 EF ; Branch if not equal to $D0, $EF [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $B0.b		; 00 B0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0C.b,S		; 03 0C ; OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stz $290B.w		; 9C 0B 29 ; Store zero to $290B.w
	sbc $80C900.l,X		; FF 00 C9 80 ; Subtract with carry (long,X) $80C900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0B9C.w		; AD 9C 0B ; Load $0B9C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$FF.b		; 09 FF ; Logical OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $680B.w		; 9C 0B 68 ; Store zero to $680B.w
	cmp #$84.b		; C9 84 ; Compare #$84.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$A6.b]		; 27 A6 ; AND accumulator with memory (long) [$A6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $7EF280.l,X		; BF 80 F2 7E ; Load long $7EF280.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $8AA5.w		; 1C A5 8A ; Test and reset bits $8AA5.w [Reads: Accumulator] [Flags: Z]
	cmp #$5B.b		; C9 5B ; Compare #$5B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $CCAF.w		; 0C AF CC ; Test and set bits $CCAF.w [Reads: Accumulator] [Flags: Z]
	sbc ($7E.b,S),Y		; F3 7E ; Subtract with carry (stack relative indirect indexed) ($7E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $D000.w		; 0D 00 D0 ; Logical OR $D000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $E2.b,X		; 15 E2 ; OR accumulator with memory $E2.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $1BA9.w		; 20 A9 1B ; Jump to subroutine at $1BA9.w [Writes: Stack Pointer] [Flow: call]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $1BC89C.l,X		; BF 9C C8 1B ; Load long $1BC89C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	jsr $C943.w		; 20 43 C9 ; Jump to subroutine at $C943.w [Writes: Stack Pointer] [Flow: call]
	ldx $04.b		; A6 04 ; Load $04.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $C943.w		; 20 43 C9 ; Jump to subroutine at $C943.w [Writes: Stack Pointer] [Flow: call]
	ldx $04.b		; A6 04 ; Load $04.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$0040.w		; 29 40 00 ; Logical AND #$0040.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B9C.w		; 8D 9C 0B ; Store accumulator to $0B9C.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	lda #$0DA4.w		; A9 A4 0D ; Load #$0DA4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1BC97C.l		; 22 7C C9 1B ; Jump to subroutine long $1BC97C.l [Writes: Stack Pointer] [Flow: call]
	lda #$0DA6.w		; A9 A6 0D ; Load #$0DA6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	lda #$0DA5.w		; A9 A5 0D ; Load #$0DA5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1BC97C.l		; 22 7C C9 1B ; Jump to subroutine long $1BC97C.l [Writes: Stack Pointer] [Flow: call]
	lda #$0DA7.w		; A9 A7 0D ; Load #$0DA7.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7E2002.l,X		; 9F 02 20 7E ; Store accumulator (long,X) $7E2002.l,X [Reads: Accumulator, X Index]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $C9.b,S		; 83 C9 ; Store accumulator (stack relative) $C9.b,S [Reads: Accumulator, Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $DA.b		; 00 DA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	jsr $CA69.w		; 20 69 CA ; Jump to subroutine at $CA69.w [Writes: Stack Pointer] [Flow: call]
	ldy $1000.w		; AC 00 10 ; Load $1000.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $1002.w,Y		; 99 02 10 ; Store accumulator to $1002.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$20.b		; 69 20 ; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $100A.w,Y		; 99 0A 10 ; Store accumulator to $100A.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $99.b,S		; 03 99 ; OR accumulator with stack relative $99.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $10.b		; 04 10 ; Test and set bits $10.b [Reads: Accumulator] [Flags: Z]
	sta $100C.w,Y		; 99 0C 10 ; Store accumulator to $100C.w,Y [Reads: Accumulator, Y Index]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $0F8000.l,X		; BF 00 80 0F ; Load long $0F8000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1006.w,Y		; 99 06 10 ; Store accumulator to $1006.w,Y [Reads: Accumulator, Y Index]
	lda $0F8002.l,X		; BF 02 80 0F ; Load long $0F8002.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1008.w,Y		; 99 08 10 ; Store accumulator to $1008.w,Y [Reads: Accumulator, Y Index]
	lda $0F8004.l,X		; BF 04 80 0F ; Load long $0F8004.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $100E.w,Y		; 99 0E 10 ; Store accumulator to $100E.w,Y [Reads: Accumulator, Y Index]
	lda $0F8006.l,X		; BF 06 80 0F ; Load long $0F8006.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1010.w,Y		; 99 10 10 ; Store accumulator to $1010.w,Y [Reads: Accumulator, Y Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $101299.l,X		; FF 99 12 10 ; Subtract with carry (long,X) $101299.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $29.b		; 02 29 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $20C900.l,X		; 3F 00 C9 20 ; AND accumulator with memory (long,X) $20C900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $A9.b		; 05 A9 ; Logical OR $A9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0800C9.l		; 0F C9 00 08 ; OR accumulator with memory (long) $0800C9.l [Writes: Accumulator] [Flags: ZN]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$FF.b		; 69 FF ; Add #$FF.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora [$85.b]		; 07 85 ; OR accumulator with memory (long) [$85.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $A5.b		; 02 A5 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $026500.l,X		; 1F 00 65 02 ; Logical OR long $026500.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$4A.b]		; 07 4A ; OR accumulator with memory (long) [$4A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ldy $1000.w		; AC 00 10 ; Load $1000.w into Y register [Writes: Y Index] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $1002.w,Y		; 99 02 10 ; Store accumulator to $1002.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$20.b		; 69 20 ; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $100A.w,Y		; 99 0A 10 ; Store accumulator to $100A.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $99.b,S		; 03 99 ; OR accumulator with stack relative $99.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $10.b		; 04 10 ; Test and set bits $10.b [Reads: Accumulator] [Flags: Z]
	sta $100C.w,Y		; 99 0C 10 ; Store accumulator to $100C.w,Y [Reads: Accumulator, Y Index]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $0F8000.l,X		; BF 00 80 0F ; Load long $0F8000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1006.w,Y		; 99 06 10 ; Store accumulator to $1006.w,Y [Reads: Accumulator, Y Index]
	lda $0F8002.l,X		; BF 02 80 0F ; Load long $0F8002.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1008.w,Y		; 99 08 10 ; Store accumulator to $1008.w,Y [Reads: Accumulator, Y Index]
	lda $0F8004.l,X		; BF 04 80 0F ; Load long $0F8004.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $100E.w,Y		; 99 0E 10 ; Store accumulator to $100E.w,Y [Reads: Accumulator, Y Index]
	lda $0F8006.l,X		; BF 06 80 0F ; Load long $0F8006.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1010.w,Y		; 99 10 10 ; Store accumulator to $1010.w,Y [Reads: Accumulator, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $02.b		; 64 02 ; Store zero to $02.b
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $9000.w		; 20 00 90 ; Jump to subroutine at $9000.w [Writes: Stack Pointer] [Flow: call]
	ora $A9.b		; 05 A9 ; Logical OR $A9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0800C9.l		; 0F C9 00 08 ; OR accumulator with memory (long) $0800C9.l [Writes: Accumulator] [Flags: ZN]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$FF.b		; 69 FF ; Add #$FF.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora [$85.b]		; 07 85 ; OR accumulator with memory (long) [$85.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $A5.b		; 02 A5 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $026500.l,X		; 1F 00 65 02 ; Logical OR long $026500.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$4A.b]		; 07 4A ; OR accumulator with memory (long) [$4A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$0212.w		; A9 12 02 ; Load #$0212.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$0720.w		; A2 20 07 ; Load #$0720.w into X register [Writes: X Index] [Flags: ZN]
	sta $7E2000.l,X		; 9F 00 20 7E ; Store accumulator (long,X) $7E2000.l,X [Reads: Accumulator, X Index]
	jsl $0EDD40.l		; 22 40 DD 0E ; Jump to subroutine long $0EDD40.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BC980.l		; 22 80 C9 1B ; Jump to subroutine long $1BC980.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $A6CA.w,X		; DE CA A6 ; Decrement memory $A6CA.w,X [Reads: X Index] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	pei ($CC.b)		; D4 CC ; Push effective indirect address ($CC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	dec $CFD9.w		; CE D9 CF ; Decrement $CFD9.w [Flags: ZN]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
	sta $0FC1.w		; 8D C1 0F ; Store accumulator to $0FC1.w [Reads: Accumulator]
	sta $0710.w		; 8D 10 07 ; Store accumulator to $0710.w [Reads: Accumulator]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsr ($CABA.w,X)		; FC BA CA ; Jump to subroutine indirect indexed ($CABA.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $CA.b		; E5 CA ; Subtract $CA.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	wai		; CB ; Wait for interrupt
	eor [$CB.b]		; 47 CB ; Exclusive OR accumulator with memory (long) [$CB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($91CB.w)		; 6C CB 91 ; Jump indirect to ($91CB.w) [Flow: jump]
	wai		; CB ; Wait for interrupt
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp ($CAD4.w,X)		; 7C D4 CA ; Jump indirect indexed to ($CAD4.w,X) [Reads: X Index] [Flow: jump]
	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $3D		; D0 3D ; Branch if not equal to $D0, $3D [Flow: branch]
	jsr $D00E.w		; 20 0E D0 ; Jump to subroutine at $D00E.w [Writes: Stack Pointer] [Flow: call]
	lda $7EF2DE.l		; AF DE F2 7E ; Load long $7EF2DE.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF2DE.l		; 8F DE F2 7E ; Store accumulator (long) $7EF2DE.l [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$01E6.w		; A2 E6 01 ; Load #$01E6.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E31.w		; A9 31 0E ; Load #$0E31.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1BC97C.l		; 22 7C C9 1B ; Jump to subroutine long $1BC97C.l [Writes: Stack Pointer] [Flow: call]
	ldx #$02EA.w		; A2 EA 02 ; Load #$02EA.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E30.w		; A9 30 0E ; Load #$0E30.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$026A.w		; A2 6A 02 ; Load #$026A.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E26.w		; A9 26 0E ; Load #$0E26.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$02EA.w		; A2 EA 02 ; Load #$02EA.w into X register [Writes: X Index] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1012.w,Y		; 99 12 10 ; Store accumulator to $1012.w,Y [Reads: Accumulator, Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $F7		; D0 F7 ; Branch if not equal to $D0, $F7 [Flow: branch]
	jsr $D00E.w		; 20 0E D0 ; Jump to subroutine at $D00E.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$026A.w		; A2 6A 02 ; Load #$026A.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E28.w		; A9 28 0E ; Load #$0E28.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1BC97C.l		; 22 7C C9 1B ; Jump to subroutine long $1BC97C.l [Writes: Stack Pointer] [Flow: call]
	lda #$0E29.w		; A9 29 0E ; Load #$0E29.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $D1		; 80 D1 ; Branch always to $80, $D1 [Flow: branch]
	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$D020.w		; C9 20 D0 ; Compare #$D020.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	jsr $D00E.w		; 20 0E D0 ; Jump to subroutine at $D00E.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$026A.w		; A2 6A 02 ; Load #$026A.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E2A.w		; A9 2A 0E ; Load #$0E2A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1BC97C.l		; 22 7C C9 1B ; Jump to subroutine long $1BC97C.l [Writes: Stack Pointer] [Flow: call]
	ldx #$02EA.w		; A2 EA 02 ; Load #$02EA.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E2B.w		; A9 2B 0E ; Load #$0E2B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$036A.w		; A2 6A 03 ; Load #$036A.w into X register [Writes: X Index] [Flags: ZN]
	.db $80, $AF		; 80 AF ; Branch always to $80, $AF [Flow: branch]
	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$D020.w		; C9 20 D0 ; Compare #$D020.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldx $20.b,Y		; B6 20 ; Load X register $20.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	asl $C2D0.w		; 0E D0 C2 ; Arithmetic shift left $C2D0.w [Flags: ZNC]
	.db $30, $A2		; 30 A2 ; Branch if minus to $30, $A2 [Flow: branch]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $220E.w		; 2D 0E 22 ; Logical AND $220E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp ($1BC9.w,X)		; 7C C9 1B ; Jump indirect indexed to ($1BC9.w,X) [Reads: X Index] [Flow: jump]
	ldx #$02EA.w		; A2 EA 02 ; Load #$02EA.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E2E.w		; A9 2E 0E ; Load #$0E2E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$036A.w		; A2 6A 03 ; Load #$036A.w into X register [Writes: X Index] [Flags: ZN]
	.db $80, $8A		; 80 8A ; Branch always to $80, $8A [Flow: branch]
	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$D020.w		; C9 20 D0 ; Compare #$D020.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sta ($4C.b),Y		; 91 4C ; Store accumulator ($4C.b),Y [Reads: Accumulator, Direct Page, Y Index]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cmp $EECBAD.l		; CF AD CB EE ; Compare accumulator (long) $EECBAD.l [Reads: Accumulator] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	and [$CC.b]		; 27 CC ; AND accumulator with memory (long) [$CC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $8CCC.w		; 4D CC 8C ; Exclusive OR $8CCC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpy $B0A5.w		; CC A5 B0 ; Compare $B0A5.w with Y register [Reads: Y Index] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp ($CB9C.w,X)		; 7C 9C CB ; Jump indirect indexed to ($CB9C.w,X) [Reads: X Index] [Flow: jump]
	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$D004.w		; C9 04 D0 ; Compare #$D004.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	stz $C8.b		; 64 C8 ; Store zero to $C8.b
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0812.w		; A2 12 08 ; Load #$0812.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E06.w		; A9 06 0E ; Load #$0E06.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1BC97C.l		; 22 7C C9 1B ; Jump to subroutine long $1BC97C.l [Writes: Stack Pointer] [Flow: call]
	ldx #$0814.w		; A2 14 08 ; Load #$0814.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E06.w		; A9 06 0E ; Load #$0E06.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1012.w,Y		; 99 12 10 ; Store accumulator to $1012.w,Y [Reads: Accumulator, Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7EF280.l,X		; BF 80 F2 7E ; Load long $7EF280.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF280.l,X		; 9F 80 F2 7E ; Store accumulator (long,X) $7EF280.l,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	lda #$16.b		; A9 16 ; Load #$16.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $F7		; D0 F7 ; Branch if not equal to $D0, $F7 [Flow: branch]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	stz $C8.b		; 64 C8 ; Store zero to $C8.b
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0790.w		; A2 90 07 ; Load #$0790.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E07.w		; A9 07 0E ; Load #$0E07.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1BC97C.l		; 22 7C C9 1B ; Jump to subroutine long $1BC97C.l [Writes: Stack Pointer] [Flow: call]
	ldx #$0792.w		; A2 92 07 ; Load #$0792.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E08.w		; A9 08 0E ; Load #$0E08.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1012.w,Y		; 99 12 10 ; Store accumulator to $1012.w,Y [Reads: Accumulator, Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	lda #$16.b		; A9 16 ; Load #$16.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $BE		; D0 BE ; Branch if not equal to $D0, $BE [Flow: branch]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	stz $C8.b		; 64 C8 ; Store zero to $C8.b
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0710.w		; A2 10 07 ; Load #$0710.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E07.w		; A9 07 0E ; Load #$0E07.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1BC97C.l		; 22 7C C9 1B ; Jump to subroutine long $1BC97C.l [Writes: Stack Pointer] [Flow: call]
	ldx #$0712.w		; A2 12 07 ; Load #$0712.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E08.w		; A9 08 0E ; Load #$0E08.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $C5		; 80 C5 ; Branch always to $80, $C5 [Flow: branch]
	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$D00C.w		; C9 0C D0 ; Compare #$D00C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	stz $C8.b		; 64 C8 ; Store zero to $C8.b
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0590.w		; A2 90 05 ; Load #$0590.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E11.w		; A9 11 0E ; Load #$0E11.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1BC97C.l		; 22 7C C9 1B ; Jump to subroutine long $1BC97C.l [Writes: Stack Pointer] [Flow: call]
	ldx #$0596.w		; A2 96 05 ; Load #$0596.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E12.w		; A9 12 0E ; Load #$0E12.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0610.w		; A2 10 06 ; Load #$0610.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E0D.w		; A9 0D 0E ; Load #$0E0D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0692.w		; A2 92 06 ; Load #$0692.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E0B.w		; A9 0B 0E ; Load #$0E0B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jmp $CC12.w		; 4C 12 CC ; Jump to $CC12.w [Flow: jump]
	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$D00C.w		; C9 0C D0 ; Compare #$D00C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sta ($E6.b)		; 92 E6 ; Store accumulator (indirect) ($E6.b) [Reads: Accumulator, Direct Page]
	.db $B0, $64		; B0 64 ; Branch if carry set to $B0, $64 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0590.w		; A2 90 05 ; Load #$0590.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E13.w		; A9 13 0E ; Load #$0E13.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1BC97C.l		; 22 7C C9 1B ; Jump to subroutine long $1BC97C.l [Writes: Stack Pointer] [Flow: call]
	ldx #$0596.w		; A2 96 05 ; Load #$0596.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E14.w		; A9 14 0E ; Load #$0E14.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0610.w		; A2 10 06 ; Load #$0610.w into X register [Writes: X Index] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0692.w		; A2 92 06 ; Load #$0692.w into X register [Writes: X Index] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $CC12.w		; 20 12 CC ; Jump to subroutine at $CC12.w [Writes: Stack Pointer] [Flow: call]
	jmp $CF40.w		; 4C 40 CF ; Jump to $CF40.w [Flow: jump]
	trb $CD.b		; 14 CD ; Test and reset bits $CD.b [Reads: Accumulator] [Flags: Z]
	eor ($CD.b,X)		; 41 CD ; Exclusive OR accumulator with memory ($CD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CD.b,X)		; 41 CD ; Exclusive OR accumulator with memory ($CD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda #$D7CD.w		; A9 CD D7 ; Load #$D7CD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $CE05.w		; CD 05 CE ; Compare $CE05.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$9002.w		; C9 02 90 ; Compare #$9002.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $20C2.w,Y		; 19 C2 20 ; OR accumulator with memory $20C2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $01C961.l,X		; BF 61 C9 01 ; Load long $01C961.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $011A.w		; 8D 1A 01 ; Store accumulator to $011A.w [Reads: Accumulator]
	lda $01C965.l,X		; BF 65 C9 01 ; Load long $01C965.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $011C.w		; 8D 1C 01 ; Store accumulator to $011C.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp ($CCC8.w,X)		; 7C C8 CC ; Jump indirect indexed to ($CCC8.w,X) [Reads: X Index] [Flow: jump]
	sbc $FBF7F7.l,X		; FF F7 F7 FB ; Subtract with carry (long,X) $FBF7F7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $EEEE.w		; EE EE EE ; Increment $EEEE.w [Flags: ZN]
	inc $EEEE.w		; EE EE EE ; Increment $EEEE.w [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $E6		; 80 E6 ; Branch always to $80, $E6 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $24		; 90 24 ; Branch if carry clear to $90, $24 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$20.b		; E9 20 ; Subtract #$20.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cmp #$CF.b		; C9 CF ; Compare #$CF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	stz $C8.b		; 64 C8 ; Store zero to $C8.b
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and #$F8.b		; 29 F8 ; Logical AND #$F8.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $98C1.w,Y		; B9 C1 98 ; Load $98C1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $1D.b		; 64 1D ; Store zero to $1D.b
	and $1BCCFA.l,X		; 3F FA CC 1B ; AND accumulator with memory (long,X) $1BCCFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	inc $1D.b		; E6 1D ; Increment $1D.b [Reads: Direct Page] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	ldy #$8C07.w		; A0 07 8C ; Load #$8C07.w into Y register [Writes: Y Index] [Flags: ZN]
	and $C901.w		; 2D 01 C9 ; Logical AND $C901.w with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $D0, $54		; D0 54 ; Branch if not equal to $D0, $54 [Flow: branch]
	jsr $D00E.w		; 20 0E D0 ; Jump to subroutine at $D00E.w [Writes: Stack Pointer] [Flow: call]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7EF280.l,X		; BF 80 F2 7E ; Load long $7EF280.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF280.l,X		; 9F 80 F2 7E ; Store accumulator (long,X) $7EF280.l,X [Reads: Accumulator, X Index]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0622.w		; A2 22 06 ; Load #$0622.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E48.w		; A9 48 0E ; Load #$0E48.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1BC97C.l		; 22 7C C9 1B ; Jump to subroutine long $1BC97C.l [Writes: Stack Pointer] [Flow: call]
	ldx #$0624.w		; A2 24 06 ; Load #$0624.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E49.w		; A9 49 0E ; Load #$0E49.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$06A2.w		; A2 A2 06 ; Load #$06A2.w into X register [Writes: X Index] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0722.w		; A2 22 07 ; Load #$0722.w into X register [Writes: X Index] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1012.w,Y		; 99 12 10 ; Store accumulator to $1012.w,Y [Reads: Accumulator, Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $F7		; D0 F7 ; Branch if not equal to $D0, $F7 [Flow: branch]
	jsr $D00E.w		; 20 0E D0 ; Jump to subroutine at $D00E.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$05A2.w		; A2 A2 05 ; Load #$05A2.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E54.w		; A9 54 0E ; Load #$0E54.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1BC97C.l		; 22 7C C9 1B ; Jump to subroutine long $1BC97C.l [Writes: Stack Pointer] [Flow: call]
	ldx #$05A4.w		; A2 A4 05 ; Load #$05A4.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E55.w		; A9 55 0E ; Load #$0E55.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0622.w		; A2 22 06 ; Load #$0622.w into X register [Writes: X Index] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $9E		; 80 9E ; Branch always to $80, $9E [Flow: branch]
	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$D050.w		; C9 50 D0 ; Compare #$D050.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$0E20.w		; C9 20 0E ; Compare #$0E20.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $C2		; D0 C2 ; Branch if not equal to $D0, $C2 [Flow: branch]
	.db $30, $A2		; 30 A2 ; Branch if minus to $30, $A2 [Flow: branch]
	jsl $64A905.l		; 22 05 A9 64 ; Jump to subroutine long $64A905.l [Writes: Stack Pointer] [Flow: call]
	asl $7C22.w		; 0E 22 7C ; Arithmetic shift left $7C22.w [Flags: ZNC]
	cmp #$A21B.w		; C9 1B A2 ; Compare #$A21B.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	bit $05.b		; 24 05 ; Test bits $05.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	lda #$0E65.w		; A9 65 0E ; Load #$0E65.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$05A2.w		; A2 A2 05 ; Load #$05A2.w into X register [Writes: X Index] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $C1		; 80 C1 ; Branch always to $80, $C1 [Flow: branch]
	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$D080.w		; C9 80 D0 ; Compare #$D080.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr $CF40.w		; 20 40 CF ; Jump to subroutine at $CF40.w [Writes: Stack Pointer] [Flow: call]
	lda #$8D05.w		; A9 05 8D ; Load #$8D05.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $6001.w		; 2D 01 60 ; Logical AND $6001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	dec $CE5E.w		; CE 5E CE ; Decrement $CE5E.w [Flags: ZN]
	.db $62, $CE, $66		; 62 CE 66 ; Push effective relative address $62, $CE, $66 [Writes: Stack Pointer]
	dec $CE8A.w		; CE 8A CE ; Decrement $CE8A.w [Flags: ZN]
	ldy $F8CE.w		; AC CE F8 ; Load $F8CE.w into Y register [Writes: Y Index] [Flags: ZN]
	dec $CF17.w		; CE 17 CF ; Decrement $CF17.w [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cmp $A520C2.l		; CF C2 20 A5 ; Compare accumulator (long) $A520C2.l [Reads: Accumulator] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $01C961.l,X		; BF 61 C9 01 ; Load long $01C961.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $011A.w		; 8D 1A 01 ; Store accumulator to $011A.w [Reads: Accumulator]
	lda $01C965.l,X		; BF 65 C9 01 ; Load long $01C965.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $011C.w		; 8D 1C 01 ; Store accumulator to $011C.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp ($CE16.w,X)		; 7C 16 CE ; Jump indirect indexed to ($CE16.w,X) [Reads: X Index] [Flow: jump]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7EF280.l,X		; BF 80 F2 7E ; Load long $7EF280.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF280.l,X		; 9F 80 F2 7E ; Store accumulator (long,X) $7EF280.l,X [Reads: Accumulator, X Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $01FEC1.l		; 22 C1 FE 01 ; Jump to subroutine long $01FEC1.l [Writes: Stack Pointer] [Flow: call]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	lda #$1C.b		; A9 1C ; Load #$1C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1002.w		; 8D 02 10 ; Store accumulator to $1002.w [Reads: Accumulator]
	stz $1003.w		; 9C 03 10 ; Store zero to $1003.w
.ACCU 16
	rep #$20		; C2 20
	lda #$FE47.w		; A9 47 FE ; Load #$FE47.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1004.w		; 8D 04 10 ; Store accumulator to $1004.w [Reads: Accumulator]
	lda #$01E3.w		; A9 E3 01 ; Load #$01E3.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1006.w		; 8D 06 10 ; Store accumulator to $1006.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1008.w		; 8D 08 10 ; Store accumulator to $1008.w [Reads: Accumulator]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	ldx #$A90E.w		; A2 0E A9 ; Load #$A90E.w into X register [Writes: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $7EC5B0.l,X		; 9F B0 C5 7E ; Store accumulator (long,X) $7EC5B0.l,X [Reads: Accumulator, X Index]
	sta $7EC3D0.l,X		; 9F D0 C3 7E ; Store accumulator (long,X) $7EC3D0.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F4		; 10 F4 ; Branch if plus to $10, $F4 [Flow: branch]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $CF60.w		; 20 60 CF ; Jump to subroutine at $CF60.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $99.b		; 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	lda $1002.w,X		; BD 02 10 ; Load $1002.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$0010.w		; 09 10 00 ; Logical OR #$0010.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	lda $1006.w,X		; BD 06 10 ; Load $1006.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$08AA.w		; C9 AA 08 ; Compare #$08AA.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$01E3.w		; A9 E3 01 ; Load #$01E3.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1006.w,X		; 9D 06 10 ; Store accumulator to $1006.w,X [Reads: Accumulator, X Index]
	lda $1008.w,X		; BD 08 10 ; Load $1008.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$08AA.w		; C9 AA 08 ; Compare #$08AA.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$01E3.w		; A9 E3 01 ; Load #$01E3.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1008.w,X		; 9D 08 10 ; Store accumulator to $1008.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx $00.b		; E4 00 ; Compare $00.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $D0, $CF		; D0 CF ; Branch if not equal to $D0, $CF [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	stz $C8.b		; 64 C8 ; Store zero to $C8.b
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $19		; B0 19 ; Branch if carry set to $B0, $19 [Flow: branch]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	jsl $00EDB1.l		; 22 B1 ED 00 ; Jump to subroutine long $00EDB1.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	dec $C8.b		; C6 C8 ; Decrement $C8.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $0B		; B0 0B ; Branch if carry set to $B0, $0B [Flow: branch]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	dec $C8.b		; C6 C8 ; Decrement $C8.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EB		; D0 EB ; Branch if not equal to $D0, $EB [Flow: branch]
	jsr $CF60.w		; 20 60 CF ; Jump to subroutine at $CF60.w [Writes: Stack Pointer] [Flow: call]
	stz $1D.b		; 64 1D ; Store zero to $1D.b
	lda #$82.b		; A9 82 ; Load #$82.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $99.b		; 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	rts		; [PATTERN: Memory clearing operation] 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	stz $04C6.w		; 9C C6 04 ; Store zero to $04C6.w
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $0710.w		; [PATTERN: Memory clearing operation] 9C 10 07 ; Store zero to $0710.w
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	stz $0FC1.w		; 9C C1 0F ; Store zero to $0FC1.w
	stz $011A.w		; 9C 1A 01 ; Store zero to $011A.w
	stz $011B.w		; 9C 1B 01 ; Store zero to $011B.w
	stz $011C.w		; [PATTERN: Memory clearing operation] 9C 1C 01 ; Store zero to $011C.w
	stz $011D.w		; 9C 1D 01 ; Store zero to $011D.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$099E.w		; A2 9E 09 ; Load #$099E.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E78.w		; A9 78 0E ; Load #$0E78.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1BC97C.l		; 22 7C C9 1B ; Jump to subroutine long $1BC97C.l [Writes: Stack Pointer] [Flow: call]
	ldx #$09A0.w		; A2 A0 09 ; Load #$09A0.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E79.w		; A9 79 0E ; Load #$0E79.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0A1E.w		; A2 1E 0A ; Load #$0A1E.w into X register [Writes: X Index] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0A9E.w		; A2 9E 0A ; Load #$0A9E.w into X register [Writes: X Index] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0B1E.w		; A2 1E 0B ; Load #$0B1E.w into X register [Writes: X Index] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1012.w,Y		; 99 12 10 ; Store accumulator to $1012.w,Y [Reads: Accumulator, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	sta $0710.w		; 8D 10 07 ; Store accumulator to $0710.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpx #$CF.b		; E0 CF ; Compare #$CF.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$CF.b		; E0 CF ; Compare #$CF.b with X register [Reads: X Index] [Flags: ZNC]
	sbc ($CF.b),Y		; F1 CF ; Subtract with carry ($CF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $62D0.w,X		; 1D D0 62 ; OR accumulator with memory $62D0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $93		; D0 93 ; Branch if not equal to $D0, $93 [Flow: branch]
	.db $D0, $DE		; D0 DE ; Branch if not equal to $D0, $DE [Flow: branch]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	cmp ($27.b),Y		; D1 27 ; Compare accumulator ($27.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($4D.b),Y		; D1 4D ; Compare accumulator ($4D.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($6D.b),Y		; D1 6D ; Compare accumulator ($6D.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($9F.b),Y		; D1 9F ; Compare accumulator ($9F.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($C0.b),Y		; D1 C0 ; Compare accumulator ($C0.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($A5.b),Y		; D1 A5 ; Compare accumulator ($A5.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp ($CFBF.w,X)		; 7C BF CF ; Jump indirect indexed to ($CFBF.w,X) [Reads: X Index] [Flow: jump]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7EF280.l,X		; BF 80 F2 7E ; Load long $7EF280.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF280.l,X		; 9F 80 F2 7E ; Store accumulator (long,X) $7EF280.l,X [Reads: Accumulator, X Index]
	jsl $0EDDFC.l		; 22 FC DD 0E ; Jump to subroutine long $0EDDFC.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0EDDFC.l		; 22 FC DD 0E ; Jump to subroutine long $0EDDFC.l [Writes: Stack Pointer] [Flow: call]
	lda $1D.b		; A5 1D ; Load $1D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	inc $1D.b		; E6 1D ; Increment $1D.b [Reads: Direct Page] [Flags: ZN]
	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	stz $C8.b		; [PATTERN: Memory clearing operation] 64 C8 ; Store zero to $C8.b
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	stz $C8.b		; 64 C8 ; Store zero to $C8.b
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $3C		; D0 3C ; Branch if not equal to $D0, $3C [Flow: branch]
	jsr $D00E.w		; 20 0E D0 ; Jump to subroutine at $D00E.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$045E.w		; A2 5E 04 ; Load #$045E.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E88.w		; A9 88 0E ; Load #$0E88.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1BC97C.l		; 22 7C C9 1B ; Jump to subroutine long $1BC97C.l [Writes: Stack Pointer] [Flow: call]
	ldx #$0460.w		; A2 60 04 ; Load #$0460.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E89.w		; A9 89 0E ; Load #$0E89.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$04DE.w		; A2 DE 04 ; Load #$04DE.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0EA2.w		; A9 A2 0E ; Load #$0EA2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	lda #$0E8A.w		; A9 8A 0E ; Load #$0E8A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$055E.w		; A2 5E 05 ; Load #$055E.w into X register [Writes: X Index] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1012.w,Y		; 99 12 10 ; Store accumulator to $1012.w,Y [Reads: Accumulator, Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $F7		; D0 F7 ; Branch if not equal to $D0, $F7 [Flow: branch]
	jsr $D00E.w		; 20 0E D0 ; Jump to subroutine at $D00E.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$045E.w		; A2 5E 04 ; Load #$045E.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E8C.w		; A9 8C 0E ; Load #$0E8C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1BC97C.l		; 22 7C C9 1B ; Jump to subroutine long $1BC97C.l [Writes: Stack Pointer] [Flow: call]
	ldx #$0460.w		; A2 60 04 ; Load #$0460.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E8D.w		; A9 8D 0E ; Load #$0E8D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$04DE.w		; A2 DE 04 ; Load #$04DE.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E8E.w		; A9 8E 0E ; Load #$0E8E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	lda #$0E90.w		; A9 90 0E ; Load #$0E90.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $B9		; 80 B9 ; Branch always to $80, $B9 [Flow: branch]
	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$D034.w		; C9 34 D0 ; Compare #$D034.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $42, $20		; 42 20 ; Reserved instruction
	asl $C2D0.w		; 0E D0 C2 ; Arithmetic shift left $C2D0.w [Flags: ZNC]
	.db $30, $A2		; 30 A2 ; Branch if minus to $30, $A2 [Flow: branch]
	lsr $A904.w,X		; 5E 04 A9 ; Logical shift right $A904.w,X [Reads: X Index] [Flags: ZNC]
	sta ($0E.b)		; 92 0E ; Store accumulator (indirect) ($0E.b) [Reads: Accumulator, Direct Page]
	jsl $1BC97C.l		; 22 7C C9 1B ; Jump to subroutine long $1BC97C.l [Writes: Stack Pointer] [Flow: call]
	ldx #$0460.w		; A2 60 04 ; Load #$0460.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E93.w		; A9 93 0E ; Load #$0E93.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$04DE.w		; A2 DE 04 ; Load #$04DE.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E94.w		; A9 94 0E ; Load #$0E94.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	lda #$0E94.w		; A9 94 0E ; Load #$0E94.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$055E.w		; A2 5E 05 ; Load #$055E.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E95.w		; A9 95 0E ; Load #$0E95.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	lda #$0E95.w		; A9 95 0E ; Load #$0E95.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1012.w,Y		; 99 12 10 ; Store accumulator to $1012.w,Y [Reads: Accumulator, Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $F7		; D0 F7 ; Branch if not equal to $D0, $F7 [Flow: branch]
	jsr $D00E.w		; 20 0E D0 ; Jump to subroutine at $D00E.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$045E.w		; A2 5E 04 ; Load #$045E.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E96.w		; A9 96 0E ; Load #$0E96.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1BC97C.l		; 22 7C C9 1B ; Jump to subroutine long $1BC97C.l [Writes: Stack Pointer] [Flow: call]
	ldx #$0460.w		; A2 60 04 ; Load #$0460.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E97.w		; A9 97 0E ; Load #$0E97.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$04DE.w		; A2 DE 04 ; Load #$04DE.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E98.w		; A9 98 0E ; Load #$0E98.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $D04F.w		; 4C 4F D0 ; Jump to $D04F.w [Flow: jump]
	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$D020.w		; C9 20 D0 ; Compare #$D020.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	dec $0E20.w		; CE 20 0E ; Decrement $0E20.w [Flags: ZN]
	.db $D0, $C2		; D0 C2 ; Branch if not equal to $D0, $C2 [Flow: branch]
	.db $30, $A2		; 30 A2 ; Branch if minus to $30, $A2 [Flow: branch]
	dec $A904.w,X		; DE 04 A9 ; Decrement memory $A904.w,X [Reads: X Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $7C22.w		; 0E 22 7C ; Arithmetic shift left $7C22.w [Flags: ZNC]
	cmp #$A21B.w		; C9 1B A2 ; Compare #$A21B.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cpx #$A904.w		; E0 04 A9 ; Compare #$A904.w with X register [Reads: X Index] [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	asl $524C.w		; 0E 4C 52 ; Arithmetic shift left $524C.w [Flags: ZNC]
	.db $D0, $E6		; D0 E6 ; Branch if not equal to $D0, $E6 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$D020.w		; C9 20 D0 ; Compare #$D020.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldx $0E20.w		; AE 20 0E ; Load $0E20.w into X register [Writes: X Index] [Flags: ZN]
	.db $D0, $C2		; D0 C2 ; Branch if not equal to $D0, $C2 [Flow: branch]
	.db $30, $A2		; 30 A2 ; Branch if minus to $30, $A2 [Flow: branch]
	dec $A904.w,X		; DE 04 A9 ; Decrement memory $A904.w,X [Reads: X Index] [Flags: ZN]
	stz $220E.w		; 9C 0E 22 ; Store zero to $220E.w
	jmp ($1BC9.w,X)		; 7C C9 1B ; Jump indirect indexed to ($1BC9.w,X) [Reads: X Index] [Flow: jump]
	ldx #$04E0.w		; A2 E0 04 ; Load #$04E0.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E9D.w		; A9 9D 0E ; Load #$0E9D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	lda #$0E9E.w		; A9 9E 0E ; Load #$0E9E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $D04C.w		; 4C 4C D0 ; Jump to $D04C.w [Flow: jump]
	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$D020.w		; C9 20 D0 ; Compare #$D020.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	jsr $D00E.w		; 20 0E D0 ; Jump to subroutine at $D00E.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$055E.w		; A2 5E 05 ; Load #$055E.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E9A.w		; A9 9A 0E ; Load #$0E9A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1BC97C.l		; 22 7C C9 1B ; Jump to subroutine long $1BC97C.l [Writes: Stack Pointer] [Flow: call]
	ldx #$0560.w		; A2 60 05 ; Load #$0560.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E9B.w		; A9 9B 0E ; Load #$0E9B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $D052.w		; 4C 52 D0 ; Jump to $D052.w [Flow: jump]
	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$D020.w		; C9 20 D0 ; Compare #$D020.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $62, $20, $0E		; 62 20 0E ; Push effective relative address $62, $20, $0E [Writes: Stack Pointer]
	.db $D0, $C2		; D0 C2 ; Branch if not equal to $D0, $C2 [Flow: branch]
	.db $30, $A2		; 30 A2 ; Branch if minus to $30, $A2 [Flow: branch]
	lsr $A905.w,X		; 5E 05 A9 ; Logical shift right $A905.w,X [Reads: X Index] [Flags: ZNC]
	stz $220E.w		; 9C 0E 22 ; Store zero to $220E.w
	jmp ($1BC9.w,X)		; 7C C9 1B ; Jump indirect indexed to ($1BC9.w,X) [Reads: X Index] [Flow: jump]
	ldx #$0560.w		; A2 60 05 ; Load #$0560.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0E9D.w		; A9 9D 0E ; Load #$0E9D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$05DE.w		; A2 DE 05 ; Load #$05DE.w into X register [Writes: X Index] [Flags: ZN]
	lda #$0EA0.w		; A9 A0 0E ; Load #$0EA0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $C9DE.w		; 20 DE C9 ; Jump to subroutine at $C9DE.w [Writes: Stack Pointer] [Flow: call]
	lda #$0EA1.w		; A9 A1 0E ; Load #$0EA1.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$05E0.w		; A2 E0 05 ; Load #$05E0.w into X register [Writes: X Index] [Flags: ZN]
	jmp $D052.w		; 4C 52 D0 ; Jump to $D052.w [Flow: jump]
	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$D020.w		; C9 20 D0 ; Compare #$D020.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $30, $A9		; 30 A9 ; Branch if minus to $30, $A9 [Flow: branch]
	ora $8D.b		; 05 8D ; Logical OR $8D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $2001.w		; 2D 01 20 ; Logical AND $2001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $C2D0.w		; 0E D0 C2 ; Arithmetic shift left $C2D0.w [Flags: ZNC]
	.db $30, $A2		; 30 A2 ; Branch if minus to $30, $A2 [Flow: branch]
	dec $A905.w,X		; DE 05 A9 ; Decrement memory $A905.w,X [Reads: X Index] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $7C22.w		; 0E 22 7C ; Arithmetic shift left $7C22.w [Flags: ZNC]
	cmp #$A91B.w		; C9 1B A9 ; Compare #$A91B.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	asl $D980.w		; 0E 80 D9 ; Arithmetic shift left $D980.w [Flags: ZNC]
	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$D048.w		; C9 48 D0 ; Compare #$D048.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $CF4020.l		; 0F 20 40 CF ; OR accumulator with memory (long) $CF4020.l [Writes: Accumulator] [Flags: ZN]
	stz $C8.b		; 64 C8 ; Store zero to $C8.b
	lda #$8D0D.w		; A9 0D 8D ; Load #$8D0D.w into accumulator [Writes: Accumulator] [Flags: ZN]
	bit $A901.w		; 2C 01 A9 ; Test bits $A901.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora #$2D8D.w		; 09 8D 2D ; Logical OR #$2D8D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $08D97F.l,X		; FF 7F D9 08 ; Subtract with carry (long,X) $08D97F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$1E.b]		; 07 1E ; OR accumulator with memory (long) [$1E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $19DF13.l,X		; 3F 13 DF 19 ; AND accumulator with memory (long,X) $19DF13.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $19797F.l,X		; FF 7F 79 19 ; Subtract with carry (long,X) $19797F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $14.b,Y		; B6 14 ; Load X register $14.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	jmp.w [$A539]		; DC 39 A5 ; Jump long indirect [$A539] [Flow: jump]
	trb $F7.b		; 14 F7 ; Test and reset bits $F7.b [Reads: Accumulator] [Flags: Z]
	ror $EF.b		; 66 EF ; Rotate right $EF.b [Reads: Direct Page] [Flags: ZNC]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $EC6949.l,X		; 7F 49 69 EC ; Add long $EC6949.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $F4, $6F		; 62 F4 6F ; Push effective relative address $62, $F4, $6F [Writes: Stack Pointer]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($7F.b),Y		; 51 7F ; Exclusive OR accumulator with memory ($7F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $00007E.l		; 4F 7E 00 00 ; Exclusive OR accumulator with memory (long) $00007E.l [Writes: Accumulator] [Flags: ZN]
	sbc $5A1F7F.l,X		; FF 7F 1F 5A ; Subtract with carry (long,X) $5A1F7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	eor $B2.b,X		; 55 B2 ; Exclusive OR accumulator with memory $B2.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $A5.b,X		; 76 A5 ; Rotate right $A5.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $DF.b		; 14 DF ; Test and reset bits $DF.b [Reads: Accumulator] [Flags: Z]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta [$15.b],Y		; 97 15 ; Store accumulator (long indexed) [$15.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sbc $1AF67F.l,X		; FF 7F F6 1A ; Subtract with carry (long,X) $1AF67F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stx $15.b,Y		; 96 15 ; Store X register $15.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stz $A536.w,X		; 9E 36 A5 ; Store zero to $A536.w,X [Reads: X Index]
	trb $FE.b		; 14 FE ; Test and reset bits $FE.b [Reads: Accumulator] [Flags: Z]
	eor ($17.b,X)		; 41 17 ; Exclusive OR accumulator with memory ($17.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	adc $96319B.l,X		; 7F 9B 31 96 ; Add long $96319B.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $9E.b,X		; 15 9E ; OR accumulator with memory $9E.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $A5.b,X		; 36 A5 ; Rotate left $A5.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $56.b		; 14 56 ; Test and reset bits $56.b [Reads: Accumulator] [Flags: Z]
	ror $65CA.w,X		; 7E CA 65 ; Rotate right $65CA.w,X [Reads: X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0CD97F.l,X		; FF 7F D9 0C ; Subtract with carry (long,X) $0CD97F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor #$531A.w		; 49 1A 53 ; Exclusive OR #$531A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $12371F.l,X		; 5F 1F 37 12 ; Exclusive OR accumulator with memory (long,X) $12371F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $08D97F.l,X		; FF 7F D9 08 ; Subtract with carry (long,X) $08D97F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $32F51A.l		; 2F 1A F5 32 ; AND accumulator with memory (long) $32F51A.l [Writes: Accumulator] [Flags: ZN]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $19DF13.l,X		; 3F 13 DF 19 ; AND accumulator with memory (long,X) $19DF13.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $19797F.l,X		; FF 7F 79 19 ; Subtract with carry (long,X) $19797F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $14.b,Y		; B6 14 ; Load X register $14.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	jmp.w [$A539]		; DC 39 A5 ; Jump long indirect [$A539] [Flow: jump]
	trb $F7.b		; 14 F7 ; Test and reset bits $F7.b [Reads: Accumulator] [Flags: Z]
	ror $EF.b		; 66 EF ; Rotate right $EF.b [Reads: Direct Page] [Flags: ZNC]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $CF2DC4.l,X		; 7F C4 2D CF ; Add long $CF2DC4.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $D5.b		; 66 D5 ; Rotate right $D5.b [Reads: Direct Page] [Flags: ZNC]
	adc $5014A5.l,X		; 7F A5 14 50 ; Add long $5014A5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $00468A.l,X		; 5F 8A 46 00 ; Exclusive OR accumulator with memory (long,X) $00468A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $AA5A1F.l,X		; 7F 1F 5A AA ; Add long $AA5A1F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $B2.b,X		; 55 B2 ; Exclusive OR accumulator with memory $B2.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $A5.b,X		; 76 A5 ; Rotate right $A5.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $DF.b		; 14 DF ; Test and reset bits $DF.b [Reads: Accumulator] [Flags: Z]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta [$15.b],Y		; 97 15 ; Store accumulator (long indexed) [$15.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sbc $0EFB7F.l,X		; FF 7F FB 0E ; Subtract with carry (long,X) $0EFB7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stx $15.b,Y		; 96 15 ; Store X register $15.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stz $A536.w,X		; 9E 36 A5 ; Store zero to $A536.w,X [Reads: X Index]
	trb $FE.b		; 14 FE ; Test and reset bits $FE.b [Reads: Accumulator] [Flags: Z]
	eor ($17.b,X)		; 41 17 ; Exclusive OR accumulator with memory ($17.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	adc $96319B.l,X		; 7F 9B 31 96 ; Add long $96319B.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $9E.b,X		; 15 9E ; OR accumulator with memory $9E.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $A5.b,X		; 36 A5 ; Rotate left $A5.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $56.b		; 14 56 ; Test and reset bits $56.b [Reads: Accumulator] [Flags: Z]
	ror $65CA.w,X		; 7E CA 65 ; Rotate right $65CA.w,X [Reads: X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0CD97F.l,X		; FF 7F D9 0C ; Subtract with carry (long,X) $0CD97F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor #$531A.w		; 49 1A 53 ; Exclusive OR #$531A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $12371F.l,X		; 5F 1F 37 12 ; Exclusive OR accumulator with memory (long,X) $12371F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $237E7F.l,X		; FF 7F 7E 23 ; Subtract with carry (long,X) $237E7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda [$11.b],Y		; B7 11 ; Load accumulator (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $A536.w,X		; 9E 36 A5 ; Store zero to $A536.w,X [Reads: X Index]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	ora ($78.b,X)		; 01 78 ; Logical OR ($78.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $9D		; 10 9D ; Branch if plus to $10, $9D [Flow: branch]
	eor $3647.w,Y		; 59 47 36 ; Exclusive OR accumulator with memory $3647.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $2A5C12.l		; EF 12 5C 2A ; Subtract with carry (long) $2A5C12.l [Writes: Accumulator] [Flags: ZVNC]
	adc ($15.b),Y		; 71 15 ; Add with carry ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sbc $237E7F.l,X		; FF 7F 7E 23 ; Subtract with carry (long,X) $237E7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda [$11.b],Y		; B7 11 ; Load accumulator (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $A536.w,X		; 9E 36 A5 ; Store zero to $A536.w,X [Reads: X Index]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	ora ($78.b,X)		; 01 78 ; Logical OR ($78.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $9D		; 10 9D ; Branch if plus to $10, $9D [Flow: branch]
	eor $6980.w,Y		; 59 80 69 ; Exclusive OR accumulator with memory $6980.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($76.b),Y		; 91 76 ; Store accumulator ($76.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clv		; B8 ; Clear overflow flag [Flags: V]
	rol $7F.b		; 26 7F ; Rotate left $7F.b [Reads: Direct Page] [Flags: ZNC]
	eor $5C.b,S		; 43 5C ; Exclusive OR accumulator with stack relative $5C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $1811.w,Y		; 99 11 18 ; Store accumulator to $1811.w,Y [Reads: Accumulator, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sbc $237E7F.l,X		; FF 7F 7E 23 ; Subtract with carry (long,X) $237E7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda [$11.b],Y		; B7 11 ; Load accumulator (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $A536.w,X		; 9E 36 A5 ; Store zero to $A536.w,X [Reads: X Index]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	ora ($78.b,X)		; 01 78 ; Logical OR ($78.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $9D		; 10 9D ; Branch if plus to $10, $9D [Flow: branch]
	eor $1057.w,Y		; 59 57 10 ; Exclusive OR accumulator with memory $1057.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $F345.w,X		; 7E 45 F3 ; Rotate right $F345.w,X [Reads: X Index] [Flags: ZNC]
	adc $7EB9.w		; 6D B9 7E ; Add $7EB9.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jmp $22272A.l		; 5C 2A 27 22 ; Jump long to $22272A.l [Flow: jump]
	clc		; 18 ; Clear carry flag [Flags: C]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sbc $237E7F.l,X		; FF 7F 7E 23 ; Subtract with carry (long,X) $237E7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ora ($9E.b),Y		; 11 9E ; OR accumulator with memory ($9E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $A5.b,X		; 36 A5 ; Rotate left $A5.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	ora ($78.b,X)		; 01 78 ; Logical OR ($78.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $97		; 10 97 ; Branch if plus to $10, $97 [Flow: branch]
	and $3647.w,X		; 3D 47 36 ; AND accumulator with memory $3647.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $567E12.l		; EF 12 7E 56 ; Subtract with carry (long) $567E12.l [Writes: Accumulator] [Flags: ZVNC]
	adc ($18.b)		; 72 18 ; Add with carry (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	asl $7DD1.w		; 0E D1 7D ; Arithmetic shift left $7DD1.w [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	adc $1A0000.l,X		; 7F 00 00 1A ; Add long $1A0000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $D1716E.l,X		; 7F 6E 71 D1 ; Add long $D1716E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $40A7.w,X		; 7D A7 40 ; Add $40A7.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($7D.b),Y		; D1 7D ; Compare accumulator ($7D.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	lda [$40.b]		; A7 40 ; Load accumulator (long) [$40.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$CF48.w		; E9 48 CF ; Subtract #$CF48.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $FF		; 50 FF ; Branch if overflow clear to $50, $FF [Flow: branch]
	adc $1410C6.l,X		; 7F C6 10 14 ; Add long $1410C6.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($3D.b)		; 12 3D ; OR accumulator with memory (indirect) ($3D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec $1966.w,X		; DE 66 19 ; Decrement memory $1966.w,X [Reads: X Index] [Flags: ZN]
	eor ($ED.b)		; 52 ED ; Exclusive OR accumulator with memory (indirect) ($ED.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $29		; 42 29 ; Reserved instruction
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	adc $580D66.l,X		; 7F 66 0D 58 ; Add long $580D66.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $463D.w		; 2D 3D 46 ; Logical AND $463D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $90, $32		; 90 32 ; Branch if carry clear to $90, $32 [Flow: branch]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $25F1.w,X		; 1D F1 25 ; OR accumulator with memory $25F1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2A0D.w		; 09 0D 2A ; Logical OR #$2A0D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($A5.b)		; 72 A5 ; Add with carry (indirect) ($A5.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	trb $CF.b		; 14 CF ; Test and reset bits $CF.b [Reads: Accumulator] [Flags: Z]
	and ($4B.b,X)		; 21 4B ; Logical AND ($4B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $3676.w,Y		; 19 76 36 ; OR accumulator with memory $3676.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	nop		; EA ; No operation
	tsb $A0.b		; 04 A0 ; Test and set bits $A0.b [Reads: Accumulator] [Flags: Z]
	ora ($80.b)		; 12 80 ; OR accumulator with memory (indirect) ($80.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $D114A5.l		; 2F A5 14 D1 ; AND accumulator with memory (long) $D114A5.l [Writes: Accumulator] [Flags: ZN]
	and ($4D.b,X)		; 21 4D ; Logical AND ($4D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($FF.b),Y		; 11 FF ; OR accumulator with memory ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $754FF3.l,X		; 7F F3 4F 75 ; Add long $754FF3.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($9E.b),Y		; 11 9E ; OR accumulator with memory ($9E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $A5.b,X		; 36 A5 ; Rotate left $A5.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	ora $00F9.w		; 0D F9 00 ; Logical OR $00F9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $273A7F.l,X		; FF 7F 3A 27 ; Subtract with carry (long,X) $273A7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $11.b,X		; 75 11 ; Add $11.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stz $A536.w,X		; 9E 36 A5 ; Store zero to $A536.w,X [Reads: X Index]
	trb $2F.b		; 14 2F ; Test and reset bits $2F.b [Reads: Accumulator] [Flags: Z]
	ora ($69.b,S),Y		; 13 69 ; OR accumulator (stack relative indirect indexed) ($69.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: ZNC]
	adc $2F314A.l,X		; 7F 4A 31 2F ; Add long $2F314A.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $14A557.l		; 0F 57 A5 14 ; OR accumulator with memory (long) $14A557.l [Writes: Accumulator] [Flags: ZN]
	lda $30EA57.l		; AF 57 EA 30 ; Load long $30EA57.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $191B7F.l,X		; FF 7F 1B 19 ; Subtract with carry (long,X) $191B7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $D516.w		; AC 16 D5 ; Load $D516.w into Y register [Writes: Y Index] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $9826.w,X		; 7E 26 98 ; Rotate right $9826.w,X [Reads: X Index] [Flags: ZNC]
	ora $7FFF.w		; 0D FF 7F ; Logical OR $7FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $AD1D.w		; 2C 1D AD ; Test bits $AD1D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	eor $4DAD.w		; 4D AD 4D ; Exclusive OR $4DAD.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $2A.b		; 14 2A ; Test and reset bits $2A.b [Reads: Accumulator] [Flags: Z]
	sta ($1D.b),Y		; 91 1D ; Store accumulator ($1D.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sbc $21857F.l,X		; FF 7F 85 21 ; Subtract with carry (long,X) $21857F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	and $463D.w		; 2D 3D 46 ; Logical AND $463D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0942.w		; 8D 42 09 ; Store accumulator to $0942.w [Reads: Accumulator]
	and ($FF.b)		; 32 FF ; AND accumulator with memory (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $C75294.l,X		; 7F 94 52 C7 ; Add long $C75294.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $61,$AE		; 44 AE 61 ; Move block positive $61,$AE [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	adc $11.b,X		; 75 11 ; Add $11.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $54E937.l,X		; 7F 37 E9 54 ; Add long $54E937.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $101616.l,X		; 5F 16 16 10 ; Exclusive OR accumulator with memory (long,X) $101616.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $2C.b,S		; 43 2C ; Exclusive OR accumulator with stack relative $2C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $14C461.l		; EF 61 C4 14 ; Subtract with carry (long) $14C461.l [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $612E.w		; 2D 2E 61 ; Logical AND $612E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $5D.b,X		; B4 5D ; Load Y register $5D.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	cmp $BD7A.w,Y		; D9 7A BD ; Compare accumulator $BD7A.w,Y [Reads: Y Index] [Flags: ZNC]
	adc [$94.b],Y		; 77 94 ; Add with carry (long indexed) [$94.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($C4.b)		; 52 C4 ; Exclusive OR accumulator with memory (indirect) ($C4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $6B.b		; 14 6B ; Test and reset bits $6B.b [Reads: Accumulator] [Flags: Z]
	and $4DE8.w		; 2D E8 4D ; Logical AND $4DE8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $7466.w		; AE 66 74 ; Load $7466.w into X register [Writes: X Index] [Flags: ZN]
	adc $9477BD.l,X		; 7F BD 77 94 ; Add long $9477BD.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($C4.b)		; 52 C4 ; Exclusive OR accumulator with memory (indirect) ($C4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $6B.b		; 14 6B ; Test and reset bits $6B.b [Reads: Accumulator] [Flags: Z]
	and $011F.w		; 2D 1F 01 ; Logical AND $011F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $03DF01.l,X		; FF 01 DF 03 ; Subtract with carry (long,X) $03DF01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $9477.w,X		; BD 77 94 ; Load $9477.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($FF.b)		; 52 FF ; Exclusive OR accumulator with memory (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $000000.l,X		; 7F 00 00 00 ; Add long $000000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc $7C177F.l,X		; 7F 7F 17 7C ; Add long $7C177F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00007F.l,X		; FF 7F 00 00 ; Subtract with carry (long,X) $00007F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$59.b]		; 07 59 ; OR accumulator with memory (long) [$59.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $006E.w		; 0E 6E 00 ; Arithmetic shift left $006E.w [Flags: ZNC]
	brk $BB.b		; 00 BB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $FF7672.l,X		; 7F 72 76 FF ; Add long $FF7672.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $0A5F9F.l,X		; 7F 9F 5F 0A ; Add long $0A5F9F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $2C24.w,X		; 7E 24 2C ; Rotate right $2C24.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $75		; D0 75 ; Branch if not equal to $D0, $75 [Flow: branch]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	adc ($A5.b,X)		; 61 A5 ; Add with carry ($A5.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	trb $0A.b		; 14 0A ; Test and reset bits $0A.b [Reads: Accumulator] [Flags: Z]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $1D.b		; E5 1D ; Subtract $1D.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$3426.w		; 69 26 34 ; Add #$3426.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and ($B6.b)		; 32 B6 ; AND accumulator with memory (indirect) ($B6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $A54AEF.l,X		; 5F EF 4A A5 ; Exclusive OR accumulator with memory (long,X) $A54AEF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	trb $8D.b		; 14 8D ; Test and reset bits $8D.b [Reads: Accumulator] [Flags: Z]
	ora $11.b,X		; 15 11 ; OR accumulator with memory $11.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $EF3234.l		; 22 34 32 EF ; Jump to subroutine long $EF3234.l [Writes: Stack Pointer] [Flow: call]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cpy $08.b		; C4 08 ; Compare $08.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cmp #$B121.w		; C9 21 B1 ; Compare #$B121.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor $72D3.w		; 4D D3 72 ; Exclusive OR $72D3.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda [$12.b],Y		; B7 12 ; Load accumulator (long indexed) [$12.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $4F.b,X		; 34 4F ; Test bits $4F.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ror $6336.w		; 6E 36 63 ; Rotate right $6336.w [Flags: ZNC]
	tsb $08C4.w		; 0C C4 08 ; Test and set bits $08C4.w [Reads: Accumulator] [Flags: Z]
	ror $F219.w		; 6E 19 F2 ; Rotate right $F219.w [Flags: ZNC]
	and #$29F2.w		; 29 F2 29 ; Logical AND #$29F2.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ror $C936.w		; 6E 36 C9 ; Rotate right $C936.w [Flags: ZNC]
	and ($C6.b,X)		; 21 C6 ; Logical AND ($C6.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $29F5.w		; 2D F5 29 ; Logical AND $29F5.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $77BD25.l		; 2F 25 BD 77 ; AND accumulator with memory (long) $77BD25.l [Writes: Accumulator] [Flags: ZN]
	sty $52.b,X		; 94 52 ; Store Y register $52.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	sbc $7B147F.l,X		; FF 7F 14 7B ; Subtract with carry (long,X) $7B147F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($5C.b)		; 92 5C ; Store accumulator (indirect) ($5C.b) [Reads: Accumulator, Direct Page]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	adc $14A5.w,Y		; 79 A5 14 ; Add $14A5.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $11BD02.l,X		; BF 02 BD 11 ; Load long $11BD02.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $32DB7F.l,X		; FF 7F DB 32 ; Subtract with carry (long,X) $32DB7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $00.b,Y		; B6 00 ; Load X register $00.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	rol $A526.w,X		; 3E 26 A5 ; Rotate left $A526.w,X [Reads: X Index] [Flags: ZNC]
	trb $94.b		; 14 94 ; Test and reset bits $94.b [Reads: Accumulator] [Flags: Z]
	lsr $AD.b,X		; 56 AD ; Logical shift right $AD.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $7FFF.w,Y		; 39 FF 7F ; AND accumulator with memory $7FFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($05.b),Y		; 51 05 ; Exclusive OR accumulator with memory ($05.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $725D.w		; 8D 5D 72 ; Store accumulator to $725D.w [Reads: Accumulator]
	adc ($A5.b)		; 72 A5 ; Add with carry (indirect) ($A5.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	trb $FD.b		; 14 FD ; Test and reset bits $FD.b [Reads: Accumulator] [Flags: Z]
	asl $0DF6.w		; 0E F6 0D ; Arithmetic shift left $0DF6.w [Flags: ZNC]
	sbc $237E7F.l,X		; FF 7F 7E 23 ; Subtract with carry (long,X) $237E7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $11.b,X		; 75 11 ; Add $11.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stz $A536.w,X		; 9E 36 A5 ; Store zero to $A536.w,X [Reads: X Index]
	trb $71.b		; 14 71 ; Test and reset bits $71.b [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $7FFF.w,X		; 1E FF 7F ; Arithmetic shift left $7FFF.w,X [Reads: X Index] [Flags: ZNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	jsr $0DB4.w		; 20 B4 0D ; Jump to subroutine at $0DB4.w [Writes: Stack Pointer] [Flow: call]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $026B03.l		; 6F 03 6B 02 ; Add with carry (long) $026B03.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $09757F.l,X		; FF 7F 75 09 ; Subtract with carry (long,X) $09757F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($34.b)		; D2 34 ; Compare accumulator (indirect) ($34.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda $A551.w,Y		; B9 51 A5 ; Load $A551.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $DF.b		; 14 DF ; Test and reset bits $DF.b [Reads: Accumulator] [Flags: Z]
	rol $11FC.w		; 2E FC 11 ; Rotate left $11FC.w [Flags: ZNC]
	lda $FC77.w,X		; BD 77 FC ; Load $FC77.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pei ($09.b)		; D4 09 ; Push effective indirect address ($09.b) [Reads: Direct Page] [Writes: Stack Pointer]
	jmp.w [$A512]		; DC 12 A5 ; Jump long indirect [$A512] [Flow: jump]
	trb $D8.b		; 14 D8 ; Test and reset bits $D8.b [Reads: Accumulator] [Flags: Z]
	lsr $29D1.w		; 4E D1 29 ; Logical shift right $29D1.w [Flags: ZNC]
	sbc $19667F.l,X		; FF 7F 66 19 ; Subtract with carry (long,X) $19667F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $BB0D.w		; 9C 0D BB ; Store zero to $BB0D.w
	cop $A5.b		; 02 A5 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $0A.b		; 14 0A ; Test and reset bits $0A.b [Reads: Accumulator] [Flags: Z]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rol $7FFF.w		; 2E FF 7F ; Rotate left $7FFF.w [Flags: ZNC]
	nop		; EA ; No operation
	tsb $0EF9.w		; 0C F9 0E ; Test and set bits $0EF9.w [Reads: Accumulator] [Flags: Z]
	eor $14A50F.l,X		; 5F 0F A5 14 ; Exclusive OR accumulator with memory (long,X) $14A50F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $0E.b,X		; 75 0E ; Add $0E.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $0D		; B0 0D ; Branch if carry set to $B0, $0D [Flow: branch]
	sbc $5A3C7F.l,X		; FF 7F 3C 5A ; Subtract with carry (long,X) $5A3C7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $3462.w		; 6E 62 34 ; Rotate right $3462.w [Flags: ZNC]
	adc $3F0000.l,X		; 7F 00 00 3F ; Add long $3F0000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $FF6E9E.l,X		; 7F 9E 6E FF ; Add long $FF6E9E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $7508D9.l,X		; 7F D9 08 75 ; Add long $7508D9.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($9E.b),Y		; 11 9E ; OR accumulator with memory ($9E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $A5.b,X		; 36 A5 ; Rotate left $A5.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $1A.b		; 14 1A ; Test and reset bits $1A.b [Reads: Accumulator] [Flags: Z]
	and $33.b,S		; 23 33 ; AND accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $7FFF.w		; 0E FF 7F ; Arithmetic shift left $7FFF.w [Flags: ZNC]
	trb $09.b		; 14 09 ; Test and reset bits $09.b [Reads: Accumulator] [Flags: Z]
	adc $16.b		; 65 16 ; Add $16.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $A55F.w		; 6E 5F A5 ; Rotate right $A55F.w [Flags: ZNC]
	trb $7F.b		; 14 7F ; Test and reset bits $7F.b [Reads: Accumulator] [Flags: Z]
	rol $B9.b		; 26 B9 ; Rotate left $B9.b [Reads: Direct Page] [Flags: ZNC]
	ora $FF.b,X		; 15 FF ; OR accumulator with memory $FF.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $7B5929.l,X		; 7F 29 59 7B ; Add long $7B5929.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($BF.b),Y		; 11 BF ; OR accumulator with memory ($BF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $B514A5.l		; 22 A5 14 B5 ; Jump to subroutine long $B514A5.l [Writes: Stack Pointer] [Flow: call]
	ror $75CF.w,X		; 7E CF 75 ; Rotate right $75CF.w,X [Reads: X Index] [Flags: ZNC]
	sbc $45477F.l,X		; FF 7F 47 45 ; Subtract with carry (long,X) $45477F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($05.b),Y		; 91 05 ; Store accumulator ($05.b),Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $A5.b,X		; 16 A5 ; Arithmetic shift left $A5.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $31.b		; 14 31 ; Test and reset bits $31.b [Reads: Accumulator] [Flags: Z]
	eor ($2A.b,S),Y		; 53 2A ; XOR accumulator (stack relative indirect indexed) ($2A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $FF.b,X		; 56 FF ; Logical shift right $FF.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc $364118.l,X		; 7F 18 41 36 ; Add long $364118.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $1D.b,X		; 16 1D ; Arithmetic shift left $1D.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($1F.b)		; 52 1F ; Exclusive OR accumulator with memory (indirect) ($1F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF12.w		; 0D 12 FF ; Logical OR $FF12.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $8B369B.l,X		; 7F 9B 36 8B ; Add long $8B369B.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $A53F72.l		; 22 72 3F A5 ; Jump to subroutine long $A53F72.l [Writes: Stack Pointer] [Flow: call]
	trb $BC.b		; 14 BC ; Test and reset bits $BC.b [Reads: Accumulator] [Flags: Z]
	and $15.b,X		; 35 15 ; Logical AND $15.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($FF.b,X)		; 21 FF ; Logical AND ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $401414.l,X		; 7F 14 14 40 ; Add long $401414.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $A5231F.l		; 0F 1F 23 A5 ; OR accumulator with memory (long) $A5231F.l [Writes: Accumulator] [Flags: ZN]
	trb $3D.b		; 14 3D ; Test and reset bits $3D.b [Reads: Accumulator] [Flags: Z]
	ora ($FA.b)		; 12 FA ; OR accumulator with memory (indirect) ($FA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	adc $725E5F.l,X		; 7F 5F 5E 72 ; Add long $725E5F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$2638.w		; 09 38 26 ; Logical OR #$2638.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $76.b,X		; 36 76 ; Rotate left $76.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $7E3551.l		; 2F 51 35 7E ; AND accumulator with memory (long) $7E3551.l [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $11.b,X		; 75 11 ; Add $11.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stz $A536.w,X		; 9E 36 A5 ; Store zero to $A536.w,X [Reads: X Index]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	adc $FF7E35.l,X		; 7F 35 7E FF ; Add long $FF7E35.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $D75A94.l,X		; 7F 94 5A D7 ; Add long $D75A94.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $A521.w,X		; 9D 21 A5 ; Store accumulator to $A521.w,X [Reads: Accumulator, X Index]
	trb $98.b		; 14 98 ; Test and reset bits $98.b [Reads: Accumulator] [Flags: Z]
	asl $91.b,X		; 16 91 ; Arithmetic shift left $91.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $FF.b		; 05 FF ; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $7B0CD2.l,X		; 7F D2 0C 7B ; Add long $7B0CD2.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($BF.b,X)		; 01 BF ; Logical OR ($BF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $A5.b,X		; 16 A5 ; Arithmetic shift left $A5.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $1D.b		; 14 1D ; Test and reset bits $1D.b [Reads: Accumulator] [Flags: Z]
	rol $16.b,X		; 36 16 ; Rotate left $16.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $4E73.w,X		; 1D 73 4E ; OR accumulator with memory $4E73.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpx $34.b		; E4 34 ; Compare $34.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	and ($05.b)		; 32 05 ; AND accumulator with memory (indirect) ($05.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora $0000.w		; 0D 00 00 ; Logical OR $0000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp [$04.b],Y		; D7 04 ; Compare accumulator (long indexed) [$04.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	dec $45.b		; C6 45 ; Decrement $45.b [Reads: Direct Page] [Flags: ZN]
	sbc $366E7F.l,X		; FF 7F 6E 36 ; Subtract with carry (long,X) $366E7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pea $1C15.w		; F4 15 1C ; Push absolute address $1C15.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	and $A5.b,S		; 23 A5 ; AND accumulator with stack relative $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $34.b		; 14 34 ; Test and reset bits $34.b [Reads: Accumulator] [Flags: Z]
	eor $4A5FB8.l		; 4F B8 5F 4A ; Exclusive OR accumulator with memory (long) $4A5FB8.l [Writes: Accumulator] [Flags: ZN]
	and #$77BD.w		; 29 BD 77 ; Logical AND #$77BD.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $31.b,S		; 63 31 ; Add with carry (stack relative) $31.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lsr $BD.b		; 46 BD ; Logical shift right $BD.b [Reads: Direct Page] [Flags: ZNC]
	adc [$31.b],Y		; 77 31 ; Add with carry (long indexed) [$31.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $18.b		; 46 18 ; Logical shift right $18.b [Reads: Direct Page] [Flags: ZNC]
	adc $FF.b,S		; 63 FF ; Add with carry (stack relative) $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $2D27FF.l,X		; 7F FF 27 2D ; Add long $2D27FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $7E4E.w,X		; 5E 4E 7E ; Logical shift right $7E4E.w,X [Reads: X Index] [Flags: ZNC]
	pea $F56F.w		; F4 6F F5 ; Push absolute address $F56F.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	trb $093B.w		; 1C 3B 09 ; Test and reset bits $093B.w [Reads: Accumulator] [Flags: Z]
	sta $7E8D16.l,X		; 9F 16 8D 7E ; Store accumulator (long,X) $7E8D16.l,X [Reads: Accumulator, X Index]
	and $67FF03.l,X		; 3F 03 FF 67 ; AND accumulator with memory (long,X) $67FF03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	adc $101CE7.l,X		; 7F E7 1C 10 ; Add long $101CE7.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $64.b		; A5 64 ; Load $64.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $1CE74F.l,X		; 5F 4F E7 1C ; Exclusive OR accumulator with memory (long,X) $1CE74F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stz $B62E.w		; 9C 2E B6 ; Store zero to $B62E.w
	trb $99.b		; 14 99 ; Test and reset bits $99.b [Reads: Accumulator] [Flags: Z]
	adc ($E7.b,S),Y		; 73 E7 ; Add with carry (stack relative indirect indexed) ($E7.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $02F9.w		; 1C F9 02 ; Test and reset bits $02F9.w [Reads: Accumulator] [Flags: Z]
	and ($02.b,S),Y		; 33 02 ; AND accumulator (stack relative indirect indexed) ($02.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($B5.b,X)		; 01 B5 ; Logical OR ($B5.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lsr $00.b,X		; 56 00 ; Logical shift right $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $000000.l,X		; 7F 00 00 00 ; Add long $000000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $BC.b		; 00 BC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $000000.l,X		; 7F 00 00 00 ; Add long $000000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc #$7FFF.w		; 69 FF 7F ; Add #$7FFF.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: ZN]
	lda $0039.w		; AD 39 00 ; Load $0039.w into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B8.b		; 00 B8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3D.b		; 00 3D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00187F.l,X		; FF 7F 18 00 ; Subtract with carry (long,X) $00187F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $17.b		; 04 17 ; Test and set bits $17.b [Reads: Accumulator] [Flags: Z]
	sbc $00007F.l,X		; FF 7F 00 00 ; Subtract with carry (long,X) $00007F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $2E5921.l		; 6F 21 59 2E ; Add with carry (long) $2E5921.l [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $000000.l,X		; 7F 00 00 00 ; Add long $000000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $000000.l		; 2F 00 00 00 ; AND accumulator with memory (long) $000000.l [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $000000.l,X		; 1F 00 00 00 ; Logical OR long $000000.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $D8.b		; 00 D8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $2E54.w,X		; 3E 54 2E ; Rotate left $2E54.w,X [Reads: X Index] [Flags: ZNC]
	lda $0027.w,X		; BD 27 00 ; Load $0027.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $D8.b		; 00 D8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $2E54.w,X		; 3E 54 2E ; Rotate left $2E54.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $001D.w,X		; 5E 1D 00 ; Logical shift right $001D.w,X [Reads: X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $3F0000.l,X		; 7F 00 00 3F ; Add long $3F0000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc [$40.b]		; 67 40 ; Add with carry (long) [$40.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $99.b		; 26 99 ; Rotate left $99.b [Reads: Direct Page] [Flags: ZNC]
	adc $99.b,X		; 75 99 ; Add $99.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $99.b,X		; 75 99 ; Add $99.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $99.b,X		; 75 99 ; Add $99.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $00.b,X		; 75 00 ; Add $00.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $FF0019.l,X		; 7F 19 00 FF ; Add long $FF0019.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $A57FFF.l,X		; 7F FF 7F A5 ; Add long $A57FFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $5217FF.l,X		; 7F FF 17 52 ; Add long $5217FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $A5216E.l,X		; 7F 6E 21 A5 ; Add long $A5216E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D3.b		; 00 D3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $7F8E.w,X		; 7D 8E 7F ; Add $7F8E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $F766.w		; AD 66 F7 ; Load $F766.w into accumulator [Writes: Accumulator] [Flags: ZN]
	bit $14A5.w		; 2C A5 14 ; Test bits $14A5.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ror $0000.w,X		; 7E 00 00 ; Rotate right $0000.w,X [Reads: X Index] [Flags: ZNC]
	dec $0C.b		; C6 0C ; Decrement $0C.b [Reads: Direct Page] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora $D0.b,X		; 15 D0 ; OR accumulator with memory $D0.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $3675.w,Y		; 19 75 36 ; OR accumulator with memory $3675.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $EE53.w,X		; 5D 53 EE ; Exclusive OR accumulator with memory $EE53.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	trb $1089.w		; 1C 89 10 ; Test and reset bits $1089.w [Reads: Accumulator] [Flags: Z]
	sbc $0CC67F.l,X		; FF 7F C6 0C ; Subtract with carry (long,X) $0CC67F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora $D0.b,X		; 15 D0 ; OR accumulator with memory $D0.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $3675.w,Y		; 19 75 36 ; OR accumulator with memory $3675.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $EE53.w,X		; 5D 53 EE ; Exclusive OR accumulator with memory $EE53.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	trb $1089.w		; 1C 89 10 ; Test and reset bits $1089.w [Reads: Accumulator] [Flags: Z]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $5294.w		; 2D 94 52 ; Logical AND $5294.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $2F77.w,X		; BD 77 2F ; Load $2F77.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $BA.b		; 25 BA ; Logical AND $BA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $29.b,X		; F5 29 ; Subtract $29.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0C847F.l,X		; FF 7F 84 0C ; Subtract with carry (long,X) $0C847F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and ($CB.b),Y		; 31 CB ; AND accumulator with memory ($CB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $460D.w,X		; 3D 0D 46 ; AND accumulator with memory $460D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$28.b]		; E7 28 ; Subtract with carry (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	inc $C61C.w		; EE 1C C6 ; Increment $C61C.w [Flags: ZN]
	tsb $152B.w		; 0C 2B 15 ; Test and set bits $152B.w [Reads: Accumulator] [Flags: Z]
	and ($1A.b,S),Y		; 33 1A ; AND accumulator (stack relative indirect indexed) ($1A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $AC3B.w,Y		; 19 3B AC ; OR accumulator with memory $AC3B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $C7.b		; 14 C7 ; Test and reset bits $C7.b [Reads: Accumulator] [Flags: Z]
	eor $4546.w		; 4D 46 45 ; Exclusive OR $4546.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $0C847F.l,X		; FF 7F 84 0C ; Subtract with carry (long,X) $0C847F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $29.b		; 25 29 ; Logical AND $29.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $31.b		; 66 31 ; Rotate right $31.b [Reads: Direct Page] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	and $7D6B.w,Y		; 39 6B 7D ; AND accumulator with memory $7D6B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora $89.b,X		; 15 89 ; OR accumulator with memory $89.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $C6		; 10 C6 ; Branch if plus to $10, $C6 [Flow: branch]
	.db $10, $6E		; 10 6E ; Branch if plus to $10, $6E [Flow: branch]
	and ($F3.b,X)		; 21 F3 ; Logical AND ($F3.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($DC.b,X)		; 21 DC ; Logical AND ($DC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $DE18.w		; CD 18 DE ; Compare $DE18.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ror $D9.b		; 66 D9 ; Rotate right $D9.b [Reads: Direct Page] [Flags: ZNC]
	eor $7FFF.w,Y		; 59 FF 7F ; Exclusive OR accumulator with memory $7FFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$712D.w		; 29 2D 71 ; Logical AND #$712D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $35B3.w		; 2D B3 35 ; Logical AND $35B3.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc [$28.b]		; E7 28 ; Subtract with carry (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	inc $631C.w		; EE 1C 63 ; Increment $631C.w [Flags: ZN]
	trb $10.b		; 14 10 ; Test and reset bits $10.b [Reads: Accumulator] [Flags: Z]
	and ($B8.b,X)		; 21 B8 ; Logical AND ($B8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $9C.b,X		; 35 9C ; Logical AND $9C.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($08.b,S),Y		; 73 08 ; Add with carry (stack relative indirect indexed) ($08.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($DB.b,X)		; 41 DB ; Exclusive OR accumulator with memory ($DB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $AD.b,X		; 16 AD ; Arithmetic shift left $AD.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc ($FF.b,X)		; 61 FF ; Add with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $290CA5.l,X		; 7F A5 0C 29 ; Add long $290CA5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $210E.w		; 2D 0E 21 ; Logical AND $210E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $50, $29		; 50 29 ; Branch if overflow clear to $50, $29 [Flow: branch]
	sbc [$28.b]		; E7 28 ; Subtract with carry (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and ($6B.b),Y		; 31 6B ; AND accumulator with memory ($6B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $0CC6.w,X		; 7D C6 0C ; Add $0CC6.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora $D0.b,X		; 15 D0 ; OR accumulator with memory $D0.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $3675.w,Y		; 19 75 36 ; OR accumulator with memory $3675.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $2B53.w,X		; 5D 53 2B ; Exclusive OR accumulator with memory $2B53.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $6B.b,X		; 15 6B ; OR accumulator with memory $6B.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $7FFF.w,X		; 7D FF 7F ; Add $7FFF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $00.b,X		; 15 00 ; OR accumulator with memory $00.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CD.b		; 00 CD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $36.b,X		; 75 36 ; Add $36.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	adc $14.b,S		; 63 14 ; Add with carry (stack relative) $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$2C.b]		; C7 2C ; Compare accumulator (long) [$2C.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $49AE.w,X		; 3D AE 49 ; AND accumulator with memory $49AE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stz $62.b,X		; 74 62 ; Store zero to $62.b,X [Reads: X Index]
	cpx $891C.w		; EC 1C 89 ; Compare $891C.w with X register [Reads: X Index] [Flags: ZNC]
	.db $10, $FF		; 10 FF ; Branch if plus to $10, $FF [Flow: branch]
	adc $C71463.l,X		; 7F 63 14 C7 ; Add long $C71463.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $3D2A.w		; 2C 2A 3D ; Test bits $3D2A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ldx $7449.w		; AE 49 74 ; Load $7449.w into X register [Writes: X Index] [Flags: ZN]
	.db $62, $2D, $1D		; 62 2D 1D ; Push effective relative address $62, $2D, $1D [Writes: Stack Pointer]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $C6		; 10 C6 ; Branch if plus to $10, $C6 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $5294.w		; 2D 94 52 ; Logical AND $5294.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $2F77.w,X		; BD 77 2F ; Load $2F77.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $BA.b		; 25 BA ; Logical AND $BA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $29.b,X		; F5 29 ; Subtract $29.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $14637F.l,X		; FF 7F 63 14 ; Subtract with carry (long,X) $14637F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $2D.b		; 26 2D ; Rotate left $2D.b [Reads: Direct Page] [Flags: ZNC]
	bit #$CB39.w		; 89 39 CB ; Test bits #$CB39.w with accumulator [Reads: Accumulator] [Flags: Z]
	and $2D26.w,X		; 3D 26 2D ; AND accumulator with memory $2D26.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $1D2D.w,X		; 3D 2D 1D ; AND accumulator with memory $1D2D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $14.b,S		; 63 14 ; Add with carry (stack relative) $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$2C.b]		; C7 2C ; Compare accumulator (long) [$2C.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $49AE.w,X		; 3D AE 49 ; AND accumulator with memory $49AE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stz $62.b,X		; 74 62 ; Store zero to $62.b,X [Reads: X Index]
	cpx $891C.w		; EC 1C 89 ; Compare $891C.w with X register [Reads: X Index] [Flags: ZNC]
	.db $10, $FF		; 10 FF ; Branch if plus to $10, $FF [Flow: branch]
	adc $E41463.l,X		; 7F 63 14 E4 ; Add long $E41463.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $05.b		; 24 05 ; Test bits $05.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and #$3147.w		; 29 47 31 ; Logical AND #$3147.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpx $24.b		; E4 24 ; Compare $24.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp [$2C.b]		; C7 2C ; Compare accumulator (long) [$2C.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $C6		; 10 C6 ; Branch if plus to $10, $C6 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $2590.w,X		; 1D 90 25 ; OR accumulator with memory $2590.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pea $C821.w		; F4 21 C8 ; Push absolute address $C821.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	trb $EC.b		; 14 EC ; Test and reset bits $EC.b [Reads: Accumulator] [Flags: Z]
	trb $1089.w		; 1C 89 10 ; Test and reset bits $1089.w [Reads: Accumulator] [Flags: Z]
	sbc $0C867F.l,X		; FF 7F 86 0C ; Subtract with carry (long,X) $0C867F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $0A		; 10 0A ; Branch if plus to $10, $0A [Flow: branch]
	ora $214C.w,Y		; 19 4C 21 ; OR accumulator with memory $214C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $36.b,X		; 35 36 ; Logical AND $36.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $BF4B.w		; 1C 4B BF ; Test and reset bits $BF4B.w [Reads: Accumulator] [Flags: Z]
	adc $1018C6.l		; 6F C6 18 10 ; Add with carry (long) $1018C6.l [Writes: Accumulator] [Flags: ZVNC]
	and ($B8.b,X)		; 21 B8 ; Logical AND ($B8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $9C.b,X		; 35 9C ; Logical AND $9C.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($08.b,S),Y		; 73 08 ; Add with carry (stack relative indirect indexed) ($08.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($DB.b,X)		; 41 DB ; Exclusive OR accumulator with memory ($DB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $AD.b,X		; 16 AD ; Arithmetic shift left $AD.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc ($FF.b,X)		; 61 FF ; Add with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $E41463.l,X		; 7F 63 14 E4 ; Add long $E41463.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $26.b		; 24 26 ; Test bits $26.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $3989.w		; 2D 89 39 ; Logical AND $3989.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit #$7339.w		; 89 39 73 ; Test bits #$7339.w with accumulator [Reads: Accumulator] [Flags: Z]
	lsr $5EF7.w		; 4E F7 5E ; Logical shift right $5EF7.w [Flags: ZNC]
	adc $14.b,S		; 63 14 ; Add with carry (stack relative) $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ora [$65.b]		; 07 65 ; OR accumulator with memory (long) [$65.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$5169.w		; 49 69 51 ; Exclusive OR #$5169.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $6944E7.l,X		; 7F E7 44 69 ; Add long $6944E7.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $7E4F.w,X		; 5D 4F 7E ; Exclusive OR accumulator with memory $7E4F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $10637F.l,X		; FF 7F 63 10 ; Subtract with carry (long,X) $10637F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$28.b]		; C7 28 ; Compare accumulator (long) [$28.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cpx $24.b		; E4 24 ; Compare $24.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	lda $15.b		; A5 15 ; Load $15.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $15.b		; A5 15 ; Load $15.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $2A49.w		; AE 49 2A ; Load $2A49.w into X register [Writes: X Index] [Flags: ZN]
	and $14A7.w,X		; 3D A7 14 ; AND accumulator with memory $14A7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $21B321.l		; 4F 21 B3 21 ; Exclusive OR accumulator with memory (long) $21B321.l [Writes: Accumulator] [Flags: ZN]
	ora $32.b,X		; 15 32 ; OR accumulator with memory $32.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	rol $56F8.w,X		; 3E F8 56 ; Rotate left $56F8.w,X [Reads: X Index] [Flags: ZNC]
	ora $7FFF25.l		; 0F 25 FF 7F ; OR accumulator with memory (long) $7FFF25.l [Writes: Accumulator] [Flags: ZN]
	lda [$14.b]		; A7 14 ; Load accumulator (long) [$14.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $21B321.l		; 4F 21 B3 21 ; Exclusive OR accumulator with memory (long) $21B321.l [Writes: Accumulator] [Flags: ZN]
	ora $32.b,X		; 15 32 ; OR accumulator with memory $32.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	rol $56F8.w,X		; 3E F8 56 ; Rotate left $56F8.w,X [Reads: X Index] [Flags: ZNC]
	cpx $C61C.w		; EC 1C C6 ; Compare $C61C.w with X register [Reads: X Index] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $5294.w		; 2D 94 52 ; Logical AND $5294.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $2F77.w,X		; BD 77 2F ; Load $2F77.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $BA.b		; 25 BA ; Logical AND $BA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $29.b,X		; F5 29 ; Subtract $29.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $14A77F.l,X		; FF 7F A7 14 ; Subtract with carry (long,X) $14A77F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and ($CB.b),Y		; 31 CB ; AND accumulator with memory ($CB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $460D.w,X		; 3D 0D 46 ; AND accumulator with memory $460D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and ($93.b),Y		; 31 93 ; AND accumulator with memory ($93.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($EC.b,X)		; 21 EC ; Logical AND ($EC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $14A7.w		; 1C A7 14 ; Test and reset bits $14A7.w [Reads: Accumulator] [Flags: Z]
	eor $21B321.l		; 4F 21 B3 21 ; Exclusive OR accumulator with memory (long) $21B321.l [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	and ($C8.b)		; 32 C8 ; AND accumulator with memory (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $AF.b		; 64 AF ; Store zero to $AF.b
	adc $7FFF.w,X		; 7D FF 7F ; Add $7FFF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0CA57F.l,X		; FF 7F A5 0C ; Subtract with carry (long,X) $0CA57F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $6F19.w		; 2D 19 6F ; Logical AND $6F19.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($B1.b,X)		; 21 B1 ; Logical AND ($B1.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and #$192D.w		; 29 2D 19 ; Logical AND #$192D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $18CA21.l		; 4F 21 CA 18 ; Exclusive OR accumulator with memory (long) $18CA21.l [Writes: Accumulator] [Flags: ZN]
	sbc #$B114.w		; E9 14 B1 ; Subtract #$B114.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and ($57.b,X)		; 21 57 ; Logical AND ($57.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $9A.b,X		; 36 9A ; Rotate left $9A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ora $D9.b,S		; 03 D9 ; OR accumulator with stack relative $D9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr $77.b,X		; 56 77 ; Logical shift right $77.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $0CA57F.l,X		; FF 7F A5 0C ; Subtract with carry (long,X) $0CA57F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $6F19.w		; 2D 19 6F ; Logical AND $6F19.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($B1.b,X)		; 21 B1 ; Logical AND ($B1.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and #$192D.w		; 29 2D 19 ; Logical AND #$192D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($21.b,S),Y		; 93 21 ; Store accumulator (stack relative indirect indexed) ($21.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	cpx $C61C.w		; EC 1C C6 ; Compare $C61C.w with X register [Reads: X Index] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and $9C.b,X		; 35 9C ; Logical AND $9C.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($08.b,S),Y		; 73 08 ; Add with carry (stack relative indirect indexed) ($08.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $1ABA.w,X		; 3D BA 1A ; AND accumulator with memory $1ABA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $FF5D.w		; CE 5D FF ; Decrement $FF5D.w [Flags: ZN]
	adc $040CA5.l,X		; 7F A5 0C 04 ; Add long $040CA5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $66.b		; 25 66 ; Logical AND $66.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($A8.b),Y		; 31 A8 ; AND accumulator with memory ($A8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $7FFF.w,Y		; 39 FF 7F ; AND accumulator with memory $7FFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $18CA21.l		; 4F 21 CA 18 ; Exclusive OR accumulator with memory (long) $18CA21.l [Writes: Accumulator] [Flags: ZN]
	lda [$14.b]		; A7 14 ; Load accumulator (long) [$14.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($06.b,S),Y		; 73 06 ; Add with carry (stack relative indirect indexed) ($06.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $EF21.w		; AD 21 EF ; Load $EF21.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and ($FF.b,X)		; 21 FF ; Logical AND ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $FF7FFF.l,X		; 7F FF 7F FF ; Add long $FF7FFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $A57FFF.l,X		; 7F FF 7F A5 ; Add long $A57FFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0885.w		; 0C 85 08 ; Test and set bits $0885.w [Reads: Accumulator] [Flags: Z]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	trb $84.b		; 14 84 ; Test and reset bits $84.b [Reads: Accumulator] [Flags: Z]
	and #$2984.w		; 29 84 29 ; Logical AND #$2984.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda [$14.b]		; A7 14 ; Load accumulator (long) [$14.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$14.b]		; A7 14 ; Load accumulator (long) [$14.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $19.b		; 46 19 ; Logical shift right $19.b [Reads: Direct Page] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and $B0.b		; 25 B0 ; Logical AND $B0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor $8C53.w,Y		; 59 53 8C ; Exclusive OR accumulator with memory $8C53.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($29.b,X)		; 41 29 ; Exclusive OR accumulator with memory ($29.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $FF.b,X		; 35 FF ; Logical AND $FF.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $4614A5.l,X		; 7F A5 14 46 ; Add long $4614A5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $25C8.w,Y		; 19 C8 25 ; OR accumulator with memory $25C8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $3A		; B0 3A ; Branch if carry set to $B0, $3A [Flow: branch]
	eor $2853.w,Y		; 59 53 28 ; Exclusive OR accumulator with memory $2853.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $28E7.w,X		; 3D E7 28 ; AND accumulator with memory $28E7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $5294.w		; 2D 94 52 ; Logical AND $5294.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $2F77.w,X		; BD 77 2F ; Load $2F77.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $BA.b		; 25 BA ; Logical AND $BA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $29.b,X		; F5 29 ; Subtract $29.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0C637F.l,X		; FF 7F 63 0C ; Subtract with carry (long,X) $0C637F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and ($4A.b),Y		; 31 4A ; AND accumulator with memory ($4A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $418C.w,Y		; 39 8C 41 ; AND accumulator with memory $418C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $2C.b		; E6 2C ; Increment $2C.b [Reads: Direct Page] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and #$3D28.w		; 29 28 3D ; Logical AND #$3D28.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $19.b		; 46 19 ; Logical shift right $19.b [Reads: Direct Page] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and $B0.b		; 25 B0 ; Logical AND $B0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor $9C53.w,Y		; 59 53 9C ; Exclusive OR accumulator with memory $9C53.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $29.b,X		; 55 29 ; Exclusive OR accumulator with memory $29.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0C637F.l,X		; FF 7F 63 0C ; Subtract with carry (long,X) $0C637F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $2C.b		; C6 2C ; Decrement $2C.b [Reads: Direct Page] [Flags: ZN]
	sbc [$2C.b]		; E7 2C ; Subtract with carry (long) [$2C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and #$C535.w		; 29 35 C5 ; Logical AND #$C535.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $1D.b		; 24 1D ; Test bits $1D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sbc [$28.b]		; E7 28 ; Subtract with carry (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $15.b		; 05 15 ; Logical OR $15.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and ($CB.b,X)		; 21 CB ; Logical AND ($CB.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $3E4F.w		; 2D 4F 3E ; Logical AND $3E4F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $994B.w,X		; 5D 4B 99 ; Exclusive OR accumulator with memory $994B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $F5.b,X		; 36 F5 ; Rotate left $F5.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $0814A5.l,X		; 7F A5 14 08 ; Add long $0814A5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($4A.b,X)		; 21 4A ; Logical AND ($4A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and #$318C.w		; 29 8C 31 ; Logical AND #$318C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($4E.b,S),Y		; 73 4E ; Add with carry (stack relative indirect indexed) ($4E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $18C67F.l,X		; FF 7F C6 18 ; Subtract with carry (long,X) $18C67F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and $9C.b,X		; 35 9C ; Logical AND $9C.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($08.b,S),Y		; 73 08 ; Add with carry (stack relative indirect indexed) ($08.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $1ABA.w,X		; 3D BA 1A ; AND accumulator with memory $1ABA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $FF5D.w		; CE 5D FF ; Decrement $FF5D.w [Flags: ZN]
	adc $A71084.l,X		; 7F 84 10 A7 ; Add long $A71084.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $24C9.w		; 1C C9 24 ; Test and reset bits $24C9.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and $394A.w		; 2D 4A 39 ; Logical AND $394A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sty $52.b,X		; 94 52 ; Store Y register $52.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	stz $A573.w		; 9C 73 A5 ; Store zero to $A573.w
	trb $68.b		; 14 68 ; Test and reset bits $68.b [Reads: Accumulator] [Flags: Z]
	eor $ED.b		; 45 ED ; Exclusive OR $ED.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $6650.w,Y		; 59 50 66 ; Exclusive OR accumulator with memory $6650.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	eor ($FF.b,S),Y		; 53 FF ; XOR accumulator (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $2514A5.l,X		; 7F A5 14 25 ; Add long $2514A5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b,X		; 15 00 ; OR accumulator with memory $00.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $1CED.w		; 1C ED 1C ; Test and reset bits $1CED.w [Reads: Accumulator] [Flags: Z]
	.db $B0, $3A		; B0 3A ; Branch if carry set to $B0, $3A [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and $A4.b		; 25 A4 ; Logical AND $A4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	eor $6A4B.w,Y		; 59 4B 6A ; Exclusive OR accumulator with memory $6A4B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $77.b,X		; 95 77 ; Store accumulator to $77.b,X [Reads: Accumulator, X Index]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	adc $8C5DCE.l,X		; 7F CE 5D 8C ; Add long $8C5DCE.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b,X		; 55 FF ; Exclusive OR accumulator with memory $FF.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $2524A4.l,X		; 7F A4 24 25 ; Add long $2524A4.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $6A4B.w,Y		; 59 4B 6A ; Exclusive OR accumulator with memory $6A4B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $77.b,X		; 95 77 ; Store accumulator to $77.b,X [Reads: Accumulator, X Index]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	adc $6A5DEE.l,X		; 7F EE 5D 6A ; Add long $6A5DEE.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $18C6.w		; 4D C6 18 ; Exclusive OR $18C6.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $5294.w		; 2D 94 52 ; Logical AND $5294.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $2F77.w,X		; BD 77 2F ; Load $2F77.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $BA.b		; 25 BA ; Logical AND $BA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $29.b,X		; F5 29 ; Subtract $29.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $24A47F.l,X		; FF 7F A4 24 ; Subtract with carry (long,X) $24A47F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $55AC.w		; 4D AC 55 ; Exclusive OR $55AC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc $255D.w		; EE 5D 25 ; Increment $255D.w [Flags: ZN]
	eor $5DEE.w		; 4D EE 5D ; Exclusive OR $5DEE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	eor ($A4.b),Y		; 51 A4 ; Exclusive OR accumulator with memory ($A4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	eor $6A4B.w,Y		; 59 4B 6A ; Exclusive OR accumulator with memory $6A4B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	adc [$7B.b],Y		; 77 7B ; Add with carry (long indexed) [$7B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($CF.b),Y		; 11 CF ; OR accumulator with memory ($CF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $B5.b,X		; 75 B5 ; Add $B5.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $7FFF.w,X		; 7E FF 7F ; Rotate right $7FFF.w,X [Reads: X Index] [Flags: ZNC]
	ldy $24.b		; A4 24 ; Load $24.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $55AC.w		; 4D AC 55 ; Exclusive OR $55AC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc $475D.w		; EE 5D 47 ; Increment $475D.w [Flags: ZN]
	and $5DEE.w,X		; 3D EE 5D ; AND accumulator with memory $5DEE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	eor ($A4.b),Y		; 51 A4 ; Exclusive OR accumulator with memory ($A4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $A9.b		; 24 A9 ; Test bits $A9.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $D0, $7D		; D0 7D ; Branch if not equal to $D0, $7D [Flow: branch]
	wai		; CB ; Wait for interrupt
	ror $FA.b,X		; 76 FA ; Rotate right $FA.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc $AC64A9.l,X		; 7F A9 64 AC ; Add long $AC64A9.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b,X		; 55 FF ; Exclusive OR accumulator with memory $FF.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $6A34C8.l,X		; 7F C8 34 6A ; Add long $6A34C8.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $55AC.w		; 4D AC 55 ; Exclusive OR $55AC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc $B35D.w		; EE 5D B3 ; Increment $B35D.w [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $14637F.l,X		; FF 7F 63 14 ; Subtract with carry (long,X) $14637F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $29		; 10 29 ; Branch if plus to $10, $29 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and $739C.w,X		; 3D 9C 73 ; AND accumulator with memory $739C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc ($BA.b,X)		; 61 BA ; Add with carry ($BA.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and ($7E.b),Y		; 31 7E ; AND accumulator with memory ($7E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $24A47F.l,X		; FF 7F A4 24 ; Subtract with carry (long,X) $24A47F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	eor $4D28.w,X		; 5D 28 4D ; Exclusive OR accumulator with memory $4D28.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $41.b		; 06 41 ; Arithmetic shift left $41.b [Reads: Direct Page] [Flags: ZNC]
	ora #$945B.w		; 09 5B 94 ; Logical OR #$945B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($9C.b)		; 52 9C ; Exclusive OR accumulator with memory (indirect) ($9C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($A4.b,S),Y		; 73 A4 ; Add with carry (stack relative indirect indexed) ($A4.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $88.b		; 24 88 ; Test bits $88.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	eor #$5EE4.w		; 49 E4 5E ; Exclusive OR #$5EE4.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc [$73.b]		; 67 73 ; Add with carry (long) [$73.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$44.b]		; E7 44 ; Subtract with carry (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$4F5D.w		; 69 5D 4F ; Add #$4F5D.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ror $7FFF.w,X		; 7E FF 7F ; Rotate right $7FFF.w,X [Reads: X Index] [Flags: ZNC]
	sty $20.b		; 84 20 ; Store Y register to $20.b [Reads: Y Index]
	ora $55.b		; 05 55 ; Logical OR $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	eor $7795.w,X		; 5D 95 77 ; Exclusive OR accumulator with memory $7795.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $A57F.w,Y		; F9 7F A5 ; Subtract with carry $A57F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $10EA.w		; 0C EA 10 ; Test and set bits $10EA.w [Reads: Accumulator] [Flags: Z]
	eor $F319.w		; 4D 19 F3 ; Exclusive OR $F319.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and #$3EB6.w		; 29 B6 3E ; Logical AND #$3EB6.w with accumulator [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	and $2589.w		; 2D 89 25 ; Logical AND $2589.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $0CA57F.l,X		; FF 7F A5 0C ; Subtract with carry (long,X) $0CA57F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	nop		; EA ; No operation
	.db $10, $4D		; 10 4D ; Branch if plus to $10, $4D [Flow: branch]
	ora $29F3.w,Y		; 19 F3 29 ; OR accumulator with memory $29F3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $3E.b,Y		; B6 3E ; Load X register $3E.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and ($06.b,X)		; 21 06 ; Logical AND ($06.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $18C6.w,Y		; 19 C6 18 ; OR accumulator with memory $18C6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $5294.w		; 2D 94 52 ; Logical AND $5294.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $2F77.w,X		; BD 77 2F ; Load $2F77.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $BA.b		; 25 BA ; Logical AND $BA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $29.b,X		; F5 29 ; Subtract $29.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0C637F.l,X		; FF 7F 63 0C ; Subtract with carry (long,X) $0C637F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and ($AA.b,X)		; 21 AA ; Logical AND ($AA.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and #$29AD.w		; 29 AD 29 ; Logical AND #$29AD.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $90, $21		; 90 21 ; Branch if carry clear to $90, $21 [Flow: branch]
	eor $6819.w		; 4D 19 68 ; Exclusive OR $6819.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($A5.b,X)		; 21 A5 ; Logical AND ($A5.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $10EA.w		; 0C EA 10 ; Test and set bits $10EA.w [Reads: Accumulator] [Flags: Z]
	eor $F319.w		; 4D 19 F3 ; Exclusive OR $F319.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and #$3EB6.w		; 29 B6 3E ; Logical AND #$3EB6.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpy $E52A.w		; CC 2A E5 ; Compare $E52A.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora $FF.b,X		; 15 FF ; OR accumulator with memory $FF.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $260C63.l,X		; 7F 63 0C 26 ; Add long $260C63.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $2167.w,Y		; 19 67 21 ; OR accumulator with memory $2167.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($05.b,X)		; 21 05 ; Logical AND ($05.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $10EA.w,Y		; 19 EA 10 ; OR accumulator with memory $10EA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $19.b		; 06 19 ; Arithmetic shift left $19.b [Reads: Direct Page] [Flags: ZNC]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	nop		; EA ; No operation
	.db $10, $4D		; 10 4D ; Branch if plus to $10, $4D [Flow: branch]
	ora $29F3.w,Y		; 19 F3 29 ; OR accumulator with memory $29F3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $3E.b,Y		; B6 3E ; Load X register $3E.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	lda $AA29.w		; AD 29 AA ; Load $AA29.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$7FFF.w		; 29 FF 7F ; Logical AND #$7FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc [$10.b]		; E7 10 ; Subtract with carry (long) [$10.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $AD.b,X		; 15 AD ; OR accumulator with memory $AD.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $2A10.w,X		; 1D 10 2A ; OR accumulator with memory $2A10.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$42.b],Y		; F7 42 ; Subtract with carry (long indexed) [$42.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $FF5F.w,X		; BD 5F FF ; Load $FF5F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $1018C6.l,X		; 7F C6 18 10 ; Add long $1018C6.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($B8.b,X)		; 21 B8 ; Logical AND ($B8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $9C.b,X		; 35 9C ; Logical AND $9C.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($08.b,S),Y		; 73 08 ; Add with carry (stack relative indirect indexed) ($08.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($BA.b,X)		; 41 BA ; Exclusive OR accumulator with memory ($BA.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $FF61.w		; AD 61 FF ; Load $FF61.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $AE0C63.l,X		; 7F 63 0C AE ; Add long $AE0C63.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $F0.b,X		; 15 F0 ; OR accumulator with memory $F0.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $15AE.w,X		; 1D AE 15 ; OR accumulator with memory $15AE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and #$5294.w		; 29 94 52 ; Logical AND #$5294.w with accumulator [Writes: Accumulator] [Flags: ZN]
	stz $C673.w		; 9C 73 C6 ; Store zero to $C673.w
	bit $26.b		; 24 26 ; Test bits $26.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	eor $67.b		; 45 67 ; Exclusive OR $67.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($C9.b,X)		; 61 C9 ; Add with carry ($C9.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $47.b		; 65 47 ; Add $47.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $C8.b		; 45 C8 ; Exclusive OR $C8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $6A8C.w,Y		; 59 8C 6A ; Exclusive OR accumulator with memory $6A8C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $0CA57F.l,X		; FF 7F A5 0C ; Subtract with carry (long,X) $0CA57F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	nop		; EA ; No operation
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1DEC.w,X		; 1D EC 1D ; OR accumulator with memory $1DEC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($29.b,S),Y		; F3 29 ; Subtract with carry (stack relative indirect indexed) ($29.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $8419.w		; 4D 19 84 ; Exclusive OR $8419.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $CA		; 10 CA ; Branch if plus to $10, $CA [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	rol $D325.w		; 2E 25 D3 ; Rotate left $D325.w [Flags: ZNC]
	and $529A.w,Y		; 39 9A 52 ; AND accumulator with memory $529A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $2941.w		; 8C 41 29 ; Store Y register to $2941.w [Reads: Y Index]
	and $FF.b,X		; 35 FF ; Logical AND $FF.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $CA1084.l,X		; 7F 84 10 CA ; Add long $CA1084.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	rol $F325.w		; 2E 25 F3 ; Rotate left $F325.w [Flags: ZNC]
	and $52BA.w,Y		; 39 BA 52 ; AND accumulator with memory $52BA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$E72D.w		; 29 2D E7 ; Logical AND #$E72D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $C6.b		; 24 C6 ; Test bits $C6.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $5294.w		; 2D 94 52 ; Logical AND $5294.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $2F77.w,X		; BD 77 2F ; Load $2F77.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $BA.b		; 25 BA ; Logical AND $BA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $29.b,X		; F5 29 ; Subtract $29.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0C637F.l,X		; FF 7F 63 0C ; Subtract with carry (long,X) $0C637F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$4A35.w		; 29 35 4A ; Logical AND #$4A35.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $418C.w,Y		; 39 8C 41 ; AND accumulator with memory $418C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and ($2E.b),Y		; 31 2E ; AND accumulator with memory ($2E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $29.b		; 25 29 ; Logical AND $29.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $1084.w		; 2D 84 10 ; Logical AND $1084.w with accumulator [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	rol $D325.w		; 2E 25 D3 ; Rotate left $D325.w [Flags: ZNC]
	and $52BA.w,Y		; 39 BA 52 ; AND accumulator with memory $52BA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	asl $1CF5.w,X		; 1E F5 1C ; Arithmetic shift left $1CF5.w,X [Reads: X Index] [Flags: ZNC]
	sbc $0C637F.l,X		; FF 7F 63 0C ; Subtract with carry (long,X) $0C637F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $28.b		; C6 28 ; Decrement $28.b [Reads: Direct Page] [Flags: ZN]
	sbc [$2C.b]		; E7 2C ; Subtract with carry (long) [$2C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and #$C631.w		; 29 31 C6 ; Logical AND #$C631.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc [$24.b]		; E7 24 ; Subtract with carry (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sty $10.b		; 84 10 ; Store Y register to $10.b [Reads: Y Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	rol $D325.w		; 2E 25 D3 ; Rotate left $D325.w [Flags: ZNC]
	and $52BA.w,Y		; 39 BA 52 ; AND accumulator with memory $52BA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $3529.w,X		; 3D 29 35 ; AND accumulator with memory $3529.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $1CE47F.l,X		; FF 7F E4 1C ; Subtract with carry (long,X) $1CE47F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $25.b		; 45 25 ; Exclusive OR $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $2D.b		; 86 2D ; Store X register to $2D.b [Reads: X Index]
	cmp [$35.b]		; C7 35 ; Compare accumulator (long) [$35.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and $77385A.l		; 2F 5A 38 77 ; AND accumulator with memory (long) $77385A.l [Writes: Accumulator] [Flags: ZN]
	sbc $10847F.l,X		; FF 7F 84 10 ; Subtract with carry (long,X) $10847F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and $9C.b,X		; 35 9C ; Logical AND $9C.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($08.b,S),Y		; 73 08 ; Add with carry (stack relative indirect indexed) ($08.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($DB.b,X)		; 41 DB ; Exclusive OR accumulator with memory ($DB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $8C.b,X		; 16 8C ; Arithmetic shift left $8C.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $7FFF.w,X		; 5D FF 7F ; Exclusive OR accumulator with memory $7FFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $10.b		; 84 10 ; Store Y register to $10.b [Reads: Y Index]
	cmp #$CC14.w		; C9 14 CC ; Compare #$CC14.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	trb $0D.b		; 14 0D ; Test and reset bits $0D.b [Reads: Accumulator] [Flags: Z]
	ora $3529.w,Y		; 19 29 35 ; OR accumulator with memory $3529.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $52.b,X		; 94 52 ; Store Y register $52.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	stz $A573.w		; 9C 73 A5 ; Store zero to $A573.w
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and ($6A.b),Y		; 31 6A ; AND accumulator with memory ($6A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $41AC.w,Y		; 39 AC 41 ; AND accumulator with memory $41AC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$40.b]		; E7 40 ; Subtract with carry (long) [$40.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$0E5D.w		; 69 5D 0E ; Add #$0E5D.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc ($FF.b)		; 72 FF ; Add with carry (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $A90C64.l,X		; 7F 64 0C A9 ; Add long $A90C64.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $1CEB.w		; 1C EB 1C ; Test and reset bits $1CEB.w [Reads: Accumulator] [Flags: Z]
	sbc ($39.b,S),Y		; F3 39 ; Subtract with carry (stack relative indirect indexed) ($39.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $108521.l		; 2F 21 85 10 ; AND accumulator with memory (long) $108521.l [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $EB		; 10 EB ; Branch if plus to $10, $EB [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($1D.b),Y		; 91 1D ; Store accumulator ($1D.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and $2E.b,X		; 35 2E ; Logical AND $2E.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $210C25.l		; 4F 25 0C 21 ; Exclusive OR accumulator with memory (long) $210C25.l [Writes: Accumulator] [Flags: ZN]
	sbc $10857F.l,X		; FF 7F 85 10 ; Subtract with carry (long,X) $10857F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$2D10.w		; C9 10 2D ; Compare #$2D10.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $1D91.w,Y		; 19 91 1D ; OR accumulator with memory $1D91.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $2E.b,X		; 35 2E ; Logical AND $2E.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$8742.w		; 09 42 87 ; Logical OR #$8742.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($C6.b),Y		; 31 C6 ; AND accumulator with memory ($C6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $5294.w		; 2D 94 52 ; Logical AND $5294.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $2F77.w,X		; BD 77 2F ; Load $2F77.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $BA.b		; 25 BA ; Logical AND $BA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $29.b,X		; F5 29 ; Subtract $29.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $10857F.l,X		; FF 7F 85 10 ; Subtract with carry (long,X) $10857F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$EB14.w		; C9 14 EB ; Compare #$EB14.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	rol $C821.w		; 2E 21 C8 ; Rotate left $C821.w [Flags: ZNC]
	.db $10, $6E		; 10 6E ; Branch if plus to $10, $6E [Flow: branch]
	and ($0B.b,X)		; 21 0B ; Logical AND ($0B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $18C6.w,Y		; 19 C6 18 ; OR accumulator with memory $18C6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $19.b		; 84 19 ; Store Y register to $19.b [Reads: Y Index]
	lsr $26.b		; 46 26 ; Logical shift right $26.b [Reads: Direct Page] [Flags: ZNC]
	adc #$FF3B.w		; 69 3B FF ; Add #$FF3B.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora $18D5.w,Y		; 19 D5 18 ; OR accumulator with memory $18D5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$FF10.w		; A9 10 FF ; Load #$FF10.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $881085.l,X		; 7F 85 10 88 ; Add long $881085.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $A9		; 10 A9 ; Branch if plus to $10, $A9 [Flow: branch]
	.db $10, $CB		; 10 CB ; Branch if plus to $10, $CB [Flow: branch]
	trb $86.b		; 14 86 ; Test and reset bits $86.b [Reads: Accumulator] [Flags: Z]
	.db $10, $2C		; 10 2C ; Branch if plus to $10, $2C [Flow: branch]
	ora $10C8.w,Y		; 19 C8 10 ; OR accumulator with memory $10C8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	ror $F321.w		; 6E 21 F3 ; Rotate right $F321.w [Flags: ZNC]
	and ($B7.b,X)		; 21 B7 ; Logical AND ($B7.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $42, $AA		; 42 AA ; Reserved instruction
	adc $0B.b		; 65 0B ; Add $0B.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $18EB.w,Y		; 19 EB 18 ; OR accumulator with memory $18EB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $10857F.l,X		; FF 7F 85 10 ; Subtract with carry (long,X) $10857F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$EB14.w		; C9 14 EB ; Compare #$EB14.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	rol $B221.w		; 2E 21 B2 ; Rotate left $B221.w [Flags: ZNC]
	and $4298.w		; 2D 98 42 ; Logical AND $4298.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $108467.l,X		; BF 67 84 10 ; Load long $108467.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and $9C.b,X		; 35 9C ; Logical AND $9C.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($26.b,S),Y		; 73 26 ; Add with carry (stack relative indirect indexed) ($26.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($DB.b,X)		; 41 DB ; Exclusive OR accumulator with memory ($DB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $CB.b,X		; 16 CB ; Arithmetic shift left $CB.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc ($FF.b,X)		; 61 FF ; Add with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $0D0C63.l,X		; 7F 63 0C 0D ; Add long $0D0C63.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($91.b),Y		; 11 91 ; OR accumulator with memory ($91.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $2E35.w,X		; 1D 35 2E ; OR accumulator with memory $2E35.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $9421.w		; 2D 21 94 ; Logical AND $9421.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($9C.b)		; 52 9C ; Exclusive OR accumulator with memory (indirect) ($9C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($63.b,S),Y		; 73 63 ; Add with carry (stack relative indirect indexed) ($63.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $E6.b		; 14 E6 ; Test and reset bits $E6.b [Reads: Accumulator] [Flags: Z]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	eor #$8B61.w		; 49 61 8B ; Exclusive OR #$8B61.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $E7.b		; 65 E7 ; Add $E7.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	mvp $5D,$69		; 44 69 5D ; Move block positive $5D,$69 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	rol $FF7A.w		; 2E 7A FF ; Rotate left $FF7A.w [Flags: ZNC]
	adc $C91085.l,X		; 7F 85 10 C9 ; Add long $C91085.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $85.b,X		; 35 85 ; Logical AND $85.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $85		; 10 85 ; Branch if plus to $10, $85 [Flow: branch]
	.db $10, $63		; 10 63 ; Branch if plus to $10, $63 [Flow: branch]
	tsb BG2SC.w		; 0C 08 21 ; Test and set bits BG2SC.w [Reads: Accumulator] [Flags: Z]
	lda $5235.w		; AD 35 52 ; Load $5235.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $CC67.w,Y		; 39 67 CC ; AND accumulator with memory $CC67.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($8A.b),Y		; 31 8A ; AND accumulator with memory ($8A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$7FFF.w		; 29 FF 7F ; Logical AND #$7FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and ($AD.b,X)		; 21 AD ; Logical AND ($AD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $52.b,X		; 35 52 ; Logical AND $52.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $6967.w,Y		; 39 67 69 ; AND accumulator with memory $6967.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $27.b		; 25 27 ; Logical AND $27.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $18C6.w,X		; 1D C6 18 ; OR accumulator with memory $18C6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $5294.w		; 2D 94 52 ; Logical AND $5294.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $2F77.w,X		; BD 77 2F ; Load $2F77.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $BA.b		; 25 BA ; Logical AND $BA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $29.b,X		; F5 29 ; Subtract $29.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $10847F.l,X		; FF 7F 84 10 ; Subtract with carry (long,X) $10847F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and ($8A.b,X)		; 21 8A ; Logical AND ($8A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and #$31AC.w		; 29 AC 31 ; Logical AND #$31AC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and ($AD.b,X)		; 21 AD ; Logical AND ($AD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $69.b,X		; 35 69 ; Logical AND $69.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $63.b		; 25 63 ; Logical AND $63.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb BG2SC.w		; 0C 08 21 ; Test and set bits BG2SC.w [Reads: Accumulator] [Flags: Z]
	lda $5235.w		; AD 35 52 ; Load $5235.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $D767.w,Y		; 39 67 D7 ; AND accumulator with memory $D767.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ldx $0019.w		; AE 19 00 ; Load $0019.w into X register [Writes: X Index] [Flags: ZN]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $06		; 10 06 ; Branch if plus to $10, $06 [Flow: branch]
	ora $1D27.w,Y		; 19 27 1D ; OR accumulator with memory $1D27.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$0625.w		; 69 25 06 ; Add #$0625.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora $2108.w,Y		; 19 08 21 ; OR accumulator with memory $2108.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$1D.b]		; 27 1D ; AND accumulator with memory (long) [$1D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $5294.w		; 2D 94 52 ; Logical AND $5294.w with accumulator [Writes: Accumulator] [Flags: ZN]
	stz $2673.w		; 9C 73 26 ; Store zero to $2673.w
	rol $4F8A.w		; 2E 8A 4F ; Rotate left $4F8A.w [Flags: ZNC]
	ldx $3A.b		; A6 3A ; Load $3A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	sbc $10C77F.l,X		; FF 7F C7 10 ; Subtract with carry (long,X) $10C77F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$8D11.w		; 09 11 8D ; Logical OR #$8D11.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $29F0.w,X		; 1D F0 29 ; OR accumulator with memory $29F0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $42, $9D		; 42 9D ; Reserved instruction
	eor $C67FFF.l,X		; 5F FF 7F C6 ; Exclusive OR accumulator with memory (long,X) $C67FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and $9C.b,X		; 35 9C ; Logical AND $9C.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($08.b,S),Y		; 73 08 ; Add with carry (stack relative indirect indexed) ($08.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($BA.b,X)		; 41 BA ; Exclusive OR accumulator with memory ($BA.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $FF61.w		; AD 61 FF ; Load $FF61.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $E91084.l,X		; 7F 84 10 E9 ; Add long $E91084.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $2B		; 10 2B ; Branch if plus to $10, $2B [Flow: branch]
	ora $6D.b,X		; 15 6D ; OR accumulator with memory $6D.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $298A.w,X		; 1D 8A 29 ; OR accumulator with memory $298A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $52.b,X		; 94 52 ; Store Y register $52.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	stz $8473.w		; 9C 73 84 ; Store zero to $8473.w
	.db $10, $48		; 10 48 ; Branch if plus to $10, $48 [Flow: branch]
	and ($CC.b,X)		; 21 CC ; Logical AND ($CC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($77.b),Y		; 31 77 ; AND accumulator with memory ($77.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $E7.b,X		; 36 E7 ; Rotate left $E7.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	mvp $5D,$69		; 44 69 5D ; Move block positive $5D,$69 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $7FFF7E.l		; 4F 7E FF 7F ; Exclusive OR accumulator with memory (long) $7FFF7E.l [Writes: Accumulator] [Flags: ZN]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$1C.b]		; E7 1C ; Subtract with carry (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $521D.w		; CC 1D 52 ; Compare $521D.w with Y register [Reads: Y Index] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $8435.w		; AD 35 84 ; Load $8435.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $E6		; 10 E6 ; Branch if plus to $10, $E6 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	jmp $F219.w		; 4C 19 F2 ; Jump to $F219.w [Flow: jump]
	and #$46D8.w		; 29 D8 46 ; Logical AND #$46D8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sty $4A29.w		; 8C 29 4A ; Store Y register to $4A29.w [Reads: Y Index]
	ora ($FF.b),Y		; 11 FF ; OR accumulator with memory ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $E61084.l,X		; 7F 84 10 E6 ; Add long $E61084.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	jmp $F219.w		; 4C 19 F2 ; Jump to $F219.w [Flow: jump]
	and #$46D8.w		; 29 D8 46 ; Logical AND #$46D8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	trb $86.b		; 14 86 ; Test and reset bits $86.b [Reads: Accumulator] [Flags: Z]
	.db $10, $C6		; 10 C6 ; Branch if plus to $10, $C6 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $5294.w		; 2D 94 52 ; Logical AND $5294.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $2F77.w,X		; BD 77 2F ; Load $2F77.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $BA.b		; 25 BA ; Logical AND $BA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $29.b,X		; F5 29 ; Subtract $29.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $14637F.l,X		; FF 7F 63 14 ; Subtract with carry (long,X) $14637F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($4A.b),Y		; 11 4A ; OR accumulator with memory ($4A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($8C.b),Y		; 11 8C ; OR accumulator with memory ($8C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$1945.w		; 29 45 19 ; Logical AND #$1945.w with accumulator [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $AA.b		; 25 AA ; Logical AND $AA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $84.b		; 14 84 ; Test and reset bits $84.b [Reads: Accumulator] [Flags: Z]
	.db $10, $E6		; 10 E6 ; Branch if plus to $10, $E6 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	jmp $F219.w		; 4C 19 F2 ; Jump to $F219.w [Flow: jump]
	and #$46D8.w		; 29 D8 46 ; Logical AND #$46D8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sty $AA29.w		; 8C 29 AA ; Store Y register to $AA29.w [Reads: Y Index]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	adc $871463.l,X		; 7F 63 14 87 ; Add long $871463.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $A8		; 10 A8 ; Branch if plus to $10, $A8 [Flow: branch]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	ora $FF.b,X		; 15 FF ; OR accumulator with memory $FF.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $861D07.l,X		; 7F 07 1D 86 ; Add long $861D07.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $84		; 10 84 ; Branch if plus to $10, $84 [Flow: branch]
	.db $10, $E6		; 10 E6 ; Branch if plus to $10, $E6 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	jmp $F219.w		; 4C 19 F2 ; Jump to $F219.w [Flow: jump]
	and #$46D8.w		; 29 D8 46 ; Logical AND #$46D8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sty $AA29.w		; 8C 29 AA ; Store Y register to $AA29.w [Reads: Y Index]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	adc $0820C6.l,X		; 7F C6 20 08 ; Add long $0820C6.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($6B.b),Y		; 31 6B ; AND accumulator with memory ($6B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($CE.b,X)		; 41 CE ; Exclusive OR accumulator with memory ($CE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($52.b),Y		; 51 52 ; Exclusive OR accumulator with memory ($52.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $62, $39, $7F		; 62 39 7F ; Push effective relative address $62, $39, $7F [Writes: Stack Pointer]
	sbc $14637F.l,X		; FF 7F 63 14 ; Subtract with carry (long,X) $14637F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and $9C.b,X		; 35 9C ; Logical AND $9C.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($08.b,S),Y		; 73 08 ; Add with carry (stack relative indirect indexed) ($08.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($DB.b,X)		; 41 DB ; Exclusive OR accumulator with memory ($DB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $AD.b,X		; 16 AD ; Arithmetic shift left $AD.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc ($FF.b,X)		; 61 FF ; Add with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $241084.l,X		; 7F 84 10 24 ; Add long $241084.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $4986.w,Y		; 39 86 49 ; AND accumulator with memory $4986.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($31.b),Y		; 11 31 ; OR accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $D6.b		; 46 D6 ; Logical shift right $D6.b [Reads: Direct Page] [Flags: ZNC]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	adc $14.b,S		; 63 14 ; Add with carry (stack relative) $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	eor ($7F.b),Y		; 51 7F ; Exclusive OR accumulator with memory ($7F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor #$0769.w		; 49 69 07 ; Exclusive OR #$0769.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $E7.b		; 65 E7 ; Add $E7.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	mvp $5D,$69		; 44 69 5D ; Move block positive $5D,$69 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $7FFF7E.l		; 4F 7E FF 7F ; Exclusive OR accumulator with memory (long) $7FFF7E.l [Writes: Accumulator] [Flags: ZN]
	adc $14.b,S		; 63 14 ; Add with carry (stack relative) $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$2C.b]		; C7 2C ; Compare accumulator (long) [$2C.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and ($FF.b,X)		; 21 FF ; Logical AND ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $F218CD.l,X		; 7F CD 18 F2 ; Add long $F218CD.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$216D.w		; 29 6D 21 ; Logical AND #$216D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sty $10.b		; 84 10 ; Store Y register to $10.b [Reads: Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $4A.b		; 25 4A ; Logical AND $4A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($EF.b),Y		; 31 EF ; AND accumulator with memory ($EF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $F7.b		; 45 F7 ; Exclusive OR $F7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $88.b		; 66 88 ; Rotate right $88.b [Reads: Direct Page] [Flags: ZNC]
	and ($86.b),Y		; 31 86 ; AND accumulator with memory ($86.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $7FFF.w,Y		; 19 FF 7F ; OR accumulator with memory $7FFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $10.b		; 84 10 ; Store Y register to $10.b [Reads: Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $4A.b		; 25 4A ; Logical AND $4A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($EF.b),Y		; 31 EF ; AND accumulator with memory ($EF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $F7.b		; 45 F7 ; Exclusive OR $F7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $87.b		; 66 87 ; Rotate right $87.b [Reads: Direct Page] [Flags: ZNC]
	ora $1926.w,X		; 1D 26 19 ; OR accumulator with memory $1926.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $5294.w		; 2D 94 52 ; Logical AND $5294.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $2F77.w,X		; BD 77 2F ; Load $2F77.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $BA.b		; 25 BA ; Logical AND $BA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $29.b,X		; F5 29 ; Subtract $29.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $10847F.l,X		; FF 7F 84 10 ; Subtract with carry (long,X) $10847F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $15.b		; 25 15 ; Logical AND $15.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $19.b		; 86 19 ; Store X register to $19.b [Reads: X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and ($8D.b),Y		; 31 8D ; AND accumulator with memory ($8D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $314A.w,Y		; 19 4A 31 ; OR accumulator with memory $314A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$1D.b]		; 87 1D ; Store accumulator (long) [$1D.b] [Reads: Accumulator, Direct Page]
	sty $10.b		; 84 10 ; Store Y register to $10.b [Reads: Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $4A.b		; 25 4A ; Logical AND $4A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($EF.b),Y		; 31 EF ; AND accumulator with memory ($EF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $F7.b		; 45 F7 ; Exclusive OR $F7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $88.b		; 66 88 ; Rotate right $88.b [Reads: Direct Page] [Flags: ZNC]
	and ($86.b),Y		; 31 86 ; AND accumulator with memory ($86.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $7FFF.w,Y		; 19 FF 7F ; OR accumulator with memory $7FFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $10.b		; 84 10 ; Store Y register to $10.b [Reads: Y Index]
	lda [$10.b]		; A7 10 ; Load accumulator (long) [$10.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	trb $E9.b		; 14 E9 ; Test and reset bits $E9.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx $10.b		; A6 10 ; Load $10.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $26.b		; 25 26 ; Logical AND $26.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1084.w,Y		; 19 84 10 ; OR accumulator with memory $1084.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $214C.w,Y		; 19 4C 21 ; OR accumulator with memory $214C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stx $1829.w		; 8E 29 18 ; Store X register to $1829.w [Reads: X Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and ($86.b),Y		; 31 86 ; AND accumulator with memory ($86.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $7FFF.w,Y		; 19 FF 7F ; OR accumulator with memory $7FFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$2A10.w		; E9 10 2A ; Subtract #$2A10.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $216C.w,Y		; 19 6C 21 ; OR accumulator with memory $216C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $3429.w		; AE 29 34 ; Load $3429.w into X register [Writes: X Index] [Flags: ZN]
	rol $1A.b,X		; 36 1A ; Rotate left $1A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor [$BF.b],Y		; 57 BF ; Exclusive OR accumulator with memory (long indexed) [$BF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $1018C6.l		; 6F C6 18 10 ; Add with carry (long) $1018C6.l [Writes: Accumulator] [Flags: ZVNC]
	and ($B8.b,X)		; 21 B8 ; Logical AND ($B8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $9C.b,X		; 35 9C ; Logical AND $9C.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($08.b,S),Y		; 73 08 ; Add with carry (stack relative indirect indexed) ($08.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($DB.b,X)		; 41 DB ; Exclusive OR accumulator with memory ($DB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $AD.b,X		; 16 AD ; Arithmetic shift left $AD.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc ($FF.b,X)		; 61 FF ; Add with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $251084.l,X		; 7F 84 10 25 ; Add long $251084.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $86.b,X		; 15 86 ; OR accumulator with memory $86.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $3188.w,Y		; 19 88 31 ; OR accumulator with memory $3188.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stx $19.b		; 86 19 ; Store X register to $19.b [Reads: X Index]
	sty $52.b,X		; 94 52 ; Store Y register $52.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	stz $6373.w		; 9C 73 63 ; Store zero to $6373.w
	trb $07.b		; 14 07 ; Test and reset bits $07.b [Reads: Accumulator] [Flags: Z]
	adc $49.b		; 65 49 ; Add $49.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$7F51.w		; 69 51 7F ; Add #$7F51.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sbc [$44.b]		; E7 44 ; Subtract with carry (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$4F5D.w		; 69 5D 4F ; Add #$4F5D.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ror $7FFF.w,X		; 7E FF 7F ; Rotate right $7FFF.w,X [Reads: X Index] [Flags: ZNC]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: ZN]
	sta $8D19.w		; 8D 19 8D ; Store accumulator to $8D19.w [Reads: Accumulator]
	ora $45EF.w,Y		; 19 EF 45 ; OR accumulator with memory $45EF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$0C63.w		; 29 63 0C ; Logical AND #$0C63.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $19.b		; 45 19 ; Exclusive OR $19.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $1D.b		; E6 1D ; Increment $1D.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $3A		; D0 3A ; Branch if not equal to $D0, $3A [Flow: branch]
	adc [$57.b],Y		; 77 57 ; Add with carry (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $42, $08		; 42 08 ; Reserved instruction
	rol $FF.b,X		; 36 FF ; Rotate left $FF.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc $450C63.l,X		; 7F 63 0C 45 ; Add long $450C63.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $1DE6.w,Y		; 19 E6 1D ; OR accumulator with memory $1DE6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $3A		; D0 3A ; Branch if not equal to $D0, $3A [Flow: branch]
	adc [$57.b],Y		; 77 57 ; Add with carry (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $114B1D.l		; AF 1D 4B 11 ; Load long $114B1D.l into accumulator [Writes: Accumulator] [Flags: ZN]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $5294.w		; 2D 94 52 ; Logical AND $5294.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $2F77.w,X		; BD 77 2F ; Load $2F77.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $BA.b		; 25 BA ; Logical AND $BA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $29.b,X		; F5 29 ; Subtract $29.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0C637F.l,X		; FF 7F 63 0C ; Subtract with carry (long,X) $0C637F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda [$29.b]		; A7 29 ; Load accumulator (long) [$29.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol $6A.b,X		; 36 6A ; Rotate left $6A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $42, $65		; 42 65 ; Reserved instruction
	and $E6.b		; 25 E6 ; Logical AND $E6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1DAF.w,Y		; 19 AF 1D ; OR accumulator with memory $1DAF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	eor $19.b		; 45 19 ; Exclusive OR $19.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $1D.b		; E6 1D ; Increment $1D.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $3A		; D0 3A ; Branch if not equal to $D0, $3A [Flow: branch]
	lda [$29.b]		; A7 29 ; Load accumulator (long) [$29.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol $6A.b,X		; 36 6A ; Rotate left $6A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $42, $FF		; 42 FF ; Reserved instruction
	adc $450C63.l,X		; 7F 63 0C 45 ; Add long $450C63.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $85.b		; 25 85 ; Logical AND $85.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$2DC7.w		; 29 C7 2D ; Logical AND #$2DC7.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $25.b		; 45 25 ; Exclusive OR $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $15.b		; 45 15 ; Exclusive OR $15.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ora ($A5.b),Y		; 11 A5 ; OR accumulator with memory ($A5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $66.b		; 14 66 ; Test and reset bits $66.b [Reads: Accumulator] [Flags: Z]
	ora $2EEB.w,Y		; 19 EB 2E ; OR accumulator with memory $2EEB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sbc $25B17F.l,X		; FF 7F B1 25 ; Subtract with carry (long,X) $25B17F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF1C.w		; ED 1C FF ; Subtract $FF1C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	adc $2B14E9.l,X		; 7F E9 14 2B ; Add long $2B14E9.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $6D.b,X		; 15 6D ; OR accumulator with memory $6D.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $29D0.w,X		; 1D D0 29 ; OR accumulator with memory $29D0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($36.b,S),Y		; 33 36 ; AND accumulator (stack relative indirect indexed) ($36.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$46.b],Y		; B7 46 ; Load accumulator (long indexed) [$46.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $14636F.l,X		; BF 6F 63 14 ; Load long $14636F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and $9C.b,X		; 35 9C ; Logical AND $9C.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($08.b,S),Y		; 73 08 ; Add with carry (stack relative indirect indexed) ($08.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($DB.b,X)		; 41 DB ; Exclusive OR accumulator with memory ($DB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $AD.b,X		; 16 AD ; Arithmetic shift left $AD.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc ($FF.b,X)		; 61 FF ; Add with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $A70C63.l,X		; 7F 63 0C A7 ; Add long $A70C63.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $EA		; 10 EA ; Branch if plus to $10, $EA [Flow: branch]
	trb $2B.b		; 14 2B ; Test and reset bits $2B.b [Reads: Accumulator] [Flags: Z]
	ora $2DC7.w,X		; 1D C7 2D ; OR accumulator with memory $2DC7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $52.b,X		; 94 52 ; Store Y register $52.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	stz $C673.w		; 9C 73 C6 ; Store zero to $C673.w
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $7C.b		; 84 7C ; Store Y register to $7C.b [Reads: Y Index]
	lda $7C.b		; A5 7C ; Load $7C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $35.b,S		; 43 35 ; Exclusive OR accumulator with stack relative $35.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $41.b,S		; A3 41 ; Load accumulator (stack relative) $41.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $52.b,S		; 43 52 ; Exclusive OR accumulator with stack relative $52.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $0C427F.l,X		; FF 7F 42 0C ; Subtract with carry (long,X) $0C427F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $15.b		; 25 15 ; Logical AND $15.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	.db $D0, $3A		; D0 3A ; Branch if not equal to $D0, $3A [Flow: branch]
	adc $8525.w		; 6D 25 85 ; Add $8525.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $C9		; 10 C9 ; Branch if plus to $10, $C9 [Flow: branch]
	.db $10, $2D		; 10 2D ; Branch if plus to $10, $2D [Flow: branch]
	ora $1D91.w,Y		; 19 91 1D ; OR accumulator with memory $1D91.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $2E.b,X		; 35 2E ; Logical AND $2E.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $210C25.l		; 4F 25 0C 21 ; Exclusive OR accumulator with memory (long) $210C25.l [Writes: Accumulator] [Flags: ZN]
	sbc $10857F.l,X		; FF 7F 85 10 ; Subtract with carry (long,X) $10857F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$2D10.w		; C9 10 2D ; Compare #$2D10.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $1D91.w,Y		; 19 91 1D ; OR accumulator with memory $1D91.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $2E.b,X		; 35 2E ; Logical AND $2E.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$8742.w		; 09 42 87 ; Logical OR #$8742.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($C6.b),Y		; 31 C6 ; AND accumulator with memory ($C6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $5294.w		; 2D 94 52 ; Logical AND $5294.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $2F77.w,X		; BD 77 2F ; Load $2F77.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $BA.b		; 25 BA ; Logical AND $BA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $29.b,X		; F5 29 ; Subtract $29.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $10857F.l,X		; FF 7F 85 10 ; Subtract with carry (long,X) $10857F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$EB14.w		; C9 14 EB ; Compare #$EB14.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	rol $C821.w		; 2E 21 C8 ; Rotate left $C821.w [Flags: ZNC]
	.db $10, $6E		; 10 6E ; Branch if plus to $10, $6E [Flow: branch]
	and ($0B.b,X)		; 21 0B ; Logical AND ($0B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $7FFF.w,Y		; 19 FF 7F ; OR accumulator with memory $7FFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($36.b,S),Y		; 73 36 ; Add with carry (stack relative indirect indexed) ($36.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	and [$BD.b],Y		; 37 BD ; AND accumulator with memory (long indexed) [$BD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$A5.b],Y		; 37 A5 ; AND accumulator with memory (long indexed) [$A5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $29.b		; 14 29 ; Test and reset bits $29.b [Reads: Accumulator] [Flags: Z]
	and $CE.b,X		; 35 CE ; Logical AND $CE.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $FF.b,X		; 35 FF ; Logical AND $FF.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $881085.l,X		; 7F 85 10 88 ; Add long $881085.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $A9		; 10 A9 ; Branch if plus to $10, $A9 [Flow: branch]
	.db $10, $CB		; 10 CB ; Branch if plus to $10, $CB [Flow: branch]
	trb $86.b		; 14 86 ; Test and reset bits $86.b [Reads: Accumulator] [Flags: Z]
	.db $10, $2C		; 10 2C ; Branch if plus to $10, $2C [Flow: branch]
	ora $10C8.w,Y		; 19 C8 10 ; OR accumulator with memory $10C8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $14.b,S		; 63 14 ; Add with carry (stack relative) $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $6B.b,X		; 15 6B ; OR accumulator with memory $6B.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $3252.w,Y		; 19 52 32 ; OR accumulator with memory $3252.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor ($0C.b,S),Y		; 53 0C ; XOR accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $18EB.w,Y		; 19 EB 18 ; OR accumulator with memory $18EB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $10857F.l,X		; FF 7F 85 10 ; Subtract with carry (long,X) $10857F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$EB14.w		; C9 14 EB ; Compare #$EB14.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	rol $B221.w		; 2E 21 B2 ; Rotate left $B221.w [Flags: ZNC]
	and $4298.w		; 2D 98 42 ; Logical AND $4298.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $108467.l,X		; BF 67 84 10 ; Load long $108467.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and $9C.b,X		; 35 9C ; Logical AND $9C.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($28.b,S),Y		; 73 28 ; Add with carry (stack relative indirect indexed) ($28.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $DB.b,X		; 35 DB ; Logical AND $DB.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $AC.b,X		; 16 AC ; Arithmetic shift left $AC.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $7FFF.w,Y		; 59 FF 7F ; Exclusive OR accumulator with memory $7FFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ora $9111.w		; 0D 11 91 ; Logical OR $9111.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $2E35.w,X		; 1D 35 2E ; OR accumulator with memory $2E35.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $9421.w		; 2D 21 94 ; Logical AND $9421.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($9C.b)		; 52 9C ; Exclusive OR accumulator with memory (indirect) ($9C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($A5.b,S),Y		; 73 A5 ; Add with carry (stack relative indirect indexed) ($A5.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $72.b		; 14 72 ; Test and reset bits $72.b [Reads: Accumulator] [Flags: Z]
	tsb $109C.w		; 0C 9C 10 ; Test and set bits $109C.w [Reads: Accumulator] [Flags: Z]
	sbc $4D2711.l,X		; FF 11 27 4D ; Subtract with carry (long,X) $4D2711.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx $4E61.w		; EC 61 4E ; Compare $4E61.w with X register [Reads: X Index] [Flags: ZNC]
	ror $7FFF.w,X		; 7E FF 7F ; Rotate right $7FFF.w,X [Reads: X Index] [Flags: ZNC]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	cmp #$0010.w		; C9 10 00 ; Compare #$0010.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $CE.b		; 00 CE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $35A5.w,Y		; 19 A5 35 ; OR accumulator with memory $35A5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	wai		; CB ; Wait for interrupt
	bit $6F.b		; 24 6F ; Test bits $6F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and #$3634.w		; 29 34 36 ; Logical AND #$3634.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $AD4A.w,Y		; F9 4A AD ; Subtract with carry $AD4A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $316B.w,Y		; 39 6B 31 ; AND accumulator with memory $316B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $0C637F.l,X		; FF 7F 63 0C ; Subtract with carry (long,X) $0C637F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	wai		; CB ; Wait for interrupt
	bit $6F.b		; 24 6F ; Test bits $6F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and #$3634.w		; 29 34 36 ; Logical AND #$3634.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $874A.w,Y		; F9 4A 87 ; Subtract with carry $874A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($25.b),Y		; 31 25 ; AND accumulator with memory ($25.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $C6.b		; 25 C6 ; Logical AND $C6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $5294.w		; 2D 94 52 ; Logical AND $5294.w with accumulator [Writes: Accumulator] [Flags: ZN]
	stz $2F73.w		; 9C 73 2F ; Store zero to $2F73.w
	and $BA.b		; 25 BA ; Logical AND $BA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $29.b,X		; F5 29 ; Subtract $29.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0C637F.l,X		; FF 7F 63 0C ; Subtract with carry (long,X) $0C637F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $316B.w		; 2D 6B 31 ; Logical AND $316B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $AA39.w		; AD 39 AA ; Load $AA39.w into accumulator [Writes: Accumulator] [Flags: ZN]
	trb $6F.b		; 14 6F ; Test and reset bits $6F.b [Reads: Accumulator] [Flags: Z]
	and #$3187.w		; 29 87 31 ; Logical AND #$3187.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	wai		; CB ; Wait for interrupt
	bit $6F.b		; 24 6F ; Test bits $6F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and #$3634.w		; 29 34 36 ; Logical AND #$3634.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $A64A.w,Y		; F9 4A A6 ; Subtract with carry $A64A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $C5.b,X		; 16 C5 ; Arithmetic shift left $C5.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $00.b,X		; 15 00 ; OR accumulator with memory $00.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $20E7.w		; 0C E7 20 ; Test and set bits $20E7.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $29.b		; 25 29 ; Logical AND $29.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$20C6.w		; 29 C6 20 ; Logical AND #$20C6.w with accumulator [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $63.b		; 25 63 ; Logical AND $63.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $24CB.w		; 0C CB 24 ; Test and set bits $24CB.w [Reads: Accumulator] [Flags: Z]
	adc $363429.l		; 6F 29 34 36 ; Add with carry (long) $363429.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $F14A.w,Y		; F9 4A F1 ; Subtract with carry $F14A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $AF.b		; 25 AF ; Logical AND $AF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $7FFF.w,X		; 1D FF 7F ; OR accumulator with memory $7FFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $AA		; 10 AA ; Branch if plus to $10, $AA [Flow: branch]
	trb $CD.b		; 14 CD ; Test and reset bits $CD.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	and ($25.b,S),Y		; 33 25 ; AND accumulator (stack relative indirect indexed) ($25.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lsr $5D.b		; 46 5D ; Logical shift right $5D.b [Reads: Direct Page] [Flags: ZNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $18C67F.l,X		; FF 7F C6 18 ; Subtract with carry (long,X) $18C67F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and $9C.b,X		; 35 9C ; Logical AND $9C.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($28.b,S),Y		; 73 28 ; Add with carry (stack relative indirect indexed) ($28.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $1ABA.w,X		; 3D BA 1A ; AND accumulator with memory $1ABA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $FF5D.w		; CE 5D FF ; Decrement $FF5D.w [Flags: ZN]
	adc $AA1088.l,X		; 7F 88 10 AA ; Add long $AA1088.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $CD.b		; 14 CD ; Test and reset bits $CD.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	and ($25.b,S),Y		; 33 25 ; AND accumulator (stack relative indirect indexed) ($25.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $3318.w		; CD 18 33 ; Compare $3318.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $05.b		; 14 05 ; Test and reset bits $05.b [Reads: Accumulator] [Flags: Z]
	and $C6.b,X		; 35 C6 ; Logical AND $C6.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($69.b),Y		; 51 69 ; Exclusive OR accumulator with memory ($69.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sbc $CB4A.w,Y		; F9 4A CB ; Subtract with carry $CB4A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $CA0C63.l,X		; 7F 63 0C CA ; Add long $CA0C63.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol $75.b,X		; 36 75 ; Rotate left $75.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	rol $0C63.w,X		; 3E 63 0C ; Rotate left $0C63.w,X [Reads: X Index] [Flags: ZNC]
	cmp #$8D14.w		; C9 14 8D ; Compare #$8D14.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and ($73.b,X)		; 21 73 ; Logical AND ($73.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $5739.w,X		; 3E 39 57 ; Rotate left $5739.w,X [Reads: X Index] [Flags: ZNC]
	lsr $CE11.w		; 4E 11 CE ; Logical shift right $CE11.w [Flags: ZNC]
	ora ($FF.b),Y		; 11 FF ; OR accumulator with memory ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $C90C63.l,X		; 7F 63 0C C9 ; Add long $C90C63.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $8D.b		; 14 8D ; Test and reset bits $8D.b [Reads: Accumulator] [Flags: Z]
	and ($73.b,X)		; 21 73 ; Logical AND ($73.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $5739.w,X		; 3E 39 57 ; Rotate left $5739.w,X [Reads: X Index] [Flags: ZNC]
	lsr $CE11.w		; 4E 11 CE ; Logical shift right $CE11.w [Flags: ZNC]
	ora ($C4.b),Y		; 11 C4 ; OR accumulator with memory ($C4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $6B.b		; 14 6B ; Test and reset bits $6B.b [Reads: Accumulator] [Flags: Z]
	and $5294.w		; 2D 94 52 ; Logical AND $5294.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $3277.w,X		; BD 77 32 ; Load $3277.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $DB.b		; 25 DB ; Logical AND $DB.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $F9.b,X		; 16 F9 ; Arithmetic shift left $F9.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $E90C63.l,X		; 7F 63 0C E9 ; Add long $E90C63.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $0C.b		; 14 0C ; Test and reset bits $0C.b [Reads: Accumulator] [Flags: Z]
	ora $1D2D.w,Y		; 19 2D 1D ; OR accumulator with memory $1D2D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$2B14.w		; E9 14 2B ; Subtract #$2B14.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora ($C9.b),Y		; 11 C9 ; OR accumulator with memory ($C9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $63		; 10 63 ; Branch if plus to $10, $63 [Flow: branch]
	tsb $18CA.w		; 0C CA 18 ; Test and set bits $18CA.w [Reads: Accumulator] [Flags: Z]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	sta $16.b,S		; 83 16 ; Store accumulator (stack relative) $16.b,S [Reads: Accumulator, Stack Pointer]
	lda $7D4D16.l,X		; BF 16 4D 7D ; Load long $7D4D16.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $7FFF.w		; 0C FF 7F ; Test and set bits $7FFF.w [Reads: Accumulator] [Flags: Z]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	dec $10.b		; C6 10 ; Decrement $10.b [Reads: Direct Page] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	trb $09.b		; 14 09 ; Test and reset bits $09.b [Reads: Accumulator] [Flags: Z]
	ora $10C6.w,Y		; 19 C6 10 ; OR accumulator with memory $10C6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora ($C9.b),Y		; 11 C9 ; OR accumulator with memory ($C9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $63		; 10 63 ; Branch if plus to $10, $63 [Flow: branch]
	tsb $1CAA.w		; 0C AA 1C ; Test and set bits $1CAA.w [Reads: Accumulator] [Flags: Z]
	.db $30, $11		; 30 11 ; Branch if minus to $30, $11 [Flow: branch]
	ora ($2A.b,S),Y		; 13 2A ; OR accumulator (stack relative indirect indexed) ($2A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $FF10.w		; 8D 10 FF ; Store accumulator to $FF10.w [Reads: Accumulator]
	adc $FF24EC.l,X		; 7F EC 24 FF ; Add long $FF24EC.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $8D0C63.l,X		; 7F 63 0C 8D ; Add long $8D0C63.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $53		; 10 53 ; Branch if plus to $10, $53 [Flow: branch]
	and #$4218.w		; 29 18 42 ; Logical AND #$4218.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $112B63.l,X		; 1F 63 2B 11 ; Logical OR long $112B63.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$8410.w		; C9 10 84 ; Compare #$8410.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
	trb $35BB.w		; 1C BB 35 ; Test and reset bits $35BB.w [Reads: Accumulator] [Flags: Z]
	stz $2973.w		; 9C 73 29 ; Store zero to $2973.w
	and $DB.b,X		; 35 DB ; Logical AND $DB.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $AD.b,X		; 16 AD ; Arithmetic shift left $AD.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $7FFF.w,Y		; 59 FF 7F ; Exclusive OR accumulator with memory $7FFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	dec $10.b		; C6 10 ; Decrement $10.b [Reads: Direct Page] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	trb $09.b		; 14 09 ; Test and reset bits $09.b [Reads: Accumulator] [Flags: Z]
	ora $190C.w,Y		; 19 0C 19 ; OR accumulator with memory $190C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $52.b,X		; 94 52 ; Store Y register $52.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	stz $6373.w		; 9C 73 63 ; Store zero to $6373.w
	tsb $1110.w		; 0C 10 11 ; Test and set bits $1110.w [Reads: Accumulator] [Flags: Z]
	sbc [$19.b],Y		; F7 19 ; Subtract with carry (long indexed) [$19.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $2926.w,X		; FD 26 29 ; Subtract with carry $2926.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $18DB.w,X		; 7D DB 18 ; Add $18DB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $16.b,S		; 83 16 ; Store accumulator (stack relative) $16.b,S [Reads: Accumulator, Stack Pointer]
	sbc $0C637F.l,X		; FF 7F 63 0C ; Subtract with carry (long,X) $0C637F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0014.w		; C9 14 00 ; Compare #$0014.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $8D		; 10 8D ; Branch if plus to $10, $8D [Flow: branch]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	ora ($04.b),Y		; 11 04 ; OR accumulator with memory ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($84.b),Y		; 11 84 ; OR accumulator with memory ($84.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $EA		; 10 EA ; Branch if plus to $10, $EA [Flow: branch]
	bit $2F.b		; 24 2F ; Test bits $2F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $D3.b		; 25 D3 ; Logical AND $D3.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $4E7A.w,Y		; 39 7A 4E ; AND accumulator with memory $4E7A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $3E.b,X		; D6 3E ; Decrement memory $3E.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $FF.b,X		; 15 FF ; OR accumulator with memory $FF.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $EA1084.l,X		; 7F 84 10 EA ; Add long $EA1084.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $2F.b		; 24 2F ; Test bits $2F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $D3.b		; 25 D3 ; Logical AND $D3.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $4E7A.w,Y		; 39 7A 4E ; AND accumulator with memory $4E7A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $3E.b,X		; D6 3E ; Decrement memory $3E.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $C4.b,X		; 15 C4 ; OR accumulator with memory $C4.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $6B.b		; 14 6B ; Test and reset bits $6B.b [Reads: Accumulator] [Flags: Z]
	and $5294.w		; 2D 94 52 ; Logical AND $5294.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $3277.w,X		; BD 77 32 ; Load $3277.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $DB.b		; 25 DB ; Logical AND $DB.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $F9.b,X		; 16 F9 ; Arithmetic shift left $F9.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $0C1084.l,X		; 7F 84 10 0C ; Add long $0C1084.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($2E.b,X)		; 21 2E ; Logical AND ($2E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $50.b		; 25 50 ; Logical AND $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$1986.w		; 29 86 19 ; Logical AND #$1986.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($2D.b)		; 92 2D ; Store accumulator (indirect) ($2D.b) [Reads: Accumulator, Direct Page]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $84.b,X		; 15 84 ; OR accumulator with memory $84.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $EA		; 10 EA ; Branch if plus to $10, $EA [Flow: branch]
	bit $2F.b		; 24 2F ; Test bits $2F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $D3.b		; 25 D3 ; Logical AND $D3.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $7F9C.w,Y		; 39 9C 7F ; AND accumulator with memory $7F9C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $A57D.w		; 8C 7D A5 ; Store Y register to $A57D.w [Reads: Y Index]
	stz $FF.b		; 64 FF ; Store zero to $FF.b
	adc $082084.l,X		; 7F 84 20 08 ; Add long $082084.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $3D4A.w,Y		; 39 4A 3D ; AND accumulator with memory $3D4A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $8645.w		; 8C 45 86 ; Store Y register to $8645.w [Reads: Y Index]
	ora $2D92.w,Y		; 19 92 2D ; OR accumulator with memory $2D92.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $84.b,X		; 15 84 ; OR accumulator with memory $84.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $2C		; 10 2C ; Branch if plus to $10, $2C [Flow: branch]
	ora $21F0.w,X		; 1D F0 21 ; OR accumulator with memory $21F0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stz $32.b,X		; 74 32 ; Store zero to $32.b,X [Reads: X Index]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	trb $7F9C.w		; 1C 9C 7F ; Test and reset bits $7F9C.w [Reads: Accumulator] [Flags: Z]
	and #$FF4D.w		; 29 4D FF ; Logical AND #$FF4D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $A01084.l,X		; 7F 84 10 A0 ; Add long $A01084.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $7F60.w		; 6D 60 7F ; Add $7F60.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	stz $32.b,X		; 74 32 ; Store zero to $32.b,X [Reads: X Index]
	sbc $3DFF7F.l,X		; FF 7F FF 3D ; Subtract with carry (long,X) $3DFF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	trb $1084.w		; 1C 84 10 ; Test and reset bits $1084.w [Reads: Accumulator] [Flags: Z]
	adc $12.b,X		; 75 12 ; Add $12.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and #$9C49.w		; 29 49 9C ; Logical AND #$9C49.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($05.b,S),Y		; 73 05 ; Add with carry (stack relative indirect indexed) ($05.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FF.b,X		; 15 FF ; OR accumulator with memory $FF.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $1CFB.w,X		; 3D FB 1C ; AND accumulator with memory $1CFB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $10847F.l,X		; FF 7F 84 10 ; Subtract with carry (long,X) $10847F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0B28.w		; C9 28 0B ; Compare #$0B28.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and ($4C.b),Y		; 31 4C ; AND accumulator with memory ($4C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $86.b,X		; 35 86 ; Logical AND $86.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $2D92.w,Y		; 19 92 2D ; OR accumulator with memory $2D92.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $84.b,X		; 15 84 ; OR accumulator with memory $84.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $91		; 10 91 ; Branch if plus to $10, $91 [Flow: branch]
	and $290B.w		; 2D 0B 29 ; Logical AND $290B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	jsl $FB11A8.l		; 22 A8 11 FB ; Jump to subroutine long $FB11A8.l [Writes: Stack Pointer] [Flow: call]
	trb $0853.w		; 1C 53 08 ; Test and reset bits $0853.w [Reads: Accumulator] [Flags: Z]
	sbc $10847F.l,X		; FF 7F 84 10 ; Subtract with carry (long,X) $10847F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit #$2035.w		; 89 35 20 ; Test bits #$2035.w with accumulator [Reads: Accumulator] [Flags: Z]
	ora ($A7.b,X)		; 01 A7 ; Logical OR ($A7.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $1986.w,X		; 1D 86 19 ; OR accumulator with memory $1986.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $0C.b,S		; C3 0C ; Compare accumulator (stack relative) $0C.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $0C.b,S		; C3 0C ; Compare accumulator (stack relative) $0C.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$6E10.w		; E9 10 6E ; Subtract #$6E10.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $2E54.w,X		; 1D 54 2E ; OR accumulator with memory $2E54.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $B1.b,S		; 43 B1 ; Exclusive OR accumulator with stack relative $B1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr $0C.b		; 46 0C ; Logical shift right $0C.b [Reads: Direct Page] [Flags: ZNC]
	and ($FF.b)		; 32 FF ; AND accumulator with memory (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $EB0CA5.l,X		; 7F A5 0C EB ; Add long $EB0CA5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $6E		; 10 6E ; Branch if plus to $10, $6E [Flow: branch]
	ora $2E54.w,X		; 1D 54 2E ; OR accumulator with memory $2E54.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $473F.w,Y		; 39 3F 47 ; AND accumulator with memory $473F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $14C5.w,X		; 1D C5 14 ; OR accumulator with memory $14C5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy $14.b		; C4 14 ; Compare $14.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $5294.w		; 2D 94 52 ; Logical AND $5294.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $3277.w,X		; BD 77 32 ; Load $3277.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $DB.b		; 25 DB ; Logical AND $DB.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $F9.b,X		; 16 F9 ; Arithmetic shift left $F9.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $081084.l,X		; 7F 84 10 08 ; Add long $081084.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $354A.w		; 2D 4A 35 ; Logical AND $354A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sty $FF39.w		; 8C 39 FF ; Store Y register to $FF39.w [Reads: Y Index]
	adc $471D6E.l,X		; 7F 6E 1D 47 ; Add long $471D6E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0CA5.w,X		; 1D A5 0C ; OR accumulator with memory $0CA5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$6E10.w		; E9 10 6E ; Subtract #$6E10.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $2E54.w,X		; 1D 54 2E ; OR accumulator with memory $2E54.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $59.b,S		; 43 59 ; Exclusive OR accumulator with stack relative $59.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $1555.w,X		; 1E 55 15 ; Arithmetic shift left $1555.w,X [Reads: X Index] [Flags: ZNC]
	sbc $0C637F.l,X		; FF 7F 63 0C ; Subtract with carry (long,X) $0C637F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $911D.w		; 2C 1D 91 ; Test bits $911D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora $21D2.w,X		; 1D D2 21 ; OR accumulator with memory $21D2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $24.b		; E5 24 ; Subtract $24.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($C5.b),Y		; 11 C5 ; OR accumulator with memory ($C5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	tsb $1926.w		; 0C 26 19 ; Test and set bits $1926.w [Reads: Accumulator] [Flags: Z]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	and #$4290.w		; 29 90 42 ; Logical AND #$4290.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	mvn $6E,$2E		; 54 2E 6E ; Move block negative $6E,$2E [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $7FFF.w,X		; 1D FF 7F ; OR accumulator with memory $7FFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$10.b]		; E7 10 ; Subtract with carry (long) [$10.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $10, $6E		; 10 6E ; Branch if plus to $10, $6E [Flow: branch]
	ora $2E54.w,X		; 1D 54 2E ; OR accumulator with memory $2E54.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$42.b],Y		; F7 42 ; Subtract with carry (long indexed) [$42.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $FF5F.w,X		; BD 5F FF ; Load $FF5F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $F51084.l,X		; 7F 84 10 F5 ; Add long $F51084.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $35BB.w		; 1C BB 35 ; Test and reset bits $35BB.w [Reads: Accumulator] [Flags: Z]
	stz $2973.w		; 9C 73 29 ; Store zero to $2973.w
	and $DB.b,X		; 35 DB ; Logical AND $DB.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $AD.b,X		; 16 AD ; Arithmetic shift left $AD.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $7FFF.w,Y		; 59 FF 7F ; Exclusive OR accumulator with memory $7FFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $28.b		; C6 28 ; Decrement $28.b [Reads: Direct Page] [Flags: ZN]
	dec $28.b		; C6 28 ; Decrement $28.b [Reads: Direct Page] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $5294.w		; 2D 94 52 ; Logical AND $5294.w with accumulator [Writes: Accumulator] [Flags: ZN]
	stz $8473.w		; 9C 73 84 ; Store zero to $8473.w
	.db $10, $0D		; 10 0D ; Branch if plus to $10, $0D [Flow: branch]
	and ($91.b,X)		; 21 91 ; Logical AND ($91.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($78.b),Y		; 31 78 ; AND accumulator with memory ($78.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $77DF.w		; 4E DF 77 ; Logical shift right $77DF.w [Flags: ZNC]
	ror $541D.w		; 6E 1D 54 ; Rotate right $541D.w [Flags: ZNC]
	rol $7FFF.w		; 2E FF 7F ; Rotate left $7FFF.w [Flags: ZNC]
	sty $0C.b		; 84 0C ; Store Y register to $0C.b [Reads: Y Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $2E54.w		; 1C 54 2E ; Test and reset bits $2E54.w [Reads: Accumulator] [Flags: Z]
	ora ($2E.b),Y		; 11 2E ; OR accumulator with memory ($2E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $DE77.w,X		; DE 77 DE ; Decrement memory $DE77.w,X [Reads: X Index] [Flags: ZN]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$00.b],Y		; 77 00 ; Add with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $DE.b		; 00 DE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$00.b],Y		; 77 00 ; Add with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $DE.b		; 00 DE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$00.b],Y		; 77 00 ; Add with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $DE.b		; 00 DE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$00.b],Y		; 77 00 ; Add with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $DE.b		; 00 DE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$00.b],Y		; 77 00 ; Add with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $DE.b		; 00 DE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$00.b],Y		; 77 00 ; Add with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $DE.b		; 00 DE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$00.b],Y		; 77 00 ; Add with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $DE.b		; 00 DE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$00.b],Y		; 77 00 ; Add with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $DE.b		; 00 DE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$00.b],Y		; 77 00 ; Add with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $DE.b		; 00 DE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$00.b],Y		; 77 00 ; Add with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $DE.b		; 00 DE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$DE.b],Y		; 77 DE ; Add with carry (long indexed) [$DE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$A5.b],Y		; 77 A5 ; Add with carry (long indexed) [$A5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $0E.b		; 14 0E ; Test and reset bits $0E.b [Reads: Accumulator] [Flags: Z]
	sec		; 38 ; Set carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $7DBF7C.l,X		; 1F 7C BF 7D ; Logical OR long $7DBF7C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $7F3F7E.l,X		; 7F 7E 3F 7F ; Add long $7F3F7E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $1838.w		; 0E 38 18 ; Arithmetic shift left $1838.w [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $7DBF7C.l,X		; 1F 7C BF 7D ; Logical OR long $7DBF7C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $7F3F7E.l,X		; 7F 7E 3F 7F ; Add long $7F3F7E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1838.w		; 0E 38 18 ; Arithmetic shift left $1838.w [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $7DBF7C.l,X		; 1F 7C BF 7D ; Logical OR long $7DBF7C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $7F3F7E.l,X		; 7F 7E 3F 7F ; Add long $7F3F7E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1838.w		; 0E 38 18 ; Arithmetic shift left $1838.w [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $7DBF7C.l,X		; 1F 7C BF 7D ; Logical OR long $7DBF7C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $7F3F7E.l,X		; 7F 7E 3F 7F ; Add long $7F3F7E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1838.w		; 0E 38 18 ; Arithmetic shift left $1838.w [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $7DBF7C.l,X		; 1F 7C BF 7D ; Logical OR long $7DBF7C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $7F3F7E.l,X		; 7F 7E 3F 7F ; Add long $7F3F7E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $1838.w		; 0E 38 18 ; Arithmetic shift left $1838.w [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $7DBF7C.l,X		; 1F 7C BF 7D ; Logical OR long $7DBF7C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $7F3F7E.l,X		; 7F 7E 3F 7F ; Add long $7F3F7E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $1838.w		; 0E 38 18 ; Arithmetic shift left $1838.w [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $7DBF7C.l,X		; 1F 7C BF 7D ; Logical OR long $7DBF7C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $7F3F7E.l,X		; 7F 7E 3F 7F ; Add long $7F3F7E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1838.w		; 0E 38 18 ; Arithmetic shift left $1838.w [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $7DBF7C.l,X		; 1F 7C BF 7D ; Logical OR long $7DBF7C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $7F3F7E.l,X		; 7F 7E 3F 7F ; Add long $7F3F7E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1838.w		; 0E 38 18 ; Arithmetic shift left $1838.w [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $7DBF7C.l,X		; 1F 7C BF 7D ; Logical OR long $7DBF7C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $7F3F7E.l,X		; 7F 7E 3F 7F ; Add long $7F3F7E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $1838.w		; 0E 38 18 ; Arithmetic shift left $1838.w [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $7DBF7C.l,X		; 1F 7C BF 7D ; Logical OR long $7DBF7C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $7F3F7E.l,X		; 7F 7E 3F 7F ; Add long $7F3F7E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1838.w		; 0E 38 18 ; Arithmetic shift left $1838.w [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $7DBF7C.l,X		; 1F 7C BF 7D ; Logical OR long $7DBF7C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $7F3F7E.l,X		; 7F 7E 3F 7F ; Add long $7F3F7E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1838.w		; 0E 38 18 ; Arithmetic shift left $1838.w [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $7DBF7C.l,X		; 1F 7C BF 7D ; Logical OR long $7DBF7C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $7F3F7E.l,X		; 7F 7E 3F 7F ; Add long $7F3F7E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1838.w		; 0E 38 18 ; Arithmetic shift left $1838.w [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $7DBF7C.l,X		; 1F 7C BF 7D ; Logical OR long $7DBF7C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $7F3F7E.l,X		; 7F 7E 3F 7F ; Add long $7F3F7E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1838.w		; 0E 38 18 ; Arithmetic shift left $1838.w [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $7DBF7C.l,X		; 1F 7C BF 7D ; Logical OR long $7DBF7C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $7F3F7E.l,X		; 7F 7E 3F 7F ; Add long $7F3F7E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1838.w		; 0E 38 18 ; Arithmetic shift left $1838.w [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $7DBF7C.l,X		; 1F 7C BF 7D ; Logical OR long $7DBF7C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $7F3F7E.l,X		; 7F 7E 3F 7F ; Add long $7F3F7E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1838.w		; 0E 38 18 ; Arithmetic shift left $1838.w [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $7DBF7C.l,X		; 1F 7C BF 7D ; Logical OR long $7DBF7C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $7F3F7E.l,X		; 7F 7E 3F 7F ; Add long $7F3F7E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$71.b]		; E7 71 ; Subtract with carry (long) [$71.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$71.b]		; E7 71 ; Subtract with carry (long) [$71.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$71.b]		; E7 71 ; Subtract with carry (long) [$71.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$71.b]		; E7 71 ; Subtract with carry (long) [$71.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$71.b]		; E7 71 ; Subtract with carry (long) [$71.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $7E.b,X		; B5 7E ; Load $7E.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$1C.b]		; E7 1C ; Subtract with carry (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $02BD7F.l,X		; FF 7F BD 02 ; Subtract with carry (long,X) $02BD7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $F34E.w		; 2D 4E F3 ; Logical AND $F34E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ror $99.b		; 66 99 ; Rotate right $99.b [Reads: Direct Page] [Flags: ZNC]
	adc $994E2D.l,X		; 7F 2D 4E 99 ; Add long $994E2D.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $E00000.l,X		; 7F 00 00 E0 ; Add long $E00000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $E0.b,X		; 34 E0 ; Test bits $E0.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $E0.b,X		; 34 E0 ; Test bits $E0.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $E0.b,X		; 34 E0 ; Test bits $E0.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $E0.b,X		; 34 E0 ; Test bits $E0.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $B5.b,X		; 34 B5 ; Test bits $B5.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ror $1CE7.w,X		; 7E E7 1C ; Rotate right $1CE7.w,X [Reads: X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $4D677F.l,X		; FF 7F 67 4D ; Subtract with carry (long,X) $4D677F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $BD01.w,X		; FE 01 BD ; Increment memory $BD01.w,X [Reads: X Index] [Flags: ZN]
	cop $7E.b		; 02 7E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $9966F3.l,X		; 3F F3 66 99 ; AND accumulator with memory (long,X) $9966F3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $E70000.l,X		; 7F 00 00 E7 ; Add long $E70000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($5F.b),Y		; 71 5F ; Add with carry ($5F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc [$71.b]		; E7 71 ; Subtract with carry (long) [$71.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$71.b]		; E7 71 ; Subtract with carry (long) [$71.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$71.b]		; E7 71 ; Subtract with carry (long) [$71.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $7E.b,X		; B5 7E ; Load $7E.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$1C.b]		; E7 1C ; Subtract with carry (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$71.b]		; E7 71 ; Subtract with carry (long) [$71.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$71.b]		; E7 71 ; Subtract with carry (long) [$71.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $3B5F2D.l,X		; FF 2D 5F 3B ; Subtract with carry (long,X) $3B5F2D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$71.b]		; E7 71 ; Subtract with carry (long) [$71.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $7E.b,X		; B5 7E ; Load $7E.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$1C.b]		; E7 1C ; Subtract with carry (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $4D677F.l,X		; FF 7F 67 4D ; Subtract with carry (long,X) $4D677F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $F34E.w		; 2D 4E F3 ; Logical AND $F34E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ror $99.b		; 66 99 ; Rotate right $99.b [Reads: Direct Page] [Flags: ZNC]
	adc $7E02BD.l,X		; 7F BD 02 7E ; Add long $7E02BD.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $690000.l,X		; 3F 00 00 69 ; AND accumulator with memory (long,X) $690000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $AB.b		; 00 AB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	ora $1552.w		; 0D 52 15 ; Logical OR $1552.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $1D.b,X		; B4 1D ; Load Y register $1D.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	trb $26.b		; 14 26 ; Test and reset bits $26.b [Reads: Accumulator] [Flags: Z]
	eor $2A.b,X		; 55 2A ; Exclusive OR accumulator with memory $2A.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$0238.w		; C0 38 02 ; Compare #$0238.w with Y register [Reads: Y Index] [Flags: ZNC]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$5186.w		; 49 86 51 ; Exclusive OR #$5186.w with accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor $620A.w,Y		; 59 0A 62 ; Exclusive OR accumulator with memory $620A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $006A.w		; 4C 6A 00 ; Jump to $006A.w [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $3549.w,Y		; 19 49 35 ; OR accumulator with memory $3549.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx $5045.w		; EC 45 50 ; Compare $5045.w with X register [Reads: X Index] [Flags: ZNC]
	ror $258D.w		; 6E 8D 25 ; Rotate right $258D.w [Flags: ZNC]
	and ($3A.b)		; 32 3A ; AND accumulator with memory (indirect) ($3A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor $000000.l,X		; 5F 00 00 00 ; Exclusive OR accumulator with memory (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $0E		; 10 0E ; Branch if plus to $10, $0E [Flow: branch]
	brk $59.b		; 00 59 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $1F		; 10 1F ; Branch if plus to $10, $1F [Flow: branch]
	and #$1CE8.w		; 29 E8 1C ; Logical AND #$1CE8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $08		; 42 08 ; Reserved instruction
	ora #$6321.w		; 09 21 63 ; Logical OR #$6321.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $40A5.w		; 0C A5 40 ; Test and set bits $40A5.w [Reads: Accumulator] [Flags: Z]
	adc [$5D.b]		; 67 5D ; Add with carry (long) [$5D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldx $187E.w		; AE 7E 18 ; Load $187E.w into X register [Writes: X Index] [Flags: ZN]
	adc $5C19CF.l,X		; 7F CF 19 5C ; Add long $5C19CF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $08.b		; C4 08 ; Compare $08.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	mvp $40,$00		; 44 00 40 ; Move block positive $40,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $26.b,X		; 15 26 ; OR accumulator with memory $26.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($CA.b)		; 32 CA ; AND accumulator with memory (indirect) ($CA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $80		; 10 80 ; Branch if plus to $10, $80 [Flow: branch]
	ora $1D90.w,Y		; 19 90 1D ; OR accumulator with memory $1D90.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $3D.b		; 26 3D ; Rotate left $3D.b [Reads: Direct Page] [Flags: ZNC]
	sta [$55.b]		; 87 55 ; Store accumulator (long) [$55.b] [Reads: Accumulator, Direct Page]
	dec $E97A.w		; CE 7A E9 ; Decrement $E97A.w [Flags: ZN]
	trb $0B.b		; 14 0B ; Test and reset bits $0B.b [Reads: Accumulator] [Flags: Z]
	.db $62, $8F, $1D		; 62 8F 1D ; Push effective relative address $62, $8F, $1D [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$2C14.w		; E9 14 2C ; Subtract #$2C14.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $8F.b,X		; 15 8F ; OR accumulator with memory $8F.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $19C6.w,X		; 1D C6 19 ; OR accumulator with memory $19C6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$F126.w		; 69 26 F1 ; Add #$F126.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and $A5.b		; 25 A5 ; Logical AND $A5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $E9.b		; 14 E9 ; Test and reset bits $E9.b [Reads: Accumulator] [Flags: Z]
	trb $2C.b		; 14 2C ; Test and reset bits $2C.b [Reads: Accumulator] [Flags: Z]
	ora $8F.b,X		; 15 8F ; OR accumulator with memory $8F.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $158D.w,X		; 1D 8D 15 ; OR accumulator with memory $158D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($22.b),Y		; 11 22 ; OR accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($25.b),Y		; F1 25 ; Subtract with carry ($25.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$2C14.w		; E9 14 2C ; Subtract #$2C14.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $8F.b,X		; 15 8F ; OR accumulator with memory $8F.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $152C.w,X		; 1D 2C 15 ; OR accumulator with memory $152C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($25.b),Y		; F1 25 ; Subtract with carry ($25.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($25.b),Y		; F1 25 ; Subtract with carry ($25.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $5FB64A.l		; EF 4A B6 5F ; Subtract with carry (long) $5FB64A.l [Writes: Accumulator] [Flags: ZVNC]
	adc $15.b		; 65 15 ; Add $15.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$4626.w		; 69 26 46 ; Add #$4626.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $D119.w		; 4C 19 D1 ; Jump to $D119.w [Flow: jump]
	and $34.b		; 25 34 ; Logical AND $34.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($E5.b)		; 32 E5 ; AND accumulator with memory (indirect) ($E5.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $2669.w,X		; 1D 69 26 ; OR accumulator with memory $2669.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rol $63.b		; 26 63 ; Rotate left $63.b [Reads: Direct Page] [Flags: ZNC]
	tsb $0C87.w		; 0C 87 0C ; Test and set bits $0C87.w [Reads: Accumulator] [Flags: Z]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $2D		; 10 2D ; Branch if plus to $10, $2D [Flow: branch]
	ora ($8C.b),Y		; 11 8C ; OR accumulator with memory ($8C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $2A32.w,Y		; 19 32 2A ; OR accumulator with memory $2A32.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $90, $1D		; 90 1D ; Branch if carry clear to $90, $1D [Flow: branch]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lda [$0C.b]		; A7 0C ; Load accumulator (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $2D		; 10 2D ; Branch if plus to $10, $2D [Flow: branch]
	ora ($6E.b),Y		; 11 6E ; OR accumulator with memory ($6E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $29F2.w,Y		; 19 F2 29 ; OR accumulator with memory $29F2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $90, $1D		; 90 1D ; Branch if carry clear to $90, $1D [Flow: branch]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lda [$0C.b]		; A7 0C ; Load accumulator (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $2D		; 10 2D ; Branch if plus to $10, $2D [Flow: branch]
	ora ($2D.b),Y		; 11 2D ; OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($90.b),Y		; 11 90 ; OR accumulator with memory ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1D90.w,X		; 1D 90 1D ; OR accumulator with memory $1D90.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy $08.b		; C4 08 ; Compare $08.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cmp #$6E21.w		; C9 21 6E ; Compare #$6E21.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $32198C.l		; 4F 8C 19 32 ; Exclusive OR accumulator with memory (long) $32198C.l [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	stz $32.b,X		; 74 32 ; Store zero to $32.b,X [Reads: X Index]
	cpy $08.b		; C4 08 ; Compare $08.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	lda ($4D.b),Y		; B1 4D ; Load accumulator ($4D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($72.b,S),Y		; D3 72 ; Compare accumulator (stack relative indirect indexed) ($72.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	lda [$12.b],Y		; B7 12 ; Load accumulator (long indexed) [$12.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $3219.w		; 8C 19 32 ; Store Y register to $3219.w [Reads: Y Index]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp $0C631D.l		; CF 1D 63 0C ; Compare accumulator (long) $0C631D.l [Reads: Accumulator] [Flags: ZNC]
	sta [$0C.b]		; 87 0C ; Store accumulator (long) [$0C.b] [Reads: Accumulator, Direct Page]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $2D		; 10 2D ; Branch if plus to $10, $2D [Flow: branch]
	ora ($8D.b),Y		; 11 8D ; OR accumulator with memory ($8D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $CF.b,X		; 15 CF ; OR accumulator with memory $CF.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1D90.w,Y		; 19 90 1D ; OR accumulator with memory $1D90.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sta [$0C.b]		; 87 0C ; Store accumulator (long) [$0C.b] [Reads: Accumulator, Direct Page]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $2D		; 10 2D ; Branch if plus to $10, $2D [Flow: branch]
	ora ($B6.b),Y		; 11 B6 ; OR accumulator with memory ($B6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $FF2150.l		; 6F 50 21 FF ; Add with carry (long) $FF2150.l [Writes: Accumulator] [Flags: ZVNC]
	adc $870C63.l,X		; 7F 63 0C 87 ; Add long $870C63.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $10CA.w		; 0C CA 10 ; Test and set bits $10CA.w [Reads: Accumulator] [Flags: Z]
	and $2D11.w		; 2D 11 2D ; Logical AND $2D11.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($90.b),Y		; 11 90 ; OR accumulator with memory ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1D90.w,X		; 1D 90 1D ; OR accumulator with memory $1D90.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc $14.b		; E6 14 ; Increment $14.b [Reads: Direct Page] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $5FD64A.l		; EF 4A D6 5F ; Subtract with carry (long) $5FD64A.l [Writes: Accumulator] [Flags: ZVNC]
	sta $CF15.w		; 8D 15 CF ; Store accumulator to $CF15.w [Reads: Accumulator]
	ora $7DBF.w,Y		; 19 BF 7D ; OR accumulator with memory $7DBF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $D111.w		; 4C 11 D1 ; Jump to $D111.w [Flow: jump]
	ora $2E35.w,X		; 1D 35 2E ; OR accumulator with memory $2E35.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $CF15.w		; 8D 15 CF ; Store accumulator to $CF15.w [Reads: Accumulator]
	ora $1D90.w,Y		; 19 90 1D ; OR accumulator with memory $1D90.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	cmp [$0C.b]		; C7 0C ; Compare accumulator (long) [$0C.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $4D.b,X		; 15 4D ; OR accumulator with memory $4D.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0A.b,X		; 15 0A ; OR accumulator with memory $0A.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $4C.b,X		; 15 4C ; OR accumulator with memory $4C.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $21AF.w,X		; 1D AF 21 ; OR accumulator with memory $21AF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	cmp [$0C.b]		; C7 0C ; Compare accumulator (long) [$0C.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora #$6C15.w		; 09 15 6C ; Logical OR #$6C15.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $41F5.w,Y		; 19 F5 41 ; OR accumulator with memory $41F5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $08		; 42 08 ; Reserved instruction
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	lsr $84.b,X		; 56 84 ; Logical shift right $84.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp [$0C.b]		; C7 0C ; Compare accumulator (long) [$0C.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora #$6C15.w		; 09 15 6C ; Logical OR #$6C15.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $1509.w,Y		; 19 09 15 ; OR accumulator with memory $1509.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $21AF21.l		; AF 21 AF 21 ; Load long $21AF21.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sty $10.b		; 84 10 ; Store Y register to $10.b [Reads: Y Index]
	cmp #$6E21.w		; C9 21 6E ; Compare #$6E21.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $4C150A.l		; 4F 0A 15 4C ; Exclusive OR accumulator with memory (long) $4C150A.l [Writes: Accumulator] [Flags: ZN]
	ora $258E.w,X		; 1D 8E 25 ; OR accumulator with memory $258E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $10.b		; 84 10 ; Store Y register to $10.b [Reads: Y Index]
	lda ($4D.b),Y		; B1 4D ; Load accumulator ($4D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($72.b,S),Y		; D3 72 ; Compare accumulator (stack relative indirect indexed) ($72.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	lda [$12.b],Y		; B7 12 ; Load accumulator (long indexed) [$12.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$4C10.w		; E9 10 4C ; Subtract #$4C10.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $150A.w,X		; 1D 0A 15 ; OR accumulator with memory $150A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$00.b]		; E7 00 ; Subtract with carry (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	brk $4B.b		; 00 4B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0D.b,X)		; 01 0D ; Logical OR ($0D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($A0.b,X)		; 01 A0 ; Logical OR ($A0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($42.b,X)		; 01 42 ; Logical OR ($42.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora #$0D83.w		; 09 83 0D ; Logical OR #$0D83.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $11.b		; A4 11 ; Load $11.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty $0825.w		; 8C 25 08 ; Store Y register to $0825.w [Reads: Y Index]
	ora $24E6.w,Y		; 19 E6 24 ; OR accumulator with memory $24E6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $62, $14, $A4		; 62 14 A4 ; Push effective relative address $62, $14, $A4 [Writes: Stack Pointer]
	trb $2907.w		; 1C 07 29 ; Test and reset bits $2907.w [Reads: Accumulator] [Flags: Z]
	cmp $0F1C.w		; CD 1C 0F ; Compare $0F1C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $EE.b		; 25 EE ; Logical AND $EE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $398B.w		; 20 8B 39 ; Jump to subroutine at $398B.w [Writes: Stack Pointer] [Flow: call]
	eor #$0631.w		; 49 31 06 ; Exclusive OR #$0631.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and #$24E6.w		; 29 E6 24 ; Logical AND #$24E6.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $14.b		; A4 14 ; Load $14.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty $0825.w		; 8C 25 08 ; Store Y register to $0825.w [Reads: Y Index]
	ora $1084.w,Y		; 19 84 10 ; OR accumulator with memory $1084.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $258C.w,Y		; 19 8C 25 ; OR accumulator with memory $258C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($42.b,S),Y		; 73 42 ; Add with carry (stack relative indirect indexed) ($42.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$52.b],Y		; F7 52 ; Subtract with carry (long indexed) [$52.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	clc		; 18 ; Clear carry flag [Flags: C]
	and ($15.b)		; 32 15 ; AND accumulator with memory (indirect) ($15.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sty $8A5D.w		; 8C 5D 8A ; Store Y register to $8A5D.w [Reads: Y Index]
	eor $B3.b,X		; 55 B3 ; Exclusive OR accumulator with memory $B3.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $F4.b,X		; 76 F4 ; Rotate right $F4.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	and $0D.b,S		; 23 0D ; AND accumulator with stack relative $0D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy $11.b		; C4 11 ; Compare $11.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	sta [$22.b]		; 87 22 ; Store accumulator (long) [$22.b] [Reads: Accumulator, Direct Page]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor #$558A.w		; 49 8A 55 ; Exclusive OR #$558A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($76.b,S),Y		; B3 76 ; Load accumulator (stack relative indirect indexed) ($76.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	pea $A37A.w		; F4 7A A3 ; Push absolute address $A37A.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	bit $3584.w		; 2C 84 35 ; Test bits $3584.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora #$0F3E.w		; 09 3E 0F ; Logical OR #$0F3E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $50, $6E		; 50 6E ; Branch if overflow clear to $50, $6E [Flow: branch]
	adc ($6E.b),Y		; 71 6E ; Add with carry ($6E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($76.b,S),Y		; B3 76 ; Load accumulator (stack relative indirect indexed) ($76.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $EE.b,X		; 55 EE ; Exclusive OR accumulator with memory $EE.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$7B17.w		; 69 17 7B ; Add #$7B17.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $3549.w,Y		; 19 49 35 ; OR accumulator with memory $3549.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx $5045.w		; EC 45 50 ; Compare $5045.w with X register [Reads: X Index] [Flags: ZNC]
	ror $258D.w		; 6E 8D 25 ; Rotate right $258D.w [Flags: ZNC]
	and ($3A.b)		; 32 3A ; AND accumulator with memory (indirect) ($3A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor $081084.l,X		; 5F 84 10 08 ; Exclusive OR accumulator with memory (long,X) $081084.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $258C.w,Y		; 19 8C 25 ; OR accumulator with memory $258C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($42.b,S),Y		; 73 42 ; Add with carry (stack relative indirect indexed) ($42.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$52.b],Y		; F7 52 ; Subtract with carry (long indexed) [$52.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	clc		; 18 ; Clear carry flag [Flags: C]
	and ($15.b)		; 32 15 ; AND accumulator with memory (indirect) ($15.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $14.b		; C5 14 ; Compare $14.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ror $F321.w		; 6E 21 F3 ; Rotate right $F321.w [Flags: ZNC]
	and #$3677.w		; 29 77 36 ; Logical AND #$3677.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $521C.w		; ED 1C 52 ; Subtract $521C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and #$46D7.w		; 29 D7 46 ; Logical AND #$46D7.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $14.b		; C5 14 ; Compare $14.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $5FB64A.l		; EF 4A B6 5F ; Subtract with carry (long) $5FB64A.l [Writes: Accumulator] [Flags: ZVNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $19.b		; C6 19 ; Decrement $19.b [Reads: Direct Page] [Flags: ZN]
	adc #$A526.w		; 69 26 A5 ; Add #$A526.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	trb $4C.b		; 14 4C ; Test and reset bits $4C.b [Reads: Accumulator] [Flags: Z]
	ora $21D1.w,Y		; 19 D1 21 ; OR accumulator with memory $21D1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $32.b,X		; 55 32 ; Exclusive OR accumulator with memory $32.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	and ($65.b,X)		; 21 65 ; Logical AND ($65.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $14A5.w,Y		; 19 A5 14 ; OR accumulator with memory $14A5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $70, $35		; 70 35 ; Branch if overflow set to $70, $35 [Flow: branch]
	and [$52.b],Y		; 37 52 ; AND accumulator with memory (long indexed) [$52.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $736B.w		; 1C 6B 73 ; Test and reset bits $736B.w [Reads: Accumulator] [Flags: Z]
	jsl $50498B.l		; 22 8B 49 50 ; Jump to subroutine long $50498B.l [Writes: Stack Pointer] [Flow: call]
	.db $62, $A5, $14		; 62 A5 14 ; Push effective relative address $62, $A5, $14 [Writes: Stack Pointer]
	jmp $D119.w		; 4C 19 D1 ; Jump to $D119.w [Flow: jump]
	and ($65.b,X)		; 21 65 ; Logical AND ($65.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $2952.w,Y		; 19 52 29 ; OR accumulator with memory $2952.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $19.b		; C6 19 ; Decrement $19.b [Reads: Direct Page] [Flags: ZN]
	inc $A51C.w		; EE 1C A5 ; Increment $A51C.w [Flags: ZN]
	trb $D1.b		; 14 D1 ; Test and reset bits $D1.b [Reads: Accumulator] [Flags: Z]
	and #$4ED8.w		; 29 D8 4E ; Logical AND #$4ED8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $4777.w,X		; BD 77 47 ; Load $4777.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $320D.w,Y		; 19 0D 32 ; OR accumulator with memory $320D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $19.b		; C6 19 ; Decrement $19.b [Reads: Direct Page] [Flags: ZN]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($1D.b),Y		; 91 1D ; Store accumulator ($1D.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ora $BD1E.w,Y		; 19 1E BD ; OR accumulator with memory $BD1E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $5F.b		; 26 5F ; Rotate left $5F.b [Reads: Direct Page] [Flags: ZNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc [$2D.b],Y		; 77 2D ; Add with carry (long indexed) [$2D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $3DA47F.l,X		; FF 7F A4 3D ; Subtract with carry (long,X) $3DA47F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($46.b),Y		; 31 46 ; AND accumulator with memory ($46.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($1C.b),Y		; F1 1C ; Subtract with carry ($1C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7FFF7F.l,X		; FF 7F FF 7F ; Subtract with carry (long,X) $7FFF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$14.b]		; C7 14 ; Compare accumulator (long) [$14.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $3E742D.l		; CF 2D 74 3E ; Compare accumulator (long) $3E742D.l [Reads: Accumulator] [Flags: ZNC]
	jmp $19C663.l		; 5C 63 C6 19 ; Jump long to $19C663.l [Flow: jump]
	adc #$FF26.w		; 69 26 FF ; Add #$FF26.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($7F.b,S),Y		; 13 7F ; OR accumulator (stack relative indirect indexed) ($7F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $7F.b,X		; 55 7F ; Exclusive OR accumulator with memory $7F.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $FD7F.w,Y		; D9 7F FD ; Compare accumulator $FD7F.w,Y [Reads: Y Index] [Flags: ZNC]
	adc $0031C8.l,X		; 7F C8 31 00 ; Add long $0031C8.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $044E.w,X		; 7E 4E 04 ; Rotate right $044E.w,X [Reads: X Index] [Flags: ZNC]
	ora #$FC00.w		; 09 00 FC ; Logical OR #$FC00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $63DF.w		; 0C DF 63 ; Test and set bits $63DF.w [Reads: Accumulator] [Flags: Z]
	adc ($4E.b,S),Y		; 73 4E ; Add with carry (stack relative indirect indexed) ($4E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $0C7532.l,X		; 3F 32 75 0C ; AND accumulator with memory (long,X) $0C7532.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $3DEF7F.l,X		; FF 7F EF 3D ; Subtract with carry (long,X) $3DEF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $73.b,S		; 63 73 ; Add with carry (stack relative) $73.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lsr $18C6.w		; 4E C6 18 ; Logical shift right $18C6.w [Flags: ZNC]
	sta $620B1D.l		; 8F 1D 0B 62 ; Store accumulator (long) $620B1D.l [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc [$1D.b]		; E7 1D ; Subtract with carry (long) [$1D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$F126.w		; 69 26 F1 ; Add #$F126.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and $C6.b		; 25 C6 ; Logical AND $C6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta [$51.b]		; 87 51 ; Store accumulator (long) [$51.b] [Reads: Accumulator, Direct Page]
	rol $1E.b,X		; 36 1E ; Rotate left $1E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	stz $E73F.w,X		; 9E 3F E7 ; Store zero to $E73F.w,X [Reads: X Index]
	ora $2669.w,X		; 1D 69 26 ; OR accumulator with memory $2669.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $62, $A5, $14		; 62 A5 14 ; Push effective relative address $62, $A5, $14 [Writes: Stack Pointer]
	sbc #$2C14.w		; E9 14 2C ; Subtract #$2C14.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $8F.b,X		; 15 8F ; OR accumulator with memory $8F.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $19C6.w,X		; 1D C6 19 ; OR accumulator with memory $19C6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$F126.w		; 69 26 F1 ; Add #$F126.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and $84.b		; 25 84 ; Logical AND $84.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $EF.b		; 05 EF ; Logical OR $EF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($B5.b,X)		; 21 B5 ; Logical AND ($B5.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $4C4B.w,Y		; 39 4B 4C ; AND accumulator with memory $4C4B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $18AC.w,X		; 1D AC 18 ; OR accumulator with memory $18AC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $EF.b		; 05 EF ; Logical OR $EF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($B5.b,X)		; 21 B5 ; Logical AND ($B5.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $4C4B.w,Y		; 39 4B 4C ; AND accumulator with memory $4C4B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $18AC.w,X		; 1D AC 18 ; OR accumulator with memory $18AC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $6C.b,X		; 15 6C ; OR accumulator with memory $6C.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $21AF.w,Y		; 19 AF 21 ; OR accumulator with memory $21AF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $41.b,X		; F5 41 ; Subtract $41.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jmp $9A1D.w		; 4C 1D 9A ; Jump to $9A1D.w [Flow: jump]
	lsr $C2.b,X		; 56 C2 ; Logical shift right $C2.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	ora $59.b,S		; 03 59 ; OR accumulator with stack relative $59.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda [$75.b]		; A7 75 ; Load accumulator (long) [$75.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ror $7FB2.w,X		; 7E B2 7F ; Rotate right $7FB2.w,X [Reads: X Index] [Flags: ZNC]
	cmp $0C6319.l		; CF 19 63 0C ; Compare accumulator (long) $0C6319.l [Reads: Accumulator] [Flags: ZNC]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora $12.b,X		; 15 12 ; OR accumulator with memory $12.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	trb $90.b		; 14 90 ; Test and reset bits $90.b [Reads: Accumulator] [Flags: Z]
	ora $14E9.w,X		; 1D E9 14 ; OR accumulator with memory $14E9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	bit $501D.w		; 2C 1D 50 ; Test bits $501D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and ($76.b,X)		; 21 76 ; Logical AND ($76.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $B6.b		; 26 B6 ; Rotate left $B6.b [Reads: Direct Page] [Flags: ZNC]
	adc $FF19CF.l		; 6F CF 19 FF ; Add with carry (long) $FF19CF.l [Writes: Accumulator] [Flags: ZVNC]
	adc $870C63.l,X		; 7F 63 0C 87 ; Add long $870C63.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $10CA.w		; 0C CA 10 ; Test and set bits $10CA.w [Reads: Accumulator] [Flags: Z]
	and $8D11.w		; 2D 11 8D ; Logical AND $8D11.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $CF.b,X		; 15 CF ; OR accumulator with memory $CF.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1D90.w,Y		; 19 90 1D ; OR accumulator with memory $1D90.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sta [$0C.b]		; 87 0C ; Store accumulator (long) [$0C.b] [Reads: Accumulator, Direct Page]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $2D		; 10 2D ; Branch if plus to $10, $2D [Flow: branch]
	ora ($B6.b),Y		; 11 B6 ; OR accumulator with memory ($B6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $907FFF.l		; 6F FF 7F 90 ; Add with carry (long) $907FFF.l [Writes: Accumulator] [Flags: ZVNC]
	ora $0C63.w,X		; 1D 63 0C ; OR accumulator with memory $0C63.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stx $31.b		; 86 31 ; Store X register to $31.b [Reads: X Index]
	dec $39.b		; C6 39 ; Decrement $39.b [Reads: Direct Page] [Flags: ZN]
	cmp ($2D.b),Y		; D1 2D ; Compare accumulator ($2D.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $5C326A.l,X		; 7F 6A 32 5C ; Add long $5C326A.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $57944A.l		; EF 4A 94 57 ; Subtract with carry (long) $57944A.l [Writes: Accumulator] [Flags: ZVNC]
	dec $19.b		; C6 19 ; Decrement $19.b [Reads: Direct Page] [Flags: ZN]
	and ($3A.b,S),Y		; 33 3A ; AND accumulator (stack relative indirect indexed) ($3A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $46.b,Y		; B6 46 ; Load X register $46.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $F11D.w		; 6D 1D F1 ; Add $F11D.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and $7FFF.w		; 2D FF 7F ; Logical AND $7FFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$49.b],Y		; F7 49 ; Subtract with carry (long indexed) [$49.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $35.b,X		; 94 35 ; Store Y register $35.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $F321.w		; 6E 21 F3 ; Rotate right $F321.w [Flags: ZNC]
	and #$3677.w		; 29 77 36 ; Logical AND #$3677.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $31.b		; 25 31 ; Logical AND $31.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	eor $D7.b		; 45 D7 ; Exclusive OR $D7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $A5.b		; 46 A5 ; Logical shift right $A5.b [Reads: Direct Page] [Flags: ZNC]
	trb $AB.b		; 14 AB ; Test and reset bits $AB.b [Reads: Accumulator] [Flags: Z]
	and $71.b		; 25 71 ; Logical AND $71.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($17.b)		; 32 17 ; AND accumulator with memory (indirect) ($17.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$26.b]		; 47 26 ; Exclusive OR accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $14E9.w,Y		; 19 E9 14 ; OR accumulator with memory $14E9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($25.b),Y		; F1 25 ; Subtract with carry ($25.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $14.b		; A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $D119.w		; 4C 19 D1 ; Jump to $D119.w [Flow: jump]
	and ($11.b,X)		; 21 11 ; Logical AND ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $531A53.l		; 22 53 1A 53 ; Jump to subroutine long $531A53.l [Writes: Stack Pointer] [Flow: call]
	jsl $A515AE.l		; 22 AE 15 A5 ; Jump to subroutine long $A515AE.l [Writes: Stack Pointer] [Flow: call]
	trb $AB.b		; 14 AB ; Test and reset bits $AB.b [Reads: Accumulator] [Flags: Z]
	and $71.b		; 25 71 ; Logical AND $71.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($17.b)		; 32 17 ; AND accumulator with memory (indirect) ($17.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$5A.b]		; 47 5A ; Exclusive OR accumulator with memory (long) [$5A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $1119AE.l,X		; 5F AE 19 11 ; Exclusive OR accumulator with memory (long,X) $1119AE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $402800.l		; 22 00 28 40 ; Jump to subroutine long $402800.l [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	lda ($44.b,X)		; A1 44 ; Load accumulator ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $51.b		; 04 51 ; Test and set bits $51.b [Reads: Accumulator] [Flags: Z]
	sty $0C65.w		; 8C 65 0C ; Store Y register to $0C65.w [Reads: Y Index]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$E726.w		; 69 26 E7 ; Add #$E726.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	trb $320B.w		; 1C 0B 32 ; Test and reset bits $320B.w [Reads: Accumulator] [Flags: Z]
	sbc ($46.b,S),Y		; F3 46 ; Subtract with carry (stack relative indirect indexed) ($46.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $FE53.w,Y		; 99 53 FE ; Store accumulator to $FE53.w,Y [Reads: Accumulator, Y Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	eor ($69.b,X)		; 41 69 ; Exclusive OR accumulator with memory ($69.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $05.b		; 26 05 ; Rotate left $05.b [Reads: Direct Page] [Flags: ZNC]
	ora $4C.b,X		; 15 4C ; OR accumulator with memory $4C.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($69.b),Y		; 11 69 ; OR accumulator with memory ($69.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $A4.b		; 26 A4 ; Rotate left $A4.b [Reads: Direct Page] [Flags: ZNC]
	ora $2605.w,Y		; 19 05 26 ; OR accumulator with memory $2605.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $32.b		; 65 32 ; Add $32.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rol $E8.b,X		; 36 E8 ; Rotate left $E8.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($8E.b,S),Y		; 33 8E ; AND accumulator (stack relative indirect indexed) ($8E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$4654.w		; 29 54 46 ; Logical AND #$4654.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($2A.b),Y		; B1 2A ; Load accumulator ($2A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $F5.b,X		; 15 F5 ; OR accumulator with memory $F5.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	nop		; EA ; No operation
	tsb $4D.b		; 04 4D ; Test and set bits $4D.b [Reads: Accumulator] [Flags: Z]
	ora ($D1.b),Y		; 11 D1 ; OR accumulator with memory ($D1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($16.b,X)		; 21 16 ; Logical AND ($16.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($DA.b)		; 12 DA ; OR accumulator with memory (indirect) ($DA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0150.w,X		; 1E 50 01 ; Arithmetic shift left $0150.w,X [Reads: X Index] [Flags: ZNC]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora $19F1.w		; 0D F1 19 ; Logical OR $19F1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda [$3E.b],Y		; B7 3E ; Load accumulator (long indexed) [$3E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $6E5B.w,X		; BD 5B 6E ; Load $6E5B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $29F2.w,Y		; 19 F2 29 ; OR accumulator with memory $29F2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($08.b,X)		; 21 08 ; Logical AND ($08.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $10.b,S		; 63 10 ; Add with carry (stack relative) $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lda $18.b		; A5 18 ; Load $18.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$2C.b]		; E7 2C ; Subtract with carry (long) [$2C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and #$6B35.w		; 29 35 6B ; Logical AND #$6B35.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$0CA7.w		; 49 A7 0C ; Exclusive OR #$0CA7.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $1429.w		; 4E 29 14 ; Logical shift right $1429.w [Flags: ZNC]
	lsr $FA.b		; 46 FA ; Logical shift right $FA.b [Reads: Direct Page] [Flags: ZNC]
	lsr $1DAD.w,X		; 5E AD 1D ; Logical shift right $1DAD.w,X [Reads: X Index] [Flags: ZNC]
	sbc $3AF57F.l,X		; FF 7F F5 3A ; Subtract with carry (long,X) $3AF57F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	sty $5221.w		; 8C 21 52 ; Store Y register to $5221.w [Reads: Y Index]
	rol $3AF5.w		; 2E F5 3A ; Rotate left $3AF5.w [Flags: ZNC]
	cpy $501D.w		; CC 1D 50 ; Compare $501D.w with Y register [Reads: Y Index] [Flags: ZNC]
	rol $1129.w		; 2E 29 11 ; Rotate left $1129.w [Flags: ZNC]
	tsb $25.b		; 04 25 ; Test and set bits $25.b [Reads: Accumulator] [Flags: Z]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and $41EC.w		; 2D EC 41 ; Logical AND $41EC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp ($D04E.w)		; 6C 4E D0 ; Jump indirect to ($D04E.w) [Flow: jump]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	.db $80, $19		; 80 19 ; Branch always to $80, $19 [Flow: branch]
	adc $6F.b,X		; 75 6F ; Add $6F.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	.db $80, $19		; 80 19 ; Branch always to $80, $19 [Flow: branch]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $1A2F.w		; 0D 2F 1A ; Logical OR $1A2F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $F533.w,Y		; 19 33 F5 ; OR accumulator with memory $F533.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2EBC.w		; 09 BC 2E ; Logical OR #$2EBC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora $C0.b,X		; 15 C0 ; OR accumulator with memory $C0.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	ora $196E.w,X		; 1D 6E 19 ; OR accumulator with memory $196E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($29.b)		; F2 29 ; Subtract with carry (indirect) ($29.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $19		; 80 19 ; Branch always to $80, $19 [Flow: branch]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	and $8011.w		; 2D 11 80 ; Logical AND $8011.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $2A02.w,Y		; 19 02 2A ; OR accumulator with memory $2A02.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $3219.w		; 8C 19 32 ; Store Y register to $3219.w [Reads: Y Index]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $1D		; 90 1D ; Branch if carry clear to $90, $1D [Flow: branch]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora $FF.b,X		; 15 FF ; OR accumulator with memory $FF.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $8C7FFF.l,X		; 7F FF 7F 8C ; Add long $8C7FFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $2A32.w,Y		; 19 32 2A ; OR accumulator with memory $2A32.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $19		; 80 19 ; Branch always to $80, $19 [Flow: branch]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sta [$0C.b]		; 87 0C ; Store accumulator (long) [$0C.b] [Reads: Accumulator, Direct Page]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $2D		; 10 2D ; Branch if plus to $10, $2D [Flow: branch]
	ora ($8C.b),Y		; 11 8C ; OR accumulator with memory ($8C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $2A32.w,Y		; 19 32 2A ; OR accumulator with memory $2A32.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $90, $1D		; 90 1D ; Branch if carry clear to $90, $1D [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	trb $B0.b		; 14 B0 ; Test and reset bits $B0.b [Reads: Accumulator] [Flags: Z]
	ora $2E75.w,X		; 1D 75 2E ; OR accumulator with memory $2E75.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $187FFF.l,X		; 3F FF 7F 18 ; AND accumulator with memory (long,X) $187FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor [$5A.b]		; 47 5A ; Exclusive OR accumulator with memory (long) [$5A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $EA0884.l		; 4F 84 08 EA ; Exclusive OR accumulator with memory (long) $EA0884.l [Writes: Accumulator] [Flags: ZN]
	tsb $4D.b		; 04 4D ; Test and set bits $4D.b [Reads: Accumulator] [Flags: Z]
	ora ($D1.b),Y		; 11 D1 ; OR accumulator with memory ($D1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($D7.b,X)		; 21 D7 ; Logical AND ($D7.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($7B.b),Y		; 31 7B ; AND accumulator with memory ($7B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $53.b		; 46 53 ; Logical shift right $53.b [Reads: Direct Page] [Flags: ZNC]
	and $C6.b		; 25 C6 ; Logical AND $C6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $B2		; 10 B2 ; Branch if plus to $10, $B2 [Flow: branch]
	and $57.b		; 25 57 ; Logical AND $57.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($DB.b)		; 32 DB ; AND accumulator with memory (indirect) ($DB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sty $2D.b,X		; 94 2D ; Store Y register $2D.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ldy $634E.w,X		; BC 4E 63 ; Load Y register $634E.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	tsb $25B2.w		; 0C B2 25 ; Test and set bits $25B2.w [Reads: Accumulator] [Flags: Z]
	eor [$32.b],Y		; 57 32 ; Exclusive OR accumulator with memory (long indexed) [$32.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	rol $48.b,X		; 36 48 ; Rotate left $48.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and #$396C.w		; 29 6C 39 ; Logical AND #$396C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $4A		; 10 4A ; Branch if plus to $10, $4A [Flow: branch]
	inc $14.b		; E6 14 ; Increment $14.b [Reads: Direct Page] [Flags: ZN]
	cmp #$6E21.w		; C9 21 6E ; Compare #$6E21.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $8C5FB8.l		; 4F B8 5F 8C ; Exclusive OR accumulator with memory (long) $8C5FB8.l [Writes: Accumulator] [Flags: ZN]
	ora $2A32.w,Y		; 19 32 2A ; OR accumulator with memory $2A32.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	nop		; EA ; No operation
	tsb $4D.b		; 04 4D ; Test and set bits $4D.b [Reads: Accumulator] [Flags: Z]
	ora ($D1.b),Y		; 11 D1 ; OR accumulator with memory ($D1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($AC.b,X)		; 21 AC ; Logical AND ($AC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $262F.w,Y		; 19 2F 26 ; OR accumulator with memory $262F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc [$1D.b]		; 67 1D ; Add with carry (long) [$1D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stx $1414.w		; 8E 14 14 ; Store X register to $1414.w [Reads: X Index]
	ora $21D9.w,Y		; 19 D9 21 ; OR accumulator with memory $21D9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $0C0132.l,X		; FF 32 01 0C ; Subtract with carry (long,X) $0C0132.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	nop		; EA ; No operation
	tsb $4D.b		; 04 4D ; Test and set bits $4D.b [Reads: Accumulator] [Flags: Z]
	ora ($D1.b),Y		; 11 D1 ; OR accumulator with memory ($D1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($8E.b,X)		; 21 8E ; Logical AND ($8E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor #$5A13.w		; 49 13 5A ; Exclusive OR #$5A13.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $0884.w,X		; 3D 84 08 ; AND accumulator with memory $0884.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $F30D.w		; 6E 0D F3 ; Rotate right $F30D.w [Flags: ZNC]
	ora $2656.w,Y		; 19 56 26 ; OR accumulator with memory $2656.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$2E.b],Y		; 97 2E ; Store accumulator (long indexed) [$2E.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tsb $CA11.w		; 0C 11 CA ; Test and set bits $CA11.w [Reads: Accumulator] [Flags: Z]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$6B05.w		; 09 05 6B ; Logical OR #$6B05.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($31.b),Y		; 11 31 ; OR accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $3A.b,X		; B5 3A ; Load $3A.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $D01D.w		; 4C 1D D0 ; Jump to $D01D.w [Flow: jump]
	ora ($84.b,X)		; 01 84 ; Logical OR ($84.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp [$0C.b]		; C7 0C ; Compare accumulator (long) [$0C.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $4D.b,X		; 15 4D ; OR accumulator with memory $4D.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF.b,X		; 15 FF ; OR accumulator with memory $FF.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	lsr $AF.b,X		; 56 AF ; Logical shift right $AF.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and ($42.b,X)		; 21 42 ; Logical AND ($42.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $42, $08		; 42 08 ; Reserved instruction
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	eor #$E808.w		; 49 08 E8 ; Exclusive OR #$E808.w with accumulator [Writes: Accumulator] [Flags: ZN]
	trb $0C63.w		; 1C 63 0C ; Test and reset bits $0C63.w [Reads: Accumulator] [Flags: Z]
	ora #$8421.w		; 09 21 84 ; Logical OR #$8421.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $07		; 10 07 ; Branch if plus to $10, $07 [Flow: branch]
	tsb $6A.b		; 04 6A ; Test and set bits $6A.b [Reads: Accumulator] [Flags: Z]
	.db $10, $CE		; 10 CE ; Branch if plus to $10, $CE [Flow: branch]
	tsb $52.b		; 04 52 ; Test and set bits $52.b [Reads: Accumulator] [Flags: Z]
	ora $25.b,X		; 15 25 ; OR accumulator with memory $25.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0CE8.w,Y		; 19 E8 0C ; OR accumulator with memory $0CE8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	wai		; CB ; Wait for interrupt
	trb $1DCE.w		; 1C CE 1D ; Test and reset bits $1DCE.w [Reads: Accumulator] [Flags: Z]
	sty $36.b,X		; 94 36 ; Store Y register $36.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor [$4C.b]		; 47 4C ; Exclusive OR accumulator with memory (long) [$4C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $18AC.w,X		; 1D AC 18 ; OR accumulator with memory $18AC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $6C.b,X		; 15 6C ; OR accumulator with memory $6C.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $21AF.w,Y		; 19 AF 21 ; OR accumulator with memory $21AF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $41.b,X		; F5 41 ; Subtract $41.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jmp $9A1D.w		; 4C 1D 9A ; Jump to $9A1D.w [Flow: jump]
	lsr $00.b,X		; 56 00 ; Logical shift right $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $1812.w		; 0C 12 18 ; Test and set bits $1812.w [Reads: Accumulator] [Flags: Z]
	asl $2A24.w,X		; 1E 24 2A ; Arithmetic shift left $2A24.w,X [Reads: X Index] [Flags: ZNC]
	.db $30, $36		; 30 36 ; Branch if minus to $30, $36 [Flow: branch]
	bit $0042.w,X		; 3C 42 00 ; Test bits $0042.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $382A.w		; 1C 2A 38 ; Test and reset bits $382A.w [Reads: Accumulator] [Flags: Z]
	lsr $54.b		; 46 54 ; Logical shift right $54.b [Reads: Direct Page] [Flags: ZNC]
	.db $62, $70, $7E		; 62 70 7E ; Push effective relative address $62, $70, $7E [Writes: Stack Pointer]
	sty $A89A.w		; 8C 9A A8 ; Store Y register to $A89A.w [Reads: Y Index]
	ldx $C4.b,Y		; B6 C4 ; Load X register $C4.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	cmp ($00.b)		; D2 00 ; Compare accumulator (indirect) ($00.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $54.b		; 00 54 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9A.b		; 00 9A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B6.b		; 00 B6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C4.b		; 00 C4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D2.b		; 00 D2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EE.b		; 00 EE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($42.b,X)		; 01 42 ; Logical OR ($42.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $3C2D1E.l		; 0F 1E 2D 3C ; OR accumulator with memory (long) $3C2D1E.l [Writes: Accumulator] [Flags: ZN]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	mvn $8C,$70		; 54 70 8C ; Move block negative $8C,$70 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $54.b		; 00 54 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D2.b		; 00 D2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($50.b,X)		; 01 50 ; Logical OR ($50.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($7A.b,X)		; 01 7A ; Logical OR ($7A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($A4.b,X)		; 01 A4 ; Logical OR ($A4.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($CE.b,X)		; 01 CE ; Logical OR ($CE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($F8.b,X)		; 01 F8 ; Logical OR ($F8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $4C.b		; 02 4C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $76.b		; 02 76 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A0.b		; 02 A0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $CA.b		; 02 CA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F4.b		; 02 F4 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $1E.b		; 02 1E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D2.b		; 00 D2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($5E.b,X)		; 01 5E ; Logical OR ($5E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $00.b,X		; B4 00 ; Load Y register $00.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ora ($1C.b,X)		; 01 1C ; Logical OR ($1C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $D0.b		; 02 D0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $84.b		; 02 84 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $38.b,S		; 03 38 ; OR accumulator with stack relative $38.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $EC.b		; 04 EC ; Test and set bits $EC.b [Reads: Accumulator] [Flags: Z]
	tsb $A0.b		; 04 A0 ; Test and set bits $A0.b [Reads: Accumulator] [Flags: Z]
	ora $54.b		; 05 54 ; Logical OR $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZNC]
	ora [$BC.b]		; 07 BC ; OR accumulator with memory (long) [$BC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$70.b]		; 07 70 ; OR accumulator with memory (long) [$70.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $09.b		; 24 09 ; Test bits $09.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora #$0A8C.w		; 09 8C 0A ; Logical OR #$0A8C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	pea $A80B.w		; F4 0B A8 ; Push absolute address $A80B.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	tsb $0D5C.w		; 0C 5C 0D ; Test and set bits $0D5C.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($AE.b,X)		; 21 AE ; Logical AND ($AE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ldy $BF0A.w		; AC 0A BF ; Load $BF0A.w into Y register [Writes: Y Index] [Flags: ZN]
	dec $EB.b		; C6 EB ; Decrement $EB.b [Reads: Direct Page] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$D39E.w		; 69 9E D3 ; Add #$D39E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$0102.w		; A9 02 01 ; Load #$0102.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $0ABD.w		; AE BD 0A ; Load $0ABD.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	lda #$01E2.w		; A9 E2 01 ; Load #$01E2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$0006.w		; A2 06 00 ; Load #$0006.w into X register [Writes: X Index] [Flags: ZN]
	jsr $EF30.w		; 20 30 EF ; Jump to subroutine at $EF30.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$21		; C2 21
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0040.w		; 29 40 00 ; Logical AND #$0040.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $1BEC73.l,X		; BF 73 EC 1B ; Load long $1BEC73.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$D218.w		; 69 18 D2 ; Add #$D218.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$0122.w		; A9 22 01 ; Load #$0122.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$000E.w		; A2 0E 00 ; Load #$000E.w into X register [Writes: X Index] [Flags: ZN]
	ldy #$0003.w		; A0 03 00 ; Load #$0003.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $EF4B.w		; 20 4B EF ; Jump to subroutine at $EF4B.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	lda $0AAD.w		; AD AD 0A ; Load $0AAD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $1BEBD6.l,X		; BF D6 EB 1B ; Load long $1BEBD6.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$D4E0.w		; 69 E0 D4 ; Add #$D4E0.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$01A2.w		; A9 A2 01 ; Load #$01A2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$0006.w		; A2 06 00 ; Load #$0006.w into X register [Writes: X Index] [Flags: ZN]
	jsr $EF30.w		; 20 30 EF ; Jump to subroutine at $EF30.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	lda $0AAE.w		; AD AE 0A ; Load $0AAE.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $1BEBD6.l,X		; BF D6 EB 1B ; Load long $1BEBD6.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$D4E0.w		; 69 E0 D4 ; Add #$D4E0.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$01C2.w		; A9 C2 01 ; Load #$01C2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$0006.w		; A2 06 00 ; Load #$0006.w into X register [Writes: X Index] [Flags: ZN]
	jsr $EF30.w		; 20 30 EF ; Jump to subroutine at $EF30.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$21		; C2 21
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $1BEBB4.l,X		; BF B4 EB 1B ; Load long $1BEBB4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$D630.w		; 69 30 D6 ; Add #$D630.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$01B2.w		; A9 B2 01 ; Load #$01B2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$0002.w		; A2 02 00 ; Load #$0002.w into X register [Writes: X Index] [Flags: ZN]
	jsr $EF7B.w		; 20 7B EF ; Jump to subroutine at $EF7B.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$21		; C2 21
	lda $7EF35A.l		; AF 5A F3 7E ; Load long $7EF35A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $1BEBC1.l,X		; BF C1 EB 1B ; Load long $1BEBC1.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$D648.w		; 69 48 D6 ; Add #$D648.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$01B8.w		; A9 B8 01 ; Load #$01B8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$0003.w		; A2 03 00 ; Load #$0003.w into X register [Writes: X Index] [Flags: ZN]
	jsr $EF7B.w		; 20 7B EF ; Jump to subroutine at $EF7B.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$21		; C2 21
	ldx $0AB0.w		; AE B0 0A ; Load $0AB0.w into X register [Writes: X Index] [Flags: ZN]
	lda $1BEBC6.l,X		; BF C6 EB 1B ; Load long $1BEBC6.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$D446.w		; 69 46 D4 ; Add #$D446.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$01C2.w		; A9 C2 01 ; Load #$01C2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$0006.w		; A2 06 00 ; Load #$0006.w into X register [Writes: X Index] [Flags: ZN]
	jsr $EF30.w		; 20 30 EF ; Jump to subroutine at $EF30.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
.ACCU 16
	rep #$21		; C2 21
	ldx $0AB1.w		; AE B1 0A ; Load $0AB1.w into X register [Writes: X Index] [Flags: ZN]
	lda $1BEBC6.l,X		; BF C6 EB 1B ; Load long $1BEBC6.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$D446.w		; 69 46 D4 ; Add #$D446.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$01D2.w		; A9 D2 01 ; Load #$01D2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$0006.w		; A2 06 00 ; Load #$0006.w into X register [Writes: X Index] [Flags: ZN]
	jsr $EF30.w		; 20 30 EF ; Jump to subroutine at $EF30.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$21		; C2 21
	ldx #$07.b		; A2 07 ; Load #$07.b into X register [Writes: X Index] [Flags: ZN]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0040.w		; 29 40 00 ; Logical AND #$0040.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $1BEBC6.l,X		; BF C6 EB 1B ; Load long $1BEBC6.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$D446.w		; 69 46 D4 ; Add #$D446.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$0112.w		; A9 12 01 ; Load #$0112.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $0ABD.w		; AE BD 0A ; Load $0ABD.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	lda #$01F2.w		; A9 F2 01 ; Load #$01F2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$0006.w		; A2 06 00 ; Load #$0006.w into X register [Writes: X Index] [Flags: ZN]
	jsr $EF30.w		; 20 30 EF ; Jump to subroutine at $EF30.w [Writes: Stack Pointer] [Flow: call]
.INDEX 8
	sep #$10		; E2 10
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $1BEBC6.l,X		; BF C6 EB 1B ; Load long $1BEBC6.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$D446.w		; 69 46 D4 ; Add #$D446.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$01D2.w		; A9 D2 01 ; Load #$01D2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$0006.w		; A2 06 00 ; Load #$0006.w into X register [Writes: X Index] [Flags: ZN]
	jsr $EF30.w		; 20 30 EF ; Jump to subroutine at $EF30.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$21		; C2 21
	lda #$D70A.w		; A9 0A D7 ; Load #$D70A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$0182.w		; A9 82 01 ; Load #$0182.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$0006.w		; A2 06 00 ; Load #$0006.w into X register [Writes: X Index] [Flags: ZN]
	ldy #$0002.w		; A0 02 00 ; Load #$0002.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $EF4B.w		; 20 4B EF ; Jump to subroutine at $EF4B.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $52.b,X		; F6 52 ; Increment memory $52.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ror $03.b,X		; 76 03 ; Rotate right $03.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
.ACCU 16
	rep #$21		; C2 21
	lda $7EF35B.l		; AF 5B F3 7E ; Load long $7EF35B.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $1BEC06.l,X		; BF 06 EC 1B ; Load long $1BEC06.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$D308.w		; 69 08 D3 ; Add #$D308.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$01E2.w		; A9 E2 01 ; Load #$01E2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$000E.w		; A2 0E 00 ; Load #$000E.w into X register [Writes: X Index] [Flags: ZN]
	jsr $EF7B.w		; 20 7B EF ; Jump to subroutine at $EF7B.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $7EF354.l		; AF 54 F3 7E ; Load long $7EF354.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $1BEDF5.l,X		; BF F5 ED 1B ; Load long $1BEDF5.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC4FA.l		; 8F FA C4 7E ; Store accumulator (long) $7EC4FA.l [Reads: Accumulator]
	sta $7EC6FA.l		; 8F FA C6 7E ; Store accumulator (long) $7EC6FA.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$21		; C2 21
	lda #$E544.w		; A9 44 E5 ; Load #$E544.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$0040.w		; A9 40 00 ; Load #$0040.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$000F.w		; A2 0F 00 ; Load #$000F.w into X register [Writes: X Index] [Flags: ZN]
	ldy #$0005.w		; A0 05 00 ; Load #$0005.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $EF4B.w		; 20 4B EF ; Jump to subroutine at $EF4B.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$21		; C2 21
	ldx $0AB2.w		; AE B2 0A ; Load $0AB2.w into X register [Writes: X Index] [Flags: ZN]
	lda $1BEC47.l,X		; BF 47 EC 1B ; Load long $1BEC47.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$D660.w		; 69 60 D6 ; Add #$D660.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$000F.w		; A2 0F 00 ; Load #$000F.w into X register [Writes: X Index] [Flags: ZN]
	ldy #$0001.w		; A0 01 00 ; Load #$0001.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $EF4B.w		; 20 4B EF ; Jump to subroutine at $EF4B.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$21		; C2 21
	ldx $0AB6.w		; AE B6 0A ; Load $0AB6.w into X register [Writes: X Index] [Flags: ZN]
	lda $1BEC4B.l,X		; BF 4B EC 1B ; Load long $1BEC4B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$D734.w		; 69 34 D7 ; Add #$D734.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
.INDEX 16
	rep #$10		; C2 10
	lda #$0042.w		; A9 42 00 ; Load #$0042.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$000E.w		; A2 0E 00 ; Load #$000E.w into X register [Writes: X Index] [Flags: ZN]
	ldy #$0005.w		; A0 05 00 ; Load #$0005.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $EF4B.w		; 20 4B EF ; Jump to subroutine at $EF4B.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$0112.w		; A9 12 01 ; Load #$0112.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $0ABD.w		; AE BD 0A ; Load $0ABD.w into X register [Writes: X Index] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	lda #$01F2.w		; A9 F2 01 ; Load #$01F2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$0006.w		; A2 06 00 ; Load #$0006.w into X register [Writes: X Index] [Flags: ZN]
	jsr $EF30.w		; 20 30 EF ; Jump to subroutine at $EF30.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$21		; C2 21
	ldx $0AB8.w		; AE B8 0A ; Load $0AB8.w into X register [Writes: X Index] [Flags: ZN]
	lda $1BEBC6.l,X		; BF C6 EB 1B ; Load long $1BEBC6.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$E604.w		; 69 04 E6 ; Add #$E604.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$00E2.w		; A9 E2 00 ; Load #$00E2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$0006.w		; A2 06 00 ; Load #$0006.w into X register [Writes: X Index] [Flags: ZN]
	jsr $EF30.w		; 20 30 EF ; Jump to subroutine at $EF30.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$21		; C2 21
	lda $0AB3.w		; AD B3 0A ; Load $0AB3.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $1BEC3B.l,X		; BF 3B EC 1B ; Load long $1BEC3B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$E6C8.w		; 69 C8 E6 ; Add #$E6C8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$0042.w		; A9 42 00 ; Load #$0042.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$0006.w		; A2 06 00 ; Load #$0006.w into X register [Writes: X Index] [Flags: ZN]
	ldy #$0004.w		; A0 04 00 ; Load #$0004.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $EF4B.w		; 20 4B EF ; Jump to subroutine at $EF4B.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$21		; C2 21
	lda $0AB4.w		; AD B4 0A ; Load $0AB4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $1BEC13.l,X		; BF 13 EC 1B ; Load long $1BEC13.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$E86C.w		; 69 6C E8 ; Add #$E86C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$0052.w		; A9 52 00 ; Load #$0052.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$0006.w		; A2 06 00 ; Load #$0006.w into X register [Writes: X Index] [Flags: ZN]
	ldy #$0002.w		; A0 02 00 ; Load #$0002.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $EF4B.w		; 20 4B EF ; Jump to subroutine at $EF4B.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$21		; C2 21
	lda $0AB5.w		; AD B5 0A ; Load $0AB5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $1BEC13.l,X		; BF 13 EC 1B ; Load long $1BEC13.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$E86C.w		; 69 6C E8 ; Add #$E86C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$00B2.w		; A9 B2 00 ; Load #$00B2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$0006.w		; A2 06 00 ; Load #$0006.w into X register [Writes: X Index] [Flags: ZN]
	ldy #$0002.w		; A0 02 00 ; Load #$0002.w into Y register [Writes: Y Index] [Flags: ZN]
	jsr $EF4B.w		; 20 4B EF ; Jump to subroutine at $EF4B.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0AA8.w		; 6D A8 0A ; Add $0AA8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A7.b		; 02 A7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C3.b		; 00 C3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $00E6.w,X		; 7E E6 00 ; Rotate right $00E6.w,X [Reads: X Index] [Flags: ZNC]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $F1		; 10 F1 ; Branch if plus to $10, $F1 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	stx $06.b		; 86 06 ; Store X register to $06.b [Reads: X Index]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $AD.b		; 02 AD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC300.l,X		; 9F 00 C3 7E ; Store accumulator (long,X) $7EC300.l,X [Reads: Accumulator, X Index]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $F1		; 10 F1 ; Branch if plus to $10, $F1 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$20.b		; 69 20 ; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $C6.b		; 04 C6 ; Test and set bits $C6.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $DC		; 10 DC ; Branch if plus to $10, $DC [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A7.b		; 02 A7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C3.b		; 00 C3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $009F.w,X		; 7E 9F 00 ; Rotate right $009F.w,X [Reads: X Index] [Flags: ZNC]
	cmp $7E.b		; C5 7E ; Compare $7E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $ED		; 10 ED ; Branch if plus to $10, $ED [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	lda $700354.l		; AF 54 03 70 ; Load long $700354.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $70035B.l		; AF 5B 03 70 ; Load long $70035B.l into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $F032.w		; 20 32 F0 ; Jump to subroutine at $F032.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	lda $700359.l		; AF 59 03 70 ; Load long $700359.l into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $F072.w		; 20 72 F0 ; Jump to subroutine at $F072.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	lda $70035A.l		; AF 5A 03 70 ; Load long $70035A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $F09A.w		; 20 9A F0 ; Jump to subroutine at $F09A.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0040.w		; A2 40 00 ; Load #$0040.w into X register [Writes: X Index] [Flags: ZN]
	lda $700854.l		; AF 54 08 70 ; Load long $700854.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $70085B.l		; AF 5B 08 70 ; Load long $70085B.l into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $F032.w		; 20 32 F0 ; Jump to subroutine at $F032.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0040.w		; A2 40 00 ; Load #$0040.w into X register [Writes: X Index] [Flags: ZN]
	lda $700859.l		; AF 59 08 70 ; Load long $700859.l into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $F072.w		; 20 72 F0 ; Jump to subroutine at $F072.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0040.w		; A2 40 00 ; Load #$0040.w into X register [Writes: X Index] [Flags: ZN]
	lda $70085A.l		; AF 5A 08 70 ; Load long $70085A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $F09A.w		; 20 9A F0 ; Jump to subroutine at $F09A.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0080.w		; A2 80 00 ; Load #$0080.w into X register [Writes: X Index] [Flags: ZN]
	lda $700D54.l		; AF 54 0D 70 ; Load long $700D54.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $700D5B.l		; AF 5B 0D 70 ; Load long $700D5B.l into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $F032.w		; 20 32 F0 ; Jump to subroutine at $F032.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0080.w		; A2 80 00 ; Load #$0080.w into X register [Writes: X Index] [Flags: ZN]
	lda $700D59.l		; AF 59 0D 70 ; Load long $700D59.l into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $F072.w		; 20 72 F0 ; Jump to subroutine at $F072.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0080.w		; A2 80 00 ; Load #$0080.w into X register [Writes: X Index] [Flags: ZN]
	lda $700D5A.l		; AF 5A 0D 70 ; Load long $700D5A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $F09A.w		; 20 9A F0 ; Jump to subroutine at $F09A.w [Writes: Stack Pointer] [Flow: call]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	lda $D226.w,Y		; B9 26 D2 ; Load $D226.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC4D0.l,X		; 9F D0 C4 7E ; Store accumulator (long,X) $7EC4D0.l,X [Reads: Accumulator, X Index]
	sta $7EC6D0.l,X		; 9F D0 C6 7E ; Store accumulator (long,X) $7EC6D0.l,X [Reads: Accumulator, X Index]
	lda $D244.w,Y		; B9 44 D2 ; Load $D244.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC4F0.l,X		; 9F F0 C4 7E ; Store accumulator (long,X) $7EC4F0.l,X [Reads: Accumulator, X Index]
	sta $7EC6F0.l,X		; 9F F0 C6 7E ; Store accumulator (long,X) $7EC6F0.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$000E.w		; E0 0E 00 ; Compare #$000E.w with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $E1		; D0 E1 ; Branch if not equal to $D0, $E1 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $EC06.w,Y		; B9 06 EC ; Load $EC06.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc #$F0.b		; 69 F0 ; Add #$F0.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $18B9.w		; 0E B9 18 ; Arithmetic shift left $18B9.w [Flags: ZNC]
	cmp ($9F.b)		; D2 9F ; Compare accumulator (indirect) ($9F.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cop $C4.b		; 02 C4 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $029F.w,X		; 7E 9F 02 ; Rotate right $029F.w,X [Reads: X Index] [Flags: ZNC]
	dec $7E.b		; C6 7E ; Decrement $7E.b [Reads: Direct Page] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $ED		; D0 ED ; Branch if not equal to $D0, $ED [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0A3A.w		; 0E 3A 0A ; Arithmetic shift left $0A3A.w [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $EDF5.w,Y		; B9 F5 ED ; Load $EDF5.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC41A.l,X		; 9F 1A C4 7E ; Store accumulator (long,X) $7EC41A.l,X [Reads: Accumulator, X Index]
	sta $7EC61A.l,X		; 9F 1A C6 7E ; Store accumulator (long,X) $7EC61A.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $EBB4.w,Y		; B9 B4 EB ; Load $EBB4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc #$18.b		; 69 18 ; Add #$18.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tsb $A8.b		; 04 A8 ; Test and set bits $A8.b [Reads: Accumulator] [Flags: Z]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $18B9.w		; 0E B9 18 ; Arithmetic shift left $18B9.w [Flags: ZNC]
	cmp ($9F.b)		; D2 9F ; Compare accumulator (indirect) ($9F.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and ($C4.b)		; 32 C4 ; AND accumulator with memory (indirect) ($C4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $329F.w,X		; 7E 9F 32 ; Rotate right $329F.w,X [Reads: X Index] [Flags: ZNC]
	dec $7E.b		; C6 7E ; Decrement $7E.b [Reads: Direct Page] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $ED		; D0 ED ; Branch if not equal to $D0, $ED [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $EBC1.w,Y		; B9 C1 EB ; Load $EBC1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc #$30.b		; 69 30 ; Add #$30.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tsb $A8.b		; 04 A8 ; Test and set bits $A8.b [Reads: Accumulator] [Flags: Z]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $18B9.w		; 0E B9 18 ; Arithmetic shift left $18B9.w [Flags: ZNC]
	cmp ($9F.b)		; D2 9F ; Compare accumulator (indirect) ($9F.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	cpy $7E.b		; C4 7E ; Compare $7E.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	sta $7EC638.l,X		; 9F 38 C6 7E ; Store accumulator (long,X) $7EC638.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $ED		; D0 ED ; Branch if not equal to $D0, $ED [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	lda $1BEBF2.l		; AF F2 EB 1B ; Load long $1BEBF2.l into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$D4E0.w		; 69 E0 D4 ; Add #$D4E0.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$0162.w		; A9 62 01 ; Load #$0162.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$0006.w		; A2 06 00 ; Load #$0006.w into X register [Writes: X Index] [Flags: ZN]
	jsr $EF7B.w		; 20 7B EF ; Jump to subroutine at $EF7B.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$0182.w		; A9 82 01 ; Load #$0182.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$0006.w		; A2 06 00 ; Load #$0006.w into X register [Writes: X Index] [Flags: ZN]
	jsr $EF7B.w		; 20 7B EF ; Jump to subroutine at $EF7B.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$01A2.w		; A9 A2 01 ; Load #$01A2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$0006.w		; A2 06 00 ; Load #$0006.w into X register [Writes: X Index] [Flags: ZN]
	jsr $EF7B.w		; 20 7B EF ; Jump to subroutine at $EF7B.w [Writes: Stack Pointer] [Flow: call]
	lda $1BEC00.l		; AF 00 EC 1B ; Load long $1BEC00.l into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$D4E0.w		; 69 E0 D4 ; Add #$D4E0.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$01C2.w		; A9 C2 01 ; Load #$01C2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$0006.w		; A2 06 00 ; Load #$0006.w into X register [Writes: X Index] [Flags: ZN]
	jsr $EF7B.w		; 20 7B EF ; Jump to subroutine at $EF7B.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$02.b]		; 27 02 ; AND accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $50, $02		; 50 02 ; Branch if overflow clear to $50, $02 [Flow: branch]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$02.b]		; 27 02 ; AND accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($42.b,X)		; 01 42 ; Logical OR ($42.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $02		; 42 02 ; Reserved instruction
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$48.b]		; 27 48 ; AND accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$01.b]		; 27 01 ; AND accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$01.b]		; 27 01 ; AND accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$02.b]		; 27 02 ; AND accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$02.b]		; 27 02 ; AND accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $54.b		; 00 54 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($1A.b)		; 12 1A ; OR accumulator with memory (indirect) ($1A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$12.b]		; 27 12 ; AND accumulator with memory (long) [$12.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$18.b		; 09 18 ; Logical OR #$18.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $10, $09		; 10 09 ; Branch if plus to $10, $09 [Flow: branch]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $09		; 10 09 ; Branch if plus to $10, $09 [Flow: branch]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($1A.b)		; 12 1A ; OR accumulator with memory (indirect) ($1A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($48.b)		; 12 48 ; OR accumulator with memory (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($29.b,X)		; 01 29 ; Logical OR ($29.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $020101.l		; 22 01 01 02 ; Jump to subroutine long $020101.l [Writes: Stack Pointer] [Flow: call]
	jsl $010101.l		; 22 01 01 01 ; Jump to subroutine long $010101.l [Writes: Stack Pointer] [Flow: call]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $42.b		; 02 42 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $42.b,S		; 43 42 ; Exclusive OR accumulator with stack relative $42.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	mvp $00,$01		; 44 01 00 ; Move block positive $00,$01 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $01		; 42 01 ; Reserved instruction
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $020201.l		; 22 01 02 02 ; Jump to subroutine long $020201.l [Writes: Stack Pointer] [Flow: call]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor $01.b,S		; 43 01 ; Exclusive OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($2B.b,X)		; 01 2B ; Logical OR ($2B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b)		; 52 00 ; Exclusive OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $4B.b		; 00 4B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$2B.b]		; 27 2B ; AND accumulator with memory (long) [$2B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($57.b,X)		; 01 57 ; Logical OR ($57.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor [$57.b],Y		; 57 57 ; Exclusive OR accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$01.b],Y		; 57 01 ; Exclusive OR accumulator with memory (long indexed) [$01.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($53.b,X)		; 01 53 ; Logical OR ($53.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	lsr $56.b,X		; 56 56 ; Logical shift right $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lsr $56.b,X		; 56 56 ; Logical shift right $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$20.b]		; 27 20 ; AND accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $2720.w		; 20 20 27 ; Jump to subroutine at $2720.w [Writes: Stack Pointer] [Flow: call]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0202.w		; 20 02 02 ; Jump to subroutine at $0202.w [Writes: Stack Pointer] [Flow: call]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $020109.l		; 5C 09 01 02 ; Jump long to $020109.l [Flow: jump]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $090909.l		; 5C 09 09 09 ; Jump long to $090909.l [Flow: jump]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora #$1A.b		; 09 1A ; Logical OR #$1A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $10, $09		; 10 09 ; Branch if plus to $10, $09 [Flow: branch]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$1A.b		; 09 1A ; Logical OR #$1A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jmp $015C08.l		; 5C 08 5C 01 ; Jump long to $015C08.l [Flow: jump]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1A.b,X)		; 01 1A ; Logical OR ($1A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $020008.l		; 5C 08 00 02 ; Jump long to $020008.l [Flow: jump]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $5C.b		; 02 5C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$55.b]		; 27 55 ; AND accumulator with memory (long) [$55.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $27.b,X		; 55 27 ; Exclusive OR accumulator with memory $27.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$02.b]		; 27 02 ; AND accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($2B.b,X)		; 01 2B ; Logical OR ($2B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $42, $00		; 42 00 ; Reserved instruction
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$01.b]		; 27 01 ; AND accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$48.b]		; 27 48 ; AND accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $010022.l		; 22 22 00 01 ; Jump to subroutine long $010022.l [Writes: Stack Pointer] [Flow: call]
	eor $01.b,S		; 43 01 ; Exclusive OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$01.b]		; 27 01 ; AND accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($42.b,X)		; 01 42 ; Logical OR ($42.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($42.b,X)		; 01 42 ; Logical OR ($42.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $42, $00		; 42 00 ; Reserved instruction
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $42.b		; 02 42 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $000202.l		; 22 02 02 00 ; Jump to subroutine long $000202.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($42.b,X)		; 01 42 ; Logical OR ($42.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $5C.b		; 02 5C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $02		; 42 02 ; Reserved instruction
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $02		; 42 02 ; Reserved instruction
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($29.b,X)		; 01 29 ; Logical OR ($29.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$02.b]		; 27 02 ; AND accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$12.b]		; 27 12 ; AND accumulator with memory (long) [$12.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$01.b]		; 27 01 ; AND accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and [$02.b]		; 27 02 ; AND accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$27.b		; 29 27 ; Logical AND #$27.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jmp $020209.l		; 5C 09 02 02 ; Jump long to $020209.l [Flow: jump]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($1A.b,X)		; 01 1A ; Logical OR ($1A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $2B.b		; 02 2B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $2B.b		; 02 2B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $010102.l		; 22 02 01 01 ; Jump to subroutine long $010102.l [Writes: Stack Pointer] [Flow: call]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $220110.l		; 22 10 01 22 ; Jump to subroutine long $220110.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $000001.l		; 22 01 00 00 ; Jump to subroutine long $000001.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: ZNC]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $010202.l		; 22 02 02 01 ; Jump to subroutine long $010202.l [Writes: Stack Pointer] [Flow: call]
	mvp $01,$00		; 44 00 01 ; Move block positive $01,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $51.b		; 02 51 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $44.b		; 02 44 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($1A.b)		; 12 1A ; OR accumulator with memory (indirect) ($1A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($29.b)		; 12 29 ; OR accumulator with memory (indirect) ($29.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$01.b]		; 27 01 ; AND accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$02.b]		; 27 02 ; AND accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$02.b]		; 27 02 ; AND accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$02.b]		; 27 02 ; AND accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$02.b]		; 27 02 ; AND accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$02.b]		; 27 02 ; AND accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $44.b		; 02 44 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$01.b]		; 27 01 ; AND accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$01.b]		; 27 01 ; AND accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b)		; 12 02 ; OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $01		; 42 01 ; Reserved instruction
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($42.b,X)		; 01 42 ; Logical OR ($42.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $42, $01		; 42 01 ; Reserved instruction
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $42.b		; 02 42 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$02.b]		; 27 02 ; AND accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$10.b		; 09 10 ; Logical OR #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and [$44.b]		; 27 44 ; AND accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $010200.l		; 22 00 02 01 ; Jump to subroutine long $010200.l [Writes: Stack Pointer] [Flow: call]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $01,$01		; 44 01 01 ; Move block positive $01,$01 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $420201.l		; 22 01 02 42 ; Jump to subroutine long $420201.l [Writes: Stack Pointer] [Flow: call]
	jsl $010202.l		; 22 02 02 01 ; Jump to subroutine long $010202.l [Writes: Stack Pointer] [Flow: call]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $43.b		; 02 43 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $43.b		; 02 43 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $43.b		; 02 43 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($42.b,X)		; 01 42 ; Logical OR ($42.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$42.b		; 09 42 ; Logical OR #$42.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$48.b		; 09 48 ; Logical OR #$48.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($09.b)		; 12 09 ; OR accumulator with memory (indirect) ($09.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b)		; 12 02 ; OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $42, $02		; 42 02 ; Reserved instruction
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $000101.l		; 22 01 01 00 ; Jump to subroutine long $000101.l [Writes: Stack Pointer] [Flow: call]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $42		; 42 42 ; Reserved instruction
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $020222.l		; 22 22 02 02 ; Jump to subroutine long $020222.l [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $022222.l		; 22 22 22 02 ; Jump to subroutine long $022222.l [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$5C.b		; 09 5C ; Logical OR #$5C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $5C.b		; 02 5C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$10.b		; 09 10 ; Logical OR #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$09.b]		; 27 09 ; AND accumulator with memory (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $5C.b		; 00 5C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$48.b		; 09 48 ; Logical OR #$48.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $2B28.w		; 2E 28 2B ; Rotate left $2B28.w [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $220101.l		; 22 01 01 22 ; Jump to subroutine long $220101.l [Writes: Stack Pointer] [Flow: call]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $2F22.w		; 2E 22 2F ; Rotate left $2F22.w [Flags: ZNC]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $12.b		; 02 12 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $42.b		; 02 42 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $42.b		; 02 42 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $42.b		; 02 42 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $020202.l		; 22 02 02 02 ; Jump to subroutine long $020202.l [Writes: Stack Pointer] [Flow: call]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $010000.l		; 22 00 00 01 ; Jump to subroutine long $010000.l [Writes: Stack Pointer] [Flow: call]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $444401.l		; 22 01 44 44 ; Jump to subroutine long $444401.l [Writes: Stack Pointer] [Flow: call]
	and #$22.b		; 29 22 ; Logical AND #$22.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2702.w		; 20 02 27 ; Jump to subroutine at $2702.w [Writes: Stack Pointer] [Flow: call]
	jsl $200000.l		; 22 00 00 20 ; Jump to subroutine long $200000.l [Writes: Stack Pointer] [Flow: call]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $44.b		; 02 44 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $02,$44		; 44 44 02 ; Move block positive $02,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	jsl $024344.l		; 22 44 43 02 ; Jump to subroutine long $024344.l [Writes: Stack Pointer] [Flow: call]
	jsl $010143.l		; 22 43 01 01 ; Jump to subroutine long $010143.l [Writes: Stack Pointer] [Flow: call]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $FF		; Opcode FF overrunning bank boundry at 0DFFFC. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $FF		; Opcode FF overrunning bank boundry at 0DFFFD. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $FF		; Opcode FF overrunning bank boundry at 0DFFFE. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $FF		; Opcode FF overrunning bank boundry at 0DFFFF. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
.ENDS
