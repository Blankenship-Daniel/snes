.BANK 6 SLOT 0
.ORG $0000

.SECTION "Bank6" FORCE

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0DD0.w,Y		; B9 D0 0D ; Load $0DD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D2.b		; C9 D2 ; Compare #$D2.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $F1		; 10 F1 ; Branch if plus to $10, $F1 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsr $F7EF.w		; 20 EF F7 ; Jump to subroutine at $F7EF.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsr $F836.w		; 20 36 F8 ; Jump to subroutine at $F836.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$80.b		; 09 80 ; Logical OR #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E90.w,X		; 9D 90 0E ; Store accumulator to $0E90.w,X [Reads: Accumulator, X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $0400.w,X		; FD 00 04 ; Subtract with carry $0400.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$0B.b]		; 07 0B ; OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0E10.w		; 0E 10 0E ; Arithmetic shift left $0E10.w [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cpx #$DE.b		; E0 DE ; Compare #$DE.b with X register [Reads: X Index] [Flags: ZNC]
.INDEX 8
	sep #$D9		; E2 D9
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	ldy $0FB5.w		; AC B5 0F ; Load $0FB5.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $804F.w,Y		; B9 4F 80 ; Load $804F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $2A		; 30 2A ; Branch if minus to $30, $2A [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B58.w,Y		; 99 58 0B ; Store accumulator to $0B58.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0FB5.w		; AE B5 0F ; Load $0FB5.w into X register [Writes: X Index] [Flags: ZN]
	lda $8045.w,X		; BD 45 80 ; Load $8045.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda $804A.w,X		; BD 4A 80 ; Load $804A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,Y		; 99 80 0F ; Store accumulator to $0F80.w,Y [Reads: Accumulator, Y Index]
	sta $0F10.w,Y		; 99 10 0F ; Store accumulator to $0F10.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dec $0FB5.w		; CE B5 0F ; Decrement $0FB5.w [Flags: ZN]
	.db $10, $C5		; 10 C5 ; Branch if plus to $10, $C5 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	ldy #$70.b		; A0 70 ; Load #$70.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $02.b		; E5 02 ; Subtract $02.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$00F0.w		; 69 F0 00 ; Add #$00F0.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$01E0.w		; C9 E0 01 ; Compare #$01E0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy #$90.b		; A0 90 ; Load #$90.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	sty $01.b		; 84 01 ; Store Y register to $01.b [Reads: Y Index]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	ldy #$70.b		; A0 70 ; Load #$70.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $04.b		; E5 04 ; Subtract $04.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$00F0.w		; 69 F0 00 ; Add #$00F0.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$01E0.w		; C9 E0 01 ; Compare #$01E0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy #$90.b		; A0 90 ; Load #$90.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
.ACCU 8
	sep #$20		; E2 20
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$10.b		; E0 10 ; Compare #$10.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc $FFFF00.l,X		; FF 00 FF FF ; Subtract with carry (long,X) $FFFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $505000.l,X		; FF 00 50 50 ; Subtract with carry (long,X) $505000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $5020.w		; 20 20 50 ; Jump to subroutine at $5020.w [Writes: Stack Pointer] [Flow: call]
	.db $50, $8B		; 50 8B ; Branch if overflow clear to $50, $8B [Flow: branch]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $80E6.w,Y		; 79 E6 80 ; Add $80E6.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $80F0.w,Y		; 79 F0 80 ; Add $80F0.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $80EA.w,Y		; 79 EA 80 ; Add $80EA.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $80EE.w,Y		; 79 EE 80 ; Add $80EE.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda $80F4.w,Y		; B9 F4 80 ; Load $80F4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $80F6.w,Y		; B9 F6 80 ; Load $80F6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	jsr $AD03.w		; 20 03 AD ; Jump to subroutine at $AD03.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $0314.w		; AC 14 03 ; Load $0314.w into Y register [Writes: Y Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldy $0FB2.w		; AC B2 0F ; Load $0FB2.w into Y register [Writes: Y Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsl $068156.l		; 22 56 81 06 ; Jump to subroutine long $068156.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	jsr $E239.w		; 20 39 E2 ; Jump to subroutine at $E239.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0FB2.w		; 8D B2 0F ; Store accumulator to $0FB2.w [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0314.w		; 8D 14 03 ; Store accumulator to $0314.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora #$1D.b		; 09 1D ; Logical OR #$1D.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: ZN]
	ldy $0DD0.w,X		; BC D0 0D ; Load Y register $0DD0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	lda #$EC.b		; A9 EC ; Load #$EC.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	jsl $0DB818.l		; 22 18 B8 0D ; Jump to subroutine long $0DB818.l [Writes: Stack Pointer] [Flow: call]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,X		; 9D 20 0F ; Store accumulator to $0F20.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$A6.b		; A9 A6 ; Load #$A6.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $AACA.w,Y		; B9 CA AA ; Load $AACA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FFA2C.l,X		; 9F 2C FA 7F ; Store accumulator (long,X) $7FFA2C.l,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0314.w		; 8D 14 03 ; Store accumulator to $0314.w [Reads: Accumulator]
	sta $0FB2.w		; 8D B2 0F ; Store accumulator to $0FB2.w [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,X		; 9D 20 0F ; Store accumulator to $0F20.w,X [Reads: Accumulator, X Index]
	stz $0DC0.w,X		; 9E C0 0D ; Store zero to $0DC0.w,X [Reads: X Index]
	lda $0B9C.w		; AD 9C 0B ; Load $0B9C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $21		; F0 21 ; Branch if equal to $F0, $21 [Flow: branch]
	ora $1B.b		; 05 1B ; Logical OR $1B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	jsl $1AFBDB.l		; 22 DB FB 1A ; Jump to subroutine long $1AFBDB.l [Writes: Stack Pointer] [Flow: call]
	lda $0B9C.w		; AD 9C 0B ; Load $0B9C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	stz $0B9C.w		; 9C 9C 0B ; Store zero to $0B9C.w
	jsr $8264.w		; 20 64 82 ; Jump to subroutine at $8264.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $793E.w,Y		; D9 3E 79 ; Compare accumulator $793E.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp $D8DC.w,Y		; D9 DC D8 ; Compare accumulator $D8DC.w,Y [Reads: Y Index] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cpx $E1.b		; E4 E1 ; Compare $E1.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	jmp.w [$DFD8]		; DC D8 DF ; Jump long indirect [$DFD8] [Flow: jump]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: ZNC]
	.db $42, $D3		; 42 D3 ; Reserved instruction
	eor ($D4.b,X)		; 41 D4 ; Exclusive OR accumulator with memory ($D4.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $D8E3.w,Y		; D9 E3 D8 ; Compare accumulator $D8E3.w,Y [Reads: Y Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $10, $0A		; 10 0A ; Branch if plus to $10, $0A [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $F2		; D0 F2 ; Branch if not equal to $D0, $F2 [Flow: branch]
	ldy $0B9C.w		; AC 9C 0B ; Load $0B9C.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $F0, $ED		; F0 ED ; Branch if equal to $F0, $ED [Flow: branch]
	cpy #$04.b		; C0 04 ; Compare #$04.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$13.b		; 69 13 ; Add #$13.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sty $0D.b		; 84 0D ; Store Y register to $0D.b [Reads: Y Index]
	lda $81F3.w,Y		; B9 F3 81 ; Load $81F3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $D8		; F0 D8 ; Branch if equal to $F0, $D8 [Flow: branch]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $D2		; 30 D2 ; Branch if minus to $30, $D2 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0D.b		; A6 0D ; Load $0D.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $8209.w,X		; BD 09 82 ; Load $8209.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,Y		; 99 80 0D ; Store accumulator to $0D80.w,Y [Reads: Accumulator, Y Index]
	lda $8235.w,X		; BD 35 82 ; Load $8235.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	lda $824B.w,X		; BD 4B 82 ; Load $824B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,Y		; 99 80 0F ; Store accumulator to $0F80.w,Y [Reads: Accumulator, Y Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $821F.w,X		; 7D 1F 82 ; Add $821F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,Y		; 99 70 0F ; Store accumulator to $0F70.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,Y		; 99 C0 0D ; Store accumulator to $0DC0.w,Y [Reads: Accumulator, Y Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F10.w,Y		; 99 10 0F ; Store accumulator to $0F10.w,Y [Reads: Accumulator, Y Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E10.w,Y		; 99 10 0E ; Store accumulator to $0E10.w,Y [Reads: Accumulator, Y Index]
	ldx $0E20.w,Y		; BE 20 0E ; Load X register $0E20.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cpx #$E4.b		; E0 E4 ; Compare #$E4.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsr $9262.w		; 20 62 92 ; Jump to subroutine at $9262.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	lda $048E.w		; AD 8E 04 ; Load $048E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	sta $0E30.w,Y		; 99 30 0E ; Store accumulator to $0E30.w,Y [Reads: Accumulator, Y Index]
	cpx #$42.b		; E0 42 ; Compare #$42.b with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cpx #$41.b		; E0 41 ; Compare #$41.b with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	cpx #$3E.b		; E0 3E ; Compare #$3E.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	.db $80, $1F		; 80 1F ; Branch always to $80, $1F [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CE2.w,Y		; 99 E2 0C ; Store accumulator to $0CE2.w,Y [Reads: Accumulator, Y Index]
	lda #$A0.b		; A9 A0 ; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EF0.w,Y		; 99 F0 0E ; Store accumulator to $0EF0.w,Y [Reads: Accumulator, Y Index]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B58.w,Y		; 99 58 0B ; Store accumulator to $0B58.w,Y [Reads: Accumulator, Y Index]
	cpx #$79.b		; E0 79 ; Compare #$79.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,Y		; 99 90 0D ; Store accumulator to $0D90.w,Y [Reads: Accumulator, Y Index]
	sec		; 38 ; Set carry flag [Flags: C]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; [PATTERN: Memory clearing operation] 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	stz $0C7C.w		; 9C 7C 0C ; Store zero to $0C7C.w
	stz $0C7D.w		; 9C 7D 0C ; Store zero to $0C7D.w
	stz $0C7E.w		; [PATTERN: Memory clearing operation] 9C 7E 0C ; Store zero to $0C7E.w
	stz $0C7F.w		; 9C 7F 0C ; Store zero to $0C7F.w
	stz $0C80.w		; 9C 80 0C ; Store zero to $0C80.w
	jsl $09C58F.l		; 22 8F C5 09 ; Jump to subroutine long $09C58F.l [Writes: Stack Pointer] [Flow: call]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $7EF3CA.l		; AF CA F3 7E ; Load long $7EF3CA.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sty $0FFF.w		; [PATTERN: Memory clearing operation] 8C FF 0F ; Store Y register to $0FFF.w [Reads: Y Index]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	stz $0B7C.w		; 9C 7C 0B ; Store zero to $0B7C.w
	stz $0B7D.w		; 9C 7D 0B ; Store zero to $0B7D.w
	stz $0B7E.w		; [PATTERN: Memory clearing operation] 9C 7E 0B ; Store zero to $0B7E.w
	stz $0B7F.w		; 9C 7F 0B ; Store zero to $0B7F.w
	jsr $83D3.w		; 20 D3 83 ; Jump to subroutine at $83D3.w [Writes: Stack Pointer] [Flow: call]
	jsl $09B06E.l		; 22 6E B0 09 ; Jump to subroutine long $09B06E.l [Writes: Stack Pointer] [Flow: call]
	jsl $099F91.l		; 22 91 9F 09 ; Jump to subroutine long $099F91.l [Writes: Stack Pointer] [Flow: call]
	lda $0314.w		; AD 14 03 ; Load $0314.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FB2.w		; 8D B2 0F ; Store accumulator to $0FB2.w [Reads: Accumulator]
	stz $0314.w		; 9C 14 03 ; Store zero to $0314.w
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FAB.w		; 8D AB 0F ; Store accumulator to $0FAB.w [Reads: Accumulator]
	lda $47.b		; A5 47 ; Load $47.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; [PATTERN: Memory clearing operation] F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	dec $47.b		; C6 47 ; Decrement $47.b [Reads: Direct Page] [Flags: ZN]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	stz $47.b		; 64 47 ; Store zero to $47.b
	stz $0379.w		; 9C 79 03 ; Store zero to $0379.w
	stz $0377.w		; [PATTERN: Memory clearing operation] 9C 77 03 ; Store zero to $0377.w
	stz $0B7B.w		; 9C 7B 0B ; Store zero to $0B7B.w
	lda $0FDC.w		; AD DC 0F ; Load $0FDC.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	dec $0FDC.w		; CE DC 0F ; Decrement $0FDC.w [Flags: ZN]
	jsl $088242.l		; 22 42 82 08 ; Jump to subroutine long $088242.l [Writes: Stack Pointer] [Flow: call]
	jsl $09B773.l		; 22 73 B7 09 ; Jump to subroutine long $09B773.l [Writes: Stack Pointer] [Flow: call]
	stz $0B9A.w		; 9C 9A 0B ; Store zero to $0B9A.w
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: ZN]
	stx $0FA0.w		; 8E A0 0F ; Store X register to $0FA0.w [Reads: X Index]
	jsr $84E2.w		; 20 E2 84 ; Jump to subroutine at $84E2.w [Writes: Stack Pointer] [Flow: call]
	dex		; [PATTERN: Memory clearing operation] CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F7		; 10 F7 ; Branch if plus to $10, $F7 [Flow: branch]
	jsl $09B07F.l		; 22 7F B0 09 ; Jump to subroutine long $09B07F.l [Writes: Stack Pointer] [Flow: call]
	stz $069F.w		; 9C 9F 06 ; Store zero to $069F.w
	stz $069E.w		; 9C 9E 06 ; Store zero to $069E.w
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsl $1DE9DA.l		; 22 DA E9 1D ; Jump to subroutine long $1DE9DA.l [Writes: Stack Pointer] [Flow: call]
	lda $0AAA.w		; AD AA 0A ; Load $0AAA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	sta $0FC6.w		; 8D C6 0F ; Store accumulator to $0FC6.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $04EA9D.l		; 22 9D EA 04 ; Jump to subroutine long $04EA9D.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	jsr $4001.w		; 20 01 40 ; Jump to subroutine at $4001.w [Writes: Stack Pointer] [Flow: call]
	ora ($A0.b,X)		; 01 A0 ; Logical OR ($A0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $C7B9.w		; 20 B9 C7 ; Jump to subroutine at $C7B9.w [Writes: Stack Pointer] [Flow: call]
	sta $99.b,S		; 83 99 ; Store accumulator (stack relative) $99.b,S [Reads: Accumulator, Stack Pointer]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy #$0B.b		; C0 0B ; Compare #$0B.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $90, $F4		; 90 F4 ; Branch if carry clear to $90, $F4 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $F836.w		; 20 36 F8 ; Jump to subroutine at $F836.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $F7EF.w		; 20 EF F7 ; Jump to subroutine at $F7EF.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $84C1.w		; 20 C1 84 ; Jump to subroutine at $84C1.w [Writes: Stack Pointer] [Flow: call]
	lda $0E40.w,X		; BD 40 0E ; Load $0E40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldy $0FB3.w		; AC B3 0F ; Load $0FB3.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	ldy $0F20.w,X		; BC 20 0F ; Load Y register $0F20.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	jsl $0DBA94.l		; 22 94 BA 0D ; Jump to subroutine long $0DBA94.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	jsl $0DBA8C.l		; 22 8C BA 0D ; Jump to subroutine long $0DBA8C.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0FC1.w		; 0D C1 0F ; Logical OR $0FC1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $84A4.w		; 4C A4 84 ; Jump to $84A4.w [Flow: jump]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	dec $0DF0.w,X		; DE F0 0D ; Decrement memory $0DF0.w,X [Reads: X Index] [Flags: ZN]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	dec $0E00.w,X		; DE 00 0E ; Decrement memory $0E00.w,X [Reads: X Index] [Flags: ZN]
	lda $0E10.w,X		; BD 10 0E ; Load $0E10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	dec $0E10.w,X		; DE 10 0E ; Decrement memory $0E10.w,X [Reads: X Index] [Flags: ZN]
	lda $0EE0.w,X		; BD E0 0E ; Load $0EE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	dec $0EE0.w,X		; DE E0 0E ; Decrement memory $0EE0.w,X [Reads: X Index] [Flags: ZN]
	lda $0EF0.w,X		; BD F0 0E ; Load $0EF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $4E		; F0 4E ; Branch if equal to $F0, $4E [Flow: branch]
	ldy $0DD0.w,X		; BC D0 0D ; Load Y register $0DD0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$09.b		; C0 09 ; Compare #$09.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $90, $32		; 90 32 ; Branch if carry clear to $90, $32 [Flow: branch]
	cmp #$1F.b		; C9 1F ; Compare #$1F.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $27		; D0 27 ; Branch if not equal to $D0, $27 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$7A.b		; C9 7A ; Compare #$7A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	lda $0FFF.w		; AD FF 0F ; Load $0FFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda $0E50.w,X		; BD 50 0E ; Load $0E50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0CE2.w,X		; FD E2 0C ; Subtract with carry $0CE2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	.db $B0, $0E		; B0 0E ; Branch if carry set to $B0, $0E [Flow: branch]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CF1.w		; 8D F1 1C ; Store accumulator to $1CF1.w [Reads: Accumulator]
	jsl $05FA8E.l		; 22 8E FA 05 ; Jump to subroutine long $05FA8E.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $EEC8.w		; 20 C8 EE ; Jump to subroutine at $EEC8.w [Writes: Stack Pointer] [Flow: call]
	lda $0CE2.w,X		; BD E2 0C ; Load $0CE2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$FB.b		; C9 FB ; Compare #$FB.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $09		; B0 09 ; Branch if carry set to $B0, $09 [Flow: branch]
	lda $0EF0.w,X		; BD F0 0E ; Load $0EF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$0E.b		; 29 0E ; Logical AND #$0E.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B89.w,X		; [PATTERN: Memory clearing operation] 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	dec $0EF0.w,X		; DE F0 0E ; Decrement memory $0EF0.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	stz $0EF0.w,X		; 9E F0 0E ; Store zero to $0EF0.w,X [Reads: X Index]
	stz $0B89.w,X		; 9E 89 0B ; Store zero to $0B89.w,X [Reads: X Index]
	lda $0F10.w,X		; BD 10 0F ; Load $0F10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	dec $0F10.w,X		; DE 10 0F ; Decrement memory $0F10.w,X [Reads: X Index] [Flags: ZN]
	ldy $EE.b		; A4 EE ; Load $EE.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cpy #$03.b		; C0 03 ; Compare #$03.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	ldy $0F20.w,X		; BC 20 0F ; Load Y register $0F20.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $0B89.w,X		; BD 89 0B ; Load $0B89.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$CF.b		; 29 CF ; Logical AND #$CF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $84B9.w,Y		; 19 B9 84 ; OR accumulator with memory $84B9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $3010.w		; 20 10 30 ; Jump to subroutine at $3010.w [Writes: Stack Pointer] [Flow: call]
	.db $30, $20		; 30 20 ; Branch if minus to $30, $20 [Flow: branch]
	cmp ($84.b,X)		; C1 84 ; Compare accumulator ($84.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FD8.w		; 8D D8 0F ; Store accumulator to $0FD8.w [Reads: Accumulator]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FD9.w		; 8D D9 0F ; Store accumulator to $0FD9.w [Reads: Accumulator]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FDA.w		; 8D DA 0F ; Store accumulator to $0FDA.w [Reads: Accumulator]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FDB.w		; 8D DB 0F ; Store accumulator to $0FDB.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $84E2.w		; 20 E2 84 ; Jump to subroutine at $84E2.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $83F2.w		; 20 F2 83 ; Jump to subroutine at $83F2.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	.db $10, $85		; 10 85 ; Branch if plus to $10, $85 [Flow: branch]
	rol $9385.w		; 2E 85 93 ; Rotate left $9385.w [Flags: ZNC]
	sbc $9C.b,S		; E3 9C ; Subtract stack-relative $9C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	sta $EA.b		; 85 EA ; Store accumulator to $EA.b [Reads: Accumulator]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ldx #$F8.b		; A2 F8 ; Load #$F8.b into X register [Writes: X Index] [Flags: ZN]
	eor $85.b,S		; 43 85 ; Exclusive OR accumulator with stack relative $85.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $7186.w		; 4D 86 71 ; Exclusive OR $7186.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($83.b)		; 92 83 ; Store accumulator (indirect) ($83.b) [Reads: Accumulator, Direct Page]
	dec $DFFA.w,X		; DE FA DF ; Decrement memory $DFFA.w,X [Reads: X Index] [Flags: ZN]
	jmp $9271.w		; 4C 71 92 ; Jump to $9271.w [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0BC0.w,Y		; 99 C0 0B ; Store accumulator to $0BC0.w,Y [Reads: Accumulator, Y Index]
	sta $0BC1.w,Y		; 99 C1 0B ; Store accumulator to $0BC1.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0BC0.w,X		; 9D C0 0B ; Store accumulator to $0BC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9271.w		; 20 71 92 ; Jump to subroutine at $9271.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	jsl $09C2F5.l		; 22 F5 C2 09 ; Jump to subroutine long $09C2F5.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E41E.w		; 20 1E E4 ; Jump to subroutine at $E41E.w [Writes: Stack Pointer] [Flow: call]
	jsl $1DFFC5.l		; 22 C5 FF 1D ; Jump to subroutine long $1DFFC5.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1DFF5B.l		; 22 5B FF 1D ; Jump to subroutine long $1DFF5B.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $09ED9F.l		; 22 9F ED 09 ; Jump to subroutine long $09ED9F.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $F9FF.w,Y		; F9 FF F9 ; Subtract with carry $F9FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $000480.l,X		; FF 80 04 00 ; Subtract with carry (long,X) $000480.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000483.l,X		; FF 83 04 00 ; Subtract with carry (long,X) $000483.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $CFFFFA.l,X		; FF FA FF CF ; Subtract with carry (long,X) $CFFFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0004DF.l,X		; FF DF 04 00 ; Subtract with carry (long,X) $0004DF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AEFFFC.l,X		; FF FC FF AE ; Subtract with carry (long,X) $AEFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0044AF.l,X		; FF AF 44 00 ; Subtract with carry (long,X) $0044AF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZNC]
	cmp $CDCD.w		; CD CD CD ; Compare $CDCD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	wai		; CB ; Wait for interrupt
	wai		; CB ; Wait for interrupt
	wai		; CB ; Wait for interrupt
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $7A		; F0 7A ; Branch if equal to $F0, $7A [Flow: branch]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBA88.l		; 22 88 BA 0D ; Jump to subroutine long $0DBA88.l [Writes: Stack Pointer] [Flow: call]
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$10.b		; 49 10 ; Exclusive OR #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	jsr $DC10.w		; 20 10 DC ; Jump to subroutine at $DC10.w [Writes: Stack Pointer] [Flow: call]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $858D.w,Y		; B9 8D 85 ; Load $858D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$8A.b		; A9 8A ; Load #$8A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $90, $0A		; 90 0A ; Branch if carry clear to $90, $0A [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	stz $05.b		; 64 05 ; Store zero to $05.b
	lda $8591.w,X		; BD 91 85 ; Load $8591.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $2A		; D0 2A ; Branch if not equal to $D0, $2A [Flow: branch]
	jsr $D9F3.w		; 20 F3 D9 ; Jump to subroutine at $D9F3.w [Writes: Stack Pointer] [Flow: call]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E96C.w		; 20 6C E9 ; Jump to subroutine at $E96C.w [Writes: Stack Pointer] [Flow: call]
	lda $0F80.w,X		; BD 80 0F ; Load $0F80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$02.b		; E9 02 ; Subtract #$02.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	lda #$12.b		; A9 12 ; Load #$12.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$EF.b		; 29 EF ; Logical AND #$EF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $D9F3.w		; 20 F3 D9 ; Jump to subroutine at $D9F3.w [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; [PATTERN: Memory clearing operation] 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0DF0.w,X		; FE F0 0D ; Increment memory $0DF0.w,X [Reads: X Index] [Flags: ZN]
	stz $0F50.w,X		; 9E 50 0F ; Store zero to $0F50.w,X [Reads: X Index]
	stz $0EF0.w,X		; 9E F0 0E ; Store zero to $0EF0.w,X [Reads: X Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$00F8.w		; 29 F8 00 ; Logical AND #$00F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$854D.w		; 69 4D 85 ; Add #$854D.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0DB818.l		; 22 18 B8 0D ; Jump to subroutine long $0DB818.l [Writes: Stack Pointer] [Flow: call]
	inc $0DD0.w,X		; FE D0 0D ; Increment memory $0DD0.w,X [Reads: X Index] [Flags: ZN]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	adc #$89.b		; 69 89 ; Add #$89.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ror $7389.w,X		; 7E 89 73 ; Rotate right $7389.w,X [Reads: X Index] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $7388.w,Y		; 59 88 73 ; Exclusive OR accumulator with memory $7388.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor $6D88.w,Y		; 59 88 6D ; Exclusive OR accumulator with memory $6D88.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc ($8F.b),Y		; 71 8F ; Add with carry ($8F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $738F71.l		; 8F 71 8F 73 ; Store accumulator (long) $738F71.l [Reads: Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $89		; 10 89 ; Branch if plus to $10, $89 [Flow: branch]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($91.b),Y		; 51 91 ; Exclusive OR accumulator with memory ($91.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy $8B.b		; C4 8B ; Compare $8B.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	sbc ($8E.b)		; F2 8E ; Subtract with carry (indirect) ($8E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dec $738C.w,X		; DE 8C 73 ; Decrement memory $738C.w,X [Reads: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp ($89.b,S),Y		; D3 89 ; Compare accumulator (stack relative indirect indexed) ($89.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	sta ($89.b),Y		; 91 89 ; Store accumulator ($89.b),Y [Reads: Accumulator, Direct Page, Y Index]
	adc $738A.w,Y		; 79 8A 73 ; Add $738A.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora ($8B.b)		; 12 8B ; OR accumulator with memory (indirect) ($8B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$8B.b]		; A7 8B ; Load accumulator (long) [$8B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $90.b		; 64 90 ; Store zero to $90.b
	adc $88738D.l,X		; 7F 8D 73 88 ; Add long $88738D.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $8B.b,X		; 34 8B ; Test bits $8B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $1C8B.w		; 1C 8B 1C ; Test and reset bits $1C8B.w [Reads: Accumulator] [Flags: Z]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	eor $90.b,S		; 43 90 ; Exclusive OR accumulator with stack relative $90.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $887391.l		; 22 91 73 88 ; Jump to subroutine long $887391.l [Writes: Stack Pointer] [Flow: call]
	stz $C18C.w,X		; 9E 8C C1 ; Store zero to $C18C.w,X [Reads: X Index]
	sty $8BA7.w		; 8C A7 8B ; Store Y register to $8BA7.w [Reads: Y Index]
	sbc $DA8D.w,X		; FD 8D DA ; Subtract with carry $DA8D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $8BA7.w		; 8D A7 8B ; Store accumulator to $8BA7.w [Reads: Accumulator]
	adc $90.b,X		; 75 90 ; Add $90.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda [$8B.b]		; A7 8B ; Load accumulator (long) [$8B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$8B.b]		; A7 8B ; Load accumulator (long) [$8B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx #$8D.b		; E0 8D ; Compare #$8D.b with X register [Reads: X Index] [Flags: ZNC]
	lda [$8B.b]		; A7 8B ; Load accumulator (long) [$8B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $C0268B.l		; CF 8B 26 C0 ; Compare accumulator (long) $C0268B.l [Reads: Accumulator] [Flags: ZNC]
	.db $30, $C0		; 30 C0 ; Branch if minus to $30, $C0 [Flow: branch]
	lda [$8B.b]		; A7 8B ; Load accumulator (long) [$8B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$8B.b]		; A7 8B ; Load accumulator (long) [$8B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $DA8D.w,Y		; 59 8D DA ; Exclusive OR accumulator with memory $DA8D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $8CF2.w		; 8D F2 8C ; Store accumulator to $8CF2.w [Reads: Accumulator]
	lda [$8B.b]		; A7 8B ; Load accumulator (long) [$8B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $7388.w		; 6E 88 73 ; Rotate right $7388.w [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	bit #$D6.b		; 89 D6 ; Test bits #$D6.b with accumulator [Reads: Accumulator] [Flags: Z]
	sta $D68FD6.l		; 8F D6 8F D6 ; Store accumulator (long) $D68FD6.l [Reads: Accumulator]
	sta $019001.l		; 8F 01 90 01 ; Store accumulator (long) $019001.l [Reads: Accumulator]
	.db $90, $01		; 90 01 ; Branch if carry clear to $90, $01 [Flow: branch]
	.db $90, $01		; 90 01 ; Branch if carry clear to $90, $01 [Flow: branch]
	.db $90, $01		; 90 01 ; Branch if carry clear to $90, $01 [Flow: branch]
	.db $90, $01		; 90 01 ; Branch if carry clear to $90, $01 [Flow: branch]
	.db $90, $01		; 90 01 ; Branch if carry clear to $90, $01 [Flow: branch]
	.db $90, $81		; 90 81 ; Branch if carry clear to $90, $81 [Flow: branch]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda [$8F.b]		; A7 8F ; Load accumulator (long) [$8F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $8F		; B0 8F ; Branch if carry set to $B0, $8F [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	tsb $738B.w		; 0C 8B 73 ; Test and set bits $738B.w [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	jmp ($0F8F.w)		; 6C 8F 0F ; Jump indirect to ($0F8F.w) [Flow: jump]
	sta $958F3F.l		; 8F 3F 8F 95 ; Store accumulator (long) $958F3F.l [Reads: Accumulator]
	sta $C98FA2.l		; 8F A2 8F C9 ; Store accumulator (long) $C98FA2.l [Reads: Accumulator]
	sta $738F4D.l		; 8F 4D 8F 73 ; Store accumulator (long) $738F4D.l [Reads: Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp ($8E.b,X)		; C1 8E ; Compare accumulator ($8E.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cmp ($8E.b)		; D2 8E ; Compare accumulator (indirect) ($8E.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sta $8E.b		; 85 8E ; Store accumulator to $8E.b [Reads: Accumulator]
	sta $8E.b		; 85 8E ; Store accumulator to $8E.b [Reads: Accumulator]
	eor $8E538E.l		; 4F 8E 53 8E ; Exclusive OR accumulator with memory (long) $8E538E.l [Writes: Accumulator] [Flags: ZN]
	.db $42, $8E		; 42 8E ; Reserved instruction
	lsr $8E.b		; 46 8E ; Logical shift right $8E.b [Reads: Direct Page] [Flags: ZNC]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $8E		; 30 8E ; Branch if minus to $30, $8E [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	rol $A28B.w,X		; 3E 8B A2 ; Rotate left $A28B.w,X [Reads: X Index] [Flags: ZNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta ($8B.b,S),Y		; 93 8B ; Store accumulator (stack relative indirect indexed) ($8B.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($8B.b,S),Y		; 93 8B ; Store accumulator (stack relative indirect indexed) ($8B.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($8B.b,S),Y		; 93 8B ; Store accumulator (stack relative indirect indexed) ($8B.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta ($8B.b,S),Y		; 93 8B ; Store accumulator (stack relative indirect indexed) ($8B.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	stx $AE88.w		; 8E 88 AE ; Store X register to $AE88.w [Reads: X Index]
	sta ($E9.b),Y		; 91 E9 ; Store accumulator ($E9.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta $8BA7.w		; 8D A7 8B ; Store accumulator to $8BA7.w [Reads: Accumulator]
	sbc $BF.b		; E5 BF ; Subtract $BF.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $A7C0.w,X		; 5D C0 A7 ; Exclusive OR accumulator with memory $A7C0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	jmp ($F2C0.w)		; 6C C0 F2 ; Jump indirect to ($F2C0.w) [Flow: jump]
	stx $8DD1.w		; 8E D1 8D ; Store X register to $8DD1.w [Reads: X Index]
	ror $9591.w		; 6E 91 95 ; Rotate right $9591.w [Flags: ZNC]
	sta ($AE.b),Y		; 91 AE ; Store accumulator ($AE.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($2E.b),Y		; 91 2E ; Store accumulator ($2E.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $B48F.w,X		; 9D 8F B4 ; Store accumulator to $B48F.w,X [Reads: Accumulator, X Index]
	sta ($B4.b),Y		; 91 B4 ; Store accumulator ($B4.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($AE.b),Y		; 91 AE ; Store accumulator ($AE.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($AE.b),Y		; 91 AE ; Store accumulator ($AE.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($48.b),Y		; 91 48 ; Store accumulator ($48.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($AF.b)		; 92 AF ; Store accumulator (indirect) ($AF.b) [Reads: Accumulator, Direct Page]
	sta ($AF.b),Y		; 91 AF ; Store accumulator ($AF.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($AE.b),Y		; 91 AE ; Store accumulator ($AE.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($6B.b),Y		; 91 6B ; Store accumulator ($6B.b),Y [Reads: Accumulator, Direct Page, Y Index]
	stx $91AE.w		; 8E AE 91 ; Store X register to $91AE.w [Reads: X Index]
	and $91AE92.l		; 2F 92 AE 91 ; AND accumulator with memory (long) $91AE92.l [Writes: Accumulator] [Flags: ZN]
	cmp [$91.b],Y		; D7 91 ; Compare accumulator (long indexed) [$91.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	ldx $F191.w		; AE 91 F1 ; Load $F191.w into X register [Writes: X Index] [Flags: ZN]
	sta ($FA.b),Y		; 91 FA ; Store accumulator ($FA.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($AE.b),Y		; 91 AE ; Store accumulator ($AE.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($E8.b),Y		; 91 E8 ; Store accumulator ($E8.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($AE.b),Y		; 91 AE ; Store accumulator ($AE.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($AE.b),Y		; 91 AE ; Store accumulator ($AE.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($C5.b),Y		; 91 C5 ; Store accumulator ($C5.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($07.b),Y		; 91 07 ; Store accumulator ($07.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($73.b),Y		; 91 73 ; Store accumulator ($73.b),Y [Reads: Accumulator, Direct Page, Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora $8B.b,S		; 03 8B ; OR accumulator with stack relative $8B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $8B.b,S		; 03 8B ; OR accumulator with stack relative $8B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $8B.b,S		; 03 8B ; OR accumulator with stack relative $8B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $8B.b,S		; 03 8B ; OR accumulator with stack relative $8B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $8F		; B0 8F ; Branch if carry set to $B0, $8F [Flow: branch]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($8A.b,S),Y		; F3 8A ; Subtract with carry (stack relative indirect indexed) ($8A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $8A		; F0 8A ; Branch if equal to $F0, $8A [Flow: branch]
	lda ($8B.b)		; B2 8B ; Load accumulator (indirect) ($8B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cpy $FA90.w		; CC 90 FA ; Compare $FA90.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $90, $F0		; 90 F0 ; Branch if carry clear to $90, $F0 [Flow: branch]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	sta $D590D5.l		; 8F D5 90 D5 ; Store accumulator (long) $D590D5.l [Reads: Accumulator]
	.db $90, $E0		; 90 E0 ; Branch if carry clear to $90, $E0 [Flow: branch]
	.db $90, $D8		; 90 D8 ; Branch if carry clear to $90, $D8 [Flow: branch]
	bit #$D8.b		; 89 D8 ; Test bits #$D8.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$9B.b		; 89 9B ; Test bits #$9B.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$4D.b		; 89 4D ; Test bits #$4D.b with accumulator [Reads: Accumulator] [Flags: Z]
	sta ($6E.b)		; 92 6E ; Store accumulator (indirect) ($6E.b) [Reads: Accumulator, Direct Page]
	sta ($F9.b),Y		; 91 F9 ; Store accumulator ($F9.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $738873.l,X		; BF 73 88 73 ; Load long $738873.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $91.b,X		; 75 91 ; Add $91.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dec $90.b,X		; D6 90 ; Decrement memory $90.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	eor $DF8A.w,Y		; 59 8A DF ; Exclusive OR accumulator with memory $DF8A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	bit #$46.b		; 89 46 ; Test bits #$46.b with accumulator [Reads: Accumulator] [Flags: Z]
	sta $899C.w		; 8D 9C 89 ; Store accumulator to $899C.w [Reads: Accumulator]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($8A.b),Y		; 51 8A ; Exclusive OR accumulator with memory ($8A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $8C.b,X		; D5 8C ; Compare accumulator $8C.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc ($8B.b),Y		; F1 8B ; Subtract with carry ($8B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda [$8B.b]		; A7 8B ; Load accumulator (long) [$8B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $FD89.w		; 4D 89 FD ; Exclusive OR $FD89.w with accumulator [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $3B89.w		; 2C 89 3B ; Test bits $3B89.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit #$73.b		; 89 73 ; Test bits #$73.b with accumulator [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora ($89.b,X)		; 01 89 ; Logical OR ($89.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda [$8B.b]		; A7 8B ; Load accumulator (long) [$8B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$8B.b]		; A7 8B ; Load accumulator (long) [$8B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $8DC688.l,X		; DF 88 C6 8D ; Compare accumulator (long,X) $8DC688.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sty $8D.b,X		; 94 8D ; Store Y register $8D.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	cmp ($8D.b,X)		; C1 8D ; Compare accumulator ($8D.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	sta ($BA.b),Y		; 91 BA ; Store accumulator ($BA.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($BA.b),Y		; 91 BA ; Store accumulator ($BA.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($C7.b),Y		; 91 C7 ; Store accumulator ($C7.b),Y [Reads: Accumulator, Direct Page, Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy #$88.b		; C0 88 ; Compare #$88.b with Y register [Reads: Y Index] [Flags: ZNC]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda [$8B.b]		; A7 8B ; Load accumulator (long) [$8B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp.w [$A791]		; DC 91 A7 ; Jump long indirect [$A791] [Flow: jump]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda $88CF8B.l,X		; BF 8B CF 88 ; Load long $88CF8B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $916A88.l		; CF 88 6A 91 ; Compare accumulator (long) $916A88.l [Reads: Accumulator] [Flags: ZNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta ($6A.b),Y		; 91 6A ; Store accumulator ($6A.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($6A.b),Y		; 91 6A ; Store accumulator ($6A.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($6A.b),Y		; 91 6A ; Store accumulator ($6A.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($6A.b),Y		; 91 6A ; Store accumulator ($6A.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($6A.b),Y		; 91 6A ; Store accumulator ($6A.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($6A.b),Y		; 91 6A ; Store accumulator ($6A.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($6A.b),Y		; 91 6A ; Store accumulator ($6A.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($6A.b),Y		; 91 6A ; Store accumulator ($6A.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($6A.b),Y		; 91 6A ; Store accumulator ($6A.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($5C.b),Y		; 91 5C ; Store accumulator ($5C.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($62.b),Y		; 91 62 ; Store accumulator ($62.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta ($4E.b)		; 92 4E ; Store accumulator (indirect) ($4E.b) [Reads: Accumulator, Direct Page]
	sta ($74.b)		; 92 74 ; Store accumulator (indirect) ($74.b) [Reads: Accumulator, Direct Page]
	sta ($7B.b),Y		; 91 7B ; Store accumulator ($7B.b),Y [Reads: Accumulator, Direct Page, Y Index]
	cpy #$85.b		; C0 85 ; Compare #$85.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$94.b		; C0 94 ; Compare #$94.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$9E.b		; C0 9E ; Compare #$9E.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$A8.b		; C0 A8 ; Compare #$A8.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$0F.b		; C0 0F ; Compare #$0F.b with Y register [Reads: Y Index] [Flags: ZNC]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor ($88.b,X)		; 41 88 ; Exclusive OR accumulator with memory ($88.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	mvn $BD,$88		; 54 88 BD ; Move block negative $BD,$88 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$03.b		; 69 03 ; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05F25A.l		; 22 5A F2 05 ; Jump to subroutine long $05F25A.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $048E.w		; AD 8E 04 ; Load $048E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$CE.b		; C9 CE ; Compare #$CE.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$3F.b		; C9 3F ; Compare #$3F.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05E675.l		; 22 75 E6 05 ; Jump to subroutine long $05E675.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $0FFF.w		; AC FF 0F ; Load $0FFF.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $8874.w,Y		; B9 74 88 ; Load $8874.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0CD2.w,X		; 9D D2 0C ; Store accumulator to $0CD2.w,X [Reads: Accumulator, X Index]
	lda $8876.w,Y		; B9 76 88 ; Load $8876.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $80, $85		; 80 85 ; Branch always to $80, $85 [Flow: branch]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $0FFF.w		; AC FF 0F ; Load $0FFF.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $8888.w,Y		; B9 88 88 ; Load $8888.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0CD2.w,X		; 9D D2 0C ; Store accumulator to $0CD2.w,X [Reads: Accumulator, X Index]
	lda $888A.w,Y		; B9 8A 88 ; Load $888A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	lda $888C.w,Y		; B9 8C 88 ; Load $888C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0BE0.w,X		; 9D E0 0B ; Store accumulator to $0BE0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ldy $0FFF.w		; AC FF 0F ; Load $0FFF.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $88A4.w,Y		; B9 A4 88 ; Load $88A4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0CD2.w,X		; 9D D2 0C ; Store accumulator to $0CD2.w,X [Reads: Accumulator, X Index]
	lda $88A6.w,Y		; B9 A6 88 ; Load $88A6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	lda $88A8.w,Y		; B9 A8 88 ; Load $88A8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0BE0.w,X		; 9D E0 0B ; Store accumulator to $0BE0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1D9C80.l		; 22 80 9C 1D ; Jump to subroutine long $1D9C80.l [Writes: Stack Pointer] [Flow: call]
	jmp $8FB0.w		; 4C B0 8F ; Jump to $8FB0.w [Flow: jump]
	jsr $8F1C.w		; 20 1C 8F ; Jump to subroutine at $8F1C.w [Writes: Stack Pointer] [Flow: call]
	jsl $1DA081.l		; 22 81 A0 1D ; Jump to subroutine long $1DA081.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8F1C.w		; 20 1C 8F ; Jump to subroutine at $8F1C.w [Writes: Stack Pointer] [Flow: call]
	jsl $1D8D29.l		; 22 29 8D 1D ; Jump to subroutine long $1D8D29.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DA0.w,X		; 9D A0 0D ; Store accumulator to $0DA0.w,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $88D7.w,Y		; B9 D7 88 ; Load $88D7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $88DB.w,Y		; B9 DB 88 ; Load $88DB.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8F1C.w		; 20 1C 8F ; Jump to subroutine at $8F1C.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0ED0.w,X		; 9D D0 0E ; Store accumulator to $0ED0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpy #$D0.b		; C0 D0 ; Compare #$D0.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpx #$F0.b		; E0 F0 ; Compare #$F0.b with X register [Reads: X Index] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $890C.w,Y		; B9 0C 89 ; Load $890C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7EF280.l,X		; BF 80 F2 7E ; Load long $7EF280.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $910A.w		; 20 0A 91 ; Jump to subroutine at $910A.w [Writes: Stack Pointer] [Flow: call]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0C.b		; E9 0C ; Subtract #$0C.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	jmp $8BA7.w		; 4C A7 8B ; Jump to $8BA7.w [Flow: jump]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1DD1FD.l		; 22 FD D1 1D ; Jump to subroutine long $1DD1FD.l [Writes: Stack Pointer] [Flow: call]
	jmp $8BA7.w		; 4C A7 8B ; Jump to $8BA7.w [Flow: jump]
	jsr $8F1C.w		; 20 1C 8F ; Jump to subroutine at $8F1C.w [Writes: Stack Pointer] [Flow: call]
	jsr $910A.w		; 20 0A 91 ; Jump to subroutine at $910A.w [Writes: Stack Pointer] [Flow: call]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	jsl $1DDE82.l		; 22 82 DE 1D ; Jump to subroutine long $1DDE82.l [Writes: Stack Pointer] [Flow: call]
	jmp $8BA7.w		; 4C A7 8B ; Jump to $8BA7.w [Flow: jump]
	sta ($88.b,X)		; 81 88 ; Store accumulator ($88.b,X) [Reads: Accumulator, X Index, Direct Page]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: ZNC]
	ldy $0FFF.w		; AC FF 0F ; Load $0FFF.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $8963.w,Y		; B9 63 89 ; Load $8963.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0CD2.w,X		; 9D D2 0C ; Store accumulator to $0CD2.w,X [Reads: Accumulator, X Index]
	lda $8965.w,Y		; B9 65 89 ; Load $8965.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	lda $8967.w,Y		; B9 67 89 ; Load $8967.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0BE0.w,X		; 9D E0 0B ; Store accumulator to $0BE0.w,X [Reads: Accumulator, X Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	lda #$FE.b		; A9 FE ; Load #$FE.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E30.w,X		; 9D 30 0E ; Store accumulator to $0E30.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF159.l		; AF 59 F1 7E ; Load long $7EF159.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $2B		; D0 2B ; Branch if not equal to $D0, $2B [Flow: branch]
	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3D3.l		; 8F D3 F3 7E ; Store accumulator (long) $7EF3D3.l [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stz $02F9.w		; 9C F9 02 ; Store zero to $02F9.w
	jsl $00D423.l		; 22 23 D4 00 ; Jump to subroutine long $00D423.l [Writes: Stack Pointer] [Flow: call]
	jsl $099EFC.l		; 22 FC 9E 09 ; Jump to subroutine long $099EFC.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1DF277.l		; 22 77 F2 1D ; Jump to subroutine long $1DF277.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	.db $80, $B7		; 80 B7 ; Branch always to $80, $B7 [Flow: branch]
	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	lda #$B5.b		; A9 B5 ; Load #$B5.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $26		; 30 26 ; Branch if minus to $30, $26 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$18.b		; E9 18 ; Subtract #$18.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$18.b		; E9 18 ; Subtract #$18.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,Y		; 99 80 0E ; Store accumulator to $0E80.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	lda $7EF37A.l		; AF 7A F3 7E ; Load long $7EF37A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$05.b		; 29 05 ; Logical AND #$05.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $36		; D0 36 ; Branch if not equal to $D0, $36 [Flow: branch]
	lda $7EF3C9.l		; AF C9 F3 7E ; Load long $7EF3C9.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $2E		; F0 2E ; Branch if equal to $F0, $2E [Flow: branch]
	lda #$B5.b		; A9 B5 ; Load #$B5.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $26		; 30 26 ; Branch if minus to $30, $26 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$38.b		; E9 38 ; Subtract #$38.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$18.b		; E9 18 ; Subtract #$18.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,Y		; 99 80 0E ; Store accumulator to $0E80.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1EEDC9.l		; 22 C9 ED 1E ; Jump to subroutine long $1EEDC9.l [Writes: Stack Pointer] [Flow: call]
	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	lda $7EF3C9.l		; AF C9 F3 7E ; Load long $7EF3C9.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $7EF3C9.l		; AF C9 F3 7E ; Load long $7EF3C9.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	lda $7EF3CA.l		; AF CA F3 7E ; Load long $7EF3CA.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	lda $7EF3C9.l		; AF C9 F3 7E ; Load long $7EF3C9.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $E9		; D0 E9 ; Branch if not equal to $D0, $E9 [Flow: branch]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $E1		; D0 E1 ; Branch if not equal to $D0, $E1 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,X		; 9D 80 0E ; Store accumulator to $0E80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0DCB2A.l		; 22 2A CB 0D ; Jump to subroutine long $0DCB2A.l [Writes: Stack Pointer] [Flow: call]
	lda $7EF3C9.l		; AF C9 F3 7E ; Load long $7EF3C9.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$02.b		; 69 02 ; Add #$02.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$03.b		; E9 03 ; Subtract #$03.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$02.b		; 69 02 ; Add #$02.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$03.b		; E9 03 ; Subtract #$03.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	jsr $B5A6.w		; 20 A6 B5 ; Jump to subroutine at $B5A6.w [Writes: Stack Pointer] [Flow: call]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsl $0DCB2A.l		; 22 2A CB 0D ; Jump to subroutine long $0DCB2A.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E90.w,X		; 9D 90 0E ; Store accumulator to $0E90.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E90.w,Y		; 99 90 0E ; Store accumulator to $0E90.w,Y [Reads: Accumulator, Y Index]
	lda $7EF3C9.l		; AF C9 F3 7E ; Load long $7EF3C9.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	sta $0D80.w,Y		; 99 80 0D ; Store accumulator to $0D80.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $90CC.w		; 20 CC 90 ; Jump to subroutine at $90CC.w [Writes: Stack Pointer] [Flow: call]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$9C.b		; E9 9C ; Subtract #$9C.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	dec $0DC0.w,X		; DE C0 0D ; Decrement memory $0DC0.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsl $1EA4E7.l		; 22 E7 A4 1E ; Jump to subroutine long $1EA4E7.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DA0.w,X		; 9D A0 0D ; Store accumulator to $0DA0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$07.b		; 69 07 ; Add #$07.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	lda $048E.w		; AD 8E 04 ; Load $048E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$CE.b		; C9 CE ; Compare #$CE.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	dec $0DB0.w,X		; DE B0 0D ; Decrement memory $0DB0.w,X [Reads: X Index] [Flags: ZN]
	jmp $A342.w		; 4C 42 A3 ; Jump to $A342.w [Flow: jump]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$05.b		; 69 05 ; Add #$05.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$63.b		; A9 63 ; Load #$63.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	jsl $0DB818.l		; 22 18 B8 0D ; Jump to subroutine long $0DB818.l [Writes: Stack Pointer] [Flow: call]
	dec $0ED0.w,X		; DE D0 0E ; Decrement memory $0ED0.w,X [Reads: X Index] [Flags: ZN]
	inc $0ED0.w,X		; FE D0 0E ; Increment memory $0ED0.w,X [Reads: X Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $8BA7.w		; 20 A7 8B ; Jump to subroutine at $8BA7.w [Writes: Stack Pointer] [Flow: call]
	lda #$64.b		; A9 64 ; Load #$64.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $1C		; 30 1C ; Branch if minus to $30, $1C [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0ED0.w,Y		; 99 D0 0E ; Store accumulator to $0ED0.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $8B7F.w,X		; BD 7F 8B ; Load $8B7F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZNC]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$66.b		; E9 66 ; Subtract #$66.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $058192.l		; 22 92 81 05 ; Jump to subroutine long $058192.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $EAD1.w		; 20 D1 EA ; Jump to subroutine at $EAD1.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	lda $7EF34C.l		; AF 4C F3 7E ; Load long $7EF34C.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	.db $80, $E8		; 80 E8 ; Branch always to $80, $E8 [Flow: branch]
	jsl $1AFF00.l		; 22 00 FF 1A ; Jump to subroutine long $1AFF00.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF2D8.l		; AF D8 F2 7E ; Load long $7EF2D8.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $060010.l		; 0F 10 00 06 ; OR accumulator with memory (long) $060010.l [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($1E.b)		; 12 1E ; OR accumulator with memory (indirect) ($1E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $24231F.l,X		; FF 1F 23 24 ; Subtract with carry (long,X) $24231F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $27.b		; 25 27 ; Logical AND $27.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	lda $0E40.w,X		; BD 40 0E ; Load $0E40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$10.b		; 09 10 ; Logical OR #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	cmp $8BE4.w,Y		; D9 E4 8B ; Compare accumulator $8BE4.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $D0, $F8		; D0 F8 ; Branch if not equal to $D0, $F8 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	and [$8C.b],Y		; 37 8C ; AND accumulator with memory (long indexed) [$8C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $8C.b,S		; 43 8C ; Exclusive OR accumulator with stack relative $8C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jmp $8C608C.l		; 5C 8C 60 8C ; Jump long to $8C608C.l [Flow: jump]
	adc [$8C.b]		; 67 8C ; Add with carry (long) [$8C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($8C.b)		; 72 8C ; Add with carry (indirect) ($8C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sty $8C72.w		; 8C 72 8C ; Store Y register to $8C72.w [Reads: Y Index]
	adc ($8C.b)		; 72 8C ; Add with carry (indirect) ($8C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sty $8C91.w		; 8C 91 8C ; Store Y register to $8C91.w [Reads: Y Index]
	sta $8C.b,X		; 95 8C ; Store accumulator to $8C.b,X [Reads: Accumulator, X Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sty $00A9.w		; 8C A9 00 ; Store Y register to $00A9.w [Reads: Y Index]
	ldy #$07.b		; A0 07 ; Load #$07.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1EF1B3.l		; 22 B3 F1 1E ; Jump to subroutine long $1EF1B3.l [Writes: Stack Pointer] [Flow: call]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $80, $39		; 80 39 ; Branch always to $80, $39 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$09.b		; A0 09 ; Load #$09.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1EF1B3.l		; 22 B3 F1 1E ; Jump to subroutine long $1EF1B3.l [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$0D.b		; A0 0D ; Load #$0D.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1EF1B3.l		; 22 B3 F1 1E ; Jump to subroutine long $1EF1B3.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$0B.b		; A0 0B ; Load #$0B.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1EF1B3.l		; 22 B3 F1 1E ; Jump to subroutine long $1EF1B3.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,X		; 9D 80 0E ; Store accumulator to $0E80.w,X [Reads: Accumulator, X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04C4.w		; 8D C4 04 ; Store accumulator to $04C4.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$07.b		; A0 07 ; Load #$07.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1EF1B3.l		; 22 B3 F1 1E ; Jump to subroutine long $1EF1B3.l [Writes: Stack Pointer] [Flow: call]
	ldy #$0A.b		; A0 0A ; Load #$0A.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1EF1B3.l		; 22 B3 F1 1E ; Jump to subroutine long $1EF1B3.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1EF1B3.l		; 22 B3 F1 1E ; Jump to subroutine long $1EF1B3.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,X		; 9D 80 0E ; Store accumulator to $0E80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $F8		; 80 F8 ; Branch always to $80, $F8 [Flow: branch]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $F4		; 80 F4 ; Branch always to $80, $F4 [Flow: branch]
	asl $120E.w		; 0E 0E 12 ; Arithmetic shift left $120E.w [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	trb $FE.b		; 14 FE ; Test and reset bits $FE.b [Reads: Accumulator] [Flags: Z]
	ldy #$0B.b		; A0 0B ; Load #$0B.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	cmp $8C99.w,Y		; D9 99 8C ; Compare accumulator $8C99.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $D0, $F8		; D0 F8 ; Branch if not equal to $D0, $F8 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,X		; 9D 80 0E ; Store accumulator to $0E80.w,X [Reads: Accumulator, X Index]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $E1.b,S		; 03 E1 ; OR accumulator with stack relative $E1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $A0FE.w,Y		; 19 FE A0 ; OR accumulator with memory $A0FE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	cmp $8CBE.w,Y		; D9 BE 8C ; Compare accumulator $8CBE.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $D0, $F8		; D0 F8 ; Branch if not equal to $D0, $F8 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,X		; 9D 80 0E ; Store accumulator to $0E80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsr $1BA5.w		; 20 A5 1B ; Jump to subroutine at $1BA5.w [Writes: Stack Pointer] [Flow: call]
	.db $F0, $4A		; F0 4A ; Branch if equal to $F0, $4A [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,X		; 9D 20 0F ; Store accumulator to $0F20.w,X [Reads: Accumulator, X Index]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda $A1.b		; A5 A1 ; Load $A1.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda $7EF34E.l		; AF 4E F3 7E ; Load long $7EF34E.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $00D4ED.l		; 22 ED D4 00 ; Jump to subroutine long $00D4ED.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0B9B.w		; AD 9B 0B ; Load $0B9B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CBA.w,X		; 9D BA 0C ; Store accumulator to $0CBA.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inc $0B9B.w		; EE 9B 0B ; Increment $0B9B.w [Flags: ZN]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $8CF0.w,Y		; 39 F0 8C ; AND accumulator with memory $8CF0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	inc $0DC0.w,X		; FE C0 0D ; Increment memory $0DC0.w,X [Reads: X Index] [Flags: ZN]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7EF280.l,X		; BF 80 F2 7E ; Load long $7EF280.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda $7EF3C9.l		; AF C9 F3 7E ; Load long $7EF3C9.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF34D.l		; AF 4D F3 7E ; Load long $7EF34D.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora #$07.b		; 09 07 ; Logical OR #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $0503.w		; 0C 03 05 ; Test and set bits $0503.w [Reads: Accumulator] [Flags: Z]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $8D8E.w,Y		; B9 8E 8D ; Load $8D8E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $8D90.w,Y		; B9 90 8D ; Load $8D90.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	lda $8D92.w,Y		; B9 92 8D ; Load $8D92.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0CD2.w,X		; 9D D2 0C ; Store accumulator to $0CD2.w,X [Reads: Accumulator, X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $EA04.w		; 20 04 EA ; Jump to subroutine at $EA04.w [Writes: Stack Pointer] [Flow: call]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1DBE44.l		; 22 44 BE 1D ; Jump to subroutine long $1DBE44.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	jsr $910A.w		; 20 0A 91 ; Jump to subroutine at $910A.w [Writes: Stack Pointer] [Flow: call]
	jmp $8BA7.w		; 4C A7 8B ; Jump to $8BA7.w [Flow: jump]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	jsr $884A.w		; 20 4A 88 ; Jump to subroutine at $884A.w [Writes: Stack Pointer] [Flow: call]
	jmp $8BA7.w		; 4C A7 8B ; Jump to $8BA7.w [Flow: jump]
	jsr $910A.w		; 20 0A 91 ; Jump to subroutine at $910A.w [Writes: Stack Pointer] [Flow: call]
	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cop $BD.b		; 02 BD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $0D		; 10 0D ; Branch if plus to $10, $0D [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $8DE7.w,Y		; B9 E7 8D ; Load $8DE7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsr $BE9D.w		; 20 9D BE ; Jump to subroutine at $BE9D.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $D0, $F8		; D0 F8 ; Branch if not equal to $D0, $F8 [Flow: branch]
	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$2B.b		; C9 2B ; Compare #$2B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,Y		; 99 D0 0D ; Store accumulator to $0DD0.w,Y [Reads: Accumulator, Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	jsr $BF4B.w		; 20 4B BF ; Jump to subroutine at $BF4B.w [Writes: Stack Pointer] [Flow: call]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $7EF3C9.l		; AF C9 F3 7E ; Load long $7EF3C9.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w		; 8D 80 0D ; Store accumulator to $0D80.w [Reads: Accumulator]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0BA0.w		; 8D A0 0B ; Store accumulator to $0BA0.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$10.b		; 49 10 ; Exclusive OR #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	inc $0F60.w,X		; FE 60 0F ; Increment memory $0F60.w,X [Reads: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$05.b		; E9 05 ; Subtract #$05.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	dec $0E30.w,X		; DE 30 0E ; Decrement memory $0E30.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	clc		; 18 ; Clear carry flag [Flags: C]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $D0, $30		; D0 30 ; Branch if not equal to $D0, $30 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	cpx #$F8.b		; E0 F8 ; Compare #$F8.b with X register [Reads: X Index] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF00FF.l,X		; FF FF 00 FF ; Subtract with carry (long,X) $FF00FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C00000.l,X		; FF 00 00 C0 ; Subtract with carry (long,X) $C00000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	jsr $EAD1.w		; 20 D1 EA ; Jump to subroutine at $EAD1.w [Writes: Stack Pointer] [Flow: call]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda #$FC.b		; A9 FC ; Load #$FC.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $069E.w		; AC 9E 06 ; Load $069E.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	sta $0BA0.w,X		; 9D A0 0B ; Store accumulator to $0BA0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $8EF0.w,Y		; B9 F0 8E ; Load $8EF0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8F1C.w		; 20 1C 8F ; Jump to subroutine at $8F1C.w [Writes: Stack Pointer] [Flow: call]
	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF356.l		; AF 56 F3 7E ; Load long $7EF356.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp $8BA7.w		; 4C A7 8B ; Jump to $8BA7.w [Flow: jump]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $06		; 10 06 ; Branch if plus to $10, $06 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0E20.w,Y		; BE 20 0E ; Load X register $0E20.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda $0DB266.l,X		; BF 66 B2 0D ; Load long $0DB266.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,Y		; 99 D0 0D ; Store accumulator to $0DD0.w,Y [Reads: Accumulator, Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $EB		; 10 EB ; Branch if plus to $10, $EB [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8F1C.w		; 20 1C 8F ; Jump to subroutine at $8F1C.w [Writes: Stack Pointer] [Flow: call]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	inc $0FF8.w		; EE F8 0F ; Increment $0FF8.w [Flags: ZN]
	jmp $910A.w		; 4C 0A 91 ; Jump to $910A.w [Flow: jump]
	lda $0B6A.w		; AD 6A 0B ; Load $0B6A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	inc $0B6A.w		; EE 6A 0B ; Increment $0B6A.w [Flags: ZN]
	jsr $910A.w		; 20 0A 91 ; Jump to subroutine at $910A.w [Writes: Stack Pointer] [Flow: call]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $01		; B0 01 ; Branch if carry set to $B0, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $0FFF.w		; AC FF 0F ; Load $0FFF.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $8F6F.w,Y		; B9 6F 8F ; Load $8F6F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	lda $8F6D.w,Y		; B9 6D 8F ; Load $8F6D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0CD2.w,X		; 9D D2 0C ; Store accumulator to $0CD2.w,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8F1C.w		; 20 1C 8F ; Jump to subroutine at $8F1C.w [Writes: Stack Pointer] [Flow: call]
	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	jsl $1DD6D1.l		; 22 D1 D6 1D ; Jump to subroutine long $1DD6D1.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8F1C.w		; 20 1C 8F ; Jump to subroutine at $8F1C.w [Writes: Stack Pointer] [Flow: call]
	jsl $05A37A.l		; 22 7A A3 05 ; Jump to subroutine long $05A37A.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $910A.w		; 20 0A 91 ; Jump to subroutine at $910A.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D10.w,X		; 7D 10 0D ; Add $0D10.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DA0.w,X		; 9D A0 0D ; Store accumulator to $0DA0.w,X [Reads: Accumulator, X Index]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $0BE0.w,X		; 1E E0 0B ; Arithmetic shift left $0BE0.w,X [Reads: X Index] [Flags: ZNC]
	lsr $0BE0.w,X		; 5E E0 0B ; Logical shift right $0BE0.w,X [Reads: X Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E30.w,X		; BD 30 0E ; Load $0E30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $20		; B0 20 ; Branch if carry set to $B0, $20 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $E2		; D0 E2 ; Branch if not equal to $D0, $E2 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$70.b		; A9 70 ; Load #$70.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	jsr $EAA4.w		; 20 A4 EA ; Jump to subroutine at $EAA4.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0E30.w,X		; BD 30 0E ; Load $0E30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $903B.w,Y		; B9 3B 90 ; Load $903B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DA0.w,X		; 9D A0 0D ; Store accumulator to $0DA0.w,X [Reads: Accumulator, X Index]
	lda $0B6B.w,X		; BD 6B 0B ; Load $0B6B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$50.b		; 09 50 ; Logical OR #$50.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B6B.w,X		; 9D 6B 0B ; Store accumulator to $0B6B.w,X [Reads: Accumulator, X Index]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $11.b		; 64 11 ; Store zero to $11.b
	sec		; 38 ; Set carry flag [Flags: C]
	ror $0CAA.w,X		; 7E AA 0C ; Rotate right $0CAA.w,X [Reads: X Index] [Flags: ZNC]
	jsr $9271.w		; 20 71 92 ; Jump to subroutine at $9271.w [Writes: Stack Pointer] [Flow: call]
	jsr $9271.w		; 20 71 92 ; Jump to subroutine at $9271.w [Writes: Stack Pointer] [Flow: call]
	asl $0CAA.w,X		; 1E AA 0C ; Arithmetic shift left $0CAA.w,X [Reads: X Index] [Flags: ZNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: ZNC]
	ora $07.b		; 05 07 ; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DFB8A.l		; 22 8A FB 1D ; Jump to subroutine long $1DFB8A.l [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DFB8A.l		; 22 8A FB 1D ; Jump to subroutine long $1DFB8A.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EC172.l		; AF 72 C1 7E ; Load long $7EC172.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $B8CE.w,Y		; B9 CE B8 ; Load $B8CE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0F50.w,X		; 1D 50 0F ; OR accumulator with memory $0F50.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	lda $7EF3CA.l		; AF CA F3 7E ; Load long $7EF3CA.l into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,X		; 9D 80 0E ; Store accumulator to $0E80.w,X [Reads: Accumulator, X Index]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	lda $7EF3C9.l		; AF C9 F3 7E ; Load long $7EF3C9.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $7EF34C.l		; AF 4C F3 7E ; Load long $7EF34C.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $13		; 90 13 ; Branch if carry clear to $90, $13 [Flow: branch]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $884A.w		; 20 4A 88 ; Jump to subroutine at $884A.w [Writes: Stack Pointer] [Flow: call]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF34C.l		; AF 4C F3 7E ; Load long $7EF34C.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$07.b		; 69 07 ; Add #$07.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $E3		; F0 E3 ; Branch if equal to $F0, $E3 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E30.w,X		; 9D 30 0E ; Store accumulator to $0E30.w,X [Reads: Accumulator, X Index]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8F1C.w		; 20 1C 8F ; Jump to subroutine at $8F1C.w [Writes: Stack Pointer] [Flow: call]
	lda #$C0.b		; A9 C0 ; Load #$C0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
	jsr $8F1C.w		; 20 1C 8F ; Jump to subroutine at $8F1C.w [Writes: Stack Pointer] [Flow: call]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	jsr $8BA7.w		; 20 A7 8B ; Jump to subroutine at $8BA7.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	jsr $8BA7.w		; 20 A7 8B ; Jump to subroutine at $8BA7.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsr $90CC.w		; 20 CC 90 ; Jump to subroutine at $90CC.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	.db $80, $B6		; 80 B6 ; Branch always to $80, $B6 [Flow: branch]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZNC]
	jsr $1006.w		; 20 06 10 ; Jump to subroutine at $1006.w [Writes: Stack Pointer] [Flow: call]
	tsb $0301.w		; 0C 01 03 ; Test and set bits $0301.w [Reads: Accumulator] [Flags: Z]
	cop $06.b		; 02 06 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $9116.w,Y		; B9 16 91 ; Load $9116.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $9118.w,Y		; B9 18 91 ; Load $9118.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	lda $911A.w,Y		; B9 1A 91 ; Load $911A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda $911C.w,Y		; B9 1C 91 ; Load $911C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda $911E.w,Y		; B9 1E 91 ; Load $911E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0BE0.w,X		; 9D E0 0B ; Store accumulator to $0BE0.w,X [Reads: Accumulator, X Index]
	lda $9120.w,Y		; B9 20 91 ; Load $9120.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0CD2.w,X		; 9D D2 0C ; Store accumulator to $0CD2.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	inc $0E90.w,X		; FE 90 0E ; Increment memory $0E90.w,X [Reads: X Index] [Flags: ZN]
	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF35C.l		; AF 5C F3 7E ; Load long $7EF35C.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $7EF35D.l		; 0F 5D F3 7E ; OR accumulator with memory (long) $7EF35D.l [Writes: Accumulator] [Flags: ZN]
	ora $7EF35E.l		; 0F 5E F3 7E ; OR accumulator with memory (long) $7EF35E.l [Writes: Accumulator] [Flags: ZN]
	ora $7EF35F.l		; 0F 5F F3 7E ; OR accumulator with memory (long) $7EF35F.l [Writes: Accumulator] [Flags: ZN]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	inc $0E90.w,X		; FE 90 0E ; Increment memory $0E90.w,X [Reads: X Index] [Flags: ZN]
	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$20.b]		; 07 20 ; OR accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $A98F.w		; 1C 8F A9 ; Test and reset bits $A98F.w [Reads: Accumulator] [Flags: Z]
	brk $9D.b		; 00 9D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$0D.b		; C0 0D ; Compare #$0D.b with Y register [Reads: Y Index] [Flags: ZNC]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	jsr $910A.w		; 20 0A 91 ; Jump to subroutine at $910A.w [Writes: Stack Pointer] [Flow: call]
	ldy $0FFF.w		; AC FF 0F ; Load $0FFF.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $9193.w,Y		; B9 93 91 ; Load $9193.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1EC700.l		; 22 00 C7 1E ; Jump to subroutine long $1EC700.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0DA0.w,X		; FE A0 0D ; Increment memory $0DA0.w,X [Reads: X Index] [Flags: ZN]
	jmp $8BA7.w		; 4C A7 8B ; Jump to $8BA7.w [Flow: jump]
	jsr $8F1C.w		; 20 1C 8F ; Jump to subroutine at $8F1C.w [Writes: Stack Pointer] [Flow: call]
	jsl $1DAD0E.l		; 22 0E AD 1D ; Jump to subroutine long $1DAD0E.l [Writes: Stack Pointer] [Flow: call]
	jsr $91CC.w		; 20 CC 91 ; Jump to subroutine at $91CC.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8F1C.w		; 20 1C 8F ; Jump to subroutine at $8F1C.w [Writes: Stack Pointer] [Flow: call]
	jsl $1E8000.l		; 22 00 80 1E ; Jump to subroutine long $1E8000.l [Writes: Stack Pointer] [Flow: call]
	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1D00.w,Y		; 99 00 1D ; Store accumulator to $1D00.w,Y [Reads: Accumulator, Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $FA		; 10 FA ; Branch if plus to $10, $FA [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	jsr $E93E.w		; 20 3E E9 ; Jump to subroutine at $E93E.w [Writes: Stack Pointer] [Flow: call]
	stz $0D40.w,X		; 9E 40 0D ; Store zero to $0D40.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $8BA7.w		; 20 A7 8B ; Jump to subroutine at $8BA7.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8F1C.w		; 20 1C 8F ; Jump to subroutine at $8F1C.w [Writes: Stack Pointer] [Flow: call]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8F1C.w		; 20 1C 8F ; Jump to subroutine at $8F1C.w [Writes: Stack Pointer] [Flow: call]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	sta $0E80.w,X		; [PATTERN: Memory clearing operation] 9D 80 0E ; Store accumulator to $0E80.w,X [Reads: Accumulator, X Index]
	cpx #$0D.b		; E0 0D ; Compare #$0D.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	stz $0B0A.w		; 9C 0A 0B ; Store zero to $0B0A.w
	stz $0B0B.w		; 9C 0B 0B ; Store zero to $0B0B.w
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	jsl $1EB8B4.l		; 22 B4 B8 1E ; Jump to subroutine long $1EB8B4.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0B0F.w,X		; BD 0F 0B ; Load $0B0F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0B1F.w,X		; BD 1F 0B ; Load $0B1F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $0B2F.w,X		; BD 2F 0B ; Load $0B2F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $0B3F.w,X		; BD 3F 0B ; Load $0B3F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8F1C.w		; 20 1C 8F ; Jump to subroutine at $8F1C.w [Writes: Stack Pointer] [Flow: call]
	lda #$50.b		; A9 50 ; Load #$50.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	inc $041A.w		; EE 1A 04 ; Increment $041A.w [Flags: ZN]
	lda #$70.b		; A9 70 ; Load #$70.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1ECB0C.l		; 22 0C CB 1E ; Jump to subroutine long $1ECB0C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $884A.w		; 20 4A 88 ; Jump to subroutine at $884A.w [Writes: Stack Pointer] [Flow: call]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E30.w,X		; 9D 30 0E ; Store accumulator to $0E30.w,X [Reads: Accumulator, X Index]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $00D4ED.l		; 22 ED D4 00 ; Jump to subroutine long $00D4ED.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E30.w,X		; 9D 30 0E ; Store accumulator to $0E30.w,X [Reads: Accumulator, X Index]
	lda $0B9B.w		; AD 9B 0B ; Load $0B9B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CBA.w,X		; 9D BA 0C ; Store accumulator to $0CBA.w,X [Reads: Accumulator, X Index]
	inc $0B9B.w		; EE 9B 0B ; Increment $0B9B.w [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9283.w,Y		; B9 83 92 ; Load $9283.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ror $7394.w		; 6E 94 73 ; Rotate right $7394.w [Flags: ZNC]
	sty $B7.b,X		; 94 B7 ; Store Y register $B7.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	cmp $0000.w,X		; DD 00 00 ; Compare accumulator $0000.w,X [Reads: X Index] [Flags: ZNC]
	ora $C0.b,S		; 03 C0 ; OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $C0.b,S		; 03 C0 ; OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $C0.b,S		; 03 C0 ; OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $C0.b,S		; 03 C0 ; OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc [$D3.b],Y		; 77 D3 ; Add with carry (long indexed) [$D3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc #$94.b		; 69 94 ; Add #$94.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc [$D3.b],Y		; 77 D3 ; Add with carry (long indexed) [$D3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
.ACCU 16
	rep #$A5		; C2 A5
	lda $9AD5.w,Y		; B9 D5 9A ; Load $9AD5.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	bit $9C.b		; 24 9C ; Test bits $9C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dec $53.b,X		; D6 53 ; Decrement memory $53.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora $9F.b		; 05 9F ; Logical OR $9F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx $98.b		; E4 98 ; Compare $98.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	ora #$1CA4.w		; 09 A4 1C ; Logical OR #$1CA4.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$0C.b		; C0 0C ; Compare #$0C.b with Y register [Reads: Y Index] [Flags: ZNC]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy #$6C.b		; C0 6C ; Compare #$6C.b with Y register [Reads: Y Index] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	stx $EE.b,Y		; 96 EE ; Store X register $EE.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	lda ($54.b),Y		; B1 54 ; Load accumulator ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$E8.b],Y		; B7 E8 ; Load accumulator (long indexed) [$E8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$E5.b		; C0 E5 ; Compare #$E5.b with Y register [Reads: Y Index] [Flags: ZNC]
.INDEX 16
	rep #$D0		; C2 D0
	clv		; B8 ; Clear overflow flag [Flags: V]
	jmp $D9B9.w		; 4C B9 D9 ; Jump to $D9B9.w [Flow: jump]
	sta $FA.b,X		; 95 FA ; Store accumulator to $FA.b,X [Reads: Accumulator, X Index]
	lda $9E1F.w,Y		; B9 1F 9E ; Load $9E1F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $3DA2.w,X		; 3D A2 3D ; AND accumulator with memory $3DA2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldx #$C0D5.w		; A2 D5 C0 ; Load #$C0D5.w into X register [Writes: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $8A.b		; A4 8A ; Load $8A.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty $6F.b,X		; 94 6F ; Store Y register $6F.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	lda $C0B7.w		; AD B7 C0 ; Load $C0B7.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $C1C0.w,X		; BC C0 C1 ; Load Y register $C1C0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $C0C1.w,X		; BD C1 C0 ; Load $C0C1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($C0.b)		; B2 C0 ; Load accumulator (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $D0C0CB.l		; AF CB C0 D0 ; Load long $D0C0CB.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$C0C6.w		; C0 C6 C0 ; Compare #$C0C6.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora ($C0.b)		; 12 C0 ; OR accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$C0.b],Y		; 17 C0 ; OR accumulator with memory (long indexed) [$C0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($C0.b,X)		; 21 C0 ; Logical AND ($C0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	cpy #$C035.w		; C0 35 C0 ; Compare #$C035.w with Y register [Reads: Y Index] [Flags: ZNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cpy #$C03F.w		; C0 3F C0 ; Compare #$C03F.w with Y register [Reads: Y Index] [Flags: ZNC]
	ldy $44BC.w		; AC BC 44 ; Load $44BC.w into Y register [Writes: Y Index] [Flags: ZN]
	cpy #$C049.w		; C0 49 C0 ; Compare #$C049.w with Y register [Reads: Y Index] [Flags: ZNC]
	lsr $53C0.w		; 4E C0 53 ; Logical shift right $53C0.w [Flags: ZNC]
	cpy #$A86C.w		; C0 6C A8 ; Compare #$A86C.w with Y register [Reads: Y Index] [Flags: ZNC]
	inc $FEBF.w,X		; FE BF FE ; Increment memory $FEBF.w,X [Reads: X Index] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EABFEA.l,X		; BF EA BF EA ; Load long $EABFEA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $19CBA2.l,X		; BF A2 CB 19 ; Load long $19CBA2.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $E0.b,S		; C3 E0 ; Compare accumulator (stack relative) $E0.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	lda $62C058.l,X		; BF 58 C0 62 ; Load long $62C058.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$C067.w		; C0 67 C0 ; Compare #$C067.w with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $71A5.w		; 0C A5 71 ; Test and set bits $71A5.w [Reads: Accumulator] [Flags: Z]
	cpy #$BFEF.w		; C0 EF BF ; Compare #$BFEF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFEFBF.l		; EF BF EF BF ; Subtract with carry (long) $BFEFBF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $BFF4BF.l		; EF BF F4 BF ; Subtract with carry (long) $BFF4BF.l [Writes: Accumulator] [Flags: ZVNC]
	pea $F4BF.w		; F4 BF F4 ; Push absolute address $F4BF.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	lda $F4BFF4.l,X		; BF F4 BF F4 ; Load long $F4BFF4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $F4BFF4.l,X		; BF F4 BF F4 ; Load long $F4BFF4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $F4BFF4.l,X		; BF F4 BF F4 ; Load long $F4BFF4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $F4BFF4.l,X		; BF F4 BF F4 ; Load long $F4BFF4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $F4BFF4.l,X		; BF F4 BF F4 ; Load long $F4BFF4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $F4BFF4.l,X		; BF F4 BF F4 ; Load long $F4BFF4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $F4BFF4.l,X		; BF F4 BF F4 ; Load long $F4BFF4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $F4BFF4.l,X		; BF F4 BF F4 ; Load long $F4BFF4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $F4BFF4.l,X		; BF F4 BF F4 ; Load long $F4BFF4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $F4BFF4.l,X		; BF F4 BF F4 ; Load long $F4BFF4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $F4BFF4.l,X		; BF F4 BF F4 ; Load long $F4BFF4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $F4BFF4.l,X		; BF F4 BF F4 ; Load long $F4BFF4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $4ACEC0.l,X		; BF C0 CE 4A ; Load long $4ACEC0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $4A		; D0 4A ; Branch if not equal to $D0, $4A [Flow: branch]
	.db $D0, $4A		; D0 4A ; Branch if not equal to $D0, $4A [Flow: branch]
	.db $D0, $4A		; D0 4A ; Branch if not equal to $D0, $4A [Flow: branch]
	.db $D0, $4A		; D0 4A ; Branch if not equal to $D0, $4A [Flow: branch]
	.db $D0, $4A		; D0 4A ; Branch if not equal to $D0, $4A [Flow: branch]
	.db $D0, $4A		; D0 4A ; Branch if not equal to $D0, $4A [Flow: branch]
	.db $D0, $4A		; D0 4A ; Branch if not equal to $D0, $4A [Flow: branch]
	.db $D0, $4A		; D0 4A ; Branch if not equal to $D0, $4A [Flow: branch]
	.db $D0, $4A		; D0 4A ; Branch if not equal to $D0, $4A [Flow: branch]
	.db $D0, $94		; D0 94 ; Branch if not equal to $D0, $94 [Flow: branch]
	cmp $32D032.l		; CF 32 D0 32 ; Compare accumulator (long) $32D032.l [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $4A		; D0 4A ; Branch if not equal to $D0, $4A [Flow: branch]
	.db $D0, $76		; D0 76 ; Branch if not equal to $D0, $76 [Flow: branch]
	cpy #$C080.w		; C0 80 C0 ; Compare #$C080.w with Y register [Reads: Y Index] [Flags: ZNC]
	sta $C099C0.l		; 8F C0 99 C0 ; Store accumulator (long) $C099C0.l [Reads: Accumulator]
	lda $C0.b,S		; A3 C0 ; Load accumulator (stack relative) $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx #$08AA.w		; E0 AA 08 ; Compare #$08AA.w with X register [Reads: X Index] [Flags: ZNC]
	cpy #$A853.w		; C0 53 A8 ; Compare #$A853.w with Y register [Reads: Y Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cpy #$C008.w		; C0 08 C0 ; Compare #$C008.w with Y register [Reads: Y Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cpy #$C00D.w		; C0 0D C0 ; Compare #$C00D.w with Y register [Reads: Y Index] [Flags: ZNC]
	jsl $1DD6F6.l		; 22 F6 D6 1D ; Jump to subroutine long $1DD6F6.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1DDD7B.l		; 22 7B DD 1D ; Jump to subroutine long $1DDD7B.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1DDC72.l		; 22 72 DC 1D ; Jump to subroutine long $1DDC72.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $40.b		; 04 40 ; Test and set bits $40.b [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $0E		; 10 0E ; Branch if plus to $10, $0E [Flow: branch]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	and #$D004.w		; 29 04 D0 ; Logical AND #$D004.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ldy #$8008.w		; A0 08 80 ; Load #$8008.w into Y register [Writes: Y Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$F002.w		; C9 02 F0 ; Compare #$F002.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $BC.b,X		; F5 BC ; Subtract $BC.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	lda $9478.w,Y		; B9 78 94 ; Load $9478.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$19BF.w		; 29 BF 19 ; Logical AND #$19BF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($94.b,X)		; 81 94 ; Store accumulator ($94.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsr $DC10.w		; 20 10 DC ; Jump to subroutine at $DC10.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	lda $0EA0.w,X		; BD A0 0E ; Load $0EA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	jsr $F2B4.w		; 20 B4 F2 ; Jump to subroutine at $F2B4.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $0B		; 90 0B ; Branch if carry clear to $90, $0B [Flow: branch]
	lda $012E.w		; AD 2E 01 ; Load $012E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$220B.w		; A9 0B 22 ; Load #$220B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp ($0DBB.w,X)		; 7C BB 0D ; Jump indirect indexed to ($0DBB.w,X) [Reads: X Index] [Flow: jump]
	jsr $F154.w		; 20 54 F1 ; Jump to subroutine at $F154.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	jsl $0FF540.l		; 22 40 F5 0F ; Jump to subroutine long $0FF540.l [Writes: Stack Pointer] [Flow: call]
	jsl $079291.l		; 22 91 92 07 ; Jump to subroutine long $079291.l [Writes: Stack Pointer] [Flow: call]
	lda $0EA0.w,X		; BD A0 0E ; Load $0EA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D00E.w		; C9 0E D0 ; Compare #$D00E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $9D02A9.l		; 0F A9 02 9D ; OR accumulator with memory (long) $9D02A9.l [Writes: Accumulator] [Flags: ZN]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	lda #$9DFF.w		; A9 FF 9D ; Load #$9DFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$9D40.w		; A9 40 9D ; Load #$9D40.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $0E		; 10 0E ; Branch if plus to $10, $0E [Flow: branch]
	jsr $FF78.w		; 20 78 FF ; Jump to subroutine at $FF78.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	asl $95.b		; 06 95 ; Arithmetic shift left $95.b [Reads: Direct Page] [Flags: ZNC]
	eor $8F95.w,Y		; 59 95 8F ; Exclusive OR accumulator with memory $8F95.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $20.b,X		; 95 20 ; Store accumulator to $20.b,X [Reads: Accumulator, X Index]
	cpx #$0000.w		; E0 00 00 ; Compare #$0000.w with X register [Reads: X Index] [Flags: ZNC]
	jsr $BDE0.w		; 20 E0 BD ; Jump to subroutine at $BDE0.w [Writes: Stack Pointer] [Flow: call]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	.db $D0, $4D		; D0 4D ; Branch if not equal to $D0, $4D [Flow: branch]
	asl $0E40.w,X		; 1E 40 0E ; Arithmetic shift left $0E40.w,X [Reads: X Index] [Flags: ZNC]
	lsr $0E40.w,X		; 5E 40 0E ; Logical shift right $0E40.w,X [Reads: X Index] [Flags: ZNC]
	lda $0CAA.w,X		; BD AA 0C ; Load $0CAA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$9DFB.w		; 29 FB 9D ; Logical AND #$9DFB.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tsb $60BD.w		; 0C BD 60 ; Test and set bits $60BD.w [Reads: Accumulator] [Flags: Z]
	asl $BF29.w		; 0E 29 BF ; Arithmetic shift left $BF29.w [Flags: ZNC]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$691F.w		; 29 1F 69 ; Logical AND #$691F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $F09D.w		; 20 9D F0 ; Jump to subroutine at $F09D.w [Writes: Stack Pointer] [Flow: call]
	ora $A0FE.w		; 0D FE A0 ; Logical OR $A0FE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $A0BD.w		; 0D BD A0 ; Logical OR $A0BD.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $04C9.w		; 0D C9 04 ; Logical OR $04C9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	stz $0DA0.w,X		; 9E A0 0D ; Store zero to $0DA0.w,X [Reads: X Index]
	jsr $EAA4.w		; 20 A4 EA ; Jump to subroutine at $EAA4.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$9D03.w		; 29 03 9D ; Logical AND #$9D03.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpx #$A80D.w		; E0 0D A8 ; Compare #$A80D.w with X register [Reads: X Index] [Flags: ZNC]
	lda $9500.w,Y		; B9 00 95 ; Load $9500.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $9502.w,Y		; B9 02 95 ; Load $9502.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda #$9D20.w		; A9 20 9D ; Load #$9D20.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$8001.w		; 49 01 80 ; Exclusive OR #$8001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $0E80FE.l		; CF FE 80 0E ; Compare accumulator (long) $0E80FE.l [Reads: Accumulator] [Flags: ZNC]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$8501.w		; 29 01 85 ; Logical AND #$8501.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$0A0D.w		; E0 0D 0A ; Compare #$0A0D.w with X register [Reads: X Index] [Flags: ZNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E40.w,X		; BD 40 0E ; Load $0E40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$9D80.w		; 09 80 9D ; Logical OR #$9D80.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	asl $AABD.w		; 0E BD AA ; Arithmetic shift left $AABD.w [Flags: ZNC]
	tsb $0409.w		; 0C 09 04 ; Test and set bits $0409.w [Reads: Accumulator] [Flags: Z]
	sta $0CAA.w,X		; 9D AA 0C ; Store accumulator to $0CAA.w,X [Reads: Accumulator, X Index]
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$9D40.w		; 09 40 9D ; Logical OR #$9D40.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $1AA5.w		; 0E A5 1A ; Arithmetic shift left $1AA5.w [Flags: ZNC]
	and #$D001.w		; 29 01 D0 ; Logical AND #$D001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda #$9D10.w		; A9 10 9D ; Load #$9D10.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$D020.w		; C9 20 D0 ; Compare #$D020.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $A9.b		; 05 A9 ; Logical OR $A9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sta $0E10.w,X		; 9D 10 0E ; Store accumulator to $0E10.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0E00.w,X		; FE 00 0E ; Increment memory $0E00.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$4A08.w		; 29 08 4A ; Logical AND #$4A08.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $95C9.w,Y		; B9 C9 95 ; Load $95C9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$19BF.w		; 29 BF 19 ; Logical AND #$19BF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp ($95.b),Y		; D1 95 ; Compare accumulator ($95.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsr $DC10.w		; 20 10 DC ; Jump to subroutine at $DC10.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsr $FF78.w		; 20 78 FF ; Jump to subroutine at $FF78.w [Writes: Stack Pointer] [Flow: call]
	jsr $D88B.w		; 20 8B D8 ; Jump to subroutine at $D88B.w [Writes: Stack Pointer] [Flow: call]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	stx $4F.b,Y		; 96 4F ; Store X register $4F.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $10.b,Y		; 96 10 ; Store X register $10.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $BD		; F0 BD ; Branch if equal to $F0, $BD [Flow: branch]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	.db $D0, $21		; D0 21 ; Branch if not equal to $D0, $21 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$691F.w		; 29 1F 69 ; Logical AND #$691F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $F09D.w		; 20 9D F0 ; Jump to subroutine at $F09D.w [Writes: Stack Pointer] [Flow: call]
	ora $0329.w		; 0D 29 03 ; Logical OR $0329.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9615.w,Y		; B9 15 96 ; Load $9615.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $9617.w,Y		; B9 17 96 ; Load $9617.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$D010.w		; C9 10 D0 ; Compare #$D010.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $7122.w		; 2D 22 71 ; Logical AND $7122.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ora $B04A.w		; 0D 4A B0 ; Logical OR $B04A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $4C.b		; 26 4C ; Rotate left $4C.b [Reads: Direct Page] [Flags: ZNC]
	adc ($96.b,S),Y		; 73 96 ; Add with carry (stack relative indirect indexed) ($96.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda #$9D20.w		; A9 20 9D ; Load #$9D20.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$9D01.w		; 49 01 9D ; Exclusive OR #$9D01.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpx #$4C0D.w		; E0 0D 4C ; Compare #$4C0D.w with X register [Reads: X Index] [Flags: ZNC]
	and ($96.b,S),Y		; 33 96 ; AND accumulator (stack relative indirect indexed) ($96.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$A04A.w		; A9 4A A0 ; Load #$A04A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsl $1DF65F.l		; 22 5F F6 1D ; Jump to subroutine long $1DF65F.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $08		; 30 08 ; Branch if minus to $30, $08 [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	jsl $06AD50.l		; 22 50 AD 06 ; Jump to subroutine long $06AD50.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $50, $0D		; 50 0D ; Branch if overflow clear to $50, $0D [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$9D01.w		; 29 01 9D ; Logical AND #$9D01.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpx #$A80D.w		; E0 0D A8 ; Compare #$A80D.w with X register [Reads: X Index] [Flags: ZNC]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$19BF.w		; 29 BF 19 ; Logical AND #$19BF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	stx $96.b		; 86 96 ; Store X register to $96.b [Reads: X Index]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $0E90.w,X		; BD 90 0E ; Load $0E90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $0B89.w,X		; BD 89 0B ; Load $0B89.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$9D30.w		; 09 30 9D ; Logical OR #$9D30.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit #$200B.w		; 89 0B 20 ; Test bits #$200B.w with accumulator [Reads: Accumulator] [Flags: Z]
	stx $97.b		; 86 97 ; Store X register to $97.b [Reads: X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $90.b		; A5 90 ; Load $90.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	inc $92.b		; E6 92 ; Increment $92.b [Reads: Direct Page] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	dec $0E40.w,X		; DE 40 0E ; Decrement memory $0E40.w,X [Reads: X Index] [Flags: ZN]
	jsr $DC10.w		; 20 10 DC ; Jump to subroutine at $DC10.w [Writes: Stack Pointer] [Flow: call]
	inc $0E40.w,X		; FE 40 0E ; Increment memory $0E40.w,X [Reads: X Index] [Flags: ZN]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsr $FF78.w		; 20 78 FF ; Jump to subroutine at $FF78.w [Writes: Stack Pointer] [Flow: call]
	lda $0E90.w,X		; BD 90 0E ; Load $0E90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	inc $0F70.w,X		; FE 70 0F ; Increment memory $0F70.w,X [Reads: X Index] [Flags: ZN]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0E90.w,X		; 9E 90 0E ; Store zero to $0E90.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $D88B.w		; 20 8B D8 ; Jump to subroutine at $D88B.w [Writes: Stack Pointer] [Flow: call]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $18		; B0 18 ; Branch if carry set to $B0, $18 [Flow: branch]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F80.w,X		; BD 80 0F ; Load $0F80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9715.w,Y		; 79 15 97 ; Add $9715.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	cmp $971D.w,Y		; D9 1D 97 ; Compare accumulator $971D.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0ED0.w,X		; FE D0 0E ; Increment memory $0ED0.w,X [Reads: X Index] [Flags: ZN]
	jsr $E96C.w		; 20 6C E9 ; Jump to subroutine at $E96C.w [Writes: Stack Pointer] [Flow: call]
	stz $0D40.w,X		; 9E 40 0D ; Store zero to $0D40.w,X [Reads: X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	ora $974197.l,X		; 1F 97 41 97 ; Logical OR long $974197.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	trb $08E4.w		; 1C E4 08 ; Test and reset bits $08E4.w [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsr $EAE8.w		; 20 E8 EA ; Jump to subroutine at $EAE8.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda $001A.w		; AD 1A 00 ; Load $001A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $2D		; B0 2D ; Branch if carry set to $B0, $2D [Flow: branch]
	lda $0EC0.w,X		; BD C0 0E ; Load $0EC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0FFF.w		; 6D FF 0F ; Add $0FFF.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $0FFF.w		; 6D FF 0F ; Add $0FFF.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9715.w,Y		; 79 15 97 ; Add $9715.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	cmp $9719.w,Y		; D9 19 97 ; Compare accumulator $9719.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	inc $0EC0.w,X		; FE C0 0E ; Increment memory $0EC0.w,X [Reads: X Index] [Flags: ZN]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	ldy $0EB0.w,X		; BC B0 0E ; Load Y register $0EB0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $973F.w,Y		; B9 3F 97 ; Load $973F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $807CFF.l,X		; FF FF 7C 80 ; Subtract with carry (long,X) $807CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda [$80.b],Y		; B7 80 ; Load accumulator (long indexed) [$80.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $E41E.w		; 20 1E E4 ; Jump to subroutine at $E41E.w [Writes: Stack Pointer] [Flow: call]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $977E.w,X		; 7D 7E 97 ; Add $977E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0009.w		; 69 09 00 ; Add #$0009.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $9782.w,X		; BD 82 97 ; Load $9782.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Accumulator, Direct Page]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	asl $11.b,X		; 16 11 ; Arithmetic shift left $11.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	nop		; EA ; No operation
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	nop		; EA ; No operation
	sbc $0900F7.l		; EF F7 00 09 ; Subtract with carry (long) $0900F7.l [Writes: Accumulator] [Flags: ZVNC]
	ora ($16.b),Y		; 11 16 ; OR accumulator with memory ($16.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($16.b),Y		; 11 16 ; OR accumulator with memory ($16.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $11.b,X		; 16 11 ; Arithmetic shift left $11.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	nop		; EA ; No operation
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	nop		; EA ; No operation
	sbc $0908F7.l		; EF F7 08 09 ; Subtract with carry (long) $0908F7.l [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0E0D.w		; 0C 0D 0E ; Test and set bits $0E0D.w [Reads: Accumulator] [Flags: Z]
	ora $020100.l		; 0F 00 01 02 ; OR accumulator with memory (long) $020100.l [Writes: Accumulator] [Flags: ZN]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$22.b]		; 07 22 ; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $201DF8.l		; 22 F8 1D 20 ; Jump to subroutine long $201DF8.l [Writes: Stack Pointer] [Flow: call]
	cpx $BDD9.w		; EC D9 BD ; Compare $BDD9.w with X register [Reads: X Index] [Flags: ZNC]
	ldy #$F00E.w		; A0 0E F0 ; Load #$F00E.w into Y register [Writes: Y Index] [Flags: ZN]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp ($89.b,S),Y		; D3 89 ; Compare accumulator (stack relative indirect indexed) ($89.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	jsr $FF78.w		; 20 78 FF ; Jump to subroutine at $FF78.w [Writes: Stack Pointer] [Flow: call]
	jsr $D88B.w		; 20 8B D8 ; Jump to subroutine at $D88B.w [Writes: Stack Pointer] [Flow: call]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $97D8.w,Y		; B9 D8 97 ; Load $97D8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $97E8.w,Y		; B9 E8 97 ; Load $97E8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $97F8.w,Y		; B9 F8 97 ; Load $97F8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $B298.w		; 8D 98 B2 ; Store accumulator to $B298.w [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $27		; D0 27 ; Branch if not equal to $D0, $27 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc $0ED0.w,X		; FE D0 0E ; Increment memory $0ED0.w,X [Reads: X Index] [Flags: ZN]
	ldy $0ED0.w,X		; BC D0 0E ; Load Y register $0ED0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$D006.w		; C0 06 D0 ; Compare #$D006.w with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $9E.b		; 04 9E ; Test and set bits $9E.b [Reads: Accumulator] [Flags: Z]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$20.b		; 69 20 ; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0EB0.w,X		; 7D B0 0E ; Add $0EB0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $26		; D0 26 ; Branch if not equal to $D0, $26 [Flow: branch]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $EA04.w		; 20 04 EA ; Jump to subroutine at $EA04.w [Writes: Stack Pointer] [Flow: call]
	jsl $1DF614.l		; 22 14 F6 1D ; Jump to subroutine long $1DF614.l [Writes: Stack Pointer] [Flow: call]
	cmp $0DE0.w,X		; DD E0 0D ; Compare accumulator $0DE0.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $9BC4.w		; 20 C4 9B ; Jump to subroutine at $9BC4.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsr $FF78.w		; 20 78 FF ; Jump to subroutine at $FF78.w [Writes: Stack Pointer] [Flow: call]
	jsr $D88B.w		; 20 8B D8 ; Jump to subroutine at $D88B.w [Writes: Stack Pointer] [Flow: call]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	ora [$99.b]		; 07 99 ; OR accumulator with memory (long) [$99.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sta $99B1.w,Y		; 99 B1 99 ; Store accumulator to $99B1.w,Y [Reads: Accumulator, Y Index]
	.db $10, $20		; 10 20 ; Branch if plus to $10, $20 [Flow: branch]
	.db $30, $40		; 30 40 ; Branch if minus to $30, $40 [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $23		; D0 23 ; Branch if not equal to $D0, $23 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9903.w,Y		; B9 03 99 ; Load $9903.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9615.w,Y		; B9 15 96 ; Load $9615.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $9617.w,Y		; B9 17 96 ; Load $9617.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $98E0.w,Y		; 79 E0 98 ; Add $98E0.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $0E70.w,X		; BC 70 0E ; Load Y register $0E70.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $48		; D0 48 ; Branch if not equal to $D0, $48 [Flow: branch]
	jsr $EAA4.w		; 20 A4 EA ; Jump to subroutine at $EAA4.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $0DE0.w,X		; DD E0 0D ; Compare accumulator $0DE0.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	.db $80, $31		; 80 31 ; Branch always to $80, $31 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9930.w,Y		; B9 30 99 ; Load $9930.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	inc $0DB0.w,X		; FE B0 0D ; Increment memory $0DB0.w,X [Reads: X Index] [Flags: ZN]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	stz $0DB0.w,X		; 9E B0 0D ; Store zero to $0DB0.w,X [Reads: X Index]
	jsr $EAA4.w		; 20 A4 EA ; Jump to subroutine at $EAA4.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	jsr $CF5A.w		; 20 5A CF ; Jump to subroutine at $CF5A.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $0E90.w,X		; DE 90 0E ; Decrement memory $0E90.w,X [Reads: X Index] [Flags: ZN]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E90.w,X		; 9D 90 0E ; Store accumulator to $0E90.w,X [Reads: Accumulator, X Index]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$07.b		; 09 07 ; Logical OR #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $BC.b		; 02 BC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$BD0D.w		; E0 0D BD ; Compare #$BD0D.w with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $12		; B0 12 ; Branch if carry set to $B0, $12 [Flow: branch]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsr $99EB.w		; 20 EB 99 ; Jump to subroutine at $99EB.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $99A9.w,Y		; B9 A9 99 ; Load $99A9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	inc $0BFD.w,X		; FE FD 0B ; Increment memory $0BFD.w,X [Reads: X Index] [Flags: ZN]
	sbc $03FD.w,X		; FD FD 03 ; Subtract with carry $03FD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $20FF00.l,X		; FF 00 FF 20 ; Subtract with carry (long,X) $20FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$0000.w		; E0 00 00 ; Compare #$0000.w with X register [Reads: X Index] [Flags: ZNC]
	jsr $A9E0.w		; 20 E0 A9 ; Jump to subroutine at $A9E0.w [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $3C		; 30 3C ; Branch if minus to $30, $3C [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,Y		; 99 90 0D ; Store accumulator to $0D90.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,Y		; 99 E0 0D ; Store accumulator to $0DE0.w,Y [Reads: Accumulator, Y Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $99D9.w,X		; 7D D9 99 ; Add $99D9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $9F3C.w,X		; 7D 3C 9F ; Add $9F3C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $99DD.w,X		; 7D DD 99 ; Add $99DD.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $99E1.w,X		; 7D E1 99 ; Add $99E1.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda $99E5.w,X		; BD E5 99 ; Load $99E5.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda $99E7.w,X		; BD E7 99 ; Load $99E7.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $03FF.w,X		; FE FF 03 ; Increment memory $03FF.w,X [Reads: X Index] [Flags: ZN]
	brk $91.b		; 00 91 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $90000B.l,X		; FF 0B 00 90 ; Subtract with carry (long,X) $90000B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000086.l,X		; FF 86 00 00 ; Subtract with carry (long,X) $000086.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8A.b		; 00 8A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $910007.l,X		; FF 07 00 91 ; Subtract with carry (long,X) $910007.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $90000F.l,X		; FF 0F 00 90 ; Subtract with carry (long,X) $90000F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000086.l,X		; FF 86 00 00 ; Subtract with carry (long,X) $000086.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8A.b		; 00 8A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	cop $0B.b		; 02 0B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000090.l,X		; FF 90 00 00 ; Subtract with carry (long,X) $000090.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $91.b		; 00 91 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000084.l,X		; FF 84 00 00 ; Subtract with carry (long,X) $000084.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000090.l,X		; FF 90 00 00 ; Subtract with carry (long,X) $000090.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $91.b		; 00 91 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $800008.l,X		; FF 08 00 80 ; Subtract with carry (long,X) $800008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000088.l,X		; FF 88 00 00 ; Subtract with carry (long,X) $000088.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F7.b		; 02 F7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $800006.l,X		; FF 06 00 80 ; Subtract with carry (long,X) $800006.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $810006.l,X		; FF 06 00 81 ; Subtract with carry (long,X) $810006.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000088.l,X		; FF 88 00 00 ; Subtract with carry (long,X) $000088.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $40.b		; A6 40 ; Load $40.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	sta ($40.b,X)		; 81 40 ; Store accumulator ($40.b,X) [Reads: Accumulator, X Index, Direct Page]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $004088.l,X		; FF 88 40 00 ; Subtract with carry (long,X) $004088.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FBFF.w,X		; FD FF FB ; Subtract with carry $FBFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $008091.l,X		; FF 91 80 00 ; Subtract with carry (long,X) $008091.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $900003.l,X		; FF 03 00 90 ; Subtract with carry (long,X) $900003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000086.l,X		; FF 86 00 00 ; Subtract with carry (long,X) $000086.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $0B.b		; 02 0B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F5.b		; 00 F5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000090.l,X		; FF 90 00 00 ; Subtract with carry (long,X) $000090.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000091.l,X		; FF 91 00 00 ; Subtract with carry (long,X) $000091.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000084.l,X		; FF 84 00 00 ; Subtract with carry (long,X) $000084.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FDFF.w,X		; FE FF FD ; Increment memory $FDFF.w,X [Reads: X Index] [Flags: ZN]
	sbc $000080.l,X		; FF 80 00 00 ; Subtract with carry (long,X) $000080.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000081.l,X		; FF 81 00 00 ; Subtract with carry (long,X) $000081.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000088.l,X		; FF 88 00 00 ; Subtract with carry (long,X) $000088.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $0A.b		; 02 0A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004080.l,X		; FF 80 40 00 ; Subtract with carry (long,X) $004080.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004081.l,X		; FF 81 40 00 ; Subtract with carry (long,X) $004081.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004088.l,X		; FF 88 40 00 ; Subtract with carry (long,X) $004088.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	stx $84.b		; 86 84 ; Store X register to $84.b [Reads: X Index]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$9A30.w		; 69 30 9A ; Add #$9A30.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	lda $0F00.w,X		; BD 00 0F ; Load $0F00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $3C		; D0 3C ; Branch if not equal to $D0, $3C [Flow: branch]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	ldy #$B103.w		; A0 03 B1 ; Load #$B103.w into Y register [Writes: Y Index] [Flags: ZN]
	sta ($29.b)		; 92 29 ; Store accumulator (indirect) ($29.b) [Reads: Accumulator, Direct Page]
	cop $D0.b		; 02 D0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $EC		; 10 EC ; Branch if plus to $10, $EC [Flow: branch]
	ldy $0DC0.w,X		; BC C0 0D ; Load Y register $0DC0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $9BB0.w,Y		; B9 B0 9B ; Load $9BB0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $9BBC.w,X		; BD BC 9B ; Load $9BBC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $9BC0.w,X		; 1D C0 9B ; OR accumulator with memory $9BC0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jmp $DC64.w		; 4C 64 DC ; Jump to $DC64.w [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: ZNC]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9C20.w,Y		; 79 20 9C ; Add $9C20.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $9E02.w		; 20 02 9E ; Jump to subroutine at $9E02.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsr $FF78.w		; 20 78 FF ; Jump to subroutine at $FF78.w [Writes: Stack Pointer] [Flow: call]
	jsr $D88B.w		; 20 8B D8 ; Jump to subroutine at $D88B.w [Writes: Stack Pointer] [Flow: call]
	stz $0DA0.w,X		; 9E A0 0D ; Store zero to $0DA0.w,X [Reads: X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	eor $9CA99C.l,X		; 5F 9C A9 9C ; Exclusive OR accumulator with memory (long,X) $9CA99C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	jsr $4030.w		; 20 30 40 ; Jump to subroutine at $4030.w [Writes: Stack Pointer] [Flow: call]
	.db $50, $BD		; 50 BD ; Branch if overflow clear to $50, $BD [Flow: branch]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	.db $D0, $3D		; D0 3D ; Branch if not equal to $D0, $3D [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9C5B.w,Y		; B9 5B 9C ; Load $9C5B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	dec $0D90.w,X		; DE 90 0D ; Decrement memory $0D90.w,X [Reads: X Index] [Flags: ZN]
	.db $10, $1C		; 10 1C ; Branch if plus to $10, $1C [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	inc $0DB0.w,X		; FE B0 0D ; Increment memory $0DB0.w,X [Reads: X Index] [Flags: ZN]
	jsr $EAE8.w		; 20 E8 EA ; Jump to subroutine at $EAE8.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	jsr $EAD1.w		; 20 D1 EA ; Jump to subroutine at $EAD1.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and #$18.b		; 29 18 ; Logical AND #$18.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	inc $0DA0.w,X		; FE A0 0D ; Increment memory $0DA0.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0DA0.w,X		; FE A0 0D ; Increment memory $0DA0.w,X [Reads: X Index] [Flags: ZN]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$03.b		; 49 03 ; Exclusive OR #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $9C4B.w,Y		; B9 4B 9C ; Load $9C4B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $9C53.w,Y		; B9 53 9C ; Load $9C53.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	jsr $E96C.w		; 20 6C E9 ; Jump to subroutine at $E96C.w [Writes: Stack Pointer] [Flow: call]
	lda $0F80.w,X		; BD 80 0F ; Load $0F80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $19		; [PATTERN: Memory clearing operation] 10 19 ; Branch if plus to $10, $19 [Flow: branch]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	stz $0DB0.w,X		; 9E B0 0D ; Store zero to $0DB0.w,X [Reads: X Index]
	lda #$3F.b		; A9 3F ; Load #$3F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $00008F.l,X		; FF 8F 00 00 ; Subtract with carry (long,X) $00008F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00009F.l,X		; FF 9F 00 00 ; Subtract with carry (long,X) $00009F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8C0000.l,X		; FF 00 00 8C ; Subtract with carry (long,X) $8C0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00002B.l,X		; FF 2B 00 00 ; Subtract with carry (long,X) $00002B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00003B.l,X		; FF 3B 00 00 ; Subtract with carry (long,X) $00003B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $280000.l,X		; FF 00 00 28 ; Subtract with carry (long,X) $280000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $3CFFF8.l,X		; FF F8 FF 3C ; Subtract with carry (long,X) $3CFFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00003D.l,X		; FF 3D 00 00 ; Subtract with carry (long,X) $00003D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AA0000.l,X		; FF 00 00 AA ; Subtract with carry (long,X) $AA0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AB.b		; 00 AB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $3EFFF8.l,X		; FF F8 FF 3E ; Subtract with carry (long,X) $3EFFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00003F.l,X		; FF 3F 00 00 ; Subtract with carry (long,X) $00003F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AD0000.l,X		; FF 00 00 AD ; Subtract with carry (long,X) $AD0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $9FFFF8.l,X		; FF F8 FF 9F ; Subtract with carry (long,X) $9FFFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $00408F.l,X		; FF 8F 40 00 ; Subtract with carry (long,X) $00408F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8D0000.l,X		; FF 00 00 8D ; Subtract with carry (long,X) $8D0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $0040.w		; 8C 40 00 ; Store Y register to $0040.w [Reads: Y Index]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $3BFFF8.l,X		; FF F8 FF 3B ; Subtract with carry (long,X) $3BFFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $00402B.l,X		; FF 2B 40 00 ; Subtract with carry (long,X) $00402B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $290000.l,X		; FF 00 00 29 ; Subtract with carry (long,X) $290000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $00403D.l,X		; FF 3D 40 00 ; Subtract with carry (long,X) $00403D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00403C.l,X		; FF 3C 40 00 ; Subtract with carry (long,X) $00403C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AB0000.l,X		; FF 00 00 AB ; Subtract with carry (long,X) $AB0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $00403F.l,X		; FF 3F 40 00 ; Subtract with carry (long,X) $00403F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00403E.l,X		; FF 3E 40 00 ; Subtract with carry (long,X) $00403E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AE0000.l,X		; FF 00 00 AE ; Subtract with carry (long,X) $AE0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0040.w		; AD 40 00 ; Load $0040.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$9D02.w		; 69 02 9D ; Add #$9D02.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	jmp $DC64.w		; 4C 64 DC ; Jump to $DC64.w [Flow: jump]
	jsr $9EE5.w		; 20 E5 9E ; Jump to subroutine at $9EE5.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsr $FF78.w		; 20 78 FF ; Jump to subroutine at $FF78.w [Writes: Stack Pointer] [Flow: call]
	jsr $D88B.w		; 20 8B D8 ; Jump to subroutine at $D88B.w [Writes: Stack Pointer] [Flow: call]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	mvp $5D,$9E		; 44 9E 5D ; Move block positive $5D,$9E [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	stz $F0BD.w,X		; 9E BD F0 ; Store zero to $F0BD.w,X [Reads: X Index]
	ora $13D0.w		; 0D D0 13 ; Logical OR $13D0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $EA04.w		; 20 04 EA ; Jump to subroutine at $EA04.w [Writes: Stack Pointer] [Flow: call]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$14.b		; 69 14 ; Add #$14.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $CF5D.w		; 20 5D CF ; Jump to subroutine at $CF5D.w [Writes: Stack Pointer] [Flow: call]
	jsr $E96C.w		; 20 6C E9 ; Jump to subroutine at $E96C.w [Writes: Stack Pointer] [Flow: call]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $0B		; [PATTERN: Memory clearing operation] 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $000026.l,X		; FF 26 00 00 ; Subtract with carry (long,X) $000026.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000027.l,X		; FF 27 00 00 ; Subtract with carry (long,X) $000027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000036.l,X		; FF 36 00 00 ; Subtract with carry (long,X) $000036.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000037.l,X		; FF 37 00 00 ; Subtract with carry (long,X) $000037.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004027.l,X		; FF 27 40 00 ; Subtract with carry (long,X) $004027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004026.l,X		; FF 26 40 00 ; Subtract with carry (long,X) $004026.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $004037.l,X		; FF 37 40 00 ; Subtract with carry (long,X) $004037.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004036.l,X		; FF 36 40 00 ; Subtract with carry (long,X) $004036.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$9E85.w		; 69 85 9E ; Add #$9E85.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	jmp $DC64.w		; 4C 64 DC ; Jump to $DC64.w [Flow: jump]
	jsr $A1F9.w		; 20 F9 A1 ; Jump to subroutine at $A1F9.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	lda $0EA0.w,X		; BD A0 0E ; Load $0EA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	jsr $9FE1.w		; 20 E1 9F ; Jump to subroutine at $9FE1.w [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	jsr $FF78.w		; 20 78 FF ; Jump to subroutine at $FF78.w [Writes: Stack Pointer] [Flow: call]
	jsr $D88B.w		; 20 8B D8 ; Jump to subroutine at $D88B.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	ldy $299F.w,X		; BC 9F 29 ; Load Y register $299F.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldy #$9F4A.w		; A0 4A 9F ; Load #$9F4A.w into Y register [Writes: Y Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$07.b		; 09 07 ; Logical OR #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $08.b,S		; 03 08 ; OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc ($0D.b,S),Y		; F3 0D ; Subtract with carry (stack relative indirect indexed) ($0D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F5F500.l,X		; FF 00 F5 F5 ; Subtract with carry (long,X) $F5F500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $4A		; D0 4A ; Branch if not equal to $D0, $4A [Flow: branch]
	lda #$4A.b		; A9 4A ; Load #$4A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $41		; 30 41 ; Branch if minus to $30, $41 [Flow: branch]
	jsl $06AD50.l		; 22 50 AD 06 ; Jump to subroutine long $06AD50.l [Writes: Stack Pointer] [Flow: call]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,Y		; 99 00 0E ; Store accumulator to $0E00.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9F38.w,X		; 7D 38 9F ; Add $9F38.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $9F3C.w,X		; 7D 3C 9F ; Add $9F3C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9F40.w,X		; 7D 40 9F ; Add $9F40.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$FF.b		; 69 FF ; Add #$FF.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda $9F44.w,X		; BD 44 9F ; Load $9F44.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda $9F46.w,X		; BD 46 9F ; Load $9F46.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,Y		; 99 80 0F ; Store accumulator to $0F80.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $9F30.w,Y		; B9 30 9F ; Load $9F30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $63		; D0 63 ; Branch if not equal to $D0, $63 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0DB0.w,X		; FE B0 0D ; Increment memory $0DB0.w,X [Reads: X Index] [Flags: ZN]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	stz $0DB0.w,X		; 9E B0 0D ; Store zero to $0DB0.w,X [Reads: X Index]
	jsr $EAA4.w		; 20 A4 EA ; Jump to subroutine at $EAA4.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $A004.w		; 20 04 A0 ; Jump to subroutine at $A004.w [Writes: Stack Pointer] [Flow: call]
	asl $0D50.w,X		; 1E 50 0D ; Arithmetic shift left $0D50.w,X [Reads: X Index] [Flags: ZNC]
	asl $0D40.w,X		; 1E 40 0D ; Arithmetic shift left $0D40.w,X [Reads: X Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9FEF.w,Y		; B9 EF 9F ; Load $9FEF.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$60.b		; 69 60 ; Add #$60.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $9FB6.w,Y		; B9 B6 9F ; Load $9FB6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $9FB8.w,Y		; B9 B8 9F ; Load $9FB8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $0D90.w,X		; DE 90 0D ; Decrement memory $0D90.w,X [Reads: X Index] [Flags: ZN]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	.db $80, $DD		; 80 DD ; Branch always to $80, $DD [Flow: branch]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $A025.w,Y		; B9 25 A0 ; Load $A025.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($FF.b,S),Y		; F3 FF ; Subtract with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $24FFFB.l,X		; FF FB FF 24 ; Subtract with carry (long,X) $24FFFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004624.l,X		; FF 24 46 00 ; Subtract with carry (long,X) $004624.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000600.l,X		; FF 00 06 00 ; Subtract with carry (long,X) $000600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $24FFFB.l,X		; FF FB FF 24 ; Subtract with carry (long,X) $24FFFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004624.l,X		; FF 24 46 00 ; Subtract with carry (long,X) $004624.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $24FFFA.l,X		; FF FA FF 24 ; Subtract with carry (long,X) $24FFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004624.l,X		; FF 24 46 00 ; Subtract with carry (long,X) $004624.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000604.l,X		; FF 04 06 00 ; Subtract with carry (long,X) $000604.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $24FFFA.l,X		; FF FA FF 24 ; Subtract with carry (long,X) $24FFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004624.l,X		; FF 24 46 00 ; Subtract with carry (long,X) $004624.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000604.l,X		; FF 04 06 00 ; Subtract with carry (long,X) $000604.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $02FFF3.l,X		; FF F3 FF 02 ; Subtract with carry (long,X) $02FFF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00060C.l,X		; FF 0C 06 00 ; Subtract with carry (long,X) $00060C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $02FFF4.l,X		; FF F4 FF 02 ; Subtract with carry (long,X) $02FFF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00060E.l,X		; FF 0E 06 00 ; Subtract with carry (long,X) $00060E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004602.l,X		; FF 02 46 00 ; Subtract with carry (long,X) $004602.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00460C.l,X		; FF 0C 46 00 ; Subtract with carry (long,X) $00460C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004602.l,X		; FF 02 46 00 ; Subtract with carry (long,X) $004602.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00460E.l,X		; FF 0E 46 00 ; Subtract with carry (long,X) $00460E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $F3.b		; 02 F3 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $6EFFF0.l,X		; FF F0 FF 6E ; Subtract with carry (long,X) $6EFFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000600.l,X		; FF 00 06 00 ; Subtract with carry (long,X) $000600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $20FFFB.l,X		; FF FB FF 20 ; Subtract with carry (long,X) $20FFFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004624.l,X		; FF 24 46 00 ; Subtract with carry (long,X) $004624.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $24FFFB.l,X		; FF FB FF 24 ; Subtract with carry (long,X) $24FFFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004620.l,X		; FF 20 46 00 ; Subtract with carry (long,X) $004620.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000604.l,X		; FF 04 06 00 ; Subtract with carry (long,X) $000604.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $0D.b		; 02 0D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00056E.l,X		; FF 6E 05 00 ; Subtract with carry (long,X) $00056E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $6EFFF5.l,X		; FF F5 FF 6E ; Subtract with carry (long,X) $6EFFF5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $02FFF3.l,X		; FF F3 FF 02 ; Subtract with carry (long,X) $02FFF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00060C.l,X		; FF 0C 06 00 ; Subtract with carry (long,X) $00060C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F5.b		; 00 F5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00056E.l,X		; FF 6E 05 00 ; Subtract with carry (long,X) $00056E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004602.l,X		; FF 02 46 00 ; Subtract with carry (long,X) $004602.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00460C.l,X		; FF 0C 46 00 ; Subtract with carry (long,X) $00460C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $65.b		; 02 65 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$A085.w		; A0 85 A0 ; Load #$A085.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $A0.b		; C5 A0 ; Compare $A0.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc $A0.b		; E5 A0 ; Subtract $A0.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $15A0.w,X		; FD A0 15 ; Subtract with carry $15A0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($2D.b,X)		; A1 2D ; Load accumulator ($2D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($45.b,X)		; A1 45 ; Load accumulator ($45.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($6D.b,X)		; A1 6D ; Load accumulator ($6D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($95.b,X)		; A1 95 ; Load accumulator ($95.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($B5.b,X)		; A1 B5 ; Load accumulator ($B5.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($04.b,X)		; A1 04 ; Load accumulator ($04.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $BD.b		; 04 BD ; Test and set bits $BD.b [Reads: Accumulator] [Flags: Z]
	cpy #$480D.w		; C0 0D 48 ; Compare #$480D.w with Y register [Reads: Y Index] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $A1D5.w,Y		; B9 D5 A1 ; Load $A1D5.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $A1ED.w,Y		; B9 ED A1 ; Load $A1ED.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	jmp $DC64.w		; 4C 64 DC ; Jump to $DC64.w [Flow: jump]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $0E10.w		; 0E 10 0E ; Arithmetic shift left $0E10.w [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F2.b,X		; F5 F2 ; Subtract $F2.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $F2		; F0 F2 ; Branch if equal to $F0, $F2 [Flow: branch]
	sbc $F8.b,X		; F5 F8 ; Subtract $F8.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $F2		; F0 F2 ; Branch if equal to $F0, $F2 [Flow: branch]
	sbc $F8.b,X		; F5 F8 ; Subtract $F8.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $0E10.w		; 0E 10 0E ; Arithmetic shift left $0E10.w [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F2.b,X		; F5 F2 ; Subtract $F2.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$0820.w		; E0 20 08 ; Compare #$0820.w with X register [Reads: X Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $32		; F0 32 ; Branch if equal to $F0, $32 [Flow: branch]
	.db $10, $2B		; 10 2B ; Branch if plus to $10, $2B [Flow: branch]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	sta $0E30.w,X		; 9D 30 0E ; Store accumulator to $0E30.w,X [Reads: Accumulator, X Index]
	jsr $E4AB.w		; [PATTERN: Memory clearing operation] 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	stz $0E30.w,X		; 9E 30 0E ; Store zero to $0E30.w,X [Reads: X Index]
	lda $0FA5.w		; AD A5 0F ; Load $0FA5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	stz $0DB0.w,X		; 9E B0 0D ; Store zero to $0DB0.w,X [Reads: X Index]
	stz $0BA0.w,X		; 9E A0 0B ; Store zero to $0BA0.w,X [Reads: X Index]
	jmp $A342.w		; 4C 42 A3 ; Jump to $A342.w [Flow: jump]
	sta $0BA0.w,X		; 9D A0 0B ; Store accumulator to $0BA0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0EB0.w,X		; FE B0 0E ; Increment memory $0EB0.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $DCEF.w		; 20 EF DC ; Jump to subroutine at $DCEF.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $0F		; 80 0F ; Branch always to $80, $0F [Flow: branch]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	jsr $DC10.w		; 20 10 DC ; Jump to subroutine at $DC10.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	jsr $A3DC.w		; 20 DC A3 ; Jump to subroutine at $A3DC.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsr $FF78.w		; 20 78 FF ; Jump to subroutine at $FF78.w [Writes: Stack Pointer] [Flow: call]
	lda $0E10.w,X		; BD 10 0E ; Load $0E10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $66		; D0 66 ; Branch if not equal to $D0, $66 [Flow: branch]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	sta $0BA0.w,X		; 9D A0 0B ; Store accumulator to $0BA0.w,X [Reads: Accumulator, X Index]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $A239.w,Y		; B9 39 A2 ; Load $A239.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	jsr $E932.w		; 20 32 E9 ; Jump to subroutine at $E932.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsr $A34E.w		; 20 4E A3 ; Jump to subroutine at $A34E.w [Writes: Stack Pointer] [Flow: call]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $D88B.w		; 20 8B D8 ; Jump to subroutine at $D88B.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $A213.w,Y		; 79 13 A2 ; Add $A213.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0DA0.w,X		; FE A0 0D ; Increment memory $0DA0.w,X [Reads: X Index] [Flags: ZN]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $A215.w,Y		; B9 15 A2 ; Load $A215.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $A225.w,Y		; B9 25 A2 ; Load $A225.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0DF0.w,X		; 1D F0 0D ; OR accumulator with memory $0DF0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	ldy $0DB0.w,X		; BC B0 0D ; Load Y register $0DB0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $A23B.w,Y		; 79 3B A2 ; Add $A23B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $17		; F0 17 ; Branch if equal to $F0, $17 [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	.db $80, $23		; 80 23 ; Branch always to $80, $23 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $A23B.w,Y		; 79 3B A2 ; Add $A23B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$80.b		; 69 80 ; Add #$80.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	lda #$23.b		; A9 23 ; Load #$23.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $3B		; 30 3B ; Branch if minus to $30, $3B [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda #$33.b		; A9 33 ; Load #$33.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,Y		; 99 60 0E ; Store accumulator to $0E60.w,Y [Reads: Accumulator, Y Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F60.w,Y		; 99 60 0F ; Store accumulator to $0F60.w,Y [Reads: Accumulator, Y Index]
	sta $0DB0.w,Y		; 99 B0 0D ; Store accumulator to $0DB0.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0FB5.w		; AE B5 0F ; Load $0FB5.w into X register [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $A235.w,X		; 7D 35 A2 ; Add $A235.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $A237.w,X		; BD 37 A2 ; Load $A237.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E10.w,Y		; 99 10 0E ; Store accumulator to $0E10.w,Y [Reads: Accumulator, Y Index]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,Y		; 99 00 0E ; Store accumulator to $0E00.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dec $0FB5.w		; CE B5 0F ; Decrement $0FB5.w [Flags: ZN]
	.db $10, $B8		; 10 B8 ; Branch if plus to $10, $B8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $000000.l		; 22 00 00 00 ; Jump to subroutine long $000000.l [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$A39C.w		; 69 9C A3 ; Add #$A39C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	jmp $DC64.w		; 4C 64 DC ; Jump to $DC64.w [Flow: jump]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$0A0D.w		; E0 0D 0A ; Compare #$0A0D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $A3F9.w,Y		; B9 F9 A3 ; Load $A3F9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $A401.w,Y		; 19 01 A4 ; OR accumulator with memory $A401.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $2A		; D0 2A ; Branch if not equal to $D0, $2A [Flow: branch]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $01.b		; C5 01 ; Compare $01.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $0D50.w,X		; BC 50 0D ; Load Y register $0D50.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $0D40.w,X		; BC 40 0D ; Load Y register $0D40.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	jsr $DC10.w		; 20 10 DC ; Jump to subroutine at $DC10.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $A4F2.w		; 20 F2 A4 ; Jump to subroutine at $A4F2.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	jsr $FF78.w		; 20 78 FF ; Jump to subroutine at $FF78.w [Writes: Stack Pointer] [Flow: call]
	jsr $D88B.w		; 20 8B D8 ; Jump to subroutine at $D88B.w [Writes: Stack Pointer] [Flow: call]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0C		; [PATTERN: Memory clearing operation] F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stz $0D50.w,X		; 9E 50 0D ; Store zero to $0D50.w,X [Reads: X Index]
	stz $0D40.w,X		; 9E 40 0D ; Store zero to $0D40.w,X [Reads: X Index]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr $E991.w		; 20 91 E9 ; Jump to subroutine at $E991.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0DA0.w,X		; 9D A0 0D ; Store accumulator to $0DA0.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $0D80.w,X		; 3D 80 0D ; AND accumulator with memory $0D80.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $0DA0.w,X		; DD A0 0D ; Compare accumulator $0DA0.w,X [Reads: X Index] [Flags: ZNC]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	inc $0D40.w,X		; FE 40 0D ; Increment memory $0D40.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	dec $0D40.w,X		; DE 40 0D ; Decrement memory $0D40.w,X [Reads: X Index] [Flags: ZN]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $0DB0.w,X		; DD B0 0D ; Compare accumulator $0DB0.w,X [Reads: X Index] [Flags: ZNC]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	inc $0D50.w,X		; FE 50 0D ; Increment memory $0D50.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	dec $0D50.w,X		; DE 50 0D ; Decrement memory $0D50.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($40FF.w,X)		; FC FF 40 ; Jump to subroutine indirect indexed ($40FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $42.b		; 00 42 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000140.l,X		; FF 40 01 00 ; Subtract with carry (long,X) $000140.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $BD.b		; 02 BD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$0A0D.w		; C0 0D 0A ; Compare #$0A0D.w with Y register [Reads: Y Index] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$D2.b		; 69 D2 ; Add #$D2.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$A4.b		; A9 A4 ; Load #$A4.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	jmp $DC4C.w		; 4C 4C DC ; Jump to $DC4C.w [Flow: jump]
	jsl $1DF395.l		; 22 95 F3 1D ; Jump to subroutine long $1DF395.l [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsr $F145.w		; 20 45 F1 ; Jump to subroutine at $F145.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $20		; 90 20 ; Branch if carry clear to $90, $20 [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $7EF36E.l		; AF 6E F3 7E ; Load long $7EF36E.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	ldy #$8C1D.w		; A0 1D 8C ; Load #$8C1D.w into Y register [Writes: Y Index] [Flags: ZN]
	and $6E8F01.l		; 2F 01 8F 6E ; AND accumulator with memory (long) $6E8F01.l [Writes: Accumulator] [Flags: ZN]
	sbc ($7E.b,S),Y		; F3 7E ; Subtract with carry (stack relative indirect indexed) ($7E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsl $1DC778.l		; 22 78 C7 1D ; Jump to subroutine long $1DC778.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc $08FFF8.l,X		; FF F8 FF 08 ; Subtract with carry (long,X) $08FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $08FFF8.l,X		; FF F8 FF 08 ; Subtract with carry (long,X) $08FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $08FFF8.l,X		; FF F8 FF 08 ; Subtract with carry (long,X) $08FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $08FFF8.l,X		; FF F8 FF 08 ; Subtract with carry (long,X) $08FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EA.b		; 00 EA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $07FFF9.l,X		; FF F9 FF 07 ; Subtract with carry (long,X) $07FFF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EA.b		; 00 EA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $07FFF9.l,X		; FF F9 FF 07 ; Subtract with carry (long,X) $07FFF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EA.b		; 00 EA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $07FFF9.l,X		; FF F9 FF 07 ; Subtract with carry (long,X) $07FFF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EA.b		; 00 EA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $07FFF9.l,X		; FF F9 FF 07 ; Subtract with carry (long,X) $07FFF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E8FFE8.l,X		; FF E8 FF E8 ; Subtract with carry (long,X) $E8FFE8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F8FFE8.l,X		; FF E8 FF F8 ; Subtract with carry (long,X) $F8FFE8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F8FFF8.l,X		; FF F8 FF F8 ; Subtract with carry (long,X) $F8FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $08FFF8.l,X		; FF F8 FF 08 ; Subtract with carry (long,X) $08FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EA.b		; 00 EA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $EAFFEA.l,X		; FF EA FF EA ; Subtract with carry (long,X) $EAFFEA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F9FFEA.l,X		; FF EA FF F9 ; Subtract with carry (long,X) $F9FFEA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F9FFF9.l,X		; FF F9 FF F9 ; Subtract with carry (long,X) $F9FFF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $07FFF9.l,X		; FF F9 FF 07 ; Subtract with carry (long,X) $07FFF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $50, $0D		; 50 0D ; Branch if overflow clear to $50, $0D [Flow: branch]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $A5C0.w,Y		; 19 C0 A5 ; OR accumulator with memory $A5C0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsr $DC10.w		; 20 10 DC ; Jump to subroutine at $DC10.w [Writes: Stack Pointer] [Flow: call]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	lda #$3D.b		; A9 3D ; Load #$3D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	jsl $0DB818.l		; 22 18 B8 0D ; Jump to subroutine long $0DB818.l [Writes: Stack Pointer] [Flow: call]
	inc $0E30.w,X		; FE 30 0E ; Increment memory $0E30.w,X [Reads: X Index] [Flags: ZN]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	sta $0BA0.w,X		; 9D A0 0B ; Store accumulator to $0BA0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	jsr $A6E5.w		; 20 E5 A6 ; Jump to subroutine at $A6E5.w [Writes: Stack Pointer] [Flow: call]
	jsr $A727.w		; 20 27 A7 ; Jump to subroutine at $A727.w [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $A84C.w		; 20 4C A8 ; Jump to subroutine at $A84C.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$10.b		; 09 10 ; Logical OR #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	sta $0BA0.w,X		; 9D A0 0B ; Store accumulator to $0BA0.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $F145.w		; 20 45 F1 ; Jump to subroutine at $F145.w [Writes: Stack Pointer] [Flow: call]
	jmp $A6E2.w		; 4C E2 A6 ; Jump to $A6E2.w [Flow: jump]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$23.b		; C9 23 ; Compare #$23.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	jsr $A7D3.w		; 20 D3 A7 ; Jump to subroutine at $A7D3.w [Writes: Stack Pointer] [Flow: call]
	lda $0EA0.w,X		; BD A0 0E ; Load $0EA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	stz $0EA0.w,X		; 9E A0 0E ; Store zero to $0EA0.w,X [Reads: X Index]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$23.b		; C9 23 ; Compare #$23.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	inc $0DA0.w,X		; FE A0 0D ; Increment memory $0DA0.w,X [Reads: X Index] [Flags: ZN]
	jsr $A84C.w		; 20 4C A8 ; Jump to subroutine at $A84C.w [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	jsr $F2B4.w		; 20 B4 F2 ; Jump to subroutine at $F2B4.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $3C		; F0 3C ; Branch if equal to $F0, $3C [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $A6FC.w		; 4C FC A6 ; Jump to $A6FC.w [Flow: jump]
	jmp $A78E.w		; 4C 8E A7 ; Jump to $A78E.w [Flow: jump]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $26		; D0 26 ; Branch if not equal to $D0, $26 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $05AAE4.l,X		; BF E4 AA 05 ; Load long $05AAE4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda $05AAF4.l,X		; BF F4 AA 05 ; Load long $05AAF4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	stz $0DC0.w,X		; 9E C0 0D ; Store zero to $0DC0.w,X [Reads: X Index]
	jsr $F228.w		; 20 28 F2 ; Jump to subroutine at $F228.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	jsr $A7BB.w		; 20 BB A7 ; Jump to subroutine at $A7BB.w [Writes: Stack Pointer] [Flow: call]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	jsr $E96C.w		; 20 6C E9 ; Jump to subroutine at $E96C.w [Writes: Stack Pointer] [Flow: call]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $15		; 10 15 ; Branch if plus to $10, $15 [Flow: branch]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	.db $80, $B1		; 80 B1 ; Branch always to $80, $B1 [Flow: branch]
	jsr $A6AD.w		; 20 AD A6 ; Jump to subroutine at $A6AD.w [Writes: Stack Pointer] [Flow: call]
	jsr $A7BB.w		; 20 BB A7 ; Jump to subroutine at $A7BB.w [Writes: Stack Pointer] [Flow: call]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $E991.w		; 20 91 E9 ; Jump to subroutine at $E991.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	jsr $A6E2.w		; 20 E2 A6 ; Jump to subroutine at $A6E2.w [Writes: Stack Pointer] [Flow: call]
	jsr $E41E.w		; 20 1E E4 ; Jump to subroutine at $E41E.w [Writes: Stack Pointer] [Flow: call]
	jsl $06A72F.l		; 22 2F A7 06 ; Jump to subroutine long $06A72F.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$18.b		; 29 18 ; Logical AND #$18.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $4E		; F0 4E ; Branch if equal to $F0, $4E [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$A003.w		; A2 03 A0 ; Load #$A003.w into X register [Writes: X Index] [Flags: ZN]
	brk $DA.b		; 00 DA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06A7C3.l,X		; 7F C3 A7 06 ; Add long $06A7C3.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06A7CB.l,X		; 7F CB A7 06 ; Add long $06A7CB.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$83.b		; A9 83 ; Load #$83.b into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $B8		; 10 B8 ; Branch if plus to $10, $B8 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $A7B8.w		; 20 B8 A7 ; Jump to subroutine at $A7B8.w [Writes: Stack Pointer] [Flow: call]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	jsr $D9D5.w		; 20 D5 D9 ; Jump to subroutine at $D9D5.w [Writes: Stack Pointer] [Flow: call]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E26E.w		; 20 6E E2 ; Jump to subroutine at $E26E.w [Writes: Stack Pointer] [Flow: call]
	jsr $E26E.w		; 20 6E E2 ; Jump to subroutine at $E26E.w [Writes: Stack Pointer] [Flow: call]
	jsr $A84C.w		; 20 4C A8 ; Jump to subroutine at $A84C.w [Writes: Stack Pointer] [Flow: call]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	jmp $A70C.w		; 4C 0C A7 ; Jump to $A70C.w [Flow: jump]
	jmp $A6E2.w		; 4C E2 A6 ; Jump to $A6E2.w [Flow: jump]
	jsr $E96C.w		; 20 6C E9 ; Jump to subroutine at $E96C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsl $06E496.l		; 22 96 E4 06 ; Jump to subroutine long $06E496.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $02FF.w,X		; FD FF 02 ; Subtract with carry $02FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F9FFF9.l,X		; FF F9 FF F9 ; Subtract with carry (long,X) $F9FFF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $8AFFFB.l,X		; FF FB FF 8A ; Subtract with carry (long,X) $8AFFFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $1B.b		; 05 1B ; Logical OR $1B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $76		; D0 76 ; Branch if not equal to $D0, $76 [Flow: branch]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$220A.w		; A0 0A 22 ; Load #$220A.w into Y register [Writes: Y Index] [Flags: ZN]
	eor $301DF6.l,X		; 5F F6 1D 30 ; Exclusive OR accumulator with memory (long,X) $301DF6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($BBDA.w)		; 6C DA BB ; Jump indirect to ($BBDA.w) [Flow: jump]
	lda #$1E.b		; A9 1E ; Load #$1E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,Y		; 99 B0 0D ; Store accumulator to $0DB0.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $24		; F0 24 ; Branch if equal to $F0, $24 [Flow: branch]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $E2.b		; 65 E2 ; Add $E2.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $E3.b		; A5 E3 ; Load $E3.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $9F3C.w,X		; BD 3C 9F ; Load $9F3C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $E8.b		; 65 E8 ; Add $E8.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $E9.b		; A5 E9 ; Load $E9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $E8.b		; 65 E8 ; Add $E8.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $E9.b		; A5 E9 ; Load $E9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $9F3C.w,X		; BD 3C 9F ; Load $9F3C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $E2.b		; 65 E2 ; Add $E2.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $E3.b		; A5 E3 ; Load $E3.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $EA04.w		; 20 04 EA ; Jump to subroutine at $EA04.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1AFC31.l		; 22 31 FC 1A ; Jump to subroutine long $1AFC31.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pea $000C.w		; F4 0C 00 ; Push absolute address $000C.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $10F0.w		; 0C F0 10 ; Test and set bits $10F0.w [Reads: Accumulator] [Flags: Z]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $A91D.w		; 4C 1D A9 ; Jump to $A91D.w [Flow: jump]
	jsr $AA48.w		; 20 48 AA ; Jump to subroutine at $AA48.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	stz $0DC0.w,X		; 9E C0 0D ; Store zero to $0DC0.w,X [Reads: X Index]
	jsr $EAA4.w		; 20 A4 EA ; Jump to subroutine at $EAA4.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$30.b		; 69 30 ; Add #$30.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$60.b		; C9 60 ; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $38		; B0 38 ; Branch if carry set to $B0, $38 [Flow: branch]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$20.b		; 69 20 ; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $2F		; B0 2F ; Branch if carry set to $B0, $2F [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $A85C.w,Y		; B9 5C A8 ; Load $A85C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $A860.w,Y		; B9 60 A8 ; Load $A860.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	jsr $F2B4.w		; 20 B4 F2 ; Jump to subroutine at $F2B4.w [Writes: Stack Pointer] [Flow: call]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $A858.w,Y		; B9 58 A8 ; Load $A858.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$3E.b		; C9 3E ; Compare #$3E.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $7EF354.l		; AF 54 F3 7E ; Load long $7EF354.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	jsl $06AA0C.l		; 22 0C AA 06 ; Jump to subroutine long $06AA0C.l [Writes: Stack Pointer] [Flow: call]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $3C		; F0 3C ; Branch if equal to $F0, $3C [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $0E20.w,X		; BC 20 0E ; Load Y register $0E20.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$D017.w		; C0 17 D0 ; Compare #$D017.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora ($1A.b,X)		; 01 1A ; Logical OR ($1A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	lda #$EC.b		; A9 EC ; Load #$EC.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	lsr $0F50.w,X		; 5E 50 0F ; Logical shift right $0F50.w,X [Reads: X Index] [Flags: ZNC]
	asl $0F50.w,X		; 1E 50 0F ; Arithmetic shift left $0F50.w,X [Reads: X Index] [Flags: ZNC]
	stz $0DC0.w,X		; 9E C0 0D ; Store zero to $0DC0.w,X [Reads: X Index]
	lda #$3E.b		; A9 3E ; Load #$3E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $19		; 30 19 ; Branch if minus to $30, $19 [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda $0E40.w,Y		; B9 40 0E ; Load $0E40.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E10.w,Y		; 99 10 0E ; Store accumulator to $0E10.w,Y [Reads: Accumulator, Y Index]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	sta $0D80.w,Y		; 99 80 0D ; Store accumulator to $0D80.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $DC10.w		; 20 10 DC ; Jump to subroutine at $DC10.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsr $FF78.w		; 20 78 FF ; Jump to subroutine at $FF78.w [Writes: Stack Pointer] [Flow: call]
	jsr $F2B4.w		; 20 B4 F2 ; Jump to subroutine at $F2B4.w [Writes: Stack Pointer] [Flow: call]
	lda $0E10.w,X		; BD 10 0E ; Load $0E10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $F145.w		; 20 45 F1 ; Jump to subroutine at $F145.w [Writes: Stack Pointer] [Flow: call]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $AA04.w,Y		; B9 04 AA ; Load $AA04.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $AA08.w,Y		; 19 08 AA ; OR accumulator with memory $AA08.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F10.w,X		; 9D 10 0F ; Store accumulator to $0F10.w,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $A864.w,Y		; B9 64 A8 ; Load $A864.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $A868.w,Y		; B9 68 A8 ; Load $A868.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	lda $0F10.w,X		; BD 10 0F ; Load $0F10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $E991.w		; 20 91 E9 ; Jump to subroutine at $E991.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $6B		; D0 6B ; Branch if not equal to $D0, $6B [Flow: branch]
	inc $0ED0.w,X		; FE D0 0E ; Increment memory $0ED0.w,X [Reads: X Index] [Flags: ZN]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$C0.b		; C9 C0 ; Compare #$C0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $E25C.w		; 20 5C E2 ; Jump to subroutine at $E25C.w [Writes: Stack Pointer] [Flow: call]
	ldy #$8001.w		; A0 01 80 ; Load #$8001.w into Y register [Writes: Y Index] [Flags: ZN]
	trb $BD.b		; 14 BD ; Test and reset bits $BD.b [Reads: Accumulator] [Flags: Z]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $51		; D0 51 ; Branch if not equal to $D0, $51 [Flow: branch]
	ldy #$BD00.w		; A0 00 BD ; Load #$BD00.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $B0, $0E		; B0 0E ; Branch if carry set to $B0, $0E [Flow: branch]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$DB.b		; A9 DB ; Load #$DB.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	lda #$D9.b		; A9 D9 ; Load #$D9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65F.l		; 22 5F F6 1D ; Jump to subroutine long $1DF65F.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $3C		; 30 3C ; Branch if minus to $30, $3C [Flow: branch]
	inc $0EB0.w,X		; FE B0 0E ; Increment memory $0EB0.w,X [Reads: X Index] [Flags: ZN]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,Y		; 99 80 0F ; Store accumulator to $0F80.w,Y [Reads: Accumulator, Y Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F10.w,Y		; 99 10 0F ; Store accumulator to $0F10.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $EA04.w		; 20 04 EA ; Jump to subroutine at $EA04.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $AA14.w		; 20 14 AA ; Jump to subroutine at $AA14.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $F257.w		; 20 57 F2 ; Jump to subroutine at $F257.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF.w,X		; FD FF 00 ; Subtract with carry $00FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FA0000.l,X		; FF 00 00 FA ; Subtract with carry (long,X) $FA0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FA0000.l,X		; FF 00 00 FA ; Subtract with carry (long,X) $FA0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FA0000.l,X		; FF 00 00 FA ; Subtract with carry (long,X) $FA0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E84444.l,X		; FF 44 44 E8 ; Subtract with carry (long,X) $E84444.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $44,$E8		; 44 E8 44 ; Move block positive $44,$E8 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	inc $44.b		; E6 44 ; Increment $44.b [Reads: Direct Page] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	mvp $44,$E6		; 44 E6 44 ; Move block positive $44,$E6 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0C.b,S		; 03 0C ; OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0C.b,S		; 03 0C ; OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0C.b,S		; 03 0C ; OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0C.b,S		; 03 0C ; OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $0C.b,S		; 43 0C ; Exclusive OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr $E41E.w		; 20 1E E4 ; Jump to subroutine at $E41E.w [Writes: Stack Pointer] [Flow: call]
	lda $0FC6.w		; AD C6 0F ; Load $0FC6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $6B		; B0 6B ; Branch if carry set to $B0, $6B [Flow: branch]
	stz $07.b		; 64 07 ; Store zero to $07.b
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$17.b		; C9 17 ; Compare #$17.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$DA01.w		; A2 01 DA ; Load #$DA01.w into X register [Writes: X Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $AA18.w,X		; 7D 18 AA ; Add $AA18.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $AA30.w,X		; BD 30 AA ; Load $AA30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$44.b		; C9 44 ; Compare #$44.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $07.b		; 65 07 ; Add $07.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $AA3C.w,X		; 1D 3C AA ; OR accumulator with memory $AA3C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0F.b		; 05 0F ; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $AC		; 10 AC ; Branch if plus to $10, $AC [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $42, $44		; 42 44 ; Reserved instruction
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	lsr $44.b		; 46 44 ; Logical shift right $44.b [Reads: Direct Page] [Flags: ZNC]
	.db $42, $44		; 42 44 ; Reserved instruction
	mvp $46,$00		; 44 00 46 ; Move block positive $46,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $0C,$0C		; 44 0C 0C ; Move block positive $0C,$0C [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $0000.w		; 0C 00 00 ; Test and set bits $0000.w [Reads: Accumulator] [Flags: Z]
	brk $B0.b		; 00 B0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $08.b,X		; B4 08 ; Load Y register $08.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $4C08.w,X		; BC 08 4C ; Load Y register $4C08.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $4E0A.w		; 4D 0A 4E ; Exclusive OR $4E0A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $C6AD0A.l		; 4F 0A AD C6 ; Exclusive OR accumulator with memory (long) $C6AD0A.l [Writes: Accumulator] [Flags: ZN]
	ora $B003C9.l		; 0F C9 03 B0 ; OR accumulator with memory (long) $B003C9.l [Writes: Accumulator] [Flags: ZN]
	adc $AD.b		; 65 AD ; Add $AD.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda ($0F.b,S),Y		; B3 0F ; Load accumulator (stack relative indirect indexed) ($0F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	lda $0F20.w,X		; BD 20 0F ; Load $0F20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $AAD0.w,Y		; B9 D0 AA ; Load $AAD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	lda $AAD8.w,Y		; B9 D8 AA ; Load $AAD8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0BA0.w,X		; 9D A0 0B ; Store accumulator to $0BA0.w,X [Reads: Accumulator, X Index]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	jsr $AB76.w		; 20 76 AB ; Jump to subroutine at $AB76.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $36		; 80 36 ; Branch always to $80, $36 [Flow: branch]
	jsr $DC10.w		; 20 10 DC ; Jump to subroutine at $DC10.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0FFF.w		; 6D FF 0F ; Add $0FFF.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	adc #$05.b		; 69 05 ; Add #$05.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $AABE.w,X		; BD BE AA ; Load $AABE.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$9102.w		; A0 02 91 ; Load #$9102.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $90, $C8		; 90 C8 ; Branch if carry clear to $90, $C8 [Flow: branch]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ora $AACA.w,X		; 1D CA AA ; OR accumulator with memory $AACA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$C0.b		; 29 C0 ; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsr $E164.w		; 20 64 E1 ; Jump to subroutine at $E164.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $F80008.l,X		; FF 08 00 F8 ; Subtract with carry (long,X) $F80008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F20008.l,X		; FF 08 00 F2 ; Subtract with carry (long,X) $F20008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $02FFF2.l,X		; FF F2 FF 02 ; Subtract with carry (long,X) $02FFF2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $060000.l,X		; FF 00 00 06 ; Subtract with carry (long,X) $060000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BC.b		; 00 BC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $0D		; B0 0D ; Branch if carry set to $B0, $0D [Flow: branch]
	lda $AB6E.w,Y		; B9 6E AB ; Load $AB6E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsr $E41E.w		; 20 1E E4 ; Jump to subroutine at $E41E.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$DA03.w		; A2 03 DA ; Load #$DA03.w into X register [Writes: X Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $AB5A.w,X		; 7D 5A AB ; Add $AB5A.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $AB62.w,X		; 7D 62 AB ; Add $AB62.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$4A.b		; A9 4A ; Load #$4A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $AB6A.w,X		; BD 6A AB ; Load $AB6A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0F.b		; 05 0F ; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $B7		; 10 B7 ; Branch if plus to $10, $B7 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBA84.l		; 22 84 BA 0D ; Jump to subroutine long $0DBA84.l [Writes: Stack Pointer] [Flow: call]
	ldy #$BD00.w		; A0 00 BD ; Load #$BD00.w into Y register [Writes: Y Index] [Flags: ZN]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E9.b		; E5 E9 ; Subtract $E9.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$DA02.w		; A2 02 DA ; Load #$DA02.w into X register [Writes: X Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $AB6E.w,X		; 7D 6E AB ; Add $AB6E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$6C.b		; A9 6C ; Load #$6C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0F.b		; 05 0F ; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $BA		; 10 BA ; Branch if plus to $10, $BA [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $5B		; 30 5B ; Branch if minus to $30, $5B [Flow: branch]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $57		; 90 57 ; Branch if carry clear to $90, $57 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda #$EC.b		; A9 EC ; Load #$EC.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $43		; 30 43 ; Branch if minus to $30, $43 [Flow: branch]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,Y		; 99 70 0F ; Store accumulator to $0F70.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0D.b		; A6 0D ; Load $0D.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $AC31.w,X		; 7D 31 AC ; Add $AC31.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $AC35.w,X		; 7D 35 AC ; Add $AC35.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $AC39.w,X		; 7D 39 AC ; Add $AC39.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $AC3D.w,X		; 7D 3D AC ; Add $AC3D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,Y		; 99 B0 0D ; Store accumulator to $0DB0.w,Y [Reads: Accumulator, Y Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsr $E25A.w		; 20 5A E2 ; Jump to subroutine at $E25A.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	dec $0D.b		; [PATTERN: Memory clearing operation] C6 0D ; Decrement $0D.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $B1		; 10 B1 ; Branch if plus to $10, $B1 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	jsr $E41E.w		; 20 1E E4 ; Jump to subroutine at $E41E.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldx #$BF1D.w		; A2 1D BF ; Load #$BF1D.w into X register [Writes: X Index] [Flags: ZN]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $CA04F0.l,X		; 7F F0 04 CA ; Add long $CA04F0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $F7		; 10 F7 ; Branch if plus to $10, $F7 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda #$16.b		; A9 16 ; Load #$16.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF800.l,X		; 9F 00 F8 7F ; Store accumulator (long,X) $7FF800.l,X [Reads: Accumulator, X Index]
	sta $0FB4.w		; 8D B4 0F ; Store accumulator to $0FB4.w [Reads: Accumulator]
	lda $0D10.w,Y		; B9 10 0D ; Load $0D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FF83C.l,X		; 9F 3C F8 7F ; Store accumulator (long,X) $7FF83C.l,X [Reads: Accumulator, X Index]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FF878.l,X		; 9F 78 F8 7F ; Store accumulator (long,X) $7FF878.l,X [Reads: Accumulator, X Index]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0F70.w,Y		; F9 70 0F ; Subtract with carry $0F70.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF81E.l,X		; 9F 1E F8 7F ; Store accumulator (long,X) $7FF81E.l,X [Reads: Accumulator, X Index]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF85A.l,X		; 9F 5A F8 7F ; Store accumulator (long,X) $7FF85A.l,X [Reads: Accumulator, X Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7FF9FE.l,X		; 9F FE F9 7F ; Store accumulator (long,X) $7FF9FE.l,X [Reads: Accumulator, X Index]
	lda $0F20.w,Y		; B9 20 0F ; Load $0F20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FF968.l,X		; 9F 68 F9 7F ; Store accumulator (long,X) $7FF968.l,X [Reads: Accumulator, X Index]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF90E.l,X		; 9F 0E F9 7F ; Store accumulator (long,X) $7FF90E.l,X [Reads: Accumulator, X Index]
	lda $0DB0.w,Y		; B9 B0 0D ; Load $0DB0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FF92C.l,X		; 9F 2C F9 7F ; Store accumulator (long,X) $7FF92C.l,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$B90F.w		; A0 0F B9 ; Load #$B90F.w into Y register [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tsb $0229.w		; 0C 29 02 ; Test and set bits $0229.w [Reads: Accumulator] [Flags: Z]
	.db $F0, $40		; F0 40 ; Branch if equal to $F0, $40 [Flow: branch]
	lda $0E90.w,Y		; B9 90 0E ; Load $0E90.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $3B		; F0 3B ; Branch if equal to $F0, $3B [Flow: branch]
	lda $0FC6.w		; AD C6 0F ; Load $0FC6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0E.b		; C9 0E ; Compare #$0E.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsr $F7EF.w		; 20 EF F7 ; Jump to subroutine at $F7EF.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsr $F836.w		; 20 36 F8 ; Jump to subroutine at $F836.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $29		; 90 29 ; Branch if carry clear to $90, $29 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E90.w,Y		; 99 90 0E ; Store accumulator to $0E90.w,Y [Reads: Accumulator, Y Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,Y		; 99 80 0F ; Store accumulator to $0F80.w,Y [Reads: Accumulator, Y Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EE0.w,Y		; 99 E0 0E ; Store accumulator to $0EE0.w,Y [Reads: Accumulator, Y Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B58.w,Y		; 99 58 0B ; Store accumulator to $0B58.w,Y [Reads: Accumulator, Y Index]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D8.b		; C9 D8 ; Compare #$D8.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	jsl $06AD50.l		; 22 50 AD 06 ; Jump to subroutine long $06AD50.l [Writes: Stack Pointer] [Flow: call]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $B6		; 10 B6 ; Branch if plus to $10, $B6 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$4A.b		; A9 4A ; Load #$4A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E20.w,Y		; 99 20 0E ; Store accumulator to $0E20.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,Y		; 99 B0 0D ; Store accumulator to $0DB0.w,Y [Reads: Accumulator, Y Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,Y		; 99 00 0E ; Store accumulator to $0E00.w,Y [Reads: Accumulator, Y Index]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,Y		; 99 60 0E ; Store accumulator to $0E60.w,Y [Reads: Accumulator, Y Index]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,Y		; 99 50 0E ; Store accumulator to $0E50.w,Y [Reads: Accumulator, Y Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $AF1A.w		; 20 1A AF ; Jump to subroutine at $AF1A.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsl $1EF4F3.l		; 22 F3 F4 1E ; Jump to subroutine long $1EF4F3.l [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	lda $ADE1.w		; AD E1 AD ; Load $ADE1.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldx $AE34.w		; AE 34 AE ; Load $AE34.w into X register [Writes: X Index] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	ldx $80BD.w		; AE BD 80 ; Load $80BD.w into X register [Writes: X Index] [Flags: ZN]
	ora $8122.w		; 0D 22 81 ; Logical OR $8122.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta [$00.b]		; 87 00 ; Store accumulator (long) [$00.b] [Reads: Accumulator, Direct Page]
	lda [$AD.b]		; A7 AD ; Load accumulator (long) [$AD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $ADB5AD.l,X		; BF AD B5 AD ; Load long $ADB5AD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda #$FE.b		; A9 FE ; Load #$FE.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$2200.w		; A0 00 22 ; Load #$2200.w into Y register [Writes: Y Index] [Flags: ZN]
	lda [$E1.b]		; A7 E1 ; Load accumulator (long) [$E1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $90.b		; 05 90 ; Logical OR $90.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$A0.b		; A9 A0 ; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF372.l		; 8F 72 F3 7E ; Store accumulator (long) $7EF372.l [Reads: Accumulator]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	jsr $AEAB.w		; 20 AB AE ; Jump to subroutine at $AEAB.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $0C		; 90 0C ; Branch if carry clear to $90, $0C [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$2200.w		; A0 00 22 ; Load #$2200.w into Y register [Writes: Y Index] [Flags: ZN]
	ora $05E2.w,Y		; 19 E2 05 ; OR accumulator with memory $05E2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$2201.w		; A0 01 22 ; Load #$2201.w into Y register [Writes: Y Index] [Flags: ZN]
	ora $05E2.w,Y		; 19 E2 05 ; OR accumulator with memory $05E2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	lda [$AD.b]		; A7 AD ; Load accumulator (long) [$AD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $B5AD.w		; EE AD B5 ; Increment $B5AD.w [Flags: ZN]
	lda $E8AD.w		; AD AD E8 ; Load $E8AD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	trb $0BD0.w		; 1C D0 0B ; Test and reset bits $0BD0.w [Reads: Accumulator] [Flags: Z]
	jsr $AEAB.w		; 20 AB AE ; Jump to subroutine at $AEAB.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$8001.w		; A0 01 80 ; Load #$8001.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp $A000A9.l		; CF A9 00 A0 ; Compare accumulator (long) $A000A9.l [Reads: Accumulator] [Flags: ZNC]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $05E2.w,Y		; 19 E2 05 ; OR accumulator with memory $05E2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	lda [$AD.b]		; A7 AD ; Load accumulator (long) [$AD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$AE.b],Y		; 17 AE ; OR accumulator with memory (long indexed) [$AE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $AD.b,X		; B5 AD ; Load $AD.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	jsr $AEAB.w		; 20 AB AE ; Jump to subroutine at $AEAB.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$4C01.w		; A0 01 4C ; Load #$4C01.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp $A9AD.w		; CD AD A9 ; Compare $A9AD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $05E2.w,Y		; 19 E2 05 ; OR accumulator with memory $05E2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$40.b		; 49 40 ; Exclusive OR #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$49.b		; A9 49 ; Load #$49.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$2201.w		; A0 01 22 ; Load #$2201.w into Y register [Writes: Y Index] [Flags: ZN]
	lda [$E1.b]		; A7 E1 ; Load accumulator (long) [$E1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $60.b		; 05 60 ; Logical OR $60.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $E96C.w		; 20 6C E9 ; Jump to subroutine at $E96C.w [Writes: Stack Pointer] [Flow: call]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F80.w,X		; BD 80 0F ; Load $0F80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $A213.w,Y		; 79 13 A2 ; Add $A213.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	lda [$AD.b]		; A7 AD ; Load accumulator (long) [$AD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $B5AE.w		; 8E AE B5 ; Store X register to $B5AE.w [Reads: X Index]
	lda $E8AD.w		; AD AD E8 ; Load $E8AD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	trb $0CD0.w		; 1C D0 0C ; Test and reset bits $0CD0.w [Reads: Accumulator] [Flags: Z]
	jsr $AEAB.w		; 20 AB AE ; Jump to subroutine at $AEAB.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$4C01.w		; A0 01 4C ; Load #$4C01.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp $A9AD.w		; CD AD A9 ; Compare $A9AD.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $05E2.w,Y		; 19 E2 05 ; OR accumulator with memory $05E2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $7EF360.l		; AF 60 F3 7E ; Load long $7EF360.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0014.w		; C9 14 00 ; Compare #$0014.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $10		; 90 10 ; Branch if carry clear to $90, $10 [Flow: branch]
	lda $7EF360.l		; AF 60 F3 7E ; Load long $7EF360.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0014.w		; E9 14 00 ; Subtract #$0014.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $7EF360.l		; 8F 60 F3 7E ; Store accumulator (long) $7EF360.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $004A.w		; 6E 4A 00 ; Rotate right $004A.w [Flags: ZNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $4A.b		; 24 4A ; Test bits $4A.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $48.b		; 04 48 ; Test and set bits $48.b [Reads: Accumulator] [Flags: Z]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($000A.w)		; 6C 0A 00 ; Jump indirect to ($000A.w) [Flow: jump]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $000A.w		; 2E 0A 00 ; Rotate left $000A.w [Flags: ZNC]
	cop $BD.b		; 02 BD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$CA.b		; 69 CA ; Add #$CA.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$AE.b		; A9 AE ; Load #$AE.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	jsl $05DF75.l		; 22 75 DF 05 ; Jump to subroutine long $05DF75.l [Writes: Stack Pointer] [Flow: call]
	jmp $DC64.w		; 4C 64 DC ; Jump to $DC64.w [Flow: jump]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	lsr $AF.b		; 46 AF ; Logical shift right $AF.b [Reads: Direct Page] [Flags: ZNC]
	adc ($B1.b,S),Y		; 73 B1 ; Add with carry (stack relative indirect indexed) ($B1.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	eor ($AF.b),Y		; 51 AF ; Exclusive OR accumulator with memory ($AF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $B0, $BD		; B0 BD ; Branch if carry set to $B0, $BD [Flow: branch]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	jsl $0DCFD9.l		; 22 D9 CF 0D ; Jump to subroutine long $0DCFD9.l [Writes: Stack Pointer] [Flow: call]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	sta $0DA0.w,X		; 9D A0 0D ; Store accumulator to $0DA0.w,X [Reads: Accumulator, X Index]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	sta ($AF.b,S),Y		; 93 AF ; Store accumulator (stack relative indirect indexed) ($AF.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	cmp ($AF.b,X)		; C1 AF ; Compare accumulator ($AF.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc ($AF.b)		; F2 AF ; Subtract with carry (indirect) ($AF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $B0, $AF		; B0 AF ; Branch if carry set to $B0, $AF [Flow: branch]
	jmp $7EF3.w		; 4C F3 7E ; Jump to $7EF3.w [Flow: jump]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	jsr $B12E.w		; 20 2E B1 ; Jump to subroutine at $B12E.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $13		; B0 13 ; Branch if carry set to $B0, $13 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	inc $0DE0.w,X		; FE E0 0D ; Increment memory $0DE0.w,X [Reads: X Index] [Flags: ZN]
	inc $0FDD.w		; EE DD 0F ; Increment $0FDD.w [Flags: ZN]
	lda #$B0.b		; A9 B0 ; Load #$B0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$19.b		; A9 19 ; Load #$19.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	jsr $B1A5.w		; 20 A5 B1 ; Jump to subroutine at $B1A5.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $26		; D0 26 ; Branch if not equal to $D0, $26 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0ED657.l		; 22 57 D6 0E ; Jump to subroutine long $0ED657.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	lda #$33.b		; A9 33 ; Load #$33.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $00EC0D.l		; 22 0D EC 00 ; Jump to subroutine long $00EC0D.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $00EBF2.l		; [PATTERN: Memory clearing operation] 22 F2 EB 00 ; Jump to subroutine long $00EBF2.l [Writes: Stack Pointer] [Flow: call]
	jsl $0ED6BB.l		; 22 BB D6 0E ; Jump to subroutine long $0ED6BB.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $10FFFF.l,X		; FF FF FF 10 ; Subtract with carry (long,X) $10FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	cop $0A.b		; 02 0A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cop $0E.b		; 02 0E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	.db $B0, $9E		; B0 9E ; Branch if carry set to $B0, $9E [Flow: branch]
	.db $B0, $BB		; B0 BB ; Branch if carry set to $B0, $BB [Flow: branch]
	.db $B0, $CA		; B0 CA ; Branch if carry set to $B0, $CA [Flow: branch]
	.db $B0, $E9		; B0 E9 ; Branch if carry set to $B0, $E9 [Flow: branch]
	.db $B0, $1E		; B0 1E ; Branch if carry set to $B0, $1E [Flow: branch]
	lda ($AF.b),Y		; B1 AF ; Load accumulator ($AF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $7EF3.w		; 4C F3 7E ; Jump to $7EF3.w [Flow: jump]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	jmp ($7AB0.w)		; 6C B0 7A ; Jump indirect to ($7AB0.w) [Flow: jump]
	.db $B0, $83		; B0 83 ; Branch if carry set to $B0, $83 [Flow: branch]
	.db $B0, $98		; B0 98 ; Branch if carry set to $B0, $98 [Flow: branch]
	.db $B0, $A9		; B0 A9 ; Branch if carry set to $B0, $A9 [Flow: branch]
	sbc $A0.b		; E5 A0 ; Subtract $A0.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda [$E1.b]		; A7 E1 ; Load accumulator (long) [$E1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $90.b		; 05 90 ; Logical OR $90.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$E8.b		; A9 E8 ; Load #$E8.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$E9.b		; A9 E9 ; Load #$E9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda #$E6.b		; A9 E6 ; Load #$E6.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$E7.b		; A9 E7 ; Load #$E7.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; [PATTERN: Memory clearing operation] A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $02E9.w		; 9C E9 02 ; Store zero to $02E9.w
	ldy #$13.b		; A0 13 ; Load #$13.b into Y register [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0799AD.l		; 22 AD 99 07 ; Jump to subroutine long $0799AD.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0202.w		; AD 02 02 ; Load $0202.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	bit $F0.b		; 24 F0 ; Test bits $F0.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	.db $50, $13		; 50 13 ; Branch if overflow clear to $50, $13 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$F2.b		; A9 F2 ; Load #$F2.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	stz $012E.w		; 9C 2E 01 ; Store zero to $012E.w
	lda #$17.b		; A9 17 ; Load #$17.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	inc $02E4.w		; EE E4 02 ; Increment $02E4.w [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $23		; D0 23 ; Branch if not equal to $D0, $23 [Flow: branch]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	lda #$33.b		; A9 33 ; Load #$33.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda $B019.w,Y		; B9 19 B0 ; Load $B019.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $0A		; 30 0A ; Branch if minus to $30, $0A [Flow: branch]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $B02D.w,Y		; B9 2D B0 ; Load $B02D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$F3.b		; A9 F3 ; Load #$F3.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $7EF3C9.l		; AF C9 F3 7E ; Load long $7EF3C9.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3C9.l		; 8F C9 F3 7E ; Store accumulator (long) $7EF3C9.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $02.b		; E5 02 ; Subtract $02.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0030.w		; C9 30 00 ; Compare #$0030.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0030.w		; C9 30 00 ; Compare #$0030.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $DCEF.w		; 20 EF DC ; Jump to subroutine at $DCEF.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E96C.w		; 20 6C E9 ; Jump to subroutine at $E96C.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $0FA0.w		; 4D A0 0F ; Exclusive OR $0FA0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B171.w,Y		; 79 71 B1 ; Add $B171.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$2E.b		; A9 2E ; Load #$2E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,Y		; 99 B0 0E ; Store accumulator to $0EB0.w,Y [Reads: Accumulator, Y Index]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,Y		; 99 80 0F ; Store accumulator to $0F80.w,Y [Reads: Accumulator, Y Index]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	ora $0A.b		; 05 0A ; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $BD		; 10 BD ; Branch if plus to $10, $BD [Flow: branch]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	lsr $A3B3.w		; 4E B3 A3 ; Logical shift right $A3B3.w [Flags: ZNC]
	ldx $74.b,Y		; B6 74 ; Load X register $74.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	lda ($FD.b)		; B2 FD ; Load accumulator (indirect) ($FD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($20.b),Y		; B1 20 ; Load accumulator ($20.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($20.b,S),Y		; B3 20 ; Load accumulator (stack relative indirect indexed) ($20.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx $BDD9.w		; EC D9 BD ; Compare $BDD9.w with X register [Reads: X Index] [Flags: ZNC]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	lda ($55.b)		; B2 55 ; Load accumulator (indirect) ($55.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($68.b)		; B2 68 ; Load accumulator (indirect) ($68.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	sbc $F30000.l,X		; FF 00 00 F3 ; Subtract with carry (long,X) $F30000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0DF3.w		; 0D F3 0D ; Logical OR $0DF3.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $23		; D0 23 ; Branch if not equal to $D0, $23 [Flow: branch]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda $B20E.w,Y		; B9 0E B2 ; Load $B20E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $B210.w,Y		; B9 10 B2 ; Load $B210.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $11		; 30 11 ; Branch if minus to $30, $11 [Flow: branch]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $B213.w,Y		; B9 13 B2 ; Load $B213.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $B217.w,Y		; B9 17 B2 ; Load $B217.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1EF4F3.l		; 22 F3 F4 1E ; Jump to subroutine long $1EF4F3.l [Writes: Stack Pointer] [Flow: call]
	lda #$E3.b		; A9 E3 ; Load #$E3.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	lda $7EF3C9.l		; AF C9 F3 7E ; Load long $7EF3C9.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3C9.l		; 8F C9 F3 7E ; Store accumulator (long) $7EF3C9.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B339.w		; 20 39 B3 ; Jump to subroutine at $B339.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsl $1EF4F3.l		; 22 F3 F4 1E ; Jump to subroutine long $1EF4F3.l [Writes: Stack Pointer] [Flow: call]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	jsr $E96C.w		; 20 6C E9 ; Jump to subroutine at $E96C.w [Writes: Stack Pointer] [Flow: call]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	lda #$E1.b		; A9 E1 ; Load #$E1.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $00D423.l		; 22 23 D4 00 ; Jump to subroutine long $00D423.l [Writes: Stack Pointer] [Flow: call]
	jsl $099F39.l		; 22 39 9F 09 ; Jump to subroutine long $099F39.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $020041.l		; 22 41 00 02 ; Jump to subroutine long $020041.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $020001.l		; 22 01 00 02 ; Jump to subroutine long $020001.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $020041.l		; 22 41 00 02 ; Jump to subroutine long $020041.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $020001.l		; 22 01 00 02 ; Jump to subroutine long $020001.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $020001.l		; 22 01 00 02 ; Jump to subroutine long $020001.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $020001.l		; 22 01 00 02 ; Jump to subroutine long $020001.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $020041.l		; 22 41 00 02 ; Jump to subroutine long $020041.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $020041.l		; 22 41 00 02 ; Jump to subroutine long $020041.l [Writes: Stack Pointer] [Flow: call]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZNC]
	ldy #$A0.b		; A0 A0 ; Load #$A0.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $80, $60		; 80 60 ; Branch always to $80, $60 [Flow: branch]
	.db $80, $60		; 80 60 ; Branch always to $80, $60 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $B300.w,Y		; B9 00 B3 ; Load $B300.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0AEA.w		; 8D EA 0A ; Store accumulator to $0AEA.w [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$C0.b		; 69 C0 ; Add #$C0.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$B2.b		; A9 B2 ; Load #$B2.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	jsl $05DF75.l		; 22 75 DF 05 ; Jump to subroutine long $05DF75.l [Writes: Stack Pointer] [Flow: call]
	jmp $DC64.w		; 4C 64 DC ; Jump to $DC64.w [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $64.b		; 06 64 ; Arithmetic shift left $64.b [Reads: Direct Page] [Flags: ZNC]
	ora [$A9.b]		; 07 A9 ; OR accumulator with memory (long) [$A9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($85.b),Y		; 31 85 ; AND accumulator with memory ($85.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$B3.b		; A9 B3 ; Load #$B3.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	jsl $05DF75.l		; 22 75 DF 05 ; Jump to subroutine long $05DF75.l [Writes: Stack Pointer] [Flow: call]
	jmp $DC64.w		; 4C 64 DC ; Jump to $DC64.w [Flow: jump]
	jsr $B673.w		; 20 73 B6 ; Jump to subroutine at $B673.w [Writes: Stack Pointer] [Flow: call]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	jsr $E96C.w		; [PATTERN: Memory clearing operation] 20 6C E9 ; Jump to subroutine at $E96C.w [Writes: Stack Pointer] [Flow: call]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $06		; 10 06 ; Branch if plus to $10, $06 [Flow: branch]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	stz $0F80.w,X		; 9E 80 0F ; Store zero to $0F80.w,X [Reads: X Index]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	ldy $0E90.w,X		; BC 90 0E ; Load Y register $0E90.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $0D80.w,Y		; B9 80 0D ; Load $0D80.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	ora $0D80.w,X		; 1D 80 0D ; OR accumulator with memory $0D80.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $36		; D0 36 ; Branch if not equal to $D0, $36 [Flow: branch]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $0DA0.w,X		; DE A0 0D ; Decrement memory $0DA0.w,X [Reads: X Index] [Flags: ZN]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $2C		; D0 2C ; Branch if not equal to $D0, $2C [Flow: branch]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda $B1DE.w,Y		; B9 DE B1 ; Load $B1DE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $B1E6.w,Y		; B9 E6 B1 ; Load $B1E6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DA0.w,X		; 9D A0 0D ; Store accumulator to $0DA0.w,X [Reads: Accumulator, X Index]
	cpy #$01.b		; C0 01 ; Compare #$01.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	cpy #$03.b		; C0 03 ; Compare #$03.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	jsr $B6CD.w		; 20 CD B6 ; Jump to subroutine at $B6CD.w [Writes: Stack Pointer] [Flow: call]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	sbc $B3.b,S		; E3 B3 ; Subtract stack-relative $B3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	eor $B47CB4.l,X		; 5F B4 7C B4 ; Exclusive OR accumulator with memory (long,X) $B47CB4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $0EB4.w		; AD B4 0E ; Load $0EB4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $0E.b,X		; B5 0E ; Load $0E.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $48.b,X		; B5 48 ; Load $48.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $69.b,X		; B5 69 ; Load $69.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $69.b,X		; B5 69 ; Load $69.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $69.b,X		; B5 69 ; Load $69.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $6A.b,X		; B5 6A ; Load $6A.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $9D.b,X		; B5 9D ; Load $9D.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $9E.b,X		; B5 9E ; Load $9E.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $0D		; B0 0D ; Branch if carry set to $B0, $0D [Flow: branch]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $38		; F0 38 ; Branch if equal to $F0, $38 [Flow: branch]
	jsr $B43D.w		; 20 3D B4 ; Jump to subroutine at $B43D.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $11		; 90 11 ; Branch if carry clear to $90, $11 [Flow: branch]
	lda #$E4.b		; A9 E4 ; Load #$E4.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	inc $0DB0.w,X		; FE B0 0D ; Increment memory $0DB0.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF3C9.l		; AF C9 F3 7E ; Load long $7EF3C9.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	lda #$D8.b		; A9 D8 ; Load #$D8.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	inc $0DB0.w,X		; FE B0 0D ; Increment memory $0DB0.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$DF.b		; A9 DF ; Load #$DF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$C2.b		; C9 C2 ; Compare #$C2.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
	lda #$E0.b		; A9 E0 ; Load #$E0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	inc $02E4.w		; EE E4 02 ; Increment $02E4.w [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda $0202.w		; AD 02 02 ; Load $0202.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	lda $0300.w		; AD 00 03 ; Load $0300.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsr $F154.w		; 20 54 F1 ; Jump to subroutine at $F154.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $01		; 90 01 ; Branch if carry clear to $90, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda #$D9.b		; A9 D9 ; Load #$D9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$DC.b		; A9 DC ; Load #$DC.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	lda #$DA.b		; A9 DA ; Load #$DA.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$DB.b		; A9 DB ; Load #$DB.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$DC.b		; A9 DC ; Load #$DC.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda #$DC.b		; A9 DC ; Load #$DC.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $7EF360.l		; AF 60 F3 7E ; Load long $7EF360.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$000A.w		; C9 0A 00 ; Compare #$000A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	lda #$DC.b		; A9 DC ; Load #$DC.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $7EF360.l		; AF 60 F3 7E ; Load long $7EF360.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$000A.w		; E9 0A 00 ; Subtract #$000A.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $7EF360.l		; 8F 60 F3 7E ; Store accumulator (long) $7EF360.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$DD.b		; A9 DD ; Load #$DD.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	ldy $0E90.w,X		; BC 90 0E ; Load Y register $0E90.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,Y		; 99 80 0D ; Store accumulator to $0D80.w,Y [Reads: Accumulator, Y Index]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	stz $0ABF.w		; 9C BF 0A ; Store zero to $0ABF.w
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF359.l		; 8F 59 F3 7E ; Store accumulator (long) $7EF359.l [Reads: Accumulator]
	lda $7EF3C9.l		; AF C9 F3 7E ; Load long $7EF3C9.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$80.b		; 09 80 ; Logical OR #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3C9.l		; 8F C9 F3 7E ; Store accumulator (long) $7EF3C9.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0DB0.w,X		; 9E B0 0D ; Store zero to $0DB0.w,X [Reads: X Index]
	jsr $B43D.w		; 20 3D B4 ; Jump to subroutine at $B43D.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $11		; 90 11 ; Branch if carry clear to $90, $11 [Flow: branch]
	lda #$E4.b		; A9 E4 ; Load #$E4.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	inc $0DB0.w,X		; FE B0 0D ; Increment memory $0DB0.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0ABF.w		; AD BF 0A ; Load $0ABF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	lda #$DE.b		; A9 DE ; Load #$DE.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$E2.b		; A9 E2 ; Load #$E2.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $0E90.w,X		; BC 90 0E ; Load Y register $0E90.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	sta $0D80.w,Y		; 99 80 0D ; Store accumulator to $0D80.w,Y [Reads: Accumulator, Y Index]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	stz $02E9.w		; 9C E9 02 ; Store zero to $02E9.w
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0799AD.l		; 22 AD 99 07 ; Jump to subroutine long $0799AD.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $7EF3C9.l		; AF C9 F3 7E ; Load long $7EF3C9.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3C9.l		; 8F C9 F3 7E ; Store accumulator (long) $7EF3C9.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$1A.b		; A9 1A ; Load #$1A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $1C		; 30 1C ; Branch if minus to $30, $1C [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,Y		; 99 80 0E ; Store accumulator to $0E80.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$E3.b		; A9 E3 ; Load #$E3.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$1A.b		; A9 1A ; Load #$1A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $24		; 30 24 ; Branch if minus to $30, $24 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$2C.b		; 69 2C ; Add #$2C.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,Y		; 99 E0 0D ; Store accumulator to $0DE0.w,Y [Reads: Accumulator, Y Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,Y		; 99 90 0D ; Store accumulator to $0D90.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $0B.b		; 02 0B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000060.l,X		; FF 60 00 00 ; Subtract with carry (long,X) $000060.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F2FF.w,X		; FD FF F2 ; Subtract with carry $F2FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $004044.l,X		; FF 44 40 00 ; Subtract with carry (long,X) $004044.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $400000.l,X		; FF 00 00 40 ; Subtract with carry (long,X) $400000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F2.b		; 00 F2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000044.l,X		; FF 44 00 00 ; Subtract with carry (long,X) $000044.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $42.b		; 00 42 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000060.l,X		; FF 60 00 00 ; Subtract with carry (long,X) $000060.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $420000.l,X		; FF 00 00 42 ; Subtract with carry (long,X) $420000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F5.b		; 02 F5 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $60FFF6.l,X		; FF F6 FF 60 ; Subtract with carry (long,X) $60FFF6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $40		; 42 40 ; Reserved instruction
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0200.w		; 0D 00 02 ; Logical OR $0200.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $42, $00		; 42 00 ; Reserved instruction
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($FF.b,S),Y		; F3 FF ; Subtract with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $00, $00		; 62 00 00 ; Push effective relative address $62, $00, $00 [Writes: Stack Pointer]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $40, $00		; 62 40 00 ; Push effective relative address $62, $40, $00 [Writes: Stack Pointer]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $85.b		; 02 85 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $64.b		; 06 64 ; Arithmetic shift left $64.b [Reads: Direct Page] [Flags: ZNC]
	ora [$BD.b]		; 07 BD ; OR accumulator with memory (long) [$BD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy #$0D.b		; C0 0D ; Compare #$0D.b with Y register [Reads: Y Index] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $0DE0.w,X		; 7D E0 0D ; Add $0DE0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$D3.b		; 69 D3 ; Add #$D3.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$B5.b		; A9 B5 ; Load #$B5.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	jsl $05DF75.l		; 22 75 DF 05 ; Jump to subroutine long $05DF75.l [Writes: Stack Pointer] [Flow: call]
	jsr $DC64.w		; 20 64 DC ; Jump to subroutine at $DC64.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $030104.l,X		; FF 04 01 03 ; Subtract with carry (long,X) $030104.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $20B7.w		; 2C B7 20 ; Test bits $20B7.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	cpx $BDD9.w		; EC D9 BD ; Compare $BDD9.w with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda $B696.w,Y		; B9 96 B6 ; Load $B696.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $0A		; 30 0A ; Branch if minus to $30, $0A [Flow: branch]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $B69D.w,Y		; B9 9D B6 ; Load $B69D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $1AA9F1.l		; 0F F1 A9 1A ; OR accumulator with memory (long) $1AA9F1.l [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $26		; 30 26 ; Branch if minus to $30, $26 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B6CB.w,X		; 7D CB B6 ; Add $B6CB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$02.b		; 69 02 ; Add #$02.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,Y		; 99 80 0E ; Store accumulator to $0E80.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0041AA.l,X		; FF AA 41 00 ; Subtract with carry (long,X) $0041AA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $900000.l,X		; FF 00 00 90 ; Subtract with carry (long,X) $900000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $91FFFE.l,X		; FF FE FF 91 ; Subtract with carry (long,X) $91FFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000191.l,X		; FF 91 01 00 ; Subtract with carry (long,X) $000191.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsl $0DBA84.l		; 22 84 BA 0D ; Jump to subroutine long $0DBA84.l [Writes: Stack Pointer] [Flow: call]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$FC.b		; 69 FC ; Add #$FC.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$B6.b		; A9 B6 ; Load #$B6.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $B867.w		; 20 67 B8 ; Jump to subroutine at $B867.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9F3.w		; 20 F3 D9 ; Jump to subroutine at $D9F3.w [Writes: Stack Pointer] [Flow: call]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $66		; D0 66 ; Branch if not equal to $D0, $66 [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $28		; F0 28 ; Branch if equal to $F0, $28 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $1C		; 90 1C ; Branch if carry clear to $90, $1C [Flow: branch]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0DE0.w,X		; 1D E0 0D ; OR accumulator with memory $0DE0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $B74A.w,Y		; B9 4A B7 ; Load $B74A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $B74C.w,Y		; B9 4C B7 ; Load $B74C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $F154.w		; 20 54 F1 ; Jump to subroutine at $F154.w [Writes: Stack Pointer] [Flow: call]
	lda $0E90.w,X		; BD 90 0E ; Load $0E90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $2A		; D0 2A ; Branch if not equal to $D0, $2A [Flow: branch]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	ldy $0D90.w,X		; BC 90 0D ; Load Y register $0D90.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	jsl $06EE60.l		; 22 60 EE 06 ; Jump to subroutine long $06EE60.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	jsl $06F6CA.l		; 22 CA F6 06 ; Jump to subroutine long $06F6CA.l [Writes: Stack Pointer] [Flow: call]
	jmp $E92C.w		; 4C 2C E9 ; Jump to $E92C.w [Flow: jump]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	jsr $E229.w		; 20 29 E2 ; Jump to subroutine at $E229.w [Writes: Stack Pointer] [Flow: call]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	stz $0EF0.w,X		; 9E F0 0E ; Store zero to $0EF0.w,X [Reads: X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $B7C3.w,Y		; B9 C3 B7 ; Load $B7C3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	jsr $E96C.w		; 20 6C E9 ; Jump to subroutine at $E96C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	lda $0F80.w,X		; BD 80 0F ; Load $0F80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$02.b		; E9 02 ; Subtract #$02.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3A.b		; 00 3A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $3A3D.w,X		; 3D 3D 3A ; AND accumulator with memory $3A3D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	jmp ($6C6C.w,X)		; 7C 6C 6C ; Jump indirect indexed to ($6C6C.w,X) [Reads: X Index] [Flow: jump]
	jmp ($6B7B.w,X)		; 7C 7B 6B ; Jump indirect indexed to ($6B7B.w,X) [Reads: X Index] [Flow: jump]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $2A3C.w,X		; 3C 3C 2A ; Test bits $2A3C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sta ($80.b,X)		; 81 80 ; Store accumulator ($80.b,X) [Reads: Accumulator, X Index, Direct Page]
	.db $80, $81		; 80 81 ; Branch always to $80, $81 [Flow: branch]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	.db $90, $91		; 90 91 ; Branch if carry clear to $90, $91 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora #$49.b		; 09 49 ; Logical OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$49.b		; 09 49 ; Logical OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$89.b		; 09 89 ; Logical OR #$89.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$89.b		; 09 89 ; Logical OR #$89.b with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bit #$89.b		; 89 89 ; Test bits #$89.b with accumulator [Reads: Accumulator] [Flags: Z]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $E41E.w		; 20 1E E4 ; Jump to subroutine at $E41E.w [Writes: Stack Pointer] [Flow: call]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B807.w,X		; 7D 07 B8 ; Add $B807.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B817.w,X		; 7D 17 B8 ; Add $B817.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $07.b		; 65 07 ; Add $07.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $B827.w,X		; BD 27 B8 ; Load $B827.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $B847.w,X		; BD 47 B8 ; Load $B847.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $AF		; 10 AF ; Branch if plus to $10, $AF [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$F1.b		; 29 F1 ; Logical AND #$F1.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $7EC172.l		; AF 72 C1 7E ; Load long $7EC172.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $B8CE.w,Y		; B9 CE B8 ; Load $B8CE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0F50.w,X		; 1D 50 0F ; OR accumulator with memory $0F50.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsr $F86C.w		; 20 6C F8 ; Jump to subroutine at $F86C.w [Writes: Stack Pointer] [Flow: call]
	jsr $DC10.w		; 20 10 DC ; Jump to subroutine at $DC10.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsr $F154.w		; 20 54 F1 ; Jump to subroutine at $F154.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $0A		; 90 0A ; Branch if carry clear to $90, $0A [Flow: branch]
	jsl $0FF540.l		; 22 40 F5 0F ; Jump to subroutine long $0FF540.l [Writes: Stack Pointer] [Flow: call]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	jsl $079291.l		; 22 91 92 07 ; Jump to subroutine long $079291.l [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $01.b		; [PATTERN: Memory clearing operation] 64 01 ; Store zero to $01.b
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	stz $03.b		; 64 03 ; Store zero to $03.b
	jsl $1EA007.l		; 22 07 A0 1E ; Jump to subroutine long $1EA007.l [Writes: Stack Pointer] [Flow: call]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $0EA0.w,X		; BD A0 0E ; Load $0EA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	jsr $F2B4.w		; 20 B4 F2 ; Jump to subroutine at $F2B4.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $0EA0.w,X		; DE A0 0E ; Decrement memory $0EA0.w,X [Reads: X Index] [Flags: ZN]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	lda $7EC172.l		; AF 72 C1 7E ; Load long $7EC172.l into accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC172.l		; 8F 72 C1 7E ; Store accumulator (long) $7EC172.l [Reads: Accumulator]
	lda #$16.b		; A9 16 ; Load #$16.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda #$25.b		; A9 25 ; Load #$25.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0DD47B.l		; 22 7B D4 0D ; Jump to subroutine long $0DD47B.l [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	.db $62, $B9, $A0		; 62 B9 A0 ; Push effective relative address $62, $B9, $A0 [Writes: Stack Pointer]
	lda $B9C6.w,Y		; B9 C6 B9 ; Load $B9C6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	lda $D022.w,Y		; B9 22 D0 ; Load $D022.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	pea $B007.w		; F4 07 B0 ; Push absolute address $B007.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ora $F15420.l,X		; 1F 20 54 F1 ; Logical OR long $F15420.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $90, $1A		; 90 1A ; Branch if carry clear to $90, $1A [Flow: branch]
	lda $7EF35C.l		; AF 5C F3 7E ; Load long $7EF35C.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $7EF35D.l		; 0F 5D F3 7E ; OR accumulator with memory (long) $7EF35D.l [Writes: Accumulator] [Flags: ZN]
	ora $7EF35E.l		; 0F 5E F3 7E ; OR accumulator with memory (long) $7EF35E.l [Writes: Accumulator] [Flags: ZN]
	ora $7EF35F.l		; 0F 5F F3 7E ; OR accumulator with memory (long) $7EF35F.l [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	inc $02E4.w		; EE E4 02 ; Increment $02E4.w [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $0C08.w		; 0C 08 0C ; Test and set bits $0C08.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $BD		; 10 BD ; Branch if plus to $10, $BD [Flow: branch]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	ldy $0D90.w,X		; BC 90 0D ; Load Y register $0D90.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $B991.w,Y		; B9 91 B9 ; Load $B991.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $0D		; 30 0D ; Branch if minus to $30, $0D [Flow: branch]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $B999.w,Y		; B9 99 B9 ; Load $B999.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	inc $0D90.w,X		; FE 90 0D ; Increment memory $0D90.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$21.b		; A0 21 ; Load #$21.b into Y register [Writes: Y Index] [Flags: ZN]
	stz $02E9.w		; 9C E9 02 ; Store zero to $02E9.w
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0799AD.l		; 22 AD 99 07 ; Jump to subroutine long $0799AD.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	asl $03.b		; 06 03 ; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: ZNC]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $0100.w		; 0C 00 01 ; Test and set bits $0100.w [Reads: Accumulator] [Flags: Z]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $BB22.w		; 20 22 BB ; Jump to subroutine at $BB22.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	.db $10, $BA		; 10 BA ; Branch if plus to $10, $BA [Flow: branch]
	and ($BA.b,S),Y		; 33 BA ; AND accumulator (stack relative indirect indexed) ($BA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	dec $0DA0.w,X		; DE A0 0D ; Decrement memory $0DA0.w,X [Reads: X Index] [Flags: ZN]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DA0.w,X		; 9D A0 0D ; Store accumulator to $0DA0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $29		; D0 29 ; Branch if not equal to $D0, $29 [Flow: branch]
	inc $0D90.w,X		; FE 90 0D ; Increment memory $0D90.w,X [Reads: X Index] [Flags: ZN]
	ldy $0D90.w,X		; BC 90 0D ; Load Y register $0D90.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$0A.b		; C0 0A ; Compare #$0A.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	inc $0642.w		; EE 42 06 ; Increment $0642.w [Flags: ZN]
	lda #$25.b		; A9 25 ; Load #$25.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B9E6.w,Y		; B9 E6 B9 ; Load $B9E6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $B9F0.w,Y		; B9 F0 B9 ; Load $B9F0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $14.b		; 04 14 ; Test and set bits $14.b [Reads: Accumulator] [Flags: Z]
	jmp.w [$0420]		; DC 20 04 ; Jump long indirect [$0420] [Flow: jump]
	tsb $20DD.w		; 0C DD 20 ; Test and set bits $20DD.w [Reads: Accumulator] [Flags: Z]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	cmp $0420.w,X		; DD 20 04 ; Compare accumulator $0420.w,X [Reads: X Index] [Flags: ZNC]
	tsb $20DD.w		; 0C DD 20 ; Test and set bits $20DD.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	jsr $0C03.w		; 20 03 0C ; Jump to subroutine at $0C03.w [Writes: Stack Pointer] [Flow: call]
	cmp $0320.w,X		; DD 20 03 ; Compare accumulator $0320.w,X [Reads: X Index] [Flags: ZNC]
	trb $DC.b		; 14 DC ; Test and reset bits $DC.b [Reads: Accumulator] [Flags: Z]
	jsr $1403.w		; 20 03 14 ; Jump to subroutine at $1403.w [Writes: Stack Pointer] [Flow: call]
	jmp.w [$0320]		; DC 20 03 ; Jump long indirect [$0320] [Flow: jump]
	trb $DC.b		; 14 DC ; Test and reset bits $DC.b [Reads: Accumulator] [Flags: Z]
	jsr $0000.w		; 20 00 00 ; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	jsr $08F8.w		; 20 F8 08 ; Jump to subroutine at $08F8.w [Writes: Stack Pointer] [Flow: call]
	nop		; EA ; No operation
	jsr $0800.w		; 20 00 08 ; Jump to subroutine at $0800.w [Writes: Stack Pointer] [Flow: call]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jsr $10F8.w		; 20 F8 10 ; Jump to subroutine at $10F8.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsr $1000.w		; 20 00 10 ; Jump to subroutine at $1000.w [Writes: Stack Pointer] [Flow: call]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	jsr $0000.w		; 20 00 00 ; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	jsr $04F4.w		; 20 F4 04 ; Jump to subroutine at $04F4.w [Writes: Stack Pointer] [Flow: call]
	cpy $FC20.w		; CC 20 FC ; Compare $FC20.w with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $CD.b		; 04 CD ; Test and set bits $CD.b [Reads: Accumulator] [Flags: Z]
	jsr $04FC.w		; 20 FC 04 ; Jump to subroutine at $04FC.w [Writes: Stack Pointer] [Flow: call]
	cmp $FC20.w		; CD 20 FC ; Compare $FC20.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	tsb $CD.b		; 04 CD ; Test and set bits $CD.b [Reads: Accumulator] [Flags: Z]
	jsr $0000.w		; 20 00 00 ; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	jsr $04F6.w		; 20 F6 04 ; Jump to subroutine at $04F6.w [Writes: Stack Pointer] [Flow: call]
	cpy $FC20.w		; CC 20 FC ; Compare $FC20.w with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $CD.b		; 04 CD ; Test and set bits $CD.b [Reads: Accumulator] [Flags: Z]
	jsr $04FC.w		; 20 FC 04 ; Jump to subroutine at $04FC.w [Writes: Stack Pointer] [Flow: call]
	cmp $FC20.w		; CD 20 FC ; Compare $FC20.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	tsb $CD.b		; 04 CD ; Test and set bits $CD.b [Reads: Accumulator] [Flags: Z]
	jsr $0000.w		; 20 00 00 ; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	jsr $04F8.w		; 20 F8 04 ; Jump to subroutine at $04F8.w [Writes: Stack Pointer] [Flow: call]
	cpy $FC20.w		; CC 20 FC ; Compare $FC20.w with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $CD.b		; 04 CD ; Test and set bits $CD.b [Reads: Accumulator] [Flags: Z]
	jsr $04FC.w		; 20 FC 04 ; Jump to subroutine at $04FC.w [Writes: Stack Pointer] [Flow: call]
	cmp $FC20.w		; CD 20 FC ; Compare $FC20.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	tsb $CD.b		; 04 CD ; Test and set bits $CD.b [Reads: Accumulator] [Flags: Z]
	jsr $0000.w		; 20 00 00 ; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	jsr $0304.w		; 20 04 03 ; Jump to subroutine at $0304.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tsb $CC.b		; 04 CC ; Test and set bits $CC.b [Reads: Accumulator] [Flags: Z]
	jsr $04FC.w		; 20 FC 04 ; Jump to subroutine at $04FC.w [Writes: Stack Pointer] [Flow: call]
	cmp $FC20.w		; CD 20 FC ; Compare $FC20.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	tsb $CD.b		; 04 CD ; Test and set bits $CD.b [Reads: Accumulator] [Flags: Z]
	jsr $0000.w		; 20 00 00 ; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	jsr $0304.w		; 20 04 03 ; Jump to subroutine at $0304.w [Writes: Stack Pointer] [Flow: call]
	sbc ($20.b),Y		; F1 20 ; Subtract with carry ($20.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tsb $CC.b		; 04 CC ; Test and set bits $CC.b [Reads: Accumulator] [Flags: Z]
	jsr $04FC.w		; 20 FC 04 ; Jump to subroutine at $04FC.w [Writes: Stack Pointer] [Flow: call]
	cmp $FC20.w		; CD 20 FC ; Compare $FC20.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	tsb $CD.b		; 04 CD ; Test and set bits $CD.b [Reads: Accumulator] [Flags: Z]
	jsr $0000.w		; 20 00 00 ; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	jsr $0608.w		; 20 08 06 ; Jump to subroutine at $0608.w [Writes: Stack Pointer] [Flow: call]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	.db $62, $BA, $76		; 62 BA 76 ; Push effective relative address $62, $BA, $76 [Writes: Stack Pointer]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	stz $B2BA.w,X		; 9E BA B2 ; Store zero to $B2BA.w,X [Reads: X Index]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	dec $BA.b		; C6 BA ; Decrement $BA.b [Reads: Direct Page] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	inc $20BA.w		; EE BA 20 ; Increment $20BA.w [Flags: ZN]
	jmp ($20F8.w)		; 6C F8 20 ; Jump indirect to ($20F8.w) [Flow: jump]
	asl $BDE4.w,X		; 1E E4 BD ; Arithmetic shift left $BDE4.w,X [Reads: X Index] [Flags: ZNC]
	.db $50, $0F		; 50 0F ; Branch if overflow clear to $50, $0F [Flow: branch]
	ldy $0ABD.w		; AC BD 0A ; Load $0ABD.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	ora #$0E.b		; 09 0E ; Logical OR #$0E.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	and #$F1.b		; 29 F1 ; Logical AND #$F1.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx $BB12.w,Y		; BE 12 BB ; Load X register $BB12.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda $90.b		; A5 90 ; Load $90.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	inc $92.b		; E6 92 ; Increment $92.b [Reads: Direct Page] [Flags: ZN]
	lda #$0013.w		; A9 13 00 ; Load #$0013.w into accumulator [Writes: Accumulator] [Flags: ZN]
	mvn $06,$00		; 54 00 06 ; Move block negative $06,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	ldy $90.b		; A4 90 ; Load $90.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0FA8.w		; 6D A8 0F ; Add $0FA8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0000.w,Y		; 79 00 00 ; Add $0000.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0000.w,Y		; 99 00 00 ; Store accumulator to $0000.w,Y [Reads: Accumulator, Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0004.w,Y		; 79 04 00 ; Add $0004.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0004.w,Y		; 99 04 00 ; Store accumulator to $0004.w,Y [Reads: Accumulator, Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0008.w,Y		; 79 08 00 ; Add $0008.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0008.w,Y		; 99 08 00 ; Store accumulator to $0008.w,Y [Reads: Accumulator, Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $000C.w,Y		; 79 0C 00 ; Add $000C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $000C.w,Y		; 99 0C 00 ; Store accumulator to $000C.w,Y [Reads: Accumulator, Y Index]
	lda $0FA8.w		; AD A8 0F ; Load $0FA8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0010.w,Y		; 79 10 00 ; Add $0010.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0010.w,Y		; 99 10 00 ; Store accumulator to $0010.w,Y [Reads: Accumulator, Y Index]
	lsr $01.b		; 46 01 ; Logical shift right $01.b [Reads: Direct Page] [Flags: ZNC]
	lda $0FA9.w		; AD A9 0F ; Load $0FA9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $01.b		; E5 01 ; Subtract $01.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0001.w,Y		; 79 01 00 ; Add $0001.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0001.w,Y		; 99 01 00 ; Store accumulator to $0001.w,Y [Reads: Accumulator, Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0005.w,Y		; 79 05 00 ; Add $0005.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0005.w,Y		; 99 05 00 ; Store accumulator to $0005.w,Y [Reads: Accumulator, Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0009.w,Y		; 79 09 00 ; Add $0009.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0009.w,Y		; 99 09 00 ; Store accumulator to $0009.w,Y [Reads: Accumulator, Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $000D.w,Y		; 79 0D 00 ; Add $000D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $000D.w,Y		; 99 0D 00 ; Store accumulator to $000D.w,Y [Reads: Accumulator, Y Index]
	lda $0FA9.w		; AD A9 0F ; Load $0FA9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0011.w,Y		; 79 11 00 ; Add $0011.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0011.w,Y		; 99 11 00 ; Store accumulator to $0011.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0003.w,Y		; 19 03 00 ; OR accumulator with memory $0003.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0003.w,Y		; 99 03 00 ; Store accumulator to $0003.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0007.w,Y		; 19 07 00 ; OR accumulator with memory $0007.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0007.w,Y		; 99 07 00 ; Store accumulator to $0007.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $000B.w,Y		; 19 0B 00 ; OR accumulator with memory $000B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $000B.w,Y		; 99 0B 00 ; Store accumulator to $000B.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $000F.w,Y		; 19 0F 00 ; OR accumulator with memory $000F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $000F.w,Y		; 99 0F 00 ; Store accumulator to $000F.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0013.w,Y		; 19 13 00 ; OR accumulator with memory $0013.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0013.w,Y		; 99 13 00 ; Store accumulator to $0013.w,Y [Reads: Accumulator, Y Index]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$0200.w		; A9 00 02 ; Load #$0200.w into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $FEBC.w		; 20 BC FE ; Jump to subroutine at $FEBC.w [Writes: Stack Pointer] [Flow: call]
	lda $0F20.w,X		; BD 20 0F ; Load $0F20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $EE.b		; C5 EE ; Compare $EE.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $BCAB.w		; 4C AB BC ; Jump to $BCAB.w [Flow: jump]
	stz $0DB0.w,X		; 9E B0 0D ; Store zero to $0DB0.w,X [Reads: X Index]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $BA62.w,Y		; B9 62 BA ; Load $BA62.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D10.w,X		; 7D 10 0D ; Add $0D10.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	stz $0A.b		; 64 0A ; Store zero to $0A.b
	lda $BA62.w,Y		; B9 62 BA ; Load $BA62.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	dec $0A.b		; C6 0A ; Decrement $0A.b [Reads: Direct Page] [Flags: ZN]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $0D30.w,X		; 7D 30 0D ; Add $0D30.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $BA63.w,Y		; B9 63 BA ; Load $BA63.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D00.w,X		; 7D 00 0D ; Add $0D00.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	stz $0B.b		; 64 0B ; Store zero to $0B.b
	lda $BA63.w,Y		; B9 63 BA ; Load $BA63.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	dec $0B.b		; C6 0B ; Decrement $0B.b [Reads: Direct Page] [Flags: ZN]
	lda $0B.b		; A5 0B ; Load $0B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $0D20.w,X		; 7D 20 0D ; Add $0D20.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $BB02.w,Y		; B9 02 BB ; Load $BB02.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $BB03.w,Y		; B9 03 BB ; Load $BB03.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	jsr $F70A.w		; 20 0A F7 ; Jump to subroutine at $F70A.w [Writes: Stack Pointer] [Flow: call]
	jsr $F836.w		; 20 36 F8 ; Jump to subroutine at $F836.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $2D		; 90 2D ; Branch if carry clear to $90, $2D [Flow: branch]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$13.b		; 69 13 ; Add #$13.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	jsr $EAA4.w		; 20 A4 EA ; Jump to subroutine at $EAA4.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	inc $0DB0.w,X		; FE B0 0D ; Increment memory $0DB0.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	jsr $F154.w		; 20 54 F1 ; Jump to subroutine at $F154.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $0A		; 90 0A ; Branch if carry clear to $90, $0A [Flow: branch]
	jsl $0FF540.l		; 22 40 F5 0F ; Jump to subroutine long $0FF540.l [Writes: Stack Pointer] [Flow: call]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	jsl $079291.l		; 22 91 92 07 ; Jump to subroutine long $079291.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $BDAC.w		; 20 AC BD ; Jump to subroutine at $BDAC.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsl $1EF4F3.l		; 22 F3 F4 1E ; Jump to subroutine long $1EF4F3.l [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	cmp #$BC.b		; C9 BC ; Compare #$BC.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora ($BD.b,X)		; 01 BD ; Logical OR ($BD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $46BD.w		; 20 BD 46 ; Jump to subroutine at $46BD.w [Writes: Stack Pointer] [Flow: call]
	lda $BD8A.w,X		; BD 8A BD ; Load $BD8A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($BD.b,S),Y		; 93 BD ; Store accumulator (stack relative indirect indexed) ($BD.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	jsr $84C1.w		; 20 C1 84 ; Jump to subroutine at $84C1.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	jsl $06E496.l		; 22 96 E4 06 ; Jump to subroutine long $06E496.l [Writes: Stack Pointer] [Flow: call]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stz $02F9.w		; 9C F9 02 ; Store zero to $02F9.w
	jsl $00D423.l		; 22 23 D4 00 ; Jump to subroutine long $00D423.l [Writes: Stack Pointer] [Flow: call]
	jsl $099EFC.l		; 22 FC 9E 09 ; Jump to subroutine long $099EFC.l [Writes: Stack Pointer] [Flow: call]
	plx		; [PATTERN: Memory clearing operation] FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02CD.w		; 8D CD 02 ; Store accumulator to $02CD.w [Reads: Accumulator]
	stz $02CE.w		; 9C CE 02 ; Store zero to $02CE.w
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $07F4D0.l		; 22 D0 F4 07 ; Jump to subroutine long $07F4D0.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $1F		; B0 1F ; Branch if carry set to $B0, $1F [Flow: branch]
	lda $7EF3D3.l		; AF D3 F3 7E ; Load long $7EF3D3.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $0F		; 90 0F ; Branch if carry clear to $90, $0F [Flow: branch]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1F0.l		; 22 F0 E1 05 ; Jump to subroutine long $05E1F0.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $31		; D0 31 ; Branch if not equal to $D0, $31 [Flow: branch]
	lda $7EF3D3.l		; AF D3 F3 7E ; Load long $7EF3D3.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$16.b		; A0 16 ; Load #$16.b into Y register [Writes: Y Index] [Flags: ZN]
	stz $02E9.w		; 9C E9 02 ; Store zero to $02E9.w
	jsl $0799AD.l		; 22 AD 99 07 ; Jump to subroutine long $0799AD.l [Writes: Stack Pointer] [Flow: call]
	lda $7EF3C9.l		; AF C9 F3 7E ; Load long $7EF3C9.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$10.b		; 09 10 ; Logical OR #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3C9.l		; 8F C9 F3 7E ; Store accumulator (long) $7EF3C9.l [Reads: Accumulator]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $0000EA.l,X		; FF EA 00 00 ; Subtract with carry (long,X) $0000EA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $85.b		; 02 85 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $64.b		; 06 64 ; Arithmetic shift left $64.b [Reads: Direct Page] [Flags: ZNC]
	ora [$A9.b]		; 07 A9 ; OR accumulator with memory (long) [$A9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $0885.w		; 9C 85 08 ; Store zero to $0885.w
	lda #$BD.b		; A9 BD ; Load #$BD.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	jsl $05DF75.l		; 22 75 DF 05 ; Jump to subroutine long $05DF75.l [Writes: Stack Pointer] [Flow: call]
	jmp $DC64.w		; 4C 64 DC ; Jump to $DC64.w [Flow: jump]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	.db $D0, $BD		; D0 BD ; Branch if not equal to $D0, $BD [Flow: branch]
	ldy $BE.b,X		; B4 BE ; Load Y register $BE.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ora $BF.b,X		; 15 BF ; OR accumulator with memory $BF.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($BF.b,X)		; 81 BF ; Store accumulator ($BF.b,X) [Reads: Accumulator, X Index, Direct Page]
	jsl $04EA60.l		; 22 60 EA 04 ; Jump to subroutine long $04EA60.l [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F60.w,X		; 9D 60 0F ; Store accumulator to $0F60.w,X [Reads: Accumulator, X Index]
	jsr $F154.w		; 20 54 F1 ; Jump to subroutine at $F154.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $0A		; 90 0A ; Branch if carry clear to $90, $0A [Flow: branch]
	jsl $0FF540.l		; 22 40 F5 0F ; Jump to subroutine long $0FF540.l [Writes: Stack Pointer] [Flow: call]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	jsl $0791B9.l		; 22 B9 91 07 ; Jump to subroutine long $0791B9.l [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $BE39.w,X		; BD 39 BE ; Load $BE39.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $BE89BE.l,X		; 5F BE 89 BE ; Exclusive OR accumulator with memory (long,X) $BE89BE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F60.w,X		; 9D 60 0F ; Store accumulator to $0F60.w,X [Reads: Accumulator, X Index]
	jsr $F154.w		; 20 54 F1 ; Jump to subroutine at $F154.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $14		; 90 14 ; Branch if carry clear to $90, $14 [Flow: branch]
	lda $F6.b		; A5 F6 ; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	ldy $0E90.w,X		; BC 90 0E ; Load Y register $0E90.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
	lda $0E10.w,X		; BD 10 0E ; Load $0E10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda #$A0.b		; A9 A0 ; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E10.w,X		; 9D 10 0E ; Store accumulator to $0E10.w,X [Reads: Accumulator, X Index]
	jsr $BEED.w		; 20 ED BE ; Jump to subroutine at $BEED.w [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E90.w,X		; 9D 90 0E ; Store accumulator to $0E90.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: ZNC]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	cop $64.b		; 02 64 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $F0BD.w,X		; 1E BD F0 ; Arithmetic shift left $F0BD.w,X [Reads: X Index] [Flags: ZNC]
	ora $14D0.w		; 0D D0 14 ; Logical OR $14D0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $0D90.w,X		; BC 90 0D ; Load Y register $0D90.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $BE2A.w,Y		; B9 2A BE ; Load $BE2A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $0D		; 30 0D ; Branch if minus to $30, $0D [Flow: branch]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $BE32.w,Y		; B9 32 BE ; Load $BE32.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	inc $0D90.w,X		; FE 90 0D ; Increment memory $0D90.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$D7.b		; A9 D7 ; Load #$D7.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7EF280.l,X		; BF 80 F2 7E ; Load long $7EF280.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF280.l,X		; 9F 80 F2 7E ; Store accumulator (long,X) $7EF280.l,X [Reads: Accumulator, X Index]
	ldy #$16.b		; A0 16 ; Load #$16.b into Y register [Writes: Y Index] [Flags: ZN]
	stz $02E9.w		; 9C E9 02 ; Store zero to $02E9.w
	jsl $0799AD.l		; 22 AD 99 07 ; Jump to subroutine long $0799AD.l [Writes: Stack Pointer] [Flow: call]
	lda $7EF3C9.l		; AF C9 F3 7E ; Load long $7EF3C9.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3C9.l		; [PATTERN: Memory clearing operation] 8F C9 F3 7E ; Store accumulator (long) $7EF3C9.l [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	stz $0DC0.w,X		; 9E C0 0D ; Store zero to $0DC0.w,X [Reads: X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$A0.b		; A9 A0 ; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	jsr $BEED.w		; 20 ED BE ; Jump to subroutine at $BEED.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$2B.b		; A9 2B ; Load #$2B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $0C		; 30 0C ; Branch if minus to $30, $0C [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,Y		; 99 80 0E ; Store accumulator to $0E80.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBA88.l		; 22 88 BA 0D ; Jump to subroutine long $0DBA88.l [Writes: Stack Pointer] [Flow: call]
	jsr $DCEF.w		; 20 EF DC ; Jump to subroutine at $DCEF.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	inc $0DC0.w,X		; FE C0 0D ; Increment memory $0DC0.w,X [Reads: X Index] [Flags: ZN]
	jsr $E96C.w		; 20 6C E9 ; Jump to subroutine at $E96C.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$2B.b		; A9 2B ; Load #$2B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $1F		; 30 1F ; Branch if minus to $30, $1F [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,Y		; 99 80 0E ; Store accumulator to $0E80.w,Y [Reads: Accumulator, Y Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,Y		; 99 80 0F ; Store accumulator to $0F80.w,Y [Reads: Accumulator, Y Index]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0E00.w,Y		; 99 00 0E ; Store accumulator to $0E00.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $DCEF.w		; 20 EF DC ; Jump to subroutine at $DCEF.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	jsr $BFAF.w		; 20 AF BF ; Jump to subroutine at $BFAF.w [Writes: Stack Pointer] [Flow: call]
	lda #$2F.b		; A9 2F ; Load #$2F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$2B.b		; A9 2B ; Load #$2B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $29		; 30 29 ; Branch if minus to $30, $29 [Flow: branch]
	lda #$94.b		; A9 94 ; Load #$94.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda #$3F.b		; A9 3F ; Load #$3F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,Y		; 99 80 0E ; Store accumulator to $0E80.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	jsr $BF0F.w		; 20 0F BF ; Jump to subroutine at $BF0F.w [Writes: Stack Pointer] [Flow: call]
	lda $0F50.w,Y		; B9 50 0F ; Load $0F50.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$F1.b		; 29 F1 ; Logical AND #$F1.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $DCEF.w		; 20 EF DC ; Jump to subroutine at $DCEF.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E96C.w		; 20 6C E9 ; Jump to subroutine at $E96C.w [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $BF7D.w,Y		; 19 7D BF ; OR accumulator with memory $BF7D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$2B.b		; A9 2B ; Load #$2B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $28		; 30 28 ; Branch if minus to $30, $28 [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,Y		; 99 80 0E ; Store accumulator to $0E80.w,Y [Reads: Accumulator, Y Index]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,Y		; 99 80 0F ; Store accumulator to $0F80.w,Y [Reads: Accumulator, Y Index]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	jsr $BF0F.w		; 20 0F BF ; Jump to subroutine at $BF0F.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05DB86.l		; 22 86 DB 05 ; Jump to subroutine long $05DB86.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05DA29.l		; 22 29 DA 05 ; Jump to subroutine long $05DA29.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05B5C3.l		; 22 C3 B5 05 ; Jump to subroutine long $05B5C3.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1E8B11.l		; 22 11 8B 1E ; Jump to subroutine long $1E8B11.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1DC21A.l		; 22 1A C2 1D ; Jump to subroutine long $1DC21A.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1EE8F1.l		; 22 F1 E8 1E ; Jump to subroutine long $1EE8F1.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05D53B.l		; 22 3B D5 05 ; Jump to subroutine long $05D53B.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05D6BC.l		; 22 BC D6 05 ; Jump to subroutine long $05D6BC.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1EF6A1.l		; 22 A1 F6 1E ; Jump to subroutine long $1EF6A1.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05F296.l		; 22 96 F2 05 ; Jump to subroutine long $05F296.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05E00B.l		; 22 0B E0 05 ; Jump to subroutine long $05E00B.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05E24D.l		; 22 4D E2 05 ; Jump to subroutine long $05E24D.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05E28C.l		; 22 8C E2 05 ; Jump to subroutine long $05E28C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05E2EA.l		; 22 EA E2 05 ; Jump to subroutine long $05E2EA.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05E675.l		; 22 75 E6 05 ; Jump to subroutine long $05E675.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05E3A7.l		; 22 A7 E3 05 ; Jump to subroutine long $05E3A7.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05E675.l		; 22 75 E6 05 ; Jump to subroutine long $05E675.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05E3F3.l		; 22 F3 E3 05 ; Jump to subroutine long $05E3F3.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1AF5A5.l		; 22 A5 F5 1A ; Jump to subroutine long $1AF5A5.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05E62B.l		; 22 2B E6 05 ; Jump to subroutine long $05E62B.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05FACA.l		; 22 CA FA 05 ; Jump to subroutine long $05FACA.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05FBEF.l		; 22 EF FB 05 ; Jump to subroutine long $05FBEF.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05FF5E.l		; 22 5E FF 05 ; Jump to subroutine long $05FF5E.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05E69A.l		; 22 9A E6 05 ; Jump to subroutine long $05E69A.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05E8A2.l		; 22 A2 E8 05 ; Jump to subroutine long $05E8A2.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05E88E.l		; 22 8E E8 05 ; Jump to subroutine long $05E88E.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05EA71.l		; 22 71 EA 05 ; Jump to subroutine long $05EA71.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05EC96.l		; 22 96 EC 05 ; Jump to subroutine long $05EC96.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05EBC7.l		; 22 C7 EB 05 ; Jump to subroutine long $05EBC7.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05F469.l		; 22 69 F4 05 ; Jump to subroutine long $05F469.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05EE70.l		; 22 70 EE 05 ; Jump to subroutine long $05EE70.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05EE4B.l		; 22 4B EE 05 ; Jump to subroutine long $05EE4B.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05EEA7.l		; 22 A7 EE 05 ; Jump to subroutine long $05EEA7.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05EEA6.l		; 22 A6 EE 05 ; Jump to subroutine long $05EEA6.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05F0CD.l		; 22 CD F0 05 ; Jump to subroutine long $05F0CD.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05F62B.l		; 22 2B F6 05 ; Jump to subroutine long $05F62B.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05F521.l		; 22 21 F5 05 ; Jump to subroutine long $05F521.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05EF3F.l		; 22 3F EF 05 ; Jump to subroutine long $05EF3F.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05EF01.l		; 22 01 EF 05 ; Jump to subroutine long $05EF01.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05F018.l		; 22 18 F0 05 ; Jump to subroutine long $05F018.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $05EF01.l		; 22 01 EF 05 ; Jump to subroutine long $05EF01.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $06AF3B.l		; 22 3B AF 06 ; Jump to subroutine long $06AF3B.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0DC6DE.l		; 22 DE C6 0D ; Jump to subroutine long $0DC6DE.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0DC2D1.l		; 22 D1 C2 0D ; Jump to subroutine long $0DC2D1.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0DC4A5.l		; 22 A5 C4 0D ; Jump to subroutine long $0DC4A5.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0DC50B.l		; 22 0B C5 0D ; Jump to subroutine long $0DC50B.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0DC75A.l		; 22 5A C7 0D ; Jump to subroutine long $0DC75A.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0DCB54.l		; 22 54 CB 0D ; Jump to subroutine long $0DCB54.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0DCBEA.l		; 22 EA CB 0D ; Jump to subroutine long $0DCBEA.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1DF943.l		; 22 43 F9 1D ; Jump to subroutine long $1DF943.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $10		; [PATTERN: Memory clearing operation] F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	stz $0DE0.w,X		; 9E E0 0D ; Store zero to $0DE0.w,X [Reads: X Index]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	stz $48.b		; 64 48 ; Store zero to $48.b
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	lda #$81.b		; A9 81 ; Load #$81.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $5E.b		; 85 5E ; Store accumulator to $5E.b [Reads: Accumulator]
	jsr $C264.w		; 20 64 C2 ; Jump to subroutine at $C264.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsr $C277.w		; 20 77 C2 ; Jump to subroutine at $C277.w [Writes: Stack Pointer] [Flow: call]
	stz $0642.w		; 9C 42 06 ; Store zero to $0642.w
	jsr $C203.w		; 20 03 C2 ; Jump to subroutine at $C203.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0642.w		; 8D 42 06 ; Store accumulator to $0642.w [Reads: Accumulator]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $84C1.w		; 20 C1 84 ; Jump to subroutine at $84C1.w [Writes: Stack Pointer] [Flow: call]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	jsr $CF5D.w		; 20 5D CF ; Jump to subroutine at $CF5D.w [Writes: Stack Pointer] [Flow: call]
	jsr $F154.w		; 20 54 F1 ; Jump to subroutine at $F154.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $45		; 90 45 ; Branch if carry clear to $90, $45 [Flow: branch]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	jsl $079291.l		; 22 91 92 07 ; Jump to subroutine long $079291.l [Writes: Stack Pointer] [Flow: call]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $32		; D0 32 ; Branch if not equal to $D0, $32 [Flow: branch]
	jsr $EAA4.w		; 20 A4 EA ; Jump to subroutine at $EAA4.w [Writes: Stack Pointer] [Flow: call]
	lda $C0E2.w,Y		; B9 E2 C0 ; Load $C0E2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $C0E4.w,Y		; B9 E4 C0 ; Load $C0E4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $0376.w		; AD 76 03 ; Load $0376.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	jsl $0FF540.l		; 22 40 F5 0F ; Jump to subroutine long $0FF540.l [Writes: Stack Pointer] [Flow: call]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	lda $0F10.w,X		; BD 10 0F ; Load $0F10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F10.w,X		; 9D 10 0F ; Store accumulator to $0F10.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0FF540.l		; 22 40 F5 0F ; Jump to subroutine long $0FF540.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $22.b		; E5 22 ; Subtract $22.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0023.w		; C9 23 00 ; Compare #$0023.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $51		; B0 51 ; Branch if carry set to $B0, $51 [Flow: branch]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $20.b		; E5 20 ; Subtract $20.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0024.w		; C9 24 00 ; Compare #$0024.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $42		; B0 42 ; Branch if carry set to $B0, $42 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsr $EAA4.w		; 20 A4 EA ; Jump to subroutine at $EAA4.w [Writes: Stack Pointer] [Flow: call]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $C0DA.w,Y		; D9 DA C0 ; Compare accumulator $C0DA.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $D0, $36		; D0 36 ; Branch if not equal to $D0, $36 [Flow: branch]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $31		; D0 31 ; Branch if not equal to $D0, $31 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02FA.w		; 8D FA 02 ; Store accumulator to $02FA.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda $0376.w		; AD 76 03 ; Load $0376.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $38		; F0 38 ; Branch if equal to $F0, $38 [Flow: branch]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $C0DE.w,Y		; 39 DE C0 ; AND accumulator with memory $C0DE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $31		; F0 31 ; Branch if equal to $F0, $31 [Flow: branch]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $31.b		; 05 31 ; Logical OR $31.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $2B		; F0 2B ; Branch if equal to $F0, $2B [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $C0E2.w,Y		; B9 E2 C0 ; Load $C0E2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $C0E4.w,Y		; B9 E4 C0 ; Load $C0E4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	jmp $C14A.w		; [PATTERN: Memory clearing operation] 4C 4A C1 ; Jump to $C14A.w [Flow: jump]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	stz $0D90.w,X		; 9E 90 0D ; Store zero to $0D90.w,X [Reads: X Index]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	stz $0376.w		; [PATTERN: Memory clearing operation] 9C 76 03 ; Store zero to $0376.w
	stz $02FA.w		; 9C FA 02 ; Store zero to $02FA.w
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $0C.b,S		; 03 0C ; OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0C.b,S		; 03 0C ; OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $230C.w		; 0C 0C 23 ; Test and set bits $230C.w [Reads: Accumulator] [Flags: Z]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $C1FB.w,Y		; 79 FB C1 ; Add $C1FB.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $C1F7.w,Y		; 79 F7 C1 ; Add $C1F7.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda $0F20.w,X		; BD 20 0F ; Load $0F20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsl $06E87B.l		; 22 7B E8 06 ; Jump to subroutine long $06E87B.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $0FA5.w		; AD A5 0F ; Load $0FA5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $C1FF.w		; CD FF C1 ; Compare $C1FF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cmp $C200.w		; CD 00 C2 ; Compare $C200.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp $C201.w		; CD 01 C2 ; Compare $C201.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp $C202.w		; CD 02 C2 ; Compare $C202.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $BD		; 10 BD ; Branch if plus to $10, $BD [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $0000C2.l,X		; FF C2 00 00 ; Subtract with carry (long,X) $0000C2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0040C2.l,X		; FF C2 40 00 ; Subtract with carry (long,X) $0040C2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $C2.b		; 02 C2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $4CA9.w		; 20 A9 4C ; Jump to subroutine at $4CA9.w [Writes: Stack Pointer] [Flow: call]
	rep #$85		; C2 85 ; Reset processor status bits #$85 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $E2.b		; 06 E2 ; Arithmetic shift left $E2.b [Reads: Direct Page] [Flags: ZNC]
	.db $30, $22		; 30 22 ; Branch if minus to $30, $22 [Flow: branch]
	adc $DF.b,X		; 75 DF ; Add $DF.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $60.b		; 05 60 ; Logical OR $60.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$1C.b		; C9 1C ; Compare #$1C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $5F		; F0 5F ; Branch if equal to $F0, $5F [Flow: branch]
	cpy $0FA0.w		; CC A0 0F ; Compare $0FA0.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $5A		; F0 5A ; Branch if equal to $F0, $5A [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $53		; D0 53 ; Branch if not equal to $D0, $53 [Flow: branch]
	lda $0DD0.w,Y		; B9 D0 0D ; Load $0DD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $4C		; 90 4C ; Branch if carry clear to $90, $4C [Flow: branch]
	lda $0D10.w,Y		; B9 10 0D ; Load $0D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $04.b		; E5 04 ; Subtract $04.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0018.w		; C9 18 00 ; Compare #$0018.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $27		; B0 27 ; Branch if carry set to $B0, $27 [Flow: branch]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $06.b		; E5 06 ; Subtract $06.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0024.w		; C9 24 00 ; Compare #$0024.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $18		; B0 18 ; Branch if carry set to $B0, $18 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EA0.w,Y		; 99 A0 0E ; Store accumulator to $0EA0.w,Y [Reads: Accumulator, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $EA2D.w		; 20 2D EA ; Jump to subroutine at $EA2D.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0F30.w,Y		; 99 30 0F ; Store accumulator to $0F30.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0F40.w,Y		; 99 40 0F ; Store accumulator to $0F40.w,Y [Reads: Accumulator, Y Index]
.ACCU 8
	sep #$20		; E2 20
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $95		; 10 95 ; Branch if plus to $10, $95 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E41A.w		; 20 1A E4 ; Jump to subroutine at $E41A.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $7EF34C.l		; AF 4C F3 7E ; Load long $7EF34C.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF34C.l		; AF 4C F3 7E ; Load long $7EF34C.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $1410.w		; 0C 10 14 ; Test and set bits $1410.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	jsr $0428.w		; 20 28 04 ; Jump to subroutine at $0428.w [Writes: Stack Pointer] [Flow: call]
	bit $BD.b		; 24 BD ; Test bits $BD.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	.db $D0, $72		; D0 72 ; Branch if not equal to $D0, $72 [Flow: branch]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsr $E41A.w		; 20 1A E4 ; Jump to subroutine at $E41A.w [Writes: Stack Pointer] [Flow: call]
	jmp $C41D.w		; 4C 1D C4 ; Jump to $C41D.w [Flow: jump]
	jsr $CB26.w		; 20 26 CB ; Jump to subroutine at $CB26.w [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $52		; D0 52 ; Branch if not equal to $D0, $52 [Flow: branch]
	lda #$72.b		; A9 72 ; Load #$72.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $4A		; 30 4A ; Branch if minus to $30, $4A [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $C309.w,X		; 7D 09 C3 ; Add $C309.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $C311.w,X		; 7D 11 C3 ; Add $C311.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,Y		; 99 B0 0D ; Store accumulator to $0DB0.w,Y [Reads: Accumulator, Y Index]
	sta $0D90.w,Y		; 99 90 0D ; Store accumulator to $0D90.w,Y [Reads: Accumulator, Y Index]
	jsr $BF0F.w		; 20 0F BF ; Jump to subroutine at $BF0F.w [Writes: Stack Pointer] [Flow: call]
	lda #$48.b		; A9 48 ; Load #$48.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,Y		; 99 60 0E ; Store accumulator to $0E60.w,Y [Reads: Accumulator, Y Index]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DA0.w,Y		; 99 A0 0D ; Store accumulator to $0DA0.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $0DB0.w,X		; DE B0 0D ; Decrement memory $0DB0.w,X [Reads: X Index] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBA88.l		; 22 88 BA 0D ; Jump to subroutine long $0DBA88.l [Writes: Stack Pointer] [Flow: call]
	jsr $DCEF.w		; 20 EF DC ; Jump to subroutine at $DCEF.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $0A2A.w		; 0C 2A 0A ; Test and set bits $0A2A.w [Reads: Accumulator] [Flags: Z]
	and [$29.b]		; 27 29 ; AND accumulator with memory (long) [$29.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0807.w		; 0D 07 08 ; Logical OR $0807.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $121110.l		; 0F 10 11 12 ; OR accumulator with memory (long) $121110.l [Writes: Accumulator] [Flags: ZN]
	ora #$13.b		; 09 13 ; Logical OR #$13.b with accumulator [Writes: Accumulator] [Flags: ZN]
	trb $4A.b		; 14 4A ; Test and reset bits $4A.b [Reads: Accumulator] [Flags: Z]
	and ($1D.b,X)		; 21 1D ; Logical AND ($1D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $18.b,X		; 15 18 ; OR accumulator with memory $18.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1A31.w,Y		; 19 31 1A ; OR accumulator with memory $1A31.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $1E4B.w		; 1C 4B 1E ; Test and reset bits $1E4B.w [Reads: Accumulator] [Flags: Z]
	ora $020149.l,X		; 1F 49 01 02 ; Logical OR long $020149.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $162923.l		; 22 23 29 16 ; Jump to subroutine long $162923.l [Writes: Stack Pointer] [Flow: call]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	bit $3D2D.w		; 2C 2D 3D ; Test bits $3D2D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $AA48.w,X		; 3C 48 AA ; Test bits $AA48.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cmp $AE.b,S		; C3 AE ; Compare accumulator (stack relative) $AE.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $B0.b,S		; C3 B0 ; Compare accumulator (stack relative) $B0.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $B1.b,S		; C3 B1 ; Compare accumulator (stack relative) $B1.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $B2.b,S		; C3 B2 ; Compare accumulator (stack relative) $B2.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $B4.b,S		; C3 B4 ; Compare accumulator (stack relative) $B4.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $B5.b,S		; C3 B5 ; Compare accumulator (stack relative) $B5.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $B6.b,S		; C3 B6 ; Compare accumulator (stack relative) $B6.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $B7.b,S		; C3 B7 ; Compare accumulator (stack relative) $B7.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $B8.b,S		; C3 B8 ; Compare accumulator (stack relative) $B8.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $B9.b,S		; C3 B9 ; Compare accumulator (stack relative) $B9.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $BA.b,S		; C3 BA ; Compare accumulator (stack relative) $BA.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $BB.b,S		; C3 BB ; Compare accumulator (stack relative) $BB.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $BE.b,S		; C3 BE ; Compare accumulator (stack relative) $BE.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $BF.b,S		; C3 BF ; Compare accumulator (stack relative) $BF.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $C0.b,S		; C3 C0 ; Compare accumulator (stack relative) $C0.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $C0.b,S		; C3 C0 ; Compare accumulator (stack relative) $C0.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $C1.b,S		; C3 C1 ; Compare accumulator (stack relative) $C1.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $C2.b,S		; C3 C2 ; Compare accumulator (stack relative) $C2.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $C6.b,S		; C3 C6 ; Compare accumulator (stack relative) $C6.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $C8.b,S		; C3 C8 ; Compare accumulator (stack relative) $C8.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $C9.b,S		; C3 C9 ; Compare accumulator (stack relative) $C9.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $CA.b,S		; C3 CA ; Compare accumulator (stack relative) $CA.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $CB.b,S		; C3 CB ; Compare accumulator (stack relative) $CB.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $CB.b,S		; C3 CB ; Compare accumulator (stack relative) $CB.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $CF.b,S		; C3 CF ; Compare accumulator (stack relative) $CF.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $D2.b,S		; C3 D2 ; Compare accumulator (stack relative) $D2.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $D4.b,S		; C3 D4 ; Compare accumulator (stack relative) $D4.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $D4.b,S		; C3 D4 ; Compare accumulator (stack relative) $D4.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $D4.b,S		; C3 D4 ; Compare accumulator (stack relative) $D4.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $D4.b,S		; C3 D4 ; Compare accumulator (stack relative) $D4.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $20.b,S		; C3 20 ; Compare accumulator (stack relative) $20.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	lda $C4.b,X		; B5 C4 ; Load $C4.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$15.b		; C9 15 ; Compare #$15.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	lda ($C7.b,X)		; A1 C7 ; Load accumulator ($C7.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $C7.b		; C6 C7 ; Decrement $C7.b [Reads: Direct Page] [Flags: ZN]
	sbc $3CC7.w		; ED C7 3C ; Subtract $3CC7.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$C8.b],Y		; B7 C8 ; Load accumulator (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $C8.b		; C6 C8 ; Decrement $C8.b [Reads: Direct Page] [Flags: ZN]
	eor ($C9.b)		; 52 C9 ; Exclusive OR accumulator with memory (indirect) ($C9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	cmp #$A1.b		; C9 A1 ; Compare #$A1.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$C8.b		; C9 C8 ; Compare #$C8.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$E5.b		; C9 E5 ; Compare #$E5.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$F1.b		; C9 F1 ; Compare #$F1.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	sbc $2BC4.w,X		; FD C4 2B ; Subtract with carry $2BC4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $70.b		; C5 70 ; Compare $70.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $9F.b		; C5 9F ; Compare $9F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $03.b		; C5 03 ; Compare $03.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	dec $16.b		; C6 16 ; Decrement $16.b [Reads: Direct Page] [Flags: ZN]
	dec $65.b		; C6 65 ; Decrement $65.b [Reads: Direct Page] [Flags: ZN]
	dec $91.b		; C6 91 ; Decrement $91.b [Reads: Direct Page] [Flags: ZN]
	dec $A0.b		; C6 A0 ; Decrement $A0.b [Reads: Direct Page] [Flags: ZN]
	dec $D2.b		; C6 D2 ; Decrement $D2.b [Reads: Direct Page] [Flags: ZN]
	dec $E7.b		; C6 E7 ; Decrement $E7.b [Reads: Direct Page] [Flags: ZN]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: ZN]
	cmp [$21.b]		; C7 21 ; Compare accumulator (long) [$21.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$63.b]		; C7 63 ; Compare accumulator (long) [$63.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$7B.b]		; C7 7B ; Compare accumulator (long) [$7B.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$20.b]		; C7 20 ; Compare accumulator (long) [$20.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000024.l,X		; FF 24 00 00 ; Subtract with carry (long,X) $000024.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000034.l,X		; FF 34 00 00 ; Subtract with carry (long,X) $000034.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000024.l,X		; FF 24 00 00 ; Subtract with carry (long,X) $000024.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000034.l,X		; FF 34 00 00 ; Subtract with carry (long,X) $000034.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000024.l,X		; FF 24 00 00 ; Subtract with carry (long,X) $000024.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000024.l,X		; FF 24 00 00 ; Subtract with carry (long,X) $000024.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000024.l,X		; FF 24 00 00 ; Subtract with carry (long,X) $000024.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000024.l,X		; FF 24 00 00 ; Subtract with carry (long,X) $000024.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $71.b		; 02 71 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $91.b		; C4 91 ; Compare $91.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy $A5.b		; C4 A5 ; Compare $A5.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ldy #$C9.b		; A0 C9 ; Load #$C9.b into Y register [Writes: Y Index] [Flags: ZN]
	ora $F0.b,X		; 15 F0 ; OR accumulator with memory $F0.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($BD.b,X)		; 41 BD ; Exclusive OR accumulator with memory ($BD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	.db $80, $2C		; 80 2C ; Branch always to $80, $2C [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $0DC0.w,Y		; B9 C0 0D ; Load $0DC0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $09849C.l,X		; BF 9C 84 09 ; Load long $09849C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	lda $098450.l,X		; BF 50 84 09 ; Load long $098450.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $C4B1.w,Y		; B9 B1 C4 ; Load $C4B1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $C4B2.w,Y		; B9 B2 C4 ; Load $C4B2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	jsl $07F4D0.l		; 22 D0 F4 07 ; Jump to subroutine long $07F4D0.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $17		; B0 17 ; Branch if carry set to $B0, $17 [Flow: branch]
	lda #$89.b		; A9 89 ; Load #$89.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1F0.l		; 22 F0 E1 05 ; Jump to subroutine long $05E1F0.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	jsl $07F1A3.l		; 22 A3 F1 07 ; Jump to subroutine long $07F1A3.l [Writes: Stack Pointer] [Flow: call]
	jsl $09ADC7.l		; 22 C7 AD 09 ; Jump to subroutine long $09ADC7.l [Writes: Stack Pointer] [Flow: call]
	stz $2F.b		; 64 2F ; Store zero to $2F.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $14.b		; 05 14 ; Logical OR $14.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0532.w,Y		; 19 32 05 ; OR accumulator with memory $0532.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $5025.w		; 20 25 50 ; Jump to subroutine at $5025.w [Writes: Stack Pointer] [Flow: call]
	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $2F		; D0 2F ; Branch if not equal to $D0, $2F [Flow: branch]
	lda $7EF370.l		; AF 70 F3 7E ; Load long $7EF370.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $7EF371.l		; 0F 71 F3 7E ; OR accumulator with memory (long) $7EF371.l [Writes: Accumulator] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $C527.w,Y		; B9 27 C5 ; Load $C527.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1CF2.w		; 8D F2 1C ; Store accumulator to $1CF2.w [Reads: Accumulator]
	lda $C528.w,Y		; B9 28 C5 ; Load $C528.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1CF3.w		; 8D F3 1C ; Store accumulator to $1CF3.w [Reads: Accumulator]
	lda #$4E.b		; A9 4E ; Load #$4E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$4C.b		; A9 4C ; Load #$4C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $C527.w,Y		; B9 27 C5 ; Load $C527.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1CF3.w		; 8D F3 1C ; Store accumulator to $1CF3.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $C523.w,Y		; B9 23 C5 ; Load $C523.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF360.l		; AF 60 F3 7E ; Load long $7EF360.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $90, $CD		; 90 CD ; Branch if carry clear to $90, $CD [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$50.b		; A9 50 ; Load #$50.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $01.b		; 64 01 ; Store zero to $01.b
.ACCU 16
	rep #$20		; C2 20
	lda $7EF360.l		; AF 60 F3 7E ; Load long $7EF360.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $7EF360.l		; 8F 60 F3 7E ; Store accumulator (long) $7EF360.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $7EF36A.l		; AF 6A F3 7E ; Load long $7EF36A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $7EF36A.l		; 8F 6A F3 7E ; Store accumulator (long) $7EF36A.l [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $098AE0.l		; 22 E0 8A 09 ; Jump to subroutine long $098AE0.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $7EF36A.l		; AF 6A F3 7E ; Load long $7EF36A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$64.b		; C9 64 ; Compare #$64.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $0C		; 90 0C ; Branch if carry clear to $90, $0C [Flow: branch]
	sbc #$64.b		; E9 64 ; Subtract #$64.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $7EF36A.l		; 8F 6A F3 7E ; Store accumulator (long) $7EF36A.l [Reads: Accumulator]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF36A.l		; AF 6A F3 7E ; Load long $7EF36A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	stz $02.b		; 64 02 ; Store zero to $02.b
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	sbc #$0A.b		; E9 0A ; Subtract #$0A.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: ZN]
	.db $80, $F6		; 80 F6 ; Branch always to $80, $F6 [Flow: branch]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: ZNC]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: ZNC]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: ZNC]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: ZNC]
	ora $02.b		; 05 02 ; Logical OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1CF2.w		; 8D F2 1C ; Store accumulator to $1CF2.w [Reads: Accumulator]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda #$94.b		; A9 94 ; Load #$94.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $49		; D0 49 ; Branch if not equal to $D0, $49 [Flow: branch]
	lda #$72.b		; A9 72 ; Load #$72.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	stz $0133.w		; 9C 33 01 ; Store zero to $0133.w
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $C83A.w		; ED 3A C8 ; Subtract $C83A.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $C83B.w		; ED 3B C8 ; Subtract $C83B.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DA0.w,Y		; 99 A0 0D ; Store accumulator to $0DA0.w,Y [Reads: Accumulator, Y Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0ED657.l		; 22 57 D6 0E ; Jump to subroutine long $0ED657.l [Writes: Stack Pointer] [Flow: call]
	jsl $00EBC5.l		; 22 C5 EB 00 ; Jump to subroutine long $00EBC5.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E90.w,X		; 9D 90 0E ; Store accumulator to $0E90.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $25		; D0 25 ; Branch if not equal to $D0, $25 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $00EC0D.l		; 22 0D EC 00 ; Jump to subroutine long $00EC0D.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$95.b		; A9 95 ; Load #$95.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0ED6BB.l		; 22 BB D6 0E ; Jump to subroutine long $0ED6BB.l [Writes: Stack Pointer] [Flow: call]
	stz $1D.b		; 64 1D ; Store zero to $1D.b
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda $7EF370.l		; AF 70 F3 7E ; Load long $7EF370.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7EF370.l		; 8F 70 F3 7E ; Store accumulator (long) $7EF370.l [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0DDB40.l,X		; BF 40 DB 0D ; Load long $0DDB40.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1CF2.w		; 8D F2 1C ; Store accumulator to $1CF2.w [Reads: Accumulator]
	sta $7EF375.l		; 8F 75 F3 7E ; Store accumulator (long) $7EF375.l [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$96.b		; A9 96 ; Load #$96.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$98.b		; A9 98 ; Load #$98.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	jmp $C752.w		; 4C 52 C7 ; Jump to $C752.w [Flow: jump]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0ED657.l		; 22 57 D6 0E ; Jump to subroutine long $0ED657.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	inc $0015.w		; EE 15 00 ; Increment $0015.w [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $00EC0D.l		; 22 0D EC 00 ; Jump to subroutine long $00EC0D.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$1E.b		; C9 1E ; Compare #$1E.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $0E90.w,X		; BD 90 0E ; Load $0E90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,Y		; 99 D0 0D ; Store accumulator to $0DD0.w,Y [Reads: Accumulator, Y Index]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $00EBF2.l		; 22 F2 EB 00 ; Jump to subroutine long $00EBF2.l [Writes: Stack Pointer] [Flow: call]
	jsl $0ED6BB.l		; 22 BB D6 0E ; Jump to subroutine long $0ED6BB.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda $7EF371.l		; AF 71 F3 7E ; Load long $7EF371.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7EF371.l		; 8F 71 F3 7E ; Store accumulator (long) $7EF371.l [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0DDB50.l,X		; BF 50 DB 0D ; Load long $0DDB50.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1CF2.w		; 8D F2 1C ; Store accumulator to $1CF2.w [Reads: Accumulator]
	sta $7EF376.l		; 8F 76 F3 7E ; Store accumulator (long) $7EF376.l [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$97.b		; A9 97 ; Load #$97.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$98.b		; A9 98 ; Load #$98.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $7EF360.l		; AF 60 F3 7E ; Load long $7EF360.l into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0064.w		; 69 64 00 ; Add #$0064.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7EF360.l		; 8F 60 F3 7E ; Store accumulator (long) $7EF360.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$54.b		; A9 54 ; Load #$54.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $50, $51		; 50 51 ; Branch if overflow clear to $50, $51 [Flow: branch]
	eor ($53.b)		; 52 53 ; Exclusive OR accumulator with memory (indirect) ($53.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $C777.w,Y		; B9 77 C7 ; Load $C777.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0CF9.w		; 8D F9 0C ; Store accumulator to $0CF9.w [Reads: Accumulator]
	stz $0CFA.w		; 9C FA 0C ; Store zero to $0CFA.w
	lda $C76F.w,Y		; B9 6F C7 ; Load $C76F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $C773.w,Y		; B9 73 C7 ; Load $C773.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	stz $0D80.w,X		; [PATTERN: Memory clearing operation] 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	jsl $07F4D0.l		; 22 D0 F4 07 ; Jump to subroutine long $07F4D0.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $16		; B0 16 ; Branch if carry set to $B0, $16 [Flow: branch]
	lda #$4A.b		; A9 4A ; Load #$4A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E1F0.l		; 22 F0 E1 05 ; Jump to subroutine long $05E1F0.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $0C		; [PATTERN: Memory clearing operation] 90 0C ; Branch if carry clear to $90, $0C [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	jsl $07F1A3.l		; 22 A3 F1 07 ; Jump to subroutine long $07F1A3.l [Writes: Stack Pointer] [Flow: call]
	stz $2F.b		; 64 2F ; Store zero to $2F.b
	stz $0EB0.w,X		; 9E B0 0E ; Store zero to $0EB0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda #$8A.b		; A9 8A ; Load #$8A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$4B.b		; A9 4B ; Load #$4B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $C3DD.w,Y		; B9 DD C3 ; Load $C3DD.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $C3DE.w,Y		; B9 DE C3 ; Load $C3DE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $7EF340.l,X		; BF 40 F3 7E ; Load long $7EF340.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cpx #$03.b		; E0 03 ; Compare #$03.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF340.l,X		; 9F 40 F3 7E ; Store accumulator (long,X) $7EF340.l,X [Reads: Accumulator, X Index]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $098A32.l		; 22 32 8A 09 ; Jump to subroutine long $098A32.l [Writes: Stack Pointer] [Flow: call]
	jsl $0DDB7F.l		; 22 7F DB 0D ; Jump to subroutine long $0DDB7F.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $49		; D0 49 ; Branch if not equal to $D0, $49 [Flow: branch]
	lda #$72.b		; A9 72 ; Load #$72.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	stz $0133.w		; 9C 33 01 ; Store zero to $0133.w
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $C83A.w		; ED 3A C8 ; Subtract $C83A.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $C83B.w		; ED 3B C8 ; Subtract $C83B.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DA0.w,Y		; 99 A0 0D ; Store accumulator to $0DA0.w,Y [Reads: Accumulator, Y Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0ED657.l		; 22 57 D6 0E ; Jump to subroutine long $0ED657.l [Writes: Stack Pointer] [Flow: call]
	jsl $00EBC5.l		; 22 C5 EB 00 ; Jump to subroutine long $00EBC5.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E90.w,X		; 9D 90 0E ; Store accumulator to $0E90.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $25		; D0 25 ; Branch if not equal to $D0, $25 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $00EC0D.l		; 22 0D EC 00 ; Jump to subroutine long $00EC0D.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$8B.b		; A9 8B ; Load #$8B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0ED6BB.l		; 22 BB D6 0E ; Jump to subroutine long $0ED6BB.l [Writes: Stack Pointer] [Flow: call]
	stz $1D.b		; 64 1D ; Store zero to $1D.b
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda $7EF3CA.l		; AF CA F3 7E ; Load long $7EF3CA.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $35		; D0 35 ; Branch if not equal to $D0, $35 [Flow: branch]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda #$2A.b		; A9 2A ; Load #$2A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	.db $80, $5E		; 80 5E ; Branch always to $80, $5E [Flow: branch]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	.db $80, $4E		; 80 4E ; Branch always to $80, $4E [Flow: branch]
	cmp #$16.b		; C9 16 ; Compare #$16.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda #$2C.b		; A9 2C ; Load #$2C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	.db $80, $3E		; 80 3E ; Branch always to $80, $3E [Flow: branch]
	.db $80, $45		; 80 45 ; Branch always to $80, $45 [Flow: branch]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$3A.b		; C9 3A ; Compare #$3A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda #$3B.b		; A9 3B ; Load #$3B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	lda #$4F.b		; A9 4F ; Load #$4F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	.db $80, $12		; 80 12 ; Branch always to $80, $12 [Flow: branch]
	cmp #$16.b		; C9 16 ; Compare #$16.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda #$2C.b		; A9 2C ; Load #$2C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	lda #$8C.b		; A9 8C ; Load #$8C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$4D.b		; A9 4D ; Load #$4D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx #$03.b		; E0 03 ; Compare #$03.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	sta $7EF340.l,X		; 9F 40 F3 7E ; Store accumulator (long,X) $7EF340.l,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0ED657.l		; 22 57 D6 0E ; Jump to subroutine long $0ED657.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	inc $0015.w		; EE 15 00 ; Increment $0015.w [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $00EC0D.l		; 22 0D EC 00 ; Jump to subroutine long $00EC0D.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$1E.b		; C9 1E ; Compare #$1E.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $0E90.w,X		; BD 90 0E ; Load $0E90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,Y		; 99 D0 0D ; Store accumulator to $0DD0.w,Y [Reads: Accumulator, Y Index]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $00EBF2.l		; 22 F2 EB 00 ; Jump to subroutine long $00EBF2.l [Writes: Stack Pointer] [Flow: call]
	jsl $0ED6BB.l		; 22 BB D6 0E ; Jump to subroutine long $0ED6BB.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02E9.w		; 8D E9 02 ; Store accumulator to $02E9.w [Reads: Accumulator]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsl $0799AD.l		; 22 AD 99 07 ; Jump to subroutine long $0799AD.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $919290.l		; 8F 90 92 91 ; Store accumulator (long) $919290.l [Reads: Accumulator]
	sta ($00.b,S),Y		; 93 00 ; Store accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $C9BE.w,Y		; B9 BE C9 ; Load $C9BE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $C9C3.w,Y		; B9 C3 C9 ; Load $C9C3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$8D.b		; A9 8D ; Load #$8D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$8E.b		; A9 8E ; Load #$8E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsr $0020.w		; 20 20 00 ; Jump to subroutine at $0020.w [Writes: Stack Pointer] [Flow: call]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsr $C720.w		; 20 20 C7 ; Jump to subroutine at $C720.w [Writes: Stack Pointer] [Flow: call]
	cmp [$CF.b]		; C7 CF ; Compare accumulator (long) [$CF.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp $DADADF.l		; CF DF DA DA ; Compare accumulator (long) $DADADF.l [Reads: Accumulator] [Flags: ZNC]
	cmp $CDCBCB.l,X		; DF CB CB CD ; Compare accumulator (long,X) $CDCBCB.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $CAC9.w		; CD C9 CA ; Compare $CAC9.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp #$D9.b		; C9 D9 ; Compare #$D9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cmp $CBCB.w,Y		; D9 CB CB ; Compare accumulator $CBCB.w,Y [Reads: Y Index] [Flags: ZNC]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$40.b		; E9 40 ; Subtract #$40.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$40.b		; E9 40 ; Subtract #$40.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$40.b		; E9 40 ; Subtract #$40.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $ED00.w		; 20 00 ED ; Jump to subroutine at $ED00.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l		; EF 00 00 00 ; Subtract with carry (long) $000000.l [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$40.b		; E9 40 ; Subtract #$40.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $ED00.w		; 20 00 ED ; Jump to subroutine at $ED00.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $7EF3CA.l		; AF CA F3 7E ; Load long $7EF3CA.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $55		; D0 55 ; Branch if not equal to $D0, $55 [Flow: branch]
	jsr $E41E.w		; 20 1E E4 ; Jump to subroutine at $E41E.w [Writes: Stack Pointer] [Flow: call]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $0D.b		; 65 0D ; Add $0D.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$0B.b		; A2 0B ; Load #$0B.b into X register [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CA0E.w,X		; 7D 0E CA ; Add $CA0E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CA26.w,X		; 7D 26 CA ; Add $CA26.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $CA3E.w,X		; BD 3E CA ; Load $CA3E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $CA56.w,X		; BD 56 CA ; Load $CA56.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $CA6E.w,X		; BD 6E CA ; Load $CA6E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $CB		; 10 CB ; Branch if plus to $10, $CB [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $FEBC.w		; 20 BC FE ; Jump to subroutine at $FEBC.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$86.b		; 69 86 ; Add #$86.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$CA.b		; A9 CA ; Load #$CA.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	jsl $05DF70.l		; 22 70 DF 05 ; Jump to subroutine long $05DF70.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	jsr $CE45.w		; 20 45 CE ; Jump to subroutine at $CE45.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	jsr $E41A.w		; 20 1A E4 ; Jump to subroutine at $E41A.w [Writes: Stack Pointer] [Flow: call]
	lda $0F00.w,X		; BD 00 0F ; Load $0F00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsr $FF78.w		; 20 78 FF ; Jump to subroutine at $FF78.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $CBD0.w,Y		; B9 D0 CB ; Load $CBD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp [$CB.b],Y		; D7 CB ; Compare accumulator (long indexed) [$CB.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	ora ($CC.b)		; 12 CC ; OR accumulator with memory (indirect) ($CC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy $CC89.w		; CC 89 CC ; Compare $CC89.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0BA0.w,X		; 9D A0 0B ; Store accumulator to $0BA0.w,X [Reads: Accumulator, X Index]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $EA04.w		; 20 04 EA ; Jump to subroutine at $EA04.w [Writes: Stack Pointer] [Flow: call]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	sta $0BA0.w,X		; 9D A0 0B ; Store accumulator to $0BA0.w,X [Reads: Accumulator, X Index]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$A0.b		; 69 A0 ; Add #$A0.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	jmp $CF5D.w		; 4C 5D CF ; Jump to $CF5D.w [Flow: jump]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $CC03.w,Y		; B9 03 CC ; Load $CC03.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $2008.w		; 0C 08 20 ; Test and set bits $2008.w [Reads: Accumulator] [Flags: Z]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cld		; D8 ; Clear decimal flag [Flags: D]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	ldy $0D90.w,X		; BC 90 0D ; Load Y register $0D90.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $CC3A.w,Y		; B9 3A CC ; Load $CC3A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $EA04.w		; 20 04 EA ; Jump to subroutine at $EA04.w [Writes: Stack Pointer] [Flow: call]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $DC		; D0 DC ; Branch if not equal to $D0, $DC [Flow: branch]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $CC37.w,Y		; B9 37 CC ; Load $CC37.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	sta $0BA0.w,X		; 9D A0 0B ; Store accumulator to $0BA0.w,X [Reads: Accumulator, X Index]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$40.b		; 69 40 ; Add #$40.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$0F.b		; 49 0F ; Exclusive OR #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $CC7A.w,Y		; B9 7A CC ; Load $CC7A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $08FFFF.l,X		; FF FF FF 08 ; Subtract with carry (long,X) $08FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFFE.l,X		; FF FE FF 00 ; Subtract with carry (long,X) $00FFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFFE.l,X		; FF FE FF 00 ; Subtract with carry (long,X) $00FFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFFE.l,X		; FF FE FF 00 ; Subtract with carry (long,X) $00FFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFFE.l,X		; FF FE FF 00 ; Subtract with carry (long,X) $00FFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFFE.l,X		; FF FE FF 00 ; Subtract with carry (long,X) $00FFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$28.b		; 09 28 ; Logical OR #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$D9.b		; 09 D9 ; Logical OR #$D9.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $0808.w,Y		; D9 08 08 ; Compare accumulator $0808.w,Y [Reads: Y Index] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	cmp $26D9.w,Y		; D9 D9 26 ; Compare accumulator $26D9.w,Y [Reads: Y Index] [Flags: ZNC]
	rol $D8.b		; 26 D8 ; Rotate left $D8.b [Reads: Direct Page] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	jmp ($0606.w)		; 6C 06 06 ; Jump indirect to ($0606.w) [Flow: jump]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($01.b,X)		; 41 01 ; Exclusive OR accumulator with memory ($01.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($01.b,X)		; 41 01 ; Exclusive OR accumulator with memory ($01.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($01.b,X)		; 41 01 ; Exclusive OR accumulator with memory ($01.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor ($01.b,X)		; 41 01 ; Exclusive OR accumulator with memory ($01.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $41.b		; 06 41 ; Arithmetic shift left $41.b [Reads: Direct Page] [Flags: ZNC]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $41.b		; 06 41 ; Arithmetic shift left $41.b [Reads: Direct Page] [Flags: ZNC]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $E41E.w		; 20 1E E4 ; Jump to subroutine at $E41E.w [Writes: Stack Pointer] [Flow: call]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $CE37.w,Y		; BE 37 CE ; Load X register $CE37.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CCAF.w,X		; 7D AF CC ; Add $CCAF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CD1F.w,X		; 7D 1F CD ; Add $CD1F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $CD8F.w,X		; BD 8F CD ; Load $CD8F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	cmp #$60.b		; C9 60 ; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	cmp #$28.b		; C9 28 ; Compare #$28.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$38.b		; C9 38 ; Compare #$38.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $CDC7.w,X		; BD C7 CD ; Load $CDC7.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $CDFF.w,X		; BD FF CD ; Load $CDFF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0F.b		; 05 0F ; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $98		; 10 98 ; Branch if plus to $10, $98 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $D22F.w		; 20 2F D2 ; Jump to subroutine at $D22F.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsr $D116.w		; 20 16 D1 ; Jump to subroutine at $D116.w [Writes: Stack Pointer] [Flow: call]
	jsr $CF64.w		; 20 64 CF ; Jump to subroutine at $CF64.w [Writes: Stack Pointer] [Flow: call]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E96C.w		; 20 6C E9 ; Jump to subroutine at $E96C.w [Writes: Stack Pointer] [Flow: call]
	lda $0F70.w,X		; [PATTERN: Memory clearing operation] BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $09		; 10 09 ; Branch if plus to $10, $09 [Flow: branch]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	stz $0DC0.w,X		; 9E C0 0D ; Store zero to $0DC0.w,X [Reads: X Index]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $08		; 30 08 ; Branch if minus to $30, $08 [Flow: branch]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$40.b		; 49 40 ; Exclusive OR #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp $37CF20.l		; CF 20 CF 37 ; Compare accumulator (long) $37CF20.l [Reads: Accumulator] [Flags: ZNC]
	cmp $FECF5A.l		; CF 5A CF FE ; Compare accumulator (long) $FECF5A.l [Reads: Accumulator] [Flags: ZNC]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	lda #$12.b		; A9 12 ; Load #$12.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	stz $0DE0.w,X		; 9E E0 0D ; Store zero to $0DE0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$FD.b		; A9 FD ; Load #$FD.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	stz $0D50.w,X		; 9E 50 0D ; Store zero to $0D50.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	inc $BD.b,X		; F6 BD ; Increment memory $BD.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $A213.w,Y		; 79 13 A2 ; Add $A213.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	cmp $CF35.w,Y		; D9 35 CF ; Compare accumulator $CF35.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	inc $0DE0.w,X		; FE E0 0D ; Increment memory $0DE0.w,X [Reads: X Index] [Flags: ZN]
	lda #$08.b		; [PATTERN: Memory clearing operation] A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0F80.w,X		; 9E 80 0F ; Store zero to $0F80.w,X [Reads: X Index]
	stz $0D50.w,X		; 9E 50 0D ; Store zero to $0D50.w,X [Reads: X Index]
	stz $0D40.w,X		; 9E 40 0D ; Store zero to $0D40.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $24		; F0 24 ; Branch if equal to $F0, $24 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $0C4A.w,Y		; B9 4A 0C ; Load $0C4A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	lda $0C04.w,Y		; B9 04 0C ; Load $0C04.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0C18.w,Y		; B9 18 0C ; Load $0C18.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $0BFA.w,Y		; B9 FA 0B ; Load $0BFA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $0C0E.w,Y		; B9 0E 0C ; Load $0C0E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $06D125.l		; 22 25 D1 06 ; Jump to subroutine long $06D125.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $F7		; 80 F7 ; Branch always to $80, $F7 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0BA0.w,X		; 9D A0 0B ; Store accumulator to $0BA0.w,X [Reads: Accumulator, X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	jsr $D22F.w		; 20 2F D2 ; Jump to subroutine at $D22F.w [Writes: Stack Pointer] [Flow: call]
	jsr $D011.w		; 20 11 D0 ; Jump to subroutine at $D011.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp $BDCFE4.l		; CF E4 CF BD ; Compare accumulator (long) $BDCFE4.l [Reads: Accumulator] [Flags: ZNC]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	jsr $F145.w		; 20 45 F1 ; Jump to subroutine at $F145.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	jsl $06D125.l		; 22 25 D1 06 ; Jump to subroutine long $06D125.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $11		; 80 11 ; Branch always to $80, $11 [Flow: branch]
	jsr $F2B4.w		; 20 B4 F2 ; Jump to subroutine at $F2B4.w [Writes: Stack Pointer] [Flow: call]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$C9.b		; A9 C9 ; Load #$C9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $CF64.w		; 20 64 CF ; Jump to subroutine at $CF64.w [Writes: Stack Pointer] [Flow: call]
	jsl $1EFD14.l		; 22 14 FD 1E ; Jump to subroutine long $1EFD14.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1F		; D0 1F ; Branch if not equal to $D0, $1F [Flow: branch]
	jsl $1EDE2E.l		; 22 2E DE 1E ; Jump to subroutine long $1EDE2E.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $11		; 30 11 ; Branch if minus to $30, $11 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF35C.l,X		; 9F 5C F3 7E ; Store accumulator (long,X) $7EF35C.l,X [Reads: Accumulator, X Index]
	jsl $0DDB7F.l		; 22 7F DB 0D ; Jump to subroutine long $0DDB7F.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$CA.b		; A9 CA ; Load #$CA.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F10.w,X		; 9D 10 0F ; Store accumulator to $0F10.w,X [Reads: Accumulator, X Index]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $1CF0.w		; AD F0 1C ; Load $1CF0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$00C9.w		; C9 C9 00 ; Compare #$00C9.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$00CA.w		; C9 CA 00 ; Compare #$00CA.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F10.w,X		; 9D 10 0F ; Store accumulator to $0F10.w,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsr $BABC.w		; 20 BC BA ; Jump to subroutine at $BABC.w [Writes: Stack Pointer] [Flow: call]
	tsb $03AD.w		; 0C AD 03 ; Test and set bits $03AD.w [Reads: Accumulator] [Flags: Z]
	tsb $39.b		; 04 39 ; Test and set bits $39.b [Reads: Accumulator] [Flags: Z]
	.db $30, $D0		; 30 D0 ; Branch if minus to $30, $D0 [Flow: branch]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1EFF8D.l		; 22 8D FF 1E ; Jump to subroutine long $1EFF8D.l [Writes: Stack Pointer] [Flow: call]
	jsr $D232.w		; 20 32 D2 ; Jump to subroutine at $D232.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	jsl $1EFF8D.l		; 22 8D FF 1E ; Jump to subroutine long $1EFF8D.l [Writes: Stack Pointer] [Flow: call]
	jsr $D22F.w		; 20 2F D2 ; Jump to subroutine at $D22F.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsr $E96C.w		; 20 6C E9 ; Jump to subroutine at $E96C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	lda $0EE0.w,X		; BD E0 0E ; Load $0EE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9C0.w		; 20 C0 D9 ; Jump to subroutine at $D9C0.w [Writes: Stack Pointer] [Flow: call]
	lda $0F80.w,X		; BD 80 0F ; Load $0F80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$02.b		; E9 02 ; Subtract #$02.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $73		; 10 73 ; Branch if plus to $10, $73 [Flow: branch]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror $0D50.w,X		; 7E 50 0D ; Rotate right $0D50.w,X [Reads: X Index] [Flags: ZNC]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror $0D40.w,X		; 7E 40 0D ; Rotate right $0D40.w,X [Reads: X Index] [Flags: ZNC]
	lda $0F80.w,X		; BD 80 0F ; Load $0F80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	jsr $CF5A.w		; 20 5A CF ; Jump to subroutine at $CF5A.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $52		; 80 52 ; Branch always to $80, $52 [Flow: branch]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda $7FF9C2.l,X		; BF C2 F9 7F ; Load long $7FF9C2.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $32		; D0 32 ; Branch if not equal to $D0, $32 [Flow: branch]
	stz $0F80.w,X		; 9E 80 0F ; Store zero to $0F80.w,X [Reads: X Index]
	jsl $1EA820.l		; 22 20 A8 1E ; Jump to subroutine long $1EA820.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $3A		; 30 3A ; Branch if minus to $30, $3A [Flow: branch]
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $33		; F0 33 ; Branch if equal to $F0, $33 [Flow: branch]
	lda $0D10.w,Y		; B9 10 0D ; Load $0D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	.db $80, $11		; 80 11 ; Branch always to $80, $11 [Flow: branch]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$E4.b		; C9 E4 ; Compare #$E4.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $0A		; 90 0A ; Branch if carry clear to $90, $0A [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	jsr $CF64.w		; 20 64 CF ; Jump to subroutine at $CF64.w [Writes: Stack Pointer] [Flow: call]
	jsr $D116.w		; 20 16 D1 ; Jump to subroutine at $D116.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0B58.w,X		; BD 58 0B ; Load $0B58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0FC1.w		; 0D C1 0F ; Logical OR $0FC1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	dec $0B58.w,X		; DE 58 0B ; Decrement memory $0B58.w,X [Reads: X Index] [Flags: ZN]
	lda $0B58.w,X		; BD 58 0B ; Load $0B58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	cmp #$28.b		; C9 28 ; Compare #$28.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	jsr $E41A.w		; 20 1A E4 ; Jump to subroutine at $E41A.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0F10.w,X		; BD 10 0F ; Load $0F10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	jsr $F14A.w		; 20 4A F1 ; Jump to subroutine at $F14A.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	jsl $06D125.l		; 22 25 D1 06 ; Jump to subroutine long $06D125.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $D13C.w		; 20 3C D1 ; Jump to subroutine at $D13C.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and $9E0B2F.l		; 2F 2F 0B 9E ; AND accumulator with memory (long) $9E0B2F.l [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$D8.b		; E9 D8 ; Subtract #$D8.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $D12D.w,Y		; B9 2D D1 ; Load $D12D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	lda $D1BED1.l		; AF D1 BE D1 ; Load long $D1BED1.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $BED1.w,Y		; BE D1 BE ; Load X register $BED1.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp ($D8.b),Y		; D1 D8 ; Compare accumulator ($D8.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($D8.b),Y		; D1 D8 ; Compare accumulator ($D8.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($D8.b),Y		; D1 D8 ; Compare accumulator ($D8.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($E8.b),Y		; D1 E8 ; Compare accumulator ($E8.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($F1.b),Y		; D1 F1 ; Compare accumulator ($F1.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($F8.b),Y		; D1 F8 ; Compare accumulator ($F8.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($01.b),Y		; D1 01 ; Compare accumulator ($01.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($A5.b)		; D2 A5 ; Compare accumulator (indirect) ($A5.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp ($85.b),Y		; D1 85 ; Compare accumulator ($85.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($78.b),Y		; D1 78 ; Compare accumulator ($78.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($70.b),Y		; D1 70 ; Compare accumulator ($70.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($BD.b),Y		; D1 BD ; Compare accumulator ($BD.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	.db $30, $0E		; 30 0E ; Branch if minus to $30, $0E [Flow: branch]
	sta $7EF35A.l		; 8F 5A F3 7E ; Store accumulator (long) $7EF35A.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $02E9.w		; 9C E9 02 ; Store zero to $02E9.w
	ldy #$32.b		; A0 32 ; Load #$32.b into Y register [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0799AD.l		; 22 AD 99 07 ; Jump to subroutine long $0799AD.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	lda $7EF36F.l		; AF 6F F3 7E ; Load long $7EF36F.l into accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7EF36F.l		; 8F 6F F3 7E ; Store accumulator (long) $7EF36F.l [Reads: Accumulator]
	lda $0E30.w,X		; BD 30 0E ; Load $0E30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0BC0.w,X		; 9D C0 0B ; Store accumulator to $0BC0.w,X [Reads: Accumulator, X Index]
	ldy $0CBA.w,X		; BC BA 0C ; Load Y register $0CBA.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $D030.w,Y		; 19 30 D0 ; OR accumulator with memory $D030.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0403.w		; 8D 03 04 ; Store accumulator to $0403.w [Reads: Accumulator]
	jsl $09C2F5.l		; 22 F5 C2 09 ; Jump to subroutine long $09C2F5.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$31.b		; A9 31 ; Load #$31.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	lda #$38.b		; A9 38 ; Load #$38.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7EF372.l		; 6F 72 F3 7E ; Add with carry (long) $7EF372.l [Writes: Accumulator] [Flags: ZVNC]
	sta $7EF372.l		; 8F 72 F3 7E ; Store accumulator (long) $7EF372.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $BC.b		; 14 BC ; Test and reset bits $BC.b [Reads: Accumulator] [Flags: Z]
	jsr $A90E.w		; 20 0E A9 ; Jump to subroutine at $A90E.w [Writes: Stack Pointer] [Flow: call]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $D0E2.w,Y		; B9 E2 D0 ; Load $D0E2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7EF360.l		; 6F 60 F3 7E ; Add with carry (long) $7EF360.l [Writes: Accumulator] [Flags: ZVNC]
	sta $7EF360.l		; 8F 60 F3 7E ; Store accumulator (long) $7EF360.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $0E20.w,X		; BC 20 0E ; Load Y register $0E20.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $D0F9.w,Y		; B9 F9 D0 ; Load $D0F9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7EF375.l		; 6F 75 F3 7E ; Add with carry (long) $7EF375.l [Writes: Accumulator] [Flags: ZVNC]
	sta $7EF375.l		; 8F 75 F3 7E ; Store accumulator (long) $7EF375.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF373.l		; AF 73 F3 7E ; Load long $7EF373.l into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF373.l		; 8F 73 F3 7E ; Store accumulator (long) $7EF373.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7EF376.l		; 6F 76 F3 7E ; Add with carry (long) $7EF376.l [Writes: Accumulator] [Flags: ZVNC]
	sta $7EF376.l		; 8F 76 F3 7E ; Store accumulator (long) $7EF376.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: ZNC]
	jsr $D0ED.w		; 20 ED D0 ; Jump to subroutine at $D0ED.w [Writes: Stack Pointer] [Flow: call]
	lda $0FB3.w		; AD B3 0F ; Load $0FB3.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	lda $0FC6.w		; AD C6 0F ; Load $0FC6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $42		; B0 42 ; Branch if carry set to $B0, $42 [Flow: branch]
	lda $0E10.w,X		; BD 10 0E ; Load $0E10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBA88.l		; 22 88 BA 0D ; Jump to subroutine long $0DBA88.l [Writes: Stack Pointer] [Flow: call]
	lda $0E90.w,X		; BD 90 0E ; Load $0E90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $30		; D0 30 ; Branch if not equal to $D0, $30 [Flow: branch]
	ldy $0E20.w,X		; BC 20 0E ; Load Y register $0E20.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $D144.w,Y		; B9 44 D1 ; Load $D144.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $D2FA.w		; 4C FA D2 ; Jump to $D2FA.w [Flow: jump]
	lda $D135.w,Y		; B9 35 D1 ; Load $D135.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $DCEF.w		; 4C EF DC ; Jump to $DCEF.w [Flow: jump]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$E6.b		; C9 E6 ; Compare #$E6.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $0E30.w,X		; BD 30 0E ; Load $0E30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jmp $DC10.w		; 4C 10 DC ; Jump to $DC10.w [Flow: jump]
	jmp $DD40.w		; 4C 40 DD ; Jump to $DD40.w [Flow: jump]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6E.b		; 00 6E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $6E68.w		; 6E 68 6E ; Rotate right $6E68.w [Flags: ZNC]
	ror $6E78.w		; 6E 78 6E ; Rotate right $6E78.w [Flags: ZNC]
	ror $6379.w		; 6E 79 63 ; Rotate right $6379.w [Flags: ZNC]
	adc ($69.b,S),Y		; 73 69 ; Add with carry (stack relative indirect indexed) ($69.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $73.b,S		; 63 73 ; Add with carry (stack relative) $73.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $73.b,S		; 63 73 ; Add with carry (stack relative) $73.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc ($02.b,S),Y		; 73 02 ; Add with carry (stack relative indirect indexed) ($02.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3A.b		; 00 3A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	jsr $E41E.w		; 20 1E E4 ; Jump to subroutine at $E41E.w [Writes: Stack Pointer] [Flow: call]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: ZN]
	.db $90, $01		; 90 01 ; Branch if carry clear to $90, $01 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D28A.w,X		; 7D 8A D2 ; Add $D28A.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D2B2.w,X		; 7D B2 D2 ; Add $D2B2.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $D2D6.w,X		; BD D6 D2 ; Load $D2D6.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $D2E8.w,X		; BD E8 D2 ; Load $D2E8.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0F.b		; 05 0F ; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $B3		; 10 B3 ; Branch if plus to $10, $B3 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jmp $DC64.w		; 4C 64 DC ; Jump to $DC64.w [Flow: jump]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	bit $A080.w,X		; 3C 80 A0 ; Test bits $A080.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	.db $80, $BC		; 80 BC ; Branch always to $80, $BC [Flow: branch]
	cpx #$0D.b		; E0 0D ; Compare #$0D.b with X register [Reads: X Index] [Flags: ZNC]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $D363.w,Y		; B9 63 D3 ; Load $D363.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $D2AE.w,Y		; 19 AE D2 ; OR accumulator with memory $D2AE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsr $D54A.w		; 20 4A D5 ; Jump to subroutine at $D54A.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsr $FF78.w		; 20 78 FF ; Jump to subroutine at $FF78.w [Writes: Stack Pointer] [Flow: call]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $D88B.w		; 20 8B D8 ; Jump to subroutine at $D88B.w [Writes: Stack Pointer] [Flow: call]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $4C		; D0 4C ; Branch if not equal to $D0, $4C [Flow: branch]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	ldy $0E20.w,X		; BC 20 0E ; Load Y register $0E20.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $D36B.w,Y		; B9 6B D3 ; Load $D36B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $D367.w,Y		; B9 67 D3 ; Load $D367.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $D36B.w,Y		; B9 6B D3 ; Load $D36B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	.db $80, $30		; 80 30 ; Branch always to $80, $30 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $CF5D.w		; 20 5D CF ; Jump to subroutine at $CF5D.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $28		; D0 28 ; Branch if not equal to $D0, $28 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$30.b		; 69 30 ; Add #$30.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp $0DE0.w,X		; DD E0 0D ; Compare accumulator $0DE0.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	eor $0DE0.w,X		; 5D E0 0D ; Exclusive OR accumulator with memory $0DE0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $D44B.w,Y		; B9 4B D4 ; Load $D44B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $0000D4.l		; 6F D4 00 00 ; Add with carry (long) $0000D4.l [Writes: Accumulator] [Flags: ZVNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pei ($00.b)		; D4 00 ; Push effective indirect address ($00.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	cmp #$1C.b		; C9 1C ; Compare #$1C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $D4CD.w		; 20 CD D4 ; Jump to subroutine at $D4CD.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $D451.w,Y		; B9 51 D4 ; Load $D451.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $16		; B0 16 ; Branch if carry set to $B0, $16 [Flow: branch]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $D486.w,Y		; B9 86 D4 ; Load $D486.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $D4CD.w		; 20 CD D4 ; Jump to subroutine at $D4CD.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $D465.w,Y		; B9 65 D4 ; Load $D465.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $00F4.w		; 0C F4 00 ; Test and set bits $00F4.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $040000.l,X		; FF 00 00 04 ; Subtract with carry (long,X) $040000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	pea $0000.w		; F4 00 00 ; Push absolute address $0000.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00D4.w		; 2C D4 00 ; Test bits $00D4.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pei ($A9.b)		; D4 A9 ; Push effective indirect address ($A9.b) [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$22.b]		; 07 22 ; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($0DBB.w,X)		; 7C BB 0D ; Jump indirect indexed to ($0DBB.w,X) [Reads: X Index] [Flow: jump]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $38		; 30 38 ; Branch if minus to $30, $38 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D4B5.w,X		; 7D B5 D4 ; Add $D4B5.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $D4B9.w,X		; 7D B9 D4 ; Add $D4B9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D4BD.w,X		; 7D BD D4 ; Add $D4BD.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $D4C1.w,X		; 7D C1 D4 ; Add $D4C1.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda $0DE0.w,Y		; B9 E0 0D ; Load $0DE0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $D4C5.w,X		; BD C5 D4 ; Load $D4C5.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda $D4C9.w,X		; BD C9 D4 ; Load $D4C9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $060004.l,X		; FF 04 00 06 ; Subtract with carry (long,X) $060004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BB.b		; 00 BB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $2565.w,Y		; B9 65 25 ; Load $2565.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $65.b		; 25 65 ; Logical AND $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $25.b		; 65 25 ; Add $25.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and $20.b		; 25 20 ; Logical AND $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $BDE4.w,X		; 1E E4 BD ; Arithmetic shift left $BDE4.w,X [Reads: X Index] [Flags: ZNC]
	cpx #$0D.b		; E0 0D ; Compare #$0D.b with X register [Reads: X Index] [Flags: ZNC]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $4B		; F0 4B ; Branch if equal to $F0, $4B [Flow: branch]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $0DB0.w,X		; 7D B0 0D ; Add $0DB0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $0DE0.w,X		; 7D E0 0D ; Add $0DE0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D514.w,X		; 7D 14 D5 ; Add $D514.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D526.w,X		; 7D 26 D5 ; Add $D526.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $D538.w,X		; BD 38 D5 ; Load $D538.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $D541.w,X		; BD 41 D5 ; Load $D541.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Accumulator, Direct Page]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $90.b		; A5 90 ; Load $90.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	inc $92.b		; E6 92 ; Increment $92.b [Reads: Direct Page] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	dec $0E40.w,X		; DE 40 0E ; Decrement memory $0E40.w,X [Reads: X Index] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsr $DC13.w		; 20 13 DC ; Jump to subroutine at $DC13.w [Writes: Stack Pointer] [Flow: call]
	inc $0E40.w,X		; FE 40 0E ; Increment memory $0E40.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	jsr $D643.w		; 20 43 D6 ; Jump to subroutine at $D643.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9F3.w		; 20 F3 D9 ; Jump to subroutine at $D9F3.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$1E.b		; C9 1E ; Compare #$1E.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $DC10.w		; 20 10 DC ; Jump to subroutine at $DC10.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsr $F145.w		; 20 45 F1 ; Jump to subroutine at $F145.w [Writes: Stack Pointer] [Flow: call]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $EFDA.w		; 20 DA EF ; Jump to subroutine at $EFDA.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F80010.l,X		; FF 10 00 F8 ; Subtract with carry (long,X) $F80010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F40010.l,X		; FF 10 00 F4 ; Subtract with carry (long,X) $F40010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F40014.l,X		; FF 14 00 F4 ; Subtract with carry (long,X) $F40014.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F20014.l,X		; FF 14 00 F2 ; Subtract with carry (long,X) $F20014.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F20016.l,X		; FF 16 00 F2 ; Subtract with carry (long,X) $F20016.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $000016.l,X		; FF 16 00 00 ; Subtract with carry (long,X) $000016.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $10FFF8.l,X		; FF F8 FF 10 ; Subtract with carry (long,X) $10FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $14FFF4.l,X		; FF F4 FF 14 ; Subtract with carry (long,X) $14FFF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F2.b		; 00 F2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $16FFF2.l,X		; FF F2 FF 16 ; Subtract with carry (long,X) $16FFF2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	jsr $E41E.w		; 20 1E E4 ; Jump to subroutine at $E41E.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$0C.b		; 49 0C ; Exclusive OR #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D5F3.w,X		; 7D F3 D5 ; Add $D5F3.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D613.w,X		; 7D 13 D6 ; Add $D613.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$BC.b		; A9 BC ; Load #$BC.b into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $D633.w,X		; BD 33 D6 ; Load $D633.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$2D.b		; 09 2D ; Logical OR #$2D.b with accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $06.b		; C6 06 ; Decrement $06.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $B7		; 10 B7 ; Branch if plus to $10, $B7 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	ora ($13.b)		; 12 13 ; OR accumulator with memory (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $13.b		; 14 13 ; Test and reset bits $13.b [Reads: Accumulator] [Flags: Z]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $D6A2.w,Y		; B9 A2 D6 ; Load $D6A2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	jsr $D784.w		; 20 84 D7 ; Jump to subroutine at $D784.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0DD0.w,Y		; B9 D0 0D ; Load $0DD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $F1		; 10 F1 ; Branch if plus to $10, $F1 [Flow: branch]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	jmp $F025.w		; 4C 25 F0 ; Jump to $F025.w [Flow: jump]
	jsr $FF78.w		; 20 78 FF ; Jump to subroutine at $FF78.w [Writes: Stack Pointer] [Flow: call]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $27		; D0 27 ; Branch if not equal to $D0, $27 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $E991.w		; 20 91 E9 ; Jump to subroutine at $E991.w [Writes: Stack Pointer] [Flow: call]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	inc $0D40.w,X		; FE 40 0D ; Increment memory $0D40.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	dec $0D40.w,X		; DE 40 0D ; Decrement memory $0D40.w,X [Reads: X Index] [Flags: ZN]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $01.b		; C5 01 ; Compare $01.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	inc $0D50.w,X		; FE 50 0D ; Increment memory $0D50.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	dec $0D50.w,X		; DE 50 0D ; Decrement memory $0D50.w,X [Reads: X Index] [Flags: ZN]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $F145.w		; 20 45 F1 ; Jump to subroutine at $F145.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	jsr $D72B.w		; 20 2B D7 ; Jump to subroutine at $D72B.w [Writes: Stack Pointer] [Flow: call]
	jsr $F2B4.w		; 20 B4 F2 ; Jump to subroutine at $F2B4.w [Writes: Stack Pointer] [Flow: call]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9C0.w		; 20 C0 D9 ; Jump to subroutine at $D9C0.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $F688.w		; 20 88 F6 ; Jump to subroutine at $F688.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9D5.w		; 20 D5 D9 ; Jump to subroutine at $D9D5.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr ($04FF.w,X)		; FC FF 04 ; Jump to subroutine indirect indexed ($04FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F80004.l,X		; FF 04 00 F8 ; Subtract with carry (long,X) $F80004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F80008.l,X		; FF 08 00 F8 ; Subtract with carry (long,X) $F80008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FC0008.l,X		; FF 08 00 FC ; Subtract with carry (long,X) $FC0008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FC0004.l,X		; FF 04 00 FC ; Subtract with carry (long,X) $FC0004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FC0004.l,X		; FF 04 00 FC ; Subtract with carry (long,X) $FC0004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $04FFFC.l,X		; FF FC FF 04 ; Subtract with carry (long,X) $04FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $08FFF8.l,X		; FF F8 FF 08 ; Subtract with carry (long,X) $08FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $04FFFC.l,X		; FF FC FF 04 ; Subtract with carry (long,X) $04FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $9C9C.w		; 8C 9C 9C ; Store Y register to $9C9C.w [Reads: Y Index]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	stz $0A.b		; 64 0A ; Store zero to $0A.b
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $D80E.w		; 20 0E D8 ; Jump to subroutine at $D80E.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $E41E.w		; 20 1E E4 ; Jump to subroutine at $E41E.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0A.b		; 65 0A ; Add $0A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D73C.w,X		; 7D 3C D7 ; Add $D73C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D754.w,X		; 7D 54 D7 ; Add $D754.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $D76C.w,X		; BD 6C D7 ; Load $D76C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $D778.w,X		; BD 78 D7 ; Load $D778.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0F.b		; 05 0F ; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $0B.b		; C6 0B ; Decrement $0B.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $B4		; 10 B4 ; Branch if plus to $10, $B4 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jmp $DC64.w		; 4C 64 DC ; Jump to $DC64.w [Flow: jump]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	sbc $F0.b,X		; F5 F0 ; Subtract $F0.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0B.b,X		; F5 0B ; Subtract $0B.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $F5.b		; 00 F5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A9.b,X		; F5 A9 ; Subtract $A9.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsb $7C22.w		; 0C 22 7C ; Test and set bits $7C22.w [Reads: Accumulator] [Flags: Z]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ora $05A9.w		; 0D A9 05 ; Logical OR $05A9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $1E		; 30 1E ; Branch if minus to $30, $1E [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0D.b		; A6 0D ; Load $0D.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $D802.w,X		; BD 02 D8 ; Load $D802.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda $D808.w,X		; BD 08 D8 ; Load $D808.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,Y		; 99 80 0F ; Store accumulator to $0F80.w,Y [Reads: Accumulator, Y Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,Y		; 99 80 0E ; Store accumulator to $0E80.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dec $0D.b		; C6 0D ; Decrement $0D.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $D6		; 10 D6 ; Branch if plus to $10, $D6 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0E0D.w		; 0C 0D 0E ; Test and set bits $0E0D.w [Reads: Accumulator] [Flags: Z]
	ora $0C0D0E.l		; 0F 0E 0D 0C ; OR accumulator with memory (long) $0C0D0E.l [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $DCEF.w		; 20 EF DC ; Jump to subroutine at $DCEF.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	dec $0E80.w,X		; DE 80 0E ; Decrement memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	jsr $FF78.w		; 20 78 FF ; Jump to subroutine at $FF78.w [Writes: Stack Pointer] [Flow: call]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	jsr $E96C.w		; 20 6C E9 ; Jump to subroutine at $E96C.w [Writes: Stack Pointer] [Flow: call]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9C0.w		; 20 C0 D9 ; Jump to subroutine at $D9C0.w [Writes: Stack Pointer] [Flow: call]
	jsr $F2B4.w		; 20 B4 F2 ; Jump to subroutine at $F2B4.w [Writes: Stack Pointer] [Flow: call]
	jsr $F145.w		; 20 45 F1 ; Jump to subroutine at $F145.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $BD.b		; 02 BD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0B89.w,X		; BD 89 0B ; Load $0B89.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$F1.b		; 29 F1 ; Logical AND #$F1.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $D896.w,Y		; 19 96 D8 ; OR accumulator with memory $D896.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	jsl $1AFA0C.l		; 22 0C FA 1A ; Jump to subroutine long $1AFA0C.l [Writes: Stack Pointer] [Flow: call]
	jsr $D953.w		; 20 53 D9 ; Jump to subroutine at $D953.w [Writes: Stack Pointer] [Flow: call]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $D892.w,Y		; B9 92 D8 ; Load $D892.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $0E00.w,X		; BC 00 0E ; Load Y register $0E00.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsr $FF78.w		; 20 78 FF ; Jump to subroutine at $FF78.w [Writes: Stack Pointer] [Flow: call]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $D906.w		; 20 06 D9 ; Jump to subroutine at $D906.w [Writes: Stack Pointer] [Flow: call]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9C0.w		; 20 C0 D9 ; Jump to subroutine at $D9C0.w [Writes: Stack Pointer] [Flow: call]
	jmp $D88B.w		; 4C 8B D8 ; Jump to $D88B.w [Flow: jump]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $FEFD.w,X		; FE FD FE ; Increment memory $FEFD.w,X [Reads: X Index] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0000.w,X		; FE 00 00 ; Increment memory $0000.w,X [Reads: X Index] [Flags: ZN]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $D8EE.w,Y		; B9 EE D8 ; Load $D8EE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $D8F6.w,Y		; B9 F6 D8 ; Load $D8F6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $D8FE.w,Y		; B9 FE D8 ; Load $D8FE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFF8.l,X		; FF F8 FF 00 ; Subtract with carry (long,X) $00FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $E1		; F0 E1 ; Branch if equal to $F0, $E1 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $0000.w		; CE 00 00 ; Decrement $0000.w [Flags: ZN]
	dec $E3E3.w		; CE E3 E3 ; Decrement $E3E3.w [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx $E5.b		; E4 E5 ; Compare $E5.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpy $E4E5.w		; CC E5 E4 ; Compare $E4E5.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy $4000.w		; CC 00 40 ; Compare $4000.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $DAE4.w,X		; 1E E4 DA ; Arithmetic shift left $DAE4.w,X [Reads: X Index] [Flags: ZNC]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D920.w,X		; 7D 20 D9 ; Add $D920.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D926.w,X		; 7D 26 D9 ; Add $D926.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $D92C.w,X		; BD 2C D9 ; Load $D92C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $D93E.w,X		; BD 3E D9 ; Load $D93E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $D950.w,X		; BD 50 D9 ; Load $D950.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0F.b		; 05 0F ; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $A6		; 10 A6 ; Branch if plus to $10, $A6 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jmp $DC64.w		; 4C 64 DC ; Jump to $DC64.w [Flow: jump]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $D9E2.w		; 20 E2 D9 ; Jump to subroutine at $D9E2.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $D9E2.w		; 20 E2 D9 ; Jump to subroutine at $D9E2.w [Writes: Stack Pointer] [Flow: call]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda $0FC1.w		; AD C1 0F ; Load $0FC1.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $0CAA.w,X		; BD AA 0C ; Load $0CAA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $07		; 30 07 ; Branch if minus to $30, $07 [Flow: branch]
	lda $0F00.w,X		; BD 00 0F ; Load $0F00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$A2.b		; A0 A2 ; Load #$A2.b into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$A2.b		; A0 A2 ; Load #$A2.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $80, $82		; 80 82 ; Branch always to $80, $82 [Flow: branch]
	.db $80, $82		; 80 82 ; Branch always to $80, $82 [Flow: branch]
	nop		; EA ; No operation
	cpx $4E84.w		; EC 84 4E ; Compare $4E84.w with X register [Reads: X Index] [Flags: ZNC]
	adc ($BD.b,X)		; 61 BD ; Add with carry ($BD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sty $2220.w		; 8C 20 22 ; Store Y register to $2220.w [Reads: Y Index]
	cpy #$C2.b		; C0 C2 ; Compare #$C2.b with Y register [Reads: Y Index] [Flags: ZNC]
	inc $E4.b		; E6 E4 ; Increment $E4.b [Reads: Direct Page] [Flags: ZN]
	.db $82, $AA, $84		; 82 AA 84 ; Branch always long to $82, $AA, $84 [Flow: branch]
	ldy $A080.w		; AC 80 A0 ; Load $A080.w into Y register [Writes: Y Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $0B3929.l		; AF 29 39 0B ; Load long $0B3929.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ror $6260.w		; 6E 60 62 ; Rotate right $6260.w [Flags: ZNC]
	adc $4C.b,S		; 63 4C ; Add with carry (stack relative) $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	nop		; EA ; No operation
	cpx $6B24.w		; EC 24 6B ; Compare $6B24.w with X register [Reads: X Index] [Flags: ZNC]
	bit $22.b		; 24 22 ; Test bits $22.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $26.b		; 24 26 ; Test bits $26.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsr $2130.w		; 20 30 21 ; Jump to subroutine at $2130.w [Writes: Stack Pointer] [Flow: call]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $86.b		; 24 86 ; Test bits $86.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $A28E.w		; 8C 8E A2 ; Store Y register to $A28E.w [Reads: Y Index]
	ldy $A6.b		; A4 A6 ; Load $A6.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	sty $80.b		; 84 80 ; Store Y register to $80.b [Reads: Y Index]
	.db $82, $6E, $40		; 82 6E 40 ; Branch always long to $82, $6E, $40 [Flow: branch]
	.db $42, $E6		; 42 E6 ; Reserved instruction
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $80, $82		; 80 82 ; Branch always to $80, $82 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta $E5E3.w		; 8D E3 E5 ; Store accumulator to $E5E3.w [Reads: Accumulator]
	cmp $E1.b		; C5 E1 ; Compare $E1.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tsb $24.b		; 04 24 ; Test and set bits $24.b [Reads: Accumulator] [Flags: Z]
	asl $0C2E.w		; 0E 2E 0C ; Arithmetic shift left $0C2E.w [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	stz $B6C7.w		; 9C C7 B6 ; Store zero to $B6C7.w
	lda [$60.b],Y		; B7 60 ; Load accumulator (long indexed) [$60.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $62, $64, $66		; 62 64 66 ; Push effective relative address $62, $64, $66 [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cpx $F4.b		; E4 F4 ; Compare $F4.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $CC.b		; C6 CC ; Decrement $CC.b [Reads: Direct Page] [Flags: ZN]
	dec $8428.w		; CE 28 84 ; Decrement $8428.w [Flags: ZN]
	.db $82, $80, $E5		; 82 80 E5 ; Branch always long to $82, $80, $E5 [Flow: branch]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$AA.b		; A0 AA ; Load #$AA.b into Y register [Writes: Y Index] [Flags: ZN]
	ldy $A6.b		; A4 A6 ; Load $A6.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $A8A2.w		; AC A2 A8 ; Load $A8A2.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $88.b		; A6 88 ; Load $88.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stx $8E.b		; 86 8E ; Store X register to $8E.b [Reads: X Index]
	ldx $428A.w		; AE 8A 42 ; Load $428A.w into X register [Writes: X Index] [Flags: ZN]
	mvp $44,$42		; 44 42 44 ; Move block positive $44,$42 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	stz $66.b		; 64 66 ; Store zero to $66.b
	cpy $CACC.w		; CC CC CA ; Compare $CACC.w with Y register [Reads: Y Index] [Flags: ZNC]
	sta [$97.b]		; 87 97 ; Store accumulator (long) [$97.b] [Reads: Accumulator, Direct Page]
	stx $ACAE.w		; 8E AE AC ; Store X register to $ACAE.w [Reads: X Index]
	sty $AA8E.w		; 8C 8E AA ; Store Y register to $AA8E.w [Reads: Y Index]
	ldy $F3D2.w		; AC D2 F3 ; Load $F3D2.w into Y register [Writes: Y Index] [Flags: ZN]
	sty $A2.b		; 84 A2 ; Store Y register to $A2.b [Reads: Y Index]
	sty $A4.b		; 84 A4 ; Store Y register to $A4.b [Reads: Y Index]
	sbc [$8A.b]		; E7 8A ; Subtract with carry (long) [$8A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldy #$A4.b		; A0 A4 ; Load #$A4.b into Y register [Writes: Y Index] [Flags: ZN]
	ldx #$A6.b		; A2 A6 ; Load #$A6.b into X register [Writes: X Index] [Flags: ZN]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldx $7E.b		; A6 7E ; Load $7E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	adc $8C888A.l,X		; 7F 8A 88 8C ; Add long $8C888A.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $86.b		; A6 86 ; Load $86.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stx $86AC.w		; 8E AC 86 ; Store X register to $86AC.w [Reads: X Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldy $B9A9.w		; AC A9 B9 ; Load $B9A9.w into Y register [Writes: Y Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ldy $8E8A.w,X		; BC 8A 8E ; Load Y register $8E8A.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stx $0A.b		; 86 0A ; Store X register to $0A.b [Reads: X Index]
	rep #$C4		; C2 C4 ; Reset processor status bits #$C4 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
.ACCU 8
	sep #$E4		; E2 E4
	dec $EA.b		; C6 EA ; Decrement $EA.b [Reads: Direct Page] [Flags: ZN]
	cpx $E6FF.w		; EC FF E6 ; Compare $E6FF.w with X register [Reads: X Index] [Flags: ZNC]
	dec $CC.b		; C6 CC ; Decrement $CC.b [Reads: Direct Page] [Flags: ZN]
	cpx $EECE.w		; EC CE EE ; Compare $EECE.w with X register [Reads: X Index] [Flags: ZNC]
	jmp $4E6C.w		; 4C 6C 4E ; Jump to $4E6C.w [Flow: jump]
	ror $C4C8.w		; 6E C8 C4 ; Rotate right $C4C8.w [Flags: ZNC]
	dec $88.b		; C6 88 ; Decrement $88.b [Reads: Direct Page] [Flags: ZN]
	sty $E024.w		; 8C 24 E0 ; Store Y register to $E024.w [Reads: Y Index]
	ldx $C8C0.w		; AE C0 C8 ; Load $C8C0.w into X register [Writes: X Index] [Flags: ZN]
	cpy $C6.b		; C4 C6 ; Compare $C6.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
.ACCU 8
	sep #$E0		; E2 E0
	inc $A0AE.w		; EE AE A0 ; Increment $A0AE.w [Flags: ZN]
	.db $80, $EE		; 80 EE ; Branch always to $80, $EE [Flow: branch]
	cpy #$C2.b		; C0 C2 ; Compare #$C2.b with Y register [Reads: Y Index] [Flags: ZNC]
	lda $86AA8C.l,X		; BF 8C AA 86 ; Load long $86AA8C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx $2C.b		; A6 2C ; Load $2C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	asl $DF.b		; 06 DF ; Arithmetic shift left $DF.b [Reads: Direct Page] [Flags: ZNC]
	cmp $4646A9.l		; CF A9 46 46 ; Compare accumulator (long) $4646A9.l [Reads: Accumulator] [Flags: ZNC]
	nop		; EA ; No operation
	cpy #$C2.b		; C0 C2 ; Compare #$C2.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpx #$E8.b		; E0 E8 ; Compare #$E8.b with X register [Reads: X Index] [Flags: ZNC]
.ACCU 8
	sep #$E6		; E2 E6
	cpx $0B.b		; E4 0B ; Compare $0B.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	stx $ECA0.w		; 8E A0 EC ; Store X register to $ECA0.w [Reads: X Index]
	nop		; EA ; No operation
	sbc #$48.b		; E9 48 ; Subtract #$48.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	brk $6B.b		; 00 6B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	wai		; CB ; Wait for interrupt
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0000.w		; 0D 00 00 ; Logical OR $0000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $00.b,X		; 56 00 ; Logical shift right $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $B6.b		; 00 B6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $0000.w		; 1C 00 00 ; Test and reset bits $0000.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($F3.b,S),Y		; F3 F3 ; Subtract with carry (stack relative indirect indexed) ($F3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $BB.b		; 00 BB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $42.b		; 00 42 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00003F.l		; 0F 3F 00 00 ; OR accumulator with memory (long) $00003F.l [Writes: Accumulator] [Flags: ZN]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	mvp $00,$00		; 44 00 00 ; Move block positive $00,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$46.b]		; 47 46 ; Exclusive OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $65.b		; 65 65 ; Add $65.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8F.b		; 00 8F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $4E4E.w		; 4C 4E 4E ; Jump to $4E4E.w [Flow: jump]
	lsr $004E.w		; 4E 4E 00 ; Logical shift right $004E.w [Flags: ZNC]
	.db $30, $24		; 30 24 ; Branch if minus to $30, $24 [Flow: branch]
	and ($38.b)		; 32 38 ; AND accumulator with memory (indirect) ($38.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $0081.w,X		; 3C 81 00 ; Test bits $0081.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	eor ($00.b)		; 52 00 ; Exclusive OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5C.b		; 00 5C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $0000.w,X		; 5E 00 00 ; Logical shift right $0000.w,X [Reads: X Index] [Flags: ZNC]
	brk $65.b		; 00 65 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $00.b		; 66 00 ; Rotate right $00.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6E.b		; 00 6E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $3B00.w		; 0E 00 3B ; Arithmetic shift left $3B00.w [Flags: ZNC]
	.db $42, $00		; 42 00 ; Reserved instruction
	brk $75.b		; 00 75 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $8D8400.l		; CF 00 84 8D ; Compare accumulator (long) $8D8400.l [Reads: Accumulator] [Flags: ZNC]
	sta $8D8D.w		; 8D 8D 8D ; Store accumulator to $8D8D.w [Reads: Accumulator]
	brk $94.b		; 00 94 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $A0.b,X		; 75 A0 ; Add $A0.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx #$A6.b		; A2 A6 ; Load #$A6.b into X register [Writes: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B1.b		; 00 B1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B5.b		; 00 B5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $69.b		; 00 69 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5C.b		; 00 5C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D6.b		; 00 D6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$6A.b		; C0 6A ; Compare #$6A.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$00.b],Y		; D7 00 ; Compare accumulator (long indexed) [$00.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cld		; D8 ; Clear decimal flag [Flags: D]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $00E3.w,X		; DE E3 00 ; Decrement memory $00E3.w,X [Reads: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pea $1DF4.w		; F4 F4 1D ; Push absolute address $1DF4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ora $201F1F.l,X		; 1F 1F 1F 20 ; Logical OR long $201F1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr $2120.w		; 20 20 21 ; Jump to subroutine at $2120.w [Writes: Stack Pointer] [Flow: call]
	jsl $252323.l		; 22 23 23 25 ; Jump to subroutine long $252323.l [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	inc $29.b,X		; F6 29 ; Increment memory $29.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $8BCE.w		; CD CE 8B ; Compare $8BCE.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $DC10.w		; 20 10 DC ; Jump to subroutine at $DC10.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $DCEF.w		; 20 EF DC ; Jump to subroutine at $DCEF.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr $E41E.w		; 20 1E E4 ; Jump to subroutine at $E41E.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Accumulator, Direct Page]
.ACCU 16
	rep #$20		; C2 20
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $B0, $1C		; B0 1C ; Branch if carry set to $B0, $1C [Flow: branch]
	sbc #$0F.b		; E9 0F ; Subtract #$0F.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldy $0E20.w,X		; BC 20 0E ; Load Y register $0E20.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $DB04.w,Y		; B9 04 DB ; Load $DB04.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $DA09.w,Y		; B9 09 DA ; Load $DA09.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $DC64.w		; 20 64 DC ; Jump to subroutine at $DC64.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $DC66.w		; 20 66 DC ; Jump to subroutine at $DC66.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D00.w,X		; 7D 00 0D ; Add $0D00.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda $0F00.w,X		; BD 00 0F ; Load $0F00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $56		; D0 56 ; Branch if not equal to $D0, $56 [Flow: branch]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $7FFA1C.l,X		; BF 1C FA 7F ; Load long $7FFA1C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $47		; F0 47 ; Branch if equal to $F0, $47 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $B0, $53		; B0 53 ; Branch if carry set to $B0, $53 [Flow: branch]
	lda $0E40.w,X		; BD 40 0E ; Load $0E40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $21		; F0 21 ; Branch if equal to $F0, $21 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda #$38.b		; A9 38 ; Load #$38.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$30.b		; 29 30 ; Logical AND #$30.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$6C.b		; A9 6C ; Load #$6C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$30.b		; 29 30 ; Logical AND #$30.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E41E.w		; 20 1E E4 ; Jump to subroutine at $E41E.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Accumulator, Direct Page]
.ACCU 16
	rep #$20		; C2 20
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $B0, $1C		; B0 1C ; Branch if carry set to $B0, $1C [Flow: branch]
	sbc #$0F.b		; E9 0F ; Subtract #$0F.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldy $0E20.w,X		; BC 20 0E ; Load Y register $0E20.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $DB04.w,Y		; B9 04 DB ; Load $DB04.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $DA09.w,Y		; B9 09 DA ; Load $DA09.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $DC66.w		; 4C 66 DC ; Jump to $DC66.w [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $DD40.w		; 20 40 DD ; Jump to subroutine at $DD40.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E41E.w		; 20 1E E4 ; Jump to subroutine at $E41E.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
.ACCU 16
	rep #$20		; C2 20
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda #$00F0.w		; A9 F0 00 ; Load #$00F0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda #$00F0.w		; A9 F0 00 ; Load #$00F0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
.ACCU 8
	sep #$20		; E2 20
	ldy $0E20.w,X		; BC 20 0E ; Load Y register $0E20.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $DB04.w,Y		; B9 04 DB ; Load $DB04.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $DA09.w,Y		; B9 09 DA ; Load $DA09.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ldy #$07.b		; A0 07 ; Load #$07.b into Y register [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	jmp $DC4C.w		; 4C 4C DC ; Jump to $DC4C.w [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,X		; 9D 20 0F ; Store accumulator to $0F20.w,X [Reads: Accumulator, X Index]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBA88.l		; 22 88 BA 0D ; Jump to subroutine long $0DBA88.l [Writes: Stack Pointer] [Flow: call]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $DDAF.w,Y		; 19 AF DD ; OR accumulator with memory $DDAF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $DDB3.w,Y		; B9 B3 DD ; Load $DDB3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	jsr $DC10.w		; 20 10 DC ; Jump to subroutine at $DC10.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9EC.w		; 20 EC D9 ; Jump to subroutine at $D9EC.w [Writes: Stack Pointer] [Flow: call]
	jsr $FF78.w		; 20 78 FF ; Jump to subroutine at $FF78.w [Writes: Stack Pointer] [Flow: call]
	jsr $D88B.w		; 20 8B D8 ; Jump to subroutine at $D88B.w [Writes: Stack Pointer] [Flow: call]
	lda $0EA0.w,X		; BD A0 0E ; Load $0EA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $CF5D.w		; 20 5D CF ; Jump to subroutine at $CF5D.w [Writes: Stack Pointer] [Flow: call]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	inc $0E80.w,X		; FE 80 0E ; Increment memory $0E80.w,X [Reads: X Index] [Flags: ZN]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $2C		; F0 2C ; Branch if equal to $F0, $2C [Flow: branch]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $27		; D0 27 ; Branch if not equal to $D0, $27 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $E991.w		; 20 91 E9 ; Jump to subroutine at $E991.w [Writes: Stack Pointer] [Flow: call]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	inc $0D40.w,X		; FE 40 0D ; Increment memory $0D40.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	dec $0D40.w,X		; DE 40 0D ; Decrement memory $0D40.w,X [Reads: X Index] [Flags: ZN]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $01.b		; C5 01 ; Compare $01.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	inc $0D50.w,X		; FE 50 0D ; Increment memory $0D50.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	dec $0D50.w,X		; DE 50 0D ; Decrement memory $0D50.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $F8		; D0 F8 ; Branch if not equal to $D0, $F8 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $E991.w		; 20 91 E9 ; Jump to subroutine at $E991.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	.db $80, $C1		; 80 C1 ; Branch always to $80, $C1 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($F6.b,S),Y		; F3 F6 ; Subtract with carry (stack relative indirect indexed) ($F6.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFFF.l,X		; FF FF FF 00 ; Subtract with carry (long,X) $00FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0F0E.w		; 0D 0E 0F ; Logical OR $0F0E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $10.b,X		; 16 10 ; Arithmetic shift left $10.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $0810.w		; 0E 10 08 ; Arithmetic shift left $0810.w [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $0310.w		; 0E 10 03 ; Arithmetic shift left $0310.w [Flags: ZNC]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($AD.b,X)		; 01 AD ; Logical OR ($AD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $9D.b		; 04 9D ; Test and set bits $9D.b [Reads: Accumulator] [Flags: Z]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsb $1CBF.w		; 0C BF 1C ; Test and set bits $1CBF.w [Reads: Accumulator] [Flags: Z]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	adc $F003C9.l,X		; 7F C9 03 F0 ; Add long $F003C9.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $F0BD.w,X		; 1E BD F0 ; Arithmetic shift left $F0BD.w,X [Reads: X Index] [Flags: ZNC]
	ora $17D0.w		; 0D D0 17 ; Logical OR $17D0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $0DB0.w,X		; BC B0 0D ; Load Y register $0DB0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$06.b		; C0 06 ; Compare #$06.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $7FFA1C.l,X		; BF 1C FA 7F ; Load long $7FFA1C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7FFA1C.l,X		; 9F 1C FA 7F ; Store accumulator (long,X) $7FFA1C.l,X [Reads: Accumulator, X Index]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$EF.b		; 29 EF ; Logical AND #$EF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda $0F10.w,X		; BD 10 0F ; Load $0F10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp #$3F.b		; C9 3F ; Compare #$3F.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7FFA1C.l,X		; 7F 1C FA 7F ; Add long $7FFA1C.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $DE4D.w,Y		; 79 4D DE ; Add $DE4D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	adc $DE5D.w,Y		; 79 5D DE ; Add $DE5D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $DE6D.w,Y		; B9 6D DE ; Load $DE6D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	ldy $2E.b		; A4 2E ; Load $2E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cpy #$06.b		; C0 06 ; Compare #$06.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $DE7D.w,Y		; 79 7D DE ; Add $DE7D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $25.b		; A5 25 ; Load $25.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $0E.b		; E5 0E ; Subtract $0E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,X		; 9D 20 0F ; Store accumulator to $0F20.w,X [Reads: Accumulator, X Index]
	jsr $DF6D.w		; 20 6D DF ; Jump to subroutine at $DF6D.w [Writes: Stack Pointer] [Flow: call]
	jsr $84C1.w		; 20 C1 84 ; Jump to subroutine at $84C1.w [Writes: Stack Pointer] [Flow: call]
	lda $7FFA2C.l,X		; BF 2C FA 7F ; Load long $7FFA2C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	jsr $9271.w		; 20 71 92 ; Jump to subroutine at $9271.w [Writes: Stack Pointer] [Flow: call]
	lda $0F10.w,X		; BD 10 0F ; Load $0F10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1F		; D0 1F ; Branch if not equal to $D0, $1F [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	stz $0DA0.w,X		; 9E A0 0D ; Store zero to $0DA0.w,X [Reads: X Index]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F10.w,X		; 9D 10 0F ; Store accumulator to $0F10.w,X [Reads: Accumulator, X Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$10.b		; 09 10 ; Logical OR #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0309.w		; 8D 09 03 ; Store accumulator to $0309.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp $E2BA.w		; 4C BA E2 ; Jump to $E2BA.w [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
.ACCU 16
.INDEX 16
	rep #$3F		; C2 3F
.ACCU 16
.INDEX 16
	rep #$3F		; C2 3F
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	lda $0010.w		; AD 10 00 ; Load $0010.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$F00E.w		; C9 0E F0 ; Compare #$F00E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc #$5BA5.w		; E9 A5 5B ; Subtract #$5BA5.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cmp #$F002.w		; C9 02 F0 ; Compare #$F002.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and #$4DA5.w		; 29 A5 4D ; Logical AND #$4DA5.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and #$AC01.w		; 29 01 AC ; Logical AND #$AC01.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0D.b,S		; 03 0D ; OR accumulator with stack relative $0D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	ora $0345.w		; 0D 45 03 ; Logical OR $0345.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $02E0.w		; 0D E0 02 ; Logical OR $02E0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $02DA.w		; 0D DA 02 ; Logical OR $02DA.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda $7FFA1C.l,X		; BF 1C FA 7F ; Load long $7FFA1C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D003.w		; C9 03 D0 ; Compare #$D003.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $F6.b		; 05 F6 ; Logical OR $F6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $52		; 10 52 ; Branch if plus to $10, $52 [Flow: branch]
	asl $F6.b		; 06 F6 ; Arithmetic shift left $F6.b [Reads: Direct Page] [Flags: ZNC]
	lsr $F6.b		; 46 F6 ; Logical shift right $F6.b [Reads: Direct Page] [Flags: ZNC]
	lda #$2213.w		; A9 13 22 ; Load #$2213.w into accumulator [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ora $02A9.w		; 0D A9 02 ; Logical OR $02A9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0309.w		; 8D 09 03 ; Store accumulator to $0309.w [Reads: Accumulator]
	lda $7FFA2C.l,X		; BF 2C FA 7F ; Load long $7FFA2C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	stz $0F80.w,X		; 9E 80 0F ; Store zero to $0F80.w,X [Reads: X Index]
	lda #$9F00.w		; A9 00 9F ; Load #$9F00.w into accumulator [Writes: Accumulator] [Flags: ZN]
	trb $7FFA.w		; 1C FA 7F ; Test and reset bits $7FFA.w [Reads: Accumulator] [Flags: Z]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0DB359.l,X		; BF 59 B3 0D ; Load long $0DB359.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and #$8510.w		; 29 10 85 ; Logical AND #$8510.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $EF29.w		; 0E 29 EF ; Arithmetic shift left $EF29.w [Flags: ZNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $DF61.w,Y		; B9 61 DF ; Load $DF61.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $DF65.w,Y		; B9 65 DF ; Load $DF65.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $DF69.w,Y		; B9 69 DF ; Load $DF69.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda #$9D00.w		; A9 00 9D ; Load #$9D00.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $E02A.w		; 20 2A E0 ; Jump to subroutine at $E02A.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E2B6.w		; 20 B6 E2 ; Jump to subroutine at $E2B6.w [Writes: Stack Pointer] [Flow: call]
	jsr $D9F3.w		; 20 F3 D9 ; Jump to subroutine at $D9F3.w [Writes: Stack Pointer] [Flow: call]
	lda $0EA0.w,X		; BD A0 0E ; Load $0EA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	stz $0EA0.w,X		; 9E A0 0E ; Store zero to $0EA0.w,X [Reads: X Index]
	jsr $CF5D.w		; 20 5D CF ; Jump to subroutine at $CF5D.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$B020.w		; C9 20 B0 ; Compare #$B020.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $F2.b,X		; B4 F2 ; Load Y register $F2.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	jsr $FF78.w		; 20 78 FF ; Jump to subroutine at $FF78.w [Writes: Stack Pointer] [Flow: call]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	lda $0E90.w,X		; BD 90 0E ; Load $0E90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1F		; D0 1F ; Branch if not equal to $D0, $1F [Flow: branch]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $70		; F0 70 ; Branch if equal to $F0, $70 [Flow: branch]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$F00F.w		; 29 0F F0 ; Logical AND #$F00F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $20		; 10 20 ; Branch if plus to $10, $20 [Flow: branch]
	and #$BDE2.w		; 29 E2 BD ; Logical AND #$BDE2.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	cmp #$D00B.w		; C9 0B D0 ; Compare #$D00B.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	asl $A9.b		; 06 A9 ; Arithmetic shift left $A9.b [Reads: Direct Page] [Flags: ZNC]
	ora $22.b		; 05 22 ; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($0DBB.w,X)		; 7C BB 0D ; Jump indirect indexed to ($0DBB.w,X) [Reads: X Index] [Flow: jump]
	ldy #$2068.w		; A0 68 20 ; Load #$2068.w into Y register [Writes: Y Index] [Flags: ZN]
	bit $DAE7.w,X		; 3C E7 DA ; Test bits $DAE7.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0DB359.l,X		; BF 59 B3 0D ; Load long $0DB359.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and #$F010.w		; 29 10 F0 ; Logical AND #$F010.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($BD.b)		; 12 BD ; OR accumulator with memory (indirect) ($BD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $1009.w		; 0E 09 10 ; Arithmetic shift left $1009.w [Flags: ZNC]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	lda $0FA5.w		; AD A5 0F ; Load $0FA5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$D020.w		; C9 20 D0 ; Compare #$D020.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($86.b)		; 12 86 ; OR accumulator with memory (indirect) ($86.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $E96C.w		; 20 6C E9 ; Jump to subroutine at $E96C.w [Writes: Stack Pointer] [Flow: call]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	dec $0F80.w,X		; DE 80 0F ; Decrement memory $0F80.w,X [Reads: X Index] [Flags: ZN]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp #$B0F0.w		; C9 F0 B0 ; Compare #$B0F0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $4C.b,S		; 03 4C ; OR accumulator with stack relative $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor #$9EE1.w		; 49 E1 9E ; Exclusive OR #$9EE1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $70, $0F		; 70 0F ; Branch if overflow set to $70, $0F [Flow: branch]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D0E8.w		; C9 E8 D0 ; Compare #$D0E8.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora [$BD.b],Y		; 17 BD ; OR accumulator with memory (long indexed) [$BD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $0F		; 80 0F ; Branch always to $80, $0F [Flow: branch]
	cmp #$10E8.w		; C9 E8 10 ; Compare #$10E8.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $A9		; 10 A9 ; Branch if plus to $10, $A9 [Flow: branch]
	asl $9D.b		; 06 9D ; Arithmetic shift left $9D.b [Reads: Direct Page] [Flags: ZNC]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda #$9D08.w		; A9 08 9D ; Load #$9D08.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	lda #$9D03.w		; A9 03 9D ; Load #$9D03.w into accumulator [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	asl $2060.w		; 0E 60 20 ; Arithmetic shift left $2060.w [Flags: ZNC]
	and $A5ADE2.l		; 2F E2 AD A5 ; AND accumulator with memory (long) $A5ADE2.l [Writes: Accumulator] [Flags: ZN]
	ora $D020C9.l		; 0F C9 20 D0 ; OR accumulator with memory (long) $D020C9.l [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0B6B.w,X		; BD 6B 0B ; Load $0B6B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $14		; B0 14 ; Branch if carry set to $B0, $14 [Flow: branch]
	lda #$9D01.w		; A9 01 9D ; Load #$9D01.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda #$9D1F.w		; A9 1F 9D ; Load #$9D1F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	stz $012E.w		; 9C 2E 01 ; Store zero to $012E.w
	lda #$2220.w		; A9 20 22 ; Load #$2220.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp ($0DBB.w,X)		; 7C BB 0D ; Jump indirect indexed to ($0DBB.w,X) [Reads: X Index] [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$D009.w		; C9 09 D0 ; Compare #$D009.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	asl $80BD.w,X		; 1E BD 80 ; Arithmetic shift left $80BD.w,X [Reads: X Index] [Flags: ZNC]
	ora $0F809E.l		; 0F 9E 80 0F ; OR accumulator with memory (long) $0F809E.l [Writes: Accumulator] [Flags: ZN]
	cmp #$10F0.w		; C9 F0 10 ; Compare #$10F0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$22EC.w		; A9 EC 22 ; Load #$22EC.w into accumulator [Writes: Accumulator] [Flags: ZN]
	eor $1DF6.w,X		; 5D F6 1D ; Exclusive OR accumulator with memory $1DF6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $40		; 30 40 ; Branch if minus to $30, $40 [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsr $E0F6.w		; 20 F6 E0 ; Jump to subroutine at $E0F6.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	.db $80, $34		; 80 34 ; Branch always to $80, $34 [Flow: branch]
	cmp #$D008.w		; C9 08 D0 ; Compare #$D008.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $30, $BD		; 30 BD ; Branch if minus to $30, $BD [Flow: branch]
	jsr $C90E.w		; 20 0E C9 ; Jump to subroutine at $C90E.w [Writes: Stack Pointer] [Flow: call]
	cmp ($F0.b)		; D2 F0 ; Compare accumulator (indirect) ($F0.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora [$22.b]		; 07 22 ; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($BA.b),Y		; 71 BA ; Add with carry ($BA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $904A.w		; 0D 4A 90 ; Logical OR $904A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stx $E2.b		; 86 E2 ; Store X register to $E2.b [Reads: X Index]
	jsl $0DBBA1.l		; 22 A1 BB 0D ; Jump to subroutine long $0DBBA1.l [Writes: Stack Pointer] [Flow: call]
	ora #$8D28.w		; 09 28 8D ; Logical OR #$8D28.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $A901.w		; 2E 01 A9 ; Rotate left $A901.w [Flags: ZNC]
	ora $9D.b,S		; 03 9D ; OR accumulator with stack relative $9D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda #$9D0F.w		; A9 0F 9D ; Load #$9D0F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$4C01.w		; 29 01 4C ; Logical AND #$4C01.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $E0.b,X		; 95 E0 ; Store accumulator to $E0.b,X [Reads: Accumulator, X Index]
	lda $0F80.w,X		; BD 80 0F ; Load $0F80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $0D		; 10 0D ; Branch if plus to $10, $0D [Flow: branch]
	eor #$1AFF.w		; 49 FF 1A ; Exclusive OR #$1AFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp #$B009.w		; C9 09 B0 ; Compare #$B009.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9D.b		; 00 9D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $0F		; 80 0F ; Branch always to $80, $0F [Flow: branch]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror $0D50.w,X		; 7E 50 0D ; Rotate right $0D50.w,X [Reads: X Index] [Flags: ZNC]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D0FF.w		; C9 FF D0 ; Compare #$D0FF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $9E.b,S		; 03 9E ; OR accumulator with stack relative $9E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $50, $0D		; 50 0D ; Branch if overflow clear to $50, $0D [Flow: branch]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror $0D40.w,X		; 7E 40 0D ; Rotate right $0D40.w,X [Reads: X Index] [Flags: ZNC]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D0FF.w		; C9 FF D0 ; Compare #$D0FF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $9E.b,S		; 03 9E ; OR accumulator with stack relative $9E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora $D0BD.w		; 0D BD D0 ; Logical OR $D0BD.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0BC9.w		; 0D C9 0B ; Logical OR $0BC9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $7FFA3C.l,X		; BF 3C FA 7F ; Load long $7FFA3C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	jsr $F228.w		; 20 28 F2 ; Jump to subroutine at $F228.w [Writes: Stack Pointer] [Flow: call]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$F04A.w		; C9 4A F0 ; Compare #$F04A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($E1.b)		; 72 E1 ; Add with carry (indirect) ($E1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	lda $0E90.w,X		; BD 90 0E ; Load $0E90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	jmp $E02A.w		; 4C 2A E0 ; Jump to $E02A.w [Flow: jump]
	lda $0F10.w,X		; BD 10 0F ; Load $0F10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $3A		; D0 3A ; Branch if not equal to $D0, $3A [Flow: branch]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0D40.w,X		; 1D 40 0D ; OR accumulator with memory $0D40.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $32		; F0 32 ; Branch if equal to $F0, $32 [Flow: branch]
	ldy #$5A0F.w		; A0 0F 5A ; Load #$5A0F.w into Y register [Writes: Y Index] [Flags: ZN]
	cpy $0FA0.w		; CC A0 0F ; Compare $0FA0.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $26		; F0 26 ; Branch if equal to $F0, $26 [Flow: branch]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$F0D2.w		; C9 D2 F0 ; Compare #$F0D2.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $0DD0B9.l,X		; 1F B9 D0 0D ; Logical OR long $0DD0B9.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$9009.w		; C9 09 90 ; Compare #$9009.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$1903.w		; 29 03 19 ; Logical AND #$1903.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$190B.w		; A0 0B 19 ; Load #$190B.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $0F20.w,X		; BD 20 0F ; Load $0F20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $0F20.w,Y		; D9 20 0F ; Compare accumulator $0F20.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $E1B2.w		; 20 B2 E1 ; Jump to subroutine at $E1B2.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $D0		; 10 D0 ; Branch if plus to $10, $D0 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$850F.w		; A9 0F 85 ; Load #$850F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cop $BD.b		; 02 BD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0F70.w,X		; FD 70 0F ; Subtract with carry $0F70.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$8508.w		; 69 08 85 ; Add #$8508.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora ($BD.b,X)		; 01 BD ; Logical OR ($BD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $690D.w		; 20 0D 69 ; Jump to subroutine at $690D.w [Writes: Stack Pointer] [Flow: call]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$8500.w		; E9 00 85 ; Subtract #$8500.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora #$08A9.w		; 09 A9 08 ; Logical OR #$08A9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsr $F7EF.w		; 20 EF F7 ; Jump to subroutine at $F7EF.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsr $F836.w		; 20 36 F8 ; Jump to subroutine at $F836.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $CB		; 90 CB ; Branch if carry clear to $90, $CB [Flow: branch]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D03F.w		; C9 3F D0 ; Compare #$D03F.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	asl $22.b		; 06 22 ; Arithmetic shift left $22.b [Reads: Direct Page] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inc $06.b,X		; F6 06 ; Increment memory $06.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	.db $80, $36		; 80 36 ; Branch always to $80, $36 [Flow: branch]
	lda #$4803.w		; A9 03 48 ; Load #$4803.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D0EC.w		; C9 EC D0 ; Compare #$D0EC.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $0DB0BD.l		; 0F BD B0 0D ; OR accumulator with memory (long) $0DB0BD.l [Writes: Accumulator] [Flags: ZN]
	cmp #$D002.w		; C9 02 D0 ; Compare #$D002.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	lda #$4801.w		; A9 01 48 ; Load #$4801.w into accumulator [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsl $06ECE0.l		; 22 E0 EC 06 ; Jump to subroutine long $06ECE0.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0F40.w,Y		; 99 40 0F ; Store accumulator to $0F40.w,Y [Reads: Accumulator, Y Index]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0F30.w,Y		; 99 30 0F ; Store accumulator to $0F30.w,Y [Reads: Accumulator, Y Index]
	lda #$9D10.w		; A9 10 9D ; Load #$9D10.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	jsr $D9D5.w		; 20 D5 D9 ; Jump to subroutine at $D9D5.w [Writes: Stack Pointer] [Flow: call]
	jsr $E26E.w		; 20 6E E2 ; Jump to subroutine at $E26E.w [Writes: Stack Pointer] [Flow: call]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D0EC.w		; C9 EC D0 ; Compare #$D0EC.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and [$9C.b],Y		; 37 9C ; AND accumulator with memory (long indexed) [$9C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $BD0F.w		; AC 0F BD ; Load $BD0F.w into Y register [Writes: Y Index] [Flags: ZN]
	cpy #$F00D.w		; C0 0D F0 ; Compare #$F00D.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora #$9C8D.w		; 09 8D 9C ; Logical OR #$9C8D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr $8264.w		; 20 64 82 ; Jump to subroutine at $8264.w [Writes: Stack Pointer] [Flow: call]
	stz $0B9C.w		; 9C 9C 0B ; Store zero to $0B9C.w
	ldy $0DB0.w,X		; BC B0 0D ; Load Y register $0DB0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$9C00.w		; A0 00 9C ; Load #$9C00.w into Y register [Writes: Y Index] [Flags: ZN]
	rol $B901.w		; 2E 01 B9 ; Rotate left $B901.w [Flags: ZNC]
	adc $22E2.w,X		; 7D E2 22 ; Add $22E2.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp ($0DBB.w,X)		; 7C BB 0D ; Jump indirect indexed to ($0DBB.w,X) [Reads: X Index] [Flow: jump]
	lda #$9D1F.w		; A9 1F 9D ; Load #$9D1F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	lda #$9D06.w		; A9 06 9D ; Load #$9D06.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $0E40.w,X		; BD 40 0E ; Load $0E40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$9D04.w		; 69 04 9D ; Add #$9D04.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	asl $BD60.w		; 0E 60 BD ; Arithmetic shift left $BD60.w [Flags: ZNC]
	.db $50, $0D		; 50 0D ; Branch if overflow clear to $50, $0D [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror $0D50.w,X		; 7E 50 0D ; Rotate right $0D50.w,X [Reads: X Index] [Flags: ZNC]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ror $0D40.w,X		; 7E 40 0D ; Rotate right $0D40.w,X [Reads: X Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $1E1E1F.l,X		; 1F 1F 1E 1E ; Logical OR long $1E1E1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $1F1F.w,X		; 1E 1F 1F ; Arithmetic shift left $1F1F.w,X [Reads: X Index] [Flags: ZNC]
	ora $D2A91F.l,X		; 1F 1F A9 D2 ; Logical OR long $D2A91F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $18		; 30 18 ; Branch if minus to $30, $18 [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda #$9902.w		; A9 02 99 ; Load #$9902.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	lda #$9930.w		; A9 30 99 ; Load #$9930.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D0D2.w		; C9 D2 D0 ; Compare #$D0D2.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $99.b,S		; 03 99 ; OR accumulator with stack relative $99.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr ($030C.w,X)		; FC 0C 03 ; Jump to subroutine indirect indexed ($030C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $01030F.l,X		; 7F 0F 03 01 ; Add long $01030F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $1EFF.w		; 8D FF 1E ; Store accumulator to $1EFF.w [Reads: Accumulator]
	jsr $9271.w		; 20 71 92 ; Jump to subroutine at $9271.w [Writes: Stack Pointer] [Flow: call]
	lda $7FFA3C.l,X		; BF 3C FA 7F ; Load long $7FFA3C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $4E		; F0 4E ; Branch if equal to $F0, $4E [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$B020.w		; C9 20 B0 ; Compare #$B020.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$09F1.w		; 29 F1 09 ; Logical AND #$09F1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $9D.b		; 04 9D ; Test and set bits $9D.b [Reads: Accumulator] [Flags: Z]
	.db $50, $0F		; 50 0F ; Branch if overflow clear to $50, $0F [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $11.b		; 05 11 ; Logical OR $11.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $E2AF.w,Y		; 39 AF E2 ; AND accumulator with memory $E2AF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $26		; D0 26 ; Branch if not equal to $D0, $26 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$A803.w		; 29 03 A8 ; Logical AND #$A803.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $E2A7.w,Y		; B9 A7 E2 ; Load $E2A7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $E2AB.w,Y		; B9 AB E2 ; Load $E2AB.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$A803.w		; 29 03 A8 ; Logical AND #$A803.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $E2A7.w,Y		; B9 A7 E2 ; Load $E2A7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $E2AB.w,Y		; B9 AB E2 ; Load $E2AB.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	jsl $1EA007.l		; 22 07 A0 1E ; Jump to subroutine long $1EA007.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0501.w		; 29 01 05 ; Logical AND #$0501.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($0D.b),Y		; 11 0D ; OR accumulator with memory ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($0F.b,X)		; C1 0F ; Compare accumulator ($0F.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $0B58.w,X		; BD 58 0B ; Load $0B58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	dec $0B58.w,X		; DE 58 0B ; Decrement memory $0B58.w,X [Reads: X Index] [Flags: ZN]
	cmp #$B038.w		; C9 38 B0 ; Compare #$B038.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	tsb $0129.w		; 0C 29 01 ; Test and set bits $0129.w [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $E341.w,Y		; B9 41 E3 ; Load $E341.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	jsr $E932.w		; 20 32 E9 ; Jump to subroutine at $E932.w [Writes: Stack Pointer] [Flow: call]
	rts		; [PATTERN: Memory clearing operation] 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$9D09.w		; A9 09 9D ; Load #$9D09.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	stz $0F40.w,X		; 9E 40 0F ; Store zero to $0F40.w,X [Reads: X Index]
	stz $0F30.w,X		; 9E 30 0F ; Store zero to $0F30.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($0D.b,X)		; 01 0D ; Logical OR ($0D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($0D.b,X)		; 01 0D ; Logical OR ($0D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $FB04.w,Y		; F9 04 FB ; Subtract with carry $FB04.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: ZNC]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($090A.w,X)		; FC 0A 09 ; Jump to subroutine indirect indexed ($090A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsr ($090A.w,X)		; FC 0A 09 ; Jump to subroutine indirect indexed ($090A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	inc $04.b,X		; F6 04 ; Increment memory $04.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $0100.w,X		; FE 00 01 ; Increment memory $0100.w,X [Reads: X Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $A4.b		; 24 A4 ; Test bits $A4.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $A4.b		; 24 A4 ; Test bits $A4.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cpx $64.b		; E4 64 ; Compare $64.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	ldy $24.b		; A4 24 ; Load $24.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	bit $E4.b		; 24 E4 ; Test bits $E4.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cpx $E4.b		; E4 E4 ; Compare $E4.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $E4.b		; 24 E4 ; Test bits $E4.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cpx $E4.b		; E4 E4 ; Compare $E4.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $33		; D0 33 ; Branch if not equal to $D0, $33 [Flow: branch]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D00D.w		; C9 0D D0 ; Compare #$D00D.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $0EB0BC.l,X		; 1F BC B0 0E ; Logical OR long $0EB0BC.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	ldy $0D10.w,X		; BC 10 0D ; Load Y register $0D10.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldy $0D30.w,X		; BC 30 0D ; Load Y register $0D30.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsr $F9D1.w		; 20 D1 F9 ; Jump to subroutine at $F9D1.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D30.w,X		; [PATTERN: Memory clearing operation] 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	stz $0F80.w,X		; 9E 80 0F ; Store zero to $0F80.w,X [Reads: X Index]
	stz $0BA0.w,X		; 9E A0 0B ; Store zero to $0BA0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0CBA.w,X		; BD BA 0C ; Load $0CBA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	ldy #$4C02.w		; A0 02 4C ; Load #$4C02.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy $4CF9.w,X		; BC F9 4C ; Load Y register $4CF9.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	and $F9.b,S		; 23 F9 ; AND accumulator with stack relative $F9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr $E41E.w		; 20 1E E4 ; Jump to subroutine at $E41E.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$85FC.w		; 29 FC 85 ; Logical AND #$85FC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $DA.b		; 00 DA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx #$DA03.w		; A2 03 DA ; Load #$DA03.w into X register [Writes: X Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0FA8.w		; AD A8 0F ; Load $0FA8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E343.w,X		; 7D 43 E3 ; Add $E343.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $0FA9.w		; AD A9 0F ; Load $0FA9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E353.w,X		; 7D 53 E3 ; Add $E353.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $E363.w,X		; BD 63 E3 ; Load $E363.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $E373.w,X		; BD 73 E3 ; Load $E373.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $E383.w,X		; BD 83 E3 ; Load $E383.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $CB		; 10 CB ; Branch if plus to $10, $CB [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ldy #$A9FF.w		; A0 FF A9 ; Load #$A9FF.w into Y register [Writes: Y Index] [Flags: ZN]
	ora $4C.b,S		; 03 4C ; OR accumulator with stack relative $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $20FE.w,X		; BC FE 20 ; Load Y register $20FE.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cpx $6B.b		; E4 6B ; Compare $6B.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	jsr $E41E.w		; 20 1E E4 ; Jump to subroutine at $E41E.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0F00.w,X		; 9E 00 0F ; Store zero to $0F00.w,X [Reads: X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0040.w		; 69 40 00 ; Add #$0040.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0170.w		; C9 70 01 ; Compare #$0170.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $B0, $40		; B0 40 ; Branch if carry set to $B0, $40 [Flow: branch]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	stz $05.b		; 64 05 ; Store zero to $05.b
.ACCU 16
	rep #$20		; C2 20
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $04.b		; E5 04 ; Subtract $04.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0040.w		; 69 40 00 ; Add #$0040.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0170.w		; C9 70 01 ; Compare #$0170.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	lda $0F60.w,X		; BD 60 0F ; Load $0F60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $27		; F0 27 ; Branch if equal to $F0, $27 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $0B89.w,X		; 5D 89 0B ; Exclusive OR accumulator with memory $0B89.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	stz $04.b		; 64 04 ; Store zero to $04.b
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0FA8.w		; 8D A8 0F ; Store accumulator to $0FA8.w [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0FA9.w		; 8D A9 0F ; Store accumulator to $0FA9.w [Reads: Accumulator]
	ldy #$6000.w		; A0 00 60 ; Load #$6000.w into Y register [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $04.b		; E5 04 ; Subtract $04.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	inc $0F00.w,X		; FE 00 0F ; Increment memory $0F00.w,X [Reads: X Index] [Flags: ZN]
	lda $0CAA.w,X		; BD AA 0C ; Load $0CAA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $04		; 30 04 ; Branch if minus to $30, $04 [Flow: branch]
	jsl $09F1F8.l		; 22 F8 F1 09 ; Jump to subroutine long $09F1F8.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $80, $C9		; 80 C9 ; Branch always to $80, $C9 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $E4AB.w		; 20 AB E4 ; Jump to subroutine at $E4AB.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0FB6.w		; AD B6 0F ; Load $0FB6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,X		; 9D 20 0F ; Store accumulator to $0F20.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp $E4DB.w		; 4C DB E4 ; Jump to $E4DB.w [Flow: jump]
	stz $0E70.w,X		; 9E 70 0E ; Store zero to $0E70.w,X [Reads: X Index]
	lda $0F60.w,X		; BD 60 0F ; Load $0F60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $F5		; 30 F5 ; Branch if minus to $30, $F5 [Flow: branch]
	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	lda $0F20.w,X		; BD 20 0F ; Load $0F20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FB6.w		; 8D B6 0F ; Store accumulator to $0FB6.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,X		; 9D 20 0F ; Store accumulator to $0F20.w,X [Reads: Accumulator, X Index]
	jsr $E4DB.w		; 20 DB E4 ; Jump to subroutine at $E4DB.w [Writes: Stack Pointer] [Flow: call]
	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $D4		; F0 D4 ; Branch if equal to $F0, $D4 [Flow: branch]
	stz $0F20.w,X		; 9E 20 0F ; Store zero to $0F20.w,X [Reads: X Index]
	jsr $E4DB.w		; 20 DB E4 ; Jump to subroutine at $E4DB.w [Writes: Stack Pointer] [Flow: call]
	lda $0FA5.w		; AD A5 0F ; Load $0FA5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FFABC.l,X		; 9F BC FA 7F ; Store accumulator (long,X) $7FFABC.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E40.w,X		; BD 40 0E ; Load $0E40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	ldy #$206A.w		; A0 6A 20 ; Load #$206A.w into Y register [Writes: Y Index] [Flags: ZN]
	bit $90E7.w,X		; 3C E7 90 ; Test bits $90E7.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $70, $0E		; 70 0E ; Branch if overflow set to $70, $0E [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0F60.w,X		; BD 60 0F ; Load $0F60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $05		; 30 05 ; Branch if minus to $30, $05 [Flow: branch]
	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	ldy #$BD00.w		; A0 00 BD ; Load #$BD00.w into Y register [Writes: Y Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora $06F0.w		; 0D F0 06 ; Logical OR $06F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $30, $01		; 30 01 ; Branch if minus to $30, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	jsr $E5EE.w		; 20 EE E5 ; Jump to subroutine at $E5EE.w [Writes: Stack Pointer] [Flow: call]
	ldy #$BD02.w		; A0 02 BD ; Load #$BD02.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $50, $0D		; 50 0D ; Branch if overflow clear to $50, $0D [Flow: branch]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	.db $30, $01		; 30 01 ; Branch if minus to $30, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	jsr $E5B8.w		; 20 B8 E5 ; Jump to subroutine at $E5B8.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $12		; 80 12 ; Branch always to $80, $12 [Flow: branch]
	ldy #$2001.w		; A0 01 20 ; Load #$2001.w into Y register [Writes: Y Index] [Flags: ZN]
	inc $88E5.w		; EE E5 88 ; Increment $88E5.w [Flags: ZN]
	.db $10, $FA		; 10 FA ; Branch if plus to $10, $FA [Flow: branch]
	ldy #$2003.w		; A0 03 20 ; Load #$2003.w into Y register [Writes: Y Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sbc $88.b		; E5 88 ; Subtract $88.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$D001.w		; C0 01 D0 ; Compare #$D001.w with Y register [Reads: Y Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda $0BE0.w,X		; BD E0 0B ; Load $0BE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $05		; 30 05 ; Branch if minus to $30, $05 [Flow: branch]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$2068.w		; A0 68 20 ; Load #$2068.w into Y register [Writes: Y Index] [Flags: ZN]
	bit $ADE7.w,X		; 3C E7 AD ; Test bits $ADE7.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7FF9C2.l,X		; 9F C2 F9 7F ; Store accumulator (long,X) $7FF9C2.l,X [Reads: Accumulator, X Index]
	cmp #$1C.b		; C9 1C ; Compare #$1C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	ldy $0FB3.w		; AC B3 0F ; Load $0FB3.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	ldy $0DD0.w,X		; BC D0 0D ; Load Y register $0DD0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$D00B.w		; C0 0B D0 ; Compare #$D00B.w with Y register [Reads: Y Index] [Flags: ZNC]
	asl $A9.b		; 06 A9 ; Arithmetic shift left $A9.b [Reads: Direct Page] [Flags: ZNC]
	ora ($9D.b,X)		; 01 9D ; Logical OR ($9D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $600F.w		; 20 0F 60 ; Jump to subroutine at $600F.w [Writes: Stack Pointer] [Flow: call]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $2C		; D0 2C ; Branch if not equal to $D0, $2C [Flow: branch]
	lda $0B6B.w,X		; BD 6B 0B ; Load $0B6B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $3D		; F0 3D ; Branch if equal to $F0, $3D [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $E0AB.w		; 4C AB E0 ; Jump to $E0AB.w [Flow: jump]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	lda #$5F.b		; A9 5F ; Load #$5F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $0E20.w,X		; BC 20 0E ; Load Y register $0E20.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$F013.w		; C0 13 F0 ; Compare #$F013.w with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $C0.b		; 04 C0 ; Test and set bits $C0.b [Reads: Accumulator] [Flags: Z]
	rol $D0.b		; 26 D0 ; Rotate left $D0.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr $0F50.w,X		; 5E 50 0F ; Logical shift right $0F50.w,X [Reads: X Index] [Flags: ZNC]
	asl $0F50.w,X		; 1E 50 0F ; Arithmetic shift left $0F50.w,X [Reads: X Index] [Flags: ZNC]
	lda #$3F.b		; A9 3F ; Load #$3F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	lda $7FFABC.l,X		; BF BC FA 7F ; Load long $7FFABC.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$1C.b		; C9 1C ; Compare #$1C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $29		; D0 29 ; Branch if not equal to $D0, $29 [Flow: branch]
	jsr $E624.w		; 20 24 E6 ; Jump to subroutine at $E624.w [Writes: Stack Pointer] [Flow: call]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E70.w,X		; 9D 70 0E ; Store accumulator to $0E70.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$68.b		; C9 68 ; Compare #$68.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $0A		; 90 0A ; Branch if carry clear to $90, $0A [Flow: branch]
	cmp #$6C.b		; C9 6C ; Compare #$6C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $15		; B0 15 ; Branch if carry set to $B0, $15 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	jsl $1D8010.l		; 22 10 80 1D ; Jump to subroutine long $1D8010.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$6A.b		; A9 6A ; Load #$6A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $EB		; 80 EB ; Branch always to $80, $EB [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E72F.w		; 20 2F E7 ; Jump to subroutine at $E72F.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $30		; 90 30 ; Branch if carry clear to $90, $30 [Flow: branch]
	lda $E723.w,Y		; B9 23 E7 ; Load $E723.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0E70.w,X		; 1D 70 0E ; OR accumulator with memory $0E70.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E70.w,X		; 9D 70 0E ; Store accumulator to $0E70.w,X [Reads: Accumulator, X Index]
	lda $0E30.w,X		; BD 30 0E ; Load $0E30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $1E		; B0 1E ; Branch if carry set to $B0, $1E [Flow: branch]
	lda $0EA0.w,X		; BD A0 0E ; Load $0EA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	jsr $E5DA.w		; 20 DA E5 ; Jump to subroutine at $E5DA.w [Writes: Stack Pointer] [Flow: call]
	jsr $E5DA.w		; 20 DA E5 ; Jump to subroutine at $E5DA.w [Writes: Stack Pointer] [Flow: call]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E727.w,Y		; 79 27 E7 ; Add $E727.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $E72B.w,Y		; 79 2B E7 ; Add $E72B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E72F.w		; 20 2F E7 ; Jump to subroutine at $E72F.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $30		; 90 30 ; Branch if carry clear to $90, $30 [Flow: branch]
	lda $E723.w,Y		; B9 23 E7 ; Load $E723.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0E70.w,X		; 1D 70 0E ; OR accumulator with memory $0E70.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E70.w,X		; 9D 70 0E ; Store accumulator to $0E70.w,X [Reads: Accumulator, X Index]
	lda $0E30.w,X		; BD 30 0E ; Load $0E30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $1E		; B0 1E ; Branch if carry set to $B0, $1E [Flow: branch]
	lda $0EA0.w,X		; BD A0 0E ; Load $0EA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	jsr $E610.w		; 20 10 E6 ; Jump to subroutine at $E610.w [Writes: Stack Pointer] [Flow: call]
	jsr $E610.w		; 20 10 E6 ; Jump to subroutine at $E610.w [Writes: Stack Pointer] [Flow: call]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E727.w,Y		; 79 27 E7 ; Add $E727.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $E72B.w,Y		; 79 2B E7 ; Add $E72B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0310.w		; AD 10 03 ; Load $0310.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D00.w,X		; 7D 00 0D ; Add $0D00.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $0311.w		; AD 11 03 ; Load $0311.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $0D20.w,X		; 7D 20 0D ; Add $0D20.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	lda $0312.w		; AD 12 03 ; Load $0312.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D10.w,X		; 7D 10 0D ; Add $0D10.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0313.w		; AD 13 03 ; Load $0313.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $0D30.w,X		; 7D 30 0D ; Add $0D30.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $08000A.l,X		; FF 0A 00 08 ; Subtract with carry (long,X) $08000A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $08000A.l,X		; FF 0A 00 08 ; Subtract with carry (long,X) $08000A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080028.l,X		; FF 28 00 08 ; Subtract with carry (long,X) $080028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080017.l,X		; FF 17 00 08 ; Subtract with carry (long,X) $080017.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080024.l,X		; FF 24 00 08 ; Subtract with carry (long,X) $080024.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080010.l,X		; FF 10 00 08 ; Subtract with carry (long,X) $080010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080010.l,X		; FF 10 00 08 ; Subtract with carry (long,X) $080010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080018.l,X		; FF 18 00 08 ; Subtract with carry (long,X) $080018.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080018.l,X		; FF 18 00 08 ; Subtract with carry (long,X) $080018.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $04000A.l,X		; FF 0A 00 04 ; Subtract with carry (long,X) $04000A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080028.l,X		; FF 28 00 08 ; Subtract with carry (long,X) $080028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080019.l,X		; FF 19 00 08 ; Subtract with carry (long,X) $080019.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080024.l,X		; FF 24 00 08 ; Subtract with carry (long,X) $080024.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080010.l,X		; FF 10 00 08 ; Subtract with carry (long,X) $080010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080018.l,X		; FF 18 00 08 ; Subtract with carry (long,X) $080018.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080020.l,X		; FF 20 00 08 ; Subtract with carry (long,X) $080020.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $00FF01.l,X		; FF 01 FF 00 ; Subtract with carry (long,X) $00FF01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $84FF00.l,X		; FF 00 FF 84 ; Subtract with carry (long,X) $84FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $0B6B.w,X		; BD 6B 0B ; Load $0B6B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $33		; F0 33 ; Branch if equal to $F0, $33 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and #$01FF.w		; 29 FF 01 ; Logical AND #$01FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E6B7.w,Y		; 79 B7 E6 ; Add $E6B7.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0008.w		; E9 08 00 ; Subtract #$0008.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	cmp #$0200.w		; C9 00 02 ; Compare #$0200.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $3C		; B0 3C ; Branch if carry set to $B0, $3C [Flow: branch]
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and #$01FF.w		; 29 FF 01 ; Logical AND #$01FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E64B.w,Y		; 79 4B E6 ; Add $E64B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0008.w		; E9 08 00 ; Subtract #$0008.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	cmp #$0200.w		; C9 00 02 ; Compare #$0200.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $80, $24		; 80 24 ; Branch always to $80, $24 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E6B7.w,Y		; 79 B7 E6 ; Add $E6B7.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FBE.w		; ED BE 0F ; Subtract $0FBE.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cmp $0FBA.w		; CD BA 0F ; Compare $0FBA.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E64B.w,Y		; 79 4B E6 ; Add $E64B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FBC.w		; ED BC 0F ; Subtract $0FBC.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cmp $0FB8.w		; CD B8 0F ; Compare $0FB8.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	jmp $E852.w		; 4C 52 E8 ; Jump to $E852.w [Flow: jump]
	jsr $E883.w		; 20 83 E8 ; Jump to subroutine at $E883.w [Writes: Stack Pointer] [Flow: call]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0CAA.w,X		; BD AA 0C ; Load $0CAA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $2F		; F0 2F ; Branch if equal to $F0, $2F [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $0DB971.l,X		; BF 71 B9 0D ; Load long $0DB971.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $1B		; 90 1B ; Branch if carry clear to $90, $1B [Flow: branch]
	lda $0FA5.w		; AD A5 0F ; Load $0FA5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $0A		; 90 0A ; Branch if carry clear to $90, $0A [Flow: branch]
	cmp #$14.b		; C9 14 ; Compare #$14.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	jsr $E8FE.w		; 20 FE E8 ; Jump to subroutine at $E8FE.w [Writes: Stack Pointer] [Flow: call]
	jmp $E878.w		; 4C 78 E8 ; Jump to $E878.w [Flow: jump]
	jmp $E872.w		; 4C 72 E8 ; Jump to $E872.w [Flow: jump]
	ldy $1B.b		; A4 1B ; Load $1B.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	sta $0E90.w,X		; 9D 90 0E ; Store accumulator to $0E90.w,X [Reads: Accumulator, X Index]
	jmp $E877.w		; 4C 77 E8 ; Jump to $E877.w [Flow: jump]
	lda $0BE0.w,X		; BD E0 0B ; Load $0BE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $10, $34		; 10 34 ; Branch if plus to $10, $34 [Flow: branch]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D2.b		; C9 D2 ; Compare #$D2.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$8A.b		; C9 8A ; Compare #$8A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	cpy #$F009.w		; C0 09 F0 ; Compare #$F009.w with Y register [Reads: Y Index] [Flags: ZNC]
	and ($C9.b,X)		; 21 C9 ; Logical AND ($C9.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sty $D0.b,X		; 94 D0 ; Store Y register $D0.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	ora [$BD.b]		; 07 BD ; OR accumulator with memory (long) [$BD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $90, $0E		; 90 0E ; Branch if carry clear to $90, $0E [Flow: branch]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	.db $80, $1A		; 80 1A ; Branch always to $80, $1A [Flow: branch]
	cmp #$E3.b		; C9 E3 ; Compare #$E3.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$8C.b		; C9 8C ; Compare #$8C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$9A.b		; C9 9A ; Compare #$9A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$81.b		; C9 81 ; Compare #$81.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	cpy #$F008.w		; C0 08 F0 ; Compare #$F008.w with Y register [Reads: Y Index] [Flags: ZNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpy #$F009.w		; C0 09 F0 ; Compare #$F009.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc [$80.b]		; 67 80 ; Add with carry (long) [$80.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda $1DF6CF.l,X		; BF CF F6 1D ; Load long $1DF6CF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $58		; F0 58 ; Branch if equal to $F0, $58 [Flow: branch]
	lda $0FA5.w		; AD A5 0F ; Load $0FA5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	cmp #$14.b		; C9 14 ; Compare #$14.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	jsr $E8FE.w		; 20 FE E8 ; Jump to subroutine at $E8FE.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $49		; 80 49 ; Branch always to $80, $49 [Flow: branch]
	cmp #$44.b		; C9 44 ; Compare #$44.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $2F		; D0 2F ; Branch if not equal to $D0, $2F [Flow: branch]
	lda $0EA0.w,X		; BD A0 0E ; Load $0EA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $3A		; F0 3A ; Branch if equal to $F0, $3A [Flow: branch]
	lda $0CE2.w,X		; BD E2 0C ; Load $0CE2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $13		; 30 13 ; Branch if minus to $30, $13 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06ECE0.l		; 22 E0 EC 06 ; Jump to subroutine long $06ECE0.l [Writes: Stack Pointer] [Flow: call]
	lda $0EF0.w,X		; BD F0 0E ; Load $0EF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda #$99.b		; A9 99 ; Load #$99.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EF0.w,X		; 9D F0 0E ; Store accumulator to $0EF0.w,X [Reads: Accumulator, X Index]
	stz $0EA0.w,X		; 9E A0 0E ; Store zero to $0EA0.w,X [Reads: X Index]
	.db $80, $20		; 80 20 ; Branch always to $80, $20 [Flow: branch]
	jsr $E872.w		; 20 72 E8 ; Jump to subroutine at $E872.w [Writes: Stack Pointer] [Flow: call]
	lda $0E40.w,X		; BD 40 0E ; Load $0E40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $0B6B.w,X		; BD 6B 0B ; Load $0B6B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda $0EA0.w,X		; BD A0 0E ; Load $0EA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
.ACCU 8
	sep #$21		; E2 21
	.db $80, $01		; 80 01 ; Branch always to $80, $01 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $E886.w		; 20 86 E8 ; Jump to subroutine at $E886.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0F20.w,X		; BD 20 0F ; Load $0F20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $05.b		; 64 05 ; Store zero to $05.b
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda #$1000.w		; A9 00 10 ; Load #$1000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01FF.w		; 29 FF 01 ; Logical AND #$01FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $05.b		; 65 05 ; Add $05.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	sta $0FA5.w		; 8D A5 0F ; Store accumulator to $0FA5.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsl $00882E.l		; 22 2E 88 00 ; Jump to subroutine long $00882E.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	sta $0FA5.w		; 8D A5 0F ; Store accumulator to $0FA5.w [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $E8FE.w		; 20 FE E8 ; Jump to subroutine at $E8FE.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0FA5.w		; AD A5 0F ; Load $0FA5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $05.b		; 65 05 ; Add $05.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $E8D6.w,Y		; D9 D6 E8 ; Compare accumulator $E8D6.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	lda $E8D6.w,Y		; B9 D6 E8 ; Load $E8D6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $04.b		; C5 04 ; Compare $04.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E932.w		; 20 32 E9 ; Jump to subroutine at $E932.w [Writes: Stack Pointer] [Flow: call]
	jmp $E93E.w		; 4C 3E E9 ; Jump to $E93E.w [Flow: jump]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsr $E93E.w		; 20 3E E9 ; Jump to subroutine at $E93E.w [Writes: Stack Pointer] [Flow: call]
	ldx $0FA0.w		; AE A0 0F ; Load $0FA0.w into X register [Writes: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $28		; F0 28 ; Branch if equal to $F0, $28 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D60.w,X		; 7D 60 0D ; Add $0D60.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D60.w,X		; 9D 60 0D ; Store accumulator to $0D60.w,X [Reads: Accumulator, X Index]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	ora #$F0.b		; 09 F0 ; Logical OR #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc $0D00.w,X		; 7D 00 0D ; Add $0D00.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $0D20.w,X		; 7D 20 0D ; Add $0D20.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0F80.w,X		; BD 80 0F ; Load $0F80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0F90.w,X		; 7D 90 0F ; Add $0F90.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0F90.w,X		; 9D 90 0F ; Store accumulator to $0F90.w,X [Reads: Accumulator, X Index]
	lda $0F80.w,X		; BD 80 0F ; Load $0F80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ora #$F0.b		; 09 F0 ; Logical OR #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $0F70.w,X		; 7D 70 0F ; Add $0F70.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $00.b		; 64 00 ; Store zero to $00.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $F7		; F0 F7 ; Branch if equal to $F0, $F7 [Flow: branch]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsr $EAE8.w		; 20 E8 EA ; Jump to subroutine at $EAE8.w [Writes: Stack Pointer] [Flow: call]
	sty $02.b		; 84 02 ; Store Y register to $02.b [Reads: Y Index]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	jsr $EAD1.w		; 20 D1 EA ; Jump to subroutine at $EAD1.w [Writes: Stack Pointer] [Flow: call]
	sty $03.b		; 84 03 ; Store Y register to $03.b [Reads: Y Index]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0D.b		; A5 0D ; Load $0D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $0C.b		; C5 0C ; Compare $0C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $B0, $09		; B0 09 ; Branch if carry set to $B0, $09 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D.b		; [PATTERN: Memory clearing operation] 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	stz $0B.b		; 64 0B ; Store zero to $0B.b
	stz $00.b		; 64 00 ; Store zero to $00.b
	ldx $01.b		; A6 01 ; Load $01.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $0B.b		; A5 0B ; Load $0B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C.b		; 65 0C ; Add $0C.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $0D.b		; C5 0D ; Compare $0D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	sbc $0D.b		; E5 0D ; Subtract $0D.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $02.b		; A4 02 ; Load $02.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $03.b		; A4 03 ; Load $03.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E991.w		; 20 91 E9 ; Jump to subroutine at $E991.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $EA04.w		; 20 04 EA ; Jump to subroutine at $EA04.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $E991.w		; 20 91 E9 ; Jump to subroutine at $E991.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $EA2D.w		; 20 2D EA ; Jump to subroutine at $EA2D.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $00.b		; 64 00 ; Store zero to $00.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $F7		; F0 F7 ; Branch if equal to $F0, $F7 [Flow: branch]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsr $EB1D.w		; 20 1D EB ; Jump to subroutine at $EB1D.w [Writes: Stack Pointer] [Flow: call]
	sty $02.b		; 84 02 ; Store Y register to $02.b [Reads: Y Index]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	jsr $EB0A.w		; 20 0A EB ; Jump to subroutine at $EB0A.w [Writes: Stack Pointer] [Flow: call]
	sty $03.b		; 84 03 ; Store Y register to $03.b [Reads: Y Index]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0D.b		; A5 0D ; Load $0D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $0C.b		; C5 0C ; Compare $0C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $B0, $09		; B0 09 ; Branch if carry set to $B0, $09 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D.b		; [PATTERN: Memory clearing operation] 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	stz $0B.b		; 64 0B ; Store zero to $0B.b
	stz $00.b		; 64 00 ; Store zero to $00.b
	ldx $01.b		; A6 01 ; Load $01.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $0B.b		; A5 0B ; Load $0B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C.b		; 65 0C ; Add $0C.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $0D.b		; C5 0D ; Compare $0D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	sbc $0D.b		; E5 0D ; Subtract $0D.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $02.b		; A4 02 ; Load $02.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $03.b		; A4 03 ; Load $03.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $EAA4.w		; 20 A4 EA ; Jump to subroutine at $EAA4.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $EAD1.w		; 20 D1 EA ; Jump to subroutine at $EAD1.w [Writes: Stack Pointer] [Flow: call]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	jsr $EAE8.w		; 20 E8 EA ; Jump to subroutine at $EAE8.w [Writes: Stack Pointer] [Flow: call]
	sty $01.b		; 84 01 ; Store Y register to $01.b [Reads: Y Index]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $0FB5.w		; CD B5 0F ; Compare $0FB5.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $EAD1.w		; 20 D1 EA ; Jump to subroutine at $EAD1.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0D10.w,X		; FD 10 0D ; Subtract with carry $0D10.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0D30.w,X		; FD 30 0D ; Subtract with carry $0D30.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $EAE8.w		; 20 E8 EA ; Jump to subroutine at $EAE8.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0F70.w,X		; 7D 70 0F ; Add $0F70.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0D00.w,X		; FD 00 0D ; Subtract with carry $0D00.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0D20.w,X		; FD 20 0D ; Subtract with carry $0D20.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0D10.w,X		; FD 10 0D ; Subtract with carry $0D10.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0D30.w,X		; FD 30 0D ; Subtract with carry $0D30.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0D00.w,X		; FD 00 0D ; Subtract with carry $0D00.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0D20.w,X		; FD 20 0D ; Subtract with carry $0D20.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $EB0A.w		; 20 0A EB ; Jump to subroutine at $EB0A.w [Writes: Stack Pointer] [Flow: call]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	jsr $EB1D.w		; 20 1D EB ; Jump to subroutine at $EB1D.w [Writes: Stack Pointer] [Flow: call]
	sty $01.b		; 84 01 ; Store Y register to $01.b [Reads: Y Index]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $0FB5.w		; CD B5 0F ; Compare $0FB5.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $EB76.w		; 20 76 EB ; Jump to subroutine at $EB76.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $0F180F.l		; 0F 0F 18 0F ; OR accumulator with memory (long) $0F180F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F0F13.l		; 0F 13 0F 0F ; OR accumulator with memory (long) $0F0F13.l [Writes: Accumulator] [Flags: ZN]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: ZNC]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	asl $0F.b		; 06 0F ; Arithmetic shift left $0F.b [Reads: Direct Page] [Flags: ZNC]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $0F20.w,X		; DD 20 0F ; Compare accumulator $0F20.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $4D.b		; 05 4D ; Logical OR $4D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $72		; D0 72 ; Branch if not equal to $D0, $72 [Flow: branch]
	lda $0EF0.w,X		; BD F0 0E ; Load $0EF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $6D		; 30 6D ; Branch if minus to $30, $6D [Flow: branch]
	jsr $F645.w		; 20 45 F6 ; Jump to subroutine at $F645.w [Writes: Stack Pointer] [Flow: call]
	lda $037A.w		; AD 7A 03 ; Load $037A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $6C		; D0 6C ; Branch if not equal to $D0, $6C [Flow: branch]
	lda $44.b		; A5 44 ; Load $44.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $66		; F0 66 ; Branch if equal to $F0, $66 [Flow: branch]
	jsr $F5E0.w		; 20 E0 F5 ; Jump to subroutine at $F5E0.w [Writes: Stack Pointer] [Flow: call]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $57		; 30 57 ; Branch if minus to $30, $57 [Flow: branch]
	jsr $F836.w		; 20 36 F8 ; Jump to subroutine at $F836.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $52		; 90 52 ; Branch if carry clear to $90, $52 [Flow: branch]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$6A.b		; C9 6A ; Compare #$6A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $EB66.w,Y		; B9 66 EB ; Load $EB66.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0EA0.w,X		; 9D A0 0E ; Store accumulator to $0EA0.w,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $EB6E.w,Y		; B9 6E EB ; Load $EB6E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $3C.b		; A4 3C ; Load $3C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cpy #$09.b		; C0 09 ; Compare #$09.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $E991.w		; 20 91 E9 ; Jump to subroutine at $E991.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0F30.w,X		; 9D 30 0F ; Store accumulator to $0F30.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0F40.w,X		; 9D 40 0F ; Store accumulator to $0F40.w,X [Reads: Accumulator, X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $3C.b		; A4 3C ; Load $3C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cpy #$09.b		; C0 09 ; Compare #$09.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $F688.w		; 20 88 F6 ; Jump to subroutine at $F688.w [Writes: Stack Pointer] [Flow: call]
	jsr $F69F.w		; 20 9F F6 ; Jump to subroutine at $F69F.w [Writes: Stack Pointer] [Flow: call]
	lda #$90.b		; A9 90 ; Load #$90.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $47.b		; 85 47 ; Store accumulator to $47.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $F7EF.w		; 20 EF F7 ; Jump to subroutine at $F7EF.w [Writes: Stack Pointer] [Flow: call]
	jsr $F836.w		; 20 36 F8 ; Jump to subroutine at $F836.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	jmp $06F3CA.l		; 5C CA F3 06 ; Jump long to $06F3CA.l [Flow: jump]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$7A.b		; C9 7A ; Compare #$7A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$23.b		; C9 23 ; Compare #$23.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda $031F.w		; AD 1F 03 ; Load $031F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	sta $0360.w		; 8D 60 03 ; Store accumulator to $0360.w [Reads: Accumulator]
	jsr $F3DB.w		; 20 DB F3 ; Jump to subroutine at $F3DB.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$50.b		; A9 50 ; Load #$50.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $3C.b		; A4 3C ; Load $3C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cpy #$09.b		; C0 09 ; Compare #$09.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $E991.w		; 20 91 E9 ; Jump to subroutine at $E991.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0F30.w,X		; 9D 30 0F ; Store accumulator to $0F30.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0F40.w,X		; 9D 40 0F ; Store accumulator to $0F40.w,X [Reads: Accumulator, X Index]
	jsl $06ED3F.l		; 22 3F ED 06 ; Jump to subroutine long $06ED3F.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: ZN]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $0F		; 90 0F ; Branch if carry clear to $90, $0F [Flow: branch]
	lda $0BA0.w,X		; BD A0 0B ; Load $0BA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0F00.w,X		; 1D 00 0F ; OR accumulator with memory $0F00.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $0FB5.w		; AD B5 0F ; Load $0FB5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06ECBD.l		; 22 BD EC 06 ; Jump to subroutine long $06ECBD.l [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $E7		; 10 E7 ; Branch if plus to $10, $E7 [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $000D.w		; 0E 0D 00 ; Arithmetic shift left $000D.w [Flags: ZNC]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($BC.b,X)		; 01 BC ; Logical OR ($BC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $06EC7E.l,X		; BF 7E EC 06 ; Load long $06EC7E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7EF340.l		; AF 40 F3 7E ; Load long $7EF340.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $90, $0E		; 90 0E ; Branch if carry clear to $90, $0E [Flow: branch]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D7.b		; C9 D7 ; Compare #$D7.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F10.w,X		; 9D 10 0F ; Store accumulator to $0F10.w,X [Reads: Accumulator, X Index]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	ldy $0F70.w,X		; BC 70 0F ; Load Y register $0F70.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $33		; D0 33 ; Branch if not equal to $D0, $33 [Flow: branch]
	jsl $06ED25.l		; 22 25 ED 06 ; Jump to subroutine long $06ED25.l [Writes: Stack Pointer] [Flow: call]
	lda $0CE2.w,X		; BD E2 0C ; Load $0CE2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $29		; D0 29 ; Branch if not equal to $D0, $29 [Flow: branch]
	lda $0FAC.w		; AD AC 0F ; Load $0FAC.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $24		; D0 24 ; Branch if not equal to $D0, $24 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FAC.w		; 8D AC 0F ; Store accumulator to $0FAC.w [Reads: Accumulator]
	ldy $0FB6.w		; AC B6 0F ; Load $0FB6.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $0C04.w,Y		; B9 04 0C ; Load $0C04.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0FAD.w		; 8D AD 0F ; Store accumulator to $0FAD.w [Reads: Accumulator]
	lda $0BFA.w,Y		; B9 FA 0B ; Load $0BFA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FAE.w		; 8D AE 0F ; Store accumulator to $0FAE.w [Reads: Accumulator]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0B68.w		; 8D 68 0B ; Store accumulator to $0B68.w [Reads: Accumulator]
	stz $012E.w		; 9C 2E 01 ; Store zero to $012E.w
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $0CF2.w		; 8D F2 0C ; Store accumulator to $0CF2.w [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$08.b		; C0 08 ; Compare #$08.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$35.b		; A9 35 ; Load #$35.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $56		; 80 56 ; Branch always to $80, $56 [Flow: branch]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FFA4C.l,X		; 9F 4C FA 7F ; Store accumulator (long,X) $7FFA4C.l,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ldx $0372.w		; AE 72 03 ; Load $0372.w into X register [Writes: X Index] [Flags: ZN]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	ldx $3C.b		; A6 3C ; Load $3C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	.db $30, $F8		; 30 F8 ; Branch if minus to $30, $F8 [Flow: branch]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: ZNC]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $06ED33.l,X		; BF 33 ED 06 ; Load long $06ED33.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0CF2.w		; 8D F2 0C ; Store accumulator to $0CF2.w [Reads: Accumulator]
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$0A.b		; 29 0A ; Logical AND #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CF2.w		; 8D F2 0C ; Store accumulator to $0CF2.w [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02E3.w		; 8D E3 02 ; Store accumulator to $02E3.w [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $47.b		; 85 47 ; Store accumulator to $47.b [Reads: Accumulator]
	lda #$9D.b		; A9 9D ; Load #$9D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $0CF3.w		; 9C F3 0C ; Store zero to $0CF3.w
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D8.b		; C9 D8 ; Compare #$D8.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $01		; 90 01 ; Branch if carry clear to $90, $01 [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $0CF2.w		; 0D F2 0C ; Logical OR $0CF2.w with accumulator [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
.INDEX 16
	rep #$10		; C2 10
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	lda $7F6000.l,X		; BF 00 60 7F ; Load long $7F6000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	lda $0CF2.w		; AD F2 0C ; Load $0CF2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $02.b		; 05 02 ; Logical OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0DB8F1.l,X		; BF F1 B8 0D ; Load long $0DB8F1.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	cmp #$F9.b		; C9 F9 ; Compare #$F9.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda #$E3.b		; A9 E3 ; Load #$E3.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	jsl $0DB818.l		; 22 18 B8 0D ; Jump to subroutine long $0DB818.l [Writes: Stack Pointer] [Flow: call]
	jsl $05AB9C.l		; 22 9C AB 05 ; Jump to subroutine long $05AB9C.l [Writes: Stack Pointer] [Flow: call]
	stz $012F.w		; 9C 2F 01 ; Store zero to $012F.w
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	jmp $EEC1.w		; 4C C1 EE ; Jump to $EEC1.w [Flow: jump]
	cmp #$FA.b		; C9 FA ; Compare #$FA.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $27		; D0 27 ; Branch if not equal to $D0, $27 [Flow: branch]
	lda #$8F.b		; A9 8F ; Load #$8F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $06EDCB.l		; 22 CB ED 06 ; Jump to subroutine long $06EDCB.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; [PATTERN: Memory clearing operation] 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	stz $0EA0.w,X		; 9E A0 0E ; Store zero to $0EA0.w,X [Reads: X Index]
	stz $0EF0.w,X		; 9E F0 0E ; Store zero to $0EF0.w,X [Reads: X Index]
	stz $0E50.w,X		; 9E 50 0E ; Store zero to $0E50.w,X [Reads: X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CD2.w,X		; 9D D2 0C ; Store accumulator to $0CD2.w,X [Reads: Accumulator, X Index]
	sta $0BE0.w,X		; 9D E0 0B ; Store accumulator to $0BE0.w,X [Reads: Accumulator, X Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $0CE2.w,X		; DD E2 0C ; Compare accumulator $0CE2.w,X [Reads: X Index] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	sta $0CE2.w,X		; 9D E2 0C ; Store accumulator to $0CE2.w,X [Reads: Accumulator, X Index]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	lda $0CF2.w		; AD F2 0C ; Load $0CF2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $0B6B.w,X		; BD 6B 0B ; Load $0B6B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $78		; D0 78 ; Branch if not equal to $D0, $78 [Flow: branch]
	stz $02E3.w		; 9C E3 02 ; Store zero to $02E3.w
	jmp $EEC1.w		; 4C C1 EE ; Jump to $EEC1.w [Flow: jump]
	cmp #$FE.b		; C9 FE ; Compare #$FE.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $F2		; F0 F2 ; Branch if equal to $F0, $F2 [Flow: branch]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$9A.b		; C9 9A ; Compare #$9A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	ldy $0CE2.w,X		; BC E2 0C ; Load Y register $0CE2.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$F0.b		; C0 F0 ; Compare #$F0.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $B0, $16		; B0 16 ; Branch if carry set to $B0, $16 [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$1B.b		; C9 1B ; Compare #$1B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	jsr $E25A.w		; 20 5A E2 ; Jump to subroutine at $E25A.w [Writes: Stack Pointer] [Flow: call]
	jsl $06F6CA.l		; 22 CA F6 06 ; Jump to subroutine long $06F6CA.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0EF0.w,X		; 9D F0 0E ; Store accumulator to $0EF0.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp #$92.b		; C9 92 ; Compare #$92.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $1F		; 90 1F ; Branch if carry clear to $90, $1F [Flow: branch]
	ldy #$21.b		; A0 21 ; Load #$21.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0B6B.w,X		; BD 6B 0B ; Load $0B6B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0BE0.w,X		; BD E0 0B ; Load $0BE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$1C.b		; A0 1C ; Load #$1C.b into Y register [Writes: Y Index] [Flags: ZN]
	sty $01.b		; 84 01 ; Store Y register to $01.b [Reads: Y Index]
	jsl $0DBBA1.l		; 22 A1 BB 0D ; Jump to subroutine long $0DBBA1.l [Writes: Stack Pointer] [Flow: call]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $0CF2.w		; AC F2 0C ; Load $0CF2.w into Y register [Writes: Y Index] [Flags: ZN]
	cpy #$0D.b		; C0 0D ; Compare #$0D.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $B0, $15		; B0 15 ; Branch if carry set to $B0, $15 [Flow: branch]
	ldy $0E20.w,X		; BC 20 0E ; Load Y register $0E20.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$09.b		; C0 09 ; Compare #$09.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$53.b		; C0 53 ; Compare #$53.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cpy #$18.b		; C0 18 ; Compare #$18.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$0B.b		; [PATTERN: Memory clearing operation] A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EA0.w,X		; 9D A0 0E ; Store accumulator to $0EA0.w,X [Reads: Accumulator, X Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0EF0.w,X		; 9E F0 0E ; Store zero to $0EF0.w,X [Reads: X Index]
	stz $0CE2.w,X		; 9E E2 0C ; Store zero to $0CE2.w,X [Reads: X Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $28		; 90 28 ; Branch if carry clear to $90, $28 [Flow: branch]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	lda $0CE2.w,X		; BD E2 0C ; Load $0CE2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$FD.b		; C9 FD ; Compare #$FD.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $1F		; D0 1F ; Branch if not equal to $D0, $1F [Flow: branch]
	stz $0CE2.w,X		; 9E E2 0C ; Store zero to $0CE2.w,X [Reads: X Index]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	lda #$70.b		; A9 70 ; Load #$70.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $0E40.w,X		; BD 40 0E ; Load $0E40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	stz $0CE2.w,X		; [PATTERN: Memory clearing operation] 9E E2 0C ; Store zero to $0CE2.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$FB.b		; C9 FB ; Compare #$FB.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $65		; 90 65 ; Branch if carry clear to $90, $65 [Flow: branch]
	stz $0CE2.w,X		; 9E E2 0C ; Store zero to $0CE2.w,X [Reads: X Index]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldy $0DD0.w,X		; BC D0 0D ; Load Y register $0DD0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$0B.b		; C0 0B ; Compare #$0B.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $EF		; F0 EF ; Branch if equal to $F0, $EF [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$FE.b		; C9 FE ; Compare #$FE.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFA3C.l,X		; 9F 3C FA 7F ; Store accumulator (long,X) $7FFA3C.l,X [Reads: Accumulator, X Index]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	lda $0CAA.w,X		; BD AA 0C ; Load $0CAA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CAA.w,X		; 9D AA 0C ; Store accumulator to $0CAA.w,X [Reads: Accumulator, X Index]
	asl $0BE0.w,X		; 1E E0 0B ; Arithmetic shift left $0BE0.w,X [Reads: X Index] [Flags: ZNC]
	lsr $0BE0.w,X		; 5E E0 0B ; Logical shift right $0BE0.w,X [Reads: X Index] [Flags: ZNC]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	asl $0CD2.w,X		; 1E D2 0C ; Arithmetic shift left $0CD2.w,X [Reads: X Index] [Flags: ZNC]
	lsr $0CD2.w,X		; 5E D2 0C ; Logical shift right $0CD2.w,X [Reads: X Index] [Flags: ZNC]
	jsr $CF5D.w		; 20 5D CF ; Jump to subroutine at $CF5D.w [Writes: Stack Pointer] [Flow: call]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$05.b		; 69 05 ; Add #$05.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $EF5C.w,Y		; B9 5C EF ; Load $EF5C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0B58.w,X		; 9D 58 0B ; Store accumulator to $0B58.w,X [Reads: Accumulator, X Index]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$23.b		; C9 23 ; Compare #$23.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	jmp $EFE7.w		; 4C E7 EF ; Jump to $EFE7.w [Flow: jump]
	jsr $0080.w		; 20 80 00 ; Jump to subroutine at $0080.w [Writes: Stack Pointer] [Flow: call]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0E50.w,X		; BD 50 0E ; Load $0E50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0CE2.w,X		; FD E2 0C ; Subtract with carry $0CE2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	stz $0CE2.w,X		; 9E E2 0C ; Store zero to $0CE2.w,X [Reads: X Index]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	.db $B0, $73		; B0 73 ; Branch if carry set to $B0, $73 [Flow: branch]
	lda $0CBA.w,X		; BD BA 0C ; Load $0CBA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CBA.w,X		; 9D BA 0C ; Store accumulator to $0CBA.w,X [Reads: Accumulator, X Index]
	lda $7FFA4C.l,X		; BF 4C FA 7F ; Load long $7FFA4C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FFA4C.l,X		; 9F 4C FA 7F ; Store accumulator (long,X) $7FFA4C.l,X [Reads: Accumulator, X Index]
	stz $0BE0.w,X		; 9E E0 0B ; Store zero to $0BE0.w,X [Reads: X Index]
	ldy $0E20.w,X		; BC 20 0E ; Load Y register $0E20.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$1B.b		; C0 1B ; Compare #$1B.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	cpy #$40.b		; C0 40 ; Compare #$40.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7EF280.l,X		; BF 80 F2 7E ; Load long $7EF280.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$40.b		; 09 40 ; Logical OR #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF280.l,X		; 9F 80 F2 7E ; Store accumulator (long,X) $7EF280.l,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$EC.b		; C9 EC ; Compare #$EC.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	ldy $0DB0.w,X		; BC B0 0D ; Load Y register $0DB0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $28		; D0 28 ; Branch if not equal to $D0, $28 [Flow: branch]
	jmp $E239.w		; 4C 39 E2 ; Jump to $E239.w [Flow: jump]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0DD0.w,X		; [PATTERN: Memory clearing operation] BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	jsr $E095.w		; 20 95 E0 ; Jump to subroutine at $E095.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$92.b		; C9 92 ; Compare #$92.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	jsl $09EF56.l		; 22 56 EF 09 ; Jump to subroutine long $09EF56.l [Writes: Stack Pointer] [Flow: call]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	jmp $F087.w		; 4C 87 F0 ; Jump to $F087.w [Flow: jump]
	cmp #$CB.b		; C9 CB ; Compare #$CB.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $F0BD.w		; 4C BD F0 ; Jump to $F0BD.w [Flow: jump]
	cmp #$CC.b		; C9 CC ; Compare #$CC.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$CD.b		; C9 CD ; Compare #$CD.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $F0AC.w		; 4C AC F0 ; Jump to $F0AC.w [Flow: jump]
	cmp #$53.b		; C9 53 ; Compare #$53.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $6F		; F0 6F ; Branch if equal to $F0, $6F [Flow: branch]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $62		; F0 62 ; Branch if equal to $F0, $62 [Flow: branch]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	cmp #$7A.b		; C9 7A ; Compare #$7A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $F0CE.w		; 4C CE F0 ; Jump to $F0CE.w [Flow: jump]
	cmp #$23.b		; C9 23 ; Compare #$23.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $73		; F0 73 ; Branch if equal to $F0, $73 [Flow: branch]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	stz $0EF0.w,X		; 9E F0 0E ; Store zero to $0EF0.w,X [Reads: X Index]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0B6B.w,X		; BD 6B 0B ; Load $0B6B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $22		; D0 22 ; Branch if not equal to $D0, $22 [Flow: branch]
	lda $0EF0.w,X		; BD F0 0E ; Load $0EF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	jmp $F10B.w		; 4C 0B F1 ; Jump to $F10B.w [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$A0.b		; A9 A0 ; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F10.w,X		; 9D 10 0F ; Store accumulator to $0F10.w,X [Reads: Accumulator, X Index]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	.db $80, $30		; 80 30 ; Branch always to $80, $30 [Flow: branch]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$A2.b		; C9 A2 ; Compare #$A2.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $09EF56.l		; 22 56 EF 09 ; Jump to subroutine long $09EF56.l [Writes: Stack Pointer] [Flow: call]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	stz $0D90.w,X		; 9E 90 0D ; Store zero to $0D90.w,X [Reads: X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	sta $0EF0.w,X		; 9D F0 0E ; Store accumulator to $0EF0.w,X [Reads: Accumulator, X Index]
	.db $80, $13		; 80 13 ; Branch always to $80, $13 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$C0.b		; A9 C0 ; Load #$C0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $EF		; 80 EF ; Branch always to $80, $EF [Flow: branch]
	lda #$23.b		; A9 23 ; Load #$23.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; [PATTERN: Memory clearing operation] 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	stz $0EF0.w,X		; 9E F0 0E ; Store zero to $0EF0.w,X [Reads: X Index]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	inc $0FFC.w		; EE FC 0F ; Increment $0FFC.w [Flags: ZN]
	stz $012F.w		; 9C 2F 01 ; Store zero to $012F.w
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $95		; D0 95 ; Branch if not equal to $D0, $95 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	stz $0EF0.w,X		; 9E F0 0E ; Store zero to $0EF0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	.db $80, $CA		; 80 CA ; Branch always to $80, $CA [Flow: branch]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	.db $80, $B9		; 80 B9 ; Branch always to $80, $B9 [Flow: branch]
	jsl $09EF56.l		; 22 56 EF 09 ; Jump to subroutine long $09EF56.l [Writes: Stack Pointer] [Flow: call]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	sta $0BA0.w,X		; 9D A0 0B ; Store accumulator to $0BA0.w,X [Reads: Accumulator, X Index]
	lda $0FFF.w		; AD FF 0F ; Load $0FFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	jmp $F087.w		; 4C 87 F0 ; Jump to $F087.w [Flow: jump]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	inc A		; [PATTERN: Memory clearing operation] 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0D81.w		; 8D 81 0D ; Store accumulator to $0D81.w [Reads: Accumulator]
	sta $0D82.w		; 8D 82 0D ; Store accumulator to $0D82.w [Reads: Accumulator]
	stz $0DC1.w		; 9C C1 0D ; Store zero to $0DC1.w
	stz $0DC2.w		; 9C C2 0D ; Store zero to $0DC2.w
	jmp $F087.w		; 4C 87 F0 ; Jump to $F087.w [Flow: jump]
	lda $0E40.w,X		; BD 40 0E ; Load $0E40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	lda $0FB5.w		; AD B5 0F ; Load $0FB5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0BE0.w,X		; 9D E0 0B ; Store accumulator to $0BE0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $F145.w		; 20 45 F1 ; Jump to subroutine at $F145.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $F154.w		; 20 54 F1 ; Jump to subroutine at $F154.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $F15C.w		; 20 5C F1 ; Jump to subroutine at $F15C.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $037B.w		; AD 7B 03 ; Load $037B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $74		; D0 74 ; Branch if not equal to $D0, $74 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0EF0.w,X		; 1D F0 0E ; OR accumulator with memory $0EF0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $6A		; D0 6A ; Branch if not equal to $D0, $6A [Flow: branch]
	lda $00EE.w		; AD EE 00 ; Load $00EE.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $0F20.w,X		; DD 20 0F ; Compare accumulator $0F20.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $7B		; D0 7B ; Branch if not equal to $D0, $7B [Flow: branch]
	lda $0F60.w,X		; BD 60 0F ; Load $0F60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	jsr $F70A.w		; 20 0A F7 ; Jump to subroutine at $F70A.w [Writes: Stack Pointer] [Flow: call]
	jsr $F7EF.w		; 20 EF F7 ; Jump to subroutine at $F7EF.w [Writes: Stack Pointer] [Flow: call]
	jsr $F836.w		; 20 36 F8 ; Jump to subroutine at $F836.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	jsr $F1F6.w		; 20 F6 F1 ; Jump to subroutine at $F1F6.w [Writes: Stack Pointer] [Flow: call]
	lda $0E40.w,X		; BD 40 0E ; Load $0E40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $4B		; 30 4B ; Branch if minus to $30, $4B [Flow: branch]
	.db $90, $61		; 90 61 ; Branch if carry clear to $90, $61 [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $5D		; D0 5D ; Branch if not equal to $D0, $5D [Flow: branch]
	lda $02E0.w		; AD E0 02 ; Load $02E0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $63		; D0 63 ; Branch if not equal to $D0, $63 [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $30, $5E		; 30 5E ; Branch if minus to $30, $5E [Flow: branch]
	lda $0BE0.w,X		; BD E0 0B ; Load $0BE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $57		; F0 57 ; Branch if equal to $F0, $57 [Flow: branch]
	lda $7EF35A.l		; AF 5A F3 7E ; Load long $7EF35A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $51		; F0 51 ; Branch if equal to $F0, $51 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $3C.b		; A4 3C ; Load $3C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $F13D.w,Y		; B9 3D F1 ; Load $F13D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cmp $F141.w,Y		; D9 41 F1 ; Compare accumulator $F141.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $D0, $3B		; D0 3B ; Branch if not equal to $D0, $3B [Flow: branch]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	jsl $06F6D5.l		; 22 D5 F6 06 ; Jump to subroutine long $06F6D5.l [Writes: Stack Pointer] [Flow: call]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$95.b		; C9 95 ; Compare #$95.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$26.b		; A9 26 ; Load #$26.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$9B.b		; C9 9B ; Compare #$9B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	jsr $D9D5.w		; 20 D5 D9 ; Jump to subroutine at $D9D5.w [Writes: Stack Pointer] [Flow: call]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: ZN]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$1B.b		; C9 1B ; Compare #$1B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $F3DB.w		; 20 DB F3 ; Jump to subroutine at $F3DB.w [Writes: Stack Pointer] [Flow: call]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $EFDA.w		; 20 DA EF ; Jump to subroutine at $EFDA.w [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp $E25A.w		; 4C 5A E2 ; Jump to $E25A.w [Flow: jump]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	stz $0D.b		; 64 0D ; Store zero to $0D.b
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FD8.w		; ED D8 0F ; Subtract $0FD8.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000B.w		; 69 0B 00 ; Add #$000B.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0017.w		; C9 17 00 ; Compare #$0017.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $16		; B0 16 ; Branch if carry set to $B0, $16 [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FDA.w		; ED DA 0F ; Subtract $0FDA.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0C.b		; 65 0C ; Add $0C.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0018.w		; C9 18 00 ; Compare #$0018.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $3C.b		; 05 3C ; Logical OR $3C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0FC1.w		; 0D C1 0F ; Logical OR $0FC1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $78		; D0 78 ; Branch if not equal to $D0, $78 [Flow: branch]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $0F20.w,X		; DD 20 0F ; Compare accumulator $0F20.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $71		; D0 71 ; Branch if not equal to $D0, $71 [Flow: branch]
	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0DD0.w,Y		; B9 D0 0D ; Load $0DD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $68		; F0 68 ; Branch if equal to $F0, $68 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $F6		; 10 F6 ; Branch if plus to $10, $F6 [Flow: branch]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$4A.b		; C9 4A ; Compare #$4A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0D40.w,X		; 1D 40 0D ; OR accumulator with memory $0D40.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $52		; D0 52 ; Branch if not equal to $D0, $52 [Flow: branch]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $4D		; D0 4D ; Branch if not equal to $D0, $4D [Flow: branch]
	lda $02F4.w		; AD F4 02 ; Load $02F4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $0FA0.w		; CD A0 0F ; Compare $0FA0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	jsr $F705.w		; 20 05 F7 ; Jump to subroutine at $F705.w [Writes: Stack Pointer] [Flow: call]
	jsr $F7EF.w		; 20 EF F7 ; Jump to subroutine at $F7EF.w [Writes: Stack Pointer] [Flow: call]
	jsr $F836.w		; 20 36 F8 ; Jump to subroutine at $F836.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $39		; 90 39 ; Branch if carry clear to $90, $39 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0314.w		; [PATTERN: Memory clearing operation] 8D 14 03 ; Store accumulator to $0314.w [Reads: Accumulator]
	sta $0FB2.w		; 8D B2 0F ; Store accumulator to $0FB2.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $F6.b		; 64 F6 ; Store zero to $F6.b
	stz $0E90.w,X		; 9E 90 0E ; Store zero to $0E90.w,X [Reads: X Index]
	lda #$1D.b		; A9 1D ; Load #$1D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFA2C.l,X		; 9F 2C FA 7F ; Store accumulator (long,X) $7FFA2C.l,X [Reads: Accumulator, X Index]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FFA1C.l,X		; 9F 1C FA 7F ; Store accumulator (long,X) $7FFA1C.l,X [Reads: Accumulator, X Index]
	sta $7FF9C2.l,X		; 9F C2 F9 7F ; Store accumulator (long,X) $7FF9C2.l,X [Reads: Accumulator, X Index]
	jsr $EAA4.w		; 20 A4 EA ; Jump to subroutine at $EAA4.w [Writes: Stack Pointer] [Flow: call]
	lda $F139.w,Y		; B9 39 F1 ; Load $F139.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $F2B4.w		; 20 B4 F2 ; Jump to subroutine at $F2B4.w [Writes: Stack Pointer] [Flow: call]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0EF0.w,X		; BD F0 0E ; Load $0EF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $0F20.w,X		; DD 20 0F ; Compare accumulator $0F20.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $5F		; D0 5F ; Branch if not equal to $D0, $5F [Flow: branch]
	lda $44.b		; A5 44 ; Load $44.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $59		; F0 59 ; Branch if equal to $F0, $59 [Flow: branch]
	jsr $F5E0.w		; 20 E0 F5 ; Jump to subroutine at $F5E0.w [Writes: Stack Pointer] [Flow: call]
	jsr $F7EF.w		; 20 EF F7 ; Jump to subroutine at $F7EF.w [Writes: Stack Pointer] [Flow: call]
	jsr $F836.w		; 20 36 F8 ; Jump to subroutine at $F836.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $4E		; 90 4E ; Branch if carry clear to $90, $4E [Flow: branch]
	stz $0047.w		; 9C 47 00 ; Store zero to $0047.w
	lda $037A.w		; AD 7A 03 ; Load $037A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $CC		; D0 CC ; Branch if not equal to $D0, $CC [Flow: branch]
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$0A.b		; 29 0A ; Logical AND #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D6.b		; C9 D6 ; Compare #$D6.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $36		; B0 36 ; Branch if carry set to $B0, $36 [Flow: branch]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $22		; D0 22 ; Branch if not equal to $D0, $22 [Flow: branch]
	lda $7FFA3C.l,X		; BF 3C FA 7F ; Load long $7FFA3C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $0E40.w,X		; BD 40 0E ; Load $0E40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$E0.b		; 29 E0 ; Logical AND #$E0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$03.b		; 09 03 ; Logical OR #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$7B.b		; C9 7B ; Compare #$7B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $33		; D0 33 ; Branch if not equal to $D0, $33 [Flow: branch]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	jmp $F3AF.w		; 4C AF F3 ; Jump to $F3AF.w [Flow: jump]
	jmp $F3A2.w		; 4C A2 F3 ; Jump to $F3A2.w [Flow: jump]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $F141.w,Y		; D9 41 F1 ; Compare accumulator $F141.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	jsr $F33D.w		; 20 3D F3 ; Jump to subroutine at $F33D.w [Writes: Stack Pointer] [Flow: call]
	stz $0EF0.w,X		; 9E F0 0E ; Store zero to $0EF0.w,X [Reads: X Index]
	jsr $F69F.w		; 20 9F F6 ; Jump to subroutine at $F69F.w [Writes: Stack Pointer] [Flow: call]
	jmp $F3C7.w		; 4C C7 F3 ; Jump to $F3C7.w [Flow: jump]
	jsr $EC02.w		; 20 02 EC ; Jump to subroutine at $EC02.w [Writes: Stack Pointer] [Flow: call]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $F688.w		; 20 88 F6 ; Jump to subroutine at $F688.w [Writes: Stack Pointer] [Flow: call]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $47.b		; 85 47 ; Store accumulator to $47.b [Reads: Accumulator]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	jmp $F3C7.w		; 4C C7 F3 ; Jump to $F3C7.w [Flow: jump]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $4B		; D0 4B ; Branch if not equal to $D0, $4B [Flow: branch]
	jsr $F445.w		; 20 45 F4 ; Jump to subroutine at $F445.w [Writes: Stack Pointer] [Flow: call]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBBA1.l		; 22 A1 BB 0D ; Jump to subroutine long $0DBBA1.l [Writes: Stack Pointer] [Flow: call]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	jmp $F3C3.w		; 4C C3 F3 ; Jump to $F3C3.w [Flow: jump]
	cmp #$92.b		; C9 92 ; Compare #$92.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $F460.w		; 4C 60 F4 ; Jump to $F460.w [Flow: jump]
	cmp #$26.b		; C9 26 ; Compare #$26.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $CC		; F0 CC ; Branch if equal to $F0, $CC [Flow: branch]
	cmp #$13.b		; C9 13 ; Compare #$13.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $B2		; F0 B2 ; Branch if equal to $F0, $B2 [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $B8		; F0 B8 ; Branch if equal to $F0, $B8 [Flow: branch]
	cmp #$CB.b		; C9 CB ; Compare #$CB.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	cmp #$CD.b		; C9 CD ; Compare #$CD.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	cmp #$CC.b		; C9 CC ; Compare #$CC.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cmp #$D6.b		; C9 D6 ; Compare #$D6.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$D7.b		; C9 D7 ; Compare #$D7.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$CE.b		; C9 CE ; Compare #$CE.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $F688.w		; 20 88 F6 ; Jump to subroutine at $F688.w [Writes: Stack Pointer] [Flow: call]
	lda #$90.b		; A9 90 ; Load #$90.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $47.b		; 85 47 ; Store accumulator to $47.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda $0CAA.w,X		; BD AA 0C ; Load $0CAA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	jsr $EC02.w		; 20 02 EC ; Jump to subroutine at $EC02.w [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $80, $18		; 80 18 ; Branch always to $80, $18 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $80, $15		; 80 15 ; Branch always to $80, $15 [Flow: branch]
	lda $47.b		; A5 47 ; Load $47.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $F688.w		; 20 88 F6 ; Jump to subroutine at $F688.w [Writes: Stack Pointer] [Flow: call]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $47.b		; 85 47 ; Store accumulator to $47.b [Reads: Accumulator]
	jsr $F69F.w		; 20 9F F6 ; Jump to subroutine at $F69F.w [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $4E		; B0 4E ; Branch if carry set to $B0, $4E [Flow: branch]
	jsr $F645.w		; 20 45 F6 ; Jump to subroutine at $F645.w [Writes: Stack Pointer] [Flow: call]
	jsr $F705.w		; 20 05 F7 ; Jump to subroutine at $F705.w [Writes: Stack Pointer] [Flow: call]
	jsr $F836.w		; 20 36 F8 ; Jump to subroutine at $F836.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $43		; 90 43 ; Branch if carry clear to $90, $43 [Flow: branch]
	lda $031F.w		; AD 1F 03 ; Load $031F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $037B.w		; 0D 7B 03 ; Logical OR $037B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $3B		; D0 3B ; Branch if not equal to $D0, $3B [Flow: branch]
	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $F688.w		; 20 88 F6 ; Jump to subroutine at $F688.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	lda $0CD2.w,X		; BD D2 0C ; Load $0CD2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7EF35B.l		; 6F 5B F3 7E ; Add with carry (long) $7EF35B.l [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $F427.w,Y		; B9 27 F4 ; Load $F427.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0373.w		; 8D 73 03 ; Store accumulator to $0373.w [Reads: Accumulator]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$61.b		; C9 61 ; Compare #$61.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $F3DB.w		; 20 DB F3 ; Jump to subroutine at $F3DB.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	tsb $20.b		; 04 20 ; Test and set bits $20.b [Reads: Accumulator] [Flags: Z]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	jsr $1018.w		; 20 18 10 ; Jump to subroutine at $1018.w [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $30, $18		; 30 18 ; Branch if minus to $30, $18 [Flow: branch]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $F688.w		; 20 88 F6 ; Jump to subroutine at $F688.w [Writes: Stack Pointer] [Flow: call]
	lda #$90.b		; A9 90 ; Load #$90.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $47.b		; 85 47 ; Store accumulator to $47.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda #$21.b		; A9 21 ; Load #$21.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	jmp $F3C7.w		; 4C C7 F3 ; Jump to $F3C7.w [Flow: jump]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	jmp $F3B2.w		; 4C B2 F3 ; Jump to $F3B2.w [Flow: jump]
	jmp $F395.w		; 4C 95 F3 ; Jump to $F395.w [Flow: jump]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($02FA.w,X)		; FC FA 02 ; Jump to subroutine indirect indexed ($02FA.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($F6FC.w,X)		; FC FC F6 ; Jump to subroutine indirect indexed ($F6FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $080804.l		; 0F 04 08 08 ; OR accumulator with memory (long) $080804.l [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $0408.w		; 0C 08 04 ; Test and set bits $0408.w [Reads: Accumulator] [Flags: Z]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $10.b		; 04 10 ; Test and set bits $10.b [Reads: Accumulator] [Flags: Z]
	tsb $0808.w		; 0C 08 08 ; Test and set bits $0808.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0B.w		; 0C 0B 0C ; Test and set bits $0C0B.w [Reads: Accumulator] [Flags: Z]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $040F.w		; 0E 0F 04 ; Arithmetic shift left $040F.w [Flags: ZNC]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $040F.w		; 0E 0F 04 ; Arithmetic shift left $040F.w [Flags: ZNC]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora [$02.b]		; 07 02 ; OR accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00F8.w,X		; FD F8 00 ; Subtract with carry $00F8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FC00.w,X		; FE 00 FC ; Increment memory $FC00.w,X [Reads: X Index] [Flags: ZN]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $020804.l		; 0F 04 08 02 ; OR accumulator with memory (long) $020804.l [Writes: Accumulator] [Flags: ZN]
	tsb $0C08.w		; 0C 08 0C ; Test and set bits $0C08.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	tsb $040C.w		; 0C 0C 04 ; Test and set bits $040C.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $0404.w		; 0C 04 04 ; Test and set bits $0404.w [Reads: Accumulator] [Flags: Z]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $0404.w		; 0C 04 04 ; Test and set bits $0404.w [Reads: Accumulator] [Flags: Z]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($8B.b,X)		; 01 8B ; Logical OR ($8B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $F5E0.w		; 20 E0 F5 ; Jump to subroutine at $F5E0.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $10F800.l,X		; FF 00 F8 10 ; Subtract with carry (long,X) $10F800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0E.b		; E9 0E ; Subtract #$0E.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0A.b		; E9 0A ; Subtract #$0A.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda #$2C.b		; A9 2C ; Load #$2C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F588.w,Y		; 79 88 F5 ; Add $F588.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $F58C.w,Y		; 79 8C F5 ; Add $F58C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F590.w,Y		; 79 90 F5 ; Add $F590.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $F586.w,Y		; 79 86 F5 ; Add $F586.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $D2		; D0 D2 ; Branch if not equal to $D0, $D2 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$0A.b		; 29 0A ; Logical AND #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	lda $037A.w		; AD 7A 03 ; Load $037A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	ldy $3C.b		; A4 3C ; Load $3C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $30, $9A		; 30 9A ; Branch if minus to $30, $9A [Flow: branch]
	lda $F571.w,Y		; B9 71 F5 ; Load $F571.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $40		; D0 40 ; Branch if not equal to $D0, $40 [Flow: branch]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $3C.b		; 65 3C ; Add $3C.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $45.b		; A5 45 ; Load $45.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F46D.w,X		; 7D 6D F4 ; Add $F46D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $23.b		; 65 23 ; Add $23.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $44.b		; A5 44 ; Load $44.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F4EF.w,X		; 7D EF F4 ; Add $F4EF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $21.b		; 65 21 ; Add $21.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda $F4AE.w,X		; BD AE F4 ; Load $F4AE.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $F530.w,X		; BD 30 F5 ; Load $F530.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0FAB.w		; AD AB 0F ; Load $0FAB.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $35		; F0 35 ; Branch if equal to $F0, $35 [Flow: branch]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D10.w,X		; 7D 10 0D ; Add $0D10.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $0D30.w,X		; 7D 30 0D ; Add $0D30.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0FAA.w		; AD AA 0F ; Load $0FAA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D00.w,X		; 7D 00 0D ; Add $0D00.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $0D20.w,X		; 7D 20 0D ; Add $0D20.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $0E20.w,X		; BC 20 0E ; Load Y register $0E20.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$6A.b		; C0 6A ; Compare #$6A.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $E991.w		; 20 91 E9 ; Jump to subroutine at $E991.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	lsr A		; [PATTERN: Memory clearing operation] 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	sta $C7.b		; 85 C7 ; Store accumulator to $C7.b [Reads: Accumulator]
	stz $24.b		; 64 24 ; Store zero to $24.b
	stz $25.b		; 64 25 ; Store zero to $25.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0FAC.w		; AD AC 0F ; Load $0FAC.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $25		; D0 25 ; Branch if not equal to $D0, $25 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FAC.w		; 8D AC 0F ; Store accumulator to $0FAC.w [Reads: Accumulator]
	lda $0022.w		; AD 22 00 ; Load $0022.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $0045.w		; 6D 45 00 ; Add $0045.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0FAD.w		; 8D AD 0F ; Store accumulator to $0FAD.w [Reads: Accumulator]
	lda $0020.w		; AD 20 00 ; Load $0020.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $0044.w		; 6D 44 00 ; Add $0044.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0FAE.w		; 8D AE 0F ; Store accumulator to $0FAE.w [Reads: Accumulator]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0B68.w		; 8D 68 0B ; Store accumulator to $0B68.w [Reads: Accumulator]
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora #$05.b		; 09 05 ; Logical OR #$05.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0FAC.w		; AD AC 0F ; Load $0FAC.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $35		; D0 35 ; Branch if not equal to $D0, $35 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $E2.b		; C5 E2 ; Compare $E2.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E3.b		; E5 E3 ; Subtract $E3.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $23		; D0 23 ; Branch if not equal to $D0, $23 [Flow: branch]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $E8.b		; C5 E8 ; Compare $E8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E9.b		; E5 E9 ; Subtract $E9.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FAD.w		; 8D AD 0F ; Store accumulator to $0FAD.w [Reads: Accumulator]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FAE.w		; 8D AE 0F ; Store accumulator to $0FAE.w [Reads: Accumulator]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FAC.w		; 8D AC 0F ; Store accumulator to $0FAC.w [Reads: Accumulator]
	lda $0F20.w,X		; BD 20 0F ; Load $0F20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0B68.w		; 8D 68 0B ; Store accumulator to $0B68.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $037B.w		; AD 7B 03 ; Load $037B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	pea $FC04.w		; F4 04 FC ; Push absolute address $FC04.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $E005.w		; F4 05 E0 ; Push absolute address $E005.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	inc $0004.w,X		; FE 04 00 ; Increment memory $0004.w,X [Reads: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFF00.l,X		; FF 00 FF FF ; Subtract with carry (long,X) $FFFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0000.l,X		; FF 00 00 FF ; Subtract with carry (long,X) $FF0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF00FF.l,X		; FF FF 00 FF ; Subtract with carry (long,X) $FF00FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFF00.l,X		; FF 00 FF FF ; Subtract with carry (long,X) $FFFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $20.b		; 04 20 ; Test and set bits $20.b [Reads: Accumulator] [Flags: Z]
	.db $30, $18		; 30 18 ; Branch if minus to $30, $18 [Flow: branch]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	.db $30, $0C		; 30 0C ; Branch if minus to $30, $0C [Flow: branch]
	tsb $7C3C.w		; 0C 3C 7C ; Test and set bits $7C3C.w [Reads: Accumulator] [Flags: Z]
	tsb $0420.w		; 0C 20 04 ; Test and set bits $0420.w [Reads: Accumulator] [Flags: Z]
	tsb $2030.w		; 0C 30 20 ; Test and set bits $2030.w [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $50.b		; 05 50 ; Logical OR $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	jsr ($00F8.w,X)		; FC F8 00 ; Jump to subroutine indirect indexed ($00F8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $F0.b,X		; F6 F0 ; Increment memory $F0.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $02F4.w,X		; FD F4 02 ; Subtract with carry $02F4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	jsr ($03F4.w,X)		; FC F4 03 ; Jump to subroutine indirect indexed ($03F4.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0000.l,X		; FF 00 00 FF ; Subtract with carry (long,X) $FF0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFF00.l,X		; FF 00 FF FF ; Subtract with carry (long,X) $FFFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF00FF.l,X		; FF FF 00 FF ; Subtract with carry (long,X) $FF00FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $010E00.l,X		; FF 00 0E 01 ; Subtract with carry (long,X) $010E00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $15		; 10 15 ; Branch if plus to $10, $15 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	trb $18.b		; 14 18 ; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora $3024.w,X		; 1D 24 30 ; OR accumulator with memory $3024.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $0C7C.w,X		; 3C 7C 0C ; Test bits $0C7C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	tsb $1C11.w		; 0C 11 1C ; Test and set bits $1C11.w [Reads: Accumulator] [Flags: Z]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	trb $0A14.w		; 1C 14 0A ; Test and reset bits $0A14.w [Reads: Accumulator] [Flags: Z]
	tsb $18.b		; 04 18 ; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	.db $30, $08		; 30 08 ; Branch if minus to $30, $08 [Flow: branch]
	tsb $70BD.w		; 0C BD 70 ; Test and set bits $70BD.w [Reads: Accumulator] [Flags: Z]
	ora $5A3D30.l		; 0F 30 3D 5A ; OR accumulator with memory (long) $5A3D30.l [Writes: Accumulator] [Flags: ZN]
	lda $0F60.w,X		; BD 60 0F ; Load $0F60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F72F.w,Y		; 79 2F F7 ; Add $F72F.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $F74F.w,Y		; 79 4F F7 ; Add $F74F.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F78F.w,Y		; 79 8F F7 ; Add $F78F.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0F70.w,X		; FD 70 0F ; Subtract with carry $0F70.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	adc $F7AF.w,Y		; 79 AF F7 ; Add $F7AF.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda $F76F.w,Y		; B9 6F F7 ; Load $F76F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $F7CF.w,Y		; B9 CF F7 ; Load $F7CF.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: ZN]
	lda $04.b,X		; B5 04 ; Load $04.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b,X		; F5 00 ; Subtract $00.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b,X		; 75 06 ; Add $06.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	lda $0A.b,X		; B5 0A ; Load $0A.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $08.b,X		; F5 08 ; Subtract $08.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$80.b		; 69 80 ; Add #$80.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $02.b,X		; B5 02 ; Load $02.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b,X		; 75 06 ; Add $06.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $0F.b		; C5 0F ; Compare $0F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $D7		; 10 D7 ; Branch if plus to $10, $D7 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $F86C.w		; 20 6C F8 ; Jump to subroutine at $F86C.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0F20.w,X		; BD 20 0F ; Load $0F20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $EE.b		; C5 EE ; Compare $EE.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $D0, $2E		; D0 2E ; Branch if not equal to $D0, $2E [Flow: branch]
	jsr $EAD1.w		; 20 D1 EA ; Jump to subroutine at $EAD1.w [Writes: Stack Pointer] [Flow: call]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $22		; B0 22 ; Branch if carry set to $B0, $22 [Flow: branch]
	jsr $EAE8.w		; 20 E8 EA ; Jump to subroutine at $EAE8.w [Writes: Stack Pointer] [Flow: call]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$20.b		; 69 20 ; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$48.b		; C9 48 ; Compare #$48.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $16		; B0 16 ; Branch if carry set to $B0, $16 [Flow: branch]
	lda $0E40.w,X		; BD 40 0E ; Load $0E40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	jsl $0DBA88.l		; 22 88 BA 0D ; Jump to subroutine long $0DBA88.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	jsl $0DBA84.l		; 22 84 BA 0D ; Jump to subroutine long $0DBA84.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$EC.b		; C9 EC ; Compare #$EC.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	jsr $AC41.w		; 20 41 AC ; Jump to subroutine at $AC41.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$53.b		; C9 53 ; Compare #$53.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $62		; F0 62 ; Branch if equal to $F0, $62 [Flow: branch]
	cmp #$54.b		; C9 54 ; Compare #$54.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $5E		; F0 5E ; Branch if equal to $F0, $5E [Flow: branch]
	cmp #$92.b		; C9 92 ; Compare #$92.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $5A		; F0 5A ; Branch if equal to $F0, $5A [Flow: branch]
	cmp #$4A.b		; C9 4A ; Compare #$4A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $4F		; B0 4F ; Branch if carry set to $B0, $4F [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $5A		; F0 5A ; Branch if equal to $F0, $5A [Flow: branch]
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $45		; 30 45 ; Branch if minus to $30, $45 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $11.b		; 05 11 ; Logical OR $11.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0FC1.w		; 0D C1 0F ; Logical OR $0FC1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0DF0.w,X		; FE F0 0D ; Increment memory $0DF0.w,X [Reads: X Index] [Flags: ZN]
	jsr $FB2A.w		; 20 2A FB ; Jump to subroutine at $FB2A.w [Writes: Stack Pointer] [Flow: call]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $25		; 90 25 ; Branch if carry clear to $90, $25 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $90.b		; A5 90 ; Load $90.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	lda $92.b		; A5 92 ; Load $92.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0E40.w,X		; BD 40 0E ; Load $0E40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	jsr $9271.w		; 20 71 92 ; Jump to subroutine at $9271.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $9271.w		; 20 71 92 ; Jump to subroutine at $9271.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $F923.w		; 20 23 F9 ; Jump to subroutine at $F923.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp.w [$D9E1]		; DC E1 D9 ; Jump long indirect [$D9E1] [Flow: jump]
	inc $BD.b		; E6 BD ; Increment $BD.b [Reads: Direct Page] [Flags: ZN]
	jsr $C90E.w		; 20 0E C9 ; Jump to subroutine at $C90E.w [Writes: Stack Pointer] [Flow: call]
	ldx $03D0.w,Y		; BE D0 03 ; Load X register $03D0.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	dec $0ED0.w		; CE D0 0E ; Decrement $0ED0.w [Flags: ZN]
	cmp #$AA.b		; C9 AA ; Compare #$AA.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $24		; D0 24 ; Branch if not equal to $D0, $24 [Flow: branch]
	ldy $0E90.w,X		; BC 90 0E ; Load Y register $0E90.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	lda $F91E.w,Y		; B9 1E F9 ; Load $F91E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $0E30.w,X		; BC 30 0E ; Load Y register $0E30.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsr $F9D1.w		; 20 D1 F9 ; Jump to subroutine at $F9D1.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0E30.w,X		; 9D 30 0E ; Store accumulator to $0E30.w,X [Reads: Accumulator, X Index]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	inc $0EB0.w,X		; FE B0 0E ; Increment memory $0EB0.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$45.b		; C9 45 ; Compare #$45.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $040A.w		; AD 0A 04 ; Load $040A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	ldy $0CBA.w,X		; BC BA 0C ; Load Y register $0CBA.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $F0, $1B		; F0 1B ; Branch if equal to $F0, $1B [Flow: branch]
	lda $0BC0.w,X		; BD C0 0B ; Load $0BC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E30.w,X		; 9D 30 0E ; Store accumulator to $0E30.w,X [Reads: Accumulator, X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0BC0.w,X		; 9D C0 0B ; Store accumulator to $0BC0.w,X [Reads: Accumulator, X Index]
	lda #$E4.b		; A9 E4 ; Load #$E4.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$01.b		; C0 01 ; Compare #$01.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $4B		; F0 4B ; Branch if equal to $F0, $4B [Flow: branch]
	lda #$E5.b		; A9 E5 ; Load #$E5.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$03.b		; C0 03 ; Compare #$03.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $45		; D0 45 ; Branch if not equal to $D0, $45 [Flow: branch]
	lda #$D9.b		; A9 D9 ; Load #$D9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $41		; 80 41 ; Branch always to $80, $41 [Flow: branch]
	lda $0BE0.w,X		; BD E0 0B ; Load $0BE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $0CF9.w		; AC F9 0C ; Load $0CF9.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	inc $0CFA.w		; EE FA 0C ; Increment $0CFA.w [Flags: ZN]
	lda $0CFA.w		; AD FA 0C ; Load $0CFA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	stz $0CF9.w		; 9C F9 0C ; Store zero to $0CF9.w
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cpy #$01.b		; C0 01 ; Compare #$01.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	.db $80, $70		; 80 70 ; Branch always to $80, $70 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	and $FA5C.w,Y		; 39 5C FA ; AND accumulator with memory $FA5C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $66		; D0 66 ; Branch if not equal to $D0, $66 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $0FC7.w,Y		; 19 C7 0F ; OR accumulator with memory $0FC7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0FC7.w,Y		; B9 C7 0F ; Load $0FC7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FC7.w,Y		; 99 C7 0F ; Store accumulator to $0FC7.w,Y [Reads: Accumulator, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $FA72.w,Y		; B9 72 FA ; Load $FA72.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	cmp #$E5.b		; C9 E5 ; Compare #$E5.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	jsr $9256.w		; 20 56 92 ; Jump to subroutine at $9256.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	cmp #$E4.b		; C9 E4 ; Compare #$E4.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $9267.w		; 20 67 92 ; Jump to subroutine at $9267.w [Writes: Stack Pointer] [Flow: call]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $0DB818.l		; 22 18 B8 0D ; Jump to subroutine long $0DB818.l [Writes: Stack Pointer] [Flow: call]
	inc $0BA0.w,X		; FE A0 0B ; Increment memory $0BA0.w,X [Reads: X Index] [Flags: ZN]
	ldy $0E20.w,X		; BC 20 0E ; Load Y register $0E20.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $F98B.w,Y		; B9 8B F9 ; Load $F98B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,X		; 9D 80 0F ; Store accumulator to $0F80.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D10.w,X		; 7D 10 0D ; Add $0D10.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F10.w,X		; 9D 10 0F ; Store accumulator to $0F10.w,X [Reads: Accumulator, X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B58.w,X		; 9D 58 0B ; Store accumulator to $0B58.w,X [Reads: Accumulator, X Index]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$A2.b		; C9 A2 ; Compare #$A2.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	jsl $09AF32.l		; 22 32 AF 09 ; Jump to subroutine long $09AF32.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $05A51D.l		; 22 1D A5 05 ; Jump to subroutine long $05A51D.l [Writes: Stack Pointer] [Flow: call]
	jsl $09C2F5.l		; 22 F5 C2 09 ; Jump to subroutine long $09C2F5.l [Writes: Stack Pointer] [Flow: call]
	inc $0CFB.w		; EE FB 0C ; Increment $0CFB.w [Flags: ZN]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jmp $F8C9.w		; 4C C9 F8 ; Jump to $F8C9.w [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $F9BC.w		; 20 BC F9 ; Jump to subroutine at $F9BC.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $20.b		; 24 20 ; Test bits $20.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsr $2420.w		; 20 20 24 ; Jump to subroutine at $2420.w [Writes: Stack Pointer] [Flow: call]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $20.b		; 24 20 ; Test bits $20.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsr $D8D8.w		; 20 D8 D8 ; Jump to subroutine at $D8D8.w [Writes: Stack Pointer] [Flow: call]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cmp $D8D8.w,Y		; D9 D8 D8 ; Compare accumulator $D8D8.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp $D9DA.w,Y		; D9 DA D9 ; Compare accumulator $D9DA.w,Y [Reads: Y Index] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cmp $DADA.w,Y		; D9 DA DA ; Compare accumulator $DADA.w,Y [Reads: Y Index] [Flags: ZNC]
	cpx #$DF.b		; E0 DF ; Compare #$DF.b with X register [Reads: X Index] [Flags: ZNC]
	cmp $DFE0DA.l,X		; DF DA E0 DF ; Compare accumulator (long,X) $DFE0DA.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cmp $DCDCDC.l,X		; DF DC DC DC ; Compare accumulator (long,X) $DCDCDC.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $DCDC.w,X		; DD DC DC ; Compare accumulator $DCDC.w,X [Reads: X Index] [Flags: ZNC]
	dec $E1DC.w,X		; DE DC E1 ; Decrement memory $E1DC.w,X [Reads: X Index] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sbc ($E2.b,X)		; E1 E2 ; Subtract with carry ($E2.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($D8.b,X)		; E1 D8 ; Subtract with carry ($D8.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($E2.b,X)		; E1 E2 ; Subtract with carry ($E2.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $E1D8D9.l,X		; DF D9 D8 E1 ; Compare accumulator (long,X) $E1D8D9.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $D8D9DC.l,X		; DF DC D9 D8 ; Compare accumulator (long,X) $D8D9DC.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sbc $E0.b,S		; E3 E0 ; Subtract stack-relative $E0.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	dec $DBD8.w,X		; DE D8 DB ; Decrement memory $DBD8.w,X [Reads: X Index] [Flags: ZN]
	sep #$00		; E2 00 ; Set processor status bits #$00 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FD0B.w,X		; FD 0B FD ; Subtract with carry $FD0B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	asl $0EFA.w		; 0E FA 0E ; Arithmetic shift left $0EFA.w [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $0BFD.w,X		; FD FD 0B ; Subtract with carry $0BFD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	asl $000E.w		; 0E 0E 00 ; Arithmetic shift left $000E.w [Flags: ZNC]
	lda $0000.w,Y		; B9 00 00 ; Load $0000.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $B5.b,X		; B4 B5 ; Load Y register $B5.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $B4.b,X		; B5 B4 ; Load $B4.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $0000.w,Y		; B9 00 00 ; Load $0000.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $B5.b		; 00 B5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $B4.b,X		; B4 B4 ; Load Y register $B4.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $A8.b,X		; B5 A8 ; Load $A8.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	clv		; B8 ; Clear overflow flag [Flags: V]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda #$A9.b		; A9 A9 ; Load #$A9.b into accumulator [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cpy $C4.b		; C4 C4 ; Compare $C4.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	mvp $04,$04		; 44 04 04 ; Move block positive $04,$04 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $44.b		; 04 44 ; Test and set bits $44.b [Reads: Accumulator] [Flags: Z]
	mvp $84,$84		; 44 84 84 ; Move block positive $84,$84 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $44.b		; 04 44 ; Test and set bits $44.b [Reads: Accumulator] [Flags: Z]
	tsb $44.b		; 04 44 ; Test and set bits $44.b [Reads: Accumulator] [Flags: Z]
	tsb $44.b		; 04 44 ; Test and set bits $44.b [Reads: Accumulator] [Flags: Z]
	tsb $44.b		; 04 44 ; Test and set bits $44.b [Reads: Accumulator] [Flags: Z]
	mvp $C4,$04		; 44 04 C4 ; Move block positive $C4,$04 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sty $04.b		; 84 04 ; Store Y register to $04.b [Reads: Y Index]
	mvp $C4,$84		; 44 84 C4 ; Move block positive $C4,$84 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B89.w,X		; 9D 89 0B ; Store accumulator to $0B89.w,X [Reads: Accumulator, X Index]
	jsr $E41E.w		; 20 1E E4 ; Jump to subroutine at $E41E.w [Writes: Stack Pointer] [Flow: call]
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$1C.b		; 29 1C ; Logical AND #$1C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor #$1C.b		; 49 1C ; Exclusive OR #$1C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $FAEA.w,X		; BD EA FA ; Load $FAEA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $2A		; F0 2A ; Branch if equal to $F0, $2A [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $0FA9.w		; AD A9 0F ; Load $0FA9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0C.b		; E5 0C ; Subtract $0C.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $FACA.w,X		; 7D CA FA ; Add $FACA.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $0FA8.w		; AD A8 0F ; Load $0FA8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0C.b		; E5 0C ; Subtract $0C.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $FAAA.w,X		; 7D AA FA ; Add $FAAA.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$30.b		; 29 30 ; Logical AND #$30.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $FB0A.w,X		; 1D 0A FB ; OR accumulator with memory $FB0A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $C6		; 10 C6 ; Branch if plus to $10, $C6 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $FEBC.w		; 20 BC FE ; Jump to subroutine at $FEBC.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $0D0D.w		; 0D 0D 0D ; Logical OR $0D0D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0D0D.w		; 0D 0D 0D ; Logical OR $0D0D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0C0C.w		; 0D 0C 0C ; Logical OR $0C0C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0F1F3F.l,X		; FF 3F 1F 0F ; Subtract with carry (long,X) $0F1F3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $010307.l		; 0F 07 03 01 ; OR accumulator with memory (long) $010307.l [Writes: Accumulator] [Flags: ZN]
	sbc $0F1F3F.l,X		; FF 3F 1F 0F ; Subtract with carry (long,X) $0F1F3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	jsl $09C2F5.l		; 22 F5 C2 09 ; Jump to subroutine long $09C2F5.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $40		; 90 40 ; Branch if carry clear to $90, $40 [Flow: branch]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$3F.b		; A9 3F ; Load #$3F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	.db $80, $32		; 80 32 ; Branch always to $80, $32 [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $11.b		; 05 11 ; Logical OR $11.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0FC1.w		; 0D C1 0F ; Logical OR $0FC1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$31.b		; A9 31 ; Load #$31.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	jsr $9271.w		; 20 71 92 ; Jump to subroutine at $9271.w [Writes: Stack Pointer] [Flow: call]
	jsr $E41E.w		; 20 1E E4 ; Jump to subroutine at $E41E.w [Writes: Stack Pointer] [Flow: call]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$14.b		; 69 14 ; Add #$14.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	jsl $06A733.l		; 22 33 A7 06 ; Jump to subroutine long $06A733.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$3D.b		; C9 3D ; Compare #$3D.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$26.b		; C9 26 ; Compare #$26.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$13.b		; C9 13 ; Compare #$13.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $FBB6.w,Y		; B9 B6 FB ; Load $FBB6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $FD17.w		; 20 17 FD ; Jump to subroutine at $FD17.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	lda $FB96.w,Y		; B9 96 FB ; Load $FB96.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $07		; B0 07 ; Branch if carry set to $B0, $07 [Flow: branch]
	ldy $0DE0.w,X		; BC E0 0D ; Load Y register $0DE0.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $FBE6.w,Y		; 79 E6 FB ; Add $FBE6.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $FE5B.w		; 20 5B FE ; Jump to subroutine at $FE5B.w [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $FBD6.w,Y		; 39 D6 FB ; AND accumulator with memory $FBD6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $11.b		; 05 11 ; Logical OR $11.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $33		; D0 33 ; Branch if not equal to $D0, $33 [Flow: branch]
	ldy #$68.b		; A0 68 ; Load #$68.b into Y register [Writes: Y Index] [Flags: ZN]
	jsr $E73C.w		; 20 3C E7 ; Jump to subroutine at $E73C.w [Writes: Stack Pointer] [Flow: call]
	lda $0FA5.w		; [PATTERN: Memory clearing operation] AD A5 0F ; Load $0FA5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	stz $0F30.w,X		; 9E 30 0F ; Store zero to $0F30.w,X [Reads: X Index]
	stz $0F40.w,X		; 9E 40 0F ; Store zero to $0F40.w,X [Reads: X Index]
	lda $0F30.w,X		; BD 30 0F ; Load $0F30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror $0D40.w,X		; 7E 40 0D ; Rotate right $0D40.w,X [Reads: X Index] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ror $0D40.w,X		; 7E 40 0D ; Rotate right $0D40.w,X [Reads: X Index] [Flags: ZNC]
	lda $0F40.w,X		; BD 40 0F ; Load $0F40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror $0D50.w,X		; 7E 50 0D ; Rotate right $0D50.w,X [Reads: X Index] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ror $0D50.w,X		; 7E 50 0D ; Rotate right $0D50.w,X [Reads: X Index] [Flags: ZNC]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $01.b		; 46 01 ; Logical shift right $01.b [Reads: Direct Page] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4A.b		; 00 4A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4C.b		; 00 4C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B7.b		; 00 B7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6E.b		; 00 6E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4E.b		; 00 4E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5C.b		; 00 5C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B7.b		; 00 B7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $C90E.w		; 20 0E C9 ; Jump to subroutine at $C90E.w [Writes: Stack Pointer] [Flow: call]
	ora ($F0.b,S),Y		; 13 F0 ; OR accumulator (stack relative indirect indexed) ($F0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$BD.b],Y		; 17 BD ; OR accumulator with memory (long indexed) [$BD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$0D.b		; C0 0D ; Compare #$0D.b with Y register [Reads: Y Index] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$B7.b		; 69 B7 ; Add #$B7.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$FC.b		; A9 FC ; Load #$FC.b into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$E7.b		; 69 E7 ; Add #$E7.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$FC.b		; A9 FC ; Load #$FC.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $E7		; 80 E7 ; Branch always to $80, $E7 [Flow: branch]
	jsr ($FC04.w,X)		; FC 04 FC ; Jump to subroutine indirect indexed ($FC04.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsb $0000.w		; 0C 00 00 ; Test and set bits $0000.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($FC0C.w,X)		; FC 0C FC ; Jump to subroutine indirect indexed ($FC0C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04FC.w		; 0C FC 04 ; Test and set bits $04FC.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($04FC.w,X)		; FC FC 04 ; Jump to subroutine indirect indexed ($04FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsb $0000.w		; 0C 00 00 ; Test and set bits $0000.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($0CFC.w,X)		; FC FC 0C ; Jump to subroutine indirect indexed ($0CFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($040C.w,X)		; FC 0C 04 ; Jump to subroutine indirect indexed ($040C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $A6A8.w		; AE A8 A6 ; Load $A6A8.w into X register [Writes: X Index] [Flags: ZN]
	lda $0000AA.l		; AF AA 00 00 ; Load long $0000AA.l into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $A6AF.w		; AE AF A6 ; Load $A6AF.w into X register [Writes: X Index] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $AAA8AE.l		; AF AE A8 AA ; Load long $AAA8AE.l into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B6.b		; 00 B6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $BDE4.w,X		; 1E E4 BD ; Arithmetic shift left $BDE4.w,X [Reads: X Index] [Flags: ZNC]
	cpy #$0D.b		; C0 0D ; Compare #$0D.b with Y register [Reads: Y Index] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: ZN]
	stx $07.b		; 86 07 ; Store X register to $07.b [Reads: X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $FD43.w,X		; 7D 43 FD ; Add $FD43.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $FD7B.w,X		; 7D 7B FD ; Add $FD7B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $FDB3.w,X		; BD B3 FD ; Load $FDB3.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $FDEB.w,X		; BD EB FD ; Load $FDEB.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $05.b		; 45 05 ; Exclusive OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $FE23.w,X		; BD 23 FE ; Load $FE23.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $CB		; 10 CB ; Branch if plus to $10, $CB [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $FEBC.w		; 20 BC FE ; Jump to subroutine at $FEBC.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $FEBC.w		; 20 BC FE ; Jump to subroutine at $FEBC.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $FF26.w		; 20 26 FF ; Jump to subroutine at $FF26.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
.INDEX 16
	rep #$10		; C2 10
	ldx $90.b		; A6 90 ; Load $90.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stx $0C.b		; 86 0C ; Store X register to $0C.b [Reads: X Index]
	ldx $92.b		; A6 92 ; Load $92.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stx $0E.b		; 86 0E ; Store X register to $0E.b [Reads: X Index]
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $0B.b		; A5 0B ; Load $0B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	lda $00.b,X		; B5 00 ; Load $00.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b,X		; 95 00 ; Store accumulator to $00.b,X [Reads: Accumulator, X Index]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $00.b,X		; B5 00 ; Load $00.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $07.b		; E5 07 ; Subtract $07.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $03.b		; 65 03 ; Add $03.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	jsr $FF49.w		; 20 49 FF ; Jump to subroutine at $FF49.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	inc $00.b,X		; F6 00 ; Increment memory $00.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $00.b,X		; B5 00 ; Load $00.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $06.b		; E5 06 ; Subtract $06.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $01.b		; 65 01 ; Add $01.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $FF56.w		; 20 56 FF ; Jump to subroutine at $FF56.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b,X		; 95 00 ; Store accumulator to $00.b,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $0C.b		; 86 0C ; Store X register to $0C.b [Reads: X Index]
	inc $0E.b		; E6 0E ; Increment $0E.b [Reads: Direct Page] [Flags: ZN]
	dec $08.b		; C6 08 ; Decrement $08.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $A8		; 10 A8 ; Branch if plus to $10, $A8 [Flow: branch]
.INDEX 8
	sep #$10		; E2 10
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $0B.b		; 84 0B ; Store Y register to $0B.b [Reads: Y Index]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $09.b		; A5 09 ; Load $09.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $09F1F8.l		; 22 F8 F1 09 ; Jump to subroutine long $09F1F8.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $BD03.w		; 0C 03 BD ; Test and set bits $BD03.w [Reads: Accumulator] [Flags: Z]
	ldy #$0E.b		; A0 0E ; Load #$0E.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $F0, $76		; F0 76 ; Branch if equal to $F0, $76 [Flow: branch]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $73		; F0 73 ; Branch if equal to $F0, $73 [Flow: branch]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	dec $0EA0.w,X		; DE A0 0E ; Decrement memory $0EA0.w,X [Reads: X Index] [Flags: ZN]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda $0F40.w,X		; BD 40 0F ; Load $0F40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$20.b		; 69 20 ; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	lda $0F30.w,X		; BD 30 0F ; Load $0F30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$20.b		; 69 20 ; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda #$90.b		; A9 90 ; Load #$90.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EA0.w,X		; 9D A0 0E ; Store accumulator to $0EA0.w,X [Reads: Accumulator, X Index]
	lda $0EA0.w,X		; BD A0 0E ; Load $0EA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $3D		; 30 3D ; Branch if minus to $30, $3D [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $FF72.w,Y		; 39 72 FF ; AND accumulator with memory $FF72.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $33		; D0 33 ; Branch if not equal to $D0, $33 [Flow: branch]
	lda $0F30.w,X		; BD 30 0F ; Load $0F30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $0F40.w,X		; BD 40 0F ; Load $0F40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $0CD2.w,X		; BD D2 0C ; Load $0CD2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $1F		; 30 1F ; Branch if minus to $30, $1F [Flow: branch]
	jsl $06E496.l		; 22 96 E4 06 ; Jump to subroutine long $06E496.l [Writes: Stack Pointer] [Flow: call]
	lda $0E70.w,X		; BD 70 0E ; Load $0E70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $14		; [PATTERN: Memory clearing operation] F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	stz $0F40.w,X		; 9E 40 0F ; Store zero to $0F40.w,X [Reads: X Index]
	stz $0D50.w,X		; 9E 50 0D ; Store zero to $0D50.w,X [Reads: X Index]
	.db $80, $06		; [PATTERN: Memory clearing operation] 80 06 ; Branch always to $80, $06 [Flow: branch]
	stz $0F30.w,X		; 9E 30 0F ; Store zero to $0F30.w,X [Reads: X Index]
	stz $0D40.w,X		; 9E 40 0D ; Store zero to $0D40.w,X [Reads: X Index]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	jsr $E92C.w		; 20 2C E9 ; Jump to subroutine at $E92C.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0EA0.w,X		; 9E A0 0E ; Store zero to $0EA0.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $FF		; Opcode FF overrunning bank boundry at 037FFC. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $FF		; Opcode FF overrunning bank boundry at 037FFD. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $FF		; Opcode FF overrunning bank boundry at 037FFE. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $FF		; Opcode FF overrunning bank boundry at 037FFF. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
.ENDS
