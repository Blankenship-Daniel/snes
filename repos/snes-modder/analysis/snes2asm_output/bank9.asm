.BANK 9 SLOT 0
.ORG $0000

.SECTION "Bank9" FORCE

	ora $00.b,X		; 15 00 ; OR accumulator with memory $00.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b,X		; 15 00 ; OR accumulator with memory $00.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $050015.l,X		; FF 15 00 05 ; Subtract with carry (long,X) $050015.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F2.b		; 00 F2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0E0010.l,X		; FF 10 00 0E ; Subtract with carry (long,X) $0E0010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $020013.l,X		; FF 13 00 02 ; Subtract with carry (long,X) $020013.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8B0016.l,X		; FF 16 00 8B ; Subtract with carry (long,X) $8B0016.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $63		; B0 63 ; Branch if carry set to $B0, $63 [Flow: branch]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$9D02.w		; A9 02 9D ; Load #$9D02.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($03.b),Y		; B1 03 ; Load accumulator ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$9D01.w		; A9 01 9D ; Load #$9D01.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $229E03.l,X		; 9F 03 9E 22 ; Store accumulator (long,X) $229E03.l,X [Reads: Accumulator, X Index]
	tsb $2C9E.w		; 0C 9E 2C ; Test and set bits $2C9E.w [Reads: Accumulator] [Flags: Z]
	tsb $01AD.w		; 0C AD 01 ; Test and set bits $01AD.w [Reads: Accumulator] [Flags: Z]
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$2FA5.w		; 09 A5 2F ; Logical OR #$2FA5.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$A802.w		; 69 02 A8 ; Add #$A802.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $0F		; 80 0F ; Branch always to $80, $0F [Flow: branch]
	lda $037A.w		; AD 7A 03 ; Load $037A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	ldy #$A500.w		; A0 00 A5 ; Load #$A500.w into Y register [Writes: Y Index] [Flags: ZN]
	and $F004C9.l		; 2F C9 04 F0 ; AND accumulator with memory (long) $F004C9.l [Writes: Accumulator] [Flags: ZN]
	cop $A0.b		; 02 A0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($98.b,X)		; 01 98 ; Logical OR ($98.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $8000.w,Y		; B9 00 80 ; Load $8000.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $8002.w,Y		; B9 02 80 ; Load $8002.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8018.w,Y		; 79 18 80 ; Add $8018.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $038A.w,X		; 9D 8A 03 ; Store accumulator to $038A.w,X [Reads: Accumulator, X Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $038F.w,X		; 9D 8F 03 ; Store accumulator to $038F.w,X [Reads: Accumulator, X Index]
	.db $82, $34, $00		; 82 34 00 ; Branch always long to $82, $34, $00 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldx #$9D00.w		; A2 00 9D ; Load #$9D00.w into X register [Writes: X Index] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $AADA.w		; 0C DA AA ; Test and set bits $AADA.w [Reads: Accumulator] [Flags: Z]
	lda $08806F.l,X		; BF 6F 80 08 ; Load long $08806F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C90.w,X		; 9D 90 0C ; Store accumulator to $0C90.w,X [Reads: Accumulator, X Index]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C7C.w,X		; 9D 7C 0C ; Store accumulator to $0C7C.w,X [Reads: Accumulator, X Index]
	lda $0476.w		; AD 76 04 ; Load $0476.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03CA.w,X		; 9D CA 03 ; Store accumulator to $03CA.w,X [Reads: Accumulator, X Index]
	stz $0280.w,X		; 9E 80 02 ; Store zero to $0280.w,X [Reads: X Index]
.ACCU 16
	rep #$20		; C2 20
	lda #$2162.w		; A9 62 21 ; Load #$2162.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$0938.w		; A9 38 09 ; Load #$0938.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $AD06.w		; 20 06 AD ; Jump to subroutine at $AD06.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $2D		; B0 2D ; Branch if carry set to $B0, $2D [Flow: branch]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$F8.b		; A9 F8 ; Load #$F8.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $C6, $FF		; 82 C6 FF ; Branch always long to $82, $C6, $FF [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	trb $0C00.w		; 1C 00 0C ; Test and reset bits $0C00.w [Reads: Accumulator] [Flags: Z]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000016.l,X		; FF 16 00 00 ; Subtract with carry (long,X) $000016.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $D6		; B0 D6 ; Branch if carry set to $B0, $D6 [Flow: branch]
	lda $7EF343.l		; AF 43 F3 7E ; Load long $7EF343.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7EF343.l		; 8F 43 F3 7E ; Store accumulator (long) $7EF343.l [Reads: Accumulator]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	phx		; [PATTERN: Memory clearing operation] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0DDB7F.l		; 22 7F DB 0D ; Jump to subroutine long $0DDB7F.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	stz $03EA.w,X		; 9E EA 03 ; Store zero to $03EA.w,X [Reads: X Index]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	stz $0C5E.w,X		; [PATTERN: Memory clearing operation] 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	stz $03C2.w,X		; 9E C2 03 ; Store zero to $03C2.w,X [Reads: X Index]
	stz $0385.w,X		; 9E 85 03 ; Store zero to $0385.w,X [Reads: X Index]
	lda $089543.l		; AF 43 95 08 ; Load long $089543.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03C0.w,X		; 9D C0 03 ; Store accumulator to $03C0.w,X [Reads: Accumulator, X Index]
	stz $029E.w,X		; 9E 9E 02 ; Store zero to $029E.w,X [Reads: X Index]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	lda $2F.b		; [PATTERN: Memory clearing operation] A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	stz $03D5.w,X		; 9E D5 03 ; Store zero to $03D5.w,X [Reads: X Index]
	stz $03D2.w,X		; 9E D2 03 ; Store zero to $03D2.w,X [Reads: X Index]
	stz $03E1.w,X		; 9E E1 03 ; Store zero to $03E1.w,X [Reads: X Index]
	jsl $099E44.l		; 22 44 9E 09 ; Jump to subroutine long $099E44.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $18		; 90 18 ; Branch if carry clear to $90, $18 [Flow: branch]
	ldy $2F.b		; A4 2F ; Load $2F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $810F.w,Y		; 79 0F 81 ; Add $810F.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8117.w,Y		; 79 17 81 ; Add $8117.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	ldy $2F.b		; A4 2F ; Load $2F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $80FF.w,Y		; 79 FF 80 ; Add $80FF.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8107.w,Y		; 79 07 81 ; Add $8107.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	.db $82, $12, $FF		; 82 12 FF ; Branch always long to $82, $12, $FF [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $3018.w		; 20 18 30 ; Jump to subroutine at $3018.w [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	jsr $0360.w		; 20 60 03 ; Jump to subroutine at $0360.w [Writes: Stack Pointer] [Flow: call]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0A.b		; 05 0A ; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: ZNC]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $F6.b,S		; 03 F6 ; OR accumulator with stack relative $F6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $F7FFF8.l,X		; FF F8 FF F7 ; Subtract with carry (long,X) $F7FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F6FFF7.l,X		; FF F7 FF F6 ; Subtract with carry (long,X) $F6FFF7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F7FFF8.l,X		; FF F8 FF F7 ; Subtract with carry (long,X) $F7FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F6FFF7.l,X		; FF F7 FF F6 ; Subtract with carry (long,X) $F6FFF7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $08000B.l,X		; FF 0B 00 08 ; Subtract with carry (long,X) $08000B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0BFFF6.l,X		; FF F6 FF 0B ; Subtract with carry (long,X) $0BFFF6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $06FFF0.l,X		; FF F0 FF 06 ; Subtract with carry (long,X) $06FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F80008.l,X		; FF 08 00 F8 ; Subtract with carry (long,X) $F80008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $000008.l,X		; FF 08 00 00 ; Subtract with carry (long,X) $000008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080008.l,X		; FF 08 00 08 ; Subtract with carry (long,X) $080008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8BFFF8.l,X		; FF F8 FF 8B ; Subtract with carry (long,X) $8BFFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; [PATTERN: Memory clearing operation] 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	.db $82, $29, $01		; 82 29 01 ; Branch always long to $82, $29, $01 [Flow: branch]
	stz $03B1.w,X		; 9E B1 03 ; Store zero to $03B1.w,X [Reads: X Index]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	stz $0380.w,X		; [PATTERN: Memory clearing operation] 9E 80 03 ; Store zero to $0380.w,X [Reads: X Index]
	stz $029E.w,X		; 9E 9E 02 ; Store zero to $029E.w,X [Reads: X Index]
	sta $0385.w,X		; 9D 85 03 ; Store accumulator to $0385.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $035F.w		; 8D 5F 03 ; Store accumulator to $035F.w [Reads: Accumulator]
	lda $7EF341.l		; AF 41 F3 7E ; Load long $7EF341.l into accumulator [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0394.w,X		; 9D 94 03 ; Store accumulator to $0394.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $81B7.w,Y		; B9 B7 81 ; Load $81B7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	lda $81B9.w,Y		; B9 B9 81 ; Load $81B9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	ldy #$A500.w		; A0 00 A5 ; Load #$A500.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	tsb $07F0.w		; 0C F0 07 ; Test and set bits $07F0.w [Reads: Accumulator] [Flags: Z]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	lda $0394.w,X		; BD 94 03 ; Load $0394.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $81B3.w,Y		; B9 B3 81 ; Load $81B3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $03C5.w,X		; 9D C5 03 ; Store accumulator to $03C5.w,X [Reads: Accumulator, X Index]
	sty $72.b		; 84 72 ; Store Y register to $72.b [Reads: Y Index]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $81BB.w,Y		; B9 BB 81 ; Load $81BB.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	stz $039D.w		; 9C 9D 03 ; Store zero to $039D.w
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	ldy #$BD00.w		; A0 00 BD ; Load #$BD00.w into Y register [Writes: Y Index] [Flags: ZN]
	jsl $01300C.l		; 22 0C 30 01 ; Jump to subroutine long $01300C.l [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	lda $81BB.w,Y		; B9 BB 81 ; Load $81BB.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $039D.w		; 8D 9D 03 ; Store accumulator to $039D.w [Reads: Accumulator]
	stz $03A9.w,X		; 9E A9 03 ; Store zero to $03A9.w,X [Reads: X Index]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $28		; F0 28 ; Branch if equal to $F0, $28 [Flow: branch]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	inc $03A9.w,X		; FE A9 03 ; Increment memory $03A9.w,X [Reads: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	ldy #$BD02.w		; A0 02 BD ; Load #$BD02.w into Y register [Writes: Y Index] [Flags: ZN]
	bit $300C.w		; 2C 0C 30 ; Test bits $300C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	cop $A0.b		; 02 A0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $98.b,S		; 03 98 ; OR accumulator with stack relative $98.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	lda $81BB.w,Y		; B9 BB 81 ; Load $81BB.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $039D.w		; 0D 9D 03 ; Logical OR $039D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $039D.w		; 8D 9D 03 ; Store accumulator to $039D.w [Reads: Accumulator]
	ldy #$B907.w		; A0 07 B9 ; Load #$B907.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $01C581.l,X		; BF 81 C5 01 ; Load long $01C581.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $F6		; 10 F6 ; Branch if plus to $10, $F6 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $81C7.w,Y		; B9 C7 81 ; Load $81C7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $03A4.w,X		; 9D A4 03 ; Store accumulator to $03A4.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sta $03CF.w,X		; 9D CF 03 ; Store accumulator to $03CF.w,X [Reads: Accumulator, X Index]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	inc $03B1.w,X		; FE B1 03 ; Increment memory $03B1.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $0C		; 80 0C ; Branch always to $80, $0C [Flow: branch]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy $2F.b		; A4 2F ; Load $2F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	jsl $099DD3.l		; 22 D3 9D 09 ; Jump to subroutine long $099DD3.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $3D		; B0 3D ; Branch if carry set to $B0, $3D [Flow: branch]
	lda $03B1.w,X		; BD B1 03 ; Load $03B1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1B		; F0 1B ; Branch if equal to $F0, $1B [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $81EF.w,Y		; 79 EF 81 ; Add $81EF.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $81FF.w,Y		; 79 FF 81 ; Add $81FF.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $18, $00		; 82 18 00 ; Branch always long to $82, $18, $00 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $81CF.w,Y		; 79 CF 81 ; Add $81CF.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $81DF.w,Y		; 79 DF 81 ; Add $81DF.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $80, $FD		; [PATTERN: Memory clearing operation] 82 80 FD ; Branch always long to $82, $80, $FD [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	stz $035F.w		; 9C 5F 03 ; Store zero to $035F.w
	lda $03E4.w,X		; BD E4 03 ; Load $03E4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	jsl $0DBB5E.l		; 22 5E BB 0D ; Jump to subroutine long $0DBB5E.l [Writes: Stack Pointer] [Flow: call]
	ora #$05.b		; 09 05 ; Logical OR #$05.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	jsl $0DBB5E.l		; 22 5E BB 0D ; Jump to subroutine long $0DBB5E.l [Writes: Stack Pointer] [Flow: call]
	ora #$06.b		; 09 06 ; Logical OR #$06.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	jsl $099478.l		; 22 78 94 09 ; Jump to subroutine long $099478.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	jsr ($FBFC.w,X)		; FC FC FB ; Jump to subroutine indirect indexed ($FBFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	jsr ($FCFC.w,X)		; FC FC FC ; Jump to subroutine indirect indexed ($FCFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $FCFC.w,X		; FE FC FC ; Increment memory $FCFC.w,X [Reads: X Index] [Flags: ZN]
	jsr ($FCFC.w,X)		; FC FC FC ; Jump to subroutine indirect indexed ($FCFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($FCFC.w,X)		; FC FC FC ; Jump to subroutine indirect indexed ($FCFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($FCFC.w,X)		; FC FC FC ; Jump to subroutine indirect indexed ($FCFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($FCFC.w,X)		; FC FC FC ; Jump to subroutine indirect indexed ($FCFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($FCFC.w,X)		; FC FC FC ; Jump to subroutine indirect indexed ($FCFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($FCFC.w,X)		; FC FC FC ; Jump to subroutine indirect indexed ($FCFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($FBFC.w,X)		; FC FC FB ; Jump to subroutine indirect indexed ($FBFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($FCFC.w,X)		; FC FC FC ; Jump to subroutine indirect indexed ($FCFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($FCFC.w,X)		; FC FC FC ; Jump to subroutine indirect indexed ($FCFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $FCFC.w,X		; FE FC FC ; Increment memory $FCFC.w,X [Reads: X Index] [Flags: ZN]
	jsr ($FCFC.w,X)		; FC FC FC ; Jump to subroutine indirect indexed ($FCFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($FCFC.w,X)		; FC FC FC ; Jump to subroutine indirect indexed ($FCFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($FEFE.w,X)		; FC FE FE ; Jump to subroutine indirect indexed ($FEFE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $FCFC.w,X		; FE FC FC ; Increment memory $FCFC.w,X [Reads: X Index] [Flags: ZN]
	jsr ($FCFC.w,X)		; FC FC FC ; Jump to subroutine indirect indexed ($FCFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($FCFC.w,X)		; FC FC FC ; Jump to subroutine indirect indexed ($FCFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($FCFC.w,X)		; FC FC FC ; Jump to subroutine indirect indexed ($FCFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $FCFE.w,X		; FE FE FC ; Increment memory $FCFE.w,X [Reads: X Index] [Flags: ZN]
	inc $FCFC.w,X		; FE FC FC ; Increment memory $FCFC.w,X [Reads: X Index] [Flags: ZN]
	jsr ($FCFB.w,X)		; FC FB FC ; Jump to subroutine indirect indexed ($FCFB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($0404.w,X)		; FC 04 04 ; Jump to subroutine indirect indexed ($0404.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $18.b		; 06 18 ; Arithmetic shift left $18.b [Reads: Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $2E20.w		; 2D 20 2E ; Logical AND $2E20.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $10.b		; 05 10 ; Logical OR $10.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $1A1B.w		; 2C 1B 1A ; Test bits $1A1B.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	trb $1914.w		; 1C 14 19 ; Test and reset bits $1914.w [Reads: Accumulator] [Flags: Z]
	tsb $1D07.w		; 0C 07 1D ; Test and set bits $1D07.w [Reads: Accumulator] [Flags: Z]
	and $121507.l		; 2F 07 15 12 ; AND accumulator with memory (long) $121507.l [Writes: Accumulator] [Flags: ZN]
	ora $0E0D.w		; 0D 0D 0E ; Logical OR $0E0D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($17.b),Y		; 11 17 ; OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and [$04.b]		; 27 04 ; AND accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0F.b		; 04 0F ; Test and set bits $0F.b [Reads: Accumulator] [Flags: Z]
	asl $03.b,X		; 16 03 ; Arithmetic shift left $03.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($01.b,S),Y		; 13 01 ; OR accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $0010.w,X		; 1E 10 00 ; Arithmetic shift left $0010.w,X [Reads: X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $242421.l		; 22 21 24 24 ; Jump to subroutine long $242421.l [Writes: Stack Pointer] [Flow: call]
	bit $23.b		; 24 23 ; Test bits $23.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and #$2A.b		; 29 2A ; Logical AND #$2A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $032B.w		; 2C 2B 03 ; Test bits $032B.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora $34.b,S		; 03 34 ; OR accumulator with stack relative $34.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $31.b,X		; 35 31 ; Logical AND $31.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($02.b,S),Y		; 33 02 ; AND accumulator (stack relative indirect indexed) ($02.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($36.b)		; 32 36 ; AND accumulator with memory (indirect) ($36.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$2C.b],Y		; 37 2C ; AND accumulator with memory (long indexed) [$2C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF.b		; 05 FF ; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: ZNC]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $05.b		; 02 05 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $59F3.w,Y		; 59 F3 59 ; Exclusive OR accumulator with memory $59F3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($59.b,S),Y		; F3 59 ; Subtract with carry (stack relative indirect indexed) ($59.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($59.b,S),Y		; F3 59 ; Subtract with carry (stack relative indirect indexed) ($59.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($5A.b,S),Y		; F3 5A ; Subtract with carry (stack relative indirect indexed) ($5A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($5A.b,S),Y		; F3 5A ; Subtract with carry (stack relative indirect indexed) ($5A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($5A.b,S),Y		; F3 5A ; Subtract with carry (stack relative indirect indexed) ($5A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($45.b,S),Y		; F3 45 ; Subtract with carry (stack relative indirect indexed) ($45.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($46.b,S),Y		; F3 46 ; Subtract with carry (stack relative indirect indexed) ($46.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($4B.b,S),Y		; F3 4B ; Subtract with carry (stack relative indirect indexed) ($4B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($42.b,S),Y		; F3 42 ; Subtract with carry (stack relative indirect indexed) ($42.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($40.b,S),Y		; F3 40 ; Subtract with carry (stack relative indirect indexed) ($40.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($41.b,S),Y		; F3 41 ; Subtract with carry (stack relative indirect indexed) ($41.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($44.b,S),Y		; F3 44 ; Subtract with carry (stack relative indirect indexed) ($44.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($5C.b,S),Y		; F3 5C ; Subtract with carry (stack relative indirect indexed) ($5C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($47.b,S),Y		; F3 47 ; Subtract with carry (stack relative indirect indexed) ($47.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($48.b,S),Y		; F3 48 ; Subtract with carry (stack relative indirect indexed) ($48.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($49.b,S),Y		; F3 49 ; Subtract with carry (stack relative indirect indexed) ($49.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($4A.b,S),Y		; F3 4A ; Subtract with carry (stack relative indirect indexed) ($4A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($4C.b,S),Y		; F3 4C ; Subtract with carry (stack relative indirect indexed) ($4C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($4C.b,S),Y		; F3 4C ; Subtract with carry (stack relative indirect indexed) ($4C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($50.b,S),Y		; F3 50 ; Subtract with carry (stack relative indirect indexed) ($50.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($5C.b,S),Y		; F3 5C ; Subtract with carry (stack relative indirect indexed) ($5C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($6B.b,S),Y		; F3 6B ; Subtract with carry (stack relative indirect indexed) ($6B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($51.b,S),Y		; F3 51 ; Subtract with carry (stack relative indirect indexed) ($51.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($52.b,S),Y		; F3 52 ; Subtract with carry (stack relative indirect indexed) ($52.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($53.b,S),Y		; F3 53 ; Subtract with carry (stack relative indirect indexed) ($53.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($54.b,S),Y		; F3 54 ; Subtract with carry (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($54.b,S),Y		; F3 54 ; Subtract with carry (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($4E.b,S),Y		; F3 4E ; Subtract with carry (stack relative indirect indexed) ($4E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($56.b,S),Y		; F3 56 ; Subtract with carry (stack relative indirect indexed) ($56.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($57.b,S),Y		; F3 57 ; Subtract with carry (stack relative indirect indexed) ($57.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($7A.b,S),Y		; F3 7A ; Subtract with carry (stack relative indirect indexed) ($7A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($4D.b,S),Y		; F3 4D ; Subtract with carry (stack relative indirect indexed) ($4D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($5B.b,S),Y		; F3 5B ; Subtract with carry (stack relative indirect indexed) ($5B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($5B.b,S),Y		; F3 5B ; Subtract with carry (stack relative indirect indexed) ($5B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($6F.b,S),Y		; F3 6F ; Subtract with carry (stack relative indirect indexed) ($6F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($64.b,S),Y		; F3 64 ; Subtract with carry (stack relative indirect indexed) ($64.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($6C.b,S),Y		; F3 6C ; Subtract with carry (stack relative indirect indexed) ($6C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($75.b,S),Y		; F3 75 ; Subtract with carry (stack relative indirect indexed) ($75.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($75.b,S),Y		; F3 75 ; Subtract with carry (stack relative indirect indexed) ($75.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($44.b,S),Y		; F3 44 ; Subtract with carry (stack relative indirect indexed) ($44.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($41.b,S),Y		; F3 41 ; Subtract with carry (stack relative indirect indexed) ($41.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($5C.b,S),Y		; F3 5C ; Subtract with carry (stack relative indirect indexed) ($5C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($5C.b,S),Y		; F3 5C ; Subtract with carry (stack relative indirect indexed) ($5C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($5C.b,S),Y		; F3 5C ; Subtract with carry (stack relative indirect indexed) ($5C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($6D.b,S),Y		; F3 6D ; Subtract with carry (stack relative indirect indexed) ($6D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($6E.b,S),Y		; F3 6E ; Subtract with carry (stack relative indirect indexed) ($6E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($6E.b,S),Y		; F3 6E ; Subtract with carry (stack relative indirect indexed) ($6E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($75.b,S),Y		; F3 75 ; Subtract with carry (stack relative indirect indexed) ($75.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($66.b,S),Y		; F3 66 ; Subtract with carry (stack relative indirect indexed) ($66.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($68.b,S),Y		; F3 68 ; Subtract with carry (stack relative indirect indexed) ($68.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($60.b,S),Y		; F3 60 ; Subtract with carry (stack relative indirect indexed) ($60.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($60.b,S),Y		; F3 60 ; Subtract with carry (stack relative indirect indexed) ($60.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($60.b,S),Y		; F3 60 ; Subtract with carry (stack relative indirect indexed) ($60.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($74.b,S),Y		; F3 74 ; Subtract with carry (stack relative indirect indexed) ($74.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($74.b,S),Y		; F3 74 ; Subtract with carry (stack relative indirect indexed) ($74.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($74.b,S),Y		; F3 74 ; Subtract with carry (stack relative indirect indexed) ($74.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($40.b,S),Y		; F3 40 ; Subtract with carry (stack relative indirect indexed) ($40.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($40.b,S),Y		; F3 40 ; Subtract with carry (stack relative indirect indexed) ($40.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($5C.b,S),Y		; F3 5C ; Subtract with carry (stack relative indirect indexed) ($5C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($5C.b,S),Y		; F3 5C ; Subtract with carry (stack relative indirect indexed) ($5C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($6C.b,S),Y		; F3 6C ; Subtract with carry (stack relative indirect indexed) ($6C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($6C.b,S),Y		; F3 6C ; Subtract with carry (stack relative indirect indexed) ($6C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($60.b,S),Y		; F3 60 ; Subtract with carry (stack relative indirect indexed) ($60.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($60.b,S),Y		; F3 60 ; Subtract with carry (stack relative indirect indexed) ($60.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($72.b,S),Y		; F3 72 ; Subtract with carry (stack relative indirect indexed) ($72.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($76.b,S),Y		; F3 76 ; Subtract with carry (stack relative indirect indexed) ($76.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($76.b,S),Y		; F3 76 ; Subtract with carry (stack relative indirect indexed) ($76.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($73.b,S),Y		; F3 73 ; Subtract with carry (stack relative indirect indexed) ($73.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($60.b,S),Y		; F3 60 ; Subtract with carry (stack relative indirect indexed) ($60.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($60.b,S),Y		; F3 60 ; Subtract with carry (stack relative indirect indexed) ($60.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($5C.b,S),Y		; F3 5C ; Subtract with carry (stack relative indirect indexed) ($5C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($59.b,S),Y		; F3 59 ; Subtract with carry (stack relative indirect indexed) ($59.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($4C.b,S),Y		; F3 4C ; Subtract with carry (stack relative indirect indexed) ($4C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($55.b,S),Y		; F3 55 ; Subtract with carry (stack relative indirect indexed) ($55.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($01.b,S),Y		; F3 01 ; Subtract with carry (stack relative indirect indexed) ($01.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $020101.l,X		; FF 01 01 02 ; Subtract with carry (long,X) $020101.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFF02.l,X		; FF 02 FF FF ; Subtract with carry (long,X) $FFFF02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	cpx $FFFF.w		; EC FF FF ; Compare $FFFF.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $FF0301.l,X		; FF 01 03 FF ; Subtract with carry (long,X) $FF0301.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $9CFFFF.l,X		; FF FF FF 9C ; Subtract with carry (long,X) $9CFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $01FF.w		; CE FF 01 ; Decrement $01FF.w [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	.db $82, $3D, $03		; 82 3D 03 ; Branch always long to $82, $3D, $03 [Flow: branch]
	lda $02E9.w		; AD E9 02 ; Load $02E9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $73.b		; A5 73 ; Load $73.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy #$AD01.w		; A0 01 AD ; Load #$AD01.w into Y register [Writes: Y Index] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cop $C9.b		; 02 C9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $02D0.w		; 20 D0 02 ; Jump to subroutine at $02D0.w [Writes: Stack Pointer] [Flow: call]
	ldy #$9802.w		; A0 02 98 ; Load #$9802.w into Y register [Writes: Y Index] [Flags: ZN]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy $02D8.w		; AC D8 02 ; Load $02D8.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	ldx #$BD08.w		; A2 08 BD ; Load #$BD08.w into X register [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sty $85.b		; 84 85 ; Store Y register to $85.b [Reads: Y Index]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$84.b		; E9 84 ; Subtract #$84.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda #$7E.b		; A9 7E ; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $8580.w,Y		; B9 80 85 ; Load $8580.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$00.b]		; 87 00 ; Store accumulator (long) [$00.b] [Reads: Accumulator, Direct Page]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $84E8.w,X		; BD E8 84 ; Load $84E8.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $84E9.w,X		; BD E9 84 ; Load $84E9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda #$7E.b		; A9 7E ; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $8580.w,Y		; B9 80 85 ; Load $8580.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	sta [$00.b]		; 87 00 ; Store accumulator (long) [$00.b] [Reads: Accumulator, Direct Page]
	cpy #$D01F.w		; C0 1F D0 ; Compare #$D01F.w with Y register [Reads: Y Index] [Flags: ZNC]
	cop $64.b		; 02 64 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $A9.b,X		; 56 A9 ; Logical shift right $A9.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tsb $C0.b		; 04 C0 ; Test and set bits $C0.b [Reads: Accumulator] [Flags: Z]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	cpy #$D01E.w		; C0 1E D0 ; Compare #$D01E.w with Y register [Reads: Y Index] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $7EF379.l		; 0F 79 F3 7E ; OR accumulator with memory (long) $7EF379.l [Writes: Accumulator] [Flags: ZN]
	sta $7EF379.l		; 8F 79 F3 7E ; Store accumulator (long) $7EF379.l [Reads: Accumulator]
	cpy #$F01B.w		; C0 1B F0 ; Compare #$F01B.w with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $C0.b		; 04 C0 ; Test and set bits $C0.b [Reads: Accumulator] [Flags: Z]
	trb $07D0.w		; 1C D0 07 ; Test and reset bits $07D0.w [Reads: Accumulator] [Flags: Z]
	jsl $1BEE1B.l		; 22 1B EE 1B ; Jump to subroutine long $1BEE1B.l [Writes: Stack Pointer] [Flow: call]
	.db $82, $0F, $01		; 82 0F 01 ; Branch always long to $82, $0F, $01 [Flow: branch]
	ldx #$C004.w		; A2 04 C0 ; Load #$C004.w into X register [Writes: X Index] [Flags: ZN]
	and [$F0.b],Y		; 37 F0 ; AND accumulator with memory (long indexed) [$F0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $01A2.w		; 0C A2 01 ; Test and set bits $01A2.w [Reads: Accumulator] [Flags: Z]
	cpy #$F038.w		; C0 38 F0 ; Compare #$F038.w with Y register [Reads: Y Index] [Flags: ZNC]
	asl $A2.b		; 06 A2 ; Arithmetic shift left $A2.b [Reads: Direct Page] [Flags: ZNC]
	cop $C0.b		; 02 C0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $14D0.w,Y		; 39 D0 14 ; AND accumulator with memory $14D0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$00.b]		; 87 00 ; Store accumulator (long) [$00.b] [Reads: Accumulator, Direct Page]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3C7.l		; 8F C7 F3 7E ; Store accumulator (long) $7EF3C7.l [Reads: Accumulator]
	cpy #$D022.w		; C0 22 D0 ; Compare #$D022.w with Y register [Reads: Y Index] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta [$00.b]		; 87 00 ; Store accumulator (long) [$00.b] [Reads: Accumulator, Direct Page]
	.db $80, $C9		; 80 C9 ; Branch always to $80, $C9 [Flow: branch]
	cpy #$F025.w		; C0 25 F0 ; Compare #$F025.w with Y register [Reads: Y Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cpy #$F032.w		; C0 32 F0 ; Compare #$F032.w with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $C0.b		; 04 C0 ; Test and set bits $C0.b [Reads: Accumulator] [Flags: Z]
	and ($D0.b,S),Y		; 33 D0 ; AND accumulator (stack relative indirect indexed) ($D0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($AE.b),Y		; 11 AE ; OR accumulator with memory ($AE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $C204.w		; 0C 04 C2 ; Test and set bits $C204.w [Reads: Accumulator] [Flags: Z]
	jsr $CCBD.w		; 20 BD CC ; Jump to subroutine at $CCBD.w [Writes: Stack Pointer] [Flow: call]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	brk $87.b		; 00 87 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E2.b		; 00 E2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $BE82.w		; 20 82 BE ; Jump to subroutine at $BE82.w [Writes: Stack Pointer] [Flow: call]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $0AD0.w,X		; 3E D0 0A ; Rotate left $0AD0.w,X [Reads: X Index] [Flags: ZNC]
	bit $0308.w		; 2C 08 03 ; Test bits $0308.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0309.w		; 8D 09 03 ; Store accumulator to $0309.w [Reads: Accumulator]
	cpy #$D020.w		; C0 20 D0 ; Compare #$D020.w with Y register [Reads: Y Index] [Flags: ZNC]
	mvp $00,$EE		; 44 EE 00 ; Move block positive $00,$EE [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $DA.b		; 02 DA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx #$BD04.w		; A2 04 BD ; Load #$BD04.w into X register [Writes: X Index] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $07C9.w		; 0C C9 07 ; Test and set bits $07C9.w [Reads: Accumulator] [Flags: Z]
	.db $F0, $04		; [PATTERN: Memory clearing operation] F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$2C.b		; C9 2C ; Compare #$2C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $E9		; 10 E9 ; Branch if plus to $10, $E9 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $55.b		; A5 55 ; Load $55.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $22		; [PATTERN: Memory clearing operation] F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02E2.w		; 8D E2 02 ; Store accumulator to $02E2.w [Reads: Accumulator]
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	stz $55.b		; 64 55 ; Store zero to $55.b
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$A904.w		; A0 04 A9 ; Load #$A904.w into Y register [Writes: Y Index] [Flags: ZN]
	and $22.b,S		; 23 22 ; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $0991.w		; 2C 91 09 ; Test bits $0991.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora #$15.b		; 09 15 ; Logical OR #$15.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	.db $82, $68, $00		; 82 68 00 ; Branch always long to $82, $68, $00 [Flow: branch]
	cpy #$D029.w		; C0 29 D0 ; Compare #$D029.w with Y register [Reads: Y Index] [Flags: ZNC]
	asl $44AF.w		; 0E AF 44 ; Arithmetic shift left $44AF.w [Flags: ZNC]
	sbc ($7E.b,S),Y		; F3 7E ; Subtract with carry (stack relative indirect indexed) ($7E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta [$00.b]		; 87 00 ; Store accumulator (long) [$00.b] [Reads: Accumulator, Direct Page]
	.db $80, $2B		; 80 2B ; Branch always to $80, $2B [Flow: branch]
	ldx #$C001.w		; A2 01 C0 ; Load #$C001.w into X register [Writes: X Index] [Flags: ZN]
	bit $F0.b		; 24 F0 ; Test bits $F0.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora [$AD.b],Y		; 17 AD ; OR accumulator with memory (long indexed) [$AD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$02.b		; E9 02 ; Subtract #$02.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $24		; F0 24 ; Branch if equal to $F0, $24 [Flow: branch]
	cpy #$F027.w		; C0 27 F0 ; Compare #$F027.w with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $03A2.w		; 0C A2 03 ; Test and set bits $03A2.w [Reads: Accumulator] [Flags: Z]
	cpy #$F028.w		; C0 28 F0 ; Compare #$F028.w with Y register [Reads: Y Index] [Flags: ZNC]
	asl $C0.b		; 06 C0 ; Arithmetic shift left $C0.b [Reads: Direct Page] [Flags: ZNC]
	and ($D0.b),Y		; 31 D0 ; AND accumulator with memory ($D0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $A2.b,X		; 16 A2 ; Arithmetic shift left $A2.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc [$00.b]		; 67 00 ; Add with carry (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta [$00.b]		; 87 00 ; Store accumulator (long) [$00.b] [Reads: Accumulator, Direct Page]
	cmp #$63.b		; C9 63 ; Compare #$63.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$63.b		; A9 63 ; Load #$63.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta [$00.b]		; 87 00 ; Store accumulator (long) [$00.b] [Reads: Accumulator, Direct Page]
	jsl $0DDB7F.l		; 22 7F DB 0D ; Jump to subroutine long $0DDB7F.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $25		; 80 25 ; Branch always to $80, $25 [Flow: branch]
	cpy #$D017.w		; C0 17 D0 ; Compare #$D017.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora ($A7.b)		; 12 A7 ; OR accumulator with memory (indirect) ($A7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta [$00.b]		; 87 00 ; Store accumulator (long) [$00.b] [Reads: Accumulator, Direct Page]
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora #$2D.b		; 09 2D ; Logical OR #$2D.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	.db $80, $0F		; 80 0F ; Branch always to $80, $0F [Flow: branch]
	cpy #$D001.w		; C0 01 D0 ; Compare #$D001.w with Y register [Reads: Y Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $02C463.l		; 22 63 C4 02 ; Jump to subroutine long $02C463.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	jsr $893E.w		; 20 3E 89 ; Jump to subroutine at $893E.w [Writes: Stack Pointer] [Flow: call]
	ldy $02D8.w		; AC D8 02 ; Load $02D8.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $8404.w,Y		; B9 04 84 ; Load $8404.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$2D.b		; C9 2D ; Compare #$2D.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$2E.b		; C9 2E ; Compare #$2E.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	jsl $00D308.l		; 22 08 D3 00 ; Jump to subroutine long $00D308.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BED29.l		; 22 29 ED 1B ; Jump to subroutine long $1BED29.l [Writes: Stack Pointer] [Flow: call]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $00D4ED.l		; 22 ED D4 00 ; Jump to subroutine long $00D4ED.l [Writes: Stack Pointer] [Flow: call]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $02D8.w		; AD D8 02 ; Load $02D8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	jsl $00D2C8.l		; 22 C8 D2 00 ; Jump to subroutine long $00D2C8.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BED03.l		; 22 03 ED 1B ; Jump to subroutine long $1BED03.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $02D8.w		; AD D8 02 ; Load $02D8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	stz $03A4.w,X		; 9E A4 03 ; Store zero to $03A4.w,X [Reads: X Index]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$D001.w		; C0 01 D0 ; Compare #$D001.w with Y register [Reads: Y Index] [Flags: ZNC]
	and [$9D.b]		; 27 9D ; AND accumulator with memory (long) [$9D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $E9AD03.l,X		; 9F 03 AD E9 ; Store accumulator (long,X) $E9AD03.l,X [Reads: Accumulator, X Index]
	cop $C9.b		; 02 C9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $A0A9.w		; 20 A9 A0 ; Jump to subroutine at $A0A9.w [Writes: Stack Pointer] [Flow: call]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	lda #$2B.b		; A9 2B ; Load #$2B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldy #$A904.w		; A0 04 A9 ; Load #$A904.w into Y register [Writes: Y Index] [Flags: ZN]
	and $22.b,X		; 35 22 ; Logical AND $22.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($098F.w,X)		; 7C 8F 09 ; Jump indirect indexed to ($098F.w,X) [Reads: X Index] [Flow: jump]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0BF0.w,X		; 9D F0 0B ; Store accumulator to $0BF0.w,X [Reads: Accumulator, X Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldy #$AD60.w		; A0 60 AD ; Load #$AD60.w into Y register [Writes: Y Index] [Flags: ZN]
	sbc #$02.b		; E9 02 ; Subtract #$02.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$BD38.w		; A0 38 BD ; Load #$BD38.w into Y register [Writes: Y Index] [Flags: ZN]
	lsr $C90C.w,X		; 5E 0C C9 ; Logical shift right $C90C.w,X [Reads: X Index] [Flags: ZNC]
	jsr $14F0.w		; 20 F0 14 ; Jump to subroutine at $14F0.w [Writes: Stack Pointer] [Flow: call]
	cmp #$37.b		; C9 37 ; Compare #$37.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cmp #$38.b		; C9 38 ; Compare #$38.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$39.b		; C9 39 ; Compare #$39.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$26.b		; C9 26 ; Compare #$26.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	ldy #$8002.w		; A0 02 80 ; Load #$8002.w into Y register [Writes: Y Index] [Flags: ZN]
	cop $A0.b		; 02 A0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $02E9.w		; AD E9 02 ; Load $02E9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $4A		; D0 4A ; Branch if not equal to $D0, $4A [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$1F80.w		; 29 80 1F ; Logical AND #$1F80.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$007E.w		; 29 7E 00 ; Logical AND #$007E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $062F.w		; 6D 2F 06 ; Add $062F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $062D.w		; 6D 2D 06 ; Add $062D.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $836C.w,Y		; B9 6C 83 ; Load $836C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $83B8.w,Y		; B9 B8 83 ; Load $83B8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $82, $AE, $00		; 82 AE 00 ; Branch always long to $82, $AE, $00 [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $0C54.w,X		; BD 54 0C ; Load $0C54.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$D001.w		; C9 01 D0 ; Compare #$D001.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora #$8D2C.w		; 09 2C 8D ; Logical OR #$8D2C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $8001.w		; 2E 01 80 ; Rotate left $8001.w [Flags: ZNC]
	and $0C5EBD.l		; 2F BD 5E 0C ; AND accumulator with memory (long) $0C5EBD.l [Writes: Accumulator] [Flags: ZN]
	cmp #$F03E.w		; C9 3E F0 ; Compare #$F03E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cmp #$F017.w		; C9 17 F0 ; Compare #$F017.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	bit $C9.b		; 24 C9 ; Test bits $C9.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsr $0CF0.w		; 20 F0 0C ; Jump to subroutine at $0CF0.w [Writes: Stack Pointer] [Flow: call]
	cmp #$F037.w		; C9 37 F0 ; Compare #$F037.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp #$F038.w		; C9 38 F0 ; Compare #$F038.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	tsb $C9.b		; 04 C9 ; Test and set bits $C9.b [Reads: Accumulator] [Flags: Z]
	and $0BD0.w,Y		; 39 D0 0B ; AND accumulator with memory $0BD0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora #$8D13.w		; 09 13 8D ; Logical OR #$8D13.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $8001.w		; 2C 01 80 ; Test bits $8001.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora #$6722.w		; 09 22 67 ; Logical OR #$6722.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ora $0F09.w		; 0D 09 0F ; Logical OR $0F09.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$850A.w		; A9 0A 85 ; Load #$850A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cop $64.b		; 02 64 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $BC.b,S		; 03 BC ; OR accumulator with stack relative $BC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr $B90C.w,X		; 5E 0C B9 ; Logical shift right $B90C.w,X [Reads: X Index] [Flags: ZNC]
	.db $50, $84		; 50 84 ; Branch if overflow clear to $50, $84 [Flow: branch]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cpy #$D020.w		; C0 20 D0 ; Compare #$D020.w with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $64.b		; 04 64 ; Test and set bits $64.b [Reads: Accumulator] [Flags: Z]
	cop $80.b		; 02 80 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $A9.b		; 04 A9 ; Test and set bits $A9.b [Reads: Accumulator] [Flags: Z]
	asl $85.b		; 06 85 ; Arithmetic shift left $85.b [Reads: Direct Page] [Flags: ZNC]
	cop $AC.b		; 02 AC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$C002.w		; E9 02 C0 ; Subtract #$C002.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $A0.b		; 02 A0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stz $09.b		; 64 09 ; Store zero to $09.b
	cpy #$D002.w		; C0 02 D0 ; Compare #$D002.w with Y register [Reads: Y Index] [Flags: ZNC]
	asl $A9.b		; 06 A9 ; Arithmetic shift left $A9.b [Reads: Direct Page] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	dec $09.b		; C6 09 ; Decrement $09.b [Reads: Direct Page] [Flags: ZN]
	sty $04.b		; 84 04 ; Store Y register to $04.b [Reads: Y Index]
	stz $05.b		; 64 05 ; Store zero to $05.b
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda #$FFF2.w		; A9 F2 FF ; Load #$FFF2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $836C.w,Y		; B9 6C 83 ; Load $836C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $83B8.w,Y		; B9 B8 83 ; Load $83B8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $93, $F7		; 82 93 F7 ; Branch always long to $82, $93, $F7 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $2B.b,X		; 16 2B ; Arithmetic shift left $2B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $3D2D.w		; 2C 2D 3D ; Test bits $3D2D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $2E48.w,X		; 3C 48 2E ; Test bits $2E48.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $0EFF30.l		; 2F 30 FF 0E ; AND accumulator with memory (long) $0EFF30.l [Writes: Accumulator] [Flags: ZN]
	sty $0C.b		; 84 0C ; Store Y register to $0C.b [Reads: Y Index]
	ldx #$BD06.w		; A2 06 BD ; Load #$BD06.w into X register [Writes: X Index] [Flags: ZN]
	and ($89.b)		; 32 89 ; AND accumulator with memory (indirect) ($89.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $0C.b		; C5 0C ; Compare $0C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F6		; 10 F6 ; Branch if plus to $10, $F6 [Flow: branch]
	.db $80, $1E		; 80 1E ; Branch always to $80, $1E [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$02.b		; 69 02 ; Add #$02.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	ldx #$BF00.w		; A2 00 BF ; Load #$BF00.w into X register [Writes: X Index] [Flags: ZN]
	jmp $C97EF3.l		; 5C F3 7E C9 ; Jump long to $C97EF3.l [Flow: jump]
	cop $B0.b		; 02 B0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$A5.b		; 09 A5 ; Logical OR #$A5.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $5C9F.w		; 0C 9F 5C ; Test and set bits $5C9F.w [Reads: Accumulator] [Flags: Z]
	sbc ($7E.b,S),Y		; F3 7E ; Subtract with carry (stack relative indirect indexed) ($7E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $82, $32, $00		; 82 32 00 ; Branch always long to $82, $32, $00 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$D004.w		; E0 04 D0 ; Compare #$D004.w with X register [Reads: X Index] [Flags: ZNC]
	nop		; EA ; No operation
	sty $0C.b		; 84 0C ; Store Y register to $0C.b [Reads: Y Index]
	ldx #$BD04.w		; A2 04 BD ; Load #$BD04.w into X register [Writes: X Index] [Flags: ZN]
	and $C589.w,Y		; 39 89 C5 ; AND accumulator with memory $C589.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $05F0.w		; 0C F0 05 ; Test and set bits $05F0.w [Reads: Accumulator] [Flags: Z]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F6		; 10 F6 ; Branch if plus to $10, $F6 [Flow: branch]
	.db $80, $1D		; 80 1D ; Branch always to $80, $1D [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$03.b		; 69 03 ; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	ldx #$BF00.w		; A2 00 BF ; Load #$BF00.w into X register [Writes: X Index] [Flags: ZN]
	jmp $C97EF3.l		; 5C F3 7E C9 ; Jump long to $C97EF3.l [Flow: jump]
	cop $D0.b		; 02 D0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EF35C.l,X		; 9F 5C F3 7E ; Store accumulator (long,X) $7EF35C.l,X [Reads: Accumulator, X Index]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$D004.w		; E0 04 D0 ; Compare #$D004.w with X register [Reads: X Index] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc ($F3.b,S),Y		; F3 F3 ; Subtract with carry (stack relative indirect indexed) ($F3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($F3.b,S),Y		; F3 F3 ; Subtract with carry (stack relative indirect indexed) ($F3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($F4.b,S),Y		; F3 F4 ; Subtract with carry (stack relative indirect indexed) ($F4.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	pea $F3F3.w		; F4 F3 F3 ; Push absolute address $F3F3.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $F4F4.w		; F4 F4 F4 ; Push absolute address $F4F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	inc $F4.b,X		; F6 F4 ; Increment memory $F4.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	pea $F4F4.w		; F4 F4 F4 ; Push absolute address $F4F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $F4F4.w		; F4 F4 F4 ; Push absolute address $F4F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $F4F4.w		; F4 F4 F4 ; Push absolute address $F4F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $F4F4.w		; F4 F4 F4 ; Push absolute address $F4F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $F4F4.w		; F4 F4 F4 ; Push absolute address $F4F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $F4F4.w		; F4 F4 F4 ; Push absolute address $F4F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $F4F4.w		; F4 F4 F4 ; Push absolute address $F4F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sbc ($F4.b,S),Y		; F3 F4 ; Subtract with carry (stack relative indirect indexed) ($F4.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	pea $F4F4.w		; F4 F4 F4 ; Push absolute address $F4F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $F6F4.w		; F4 F4 F6 ; Push absolute address $F6F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $F4F4.w		; F4 F4 F4 ; Push absolute address $F4F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $F4F4.w		; F4 F4 F4 ; Push absolute address $F4F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $F4F4.w		; F4 F4 F4 ; Push absolute address $F4F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $F4F4.w		; F4 F4 F4 ; Push absolute address $F4F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $F4F4.w		; F4 F4 F4 ; Push absolute address $F4F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $F4F4.w		; F4 F4 F4 ; Push absolute address $F4F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $F4F4.w		; F4 F4 F4 ; Push absolute address $F4F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $F4F4.w		; F4 F4 F4 ; Push absolute address $F4F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $F4F4.w		; F4 F4 F4 ; Push absolute address $F4F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $F4F4.w		; F4 F4 F4 ; Push absolute address $F4F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sbc ($F4.b,S),Y		; F3 F4 ; Subtract with carry (stack relative indirect indexed) ($F4.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	pea $0404.w		; F4 04 04 ; Push absolute address $0404.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	stx $02D8.w		; 8E D8 02 ; Store X register to $02D8.w [Reads: X Index]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $7B		; B0 7B ; Branch if carry set to $B0, $7B [Flow: branch]
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora #$13.b		; 09 13 ; Logical OR #$13.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy $02D8.w		; AC D8 02 ; Load $02D8.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $8404.w,Y		; B9 04 84 ; Load $8404.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	jsl $00D308.l		; 22 08 D3 00 ; Jump to subroutine long $00D308.l [Writes: Stack Pointer] [Flow: call]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $00D4ED.l		; 22 ED D4 00 ; Jump to subroutine long $00D4ED.l [Writes: Stack Pointer] [Flow: call]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	jsl $00D2C8.l		; 22 C8 D2 00 ; Jump to subroutine long $00D2C8.l [Writes: Stack Pointer] [Flow: call]
	plx		; [PATTERN: Memory clearing operation] FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0308.w		; 8D 08 03 ; Store accumulator to $0308.w [Reads: Accumulator]
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	stz $2F.b		; 64 2F ; Store zero to $2F.b
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0294.w,X		; [PATTERN: Memory clearing operation] 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	lda #$D8.b		; A9 D8 ; Load #$D8.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	stz $0C2C.w,X		; 9E 2C 0C ; Store zero to $0C2C.w,X [Reads: X Index]
	stz $029E.w,X		; 9E 9E 02 ; Store zero to $029E.w,X [Reads: X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	lda $02D8.w		; AD D8 02 ; Load $02D8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $899A.w,Y		; B9 9A 89 ; Load $899A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $89E6.w,Y		; B9 E6 89 ; Load $89E6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $0B, $F6		; 82 0B F6 ; Branch always long to $82, $0B, $F6 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $10.b		; 14 10 ; Test and reset bits $10.b [Reads: Accumulator] [Flags: Z]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cpx #$E0E0.w		; E0 E0 E0 ; Compare #$E0E0.w with X register [Reads: X Index] [Flags: ZNC]
	cpx #$00E0.w		; E0 E0 00 ; Compare #$00E0.w with X register [Reads: X Index] [Flags: ZNC]
	pea $06FA.w		; F4 FA 06 ; Push absolute address $06FA.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	tsb $FBF7.w		; 0C F7 FB ; Test and set bits $FBF7.w [Reads: Accumulator] [Flags: Z]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora #$FF.b		; 09 FF ; Logical OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AB4B8B.l,X		; FF 8B 4B AB ; Subtract with carry (long,X) $AB4B8B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy #$A909.w		; A0 09 A9 ; Load #$A909.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $42, $20		; 42 20 ; Reserved instruction
.INDEX 8
	sep #$9C		; E2 9C
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	.db $80, $C6		; 80 C6 ; Branch always to $80, $C6 [Flow: branch]
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora #$13.b		; 09 13 ; Logical OR #$13.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	ldy #$35.b		; A0 35 ; Load #$35.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $8404.w,Y		; B9 04 84 ; Load $8404.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	jsl $00D4ED.l		; [PATTERN: Memory clearing operation] 22 ED D4 00 ; Jump to subroutine long $00D4ED.l [Writes: Stack Pointer] [Flow: call]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0308.w		; 8D 08 03 ; Store accumulator to $0308.w [Reads: Accumulator]
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	stz $2F.b		; 64 2F ; Store zero to $2F.b
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F586C.l,X		; 9F 6C 58 7F ; Store accumulator (long,X) $7F586C.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F9		; 10 F9 ; Branch if plus to $10, $F9 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $8ADC.w,X		; BD DC 8A ; Load $8ADC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	lda $8AD8.w,X		; BD D8 8A ; Load $8AD8.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: ZN]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F586C.l,X		; 9F 6C 58 7F ; Store accumulator (long,X) $7F586C.l,X [Reads: Accumulator, X Index]
	lda $8ABA.w,Y		; B9 BA 8A ; Load $8ABA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7F5818.l,X		; 9F 18 58 7F ; Store accumulator (long,X) $7F5818.l,X [Reads: Accumulator, X Index]
	lda $8AC4.w,Y		; B9 C4 8A ; Load $8AC4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7F5800.l,X		; 9F 00 58 7F ; Store accumulator (long,X) $7F5800.l,X [Reads: Accumulator, X Index]
	lda $8ACE.w,Y		; B9 CE 8A ; Load $8ACE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7F580C.l,X		; 9F 0C 58 7F ; Store accumulator (long,X) $7F580C.l,X [Reads: Accumulator, X Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5854.l,X		; 9F 54 58 7F ; Store accumulator (long,X) $7F5854.l,X [Reads: Accumulator, X Index]
	sta $7F58AA.l,X		; 9F AA 58 7F ; Store accumulator (long,X) $7F58AA.l,X [Reads: Accumulator, X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5860.l,X		; 9F 60 58 7F ; Store accumulator (long,X) $7F5860.l,X [Reads: Accumulator, X Index]
	lda #$35.b		; A9 35 ; Load #$35.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F587A.l,X		; 9F 7A 58 7F ; Store accumulator (long,X) $7F587A.l,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFF4.w		; 69 F4 FF ; Add #$FFF4.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F5824.l,X		; 9F 24 58 7F ; Store accumulator (long,X) $7F5824.l,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F5830.l,X		; 9F 30 58 7F ; Store accumulator (long,X) $7F5830.l,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F583C.l,X		; 9F 3C 58 7F ; Store accumulator (long,X) $7F583C.l,X [Reads: Accumulator, X Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F5848.l,X		; 9F 48 58 7F ; Store accumulator (long,X) $7F5848.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $0F.b		; C4 0F ; Compare $0F.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	.db $D0, $9D		; D0 9D ; Branch if not equal to $D0, $9D [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $37		; 10 37 ; Branch if plus to $10, $37 [Flow: branch]
	and $2638.w,Y		; 39 38 26 ; AND accumulator with memory $2638.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $806020.l		; 0F 20 60 80 ; OR accumulator with memory (long) $806020.l [Writes: Accumulator] [Flags: ZN]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $48		; 80 48 ; Branch always to $80, $48 [Flow: branch]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $4B8B00.l,X		; FF 00 8B 4B ; Subtract with carry (long,X) $4B8B00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	stx $02D8.w		; 8E D8 02 ; Store X register to $02D8.w [Reads: X Index]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $C2		; B0 C2 ; Branch if carry set to $B0, $C2 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy $02D8.w		; AC D8 02 ; Load $02D8.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $8B90.w,Y		; B9 90 8B ; Load $8B90.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	cmp $8B90.w		; CD 90 8B ; Compare $8B90.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp $8B95.w		; CD 95 8B ; Compare $8B95.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $8404.w,Y		; B9 04 84 ; Load $8404.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	jsl $00D4ED.l		; 22 ED D4 00 ; Jump to subroutine long $00D4ED.l [Writes: Stack Pointer] [Flow: call]
	plx		; [PATTERN: Memory clearing operation] FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$D0.b		; A9 D0 ; Load #$D0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	stz $0C22.w,X		; 9E 22 0C ; Store zero to $0C22.w,X [Reads: X Index]
	stz $0C2C.w,X		; 9E 2C 0C ; Store zero to $0C2C.w,X [Reads: X Index]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	ldy $02D8.w		; AC D8 02 ; Load $02D8.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $8B97.w,Y		; B9 97 8B ; Load $8B97.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $029E.w,X		; [PATTERN: Memory clearing operation] 9D 9E 02 ; Store accumulator to $029E.w,X [Reads: Accumulator, X Index]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	stz $039F.w,X		; 9E 9F 03 ; Store zero to $039F.w,X [Reads: X Index]
	stz $0385.w,X		; 9E 85 03 ; Store zero to $0385.w,X [Reads: X Index]
	lda $8BBA.w,Y		; B9 BA 8B ; Load $8BBA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0394.w,X		; 9D 94 03 ; Store accumulator to $0394.w,X [Reads: Accumulator, X Index]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02D8.w		; 8D D8 02 ; Store accumulator to $02D8.w [Reads: Accumulator]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $3A		; F0 3A ; Branch if equal to $F0, $3A [Flow: branch]
	cpy #$05.b		; C0 05 ; Compare #$05.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $36		; F0 36 ; Branch if equal to $F0, $36 [Flow: branch]
	lda $040C.w		; AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$14.b		; C9 14 ; Compare #$14.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	stz $02.b		; 64 02 ; Store zero to $02.b
	.db $82, $86, $F4		; 82 86 F4 ; Branch always long to $82, $86, $F4 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $8B9E.w,Y		; B9 9E 8B ; Load $8B9E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E8.b		; 65 E8 ; Add $E8.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $8BAC.w,Y		; B9 AC 8B ; Load $8BAC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E2.b		; 65 E2 ; Add $E2.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $6C, $F4		; 82 6C F4 ; Branch always long to $82, $6C, $F4 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $8B9E.w,Y		; B9 9E 8B ; Load $8B9E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E8.b		; 65 E8 ; Add $E8.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0000.w		; 69 00 00 ; Add #$0000.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $52, $F4		; 82 52 F4 ; Branch always long to $82, $52, $F4 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; [PATTERN: Memory clearing operation] 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $34		; B0 34 ; Branch if carry set to $B0, $34 [Flow: branch]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	stz $029E.w,X		; 9E 9E 02 ; Store zero to $029E.w,X [Reads: X Index]
	lda $08CFA6.l		; AF A6 CF 08 ; Load long $08CFA6.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$F8.b		; A0 F8 ; Load #$F8.b into Y register [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $00D4ED.l		; 22 ED D4 00 ; Jump to subroutine long $00D4ED.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda #$0A8A.w		; A9 8A 0A ; Load #$0A8A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$0490.w		; A9 90 04 ; Load #$0490.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $14, $F4		; 82 14 F4 ; Branch always long to $82, $14, $F4 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: ZN]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	cmp #$3C.b		; C9 3C ; Compare #$3C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F4		; 10 F4 ; Branch if plus to $10, $F4 [Flow: branch]
	.db $80, $0F		; 80 0F ; Branch always to $80, $0F [Flow: branch]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C4A.w,X		; 9D 4A 0C ; Store accumulator to $0C4A.w,X [Reads: Accumulator, X Index]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C7C.w,X		; 9D 7C 0C ; Store accumulator to $0C7C.w,X [Reads: Accumulator, X Index]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $F8F6.w		; 0C F6 F8 ; Test and set bits $F8F6.w [Reads: Accumulator] [Flags: Z]
	tsb $FA.b		; 04 FA ; Test and set bits $FA.b [Reads: Accumulator] [Flags: Z]
	inc $FC.b,X		; F6 FC ; Increment memory $FC.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	trb $16.b		; 14 16 ; Test and reset bits $16.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	asl $14.b,X		; 16 14 ; Arithmetic shift left $14.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $16.b		; 14 16 ; Test and reset bits $16.b [Reads: Accumulator] [Flags: Z]
	trb $16.b		; 14 16 ; Test and reset bits $16.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	.db $B0, $A3		; B0 A3 ; Branch if carry set to $B0, $A3 [Flow: branch]
	ldy #$A2.b		; A0 A2 ; Load #$A2.b into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$A8.b		; A0 A8 ; Load #$A8.b into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$A0.b		; A0 A0 ; Load #$A0.b into Y register [Writes: Y Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda ($B0.b,X)		; A1 B0 ; Load accumulator ($B0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $03.b		; 06 03 ; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $0C08.w		; 0E 08 0C ; Arithmetic shift left $0C08.w [Flags: ZNC]
	ora [$0A.b]		; 07 0A ; OR accumulator with memory (long) [$0A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $30, $12		; 30 12 ; Branch if minus to $30, $12 [Flow: branch]
	jsr $1614.w		; 20 14 16 ; Jump to subroutine at $1614.w [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsr $1814.w		; 20 14 18 ; Jump to subroutine at $1814.w [Writes: Stack Pointer] [Flow: call]
	asl $14.b,X		; 16 14 ; Arithmetic shift left $14.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jsr $4B8B.w		; 20 8B 4B ; Jump to subroutine at $4B8B.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $75		; B0 75 ; Branch if carry set to $B0, $75 [Flow: branch]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; [PATTERN: Memory clearing operation] 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0394.w,X		; 9D 94 03 ; Store accumulator to $0394.w,X [Reads: Accumulator, X Index]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	stz $039F.w,X		; 9E 9F 03 ; Store zero to $039F.w,X [Reads: X Index]
	stz $012E.w		; 9C 2E 01 ; Store zero to $012E.w
	lda #$F2.b		; A9 F2 ; Load #$F2.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	lda #$17.b		; A9 17 ; Load #$17.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F58B8.l		; 8F B8 58 7F ; Store accumulator (long) $7F58B8.l [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda #$0280.w		; A9 80 02 ; Load #$0280.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F58B6.l		; 8F B6 58 7F ; Store accumulator (long) $7F58B6.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ldx #$0B.b		; A2 0B ; Load #$0B.b into X register [Writes: X Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5800.l,X		; 9F 00 58 7F ; Store accumulator (long,X) $7F5800.l,X [Reads: Accumulator, X Index]
	lda $8CD5.w,X		; BD D5 8C ; Load $8CD5.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7F580C.l,X		; 9F 0C 58 7F ; Store accumulator (long,X) $7F580C.l,X [Reads: Accumulator, X Index]
	lda $8CE1.w,X		; BD E1 8C ; Load $8CE1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7F5818.l,X		; 9F 18 58 7F ; Store accumulator (long,X) $7F5818.l,X [Reads: Accumulator, X Index]
	lda $8CED.w,X		; BD ED 8C ; Load $8CED.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7F5824.l,X		; 9F 24 58 7F ; Store accumulator (long,X) $7F5824.l,X [Reads: Accumulator, X Index]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5830.l,X		; 9F 30 58 7F ; Store accumulator (long,X) $7F5830.l,X [Reads: Accumulator, X Index]
	lda $8CF9.w,X		; BD F9 8C ; Load $8CF9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7F583C.l,X		; 9F 3C 58 7F ; Store accumulator (long,X) $7F583C.l,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5848.l,X		; 9F 48 58 7F ; Store accumulator (long,X) $7F5848.l,X [Reads: Accumulator, X Index]
	lda $8D05.w,X		; BD 05 8D ; Load $8D05.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7F5854.l,X		; 9F 54 58 7F ; Store accumulator (long,X) $7F5854.l,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5860.l,X		; 9F 60 58 7F ; Store accumulator (long,X) $7F5860.l,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F586C.l,X		; 9F 6C 58 7F ; Store accumulator (long,X) $7F586C.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $BB		; 10 BB ; Branch if plus to $10, $BB [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9D20.w		; 20 20 9D ; Jump to subroutine at $9D20.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $38		; B0 38 ; Branch if carry set to $B0, $38 [Flow: branch]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $33		; B0 33 ; Branch if carry set to $B0, $33 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; [PATTERN: Memory clearing operation] 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda #$74.b		; A9 74 ; Load #$74.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	stz $0294.w,X		; 9E 94 02 ; Store zero to $0294.w,X [Reads: X Index]
	stz $0385.w,X		; 9E 85 03 ; Store zero to $0385.w,X [Reads: X Index]
	stz $029E.w,X		; [PATTERN: Memory clearing operation] 9E 9E 02 ; Store zero to $029E.w,X [Reads: X Index]
	stz $03A9.w,X		; 9E A9 03 ; Store zero to $03A9.w,X [Reads: X Index]
.ACCU 16
	rep #$20		; C2 20
	lda #$0788.w		; A9 88 07 ; Load #$0788.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$0200.w		; A9 00 02 ; Load #$0200.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $F3, $F2		; 82 F3 F2 ; Branch always long to $82, $F3, $F2 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$39.b		; A9 39 ; Load #$39.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C4A.w,X		; 9D 4A 0C ; Store accumulator to $0C4A.w,X [Reads: Accumulator, X Index]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$ED.b		; C9 ED ; Compare #$ED.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,Y		; 99 D0 0D ; Store accumulator to $0DD0.w,Y [Reads: Accumulator, Y Index]
	sta $02F5.w		; 8D F5 02 ; Store accumulator to $02F5.w [Reads: Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $EE		; 10 EE ; Branch if plus to $10, $EE [Flow: branch]
	jsl $07CF0A.l		; 22 0A CF 07 ; Jump to subroutine long $07CF0A.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; [PATTERN: Memory clearing operation] 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	.db $82, $48, $00		; 82 48 00 ; Branch always long to $82, $48, $00 [Flow: branch]
	stz $03EA.w,X		; 9E EA 03 ; Store zero to $03EA.w,X [Reads: X Index]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	stz $03C2.w,X		; [PATTERN: Memory clearing operation] 9E C2 03 ; Store zero to $03C2.w,X [Reads: X Index]
	stz $0385.w,X		; 9E 85 03 ; Store zero to $0385.w,X [Reads: X Index]
	lda $089544.l		; AF 44 95 08 ; Load long $089544.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $02CF.w		; AE CF 02 ; Load $02CF.w into X register [Writes: X Index] [Flags: ZN]
	lda $1A00.w,X		; BD 00 1A ; Load $1A00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $1A14.w,X		; BD 14 1A ; Load $1A14.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $1A28.w,X		; BD 28 1A ; Load $1A28.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $1A3C.w,X		; BD 3C 1A ; Load $1A3C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $77, $F2		; 82 77 F2 ; Branch always long to $82, $77, $F2 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda #$50.b		; A9 50 ; Load #$50.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0109.w		; 8D 09 01 ; Store accumulator to $0109.w [Reads: Accumulator]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $039F.w,X		; [PATTERN: Memory clearing operation] 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	stz $0385.w,X		; 9E 85 03 ; Store zero to $0385.w,X [Reads: X Index]
	lda #$05.b		; [PATTERN: Memory clearing operation] A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0394.w,X		; 9D 94 03 ; Store accumulator to $0394.w,X [Reads: Accumulator, X Index]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	stz $0380.w,X		; 9E 80 03 ; Store zero to $0380.w,X [Reads: X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; [PATTERN: Memory clearing operation] 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $AD06.w		; 20 06 AD ; Jump to subroutine at $AD06.w [Writes: Stack Pointer] [Flow: call]
	stz $029E.w,X		; 9E 9E 02 ; Store zero to $029E.w,X [Reads: X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stz $029E.w,X		; 9E 9E 02 ; Store zero to $029E.w,X [Reads: X Index]
	lda #$F0.b		; [PATTERN: Memory clearing operation] A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	stz $0380.w,X		; 9E 80 03 ; Store zero to $0380.w,X [Reads: X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $08B91C.l,X		; BF 1C B9 08 ; Load long $08B91C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $08B8F4.l,X		; BF F4 B8 08 ; Load long $08B8F4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta $03C2.w,X		; 9D C2 03 ; Store accumulator to $03C2.w,X [Reads: Accumulator, X Index]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $92D0.w,Y		; 79 D0 92 ; Add $92D0.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFEC.w		; 69 EC FF ; Add #$FFEC.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFF8.w		; 69 F8 FF ; Add #$FFF8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $92D8.w,Y		; 79 D8 92 ; Add $92D8.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $E3, $F1		; 82 E3 F1 ; Branch always long to $82, $E3, $F1 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: ZN]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$31.b		; C9 31 ; Compare #$31.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F3		; 10 F3 ; Branch if plus to $10, $F3 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $11		; B0 11 ; Branch if carry set to $B0, $11 [Flow: branch]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8B0012.l,X		; FF 12 00 8B ; Subtract with carry (long,X) $8B0012.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; [PATTERN: Memory clearing operation] AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $35		; B0 35 ; Branch if carry set to $B0, $35 [Flow: branch]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	stz $03B1.w,X		; 9E B1 03 ; Store zero to $03B1.w,X [Reads: X Index]
	lda #$17.b		; A9 17 ; Load #$17.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	ldy $2F.b		; A4 2F ; Load $2F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8F0C.w,Y		; 79 0C 8F ; Add $8F0C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8F14.w,Y		; 79 14 8F ; Add $8F14.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $AD06.w		; 20 06 AD ; Jump to subroutine at $AD06.w [Writes: Stack Pointer] [Flow: call]
	jsl $0DBB5E.l		; 22 5E BB 0D ; Jump to subroutine long $0DBB5E.l [Writes: Stack Pointer] [Flow: call]
	ora #$2A.b		; 09 2A ; Logical OR #$2A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $17		; B0 17 ; Branch if carry set to $B0, $17 [Flow: branch]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $49, $F1		; 82 49 F1 ; Branch always long to $82, $49, $F1 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $24		; B0 24 ; Branch if carry set to $B0, $24 [Flow: branch]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFF8.w		; 69 F8 FF ; Add #$FFF8.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $1B, $F1		; 82 1B F1 ; Branch always long to $82, $1B, $F1 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: ZN]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	stx $72.b		; 86 72 ; Store X register to $72.b [Reads: X Index]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $42		; B0 42 ; Branch if carry set to $B0, $42 [Flow: branch]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	ldy $2F.b		; A4 2F ; Load $2F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0014.w		; 69 14 00 ; Add #$0014.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jmp $80C3.w		; 4C C3 80 ; Jump to $80C3.w [Flow: jump]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8FAA.w,Y		; 79 AA 8F ; Add $8FAA.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8FB2.w,Y		; 79 B2 8F ; Add $8FB2.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jmp $80C3.w		; 4C C3 80 ; Jump to $80C3.w [Flow: jump]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	nop		; EA ; No operation
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	rol $D6.b		; 26 D6 ; Rotate left $D6.b [Reads: Direct Page] [Flags: ZNC]
	asl $00.b,X		; 16 00 ; Arithmetic shift left $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	asl $2A.b,X		; 16 2A ; Arithmetic shift left $2A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $40.b,X		; 16 40 ; Arithmetic shift left $40.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $26.b,X		; D6 26 ; Decrement memory $26.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	nop		; EA ; No operation
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	nop		; EA ; No operation
	dec $DA.b,X		; D6 DA ; Decrement memory $DA.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	dec $EA.b,X		; D6 EA ; Decrement memory $EA.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldx #$0A.b		; A2 0A ; Load #$0A.b into X register [Writes: X Index] [Flags: ZN]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $F6		; D0 F6 ; Branch if not equal to $D0, $F6 [Flow: branch]
	ldx #$FF.b		; A2 FF ; Load #$FF.b into X register [Writes: X Index] [Flags: ZN]
	.db $82, $41, $00		; 82 41 00 ; Branch always long to $82, $41, $00 [Flow: branch]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C4A.w,X		; 9D 4A 0C ; Store accumulator to $0C4A.w,X [Reads: Accumulator, X Index]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C7C.w,X		; 9D 7C 0C ; Store accumulator to $0C7C.w,X [Reads: Accumulator, X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F0040.l,X		; 9F 40 00 7F ; Store accumulator (long,X) $7F0040.l,X [Reads: Accumulator, X Index]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9011.w,Y		; B9 11 90 ; Load $9011.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	lda $9012.w,Y		; B9 12 90 ; Load $9012.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $04.b		; A6 04 ; Load $04.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7F0020.l,X		; BF 20 00 7F ; Load long $7F0020.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7F0030.l,X		; BF 30 00 7F ; Load long $7F0030.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $3D, $F0		; 82 3D F0 ; Branch always long to $82, $3D, $F0 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $D0, $30		; D0 30 ; Branch if not equal to $D0, $30 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $30		; D0 30 ; Branch if not equal to $D0, $30 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $040003.l,X		; FF 03 00 04 ; Subtract with carry (long,X) $040003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	stx $76.b		; 86 76 ; Store X register to $76.b [Reads: X Index]
	jsr $9D20.w		; 20 20 9D ; Jump to subroutine at $9D20.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	.db $82, $4E, $00		; 82 4E 00 ; Branch always long to $82, $4E, $00 [Flow: branch]
	jsr $9D36.w		; 20 36 9D ; Jump to subroutine at $9D36.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	.db $82, $46, $00		; 82 46 00 ; Branch always long to $82, $46, $00 [Flow: branch]
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora #$07.b		; 09 07 ; Logical OR #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	stz $03C5.w,X		; 9E C5 03 ; Store zero to $03C5.w,X [Reads: X Index]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	lda $76.b		; A5 76 ; Load $76.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	lda $9088.w,Y		; B9 88 90 ; Load $9088.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	lda $908C.w,Y		; B9 8C 90 ; Load $908C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	ldy $76.b		; A4 76 ; Load $76.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9094.w,Y		; 79 94 90 ; Add $9094.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $74.b		; A5 74 ; Load $74.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $909C.w,Y		; 79 9C 90 ; Add $909C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $AD06.w		; 20 06 AD ; Jump to subroutine at $AD06.w [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $53		; B0 53 ; Branch if carry set to $B0, $53 [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $4B.b		; 85 4B ; Store accumulator to $4B.b [Reads: Accumulator]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	lda $02E0.w		; AD E0 02 ; Load $02E0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora #$14.b		; 09 14 ; Logical OR #$14.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora #$15.b		; 09 15 ; Logical OR #$15.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $29		; B0 29 ; Branch if carry set to $B0, $29 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C54.w,X		; [PATTERN: Memory clearing operation] 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	sta $02E1.w		; 8D E1 02 ; Store accumulator to $02E1.w [Reads: Accumulator]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	stz $67.b		; 64 67 ; Store zero to $67.b
	stz $26.b		; 64 26 ; Store zero to $26.b
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $66, $EF		; 82 66 EF ; Branch always long to $82, $66, $EF [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $5A		; B0 5A ; Branch if carry set to $B0, $5A [Flow: branch]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora #$14.b		; 09 14 ; Logical OR #$14.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	jsl $0DBB67.l		; [PATTERN: Memory clearing operation] 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora #$15.b		; 09 15 ; Logical OR #$15.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02F9.w		; 8D F9 02 ; Store accumulator to $02F9.w [Reads: Accumulator]
	ldy $02CF.w		; AC CF 02 ; Load $02CF.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $1A00.w,Y		; B9 00 1A ; Load $1A00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $1A14.w,Y		; B9 14 1A ; Load $1A14.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $1A28.w,Y		; B9 28 1A ; Load $1A28.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $1A3C.w,Y		; B9 3C 1A ; Load $1A3C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0000.w		; 69 00 00 ; Add #$0000.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $02, $EF		; 82 02 EF ; Branch always long to $82, $02, $EF [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $2D		; F0 2D ; Branch if equal to $F0, $2D [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$3F.b		; A9 3F ; Load #$3F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $24		; B0 24 ; Branch if carry set to $B0, $24 [Flow: branch]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora #$15.b		; 09 15 ; Logical OR #$15.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $74.b		; A5 74 ; Load $74.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFFE.w		; 69 FE FF ; Add #$FFFE.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jmp $80C3.w		; 4C C3 80 ; Jump to $80C3.w [Flow: jump]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; [PATTERN: Memory clearing operation] 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	.db $82, $A3, $00		; 82 A3 00 ; Branch always long to $82, $A3, $00 [Flow: branch]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	stz $03C2.w,X		; 9E C2 03 ; Store zero to $03C2.w,X [Reads: X Index]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0112.w		; 8D 12 01 ; Store accumulator to $0112.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5808.l		; 8F 08 58 7F ; Store accumulator (long) $7F5808.l [Reads: Accumulator]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AAA.w		; 8D AA 0A ; Store accumulator to $0AAA.w [Reads: Accumulator]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5812.l		; 8F 12 58 7F ; Store accumulator (long) $7F5812.l [Reads: Accumulator]
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora #$26.b		; 09 26 ; Logical OR #$26.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5800.l		; 8F 00 58 7F ; Store accumulator (long) $7F5800.l [Reads: Accumulator]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5801.l		; 8F 01 58 7F ; Store accumulator (long) $7F5801.l [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5802.l		; 8F 02 58 7F ; Store accumulator (long) $7F5802.l [Reads: Accumulator]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5803.l		; 8F 03 58 7F ; Store accumulator (long) $7F5803.l [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5804.l		; 8F 04 58 7F ; Store accumulator (long) $7F5804.l [Reads: Accumulator]
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5805.l		; 8F 05 58 7F ; Store accumulator (long) $7F5805.l [Reads: Accumulator]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5806.l		; 8F 06 58 7F ; Store accumulator (long) $7F5806.l [Reads: Accumulator]
	lda #$38.b		; A9 38 ; Load #$38.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5807.l		; 8F 07 58 7F ; Store accumulator (long) $7F5807.l [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7F5813.l		; 8F 13 58 7F ; Store accumulator (long) $7F5813.l [Reads: Accumulator]
	lda #$FFF0.w		; A9 F0 FF ; Load #$FFF0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E8.b		; 65 E8 ; Add $E8.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	and #$00F0.w		; 29 F0 00 ; Logical AND #$00F0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F580C.l		; 8F 0C 58 7F ; Store accumulator (long) $7F580C.l [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $7F5815.l		; 8F 15 58 7F ; Store accumulator (long) $7F5815.l [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7F580E.l		; 8F 0E 58 7F ; Store accumulator (long) $7F580E.l [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $7F580A.l		; 8F 0A 58 7F ; Store accumulator (long) $7F580A.l [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0024.w		; 69 24 00 ; Add #$0024.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7F5810.l		; 8F 10 58 7F ; Store accumulator (long) $7F5810.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $19, $EE		; 82 19 EE ; Branch always long to $82, $19, $EE [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$3B.b		; A9 3B ; Load #$3B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $0D		; B0 0D ; Branch if carry set to $B0, $0D [Flow: branch]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00001C.l,X		; FF 1C 00 00 ; Subtract with carry (long,X) $00001C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F4FFFE.l,X		; FF FE FF F4 ; Subtract with carry (long,X) $F4FFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $8B000C.l,X		; FF 0C 00 8B ; Subtract with carry (long,X) $8B000C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; [PATTERN: Memory clearing operation] 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	.db $82, $88, $00		; 82 88 00 ; Branch always long to $82, $88, $00 [Flow: branch]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	stz $029E.w,X		; 9E 9E 02 ; Store zero to $029E.w,X [Reads: X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda #$50.b		; A9 50 ; Load #$50.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0109.w		; 8D 09 01 ; Store accumulator to $0109.w [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy $2F.b		; A4 2F ; Load $2F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $08B91C.l,X		; BF 1C B9 08 ; Load long $08B91C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $08B8F4.l,X		; BF F4 B8 08 ; Load long $08B8F4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta $03C2.w,X		; 9D C2 03 ; Store accumulator to $03C2.w,X [Reads: Accumulator, X Index]
	ldy $2F.b		; A4 2F ; Load $2F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $92E0.w,Y		; 79 E0 92 ; Add $92E0.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $92E8.w,Y		; 79 E8 92 ; Add $92E8.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	jsl $08923B.l		; 22 3B 92 08 ; Jump to subroutine long $08923B.l [Writes: Stack Pointer] [Flow: call]
	lda $03E4.w,X		; BD E4 03 ; Load $03E4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0333.w		; 8D 33 03 ; Store accumulator to $0333.w [Reads: Accumulator]
	lda $0304.w		; AD 04 03 ; Load $0304.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	ldy $2F.b		; A4 2F ; Load $2F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $92D0.w,Y		; 79 D0 92 ; Add $92D0.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $92D8.w,Y		; 79 D8 92 ; Add $92D8.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora #$0D.b		; 09 0D ; Logical OR #$0D.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	jmp $80C3.w		; 4C C3 80 ; Jump to $80C3.w [Flow: jump]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr ($20FF.w,X)		; FC FF 20 ; Jump to subroutine indirect indexed ($20FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8B001D.l,X		; FF 1D 00 8B ; Subtract with carry (long,X) $8B001D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $23		; B0 23 ; Branch if carry set to $B0, $23 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	ldy $2F.b		; A4 2F ; Load $2F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9385.w,Y		; 79 85 93 ; Add $9385.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $938D.w,Y		; 79 8D 93 ; Add $938D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $03, $ED		; 82 03 ED ; Branch always long to $82, $03, $ED [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $1D		; B0 1D ; Branch if carry set to $B0, $1D [Flow: branch]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $DC, $EC		; 82 DC EC ; Branch always long to $82, $DC, $EC [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $80FF.w,X		; FD FF 80 ; Subtract with carry $80FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9D20.w		; 20 20 9D ; Jump to subroutine at $9D20.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $4B		; B0 4B ; Branch if carry set to $B0, $4B [Flow: branch]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $46		; B0 46 ; Branch if carry set to $B0, $46 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	stz $0385.w,X		; 9E 85 03 ; Store zero to $0385.w,X [Reads: X Index]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $93E9.w,Y		; B9 E9 93 ; Load $93E9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $93F1.w,X		; BD F1 93 ; Load $93F1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $00.b,X		; B5 00 ; Load $00.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $06.b		; C5 06 ; Compare $06.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $93ED.w,Y		; B9 ED 93 ; Load $93ED.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $93EE.w,Y		; B9 EE 93 ; Load $93EE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0000.w		; 0C 00 00 ; Test and set bits $0000.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $0000.w		; 0E 00 00 ; Arithmetic shift left $0000.w [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0399.w		; 8D 99 03 ; Store accumulator to $0399.w [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $039A.w		; 8D 9A 03 ; Store accumulator to $039A.w [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $039B.w		; 8D 9B 03 ; Store accumulator to $039B.w [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $039C.w		; 8D 9C 03 ; Store accumulator to $039C.w [Reads: Accumulator]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $28		; B0 28 ; Branch if carry set to $B0, $28 [Flow: branch]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	ldy $039D.w		; AC 9D 03 ; Load $039D.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $9468.w,Y		; B9 68 94 ; Load $9468.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $0399.w		; AD 99 03 ; Load $0399.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9448.w,Y		; 79 48 94 ; Add $9448.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $039B.w		; AD 9B 03 ; Load $039B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9458.w,Y		; 79 58 94 ; Add $9458.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $FF, $EB		; 82 FF EB ; Branch always long to $82, $FF, $EB [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	stx $74.b		; 86 74 ; Store X register to $74.b [Reads: X Index]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $F4		; B0 F4 ; Branch if carry set to $B0, $F4 [Flow: branch]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $74.b		; A6 74 ; Load $74.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	jsr $AD1B.w		; 20 1B AD ; Jump to subroutine at $AD1B.w [Writes: Stack Pointer] [Flow: call]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9448.w,Y		; 79 48 94 ; Add $9448.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9458.w,Y		; 79 58 94 ; Add $9458.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	.db $82, $C8, $EB		; 82 C8 EB ; Branch always long to $82, $C8, $EB [Flow: branch]
	.db $82, $89, $00		; 82 89 00 ; Branch always long to $82, $89, $00 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9D20.w		; 20 20 9D ; Jump to subroutine at $9D20.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $F5		; B0 F5 ; Branch if carry set to $B0, $F5 [Flow: branch]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $F0		; [PATTERN: Memory clearing operation] B0 F0 ; Branch if carry set to $B0, $F0 [Flow: branch]
	lda #$78.b		; A9 78 ; Load #$78.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	stz $0385.w,X		; 9E 85 03 ; Store zero to $0385.w,X [Reads: X Index]
	stz $0294.w,X		; 9E 94 02 ; Store zero to $0294.w,X [Reads: X Index]
	stz $029E.w,X		; 9E 9E 02 ; Store zero to $029E.w,X [Reads: X Index]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $80, $34		; 80 34 ; Branch always to $80, $34 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9D20.w		; 20 20 9D ; Jump to subroutine at $9D20.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $62		; B0 62 ; Branch if carry set to $B0, $62 [Flow: branch]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $5D		; B0 5D ; Branch if carry set to $B0, $5D [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	stz $5E.b		; [PATTERN: Memory clearing operation] 64 5E ; Store zero to $5E.b
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$7E.b		; 29 7E ; Logical AND #$7E.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	stz $3C.b		; 64 3C ; Store zero to $3C.b
	stz $3D.b		; 64 3D ; Store zero to $3D.b
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0385.w,X		; 9D 85 03 ; Store accumulator to $0385.w,X [Reads: Accumulator, X Index]
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0294.w,X		; 9D 94 02 ; Store accumulator to $0294.w,X [Reads: Accumulator, X Index]
	lda #$CD.b		; A9 CD ; Load #$CD.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $029E.w,X		; 9D 9E 02 ; Store accumulator to $029E.w,X [Reads: Accumulator, X Index]
	ldy #$02.b		; [PATTERN: Memory clearing operation] A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	stz $0C22.w,X		; 9E 22 0C ; Store zero to $0C22.w,X [Reads: X Index]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda #$38.b		; A9 38 ; Load #$38.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C2C.w,X		; [PATTERN: Memory clearing operation] 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	stz $0380.w,X		; 9E 80 03 ; Store zero to $0380.w,X [Reads: X Index]
	stz $0394.w,X		; 9E 94 03 ; Store zero to $0394.w,X [Reads: X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0008.w		; E9 08 00 ; Subtract #$0008.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$FFF0.w		; A9 F0 FF ; Load #$FFF0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E2.b		; 65 E2 ; Add $E2.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $3C, $EB		; 82 3C EB ; Branch always long to $82, $3C, $EB [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; [PATTERN: Memory clearing operation] 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	.db $82, $65, $00		; 82 65 00 ; Branch always long to $82, $65, $00 [Flow: branch]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AAA.w		; 8D AA 0A ; Store accumulator to $0AAA.w [Reads: Accumulator]
	lda #$35.b		; A9 35 ; Load #$35.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5805.l		; 8F 05 58 7F ; Store accumulator (long) $7F5805.l [Reads: Accumulator]
	sta $7F5806.l		; 8F 06 58 7F ; Store accumulator (long) $7F5806.l [Reads: Accumulator]
	sta $7F5807.l		; 8F 07 58 7F ; Store accumulator (long) $7F5807.l [Reads: Accumulator]
	sta $7F5808.l		; 8F 08 58 7F ; Store accumulator (long) $7F5808.l [Reads: Accumulator]
	sta $7F5809.l		; 8F 09 58 7F ; Store accumulator (long) $7F5809.l [Reads: Accumulator]
	sta $7F580A.l		; 8F 0A 58 7F ; Store accumulator (long) $7F580A.l [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7F5800.l		; 8F 00 58 7F ; Store accumulator (long) $7F5800.l [Reads: Accumulator]
	sta $7F5801.l		; 8F 01 58 7F ; Store accumulator (long) $7F5801.l [Reads: Accumulator]
	sta $7F5802.l		; 8F 02 58 7F ; Store accumulator (long) $7F5802.l [Reads: Accumulator]
	sta $7F5803.l		; 8F 03 58 7F ; Store accumulator (long) $7F5803.l [Reads: Accumulator]
	sta $7F5804.l		; 8F 04 58 7F ; Store accumulator (long) $7F5804.l [Reads: Accumulator]
	sta $0112.w		; 8D 12 01 ; Store accumulator to $0112.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$001A.w		; 69 1A 00 ; Add #$001A.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7F580B.l		; 8F 0B 58 7F ; Store accumulator (long) $7F580B.l [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7F580D.l		; 8F 0D 58 7F ; Store accumulator (long) $7F580D.l [Reads: Accumulator]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F581E.l		; 8F 1E 58 7F ; Store accumulator (long) $7F581E.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $F800.w		; 20 00 F8 ; Jump to subroutine at $F800.w [Writes: Stack Pointer] [Flow: call]
	sbc $14000A.l,X		; FF 0A 00 14 ; Subtract with carry (long,X) $14000A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AB4B8B.l,X		; FF 8B 4B AB ; Subtract with carry (long,X) $AB4B8B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stx $72.b		; 86 72 ; Store X register to $72.b [Reads: X Index]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $43		; B0 43 ; Branch if carry set to $B0, $43 [Flow: branch]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: ZN]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$31.b		; C9 31 ; Compare #$31.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0C4A.w,X		; [PATTERN: Memory clearing operation] 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F3		; 10 F3 ; Branch if plus to $10, $F3 [Flow: branch]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C54.w,X		; 9D 54 0C ; Store accumulator to $0C54.w,X [Reads: Accumulator, X Index]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	ldy $2F.b		; A4 2F ; Load $2F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $95FB.w,Y		; 79 FB 95 ; Add $95FB.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9603.w,Y		; 79 03 96 ; Add $9603.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $6B, $EA		; 82 6B EA ; Branch always long to $82, $6B, $EA [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $100010.l,X		; FF 10 00 10 ; Subtract with carry (long,X) $100010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F80010.l,X		; FF 10 00 F8 ; Subtract with carry (long,X) $F80010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $100000.l,X		; FF 00 00 10 ; Subtract with carry (long,X) $100000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000010.l,X		; FF 10 00 00 ; Subtract with carry (long,X) $000010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $800010.l,X		; FF 10 00 80 ; Subtract with carry (long,X) $800010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda #$33.b		; [PATTERN: Memory clearing operation] A9 33 ; Load #$33.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C4A.w		; 8D 4A 0C ; Store accumulator to $0C4A.w [Reads: Accumulator]
	sta $0C4B.w		; 8D 4B 0C ; Store accumulator to $0C4B.w [Reads: Accumulator]
	stz $0C4C.w		; 9C 4C 0C ; Store zero to $0C4C.w
	stz $0C4D.w		; 9C 4D 0C ; Store zero to $0C4D.w
	stz $0C4E.w		; [PATTERN: Memory clearing operation] 9C 4E 0C ; Store zero to $0C4E.w
	stz $0C4F.w		; 9C 4F 0C ; Store zero to $0C4F.w
	stz $0C5E.w		; 9C 5E 0C ; Store zero to $0C5E.w
	stz $02EC.w		; 9C EC 02 ; Store zero to $02EC.w
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $50.b		; [PATTERN: Memory clearing operation] 64 50 ; Store zero to $50.b
	stz $0380.w		; 9C 80 03 ; Store zero to $0380.w
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C7C.w		; 8D 7C 0C ; Store accumulator to $0C7C.w [Reads: Accumulator]
	sta $0C7D.w		; 8D 7D 0C ; Store accumulator to $0C7D.w [Reads: Accumulator]
	lda $0476.w		; AD 76 04 ; Load $0476.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03CA.w		; 8D CA 03 ; Store accumulator to $03CA.w [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F0010.l		; 8F 10 00 7F ; Store accumulator (long) $7F0010.l [Reads: Accumulator]
	sta $7F0009.l		; 8F 09 00 7F ; Store accumulator (long) $7F0009.l [Reads: Accumulator]
	sta $7F0001.l		; 8F 01 00 7F ; Store accumulator (long) $7F0001.l [Reads: Accumulator]
	sta $7F0011.l		; 8F 11 00 7F ; Store accumulator (long) $7F0011.l [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7F0000.l		; 8F 00 00 7F ; Store accumulator (long) $7F0000.l [Reads: Accumulator]
	sta $0112.w		; 8D 12 01 ; Store accumulator to $0112.w [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F0008.l		; 8F 08 00 7F ; Store accumulator (long) $7F0008.l [Reads: Accumulator]
	lda $7F001C.l		; AF 1C 00 7F ; Load long $7F001C.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $967A.w,Y		; B9 7A 96 ; Load $967A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7F0018.l		; 6F 18 00 7F ; Add with carry (long) $7F0018.l [Writes: Accumulator] [Flags: ZVNC]
	sta $7F0018.l		; 8F 18 00 7F ; Store accumulator (long) $7F0018.l [Reads: Accumulator]
	lda $9682.w,Y		; B9 82 96 ; Load $9682.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7F001A.l		; 6F 1A 00 7F ; Add with carry (long) $7F001A.l [Writes: Accumulator] [Flags: ZVNC]
	sta $7F001A.l		; 8F 1A 00 7F ; Store accumulator (long) $7F001A.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $7F001C.l		; AF 1C 00 7F ; Load long $7F001C.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	ldy #$10.b		; A0 10 ; Load #$10.b into Y register [Writes: Y Index] [Flags: ZN]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $965A.w,Y		; B9 5A 96 ; Load $965A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7F0018.l		; 6F 18 00 7F ; Add with carry (long) $7F0018.l [Writes: Accumulator] [Flags: ZVNC]
	sta $7F0020.l,X		; 9F 20 00 7F ; Store accumulator (long,X) $7F0020.l,X [Reads: Accumulator, X Index]
	lda $965C.w,Y		; B9 5C 96 ; Load $965C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7F001A.l		; 6F 1A 00 7F ; Add with carry (long) $7F001A.l [Writes: Accumulator] [Flags: ZVNC]
	sta $7F0030.l,X		; 9F 30 00 7F ; Store accumulator (long,X) $7F0030.l,X [Reads: Accumulator, X Index]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $968A.w,X		; BD 8A 96 ; Load $968A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $BF		; 10 BF ; Branch if plus to $10, $BF [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	stx $72.b		; 86 72 ; Store X register to $72.b [Reads: X Index]
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: ZN]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	.db $82, $63, $00		; 82 63 00 ; Branch always long to $82, $63, $00 [Flow: branch]
	lda #$3C.b		; A9 3C ; Load #$3C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C4A.w,X		; 9D 4A 0C ; Store accumulator to $0C4A.w,X [Reads: Accumulator, X Index]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C7C.w,X		; 9D 7C 0C ; Store accumulator to $0C7C.w,X [Reads: Accumulator, X Index]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $72.b		; A6 72 ; Load $72.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	jsr $AD1B.w		; 20 1B AD ; Jump to subroutine at $AD1B.w [Writes: Stack Pointer] [Flow: call]
	stz $0B.b		; 64 0B ; Store zero to $0B.b
	lda $029E.w,X		; BD 9E 02 ; Load $029E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$F8.b		; C9 F8 ; Compare #$F8.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	stz $05.b		; 64 05 ; Store zero to $05.b
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
.ACCU 16
	rep #$20		; C2 20
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFFE.w		; 69 FE FF ; Add #$FFFE.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0002.w		; 69 02 00 ; Add #$0002.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $F7, $E8		; 82 F7 E8 ; Branch always long to $82, $F7, $E8 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($FCFF.w,X)		; FC FF FC ; Jump to subroutine indirect indexed ($FCFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FCFFFC.l,X		; FF FC FF FC ; Subtract with carry (long,X) $FCFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $020000.l,X		; FF 00 00 02 ; Subtract with carry (long,X) $020000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	stx $72.b		; 86 72 ; Store X register to $72.b [Reads: X Index]
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: ZN]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	.db $82, $59, $00		; 82 59 00 ; Branch always long to $82, $59, $00 [Flow: branch]
	lda #$3C.b		; A9 3C ; Load #$3C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C4A.w,X		; 9D 4A 0C ; Store accumulator to $0C4A.w,X [Reads: Accumulator, X Index]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C7C.w,X		; 9D 7C 0C ; Store accumulator to $0C7C.w,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $72.b		; A6 72 ; Load $72.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	jsr $AD1B.w		; 20 1B AD ; Jump to subroutine at $AD1B.w [Writes: Stack Pointer] [Flow: call]
	stz $0B.b		; [PATTERN: Memory clearing operation] 64 0B ; Store zero to $0B.b
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	stz $05.b		; 64 05 ; Store zero to $05.b
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$70.b		; 29 70 ; Logical AND #$70.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $97CE.w,Y		; 79 CE 97 ; Add $97CE.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $97D6.w,Y		; 79 D6 97 ; Add $97D6.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $7A, $E8		; 82 7A E8 ; Branch always long to $82, $7A, $E8 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $D00014.l,X		; FF 14 00 D0 ; Subtract with carry (long,X) $D00014.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $8B		; 30 8B ; Branch if minus to $30, $8B [Flow: branch]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	jsl $07B0E9.l		; 22 E9 B0 07 ; Jump to subroutine long $07B0E9.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $D6		; 80 D6 ; Branch always to $80, $D6 [Flow: branch]
	jsl $0DBB67.l		; [PATTERN: Memory clearing operation] 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora #$0F.b		; 09 0F ; Logical OR #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	stz $03C2.w,X		; 9E C2 03 ; Store zero to $03C2.w,X [Reads: X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C5E.w,X		; 9D 5E 0C ; Store accumulator to $0C5E.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0385.w,X		; 9D 85 03 ; Store accumulator to $0385.w,X [Reads: Accumulator, X Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $039F.w,X		; 9D 9F 03 ; Store accumulator to $039F.w,X [Reads: Accumulator, X Index]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $985B.w,Y		; B9 5B 98 ; Load $985B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	lda $985F.w,Y		; B9 5F 98 ; Load $985F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $099DD3.l		; 22 D3 9D 09 ; Jump to subroutine long $099DD3.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	.db $B0, $30		; B0 30 ; Branch if carry set to $B0, $30 [Flow: branch]
	ldy $2F.b		; A4 2F ; Load $2F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $984B.w,Y		; 79 4B 98 ; Add $984B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9853.w,Y		; 79 53 98 ; Add $9853.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $07.b		; 05 07 ; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	.db $82, $E2, $E7		; 82 E2 E7 ; Branch always long to $82, $E2, $E7 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$11.b		; A9 11 ; Load #$11.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C4A.w,X		; 9D 4A 0C ; Store accumulator to $0C4A.w,X [Reads: Accumulator, X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $08806F.l,X		; BF 6F 80 08 ; Load long $08806F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta $0C90.w,X		; 9D 90 0C ; Store accumulator to $0C90.w,X [Reads: Accumulator, X Index]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $34		; B0 34 ; Branch if carry set to $B0, $34 [Flow: branch]
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora #$24.b		; 09 24 ; Logical OR #$24.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	stz $EE.b		; 64 EE ; Store zero to $EE.b
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFF5.w		; 69 F5 FF ; Add #$FFF5.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $AD06.w		; 20 06 AD ; Jump to subroutine at $AD06.w [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $50, $05		; 50 05 ; Branch if overflow clear to $50, $05 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora $30.b		; 05 30 ; Logical OR $30.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $20.b		; 05 20 ; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $E0.b		; 05 E0 ; Logical OR $E0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $C0.b		; 04 C0 ; Test and set bits $C0.b [Reads: Accumulator] [Flags: Z]
	tsb $B0.b		; 04 B0 ; Test and set bits $B0.b [Reads: Accumulator] [Flags: Z]
	tsb $B0.b		; 04 B0 ; Test and set bits $B0.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	.db $10, $09		; 10 09 ; Branch if plus to $10, $09 [Flow: branch]
	.db $50, $09		; 50 09 ; Branch if overflow clear to $50, $09 [Flow: branch]
	.db $70, $09		; 70 09 ; Branch if overflow set to $70, $09 [Flow: branch]
	ldy #$09.b		; A0 09 ; Load #$09.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $50, $08		; 50 08 ; Branch if overflow clear to $50, $08 [Flow: branch]
	.db $70, $08		; 70 08 ; Branch if overflow set to $70, $08 [Flow: branch]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	jsr $5009.w		; 20 09 50 ; Jump to subroutine at $5009.w [Writes: Stack Pointer] [Flow: call]
	ora #$80.b		; 09 80 ; Logical OR #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora $30.b		; 05 30 ; Logical OR $30.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $30.b		; 05 30 ; Logical OR $30.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $30.b		; 05 30 ; Logical OR $30.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $20.b		; 05 20 ; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $20.b		; 05 20 ; Logical OR $20.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $10.b		; 05 10 ; Logical OR $10.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $10.b		; 05 10 ; Logical OR $10.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $F0.b		; 05 F0 ; Logical OR $F0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $F0.b		; 04 F0 ; Test and set bits $F0.b [Reads: Accumulator] [Flags: Z]
	tsb $F0.b		; 04 F0 ; Test and set bits $F0.b [Reads: Accumulator] [Flags: Z]
	tsb $F0.b		; 04 F0 ; Test and set bits $F0.b [Reads: Accumulator] [Flags: Z]
	tsb $D0.b		; 04 D0 ; Test and set bits $D0.b [Reads: Accumulator] [Flags: Z]
	tsb $B0.b		; 04 B0 ; Test and set bits $B0.b [Reads: Accumulator] [Flags: Z]
	tsb $A0.b		; 04 A0 ; Test and set bits $A0.b [Reads: Accumulator] [Flags: Z]
	tsb $B0.b		; 04 B0 ; Test and set bits $B0.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	.db $10, $09		; 10 09 ; Branch if plus to $10, $09 [Flow: branch]
	.db $50, $09		; 50 09 ; Branch if overflow clear to $50, $09 [Flow: branch]
	.db $70, $09		; 70 09 ; Branch if overflow set to $70, $09 [Flow: branch]
	ldy #$09.b		; A0 09 ; Load #$09.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $50, $08		; 50 08 ; Branch if overflow clear to $50, $08 [Flow: branch]
	.db $70, $08		; 70 08 ; Branch if overflow set to $70, $08 [Flow: branch]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	jsr $5009.w		; 20 09 50 ; Jump to subroutine at $5009.w [Writes: Stack Pointer] [Flow: call]
	ora #$80.b		; 09 80 ; Logical OR #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $0A.b,X		; 16 0A ; Arithmetic shift left $0A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	stz $A209.w,X		; 9E 09 A2 ; Store zero to $A209.w,X [Reads: X Index]
	ora #$AA.b		; 09 AA ; Logical OR #$AA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$2E.b		; 09 2E ; Logical OR #$2E.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$34.b		; 09 34 ; Logical OR #$34.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$8A.b		; 09 8A ; Logical OR #$8A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stx $9608.w		; 8E 08 96 ; Store X register to $9608.w [Reads: X Index]
	ora [$9E.b]		; 07 9E ; OR accumulator with memory (long) [$9E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$A4.b]		; 07 A4 ; OR accumulator with memory (long) [$A4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$AA.b]		; 07 AA ; OR accumulator with memory (long) [$AA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$90.b]		; 07 90 ; OR accumulator with memory (long) [$90.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $B2.b		; 06 B2 ; Arithmetic shift left $B2.b [Reads: Direct Page] [Flags: ZNC]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $30.b		; 05 30 ; Logical OR $30.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $1810.w		; 0C 10 18 ; Test and set bits $1810.w [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	trb $8B1E.w		; 1C 1E 8B ; Test and reset bits $8B1E.w [Reads: Accumulator] [Flags: Z]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	.db $82, $02, $01		; 82 02 01 ; Branch always long to $82, $02, $01 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldy $20.b		; A4 20 ; Load $20.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0007.w		; C9 07 00 ; Compare #$0007.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and #$FFF0.w		; 29 F0 FF ; Logical AND #$FFF0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldy #$000E.w		; A0 0E 00 ; Load #$000E.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $993A.w,Y		; D9 3A 99 ; Compare accumulator $993A.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $99E1.w,Y		; B9 E1 99 ; Load $99E1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $99E0.w,Y		; B9 E0 99 ; Load $99E0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $994A.w,Y		; B9 4A 99 ; Load $994A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $22.b		; C5 22 ; Compare $22.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $B0, $21		; B0 21 ; Branch if carry set to $B0, $21 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000F.w		; 69 0F 00 ; Add #$000F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp $22.b		; C5 22 ; Compare $22.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $90, $19		; 90 19 ; Branch if carry clear to $90, $19 [Flow: branch]
	cpy #$001A.w		; C0 1A 00 ; Compare #$001A.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	.db $80, $18		; 80 18 ; Branch always to $80, $18 [Flow: branch]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	.db $D0, $D2		; D0 D2 ; Branch if not equal to $D0, $D2 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	.db $82, $90, $00		; 82 90 00 ; Branch always long to $82, $90, $00 [Flow: branch]
	lda $99A4.w,Y		; B9 A4 99 ; Load $99A4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0698.w		; 8D 98 06 ; Store accumulator to $0698.w [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$80.b		; E9 80 ; Subtract #$80.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($B9.b)		; 72 B9 ; Add with carry (indirect) ($B9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
.INDEX 16
	rep #$99		; C2 99
	sta $0692.w		; 8D 92 06 ; Store accumulator to $0692.w [Reads: Accumulator]
	cmp #$58.b		; C9 58 ; Compare #$58.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $C9.b,X		; 15 C9 ; OR accumulator with memory $C9.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7EF280.l,X		; BF 80 F2 7E ; Load long $7EF280.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF280.l,X		; 9F 80 F2 7E ; Store accumulator (long,X) $7EF280.l,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora #$1B.b		; 09 1B ; Logical OR #$1B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $03BA.w,X		; 9D BA 03 ; Store accumulator to $03BA.w,X [Reads: Accumulator, X Index]
	lda $73.b		; A5 73 ; Load $73.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $03B6.w,X		; 9D B6 03 ; Store accumulator to $03B6.w,X [Reads: Accumulator, X Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $02AD5C.l		; 22 5C AD 02 ; Jump to subroutine long $02AD5C.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9968.w,Y		; B9 68 99 ; Load $9968.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFFE.w		; 69 FE FF ; Add #$FFFE.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFF0.w		; 69 F0 FF ; Add #$FFF0.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $9986.w,Y		; B9 86 99 ; Load $9986.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $012F.w		; AD 2F 01 ; Load $012F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$1B.b		; C9 1B ; Compare #$1B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora #$22.b		; 09 22 ; Logical OR #$22.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03E9.w		; 8D E9 03 ; Store accumulator to $03E9.w [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $038A.w,X		; 9D 8A 03 ; Store accumulator to $038A.w,X [Reads: Accumulator, X Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $038F.w,X		; 9D 8F 03 ; Store accumulator to $038F.w,X [Reads: Accumulator, X Index]
	.db $82, $CD, $E5		; 82 CD E5 ; Branch always long to $82, $CD, $E5 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpy #$40.b		; C0 40 ; Compare #$40.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$40.b		; C0 40 ; Compare #$40.b with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8B000B.l,X		; FF 0B 00 8B ; Subtract with carry (long,X) $8B000B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $4E		; [PATTERN: Memory clearing operation] B0 4E ; Branch if carry set to $B0, $4E [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	stz $0385.w,X		; [PATTERN: Memory clearing operation] 9E 85 03 ; Store zero to $0385.w,X [Reads: X Index]
	stz $037E.w		; 9C 7E 03 ; Store zero to $037E.w
	stx $039D.w		; 8E 9D 03 ; Store X register to $039D.w [Reads: X Index]
	stz $0380.w,X		; 9E 80 03 ; Store zero to $0380.w,X [Reads: X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0394.w,X		; [PATTERN: Memory clearing operation] 9D 94 03 ; Store accumulator to $0394.w,X [Reads: Accumulator, X Index]
	stz $03A4.w,X		; 9E A4 03 ; Store zero to $03A4.w,X [Reads: X Index]
	stz $0C68.w,X		; 9E 68 0C ; Store zero to $0C68.w,X [Reads: X Index]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0C72.w,X		; 9D 72 0C ; Store accumulator to $0C72.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9AF8.w,Y		; B9 F8 9A ; Load $9AF8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C22.w,X		; 9D 22 0C ; Store accumulator to $0C22.w,X [Reads: Accumulator, X Index]
	lda $9AFC.w,Y		; B9 FC 9A ; Load $9AFC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C2C.w,X		; 9D 2C 0C ; Store accumulator to $0C2C.w,X [Reads: Accumulator, X Index]
	ldy $2F.b		; A4 2F ; Load $2F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9B00.w,Y		; 79 00 9B ; Add $9B00.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9B08.w,Y		; 79 08 9B ; Add $9B08.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jmp $80C3.w		; 4C C3 80 ; Jump to $80C3.w [Flow: jump]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$41.b		; A9 41 ; Load #$41.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $9D20.w		; 20 20 9D ; Jump to subroutine at $9D20.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $0D		; B0 0D ; Branch if carry set to $B0, $0D [Flow: branch]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $4D.b		; 05 4D ; Logical OR $4D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $F2		; D0 F2 ; Branch if not equal to $D0, $F2 [Flow: branch]
	lda $7EF37A.l		; AF 7A F3 7E ; Load long $7EF37A.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$7F.b		; C9 7F ; Compare #$7F.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $E8		; D0 E8 ; Branch if not equal to $D0, $E8 [Flow: branch]
	lda $7EF2C3.l		; AF C3 F2 7E ; Load long $7EF2C3.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $E0		; D0 E0 ; Branch if not equal to $D0, $E0 [Flow: branch]
	jsl $09ADC7.l		; 22 C7 AD 09 ; Jump to subroutine long $09ADC7.l [Writes: Stack Pointer] [Flow: call]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$43.b		; A9 43 ; Load #$43.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $9D20.w		; 20 20 9D ; Jump to subroutine at $9D20.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $D3		; B0 D3 ; Branch if carry set to $B0, $D3 [Flow: branch]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $CE		; B0 CE ; Branch if carry set to $B0, $CE [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: ZN]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$37.b		; C9 37 ; Compare #$37.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F3		; 10 F3 ; Branch if plus to $10, $F3 [Flow: branch]
	ldx #$17.b		; A2 17 ; Load #$17.b into X register [Writes: X Index] [Flags: ZN]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5837.l,X		; 9F 37 58 7F ; Store accumulator (long,X) $7F5837.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F9		; 10 F9 ; Branch if plus to $10, $F9 [Flow: branch]
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	jsl $00D4ED.l		; 22 ED D4 00 ; Jump to subroutine long $00D4ED.l [Writes: Stack Pointer] [Flow: call]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AB1.w		; 8D B1 0A ; Store accumulator to $0AB1.w [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AA9.w		; 8D A9 0A ; Store accumulator to $0AA9.w [Reads: Accumulator]
	jsl $1BED72.l		; 22 72 ED 1B ; Jump to subroutine long $1BED72.l [Writes: Stack Pointer] [Flow: call]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	plx		; [PATTERN: Memory clearing operation] FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
	stz $0C36.w,X		; 9E 36 0C ; Store zero to $0C36.w,X [Reads: X Index]
	stz $0C40.w,X		; 9E 40 0C ; Store zero to $0C40.w,X [Reads: X Index]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5812.l		; 8F 12 58 7F ; Store accumulator (long) $7F5812.l [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5800.l		; 8F 00 58 7F ; Store accumulator (long) $7F5800.l [Reads: Accumulator]
	sta $7F5808.l		; 8F 08 58 7F ; Store accumulator (long) $7F5808.l [Reads: Accumulator]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5801.l		; 8F 01 58 7F ; Store accumulator (long) $7F5801.l [Reads: Accumulator]
	lda #$16.b		; A9 16 ; Load #$16.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5802.l		; 8F 02 58 7F ; Store accumulator (long) $7F5802.l [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5803.l		; 8F 03 58 7F ; Store accumulator (long) $7F5803.l [Reads: Accumulator]
	lda #$2A.b		; A9 2A ; Load #$2A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5804.l		; 8F 04 58 7F ; Store accumulator (long) $7F5804.l [Reads: Accumulator]
	lda #$36.b		; A9 36 ; Load #$36.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F5805.l		; 8F 05 58 7F ; Store accumulator (long) $7F5805.l [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFF0.w		; 69 F0 FF ; Add #$FFF0.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $8D, $E4		; 82 8D E4 ; Branch always long to $82, $8D, $E4 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $09		; B0 09 ; Branch if carry set to $B0, $09 [Flow: branch]
	stz $03C2.w,X		; 9E C2 03 ; Store zero to $03C2.w,X [Reads: X Index]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03C0.w,X		; 9D C0 03 ; Store accumulator to $03C0.w,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $F7		; D0 F7 ; Branch if not equal to $D0, $F7 [Flow: branch]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $F1		; F0 F1 ; Branch if equal to $F0, $F1 [Flow: branch]
	phx		; [PATTERN: Memory clearing operation] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$34.b		; A0 34 ; Load #$34.b into Y register [Writes: Y Index] [Flags: ZN]
	sty $0C4A.w		; 8C 4A 0C ; Store Y register to $0C4A.w [Reads: Y Index]
	stz $0C4B.w		; 9C 4B 0C ; Store zero to $0C4B.w
	stz $0C4C.w		; 9C 4C 0C ; Store zero to $0C4C.w
	stz $0C4D.w		; [PATTERN: Memory clearing operation] 9C 4D 0C ; Store zero to $0C4D.w
	stz $0C4E.w		; 9C 4E 0C ; Store zero to $0C4E.w
	stz $0C4F.w		; 9C 4F 0C ; Store zero to $0C4F.w
	stz $035F.w		; 9C 5F 03 ; Store zero to $035F.w
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda $08806F.l,X		; BF 6F 80 08 ; Load long $08806F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0C90.w		; 8D 90 0C ; Store accumulator to $0C90.w [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$FD.b		; A9 FD ; Load #$FD.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F0000.l		; 8F 00 00 7F ; Store accumulator (long) $7F0000.l [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7F0001.l		; 8F 01 00 7F ; Store accumulator (long) $7F0001.l [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7F0002.l		; 8F 02 00 7F ; Store accumulator (long) $7F0002.l [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F0003.l		; 8F 03 00 7F ; Store accumulator (long) $7F0003.l [Reads: Accumulator]
	sta $7F0010.l		; 8F 10 00 7F ; Store accumulator (long) $7F0010.l [Reads: Accumulator]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F0008.l		; 8F 08 00 7F ; Store accumulator (long) $7F0008.l [Reads: Accumulator]
	sta $7F0009.l		; 8F 09 00 7F ; Store accumulator (long) $7F0009.l [Reads: Accumulator]
	sta $7F000A.l		; 8F 0A 00 7F ; Store accumulator (long) $7F000A.l [Reads: Accumulator]
	sta $7F000B.l		; 8F 0B 00 7F ; Store accumulator (long) $7F000B.l [Reads: Accumulator]
	sta $03B1.w		; 8D B1 03 ; Store accumulator to $03B1.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda #$0100.w		; A9 00 01 ; Load #$0100.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F0018.l		; 8F 18 00 7F ; Store accumulator (long) $7F0018.l [Reads: Accumulator]
	sta $7F0026.l		; 8F 26 00 7F ; Store accumulator (long) $7F0026.l [Reads: Accumulator]
	lda #$0098.w		; A9 98 00 ; Load #$0098.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7F001A.l		; 8F 1A 00 7F ; Store accumulator (long) $7F001A.l [Reads: Accumulator]
	sta $7F0036.l		; [PATTERN: Memory clearing operation] 8F 36 00 7F ; Store accumulator (long) $7F0036.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04C6.w		; 8D C6 04 ; Store accumulator to $04C6.w [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $C8.b		; 64 C8 ; Store zero to $C8.b
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C7C.w		; [PATTERN: Memory clearing operation] 8D 7C 0C ; Store accumulator to $0C7C.w [Reads: Accumulator]
	lda $0476.w		; AD 76 04 ; Load $0476.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03CA.w		; 8D CA 03 ; Store accumulator to $03CA.w [Reads: Accumulator]
	stz $0C5E.w		; 9C 5E 0C ; Store zero to $0C5E.w
	stz $0C54.w		; 9C 54 0C ; Store zero to $0C54.w
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $0FF577.l		; 22 77 F5 0F ; Jump to subroutine long $0FF577.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	.db $30, $2B		; 30 2B ; Branch if minus to $30, $2B [Flow: branch]
	sta $0C4A.w,X		; 9D 4A 0C ; Store accumulator to $0C4A.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C7C.w,X		; [PATTERN: Memory clearing operation] 9D 7C 0C ; Store accumulator to $0C7C.w,X [Reads: Accumulator, X Index]
	lda $0476.w		; AD 76 04 ; Load $0476.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03CA.w,X		; 9D CA 03 ; Store accumulator to $03CA.w,X [Reads: Accumulator, X Index]
	stz $0C22.w,X		; 9E 22 0C ; Store zero to $0C22.w,X [Reads: X Index]
	stz $0C2C.w,X		; 9E 2C 0C ; Store zero to $0C2C.w,X [Reads: X Index]
	stz $0280.w,X		; [PATTERN: Memory clearing operation] 9E 80 02 ; Store zero to $0280.w,X [Reads: X Index]
	stz $028A.w,X		; 9E 8A 02 ; Store zero to $028A.w,X [Reads: X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda $08806F.l,X		; BF 6F 80 08 ; Load long $08806F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C90.w,X		; 9D 90 0C ; Store accumulator to $0C90.w,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9CE2.w		; 20 E2 9C ; Jump to subroutine at $9CE2.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$05.b		; A2 05 ; Load #$05.b into X register [Writes: X Index] [Flags: ZN]
	cmp $0C4A.w,X		; DD 4A 0C ; Compare accumulator $0C4A.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9D20.w		; 20 20 9D ; Jump to subroutine at $9D20.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sty $0E.b		; 84 0E ; Store Y register to $0E.b [Reads: Y Index]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: ZN]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $0C4A.w,X		; DD 4A 0C ; Compare accumulator $0C4A.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
	cpy $0E.b		; C4 0E ; Compare $0E.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0C4A.w,Y		; B9 4A 0C ; Load $0C4A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	.db $80, $19		; 80 19 ; Branch always to $80, $19 [Flow: branch]
	dec $03C4.w		; CE C4 03 ; Decrement $03C4.w [Flags: ZN]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03C4.w		; 8D C4 03 ; Store accumulator to $03C4.w [Reads: Accumulator]
	ldy $03C4.w		; AC C4 03 ; Load $03C4.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $0C4A.w,Y		; B9 4A 0C ; Load $0C4A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $E9		; 10 E9 ; Branch if plus to $10, $E9 [Flow: branch]
	.db $80, $EC		; 80 EC ; Branch always to $80, $EC [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	.db $30, $2B		; 30 2B ; Branch if minus to $30, $2B [Flow: branch]
	sta $0C4A.w,X		; 9D 4A 0C ; Store accumulator to $0C4A.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C7C.w,X		; [PATTERN: Memory clearing operation] 9D 7C 0C ; Store accumulator to $0C7C.w,X [Reads: Accumulator, X Index]
	lda $0476.w		; AD 76 04 ; Load $0476.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03CA.w,X		; 9D CA 03 ; Store accumulator to $03CA.w,X [Reads: Accumulator, X Index]
	stz $0C22.w,X		; 9E 22 0C ; Store zero to $0C22.w,X [Reads: X Index]
	stz $0C2C.w,X		; 9E 2C 0C ; Store zero to $0C2C.w,X [Reads: X Index]
	stz $0280.w,X		; [PATTERN: Memory clearing operation] 9E 80 02 ; Store zero to $0280.w,X [Reads: X Index]
	stz $028A.w,X		; 9E 8A 02 ; Store zero to $028A.w,X [Reads: X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda $08806F.l,X		; BF 6F 80 08 ; Load long $08806F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C90.w,X		; 9D 90 0C ; Store accumulator to $0C90.w,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $100008.l,X		; FF 08 00 10 ; Subtract with carry (long,X) $100008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFF0.l,X		; FF F0 FF 00 ; Subtract with carry (long,X) $00FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $9DA3.w,Y		; B9 A3 9D ; Load $9DA3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $9DBB.w,Y		; B9 BB 9D ; Load $9DBB.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsl $08923B.l		; 22 3B 92 08 ; Jump to subroutine long $08923B.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $72.b		; C6 72 ; Decrement $72.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $CA		; 10 CA ; Branch if plus to $10, $CA [Flow: branch]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $001000.l		; 0F 00 10 00 ; OR accumulator with memory (long) $001000.l [Writes: Accumulator] [Flags: ZN]
	trb $1800.w		; 1C 00 18 ; Test and reset bits $1800.w [Reads: Accumulator] [Flags: Z]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $110000.l,X		; FF 00 00 11 ; Subtract with carry (long,X) $110000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $9E24.w,Y		; B9 24 9E ; Load $9E24.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $9E34.w,Y		; B9 34 9E ; Load $9E34.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsl $089243.l		; 22 43 92 08 ; Jump to subroutine long $089243.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $72.b		; C6 72 ; Decrement $72.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $CA		; 10 CA ; Branch if plus to $10, $CA [Flow: branch]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldx $02CF.w		; AE CF 02 ; Load $02CF.w into X register [Writes: X Index] [Flags: ZN]
	lda $1A00.w,X		; BD 00 1A ; Load $1A00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $1A14.w,X		; BD 14 1A ; Load $1A14.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $1A28.w,X		; BD 28 1A ; Load $1A28.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $1A3C.w,X		; BD 3C 1A ; Load $1A3C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	stz $0B.b		; 64 0B ; Store zero to $0B.b
	lda $1A50.w,X		; BD 50 1A ; Load $1A50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0A.b		; 65 0A ; Add $0A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$1568.w		; A9 68 15 ; Load #$1568.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp #$0018.w		; C9 18 00 ; Compare #$0018.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $16		; B0 16 ; Branch if carry set to $B0, $16 [Flow: branch]
	lda #$1980.w		; A9 80 19 ; Load #$1980.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $02.b		; E5 02 ; Subtract $02.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp #$0018.w		; C9 18 00 ; Compare #$0018.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $3010.w		; 20 10 30 ; Jump to subroutine at $3010.w [Writes: Stack Pointer] [Flow: call]
	jsr $4B8B.w		; 20 8B 4B ; Jump to subroutine at $4B8B.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1A00.w		; 8D 00 1A ; Store accumulator to $1A00.w [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1A14.w		; 8D 14 1A ; Store accumulator to $1A14.w [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1A28.w		; 8D 28 1A ; Store accumulator to $1A28.w [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1A3C.w		; 8D 3C 1A ; Store accumulator to $1A3C.w [Reads: Accumulator]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldy $EE.b		; A4 EE ; Load $EE.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $9EF8.w,Y		; B9 F8 9E ; Load $9EF8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1A64.w		; [PATTERN: Memory clearing operation] 8D 64 1A ; Store accumulator to $1A64.w [Reads: Accumulator]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02D2.w		; 8D D2 02 ; Store accumulator to $02D2.w [Reads: Accumulator]
	stz $02CF.w		; 9C CF 02 ; Store zero to $02CF.w
	stz $02D3.w		; 9C D3 02 ; Store zero to $02D3.w
	stz $02D0.w		; [PATTERN: Memory clearing operation] 9C D0 02 ; Store zero to $02D0.w
	stz $02D6.w		; 9C D6 02 ; Store zero to $02D6.w
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stz $02F9.w		; 9C F9 02 ; Store zero to $02F9.w
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FA.b		; 69 FA ; Add #$FA.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $1A00.w		; 8D 00 1A ; Store accumulator to $1A00.w [Reads: Accumulator]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$FF.b		; 69 FF ; Add #$FF.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $1A14.w		; 8D 14 1A ; Store accumulator to $1A14.w [Reads: Accumulator]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $1A28.w		; 8D 28 1A ; Store accumulator to $1A28.w [Reads: Accumulator]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $1A3C.w		; 8D 3C 1A ; Store accumulator to $1A3C.w [Reads: Accumulator]
	ldy $EE.b		; A4 EE ; Load $EE.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $9EF8.w,Y		; B9 F8 9E ; Load $9EF8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1A64.w		; [PATTERN: Memory clearing operation] 8D 64 1A ; Store accumulator to $1A64.w [Reads: Accumulator]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02D2.w		; 8D D2 02 ; Store accumulator to $02D2.w [Reads: Accumulator]
	stz $02D3.w		; 9C D3 02 ; Store zero to $02D3.w
	stz $02CF.w		; 9C CF 02 ; Store zero to $02CF.w
	stz $02D0.w		; [PATTERN: Memory clearing operation] 9C D0 02 ; Store zero to $02D0.w
	stz $02D6.w		; 9C D6 02 ; Store zero to $02D6.w
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	stz $02F9.w		; 9C F9 02 ; Store zero to $02F9.w
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3D3.l		; 8F D3 F3 7E ; Store accumulator (long) $7EF3D3.l [Reads: Accumulator]
	jsl $08F91A.l		; 22 1A F9 08 ; Jump to subroutine long $08F91A.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $9FC4.w		; 20 C4 9F ; Jump to subroutine at $9FC4.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta [$A1.b],Y		; 97 A1 ; Store accumulator (long indexed) [$A1.b],Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $1F.b,S		; A3 1F ; Load accumulator (stack relative) $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $18.b		; A4 18 ; Load $18.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $24.b,S		; A3 24 ; Load accumulator (stack relative) $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy #$97.b		; A0 97 ; Load #$97.b into Y register [Writes: Y Index] [Flags: ZN]
	lda ($97.b,X)		; A1 97 ; Load accumulator ($97.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($97.b,X)		; A1 97 ; Load accumulator ($97.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($97.b,X)		; A1 97 ; Load accumulator ($97.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($97.b,X)		; A1 97 ; Load accumulator ($97.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($1F.b,X)		; A1 1F ; Load accumulator ($1F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $97.b		; A4 97 ; Load $97.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda ($97.b,X)		; A1 97 ; Load accumulator ($97.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($24.b,X)		; A1 24 ; Load accumulator ($24.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: ZN]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc ($0D.b,S),Y		; F3 0D ; Subtract with carry (stack relative indirect indexed) ($0D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F306.w,Y		; F9 06 F3 ; Subtract with carry $F306.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0020.w		; 0D 20 00 ; Logical OR $0020.w with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($1D.b,X)		; 01 1D ; Logical OR ($1D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($AF.b,X)		; 01 AF ; Logical OR ($AF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy $7EF3.w		; CC F3 7E ; Compare $7EF3.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$0E.b		; C9 0E ; Compare #$0E.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $CC, $05		; 82 CC 05 ; Branch always long to $82, $CC, $05 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $9FB5.w,Y		; D9 B5 9F ; Compare accumulator $9FB5.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $F4		; 10 F4 ; Branch if plus to $10, $F4 [Flow: branch]
	.db $82, $48, $00		; 82 48 00 ; Branch always long to $82, $48, $00 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $3D		; D0 3D ; Branch if not equal to $D0, $3D [Flow: branch]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $33		; D0 33 ; Branch if not equal to $D0, $33 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	dec $02CD.w		; CE CD 02 ; Decrement $02CD.w [Flags: ZN]
	.db $10, $2C		; [PATTERN: Memory clearing operation] 10 2C ; Branch if plus to $10, $2C [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	jsl $07F46F.l		; 22 6F F4 07 ; Jump to subroutine long $07F46F.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	stz $02CD.w		; 9C CD 02 ; Store zero to $02CD.w
	stz $02CE.w		; 9C CE 02 ; Store zero to $02CE.w
	.db $80, $1C		; 80 1C ; Branch always to $80, $1C [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $9FB8.w,Y		; B9 B8 9F ; Load $9FB8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $02CD.w		; 8D CD 02 ; Store accumulator to $02CD.w [Reads: Accumulator]
	lda $9FBE.w,Y		; B9 BE 9F ; Load $9FBE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $0FFDAA.l		; 22 AA FD 0F ; Jump to subroutine long $0FFDAA.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	lda $7EF3D3.l		; AF D3 F3 7E ; Load long $7EF3D3.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $A8, $00		; 82 A8 00 ; Branch always long to $82, $A8, $00 [Flow: branch]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	.db $80, $17		; 80 17 ; Branch always to $80, $17 [Flow: branch]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $92, $00		; 82 92 00 ; Branch always long to $82, $92, $00 [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $2F		; F0 2F ; Branch if equal to $F0, $2F [Flow: branch]
	lda $5B.b		; A5 5B ; Load $5B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $ED		; D0 ED ; Branch if not equal to $D0, $ED [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $7C		; F0 7C ; Branch if equal to $F0, $7C [Flow: branch]
	bit $0308.w		; 2C 08 03 ; Test bits $0308.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	.db $30, $77		; 30 77 ; Branch if minus to $30, $77 [Flow: branch]
	lda $02F9.w		; AD F9 02 ; Load $02F9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $72		; D0 72 ; Branch if not equal to $D0, $72 [Flow: branch]
	lda $02D0.w		; AD D0 02 ; Load $02D0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $6D		; D0 6D ; Branch if not equal to $D0, $6D [Flow: branch]
	ldx $02CF.w		; AE CF 02 ; Load $02CF.w into X register [Writes: X Index] [Flags: ZN]
	lda $1A50.w,X		; BD 50 1A ; Load $1A50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	.db $10, $63		; 10 63 ; Branch if plus to $10, $63 [Flow: branch]
	lda $F6.b		; A5 F6 ; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $5D		; F0 5D ; Branch if equal to $F0, $5D [Flow: branch]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $4B		; F0 4B ; Branch if equal to $F0, $4B [Flow: branch]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $47		; F0 47 ; Branch if equal to $F0, $47 [Flow: branch]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $43		; F0 43 ; Branch if equal to $F0, $43 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04B4.w		; 8D B4 04 ; Store accumulator to $04B4.w [Reads: Accumulator]
	lda #$BB.b		; A9 BB ; Load #$BB.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04B5.w		; 8D B5 04 ; Store accumulator to $04B5.w [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3D3.l		; 8F D3 F3 7E ; Store accumulator (long) $7EF3D3.l [Reads: Accumulator]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02D2.w		; 8D D2 02 ; Store accumulator to $02D2.w [Reads: Accumulator]
	ldx $02CF.w		; AE CF 02 ; Load $02CF.w into X register [Writes: X Index] [Flags: ZN]
	lda $1A00.w,X		; BD 00 1A ; Load $1A00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EF3CD.l		; 8F CD F3 7E ; Store accumulator (long) $7EF3CD.l [Reads: Accumulator]
	lda $1A14.w,X		; BD 14 1A ; Load $1A14.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EF3CE.l		; 8F CE F3 7E ; Store accumulator (long) $7EF3CE.l [Reads: Accumulator]
	lda $1A28.w,X		; BD 28 1A ; Load $1A28.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EF3CF.l		; 8F CF F3 7E ; Store accumulator (long) $7EF3CF.l [Reads: Accumulator]
	lda $1A3C.w,X		; BD 3C 1A ; Load $1A3C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EF3D0.l		; 8F D0 F3 7E ; Store accumulator (long) $7EF3D0.l [Reads: Accumulator]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EF3D2.l		; 8F D2 F3 7E ; Store accumulator (long) $7EF3D2.l [Reads: Accumulator]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EF3D1.l		; 8F D1 F3 7E ; Store accumulator (long) $7EF3D1.l [Reads: Accumulator]
	.db $82, $D1, $01		; 82 D1 01 ; Branch always long to $82, $D1, $01 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda $02E4.w		; AD E4 02 ; Load $02E4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	ldx $10.b		; A6 10 ; Load $10.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldy $11.b		; A4 11 ; Load $11.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cpy #$0A.b		; C0 0A ; Compare #$0A.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	cpy #$23.b		; C0 23 ; Compare #$23.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	cpy #$01.b		; C0 01 ; Compare #$01.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $85, $00		; 82 85 00 ; Branch always long to $82, $85, $00 [Flow: branch]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $31.b		; 05 31 ; Logical OR $31.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $7F		; F0 7F ; Branch if equal to $F0, $7F [Flow: branch]
	ldx $02D3.w		; AE D3 02 ; Load $02D3.w into X register [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$14.b		; E0 14 ; Compare #$14.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	stx $02D3.w		; 8E D3 02 ; Store X register to $02D3.w [Reads: X Index]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $01.b		; 64 01 ; Store zero to $01.b
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1A50.w,X		; 9D 50 1A ; Store accumulator to $1A50.w,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1A00.w,X		; 9D 00 1A ; Store accumulator to $1A00.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1A14.w,X		; 9D 14 1A ; Store accumulator to $1A14.w,X [Reads: Accumulator, X Index]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1A28.w,X		; 9D 28 1A ; Store accumulator to $1A28.w,X [Reads: Accumulator, X Index]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1A3C.w,X		; 9D 3C 1A ; Store accumulator to $1A3C.w,X [Reads: Accumulator, X Index]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $1A64.w,X		; 9D 64 1A ; Store accumulator to $1A64.w,X [Reads: Accumulator, X Index]
	ldy $EE.b		; A4 EE ; Load $EE.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $9EF8.w,Y		; B9 F8 9E ; Load $9EF8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $1A64.w,X		; 1D 64 1A ; OR accumulator with memory $1A64.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1A64.w,X		; 9D 64 1A ; Store accumulator to $1A64.w,X [Reads: Accumulator, X Index]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	ldy #$20.b		; A0 20 ; Load #$20.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $80, $1E		; 80 1E ; Branch always to $80, $1E [Flow: branch]
	cmp #$13.b		; C9 13 ; Compare #$13.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $037E.w		; AD 7E 03 ; Load $037E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $1A64.w,X		; 1D 64 1A ; OR accumulator with memory $1A64.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1A64.w,X		; 9D 64 1A ; Store accumulator to $1A64.w,X [Reads: Accumulator, X Index]
	ldy #$80.b		; A0 80 ; Load #$80.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0351.w		; AD 51 03 ; Load $0351.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1A64.w,X		; 1D 64 1A ; OR accumulator with memory $1A64.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1A64.w,X		; 9D 64 1A ; Store accumulator to $1A64.w,X [Reads: Accumulator, X Index]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jmp ($9F99.w,X)		; 7C 99 9F ; Jump indirect indexed to ($9F99.w,X) [Reads: X Index] [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $02E4.w		; AD E4 02 ; Load $02E4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	ldx $10.b		; A6 10 ; Load $10.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldy $11.b		; A4 11 ; Load $11.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cpy #$0A.b		; C0 0A ; Compare #$0A.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	cpy #$23.b		; C0 23 ; Compare #$23.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	cpy #$01.b		; C0 01 ; Compare #$01.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $F3, $00		; 82 F3 00 ; Branch always long to $82, $F3, $00 [Flow: branch]
	jsr $A59E.w		; 20 9E A5 ; Jump to subroutine at $A59E.w [Writes: Stack Pointer] [Flow: call]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	lda $031F.w		; AD 1F 03 ; Load $031F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	lda $02CF.w		; AD CF 02 ; Load $02CF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp #$14.b		; C9 14 ; Compare #$14.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1EE6D0.l		; 22 D0 E6 1E ; Jump to subroutine long $1EE6D0.l [Writes: Stack Pointer] [Flow: call]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $4E		; D0 4E ; Branch if not equal to $D0, $4E [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$00AC.w		; C9 AC 00 ; Compare #$00AC.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $45		; D0 45 ; Branch if not equal to $D0, $45 [Flow: branch]
	lda $7EF0CA.l		; AF CA F0 7E ; Load long $7EF0CA.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $3C		; F0 3C ; Branch if equal to $F0, $3C [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	jsl $099E90.l		; 22 90 9E 09 ; Jump to subroutine long $099E90.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $34		; 90 34 ; Branch if carry clear to $90, $34 [Flow: branch]
	ldx $02CF.w		; AE CF 02 ; Load $02CF.w into X register [Writes: X Index] [Flags: ZN]
	lda $1A28.w,X		; BD 28 1A ; Load $1A28.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $1A3C.w,X		; BD 3C 1A ; Load $1A3C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $1A00.w,X		; BD 00 1A ; Load $1A00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $1A14.w,X		; BD 14 1A ; Load $1A14.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3CC.l		; [PATTERN: Memory clearing operation] 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	jsl $1DA03C.l		; 22 3C A0 1D ; Jump to subroutine long $1DA03C.l [Writes: Stack Pointer] [Flow: call]
	inc $0468.w		; EE 68 04 ; Increment $0468.w [Flags: ZN]
	stz $068E.w		; 9C 8E 06 ; Store zero to $068E.w
	stz $0690.w		; 9C 90 06 ; Store zero to $0690.w
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	ldy $5D.b		; A4 5D ; Load $5D.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $02D0.w		; AD D0 02 ; Load $02D0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	cpy #$13.b		; C0 13 ; Compare #$13.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda $037E.w		; AD 7E 03 ; Load $037E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02D0.w		; 8D D0 02 ; Store accumulator to $02D0.w [Reads: Accumulator]
	.db $80, $3E		; 80 3E ; Branch always to $80, $3E [Flow: branch]
	cpy #$13.b		; C0 13 ; Compare #$13.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $3A		; F0 3A ; Branch if equal to $F0, $3A [Flow: branch]
	lda $02D1.w		; AD D1 02 ; Load $02D1.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $02CF.w		; CD CF 02 ; Compare $02CF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $42		; D0 42 ; Branch if not equal to $D0, $42 [Flow: branch]
	stz $02D0.w		; 9C D0 02 ; Store zero to $02D0.w
	ldx $02CF.w		; AE CF 02 ; Load $02CF.w into X register [Writes: X Index] [Flags: ZN]
	lda $1A50.w,X		; BD 50 1A ; Load $1A50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $21		; F0 21 ; Branch if equal to $F0, $21 [Flow: branch]
	.db $30, $1F		; 30 1F ; Branch if minus to $30, $1F [Flow: branch]
	lda $02D3.w		; AD D3 02 ; Load $02D3.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $02CF.w		; CD CF 02 ; Compare $02CF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $2D		; D0 2D ; Branch if not equal to $D0, $2D [Flow: branch]
	stz $1A50.w,X		; 9E 50 1A ; Store zero to $1A50.w,X [Reads: X Index]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1A00.w,X		; 9D 00 1A ; Store accumulator to $1A00.w,X [Reads: Accumulator, X Index]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1A14.w,X		; 9D 14 1A ; Store accumulator to $1A14.w,X [Reads: Accumulator, X Index]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1A28.w,X		; 9D 28 1A ; Store accumulator to $1A28.w,X [Reads: Accumulator, X Index]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1A3C.w,X		; 9D 3C 1A ; Store accumulator to $1A3C.w,X [Reads: Accumulator, X Index]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $31.b		; 05 31 ; Logical OR $31.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	lda $02D3.w		; AD D3 02 ; Load $02D3.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0F.b		; E9 0F ; Subtract #$0F.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$14.b		; 69 14 ; Add #$14.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp $02CF.w		; CD CF 02 ; Compare $02CF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	ldx $02CF.w		; AE CF 02 ; Load $02CF.w into X register [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$14.b		; E0 14 ; Compare #$14.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	stx $02CF.w		; 8E CF 02 ; Store X register to $02CF.w [Reads: X Index]
	.db $82, $56, $06		; 82 56 06 ; Branch always long to $82, $56, $06 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF3D1.l		; AF D1 F3 7E ; Load long $7EF3D1.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $1B.b		; C5 1B ; Compare $1B.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $D0, $F7		; D0 F7 ; Branch if not equal to $D0, $F7 [Flow: branch]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $28		; D0 28 ; Branch if not equal to $D0, $28 [Flow: branch]
	jsr $A48E.w		; 20 8E A4 ; Jump to subroutine at $A48E.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $23		; B0 23 ; Branch if carry set to $B0, $23 [Flow: branch]
	jsl $099EFC.l		; 22 FC 9E 09 ; Jump to subroutine long $099EFC.l [Writes: Stack Pointer] [Flow: call]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EF3D1.l		; 8F D1 F3 7E ; Store accumulator (long) $7EF3D1.l [Reads: Accumulator]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$FE.b		; A9 FE ; Load #$FE.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04B4.w		; 8D B4 04 ; Store accumulator to $04B4.w [Reads: Accumulator]
	stz $04B5.w		; 9C B5 04 ; Store zero to $04B5.w
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3D3.l		; 8F D3 F3 7E ; Store accumulator (long) $7EF3D3.l [Reads: Accumulator]
	.db $82, $20, $06		; 82 20 06 ; Branch always long to $82, $20, $06 [Flow: branch]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda $04B4.w		; AD B4 04 ; Load $04B4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$3A.b		; A9 3A ; Load #$3A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $098DF9.l		; 22 F9 8D 09 ; Jump to subroutine long $098DF9.l [Writes: Stack Pointer] [Flow: call]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3D3.l		; 8F D3 F3 7E ; Store accumulator (long) $7EF3D3.l [Reads: Accumulator]
	.db $82, $47, $01		; 82 47 01 ; Branch always long to $82, $47, $01 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AD.b		; 00 AD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $02.b		; E4 02 ; Compare $02.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	ldx $10.b		; A6 10 ; Load $10.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ldy $11.b		; A4 11 ; Load $11.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cpy #$0A.b		; C0 0A ; Compare #$0A.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	cpy #$23.b		; C0 23 ; Compare #$23.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	cpy #$01.b		; C0 01 ; Compare #$01.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $D0, $00		; 82 D0 00 ; Branch always long to $82, $D0, $00 [Flow: branch]
	lda $5E.b		; A5 5E ; Load $5E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $5E.b		; 85 5E ; Store accumulator to $5E.b [Reads: Accumulator]
	jsr $A59E.w		; 20 9E A5 ; Jump to subroutine at $A59E.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	ldx $02CF.w		; AE CF 02 ; Load $02CF.w into X register [Writes: X Index] [Flags: ZN]
	lda $1A50.w,X		; BD 50 1A ; Load $1A50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	lda $02CF.w		; AD CF 02 ; Load $02CF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $02D3.w		; CD D3 02 ; Compare $02D3.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $94, $00		; 82 94 00 ; Branch always long to $82, $94, $00 [Flow: branch]
	.db $82, $5D, $00		; 82 5D 00 ; Branch always long to $82, $5D, $00 [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda $02D3.w		; AD D3 02 ; Load $02D3.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $02CF.w		; CD CF 02 ; Compare $02CF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $02CF.w		; 8E CF 02 ; Store X register to $02CF.w [Reads: X Index]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02CF.w		; 8D CF 02 ; Store accumulator to $02CF.w [Reads: Accumulator]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $38		; F0 38 ; Branch if equal to $F0, $38 [Flow: branch]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $A309.w,X		; BD 09 A3 ; Load $A309.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02D2.w		; 8D D2 02 ; Store accumulator to $02D2.w [Reads: Accumulator]
	ldx $02CF.w		; AE CF 02 ; Load $02CF.w into X register [Writes: X Index] [Flags: ZN]
	lda $1A00.w,X		; BD 00 1A ; Load $1A00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EF3CD.l		; 8F CD F3 7E ; Store accumulator (long) $7EF3CD.l [Reads: Accumulator]
	lda $1A14.w,X		; BD 14 1A ; Load $1A14.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EF3CE.l		; 8F CE F3 7E ; Store accumulator (long) $7EF3CE.l [Reads: Accumulator]
	lda $1A28.w,X		; BD 28 1A ; Load $1A28.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EF3CF.l		; 8F CF F3 7E ; Store accumulator (long) $7EF3CF.l [Reads: Accumulator]
	lda $1A3C.w,X		; BD 3C 1A ; Load $1A3C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EF3D0.l		; 8F D0 F3 7E ; Store accumulator (long) $7EF3D0.l [Reads: Accumulator]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EF3D2.l		; 8F D2 F3 7E ; Store accumulator (long) $7EF3D2.l [Reads: Accumulator]
	.db $80, $54		; 80 54 ; Branch always to $80, $54 [Flow: branch]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $31.b		; 05 31 ; Logical OR $31.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $35		; D0 35 ; Branch if not equal to $D0, $35 [Flow: branch]
	lda $02D3.w		; AD D3 02 ; Load $02D3.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $02CF.w		; CD CF 02 ; Compare $02CF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $2D		; F0 2D ; Branch if equal to $F0, $2D [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$09.b		; E9 09 ; Subtract #$09.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$14.b		; 69 14 ; Add #$14.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp $02CF.w		; CD CF 02 ; Compare $02CF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	.db $82, $1D, $00		; 82 1D 00 ; Branch always long to $82, $1D, $00 [Flow: branch]
	lda $02D3.w		; AD D3 02 ; Load $02D3.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$14.b		; E9 14 ; Subtract #$14.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$14.b		; 69 14 ; Add #$14.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp $02CF.w		; CD CF 02 ; Compare $02CF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	ldx $02CF.w		; AE CF 02 ; Load $02CF.w into X register [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$14.b		; E0 14 ; Compare #$14.b with X register [Reads: X Index] [Flags: ZNC]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	stx $02CF.w		; 8E CF 02 ; Store X register to $02CF.w [Reads: X Index]
	.db $82, $F8, $04		; 82 F8 04 ; Branch always long to $82, $F8, $04 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $85		; 10 85 ; Branch if plus to $10, $85 [Flow: branch]
	lsr $72AD.w,X		; 5E AD 72 ; Logical shift right $72AD.w,X [Reads: X Index] [Flags: ZNC]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $24		; D0 24 ; Branch if not equal to $D0, $24 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$13.b		; C9 13 ; Compare #$13.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	jsr $A48E.w		; 20 8E A4 ; Jump to subroutine at $A48E.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $11		; B0 11 ; Branch if carry set to $B0, $11 [Flow: branch]
	jsl $099EFC.l		; 22 FC 9E 09 ; Jump to subroutine long $099EFC.l [Writes: Stack Pointer] [Flow: call]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $A410.w,X		; BD 10 A4 ; Load $A410.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF3D2.l		; AF D2 F3 7E ; Load long $7EF3D2.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cpx $EE.b		; E4 EE ; Compare $EE.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx $EE.b		; A6 EE ; Load $EE.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $9EF8.w,X		; BD F8 9E ; Load $9EF8.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $65.b		; 85 65 ; Store accumulator to $65.b [Reads: Accumulator]
	stz $64.b		; 64 64 ; Store zero to $64.b
	lda $7EF3CD.l		; AF CD F3 7E ; Load long $7EF3CD.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF3CE.l		; AF CE F3 7E ; Load long $7EF3CE.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $7EF3CF.l		; AF CF F3 7E ; Load long $7EF3CF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $7EF3D0.l		; AF D0 F3 7E ; Load long $7EF3D0.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: ZN]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $82, $C9, $04		; 82 C9 04 ; Branch always long to $82, $C9, $04 [Flow: branch]
	dec $02D2.w		; CE D2 02 ; Decrement $02D2.w [Flags: ZN]
	.db $10, $31		; 10 31 ; Branch if plus to $10, $31 [Flow: branch]
	stz $02D2.w		; 9C D2 02 ; Store zero to $02D2.w
.ACCU 16
	rep #$20		; C2 20
	lda $7EF3CD.l		; AF CD F3 7E ; Load long $7EF3CD.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0001.w		; E9 01 00 ; Subtract #$0001.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cmp $20.b		; C5 20 ; Compare $20.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $B0, $20		; B0 20 ; Branch if carry set to $B0, $20 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0014.w		; 69 14 00 ; Add #$0014.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp $20.b		; C5 20 ; Compare $20.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $90, $18		; 90 18 ; Branch if carry clear to $90, $18 [Flow: branch]
	lda $7EF3CF.l		; AF CF F3 7E ; Load long $7EF3CF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0001.w		; E9 01 00 ; Subtract #$0001.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cmp $22.b		; C5 22 ; Compare $22.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0014.w		; 69 14 00 ; Add #$0014.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp $22.b		; C5 22 ; Compare $22.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc ($00.b),Y		; F1 00 ; Subtract with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor ($00.b),Y		; 51 00 ; Exclusive OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	brk $AB.b		; 00 AB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0288.w,X		; 1E 88 02 ; Arithmetic shift left $0288.w,X [Reads: X Index] [Flags: ZNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $0400.w,Y		; 99 00 04 ; Store accumulator to $0400.w,Y [Reads: Accumulator, Y Index]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $02F0.w,X		; 1E F0 02 ; Arithmetic shift left $02F0.w,X [Reads: X Index] [Flags: ZNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $03B8.w,X		; 1E B8 03 ; Arithmetic shift left $03B8.w,X [Reads: X Index] [Flags: ZNC]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $025B.w		; 0C 5B 02 ; Test and set bits $025B.w [Reads: Accumulator] [Flags: Z]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($00.b,X)		; 21 00 ; Logical AND ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sed		; F8 ; Set decimal flag [Flags: D]
	tsb $039D.w		; 0C 9D 03 ; Test and set bits $039D.w [Reads: Accumulator] [Flags: Z]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($00.b,X)		; 21 00 ; Logical AND ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	tsb $0238.w		; 0C 38 02 ; Test and set bits $0238.w [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	and ($00.b,X)		; 21 00 ; Logical AND ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $30, $0A		; 30 0A ; Branch if minus to $30, $0A [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($50.b,X)		; 01 50 ; Logical OR ($50.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($F8.b,X)		; 01 F8 ; Logical OR ($F8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D8.b		; 00 D8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	jsr ($0116.w,X)		; FC 16 01 ; Jump to subroutine indirect indexed ($0116.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $7C.b,X		; 15 7C ; OR accumulator with memory $7C.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $01.b,X		; 16 01 ; Arithmetic shift left $01.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FC.b		; 05 FC ; Logical OR $FC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5E.b		; 00 5E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $30.b,S		; 03 30 ; OR accumulator with stack relative $30.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $9D.b		; 00 9D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $50.b		; 06 50 ; Arithmetic shift left $50.b [Reads: Direct Page] [Flags: ZNC]
	ora $FF0000.l		; 0F 00 00 FF ; OR accumulator with memory (long) $FF0000.l [Writes: Accumulator] [Flags: ZN]
	sbc $C8000A.l,X		; FF 0A 00 C8 ; Subtract with carry (long,X) $C8000A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $78.b		; 06 78 ; Arithmetic shift left $78.b [Reads: Direct Page] [Flags: ZNC]
	ora $0001.w		; 0D 01 00 ; Logical OR $0001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $000AFF.l,X		; FF FF 0A 00 ; Subtract with carry (long,X) $000AFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $78.b		; 06 78 ; Arithmetic shift left $78.b [Reads: Direct Page] [Flags: ZNC]
	tsb $0002.w		; 0C 02 00 ; Test and set bits $0002.w [Reads: Accumulator] [Flags: Z]
	sbc $000AFF.l,X		; FF FF 0A 00 ; Subtract with carry (long,X) $000AFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5A.b		; 00 5A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6E.b		; 00 6E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($D0.b),Y		; 11 D0 ; OR accumulator with memory ($D0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldx #$000C.w		; A2 0C 00 ; Load #$000C.w into X register [Writes: X Index] [Flags: ZN]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $A4C8.w,X		; DD C8 A4 ; Compare accumulator $A4C8.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $17		; F0 17 ; Branch if equal to $F0, $17 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F7		; 10 F7 ; Branch if plus to $10, $F7 [Flow: branch]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	ldx #$0004.w		; A2 04 00 ; Load #$0004.w into X register [Writes: X Index] [Flags: ZN]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $A54E.w,X		; DD 4E A5 ; Compare accumulator $A54E.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $4B		; F0 4B ; Branch if equal to $F0, $4B [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F7		; 10 F7 ; Branch if plus to $10, $F7 [Flow: branch]
	.db $82, $FA, $00		; 82 FA 00 ; Branch always long to $82, $FA, $00 [Flow: branch]
	lda $A588.w,X		; BD 88 A5 ; Load $A588.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $A586.w,X		; BD 86 A5 ; Load $A586.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	stx $0C.b		; 86 0C ; Store X register to $0C.b [Reads: X Index]
	stz $0A.b		; 64 0A ; Store zero to $0A.b
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $A4DE.w,X		; DD DE A4 ; Compare accumulator $A4DE.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	lda $A4D6.w,X		; BD D6 A4 ; Load $A4D6.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $A4D8.w,X		; BD D8 A4 ; Load $A4D8.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $A4DA.w,X		; BD DA A4 ; Load $A4DA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $A4DC.w,X		; BD DC A4 ; Load $A4DC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsr $AC26.w		; 20 26 AC ; Jump to subroutine at $AC26.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $53		; B0 53 ; Branch if carry set to $B0, $53 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000A.w		; 69 0A 00 ; Add #$000A.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cpx $08.b		; E4 08 ; Compare $08.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $D0, $C8		; D0 C8 ; Branch if not equal to $D0, $C8 [Flow: branch]
	.db $82, $B6, $00		; 82 B6 00 ; Branch always long to $82, $B6, $00 [Flow: branch]
	lda $A598.w,X		; BD 98 A5 ; Load $A598.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $A596.w,X		; BD 96 A5 ; Load $A596.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	stx $0C.b		; 86 0C ; Store X register to $0C.b [Reads: X Index]
	stz $0A.b		; 64 0A ; Store zero to $0A.b
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $A55C.w,X		; DD 5C A5 ; Compare accumulator $A55C.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	lda $A554.w,X		; BD 54 A5 ; Load $A554.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $A556.w,X		; BD 56 A5 ; Load $A556.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $A558.w,X		; BD 58 A5 ; Load $A558.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $A55A.w,X		; BD 5A A5 ; Load $A55A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsr $AC26.w		; 20 26 AC ; Jump to subroutine at $AC26.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $0F		; B0 0F ; Branch if carry set to $B0, $0F [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000A.w		; 69 0A 00 ; Add #$000A.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cpx $08.b		; E4 08 ; Compare $08.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $D0, $C8		; D0 C8 ; Branch if not equal to $D0, $C8 [Flow: branch]
	.db $80, $73		; 80 73 ; Branch always to $80, $73 [Flow: branch]
.INDEX 8
	sep #$10		; E2 10
.ACCU 16
	rep #$20		; C2 20
	lda $02F2.w		; AD F2 02 ; Load $02F2.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and $06.b		; 25 06 ; Logical AND $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $68		; D0 68 ; Branch if not equal to $D0, $68 [Flow: branch]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $02F2.w		; 0C F2 02 ; Test and set bits $02F2.w [Reads: Accumulator] [Flags: Z]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $2C		; F0 2C ; Branch if equal to $F0, $2C [Flow: branch]
	cmp #$009D.w		; C9 9D 00 ; Compare #$009D.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cmp #$0028.w		; C9 28 00 ; Compare #$0028.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda $02CF.w		; AD CF 02 ; Load $02CF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp #$14.b		; C9 14 ; Compare #$14.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1EE938.l		; 22 38 E9 1E ; Jump to subroutine long $1EE938.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	jsl $0FFDAA.l		; 22 AA FD 0F ; Jump to subroutine long $0FFDAA.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $2D		; 80 2D ; Branch always to $80, $2D [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $02CF.w		; AD CF 02 ; Load $02CF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp #$14.b		; C9 14 ; Compare #$14.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	jsl $1EE66B.l		; 22 6B E6 1E ; Jump to subroutine long $1EE66B.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $13		; 80 13 ; Branch always to $80, $13 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $7EF280.l,X		; BF 80 F2 7E ; Load long $7EF280.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $1EE6C7.l		; 22 C7 E6 1E ; Jump to subroutine long $1EE6C7.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $00C0.w		; 20 C0 00 ; Jump to subroutine at $00C0.w [Writes: Stack Pointer] [Flow: call]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	mvp $C0,$20		; 44 20 C0 ; Move block positive $C0,$20 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $80, $44		; 80 44 ; Branch always to $80, $44 [Flow: branch]
	jsr $00E0.w		; 20 E0 00 ; Jump to subroutine at $00E0.w [Writes: Stack Pointer] [Flow: call]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cpx #$44.b		; E0 44 ; Compare #$44.b with X register [Reads: X Index] [Flags: ZNC]
	jsr $04E0.w		; 20 E0 04 ; Jump to subroutine at $04E0.w [Writes: Stack Pointer] [Flow: call]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $40.b		; 04 40 ; Test and set bits $40.b [Reads: Accumulator] [Flags: Z]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cpx #$40.b		; E0 40 ; Compare #$40.b with X register [Reads: X Index] [Flags: ZNC]
	inc $00FF.w,X		; FE FF 00 ; Increment memory $00FF.w,X [Reads: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $010000.l,X		; FF 00 00 01 ; Subtract with carry (long,X) $010000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $010000.l,X		; FF 00 00 01 ; Subtract with carry (long,X) $010000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $010000.l,X		; FF 00 00 01 ; Subtract with carry (long,X) $010000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $010000.l,X		; FF 00 00 01 ; Subtract with carry (long,X) $010000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000001.l,X		; FF 01 00 00 ; Subtract with carry (long,X) $000001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000001.l,X		; FF 01 00 00 ; Subtract with carry (long,X) $000001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($D8.b,X)		; [PATTERN: Memory clearing operation] 01 D8 ; Logical OR ($D8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $D8.b		; 24 D8 ; Test bits $D8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	stz $D9.b		; 64 D9 ; Store zero to $D9.b
	bit $D9.b		; 24 D9 ; Test bits $D9.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	stz $DA.b		; 64 DA ; Store zero to $DA.b
	bit $DA.b		; 24 DA ; Test bits $DA.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	stz $C8.b		; 64 C8 ; Store zero to $C8.b
	jsl $C962C8.l		; 22 C8 62 C9 ; Jump to subroutine long $C962C8.l [Writes: Stack Pointer] [Flow: call]
	jsl $CA62C9.l		; 22 C9 62 CA ; Jump to subroutine long $CA62C9.l [Writes: Stack Pointer] [Flow: call]
	jsl $7062CA.l		; 22 CA 62 70 ; Jump to subroutine long $7062CA.l [Writes: Stack Pointer] [Flow: call]
	ora ($C0.b,X)		; 01 C0 ; Logical OR ($C0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $AD.b		; 04 AD ; Test and set bits $AD.b [Reads: Accumulator] [Flags: Z]
	sbc $F002.w,Y		; F9 02 F0 ; Subtract with carry $F002.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldx $02CF.w		; AE CF 02 ; Load $02CF.w into X register [Writes: X Index] [Flags: ZN]
	lda $1A50.w,X		; BD 50 1A ; Load $1A50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0E.b		; C9 0E ; Compare #$0E.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	ldy $EE.b		; A4 EE ; Load $EE.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $9EF8.w,Y		; B9 F8 9E ; Load $9EF8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	lda $1A64.w,X		; BD 64 1A ; Load $1A64.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $65.b		; 85 65 ; Store accumulator to $65.b [Reads: Accumulator]
	stz $64.b		; 64 64 ; Store zero to $64.b
	ldx $02CF.w		; AE CF 02 ; Load $02CF.w into X register [Writes: X Index] [Flags: ZN]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	lda $1A00.w,X		; BD 00 1A ; Load $1A00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $1A14.w,X		; BD 14 1A ; Load $1A14.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $1A28.w,X		; BD 28 1A ; Load $1A28.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $1A3C.w,X		; BD 3C 1A ; Load $1A3C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda $1A64.w,X		; BD 64 1A ; Load $1A64.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	stz $72.b		; 64 72 ; Store zero to $72.b
	cpy #$08.b		; C0 08 ; Compare #$08.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $2D		; D0 2D ; Branch if not equal to $D0, $2D [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $1F		; D0 1F ; Branch if not equal to $D0, $1F [Flow: branch]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $033C.w		; AD 3C 03 ; Load $033C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $033D.w		; 0D 3D 03 ; Logical OR $033D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $033E.w		; 0D 3E 03 ; Logical OR $033E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $033F.w		; 0D 3F 03 ; Logical OR $033F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $80, $6F		; 80 6F ; Branch always to $80, $6F [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $80, $67		; 80 67 ; Branch always to $80, $67 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0E.b		; C9 0E ; Compare #$0E.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $51		; F0 51 ; Branch if equal to $F0, $51 [Flow: branch]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $4D		; F0 4D ; Branch if equal to $F0, $4D [Flow: branch]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $49		; F0 49 ; Branch if equal to $F0, $49 [Flow: branch]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $4C		; F0 4C ; Branch if equal to $F0, $4C [Flow: branch]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $7EF3D3.l		; AF D3 F3 7E ; Load long $7EF3D3.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $2D		; D0 2D ; Branch if not equal to $D0, $2D [Flow: branch]
	lda $02E4.w		; AD E4 02 ; Load $02E4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $28		; D0 28 ; Branch if not equal to $D0, $28 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$23.b		; C9 23 ; Compare #$23.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$0E.b		; C9 0E ; Compare #$0E.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $31.b		; 05 31 ; Logical OR $31.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $0FB3.w		; AD B3 0F ; Load $0FB3.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	.db $B0, $0E		; B0 0E ; Branch if carry set to $B0, $0E [Flow: branch]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0003.w		; 29 03 00 ; Logical AND #$0003.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda $A8F1.w,Y		; B9 F1 A8 ; Load $A8F1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	lda $A8F5.w,Y		; B9 F5 A8 ; Load $A8F5.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0A20.w		; 69 20 0A ; Add #$0A20.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0800.w		; 69 00 08 ; Add #$0800.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	.db $80, $19		; 80 19 ; Branch always to $80, $19 [Flow: branch]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$C0.b		; 29 C0 ; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $8B, $00		; 82 8B 00 ; Branch always long to $82, $8B, $00 [Flow: branch]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: ZN]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $02D7.w		; AD D7 02 ; Load $02D7.w into accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $02D7.w		; 8D D7 02 ; Store accumulator to $02D7.w [Reads: Accumulator]
	lda $02D7.w		; AD D7 02 ; Load $02D7.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $05.b		; 65 05 ; Add $05.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	stz $74.b		; 64 74 ; Store zero to $74.b
.ACCU 8
	sep #$20		; E2 20
	jsr $ABF9.w		; 20 F9 AB ; Jump to subroutine at $ABF9.w [Writes: Stack Pointer] [Flow: call]
	lda $A8D9.w,X		; BD D9 A8 ; Load $A8D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $A8DA.w,X		; BD DA A8 ; Load $A8DA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $75.b		; 05 75 ; Logical OR $75.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	stz $74.b		; 64 74 ; Store zero to $74.b
.ACCU 8
	sep #$20		; E2 20
	jsr $ABF9.w		; 20 F9 AB ; Jump to subroutine at $ABF9.w [Writes: Stack Pointer] [Flow: call]
	lda $A8DB.w,X		; BD DB A8 ; Load $A8DB.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $A8DC.w,X		; BD DC A8 ; Load $A8DC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $75.b		; 05 75 ; Logical OR $75.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $A8F9.w,X		; BD F9 A8 ; Load $A8F9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0ABD.w		; AD BD 0A ; Load $0ABD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $04B4.w		; AD B4 04 ; Load $04B4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $62		; F0 62 ; Branch if equal to $F0, $62 [Flow: branch]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $5E		; F0 5E ; Branch if equal to $F0, $5E [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $A8BD.w,X		; 7D BD A8 ; Add $A8BD.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $A6FD.w,X		; BD FD A6 ; Load $A6FD.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $A6FF.w,X		; BD FF A6 ; Load $A6FF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsr $ABF9.w		; 20 F9 AB ; Jump to subroutine at $ABF9.w [Writes: Stack Pointer] [Flow: call]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $A6CD.w,X		; BD CD A6 ; Load $A6CD.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0AE8.w		; 8D E8 0A ; Store accumulator to $0AE8.w [Reads: Accumulator]
	lda $A6CF.w,X		; BD CF A6 ; Load $A6CF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $72.b		; 05 72 ; Logical OR $72.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $75.b		; 05 75 ; Logical OR $75.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $A8BD.w,X		; 7D BD A8 ; Add $A8BD.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $A701.w,X		; BD 01 A7 ; Load $A701.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $A703.w,X		; BD 03 A7 ; Load $A703.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsr $ABF9.w		; 20 F9 AB ; Jump to subroutine at $ABF9.w [Writes: Stack Pointer] [Flow: call]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $A6CE.w,X		; BD CE A6 ; Load $A6CE.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0AEA.w		; 8D EA 0A ; Store accumulator to $0AEA.w [Reads: Accumulator]
	lda $A6CF.w,X		; BD CF A6 ; Load $A6CF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $72.b		; 05 72 ; Logical OR $72.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $75.b		; 05 75 ; Logical OR $75.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0180.w		; C9 80 01 ; Compare #$0180.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $14		; B0 14 ; Branch if carry set to $B0, $14 [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda #$00F0.w		; A9 F0 00 ; Load #$00F0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
.ACCU 8
	sep #$20		; E2 20
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0A.b		; 65 0A ; Add $0A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp #$001C.w		; C9 1C 00 ; Compare #$001C.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $18		; B0 18 ; Branch if carry set to $B0, $18 [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $02.b		; E5 02 ; Subtract $02.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp #$0018.w		; C9 18 00 ; Compare #$0018.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldx #$05.b		; A2 05 ; Load #$05.b into X register [Writes: X Index] [Flags: ZN]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$3E.b		; C9 3E ; Compare #$3E.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$2C.b		; C9 2C ; Compare #$2C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	stz $0646.w		; [PATTERN: Memory clearing operation] 9C 46 06 ; Store zero to $0646.w
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	stz $48.b		; 64 48 ; Store zero to $48.b
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $09		; 10 09 ; Branch if plus to $10, $09 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $02EC.w		; CD EC 02 ; Compare $02EC.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; [PATTERN: Memory clearing operation] 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $02EC.w		; CD EC 02 ; Compare $02EC.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $02EC.w		; 9C EC 02 ; Store zero to $02EC.w
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $C4		; 10 C4 ; Branch if plus to $10, $C4 [Flow: branch]
	lda $037A.w		; [PATTERN: Memory clearing operation] AD 7A 03 ; Load $037A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	stz $46.b		; 64 46 ; Store zero to $46.b
	stz $037A.w		; 9C 7A 03 ; Store zero to $037A.w
	stz $03F0.w		; [PATTERN: Memory clearing operation] 9C F0 03 ; Store zero to $03F0.w
	stz $02F2.w		; 9C F2 02 ; Store zero to $02F2.w
	stz $02F3.w		; 9C F3 02 ; Store zero to $02F3.w
	stz $035F.w		; 9C 5F 03 ; Store zero to $035F.w
	stz $03FC.w		; 9C FC 03 ; Store zero to $03FC.w
	stz $037B.w		; [PATTERN: Memory clearing operation] 9C 7B 03 ; Store zero to $037B.w
	stz $03FD.w		; 9C FD 03 ; Store zero to $03FD.w
	stz $0360.w		; 9C 60 03 ; Store zero to $0360.w
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$13.b		; C9 13 ; Compare #$13.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	lda $037A.w		; AD 7A 03 ; Load $037A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$FB.b		; 29 FB ; Logical AND #$FB.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $037A.w		; 8D 7A 03 ; Store accumulator to $037A.w [Reads: Accumulator]
	stz $037E.w		; 9C 7E 03 ; Store zero to $037E.w
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0BFA.w,X		; 9D FA 0B ; Store accumulator to $0BFA.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C0E.w,X		; 9D 0E 0C ; Store accumulator to $0C0E.w,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C04.w,X		; 9D 04 0C ; Store accumulator to $0C04.w,X [Reads: Accumulator, X Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0C18.w,X		; 9D 18 0C ; Store accumulator to $0C18.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda #$2E.b		; A9 2E ; Load #$2E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C4A.w,X		; 9D 4A 0C ; Store accumulator to $0C4A.w,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $08806F.l,X		; BF 6F 80 08 ; Load long $08806F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sta $0C90.w,X		; [PATTERN: Memory clearing operation] 9D 90 0C ; Store accumulator to $0C90.w,X [Reads: Accumulator, X Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03B1.w,X		; 9D B1 03 ; Store accumulator to $03B1.w,X [Reads: Accumulator, X Index]
	stz $0C54.w,X		; 9E 54 0C ; Store zero to $0C54.w,X [Reads: X Index]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	stz $039F.w,X		; [PATTERN: Memory clearing operation] 9E 9F 03 ; Store zero to $039F.w,X [Reads: X Index]
	stz $03A4.w,X		; 9E A4 03 ; Store zero to $03A4.w,X [Reads: X Index]
	stz $03EA.w,X		; 9E EA 03 ; Store zero to $03EA.w,X [Reads: X Index]
	stz $0280.w,X		; 9E 80 02 ; Store zero to $0280.w,X [Reads: X Index]
	stz $0646.w		; 9C 46 06 ; Store zero to $0646.w
	jsl $0DBB5E.l		; 22 5E BB 0D ; Jump to subroutine long $0DBB5E.l [Writes: Stack Pointer] [Flow: call]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $64.b		; 14 64 ; Test and reset bits $64.b [Reads: Accumulator] [Flags: Z]
	and ($8B.b)		; 32 8B ; AND accumulator with memory (indirect) ($8B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$34.b		; C9 34 ; Compare #$34.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $31		; F0 31 ; Branch if equal to $F0, $31 [Flow: branch]
	cmp #$35.b		; C9 35 ; Compare #$35.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $2D		; F0 2D ; Branch if equal to $F0, $2D [Flow: branch]
	cmp #$36.b		; C9 36 ; Compare #$36.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	cmp #$41.b		; C9 41 ; Compare #$41.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	cmp #$46.b		; C9 46 ; Compare #$46.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$47.b		; C9 47 ; Compare #$47.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $36		; D0 36 ; Branch if not equal to $D0, $36 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: ZN]
	cmp #$47.b		; C9 47 ; Compare #$47.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $17		; F0 17 ; Branch if equal to $F0, $17 [Flow: branch]
	lda #$2C.b		; A9 2C ; Load #$2C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$40.b		; E9 40 ; Subtract #$40.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$03.b		; 69 03 ; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$34.b		; E9 34 ; Subtract #$34.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $AD67.w,Y		; B9 67 AD ; Load $AD67.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $01.b		; 64 01 ; Store zero to $01.b
.ACCU 16
	rep #$20		; C2 20
	lda $7EF360.l		; AF 60 F3 7E ; Load long $7EF360.l into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $7EF360.l		; 8F 60 F3 7E ; Store accumulator (long) $7EF360.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	sec		; 38 ; Set carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: ZN]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$2A.b		; C9 2A ; Compare #$2A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	cmp #$2B.b		; C9 2B ; Compare #$2B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cmp #$31.b		; C9 31 ; Compare #$31.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$19.b		; C9 19 ; Compare #$19.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $DB		; 10 DB ; Branch if plus to $10, $DB [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$CF.b		; A9 CF ; Load #$CF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $AB4B8B.l,X		; DF 8B 4B AB ; Compare accumulator (long,X) $AB4B8B.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	lda $0C68.w,X		; BD 68 0C ; Load $0C68.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0C68.w,X		; 9D 68 0C ; Store accumulator to $0C68.w,X [Reads: Accumulator, X Index]
	inc $0C5E.w,X		; FE 5E 0C ; Increment memory $0C5E.w,X [Reads: X Index] [Flags: ZN]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	.db $80, $2C		; 80 2C ; Branch always to $80, $2C [Flow: branch]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBA84.l		; 22 84 BA 0D ; Jump to subroutine long $0DBA84.l [Writes: Stack Pointer] [Flow: call]
	jsl $08F6D9.l		; 22 D9 F6 08 ; Jump to subroutine long $08F6D9.l [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0C5E.w,X		; BD 5E 0C ; Load $0C5E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $08F6FE.l		; 22 FE F6 08 ; Jump to subroutine long $08F6FE.l [Writes: Stack Pointer] [Flow: call]
	lda $ADF1.w,X		; BD F1 AD ; Load $ADF1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $65.b		; 05 65 ; Logical OR $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Accumulator, Direct Page]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $4AA9FF.l,X		; FF FF A9 4A ; Subtract with carry (long,X) $4AA9FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $35		; 30 35 ; Branch if minus to $30, $35 [Flow: branch]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,Y		; 99 D0 0D ; Store accumulator to $0DD0.w,Y [Reads: Accumulator, Y Index]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,Y		; 99 00 0E ; Store accumulator to $0E00.w,Y [Reads: Accumulator, Y Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DB0.w,Y		; 99 B0 0D ; Store accumulator to $0DB0.w,Y [Reads: Accumulator, Y Index]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,Y		; 99 70 0F ; Store accumulator to $0F70.w,Y [Reads: Accumulator, Y Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $19		; 30 19 ; Branch if minus to $30, $19 [Flow: branch]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,Y		; 99 D0 0D ; Store accumulator to $0DD0.w,Y [Reads: Accumulator, Y Index]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Accumulator, Y Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($0804.w,X)		; FC 04 08 ; Jump to subroutine indirect indexed ($0804.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $B42233.l		; 22 33 22 B4 ; Jump to subroutine long $B42233.l [Writes: Stack Pointer] [Flow: call]
	ldx $2209.w		; AE 09 22 ; Load $2209.w into X register [Writes: X Index] [Flags: ZN]
	ldy $AE.b,X		; B4 AE ; Load Y register $AE.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ora #$22.b		; 09 22 ; Logical OR #$22.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $AE.b,X		; B4 AE ; Load Y register $AE.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ora #$A9.b		; 09 A9 ; Logical OR #$A9.b with accumulator [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $75		; 30 75 ; Branch if minus to $30, $75 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0C.b		; 69 0C ; Add #$0C.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0F70.w,X		; FD 70 0F ; Subtract with carry $0F70.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,Y		; 99 70 0F ; Store accumulator to $0F70.w,Y [Reads: Accumulator, Y Index]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	sta $0EB0.w,Y		; 99 B0 0E ; Store accumulator to $0EB0.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,Y		; 99 60 0E ; Store accumulator to $0E60.w,Y [Reads: Accumulator, Y Index]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DC0.w,Y		; 99 C0 0D ; Store accumulator to $0DC0.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $09AEA0.l,X		; BF A0 AE 09 ; Load long $09AEA0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda $09AEA4.l,X		; BF A4 AE 09 ; Load long $09AEA4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E80.w,Y		; 99 80 0E ; Store accumulator to $0E80.w,Y [Reads: Accumulator, Y Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	inc $0ED0.w,X		; FE D0 0E ; Increment memory $0ED0.w,X [Reads: X Index] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: ZN]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	lda $0F60.w,X		; BD 60 0F ; Load $0F60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $E2.b		; C5 E2 ; Compare $E2.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E3.b		; E5 E3 ; Subtract $E3.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $E8.b		; C5 E8 ; Compare $E8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E9.b		; E5 E9 ; Subtract $E9.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $D6		; 10 D6 ; Branch if plus to $10, $D6 [Flow: branch]
	.db $80, $15		; 80 15 ; Branch always to $80, $15 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: ZN]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $0F60.w,X		; BD 60 0F ; Load $0F60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $EE		; 10 EE ; Branch if plus to $10, $EE [Flow: branch]
	ldx #$07.b		; A2 07 ; Load #$07.b into X register [Writes: X Index] [Flags: ZN]
	lda $0B00.w,X		; BD 00 0B ; Load $0B00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$14.b		; C9 14 ; Compare #$14.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $F1		; F0 F1 ; Branch if equal to $F0, $F1 [Flow: branch]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $ED		; F0 ED ; Branch if equal to $F0, $ED [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F2		; 10 F2 ; Branch if plus to $10, $F2 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: ZN]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$6C.b		; C9 6C ; Compare #$6C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $EE		; 10 EE ; Branch if plus to $10, $EE [Flow: branch]
	lda #$6C.b		; A9 6C ; Load #$6C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $001ABF.l		; AF BF 1A 00 ; Load long $001ABF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $001ACF.l		; AF CF 1A 00 ; Load long $001ACF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $001ADF.l		; AF DF 1A 00 ; Load long $001ADF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $001AEF.l		; AF EF 1A 00 ; Load long $001AEF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Accumulator, Y Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: ZN]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $26		; F0 26 ; Branch if equal to $F0, $26 [Flow: branch]
	ldy $0E20.w,X		; BC 20 0E ; Load Y register $0E20.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	cpy #$EC.b		; C0 EC ; Compare #$EC.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $1B		; [PATTERN: Memory clearing operation] F0 1B ; Branch if equal to $F0, $1B [Flow: branch]
	cpy #$D2.b		; C0 D2 ; Compare #$D2.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $17		; F0 17 ; Branch if equal to $F0, $17 [Flow: branch]
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	.db $80, $0C		; 80 0C ; Branch always to $80, $0C [Flow: branch]
	cpy #$6C.b		; C0 6C ; Compare #$6C.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $0C9A.w,X		; BD 9A 0C ; Load $0C9A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $040A.w		; CD 0A 04 ; Compare $040A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $D2		; 10 D2 ; Branch if plus to $10, $D2 [Flow: branch]
	ldx #$07.b		; A2 07 ; Load #$07.b into X register [Writes: X Index] [Flags: ZN]
	lda $0B00.w,X		; BD 00 0B ; Load $0B00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $0CCA.w,X		; BD CA 0C ; Load $0CCA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $040A.w		; CD 0A 04 ; Compare $040A.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stz $0B00.w,X		; 9E 00 0B ; Store zero to $0B00.w,X [Reads: X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $ED		; 10 ED ; Branch if plus to $10, $ED [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$1D.b		; A2 1D ; Load #$1D.b into X register [Writes: X Index] [Flags: ZN]
	lda $7FF800.l,X		; BF 00 F8 7F ; Load long $7FF800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F7		; 10 F7 ; Branch if plus to $10, $F7 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF800.l,X		; 9F 00 F8 7F ; Store accumulator (long,X) $7FF800.l,X [Reads: Accumulator, X Index]
	sta $0FB4.w		; 8D B4 0F ; Store accumulator to $0FB4.w [Reads: Accumulator]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF90E.l,X		; 9F 0E F9 7F ; Store accumulator (long,X) $7FF90E.l,X [Reads: Accumulator, X Index]
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF83C.l,X		; 9F 3C F8 7F ; Store accumulator (long,X) $7FF83C.l,X [Reads: Accumulator, X Index]
	lda $0FD9.w		; AD D9 0F ; Load $0FD9.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF878.l,X		; 9F 78 F8 7F ; Store accumulator (long,X) $7FF878.l,X [Reads: Accumulator, X Index]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF81E.l,X		; 9F 1E F8 7F ; Store accumulator (long,X) $7FF81E.l,X [Reads: Accumulator, X Index]
	lda $0FDB.w		; AD DB 0F ; Load $0FDB.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF85A.l,X		; 9F 5A F8 7F ; Store accumulator (long,X) $7FF85A.l,X [Reads: Accumulator, X Index]
	lda $0FA0.w		; AD A0 0F ; Load $0FA0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF92C.l,X		; 9F 2C F9 7F ; Store accumulator (long,X) $7FF92C.l,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1DE9B6.l		; 22 B6 E9 1D ; Jump to subroutine long $1DE9B6.l [Writes: Stack Pointer] [Flow: call]
	lda $0FB4.w		; AD B4 0F ; Load $0FB4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $B08C.w		; 20 8C B0 ; Jump to subroutine at $B08C.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0FB4.w		; AD B4 0F ; Load $0FB4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $B097.w		; 20 97 B0 ; Jump to subroutine at $B097.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$1D.b		; A2 1D ; Load #$1D.b into X register [Writes: X Index] [Flags: ZN]
	jsr $B0B6.w		; 20 B6 B0 ; Jump to subroutine at $B0B6.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$0E.b		; E0 0E ; Compare #$0E.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $F8		; D0 F8 ; Branch if not equal to $D0, $F8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$0E.b		; A2 0E ; Load #$0E.b into X register [Writes: X Index] [Flags: ZN]
	jsr $B0B6.w		; 20 B6 B0 ; Jump to subroutine at $B0B6.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $FA		; 10 FA ; Branch if plus to $10, $FA [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	.db $10, $8E		; 10 8E ; Branch if plus to $10, $8E [Flow: branch]
	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $7FF800.l,X		; BF 00 F8 7F ; Load long $7FF800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $64		; F0 64 ; Branch if equal to $F0, $64 [Flow: branch]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0FC1.w		; 0D C1 0F ; Logical OR $0FC1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda $7FF90E.l,X		; BF 0E F9 7F ; Load long $7FF90E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7FF90E.l,X		; 9F 0E F9 7F ; Store accumulator (long,X) $7FF90E.l,X [Reads: Accumulator, X Index]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	sta $7FF800.l,X		; 9F 00 F8 7F ; Store accumulator (long,X) $7FF800.l,X [Reads: Accumulator, X Index]
	.db $80, $46		; 80 46 ; Branch always to $80, $46 [Flow: branch]
	ldy $0FB3.w		; AC B3 0F ; Load $0FB3.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	lda $7FF968.l,X		; BF 68 F9 7F ; Load long $7FF968.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	lda $7FF800.l,X		; BF 00 F8 7F ; Load long $7FF800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $B09F.w,Y		; B9 9F B0 ; Load $B09F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $0DBA94.l		; 22 94 BA 0D ; Jump to subroutine long $0DBA94.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $1A		; 80 1A ; Branch always to $80, $1A [Flow: branch]
	lda $7FF800.l,X		; BF 00 F8 7F ; Load long $7FF800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $B09F.w,Y		; B9 9F B0 ; Load $B09F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $0DBA8C.l		; 22 8C BA 0D ; Jump to subroutine long $0DBA8C.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $0C		; 80 0C ; Branch always to $80, $0C [Flow: branch]
	lda $7FF800.l,X		; BF 00 F8 7F ; Load long $7FF800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $B09F.w,Y		; B9 9F B0 ; Load $B09F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	lda $7FF800.l,X		; BF 00 F8 7F ; Load long $7FF800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $B124.w,Y		; B9 24 B1 ; Load $B124.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpy #$B6.b		; C0 B6 ; Compare #$B6.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc ($B6.b,X)		; E1 B6 ; Subtract with carry ($B6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and [$B6.b]		; 27 B6 ; AND accumulator with memory (long) [$B6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda $26.b,X		; B5 26 ; Load $26.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $FB.b,X		; B5 FB ; Load $FB.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $9E.b,X		; B4 9E ; Load Y register $9E.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $C6.b,X		; B4 C6 ; Load Y register $C6.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $29.b,X		; B4 29 ; Load Y register $29.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $EE.b,X		; B4 EE ; Load Y register $EE.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda ($C2.b,S),Y		; B3 C2 ; Load accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($4F.b,S),Y		; B3 4F ; Load accumulator (stack relative indirect indexed) ($4F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($00.b,S),Y		; B3 00 ; Load accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $5D.b		; 00 5D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $91.b,X		; B5 91 ; Load $91.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $06.b,X		; B5 06 ; Load $06.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($B2.b,S),Y		; B3 B2 ; Load accumulator (stack relative indirect indexed) ($B2.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($20.b)		; B2 20 ; Load accumulator (indirect) ($20.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $16.b,X		; B5 16 ; Load $16.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($BC.b)		; B2 BC ; Load accumulator (indirect) ($BC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($78.b,S),Y		; B3 78 ; Load accumulator (stack relative indirect indexed) ($78.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($CB.b),Y		; B1 CB ; Load accumulator ($CB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $F4		; F0 F4 ; Branch if equal to $F0, $F4 [Flow: branch]
	trb $F6.b		; 14 F6 ; Test and reset bits $F6.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr ($FC04.w,X)		; FC 04 FC ; Jump to subroutine indirect indexed ($FC04.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($FEFE.w,X)		; FC FE FE ; Jump to subroutine indirect indexed ($FEFE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $AEAE.w		; [PATTERN: Memory clearing operation] AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	ldx $AEAE.w		; AE AE AE ; Load $AEAE.w into X register [Writes: X Index] [Flags: ZN]
	ldy $34AC.w		; AC AC 34 ; Load $34AC.w into Y register [Writes: Y Index] [Flags: ZN]
	stz $34.b,X		; 74 34 ; Store zero to $34.b,X [Reads: X Index]
	stz $34.b,X		; 74 34 ; Store zero to $34.b,X [Reads: X Index]
	stz $34.b,X		; [PATTERN: Memory clearing operation] 74 34 ; Store zero to $34.b,X [Reads: X Index]
	stz $00.b,X		; 74 00 ; Store zero to $00.b,X [Reads: X Index]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $BFB5.w,X		; DE B5 BF ; Decrement memory $BFB5.w,X [Reads: X Index] [Flags: ZN]
	asl $7FF9.w		; 0E F9 7F ; Arithmetic shift left $7FF9.w [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$06.b		; 29 06 ; Logical AND #$06.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $07.b		; 05 07 ; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B150.w,X		; 7D 50 B1 ; Add $B150.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B158.w,X		; 7D 58 B1 ; Add $B158.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $B160.w,X		; BD 60 B1 ; Load $B160.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $B168.w,X		; BD 68 B1 ; Load $B168.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $B170.w,X		; BD 70 B1 ; Load $B170.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $07.b		; C6 07 ; Decrement $07.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $CE		; 10 CE ; Branch if plus to $10, $CE [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldx #$1D.b		; A2 1D ; Load #$1D.b into X register [Writes: X Index] [Flags: ZN]
	lda $7FF800.l,X		; BF 00 F8 7F ; Load long $7FF800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F7		; 10 F7 ; Branch if plus to $10, $F7 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF800.l,X		; 9F 00 F8 7F ; Store accumulator (long,X) $7FF800.l,X [Reads: Accumulator, X Index]
	sta $0FB4.w		; 8D B4 0F ; Store accumulator to $0FB4.w [Reads: Accumulator]
	lda #$E8.b		; A9 E8 ; Load #$E8.b into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF83C.l,X		; 9F 3C F8 7F ; Store accumulator (long,X) $7FF83C.l,X [Reads: Accumulator, X Index]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01.b		; 65 01 ; Add $01.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF81E.l,X		; 9F 1E F8 7F ; Store accumulator (long,X) $7FF81E.l,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7FF8B4.l,X		; 9F B4 F8 7F ; Store accumulator (long,X) $7FF8B4.l,X [Reads: Accumulator, X Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7FF896.l,X		; 9F 96 F8 7F ; Store accumulator (long,X) $7FF896.l,X [Reads: Accumulator, X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$30.b		; 69 30 ; Add #$30.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF90E.l,X		; 9F 0E F9 7F ; Store accumulator (long,X) $7FF90E.l,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF800.l,X		; 9F 00 F8 7F ; Store accumulator (long,X) $7FF800.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B252.w		; 20 52 B2 ; Jump to subroutine at $B252.w [Writes: Stack Pointer] [Flow: call]
	lda $7FF896.l,X		; BF 96 F8 7F ; Load long $7FF896.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$03.b		; 69 03 ; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF896.l,X		; 9F 96 F8 7F ; Store accumulator (long,X) $7FF896.l,X [Reads: Accumulator, X Index]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $7FF83C.l,X		; BF 3C F8 7F ; Load long $7FF83C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$F8.b		; C9 F8 ; Compare #$F8.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $DE		; B0 DE ; Branch if carry set to $B0, $DE [Flow: branch]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $7FF81E.l,X		; BF 1E F8 7F ; Load long $7FF81E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $D1		; B0 D1 ; Branch if carry set to $B0, $D1 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$5C.b		; A9 5C ; Load #$5C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$C0.b		; 29 C0 ; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$34.b		; 09 34 ; Logical OR #$34.b with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $B5D6.w		; 4C D6 B5 ; Jump to $B5D6.w [Flow: jump]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$1E.b		; 69 1E ; Add #$1E.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsr $B25C.w		; 20 5C B2 ; Jump to subroutine at $B25C.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $7FF896.l,X		; BF 96 F8 7F ; Load long $7FF896.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7FF8D2.l,X		; 7F D2 F8 7F ; Add long $7FF8D2.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF8D2.l,X		; 9F D2 F8 7F ; Store accumulator (long,X) $7FF8D2.l,X [Reads: Accumulator, X Index]
	lda $7FF896.l,X		; BF 96 F8 7F ; Load long $7FF896.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ora #$F0.b		; 09 F0 ; Logical OR #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $7FF81E.l,X		; 7F 1E F8 7F ; Add long $7FF81E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF81E.l,X		; 9F 1E F8 7F ; Store accumulator (long,X) $7FF81E.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $66AC.w		; AC AC 66 ; Load $66AC.w into Y register [Writes: Y Index] [Flags: ZN]
	ror $8E.b		; 66 8E ; Rotate right $8E.b [Reads: Direct Page] [Flags: ZNC]
	ldy #$A2.b		; A0 A2 ; Load #$A2.b into Y register [Writes: Y Index] [Flags: ZN]
	ora ($41.b,X)		; 01 41 ; Logical OR ($41.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($41.b,X)		; 01 41 ; Logical OR ($41.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $05.b		; 06 05 ; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: ZNC]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	tsb $A5.b		; 04 A5 ; Test and set bits $A5.b [Reads: Accumulator] [Flags: Z]
	ora ($0D.b),Y		; 11 0D ; OR accumulator with memory ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($0F.b,X)		; C1 0F ; Compare accumulator ($0F.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda $7FF81E.l,X		; BF 1E F8 7F ; Load long $7FF81E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$01.b		; E9 01 ; Subtract #$01.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF81E.l,X		; 9F 1E F8 7F ; Store accumulator (long,X) $7FF81E.l,X [Reads: Accumulator, X Index]
	lda $7FF85A.l,X		; BF 5A F8 7F ; Load long $7FF85A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF85A.l,X		; 9F 5A F8 7F ; Store accumulator (long,X) $7FF85A.l,X [Reads: Accumulator, X Index]
	jsr $B5DE.w		; 20 DE B5 ; Jump to subroutine at $B5DE.w [Writes: Stack Pointer] [Flow: call]
.INDEX 16
	rep #$10		; C2 10
	ldy $90.b		; A4 90 ; Load $90.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0000.w,Y		; 99 00 00 ; Store accumulator to $0000.w,Y [Reads: Accumulator, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0004.w,Y		; 99 04 00 ; Store accumulator to $0004.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0001.w,Y		; 99 01 00 ; Store accumulator to $0001.w,Y [Reads: Accumulator, Y Index]
	sta $0005.w,Y		; 99 05 00 ; Store accumulator to $0005.w,Y [Reads: Accumulator, Y Index]
	lda #$A4.b		; A9 A4 ; Load #$A4.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0002.w,Y		; 99 02 00 ; Store accumulator to $0002.w,Y [Reads: Accumulator, Y Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0006.w,Y		; 99 06 00 ; Store accumulator to $0006.w,Y [Reads: Accumulator, Y Index]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0003.w,Y		; 99 03 00 ; Store accumulator to $0003.w,Y [Reads: Accumulator, Y Index]
	sta $0007.w,Y		; 99 07 00 ; Store accumulator to $0007.w,Y [Reads: Accumulator, Y Index]
	ldy $92.b		; A4 92 ; Load $92.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0000.w,Y		; 99 00 00 ; Store accumulator to $0000.w,Y [Reads: Accumulator, Y Index]
	sta $0001.w,Y		; 99 01 00 ; Store accumulator to $0001.w,Y [Reads: Accumulator, Y Index]
.INDEX 8
	sep #$10		; E2 10
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7FF90E.l,X		; BF 0E F9 7F ; Load long $7FF90E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$11.b		; A9 11 ; Load #$11.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF800.l,X		; 9F 00 F8 7F ; Store accumulator (long,X) $7FF800.l,X [Reads: Accumulator, X Index]
	jsr $B5DE.w		; 20 DE B5 ; Jump to subroutine at $B5DE.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $7FF90E.l,X		; BF 0E F9 7F ; Load long $7FF90E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $B292.w,X		; BD 92 B2 ; Load $B292.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $B284.w,X		; BD 84 B2 ; Load $B284.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $B28B.w,X		; 1D 8B B2 ; OR accumulator with memory $B28B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsr $B70C.w		; 20 0C B7 ; Jump to subroutine at $B70C.w [Writes: Stack Pointer] [Flow: call]
	jmp $B459.w		; 4C 59 B4 ; Jump to $B459.w [Flow: jump]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	cpx $E4.b		; E4 E4 ; Compare $E4.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $E4.b		; E4 E4 ; Compare $E4.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $E4.b		; E4 E4 ; Compare $E4.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $E4.b		; E4 E4 ; Compare $E4.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: ZNC]
	lda $7FF90E.l,X		; BF 0E F9 7F ; Load long $7FF90E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$50.b		; C9 50 ; Compare #$50.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $2C		; D0 2C ; Branch if not equal to $D0, $2C [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0FC1.w		; 0D C1 0F ; Logical OR $0FC1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $25		; D0 25 ; Branch if not equal to $D0, $25 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7FF83C.l,X		; BF 3C F8 7F ; Load long $7FF83C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7FF878.l,X		; BF 78 F8 7F ; Load long $7FF878.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $7FF81E.l,X		; BF 1E F8 7F ; Load long $7FF81E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $7FF85A.l,X		; BF 5A F8 7F ; Load long $7FF85A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	ldy #$12.b		; A0 12 ; Load #$12.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $01E7A9.l		; 22 A9 E7 01 ; Jump to subroutine long $01E7A9.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	lda $7FF90E.l,X		; BF 0E F9 7F ; Load long $7FF90E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $B34B.w,Y		; B9 4B B3 ; Load $B34B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $B5DE.w		; 20 DE B5 ; Jump to subroutine at $B5DE.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $7FF90E.l,X		; BF 0E F9 7F ; Load long $7FF90E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	nop		; EA ; No operation
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $B33F.w,X		; BD 3F B3 ; Load $B33F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$35.b		; A9 35 ; Load #$35.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jmp $B70C.w		; 4C 0C B7 ; Jump to $B70C.w [Flow: jump]
	jmp $B459.w		; 4C 59 B4 ; Jump to $B459.w [Flow: jump]
	cmp $BFA9CF.l,X		; DF CF A9 BF ; Compare accumulator (long,X) $BFA9CF.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	asl $7FF9.w		; 0E F9 7F ; Arithmetic shift left $7FF9.w [Flags: ZNC]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	lda $7FF90E.l,X		; BF 0E F9 7F ; Load long $7FF90E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	jsr $B5DE.w		; 20 DE B5 ; Jump to subroutine at $B5DE.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0FB5.w		; AE B5 0F ; Load $0FB5.w into X register [Writes: X Index] [Flags: ZN]
	lda $B3B9.w,X		; BD B9 B3 ; Load $B3B9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jmp $B5D6.w		; 4C D6 B5 ; Jump to $B5D6.w [Flow: jump]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stx $20.b		; 86 20 ; Store X register to $20.b [Reads: X Index]
	.db $10, $30		; 10 30 ; Branch if plus to $10, $30 [Flow: branch]
	.db $30, $20		; 30 20 ; Branch if minus to $30, $20 [Flow: branch]
	dec $A5B5.w,X		; DE B5 A5 ; Decrement memory $A5B5.w,X [Reads: X Index] [Flags: ZN]
	brk $91.b		; 00 91 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $A5		; 90 A5 ; Branch if carry clear to $90, $A5 [Flow: branch]
	cop $C8.b		; 02 C8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $7FF90E.l,X		; BF 0E F9 7F ; Load long $7FF90E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $B3E8.w,X		; BD E8 B3 ; Load $B3E8.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $7FF92C.l,X		; BF 2C F9 7F ; Load long $7FF92C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $B3EA.w,X		; BD EA B3 ; Load $B3EA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jmp $B70C.w		; 4C 0C B7 ; Jump to $B70C.w [Flow: jump]
	cpy $CEEC.w		; CC EC CE ; Compare $CEEC.w with Y register [Reads: Y Index] [Flags: ZNC]
	inc $ECCC.w		; EE CC EC ; Increment $ECCC.w [Flags: ZN]
	dec $31EE.w		; CE EE 31 ; Decrement $31EE.w [Flags: ZN]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($71.b),Y		; 31 71 ; AND accumulator with memory ($71.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($71.b),Y		; 71 71 ; Add with carry ($71.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($20.b),Y		; 71 20 ; Add with carry ($20.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $A5B5.w,X		; DE B5 A5 ; Decrement memory $A5B5.w,X [Reads: X Index] [Flags: ZN]
	brk $91.b		; 00 91 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $A5		; 90 A5 ; Branch if carry clear to $90, $A5 [Flow: branch]
	cop $C8.b		; 02 C8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $7FF92C.l,X		; BF 2C F9 7F ; Load long $7FF92C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $B419.w,X		; BD 19 B4 ; Load $B419.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $048E.w		; AE 8E 04 ; Load $048E.w into X register [Writes: X Index] [Flags: ZN]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$80.b		; E9 80 ; Subtract #$80.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$0E.b		; 29 0E ; Logical AND #$0E.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $B421.w,X		; 1D 21 B4 ; OR accumulator with memory $B421.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsr $B70C.w		; 20 0C B7 ; Jump to subroutine at $B70C.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1A.b		; 45 1A ; Exclusive OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $031F.w		; 0D 1F 03 ; Logical OR $031F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $037B.w		; 0D 7B 03 ; Logical OR $037B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $2F		; D0 2F ; Branch if not equal to $D0, $2F [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$0C.b		; 69 0C ; Add #$0C.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $23		; B0 23 ; Branch if carry set to $B0, $23 [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $02.b		; E5 02 ; Subtract $02.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$16.b		; 69 16 ; Add #$16.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$1C.b		; C9 1C ; Compare #$1C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $17		; B0 17 ; Branch if carry set to $B0, $17 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	sta $0373.w		; 8D 73 03 ; Store accumulator to $0373.w [Reads: Accumulator]
	lda $28.b		; A5 28 ; Load $28.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	lda $27.b		; A5 27 ; Load $27.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	and $2C2C.w		; 2D 2C 2C ; Logical AND $2C2C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $DE20.w		; 2C 20 DE ; Test bits $DE20.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	lda $A5.b,X		; B5 A5 ; Load $A5.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $91.b		; 00 91 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $A5		; 90 A5 ; Branch if carry clear to $90, $A5 [Flow: branch]
	cop $C8.b		; 02 C8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $7FF90E.l,X		; BF 0E F9 7F ; Load long $7FF90E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $B496.w,X		; BD 96 B4 ; Load $B496.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $B49A.w,X		; BD 9A B4 ; Load $B49A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jmp $B70C.w		; 4C 0C B7 ; Jump to $B70C.w [Flow: jump]
	sbc $9C00FF.l,X		; FF FF 00 9C ; Subtract with carry (long,X) $9C00FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $208D.w,X		; 9D 8D 20 ; Store accumulator to $208D.w,X [Reads: Accumulator, X Index]
	dec $DAB5.w,X		; DE B5 DA ; Decrement memory $DAB5.w,X [Reads: X Index] [Flags: ZN]
	lda $7FF90E.l,X		; BF 0E F9 7F ; Load long $7FF90E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B4C0.w,X		; 7D C0 B4 ; Add $B4C0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B4C0.w,X		; 7D C0 B4 ; Add $B4C0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $B4C3.w,X		; BD C3 B4 ; Load $B4C3.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $7FF92C.l,X		; BF 2C F9 7F ; Load long $7FF92C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F50.w,Y		; B9 50 0F ; Load $0F50.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0B89.w,Y		; 19 89 0B ; OR accumulator with memory $0B89.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	jmp $B5D6.w		; 4C D6 B5 ; Jump to $B5D6.w [Flow: jump]
	jsr $B5DE.w		; 20 DE B5 ; Jump to subroutine at $B5DE.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$75.b		; A9 75 ; Load #$75.b into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $7FF92C.l,X		; BF 2C F9 7F ; Load long $7FF92C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F50.w,Y		; B9 50 0F ; Load $0F50.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0B89.w,Y		; 19 89 0B ; OR accumulator with memory $0B89.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	jmp $B5D6.w		; 4C D6 B5 ; Jump to $B5D6.w [Flow: jump]
	sta $C7.b,S		; 83 C7 ; Store accumulator (stack relative) $C7.b,S [Reads: Accumulator, Stack Pointer]
	.db $80, $B7		; 80 B7 ; Branch always to $80, $B7 [Flow: branch]
	lda $7FF90E.l,X		; BF 0E F9 7F ; Load long $7FF90E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	lda $7FF90E.l,X		; BF 0E F9 7F ; Load long $7FF90E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	jsr $B5DE.w		; 20 DE B5 ; Jump to subroutine at $B5DE.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0F.b		; A6 0F ; Load $0F.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $B51C.w,X		; BD 1C B5 ; Load $B51C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $7FF92C.l,X		; BF 2C F9 7F ; Load long $7FF92C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F50.w,Y		; B9 50 0F ; Load $0F50.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0B89.w,Y		; 19 89 0B ; OR accumulator with memory $0B89.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	jmp $B5D6.w		; 4C D6 B5 ; Jump to $B5D6.w [Flow: jump]
	sta $C7.b,S		; 83 C7 ; Store accumulator (stack relative) $C7.b,S [Reads: Accumulator, Stack Pointer]
	.db $80, $9D		; 80 9D ; Branch always to $80, $9D [Flow: branch]
	jsr $B5DE.w		; 20 DE B5 ; Jump to subroutine at $B5DE.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $7FF90E.l,X		; BF 0E F9 7F ; Load long $7FF90E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $B559.w,X		; BD 59 B5 ; Load $B559.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $7FF92C.l,X		; BF 2C F9 7F ; Load long $7FF92C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F50.w,Y		; B9 50 0F ; Load $0F50.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0B89.w,Y		; 19 89 0B ; OR accumulator with memory $0B89.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0E.b		; 09 0E ; Logical OR #$0E.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	jmp $B5D6.w		; 4C D6 B5 ; Jump to $B5D6.w [Flow: jump]
	adc ($71.b,X)		; 61 71 ; Add with carry ($71.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $60		; 70 60 ; Branch if overflow set to $70, $60 [Flow: branch]
	jsr $B5DE.w		; 20 DE B5 ; Jump to subroutine at $B5DE.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $7FF9FE.l,X		; BF FE F9 7F ; Load long $7FF9FE.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $B586.w,Y		; B9 86 B5 ; Load $B586.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $7FF92C.l,X		; BF 2C F9 7F ; Load long $7FF92C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F50.w,Y		; B9 50 0F ; Load $0F50.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0B89.w,Y		; 19 89 0B ; OR accumulator with memory $0B89.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	.db $80, $1D		; 80 1D ; Branch always to $80, $1D [Flow: branch]
	cmp ($F3.b)		; D2 F3 ; Compare accumulator (indirect) ($F3.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsr $B5DE.w		; 20 DE B5 ; Jump to subroutine at $B5DE.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $7FF9FE.l,X		; BF FE F9 7F ; Load long $7FF9FE.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $B5B9.w,Y		; B9 B9 B5 ; Load $B5B9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$25.b		; A9 25 ; Load #$25.b into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Accumulator, Direct Page]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7FF83C.l,X		; BF 3C F8 7F ; Load long $7FF83C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7FF878.l,X		; BF 78 F8 7F ; Load long $7FF878.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E3.b		; E5 E3 ; Subtract $E3.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda $7FF81E.l,X		; BF 1E F8 7F ; Load long $7FF81E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7FF85A.l,X		; BF 5A F8 7F ; Load long $7FF85A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E9.b		; E5 E9 ; Subtract $E9.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF800.l,X		; 9F 00 F8 7F ; Store accumulator (long,X) $7FF800.l,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $80, $CC		; 80 CC ; Branch always to $80, $CC [Flow: branch]
	cpy $CAEA.w		; CC EA CA ; Compare $CAEA.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $30, $31		; 30 31 ; Branch if minus to $30, $31 [Flow: branch]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($00.b),Y		; 31 00 ; AND accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $7FF9.w		; 0E F9 7F ; Arithmetic shift left $7FF9.w [Flags: ZNC]
	cmp #$1E.b		; C9 1E ; Compare #$1E.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $2E		; D0 2E ; Branch if not equal to $D0, $2E [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0FC1.w		; 0D C1 0F ; Logical OR $0FC1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $27		; D0 27 ; Branch if not equal to $D0, $27 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7FF83C.l,X		; BF 3C F8 7F ; Load long $7FF83C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7FF878.l,X		; BF 78 F8 7F ; Load long $7FF878.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $7FF81E.l,X		; BF 1E F8 7F ; Load long $7FF81E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $7FF85A.l,X		; BF 5A F8 7F ; Load long $7FF85A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $01E7A9.l		; 22 A9 E7 01 ; Jump to subroutine long $01E7A9.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $B613.w,Y		; B9 13 B6 ; Load $B613.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda $B618.w,Y		; B9 18 B6 ; Load $B618.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $B61D.w,Y		; B9 1D B6 ; Load $B61D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $7FF83C.l,X		; BF 3C F8 7F ; Load long $7FF83C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B622.w,Y		; 79 22 B6 ; Add $B622.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7FF878.l,X		; BF 78 F8 7F ; Load long $7FF878.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $E3.b		; E5 E3 ; Subtract $E3.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda $7FF81E.l,X		; BF 1E F8 7F ; Load long $7FF81E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B622.w,Y		; 79 22 B6 ; Add $B622.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $7FF85A.l,X		; BF 5A F8 7F ; Load long $7FF85A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $E9.b		; E5 E9 ; Subtract $E9.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Accumulator, Direct Page]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B5DE.w		; 20 DE B5 ; Jump to subroutine at $B5DE.w [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $7FF92C.l,X		; BF 2C F9 7F ; Load long $7FF92C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F50.w,Y		; B9 50 0F ; Load $0F50.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0B89.w,Y		; 19 89 0B ; OR accumulator with memory $0B89.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	jmp $B70C.w		; 4C 0C B7 ; Jump to $B70C.w [Flow: jump]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $7FF83C.l,X		; BF 3C F8 7F ; Load long $7FF83C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $7FF81E.l,X		; BF 1E F8 7F ; Load long $7FF81E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda #$AA.b		; A9 AA ; Load #$AA.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $7FF92C.l,X		; BF 2C F9 7F ; Load long $7FF92C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $7FF92C.l,X		; BF 2C F9 7F ; Load long $7FF92C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F50.w,Y		; B9 50 0F ; Load $0F50.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0B89.w,Y		; 19 89 0B ; OR accumulator with memory $0B89.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Accumulator, Direct Page]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $5A		; D0 5A ; Branch if not equal to $D0, $5A [Flow: branch]
	lda $0FFD.w		; AD FD 0F ; Load $0FFD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $55		; F0 55 ; Branch if equal to $F0, $55 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0FC1.w		; 0D C1 0F ; Logical OR $0FC1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $4E		; D0 4E ; Branch if not equal to $D0, $4E [Flow: branch]
	inc $0FFE.w		; EE FE 0F ; Increment $0FFE.w [Flags: ZN]
	lda $0FFE.w		; AD FE 0F ; Load $0FFE.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $44		; D0 44 ; Branch if not equal to $D0, $44 [Flow: branch]
	lda $E9.b		; A5 E9 ; Load $E9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FBF.w		; ED BF 0F ; Subtract $0FBF.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $30, $3A		; 30 3A ; Branch if minus to $30, $3A [Flow: branch]
	lda #$C2.b		; A9 C2 ; Load #$C2.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$0D.b		; A0 0D ; Load #$0D.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$40.b		; 69 40 ; Add #$40.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E2.b		; 65 E2 ; Add $E2.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $E3.b		; A5 E3 ; Load $E3.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$30.b		; E9 30 ; Subtract #$30.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $E9.b		; A5 E9 ; Load $E9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Accumulator, Y Index]
	sta $0DE0.w,Y		; 99 E0 0D ; Store accumulator to $0DE0.w,Y [Reads: Accumulator, Y Index]
	sta $0F70.w,Y		; 99 70 0F ; Store accumulator to $0F70.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $B77E.w		; 20 7E B7 ; Jump to subroutine at $B77E.w [Writes: Stack Pointer] [Flow: call]
	jsr $B714.w		; 20 14 B7 ; Jump to subroutine at $B714.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0FC1.w		; 0D C1 0F ; Logical OR $0FC1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	ldx #$07.b		; A2 07 ; Load #$07.b into X register [Writes: X Index] [Flags: ZN]
	lda $0B00.w,X		; BD 00 0B ; Load $0B00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $B793.w		; 20 93 B7 ; Jump to subroutine at $B793.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $C08D.w		; 20 8D C0 ; Jump to subroutine at $C08D.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $B7A8.w,Y		; B9 A8 B7 ; Load $B7A8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $09C0.w,X		; 1E C0 09 ; Arithmetic shift left $09C0.w,X [Reads: X Index] [Flags: ZNC]
	lda $9DBF5B.l,X		; BF 5B BF 9D ; Load long $9DBF5B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $BE0F.w,X		; BD 0F BE ; Load $BE0F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $BE.b,X		; 75 BE ; Add $BE.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and $BCC3BD.l,X		; 3F BD C3 BC ; AND accumulator with memory (long,X) $BCC3BD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $BBB2.w,X		; BC B2 BB ; Load Y register $BBB2.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda ($BB.b)		; B2 BB ; Load accumulator (indirect) ($BB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($BB.b)		; B2 BB ; Load accumulator (indirect) ($BB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($BB.b)		; B2 BB ; Load accumulator (indirect) ($BB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($BB.b)		; B2 BB ; Load accumulator (indirect) ($BB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($BB.b)		; B2 BB ; Load accumulator (indirect) ($BB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $ACBA.w		; AC BA AC ; Load $ACBA.w into Y register [Writes: Y Index] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ldy $ACBA.w		; AC BA AC ; Load $ACBA.w into Y register [Writes: Y Index] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $B986.w,Y		; B9 86 B9 ; Load $B986.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($B8.b),Y		; D1 B8 ; Compare accumulator ($B8.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sty $B8.b		; 84 B8 ; Store Y register to $B8.b [Reads: Y Index]
	sbc $B7.b,X		; F5 B7 ; Subtract $B7.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jmp.w [$75B7]		; DC B7 75 ; Jump long indirect [$75B7] [Flow: jump]
	ldx $EB22.w,Y		; BE 22 EB ; Load X register $EB22.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $0060.w,X		; 1D 60 00 ; OR accumulator with memory $0060.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D8.b		; 00 D8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $50		; 30 50 ; Branch if minus to $30, $50 [Flow: branch]
	.db $70, $90		; 70 90 ; Branch if overflow set to $70, $90 [Flow: branch]
	lda $0B08.w,X		; BD 08 0B ; Load $0B08.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0B10.w,X		; BD 10 0B ; Load $0B10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0B18.w,X		; BD 18 0B ; Load $0B18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0B20.w,X		; BD 20 0B ; Load $0B20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $22.b		; E5 22 ; Subtract $22.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0018.w		; 69 18 00 ; Add #$0018.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0030.w		; C9 30 00 ; Compare #$0030.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $68		; B0 68 ; Branch if carry set to $B0, $68 [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $20.b		; E5 20 ; Subtract $20.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0018.w		; 69 18 00 ; Add #$0018.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0030.w		; C9 30 00 ; Compare #$0030.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $5A		; B0 5A ; Branch if carry set to $B0, $5A [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	stz $0B00.w,X		; 9E 00 0B ; Store zero to $0B00.w,X [Reads: X Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	lda #$A7.b		; A9 A7 ; Load #$A7.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1DF65F.l		; 22 5F F6 1D ; Jump to subroutine long $1DF65F.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $41		; 30 41 ; Branch if minus to $30, $41 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0FB5.w		; AE B5 0F ; Load $0FB5.w into X register [Writes: X Index] [Flags: ZN]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B7E1.w,X		; 7D E1 B7 ; Add $B7E1.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $B7E5.w,X		; 7D E5 B7 ; Add $B7E5.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B7E9.w,X		; 7D E9 B7 ; Add $B7E9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $B7ED.w,X		; 7D ED B7 ; Add $B7ED.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda $B7F1.w,X		; BD F1 B7 ; Load $B7F1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0B40.w,X		; BD 40 0B ; Load $0B40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E90.w,Y		; 99 90 0E ; Store accumulator to $0E90.w,Y [Reads: Accumulator, Y Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,Y		; 99 E0 0D ; Store accumulator to $0DE0.w,Y [Reads: Accumulator, Y Index]
	dec $0FB5.w		; CE B5 0F ; Decrement $0FB5.w [Flags: ZN]
	.db $10, $B0		; 10 B0 ; Branch if plus to $10, $B0 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0B08.w,X		; BD 08 0B ; Load $0B08.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0B10.w,X		; BD 10 0B ; Load $0B10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0B18.w,X		; BD 18 0B ; Load $0B18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0B20.w,X		; BD 20 0B ; Load $0B20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $22.b		; E5 22 ; Subtract $22.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0020.w		; 69 20 00 ; Add #$0020.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0040.w		; C9 40 00 ; Compare #$0040.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $16		; B0 16 ; Branch if carry set to $B0, $16 [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $20.b		; E5 20 ; Subtract $20.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0020.w		; 69 20 00 ; Add #$0020.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp #$0040.w		; C9 40 00 ; Compare #$0040.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	stz $0B00.w,X		; 9E 00 0B ; Store zero to $0B00.w,X [Reads: X Index]
	inc $0B9E.w		; EE 9E 0B ; Increment $0B9E.w [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr ($00FE.w,X)		; FC FE 00 ; Jump to subroutine indirect indexed ($00FE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZNC]
	tsb $FFFF.w		; 0C FF FF ; Test and set bits $FFFF.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $0B30.w,X		; DE 30 0B ; Decrement memory $0B30.w,X [Reads: X Index] [Flags: ZN]
	lda $0B18.w,X		; BD 18 0B ; Load $0B18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0B20.w,X		; BD 20 0B ; Load $0B20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0B08.w,X		; BD 08 0B ; Load $0B08.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0B10.w,X		; BD 10 0B ; Load $0B10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda $0B40.w,X		; BD 40 0B ; Load $0B40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $06E87B.l		; 22 7B E8 06 ; Jump to subroutine long $06E87B.l [Writes: Stack Pointer] [Flow: call]
	cmp #$82.b		; C9 82 ; Compare #$82.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $74		; D0 74 ; Branch if not equal to $D0, $74 [Flow: branch]
	lda $0B30.w,X		; BD 30 0B ; Load $0B30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $6D		; B0 6D ; Branch if carry set to $B0, $6D [Flow: branch]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $69		; D0 69 ; Branch if not equal to $D0, $69 [Flow: branch]
	lda #$9C.b		; A9 9C ; Load #$9C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1DF65F.l		; 22 5F F6 1D ; Jump to subroutine long $1DF65F.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $5F		; 30 5F ; Branch if minus to $30, $5F [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B8C1.w,X		; 7D C1 B8 ; Add $B8C1.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	adc $B8C9.w,X		; 7D C9 B8 ; Add $B8C9.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0B40.w,X		; BD 40 0B ; Load $0B40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F60.w,Y		; 99 60 0F ; Store accumulator to $0F60.w,Y [Reads: Accumulator, Y Index]
	sta $0E90.w,Y		; 99 90 0E ; Store accumulator to $0E90.w,Y [Reads: Accumulator, Y Index]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Accumulator, Y Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	sta $0E80.w,Y		; 99 80 0E ; Store accumulator to $0E80.w,Y [Reads: Accumulator, Y Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CD2.w,Y		; 99 D2 0C ; Store accumulator to $0CD2.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $30, $D0		; 30 D0 ; Branch if minus to $30, $D0 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $201000.l,X		; FF 00 10 20 ; Subtract with carry (long,X) $201000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $BD		; 30 BD ; Branch if minus to $30, $BD [Flow: branch]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	dec $0B30.w,X		; DE 30 0B ; Decrement memory $0B30.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B30.w,X		; 9D 30 0B ; Store accumulator to $0B30.w,X [Reads: Accumulator, X Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	lda #$9B.b		; A9 9B ; Load #$9B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1DF65F.l		; 22 5F F6 1D ; Jump to subroutine long $1DF65F.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $38		; 30 38 ; Branch if minus to $30, $38 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0FB5.w		; AE B5 0F ; Load $0FB5.w into X register [Writes: X Index] [Flags: ZN]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B972.w,X		; 7D 72 B9 ; Add $B972.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $B976.w,X		; 7D 76 B9 ; Add $B976.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B97A.w,X		; 7D 7A B9 ; Add $B97A.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $B97E.w,X		; 7D 7E B9 ; Add $B97E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda $B982.w,X		; BD 82 B9 ; Load $B982.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0B40.w,X		; BD 40 0B ; Load $0B40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DA0.w,Y		; 99 A0 0D ; Store accumulator to $0DA0.w,Y [Reads: Accumulator, Y Index]
	dec $0FB5.w		; CE B5 0F ; Decrement $0FB5.w [Flags: ZN]
	.db $10, $B9		; 10 B9 ; Branch if plus to $10, $B9 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0B08.w,X		; BD 08 0B ; Load $0B08.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $E2.b		; C5 E2 ; Compare $E2.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda $0B10.w,X		; BD 10 0B ; Load $0B10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E3.b		; E5 E3 ; Subtract $E3.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $35		; D0 35 ; Branch if not equal to $D0, $35 [Flow: branch]
	lda $0B18.w,X		; BD 18 0B ; Load $0B18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $E8.b		; C5 E8 ; Compare $E8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda $0B20.w,X		; BD 20 0B ; Load $0B20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E9.b		; E5 E9 ; Subtract $E9.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $29		; D0 29 ; Branch if not equal to $D0, $29 [Flow: branch]
	dec $0B30.w,X		; DE 30 0B ; Decrement memory $0B30.w,X [Reads: X Index] [Flags: ZN]
	lda $0B30.w,X		; BD 30 0B ; Load $0B30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$81.b		; A9 81 ; Load #$81.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B30.w,X		; 9D 30 0B ; Store accumulator to $0B30.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $BA56.w		; 20 56 BA ; Jump to subroutine at $BA56.w [Writes: Stack Pointer] [Flow: call]
	.db $30, $F5		; 30 F5 ; Branch if minus to $30, $F5 [Flow: branch]
	inc $0B28.w,X		; FE 28 0B ; Increment memory $0B28.w,X [Reads: X Index] [Flags: ZN]
	lda $0B28.w,X		; BD 28 0B ; Load $0B28.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$16.b		; C9 16 ; Compare #$16.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda #$E0.b		; A9 E0 ; Load #$E0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B30.w,X		; 9D 30 0B ; Store accumulator to $0B30.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0B00.w,X		; 9E 00 0B ; Store zero to $0B00.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $70, $80		; 70 80 ; Branch if overflow set to $70, $80 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $90, $90		; 90 90 ; Branch if carry clear to $90, $90 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $70, $80		; 70 80 ; Branch if overflow set to $70, $80 [Flow: branch]
	.db $80, $70		; 80 70 ; Branch always to $80, $70 [Flow: branch]
	.db $50, $A0		; 50 A0 ; Branch if overflow clear to $50, $A0 [Flow: branch]
	ldy #$50.b		; A0 50 ; Load #$50.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $50, $A0		; 50 A0 ; Branch if overflow clear to $50, $A0 [Flow: branch]
	ldy #$50.b		; A0 50 ; Load #$50.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $70, $80		; 70 80 ; Branch if overflow set to $70, $80 [Flow: branch]
	.db $80, $70		; 80 70 ; Branch always to $80, $70 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $70, $90		; 70 90 ; Branch if overflow set to $70, $90 [Flow: branch]
	.db $70, $90		; 70 90 ; Branch if overflow set to $70, $90 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$60.b		; A0 60 ; Load #$60.b into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$60.b		; A0 60 ; Load #$60.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $B0, $60		; B0 60 ; Branch if carry set to $B0, $60 [Flow: branch]
	.db $B0, $80		; B0 80 ; Branch if carry set to $B0, $80 [Flow: branch]
	.db $90, $80		; 90 80 ; Branch if carry clear to $90, $80 [Flow: branch]
	.db $90, $70		; 90 70 ; Branch if carry clear to $90, $70 [Flow: branch]
	.db $90, $70		; 90 70 ; Branch if carry clear to $90, $70 [Flow: branch]
	.db $90, $A9		; 90 A9 ; Branch if carry clear to $90, $A9 [Flow: branch]
	sty $22.b,X		; 94 22 ; Store Y register $22.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	eor $1DF6.w,X		; 5D F6 1D ; Exclusive OR accumulator with memory $1DF6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $4D		; 30 4D ; Branch if minus to $30, $4D [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E90.w,Y		; 99 90 0E ; Store accumulator to $0E90.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0B28.w,X		; BD 28 0B ; Load $0B28.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $BA2A.w,X		; BD 2A BA ; Load $BA2A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $BA40.w,X		; BD 40 BA ; Load $BA40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0B20.w,X		; BD 20 0B ; Load $0B20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda $0B10.w,X		; BD 10 0B ; Load $0B10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $0B40.w,X		; BD 40 0B ; Load $0B40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Accumulator, Y Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,Y		; 99 50 0E ; Store accumulator to $0E50.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0BE0.w,Y		; 99 E0 0B ; Store accumulator to $0BE0.w,Y [Reads: Accumulator, Y Index]
	sta $0E50.w,Y		; 99 50 0E ; Store accumulator to $0E50.w,Y [Reads: Accumulator, Y Index]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CAA.w,Y		; 99 AA 0C ; Store accumulator to $0CAA.w,Y [Reads: Accumulator, Y Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CD2.w,Y		; 99 D2 0C ; Store accumulator to $0CD2.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0B00.w,X		; BD 00 0B ; Load $0B00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	lda $0B30.w,X		; BD 30 0B ; Load $0B30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	dec $0B30.w,X		; DE 30 0B ; Decrement memory $0B30.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$60.b		; 69 60 ; Add #$60.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0B30.w,X		; 9D 30 0B ; Store accumulator to $0B30.w,X [Reads: Accumulator, X Index]
	stz $00.b		; 64 00 ; Store zero to $00.b
	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0DD0.w,Y		; B9 D0 0D ; Load $0DD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $EF		; 10 EF ; Branch if plus to $10, $EF [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $38		; B0 38 ; Branch if carry set to $B0, $38 [Flow: branch]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$94.b		; A9 94 ; Load #$94.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65F.l		; 22 5F F6 1D ; Jump to subroutine long $1DF65F.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $2E		; 30 2E ; Branch if minus to $30, $2E [Flow: branch]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda $0B40.w,X		; BD 40 0B ; Load $0B40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Accumulator, Y Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	lda $0FB5.w		; AD B5 0F ; Load $0FB5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DE0.w,Y		; 99 E0 0D ; Store accumulator to $0DE0.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $BAC0.w,X		; BD C0 BA ; Load $BAC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,Y		; 99 90 0D ; Store accumulator to $0D90.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0C0B.w		; 0C 0B 0C ; Test and set bits $0C0B.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $3D.b		; 24 3D ; Test bits $3D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ror $71.b		; 66 71 ; Rotate right $71.b [Reads: Direct Page] [Flags: ZNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $BB.b		; 86 BB ; Store X register to $BB.b [Reads: X Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda $0B30.w,X		; BD 30 0B ; Load $0B30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	lda $0B38.w,X		; BD 38 0B ; Load $0B38.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	dec $0B30.w,X		; DE 30 0B ; Decrement memory $0B30.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0B08.w,X		; BD 08 0B ; Load $0B08.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $E2.b		; C5 E2 ; Compare $E2.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda $0B10.w,X		; BD 10 0B ; Load $0B10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E3.b		; E5 E3 ; Subtract $E3.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda $0B18.w,X		; BD 18 0B ; Load $0B18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $E8.b		; C5 E8 ; Compare $E8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda $0B20.w,X		; BD 20 0B ; Load $0B20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E9.b		; E5 E9 ; Subtract $E9.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0B38.w,X		; FE 38 0B ; Increment memory $0B38.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B30.w,X		; 9D 30 0B ; Store accumulator to $0B30.w,X [Reads: Accumulator, X Index]
	jsr $BC31.w		; 20 31 BC ; Jump to subroutine at $BC31.w [Writes: Stack Pointer] [Flow: call]
	inc $0B28.w,X		; FE 28 0B ; Increment memory $0B28.w,X [Reads: X Index] [Flags: ZN]
	lda $0B00.w,X		; BD 00 0B ; Load $0B00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0A.b		; E9 0A ; Subtract #$0A.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $BBA6.w,Y		; B9 A6 BB ; Load $BBA6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $BBAC.w,Y		; B9 AC BB ; Load $BBAC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $BBA0.w,Y		; B9 A0 BB ; Load $BBA0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $0B28.w,X		; DD 28 0B ; Compare accumulator $0B28.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0B00.w,X		; 9E 00 0B ; Store zero to $0B00.w,X [Reads: X Index]
	ldy $0B28.w,X		; BC 28 0B ; Load Y register $0B28.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0B08.w,X		; BD 08 0B ; Load $0B08.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $BB90.w,Y		; 79 90 BB ; Add $BB90.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0B08.w,X		; 9D 08 0B ; Store accumulator to $0B08.w,X [Reads: Accumulator, X Index]
	lda $0B10.w,X		; BD 10 0B ; Load $0B10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $BB94.w,Y		; 79 94 BB ; Add $BB94.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0B10.w,X		; 9D 10 0B ; Store accumulator to $0B10.w,X [Reads: Accumulator, X Index]
	lda $0B18.w,X		; BD 18 0B ; Load $0B18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $BB98.w,Y		; 79 98 BB ; Add $BB98.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0B18.w,X		; 9D 18 0B ; Store accumulator to $0B18.w,X [Reads: Accumulator, X Index]
	lda $0B20.w,X		; BD 20 0B ; Load $0B20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $BB9C.w,Y		; 79 9C BB ; Add $BB9C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0B20.w,X		; 9D 20 0B ; Store accumulator to $0B20.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$1D.b		; A2 1D ; Load #$1D.b into X register [Writes: X Index] [Flags: ZN]
	lda $7FF800.l,X		; BF 00 F8 7F ; Load long $7FF800.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $3B		; D0 3B ; Branch if not equal to $D0, $3B [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF800.l,X		; 9F 00 F8 7F ; Store accumulator (long,X) $7FF800.l,X [Reads: Accumulator, X Index]
	lda $0B08.w,Y		; B9 08 0B ; Load $0B08.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FF83C.l,X		; 9F 3C F8 7F ; Store accumulator (long,X) $7FF83C.l,X [Reads: Accumulator, X Index]
	jsl $0DBBD0.l		; 22 D0 BB 0D ; Jump to subroutine long $0DBBD0.l [Writes: Stack Pointer] [Flow: call]
	ora #$1F.b		; 09 1F ; Logical OR #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	lda $0B10.w,Y		; B9 10 0B ; Load $0B10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FF878.l,X		; 9F 78 F8 7F ; Store accumulator (long,X) $7FF878.l,X [Reads: Accumulator, X Index]
	lda $0B18.w,Y		; B9 18 0B ; Load $0B18.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF81E.l,X		; 9F 1E F8 7F ; Store accumulator (long,X) $7FF81E.l,X [Reads: Accumulator, X Index]
	lda $0B20.w,Y		; B9 20 0B ; Load $0B20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $7FF85A.l,X		; 9F 5A F8 7F ; Store accumulator (long,X) $7FF85A.l,X [Reads: Accumulator, X Index]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF90E.l,X		; 9F 0E F9 7F ; Store accumulator (long,X) $7FF90E.l,X [Reads: Accumulator, X Index]
	sta $0FB4.w		; 8D B4 0F ; Store accumulator to $0FB4.w [Reads: Accumulator]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $BC		; 10 BC ; Branch if plus to $10, $BC [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0B30.w,X		; BD 30 0B ; Load $0B30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	dec $0B30.w,X		; DE 30 0B ; Decrement memory $0B30.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B30.w,X		; 9D 30 0B ; Store accumulator to $0B30.w,X [Reads: Accumulator, X Index]
	lda #$90.b		; A9 90 ; Load #$90.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1DF65F.l		; 22 5F F6 1D ; Jump to subroutine long $1DF65F.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $27		; 30 27 ; Branch if minus to $30, $27 [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$D0.b		; A9 D0 ; Load #$D0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,Y		; 99 70 0F ; Store accumulator to $0F70.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0B30.w,X		; BD 30 0B ; Load $0B30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	dec $0B30.w,X		; DE 30 0B ; Decrement memory $0B30.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$A0.b		; A9 A0 ; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B30.w,X		; 9D 30 0B ; Store accumulator to $0B30.w,X [Reads: Accumulator, X Index]
	stz $00.b		; 64 00 ; Store zero to $00.b
	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0DD0.w,Y		; B9 D0 0D ; Load $0DD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$8F.b		; C9 8F ; Compare #$8F.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $EF		; 10 EF ; Branch if plus to $10, $EF [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $52		; B0 52 ; Branch if carry set to $B0, $52 [Flow: branch]
	lda #$8F.b		; A9 8F ; Load #$8F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1DF65F.l		; 22 5F F6 1D ; Jump to subroutine long $1DF65F.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $48		; 30 48 ; Branch if minus to $30, $48 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $BD8D.w,X		; 7D 8D BD ; Add $BD8D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $BD95.w,X		; 7D 95 BD ; Add $BD95.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $BD91.w,X		; 7D 91 BD ; Add $BD91.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $BD99.w,X		; 7D 99 BD ; Add $BD99.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$C0.b		; A9 C0 ; Load #$C0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,Y		; 99 70 0F ; Store accumulator to $0F70.w,Y [Reads: Accumulator, Y Index]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Accumulator, Y Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D80.w,Y		; 99 80 0D ; Store accumulator to $0D80.w,Y [Reads: Accumulator, Y Index]
	sta $0E90.w,Y		; 99 90 0E ; Store accumulator to $0E90.w,Y [Reads: Accumulator, Y Index]
	sta $0DB0.w,Y		; 99 B0 0D ; Store accumulator to $0DB0.w,Y [Reads: Accumulator, Y Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$10.b		; 09 10 ; Logical OR #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0EB0.w,Y		; 99 B0 0E ; Store accumulator to $0EB0.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DD0.w		; AD D0 0D ; Load $0DD0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	stz $0B00.w,X		; 9E 00 0B ; Store zero to $0B00.w,X [Reads: X Index]
	.db $80, $32		; 80 32 ; Branch always to $80, $32 [Flow: branch]
	lda $0B28.w,X		; BD 28 0B ; Load $0B28.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $33		; D0 33 ; Branch if not equal to $D0, $33 [Flow: branch]
	inc $0B30.w,X		; FE 30 0B ; Increment memory $0B30.w,X [Reads: X Index] [Flags: ZN]
	lda $0B30.w,X		; BD 30 0B ; Load $0B30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $23		; D0 23 ; Branch if not equal to $D0, $23 [Flow: branch]
	stz $0B30.w,X		; 9E 30 0B ; Store zero to $0B30.w,X [Reads: X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $0B08.w,X		; BC 08 0B ; Load Y register $0B08.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $041A.w		; 8D 1A 04 ; Store accumulator to $041A.w [Reads: Accumulator]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$80.b		; 69 80 ; Add #$80.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0B30.w,X		; 9D 30 0B ; Store accumulator to $0B30.w,X [Reads: Accumulator, X Index]
	inc $0B28.w,X		; FE 28 0B ; Increment memory $0B28.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $041A.w		; 8D 1A 04 ; Store accumulator to $041A.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $0B30.w,X		; DE 30 0B ; Decrement memory $0B30.w,X [Reads: X Index] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0B28.w,X		; 9E 28 0B ; Store zero to $0B28.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $30		; D0 30 ; Branch if not equal to $D0, $30 [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sec		; 38 ; Set carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0B30.w,X		; BD 30 0B ; Load $0B30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	dec $0B30.w,X		; DE 30 0B ; Decrement memory $0B30.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	inc $0B28.w,X		; FE 28 0B ; Increment memory $0B28.w,X [Reads: X Index] [Flags: ZN]
	ldy $0B28.w,X		; BC 28 0B ; Load Y register $0B28.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$04.b		; C0 04 ; Compare #$04.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	stz $0B28.w,X		; 9E 28 0B ; Store zero to $0B28.w,X [Reads: X Index]
	lda #$D0.b		; A9 D0 ; Load #$D0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B30.w,X		; 9D 30 0B ; Store accumulator to $0B30.w,X [Reads: Accumulator, X Index]
	lda #$85.b		; A9 85 ; Load #$85.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1DF65F.l		; 22 5F F6 1D ; Jump to subroutine long $1DF65F.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $3C		; 30 3C ; Branch if minus to $30, $3C [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $BD8D.w,X		; 7D 8D BD ; Add $BD8D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $BD95.w,X		; 7D 95 BD ; Add $BD95.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $BD91.w,X		; 7D 91 BD ; Add $BD91.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $BD99.w,X		; 7D 99 BD ; Add $BD99.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$90.b		; A9 90 ; Load #$90.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,Y		; 99 70 0F ; Store accumulator to $0F70.w,Y [Reads: Accumulator, Y Index]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $A0C0E0.l,X		; FF E0 C0 A0 ; Subtract with carry (long,X) $A0C0E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $60		; 80 60 ; Branch always to $80, $60 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsr $08BD.w		; 20 BD 08 ; Jump to subroutine at $08BD.w [Writes: Stack Pointer] [Flow: call]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $E2.b		; C5 E2 ; Compare $E2.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda $0B10.w,X		; BD 10 0B ; Load $0B10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E3.b		; E5 E3 ; Subtract $E3.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda $0B18.w,X		; BD 18 0B ; Load $0B18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $E8.b		; C5 E8 ; Compare $E8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda $0B20.w,X		; BD 20 0B ; Load $0B20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E9.b		; E5 E9 ; Subtract $E9.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $0B28.w,X		; BD 28 0B ; Load $0B28.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda $0B9E.w		; AD 9E 0B ; Load $0B9E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	inc $0B28.w,X		; FE 28 0B ; Increment memory $0B28.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0B28.w,X		; FE 28 0B ; Increment memory $0B28.w,X [Reads: X Index] [Flags: ZN]
	cmp $BE07.w,X		; DD 07 BE ; Compare accumulator $BE07.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $2F		; D0 2F ; Branch if not equal to $D0, $2F [Flow: branch]
	stz $0B00.w,X		; 9E 00 0B ; Store zero to $0B00.w,X [Reads: X Index]
	lda #$85.b		; A9 85 ; Load #$85.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1DF65F.l		; 22 5F F6 1D ; Jump to subroutine long $1DF65F.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $22		; 30 22 ; Branch if minus to $30, $22 [Flow: branch]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$E0.b		; A9 E0 ; Load #$E0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,Y		; 99 70 0F ; Store accumulator to $0F70.w,Y [Reads: Accumulator, Y Index]
	lda $0B40.w,X		; BD 40 0B ; Load $0B40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Accumulator, Y Index]
	jsr $BDFD.w		; 20 FD BD ; Jump to subroutine at $BDFD.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $4030.w		; 20 30 40 ; Jump to subroutine at $4030.w [Writes: Stack Pointer] [Flow: call]
	.db $50, $60		; 50 60 ; Branch if overflow clear to $50, $60 [Flow: branch]
	.db $70, $80		; 70 80 ; Branch if overflow set to $70, $80 [Flow: branch]
	.db $90, $BD		; 90 BD ; Branch if carry clear to $90, $BD [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda $0CF4.w		; AD F4 0C ; Load $0CF4.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	inc $0B28.w,X		; FE 28 0B ; Increment memory $0B28.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0B28.w,X		; FE 28 0B ; Increment memory $0B28.w,X [Reads: X Index] [Flags: ZN]
	cmp $BE6D.w,X		; DD 6D BE ; Compare accumulator $BE6D.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $4D		; D0 4D ; Branch if not equal to $D0, $4D [Flow: branch]
	lda #$6E.b		; A9 6E ; Load #$6E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $45		; 30 45 ; Branch if minus to $30, $45 [Flow: branch]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda #$C0.b		; A9 C0 ; Load #$C0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F70.w,Y		; 99 70 0F ; Store accumulator to $0F70.w,Y [Reads: Accumulator, Y Index]
	sta $0E90.w,Y		; 99 90 0E ; Store accumulator to $0E90.w,Y [Reads: Accumulator, Y Index]
	lda $0E60.w,Y		; B9 60 0E ; Load $0E60.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$10.b		; 09 10 ; Logical OR #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,Y		; 99 60 0E ; Store accumulator to $0E60.w,Y [Reads: Accumulator, Y Index]
	lda $0B40.w,X		; BD 40 0B ; Load $0B40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Accumulator, Y Index]
	jsr $BDFD.w		; 20 FD BD ; Jump to subroutine at $BDFD.w [Writes: Stack Pointer] [Flow: call]
	lda $0B00.w,X		; BD 00 0B ; Load $0B00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stz $0B00.w,X		; 9E 00 0B ; Store zero to $0B00.w,X [Reads: X Index]
	cmp #$1A.b		; C9 1A ; Compare #$1A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda #$4A.b		; A9 4A ; Load #$4A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E20.w,Y		; 99 20 0E ; Store accumulator to $0E20.w,Y [Reads: Accumulator, Y Index]
	jsl $06AD50.l		; 22 50 AD 06 ; Jump to subroutine long $06AD50.l [Writes: Stack Pointer] [Flow: call]
	lda #$70.b		; A9 70 ; Load #$70.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E00.w,Y		; 99 00 0E ; Store accumulator to $0E00.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $90, $B0		; 90 B0 ; Branch if carry clear to $90, $B0 [Flow: branch]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	.db $B0, $90		; B0 90 ; Branch if carry set to $B0, $90 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$C0.b		; A0 C0 ; Load #$C0.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	cpy #$A0.b		; C0 A0 ; Compare #$A0.b with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	lda $0B08.w,X		; BD 08 0B ; Load $0B08.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $E2.b		; C5 E2 ; Compare $E2.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda $0B10.w,X		; BD 10 0B ; Load $0B10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E3.b		; E5 E3 ; Subtract $E3.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $45		; D0 45 ; Branch if not equal to $D0, $45 [Flow: branch]
	lda $0B18.w,X		; BD 18 0B ; Load $0B18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $E8.b		; C5 E8 ; Compare $E8.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda $0B20.w,X		; BD 20 0B ; Load $0B20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E9.b		; E5 E9 ; Subtract $E9.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $39		; D0 39 ; Branch if not equal to $D0, $39 [Flow: branch]
	lda $1A.b		; [PATTERN: Memory clearing operation] A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $33		; D0 33 ; Branch if not equal to $D0, $33 [Flow: branch]
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	stz $0FB6.w		; 9C B6 0F ; Store zero to $0FB6.w
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $BED9.w,Y		; B9 D9 BE ; Load $BED9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	lda $BEE9.w,Y		; B9 E9 BE ; Load $BEE9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0B08.w,X		; 9D 08 0B ; Store accumulator to $0B08.w,X [Reads: Accumulator, X Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0FB0.w		; 6D B0 0F ; Add $0FB0.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0B10.w,X		; 9D 10 0B ; Store accumulator to $0B10.w,X [Reads: Accumulator, X Index]
	lda $BEF9.w,Y		; B9 F9 BE ; Load $BEF9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0B18.w,X		; 9D 18 0B ; Store accumulator to $0B18.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0FB1.w		; 6D B1 0F ; Add $0FB1.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0B20.w,X		; 9D 20 0B ; Store accumulator to $0B20.w,X [Reads: Accumulator, X Index]
	jsr $BFAF.w		; 20 AF BF ; Jump to subroutine at $BFAF.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0B08.w,X		; BD 08 0B ; Load $0B08.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $E2.b		; C5 E2 ; Compare $E2.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda $0B10.w,X		; BD 10 0B ; Load $0B10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E3.b		; E5 E3 ; Subtract $E3.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $42		; D0 42 ; Branch if not equal to $D0, $42 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $0B30.w,X		; BD 30 0B ; Load $0B30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	dec $0B30.w,X		; DE 30 0B ; Decrement memory $0B30.w,X [Reads: X Index] [Flags: ZN]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	stz $0FB6.w		; 9C B6 0F ; Store zero to $0FB6.w
	dec $0B28.w,X		; DE 28 0B ; Decrement memory $0B28.w,X [Reads: X Index] [Flags: ZN]
	.db $10, $26		; 10 26 ; Branch if plus to $10, $26 [Flow: branch]
	lda #$38.b		; A9 38 ; Load #$38.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B28.w,X		; 9D 28 0B ; Store accumulator to $0B28.w,X [Reads: Accumulator, X Index]
	lda $0B30.w,X		; BD 30 0B ; Load $0B30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda #$A0.b		; A9 A0 ; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B30.w,X		; 9D 30 0B ; Store accumulator to $0B30.w,X [Reads: Accumulator, X Index]
	sta $0FB6.w		; 8D B6 0F ; Store accumulator to $0FB6.w [Reads: Accumulator]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	jsr $BFAF.w		; 20 AF BF ; Jump to subroutine at $BFAF.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B30.w,X		; 9D 30 0B ; Store accumulator to $0B30.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$50.b		; A9 50 ; Load #$50.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $5E		; 30 5E ; Branch if minus to $30, $5E [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0E.b		; 65 0E ; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$01.b		; E9 01 ; Subtract #$01.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	ldx $0FB5.w		; AE B5 0F ; Load $0FB5.w into X register [Writes: X Index] [Flags: ZN]
	lda $C016.w,X		; BD 16 C0 ; Load $C016.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D50.w,Y		; 99 50 0D ; Store accumulator to $0D50.w,Y [Reads: Accumulator, Y Index]
	lda $C01A.w,X		; BD 1A C0 ; Load $C01A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D40.w,Y		; 99 40 0D ; Store accumulator to $0D40.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $0B40.w,X		; BD 40 0B ; Load $0B40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Accumulator, Y Index]
	lda $0FB6.w		; AD B6 0F ; Load $0FB6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	sta $0D80.w,Y		; 99 80 0D ; Store accumulator to $0D80.w,Y [Reads: Accumulator, Y Index]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F60.w,Y		; 99 60 0F ; Store accumulator to $0F60.w,Y [Reads: Accumulator, Y Index]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E10.w,Y		; 99 10 0E ; Store accumulator to $0E10.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FDE.w		; 8D DE 0F ; Store accumulator to $0FDE.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E040.w		; 20 40 E0 ; Jump to subroutine at $E040.w [Writes: Stack Pointer] [Flow: call]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $60		; B0 60 ; Branch if carry set to $B0, $60 [Flow: branch]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($8B.b,X)		; 01 8B ; Logical OR ($8B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda #$45.b		; A9 45 ; Load #$45.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1DF65F.l		; 22 5F F6 1D ; Jump to subroutine long $1DF65F.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $4A		; 30 4A ; Branch if minus to $30, $4A [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	cmp #$3D.b		; C9 3D ; Compare #$3D.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp #$35.b		; C9 35 ; Compare #$35.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $C023.w,X		; BD 23 C0 ; Load $C023.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $C026.w,X		; BD 26 C0 ; Load $C026.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0FBD.w		; 6D BD 0F ; Add $0FBD.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $C029.w,X		; BD 29 C0 ; Load $C029.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $C02C.w,X		; BD 2C C0 ; Load $C02C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0FBF.w		; 6D BF 0F ; Add $0FBF.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Accumulator, Y Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E50.w,Y		; 99 50 0E ; Store accumulator to $0E50.w,Y [Reads: Accumulator, Y Index]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CAA.w,Y		; 99 AA 0C ; Store accumulator to $0CAA.w,Y [Reads: Accumulator, Y Index]
	lda #$90.b		; A9 90 ; Load #$90.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0BE0.w,Y		; 99 E0 0B ; Store accumulator to $0BE0.w,Y [Reads: Accumulator, Y Index]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $30, $C0		; 30 C0 ; Branch if minus to $30, $C0 [Flow: branch]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $FB		; D0 FB ; Branch if not equal to $D0, $FB [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $C088.w,Y		; 79 88 C0 ; Add $C088.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	cmp $0B08.w,X		; DD 08 0B ; Compare accumulator $0B08.w,X [Reads: X Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $E3.b		; A5 E3 ; Load $E3.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	adc $C08A.w,Y		; 79 8A C0 ; Add $C08A.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $0B10.w,X		; FD 10 0B ; Subtract with carry $0B10.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lsr $01.b		; 46 01 ; Logical shift right $01.b [Reads: Direct Page] [Flags: ZNC]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	eor #$80.b		; 49 80 ; Exclusive OR #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $25		; 30 25 ; Branch if minus to $30, $25 [Flow: branch]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $C088.w,Y		; 79 88 C0 ; Add $C088.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	cmp $0B18.w,X		; DD 18 0B ; Compare accumulator $0B18.w,X [Reads: X Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $E9.b		; A5 E9 ; Load $E9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	adc $C08A.w,Y		; 79 8A C0 ; Add $C08A.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $0B20.w,X		; FD 20 0B ; Subtract with carry $0B20.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lsr $02.b		; 46 02 ; Logical shift right $02.b [Reads: Direct Page] [Flags: ZNC]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	eor #$80.b		; 49 80 ; Exclusive OR #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $2F		; 10 2F ; Branch if plus to $10, $2F [Flow: branch]
	stz $0B00.w,X		; 9E 00 0B ; Store zero to $0B00.w,X [Reads: X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $0B48.w,Y		; B9 48 0B ; Load $0B48.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$EF80.w		; 69 80 EF ; Add #$EF80.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
.ACCU 8
	sep #$20		; E2 20
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda [$01.b]		; A7 01 ; Load accumulator (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $F24B.w,Y		; 39 4B F2 ; AND accumulator with memory $F24B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Accumulator, Direct Page]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $C176.w		; [PATTERN: Memory clearing operation] 20 76 C1 ; Jump to subroutine at $C176.w [Writes: Stack Pointer] [Flow: call]
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	jsl $09C22F.l		; 22 2F C2 09 ; Jump to subroutine long $09C22F.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FBA.w		; 8D BA 0F ; Store accumulator to $0FBA.w [Reads: Accumulator]
	sta $0FB8.w		; 8D B8 0F ; Store accumulator to $0FB8.w [Reads: Accumulator]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	lda $048E.w		; AD 8E 04 ; Load $048E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $0B80.w,X		; DD 80 0B ; Compare accumulator $0B80.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $35		; F0 35 ; Branch if equal to $F0, $35 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: ZNC]
	.db $90, $F5		; 90 F5 ; Branch if carry clear to $90, $F5 [Flow: branch]
	lda $0B86.w		; AD 86 0B ; Load $0B86.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0B84.w		; AD 84 0B ; Load $0B84.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B86.w		; 8D 86 0B ; Store accumulator to $0B86.w [Reads: Accumulator]
	lda $0B82.w		; AD 82 0B ; Load $0B82.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B84.w		; 8D 84 0B ; Store accumulator to $0B84.w [Reads: Accumulator]
	lda $0B80.w		; AD 80 0B ; Load $0B80.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B82.w		; 8D 82 0B ; Store accumulator to $0B82.w [Reads: Accumulator]
	lda $048E.w		; AD 8E 04 ; Load $048E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B80.w		; 8D 80 0B ; Store accumulator to $0B80.w [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FDF80.l,X		; 9F 80 DF 7F ; Store accumulator (long,X) $7FDF80.l,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsr $C290.w		; 20 90 C2 ; Jump to subroutine at $C290.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $FB		; F0 FB ; Branch if equal to $F0, $FB [Flow: branch]
	sta $0FFA.w		; 8D FA 0F ; Store accumulator to $0FFA.w [Reads: Accumulator]
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: ZN]
	stz $1D00.w,X		; 9E 00 1D ; Store zero to $1D00.w,X [Reads: X Index]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1D10.w,X		; 9D 10 1D ; Store accumulator to $1D10.w,X [Reads: Accumulator, X Index]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1D20.w,X		; 9D 20 1D ; Store accumulator to $1D20.w,X [Reads: Accumulator, X Index]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1D60.w,X		; 9D 60 1D ; Store accumulator to $1D60.w,X [Reads: Accumulator, X Index]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1D30.w,X		; 9D 30 1D ; Store accumulator to $1D30.w,X [Reads: Accumulator, X Index]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1D40.w,X		; 9D 40 1D ; Store accumulator to $1D40.w,X [Reads: Accumulator, X Index]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1D50.w,X		; 9D 50 1D ; Store accumulator to $1D50.w,X [Reads: Accumulator, X Index]
	lda $0F00.w,X		; BD 00 0F ; Load $0F00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $7D		; D0 7D ; Branch if not equal to $D0, $7D [Flow: branch]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $76		; F0 76 ; Branch if equal to $F0, $76 [Flow: branch]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $72		; F0 72 ; Branch if equal to $F0, $72 [Flow: branch]
	sta $1D00.w,X		; 9D 00 1D ; Store accumulator to $1D00.w,X [Reads: Accumulator, X Index]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1D70.w,X		; 9D 70 1D ; Store accumulator to $1D70.w,X [Reads: Accumulator, X Index]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1D80.w,X		; 9D 80 1D ; Store accumulator to $1D80.w,X [Reads: Accumulator, X Index]
	lda $0F50.w,X		; BD 50 0F ; Load $0F50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1D90.w,X		; 9D 90 1D ; Store accumulator to $1D90.w,X [Reads: Accumulator, X Index]
	lda $0B89.w,X		; BD 89 0B ; Load $0B89.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1DA0.w,X		; 9D A0 1D ; Store accumulator to $1DA0.w,X [Reads: Accumulator, X Index]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1DB0.w,X		; 9D B0 1D ; Store accumulator to $1DB0.w,X [Reads: Accumulator, X Index]
	lda $0E40.w,X		; BD 40 0E ; Load $0E40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1DC0.w,X		; 9D C0 1D ; Store accumulator to $1DC0.w,X [Reads: Accumulator, X Index]
	lda $0F20.w,X		; BD 20 0F ; Load $0F20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1DD0.w,X		; 9D D0 1D ; Store accumulator to $1DD0.w,X [Reads: Accumulator, X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1DE0.w,X		; 9D E0 1D ; Store accumulator to $1DE0.w,X [Reads: Accumulator, X Index]
	lda $0E60.w,X		; BD 60 0E ; Load $0E60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $1DF0.w,X		; 9D F0 1D ; Store accumulator to $1DF0.w,X [Reads: Accumulator, X Index]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFA5C.l,X		; 9F 5C FA 7F ; Store accumulator (long,X) $7FFA5C.l,X [Reads: Accumulator, X Index]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFA6C.l,X		; 9F 6C FA 7F ; Store accumulator (long,X) $7FFA6C.l,X [Reads: Accumulator, X Index]
	lda $0E90.w,X		; BD 90 0E ; Load $0E90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFA7C.l,X		; 9F 7C FA 7F ; Store accumulator (long,X) $7FFA7C.l,X [Reads: Accumulator, X Index]
	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFA8C.l,X		; 9F 8C FA 7F ; Store accumulator (long,X) $7FFA8C.l,X [Reads: Accumulator, X Index]
	lda $0F70.w,X		; BD 70 0F ; Load $0F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFA9C.l,X		; 9F 9C FA 7F ; Store accumulator (long,X) $7FFA9C.l,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFAAC.l,X		; 9F AC FA 7F ; Store accumulator (long,X) $7FFAAC.l,X [Reads: Accumulator, X Index]
	lda $7FF9C2.l,X		; BF C2 F9 7F ; Load long $7FF9C2.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFACC.l,X		; 9F CC FA 7F ; Store accumulator (long,X) $7FFACC.l,X [Reads: Accumulator, X Index]
	lda $0BA0.w,X		; BD A0 0B ; Load $0BA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FFADC.l,X		; 9F DC FA 7F ; Store accumulator (long,X) $7FFADC.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	jmp $C17F.w		; 4C 7F C1 ; Jump to $C17F.w [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: ZN]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$6C.b		; C9 6C ; Compare #$6C.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stz $0DD0.w,X		; [PATTERN: Memory clearing operation] 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $EA		; 10 EA ; Branch if plus to $10, $EA [Flow: branch]
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: ZN]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	dex		; [PATTERN: Memory clearing operation] CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $FA		; 10 FA ; Branch if plus to $10, $FA [Flow: branch]
	stz $02EC.w		; 9C EC 02 ; Store zero to $02EC.w
	stz $0B6A.w		; 9C 6A 0B ; Store zero to $0B6A.w
	stz $0B9B.w		; 9C 9B 0B ; Store zero to $0B9B.w
	stz $0B88.w		; [PATTERN: Memory clearing operation] 9C 88 0B ; Store zero to $0B88.w
	stz $0B99.w		; 9C 99 0B ; Store zero to $0B99.w
	stz $0FB4.w		; 9C B4 0F ; Store zero to $0FB4.w
	stz $0B9E.w		; 9C 9E 0B ; Store zero to $0B9E.w
	stz $0CF4.w		; 9C F4 0C ; Store zero to $0CF4.w
	stz $0FF9.w		; [PATTERN: Memory clearing operation] 9C F9 0F ; Store zero to $0FF9.w
	stz $0FF8.w		; 9C F8 0F ; Store zero to $0FF8.w
	stz $0FFB.w		; 9C FB 0F ; Store zero to $0FFB.w
	stz $0FFC.w		; 9C FC 0F ; Store zero to $0FFC.w
	stz $0FFD.w		; 9C FD 0F ; Store zero to $0FFD.w
	stz $0FC6.w		; [PATTERN: Memory clearing operation] 9C C6 0F ; Store zero to $0FC6.w
	stz $03FC.w		; 9C FC 03 ; Store zero to $03FC.w
	ldx #$07.b		; A2 07 ; Load #$07.b into X register [Writes: X Index] [Flags: ZN]
	stz $0B00.w,X		; 9E 00 0B ; Store zero to $0B00.w,X [Reads: X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $FA		; 10 FA ; Branch if plus to $10, $FA [Flow: branch]
	ldx #$1D.b		; A2 1D ; Load #$1D.b into X register [Writes: X Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF800.l,X		; 9F 00 F8 7F ; Store accumulator (long,X) $7FF800.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F7		; 10 F7 ; Branch if plus to $10, $F7 [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $048E.w		; AD 8E 04 ; Load $048E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $D62E.w,Y		; B9 2E D6 ; Load $D62E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $048E.w		; AD 8E 04 ; Load $048E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FB1.w		; 8D B1 0F ; Store accumulator to $0FB1.w [Reads: Accumulator]
	lda $048E.w		; AD 8E 04 ; Load $048E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0FB0.w		; 8D B0 0F ; Store accumulator to $0FB0.w [Reads: Accumulator]
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0FB3.w		; [PATTERN: Memory clearing operation] 8D B3 0F ; Store accumulator to $0FB3.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	stz $02.b		; 64 02 ; Store zero to $02.b
	stz $03.b		; 64 03 ; Store zero to $03.b
	ldy $04.b		; A4 04 ; Load $04.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	jsr $C327.w		; 20 27 C3 ; Jump to subroutine at $C327.w [Writes: Stack Pointer] [Flow: call]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: ZN]
	inc $04.b		; E6 04 ; Increment $04.b [Reads: Direct Page] [Flags: ZN]
	inc $04.b		; E6 04 ; Increment $04.b [Reads: Direct Page] [Flags: ZN]
	inc $04.b		; E6 04 ; Increment $04.b [Reads: Direct Page] [Flags: ZN]
	.db $80, $EB		; 80 EB ; Branch always to $80, $EB [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	lda $0CAA.w,X		; BD AA 0C ; Load $0CAA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $B0, $23		; B0 23 ; Branch if carry set to $B0, $23 [Flow: branch]
	lda $0BC0.w,X		; BD C0 0B ; Load $0BC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $1E		; 30 1E ; Branch if minus to $30, $1E [Flow: branch]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	stz $03.b		; 64 03 ; Store zero to $03.b
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $048E.w		; AD 8E 04 ; Load $048E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $7FDF80.l,X		; BF 80 DF 7F ; Load long $7FDF80.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $C2D5.w,Y		; 19 D5 C2 ; OR accumulator with memory $C2D5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FDF80.l,X		; 9F 80 DF 7F ; Store accumulator (long,X) $7FDF80.l,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cpx #$E4.b		; E0 E4 ; Compare #$E4.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $1F		; D0 1F ; Branch if not equal to $D0, $1F [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$FE.b		; C9 FE ; Compare #$FE.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	cmp #$FD.b		; C9 FD ; Compare #$FD.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $1F		; D0 1F ; Branch if not equal to $D0, $1F [Flow: branch]
	jsr $C345.w		; 20 45 C3 ; Jump to subroutine at $C345.w [Writes: Stack Pointer] [Flow: call]
	inc $0CBA.w,X		; FE BA 0C ; Increment memory $0CBA.w,X [Reads: X Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $02.b		; C6 02 ; Decrement $02.b [Reads: Direct Page] [Flags: ZN]
	ldx $02.b		; A6 02 ; Load $02.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CBA.w,X		; 9D BA 0C ; Store accumulator to $0CBA.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	jsr $C3E8.w		; 20 E8 C3 ; Jump to subroutine at $C3E8.w [Writes: Stack Pointer] [Flow: call]
	dec $02.b		; C6 02 ; Decrement $02.b [Reads: Direct Page] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DB725.l,X		; BF 25 B7 0D ; Load long $0DB725.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $048E.w		; AD 8E 04 ; Load $048E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $7FDF80.l,X		; BF 80 DF 7F ; Load long $7FDF80.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $C2D5.w,Y		; 39 D5 C2 ; AND accumulator with memory $C2D5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	cmp #$0000.w		; C9 00 00 ; Compare #$0000.w with accumulator [Reads: Accumulator] [Flags: ZNC]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $02.b		; A6 02 ; Load $02.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0F20.w,X		; 9D 20 0F ; Store accumulator to $0F20.w,X [Reads: Accumulator, X Index]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $0FB1.w		; AD B1 0F ; Load $0FB1.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0FB6.w		; 8D B6 0F ; Store accumulator to $0FB6.w [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $0FB0.w		; AD B0 0F ; Load $0FB0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	stz $0E30.w,X		; 9E 30 0E ; Store zero to $0E30.w,X [Reads: X Index]
	lda $0FB5.w		; AD B5 0F ; Load $0FB5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$60.b		; 29 60 ; Logical AND #$60.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	lda $0FB6.w		; AD B6 0F ; Load $0FB6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $0FB5.w		; 0D B5 0F ; Logical OR $0FB5.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E30.w,X		; 9D 30 0E ; Store accumulator to $0E30.w,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0BC0.w,X		; 9D C0 0B ; Store accumulator to $0BC0.w,X [Reads: Accumulator, X Index]
	stz $0CBA.w,X		; 9E BA 0C ; Store zero to $0CBA.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$07.b		; A2 07 ; Load #$07.b into X register [Writes: X Index] [Flags: ZN]
	lda $0B00.w,X		; BD 00 0B ; Load $0B00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	nop		; EA ; No operation
	sta $0B00.w,X		; 9D 00 0B ; Store accumulator to $0B00.w,X [Reads: Accumulator, X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0B40.w,X		; 9D 40 0B ; Store accumulator to $0B40.w,X [Reads: Accumulator, X Index]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0B18.w,X		; 9D 18 0B ; Store accumulator to $0B18.w,X [Reads: Accumulator, X Index]
	lda $0FB1.w		; AD B1 0F ; Load $0FB1.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0B20.w,X		; 9D 20 0B ; Store accumulator to $0B20.w,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0B08.w,X		; 9D 08 0B ; Store accumulator to $0B08.w,X [Reads: Accumulator, X Index]
	lda $0FB0.w		; AD B0 0F ; Load $0FB0.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0B10.w,X		; 9D 10 0B ; Store accumulator to $0B10.w,X [Reads: Accumulator, X Index]
	jsr $C871.w		; 20 71 C8 ; Jump to subroutine at $C871.w [Writes: Stack Pointer] [Flow: call]
	lda $0B00.w,X		; BD 00 0B ; Load $0B00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $17		; F0 17 ; Branch if equal to $F0, $17 [Flow: branch]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B30.w,X		; 9D 30 0B ; Store accumulator to $0B30.w,X [Reads: Accumulator, X Index]
	lda $0B08.w,X		; BD 08 0B ; Load $0B08.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0B08.w,X		; 9D 08 0B ; Store accumulator to $0B08.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$A0.b		; A9 A0 ; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B30.w,X		; [PATTERN: Memory clearing operation] 9D 30 0B ; Store accumulator to $0B30.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $09C22F.l		; 22 2F C2 09 ; Jump to subroutine long $09C22F.l [Writes: Stack Pointer] [Flow: call]
	stz $0FDD.w		; 9C DD 0F ; Store zero to $0FDD.w
	stz $0FDC.w		; 9C DC 0F ; Store zero to $0FDC.w
	stz $0FFD.w		; [PATTERN: Memory clearing operation] 9C FD 0F ; Store zero to $0FFD.w
	stz $02F0.w		; 9C F0 02 ; Store zero to $02F0.w
	stz $0FC6.w		; 9C C6 0F ; Store zero to $0FC6.w
	stz $0B6A.w		; 9C 6A 0B ; Store zero to $0B6A.w
	stz $0FB3.w		; 9C B3 0F ; Store zero to $0FB3.w
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$FE.b		; A9 FE ; Load #$FE.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04B4.w		; 8D B4 04 ; Store accumulator to $04B4.w [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	ldx #$0FFF.w		; A2 FF 0F ; Load #$0FFF.w into X register [Writes: X Index] [Flags: ZN]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FDF80.l,X		; 9F 80 DF 7F ; Store accumulator (long,X) $7FDF80.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F9		; 10 F9 ; Branch if plus to $10, $F9 [Flow: branch]
	ldx #$01FF.w		; A2 FF 01 ; Load #$01FF.w into X register [Writes: X Index] [Flags: ZN]
	sta $7FEF80.l,X		; 9F 80 EF 7F ; Store accumulator (long,X) $7FEF80.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F9		; 10 F9 ; Branch if plus to $10, $F9 [Flow: branch]
.INDEX 8
	sep #$10		; E2 10
	ldy #$07.b		; A0 07 ; Load #$07.b into Y register [Writes: Y Index] [Flags: ZN]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B80.w,Y		; 99 80 0B ; Store accumulator to $0B80.w,Y [Reads: Accumulator, Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $FA		; 10 FA ; Branch if plus to $10, $FA [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $09C22F.l		; 22 2F C2 09 ; Jump to subroutine long $09C22F.l [Writes: Stack Pointer] [Flow: call]
	jsl $09C452.l		; 22 52 C4 09 ; Jump to subroutine long $09C452.l [Writes: Stack Pointer] [Flow: call]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $C4AC.w		; 20 AC C4 ; Jump to subroutine at $C4AC.w [Writes: Stack Pointer] [Flow: call]
	jsr $C55E.w		; 20 5E C5 ; Jump to subroutine at $C55E.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $040A.w		; AD 0A 04 ; Load $040A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	stz $0FBC.w		; 9C BC 0F ; Store zero to $0FBC.w
	sta $0FBD.w		; 8D BD 0F ; Store accumulator to $0FBD.w [Reads: Accumulator]
	lda $040A.w		; AD 0A 04 ; Load $040A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$0E.b		; 29 0E ; Logical AND #$0E.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0FBF.w		; 8D BF 0F ; Store accumulator to $0FBF.w [Reads: Accumulator]
	stz $0FBE.w		; 9C BE 0F ; Store zero to $0FBE.w
	lda $040A.w		; AD 0A 04 ; Load $040A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ldx $C635.w,Y		; [PATTERN: Memory clearing operation] BE 35 C6 ; Load X register $C635.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	stx $0FB9.w		; 8E B9 0F ; Store X register to $0FB9.w [Reads: X Index]
	stz $0FB8.w		; 9C B8 0F ; Store zero to $0FB8.w
	stx $0FBB.w		; 8E BB 0F ; Store X register to $0FBB.w [Reads: X Index]
	stz $0FBA.w		; 9C BA 0F ; Store zero to $0FBA.w
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $040A.w		; AD 0A 04 ; Load $040A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	lda $C881.w,Y		; B9 81 C8 ; Load $C881.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $C882.w,Y		; B9 82 C8 ; Load $C882.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $12		; 80 12 ; Branch always to $80, $12 [Flow: branch]
	lda $CA21.w,Y		; B9 21 CA ; Load $CA21.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $CA22.w,Y		; B9 22 CA ; Load $CA22.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda $C901.w,Y		; B9 01 C9 ; Load $C901.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $C902.w,Y		; B9 02 C9 ; Load $C902.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: ZN]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $45		; F0 45 ; Branch if equal to $F0, $45 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$F4.b		; C9 F4 ; Compare #$F4.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	inc $0FFD.w		; EE FD 0F ; Increment $0FFD.w [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $80, $E8		; 80 E8 ; Branch always to $80, $E8 [Flow: branch]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $07.b		; 05 07 ; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $05.b		; A6 05 ; Load $05.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7FDF80.l,X		; 9F 80 DF 7F ; Store accumulator (long,X) $7FDF80.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $80, $B5		; 80 B5 ; Branch always to $80, $B5 [Flow: branch]
.INDEX 8
	sep #$10		; E2 10
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $E3.b		; A5 E3 ; Load $E3.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $069F.w		; AD 9F 06 ; Load $069F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $069F.w		; 8D 9F 06 ; Store accumulator to $069F.w [Reads: Accumulator]
	ldy #$15.b		; A0 15 ; Load #$15.b into Y register [Writes: Y Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsr $C5BB.w		; 20 BB C5 ; Jump to subroutine at $C5BB.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $E2.b		; 85 E2 ; Store accumulator to $E2.b [Reads: Accumulator]
	lda $E3.b		; A5 E3 ; Load $E3.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $E3.b		; 85 E3 ; Store accumulator to $E3.b [Reads: Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $EB		; 10 EB ; Branch if plus to $10, $EB [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $069F.w		; 8D 9F 06 ; Store accumulator to $069F.w [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $E3.b		; 85 E3 ; Store accumulator to $E3.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $E2.b		; 85 E2 ; Store accumulator to $E2.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	jsr $C5BB.w		; 20 BB C5 ; Jump to subroutine at $C5BB.w [Writes: Stack Pointer] [Flow: call]
	jsr $C5FA.w		; 20 FA C5 ; Jump to subroutine at $C5FA.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0FB7.w		; AD B7 0F ; Load $0FB7.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $C5BB.w		; 20 BB C5 ; Jump to subroutine at $C5BB.w [Writes: Stack Pointer] [Flow: call]
	lda $0FB7.w		; AD B7 0F ; Load $0FB7.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $C5FA.w		; 20 FA C5 ; Jump to subroutine at $C5FA.w [Writes: Stack Pointer] [Flow: call]
	inc $0FB7.w		; EE B7 0F ; Increment $0FB7.w [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $069F.w		; AD 9F 06 ; Load $069F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $33		; F0 33 ; Branch if equal to $F0, $33 [Flow: branch]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $C5B7.w,Y		; 79 B7 C5 ; Add $C5B7.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $E3.b		; A5 E3 ; Load $E3.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $C5B9.w,Y		; 79 B9 C5 ; Add $C5B9.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$30.b		; E9 30 ; Subtract #$30.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $E9.b		; A5 E9 ; Load $E9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	ldx #$15.b		; A2 15 ; Load #$15.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C6F5.w		; 20 F5 C6 ; Jump to subroutine at $C6F5.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $EE		; 10 EE ; Branch if plus to $10, $EE [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $069E.w		; AD 9E 06 ; Load $069E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $33		; F0 33 ; Branch if equal to $F0, $33 [Flow: branch]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $C5F6.w,Y		; 79 F6 C5 ; Add $C5F6.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $E9.b		; A5 E9 ; Load $E9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $C5F8.w,Y		; 79 F8 C5 ; Add $C5F8.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$30.b		; E9 30 ; Subtract #$30.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $E3.b		; A5 E3 ; Load $E3.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	ldx #$15.b		; A2 15 ; Load #$15.b into X register [Writes: X Index] [Flags: ZN]
	jsr $C6F5.w		; 20 F5 C6 ; Jump to subroutine at $C6F5.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $EE		; 10 EE ; Branch if plus to $10, $EE [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
.ACCU 16
	rep #$20		; C2 20
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FBC.w		; ED BC 0F ; Subtract $0FBC.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cmp $0FB8.w		; CD B8 0F ; Compare $0FB8.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $2C		; B0 2C ; Branch if carry set to $B0, $2C [Flow: branch]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FBE.w		; ED BE 0F ; Subtract $0FBE.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cmp $0FBA.w		; CD BA 0F ; Compare $0FBA.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $1E		; B0 1E ; Branch if carry set to $B0, $1E [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr $C739.w		; 20 39 C7 ; Jump to subroutine at $C739.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	jsr $0810.w		; 20 10 08 ; Jump to subroutine at $0810.w [Writes: Stack Pointer] [Flow: call]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($C2.b,X)		; 01 C2 ; Logical OR ($C2.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $00A5.w		; 20 A5 00 ; Jump to subroutine at $00A5.w [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$80.b		; 69 80 ; Add #$80.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp $E20585.l,X		; DF 85 05 E2 ; Compare accumulator (long,X) $E20585.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	jsr $7FA9.w		; 20 A9 7F ; Jump to subroutine at $7FA9.w [Writes: Stack Pointer] [Flow: call]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda [$05.b]		; A7 05 ; Load accumulator (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$EF80.w		; 69 80 EF ; Add #$EF80.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda [$02.b]		; A7 02 ; Load accumulator (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $C731.w,Y		; 39 31 C7 ; AND accumulator with memory $C731.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $C770.w		; 20 70 C7 ; Jump to subroutine at $C770.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda [$05.b]		; A7 05 ; Load accumulator (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$F4.b		; C9 F4 ; Compare #$F4.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	jsr $C80B.w		; 20 0B C8 ; Jump to subroutine at $C80B.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: ZN]
	cmp #$58.b		; C9 58 ; Compare #$58.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	ldx #$05.b		; A2 05 ; Load #$05.b into X register [Writes: X Index] [Flags: ZN]
	cmp #$D0.b		; C9 D0 ; Compare #$D0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	ldx #$0D.b		; A2 0D ; Load #$0D.b into X register [Writes: X Index] [Flags: ZN]
	cmp #$58.b		; C9 58 ; Compare #$58.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$EB.b		; C9 EB ; Compare #$EB.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$53.b		; C9 53 ; Compare #$53.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$F3.b		; C9 F3 ; Compare #$F3.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx #$0E.b		; A2 0E ; Load #$0E.b into X register [Writes: X Index] [Flags: ZN]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$41.b		; C9 41 ; Compare #$41.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $EC		; 10 EC ; Branch if plus to $10, $EC [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda [$02.b]		; A7 02 ; Load accumulator (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $C731.w,Y		; 19 31 C7 ; OR accumulator with memory $C731.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$02.b]		; 87 02 ; Store accumulator (long) [$02.b] [Reads: Accumulator, Direct Page]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0BC0.w,X		; 9D C0 0B ; Store accumulator to $0BC0.w,X [Reads: Accumulator, X Index]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda [$05.b]		; A7 05 ; Load accumulator (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0FBD.w		; 6D BD 0F ; Add $0FBD.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; [PATTERN: Memory clearing operation] 18 ; Clear carry flag [Flags: C]
	adc $0FBF.w		; 6D BF 0F ; Add $0FBF.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	stz $0F20.w,X		; 9E 20 0F ; Store zero to $0F20.w,X [Reads: X Index]
	stz $0E30.w,X		; 9E 30 0E ; Store zero to $0E30.w,X [Reads: X Index]
	stz $0CBA.w,X		; 9E BA 0C ; Store zero to $0CBA.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$07.b		; A2 07 ; Load #$07.b into X register [Writes: X Index] [Flags: ZN]
	lda $0B00.w,X		; BD 00 0B ; Load $0B00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda [$02.b]		; A7 02 ; Load accumulator (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $C731.w,Y		; 19 31 C7 ; OR accumulator with memory $C731.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$02.b]		; 87 02 ; Store accumulator (long) [$02.b] [Reads: Accumulator, Direct Page]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0B48.w,X		; 9D 48 0B ; Store accumulator to $0B48.w,X [Reads: Accumulator, X Index]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda [$05.b]		; A7 05 ; Load accumulator (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$F3.b		; E9 F3 ; Subtract #$F3.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $0B00.w,X		; 9D 00 0B ; Store accumulator to $0B00.w,X [Reads: Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	cpy #$01.b		; C0 01 ; Compare #$01.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0B08.w,X		; 9D 08 0B ; Store accumulator to $0B08.w,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B18.w,X		; 9D 18 0B ; Store accumulator to $0B18.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0B10.w,X		; 9D 10 0B ; Store accumulator to $0B10.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0B20.w,X		; 9D 20 0B ; Store accumulator to $0B20.w,X [Reads: Accumulator, X Index]
	lda $0B10.w,X		; BD 10 0B ; Load $0B10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0FBD.w		; 6D BD 0F ; Add $0FBD.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0B10.w,X		; 9D 10 0B ; Store accumulator to $0B10.w,X [Reads: Accumulator, X Index]
	lda $0B20.w,X		; BD 20 0B ; Load $0B20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0FBF.w		; 6D BF 0F ; Add $0FBF.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0B20.w,X		; [PATTERN: Memory clearing operation] 9D 20 0B ; Store accumulator to $0B20.w,X [Reads: Accumulator, X Index]
	stz $0B40.w,X		; 9E 40 0B ; Store zero to $0B40.w,X [Reads: X Index]
	lda $040A.w		; AD 0A 04 ; Load $040A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0CCA.w,X		; 9D CA 0C ; Store accumulator to $0CCA.w,X [Reads: Accumulator, X Index]
	stz $0B30.w,X		; 9E 30 0B ; Store zero to $0B30.w,X [Reads: X Index]
	stz $0B28.w,X		; [PATTERN: Memory clearing operation] 9E 28 0B ; Store zero to $0B28.w,X [Reads: X Index]
	stz $0B38.w,X		; 9E 38 0B ; Store zero to $0B38.w,X [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $CB		; 42 CB ; Reserved instruction
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	wai		; CB ; Wait for interrupt
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $CB66CB.l,X		; 5F CB 66 CB ; Exclusive OR accumulator with memory (long,X) $CB66CB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($CB.b,S),Y		; 73 CB ; Add with carry (stack relative indirect indexed) ($CB.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $41CF.w		; 4C CF 41 ; Jump to $41CF.w [Flow: jump]
	wai		; CB ; Wait for interrupt
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	cmp $41CF84.l		; CF 84 CF 41 ; Compare accumulator (long) $41CF84.l [Reads: Accumulator] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	ldx $CF.b		; A6 CF ; Load $CF.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $41CF.w		; CE CF 41 ; Decrement $41CF.w [Flags: ZN]
	wai		; CB ; Wait for interrupt
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $41CF.w,X		; DE CF 41 ; Decrement memory $41CF.w,X [Reads: X Index] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $13CF.w,X		; FD CF 13 ; Subtract with carry $13CF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	.db $D0, $2D		; D0 2D ; Branch if not equal to $D0, $2D [Flow: branch]
	.db $D0, $3A		; D0 3A ; Branch if not equal to $D0, $3A [Flow: branch]
	.db $D0, $41		; D0 41 ; Branch if not equal to $D0, $41 [Flow: branch]
	.db $D0, $51		; D0 51 ; Branch if not equal to $D0, $51 [Flow: branch]
	.db $D0, $5E		; D0 5E ; Branch if not equal to $D0, $5E [Flow: branch]
	.db $D0, $68		; D0 68 ; Branch if not equal to $D0, $68 [Flow: branch]
	.db $D0, $78		; D0 78 ; Branch if not equal to $D0, $78 [Flow: branch]
	.db $D0, $41		; D0 41 ; Branch if not equal to $D0, $41 [Flow: branch]
	wai		; CB ; Wait for interrupt
	ldy #$D0.b		; A0 D0 ; Load #$D0.b into Y register [Writes: Y Index] [Flags: ZN]
	lda ($D0.b,S),Y		; B3 D0 ; Load accumulator (stack relative indirect indexed) ($D0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	.db $D0, $EB		; D0 EB ; Branch if not equal to $D0, $EB [Flow: branch]
	.db $D0, $41		; D0 41 ; Branch if not equal to $D0, $41 [Flow: branch]
	wai		; CB ; Wait for interrupt
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $D1.b		; 25 D1 ; Logical AND $D1.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $CB41D1.l		; 2F D1 41 CB ; AND accumulator with memory (long) $CB41D1.l [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp ($41.b),Y		; D1 41 ; Compare accumulator ($41.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	eor ($D1.b)		; 52 D1 ; Exclusive OR accumulator with memory (indirect) ($D1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp ($75.b),Y		; D1 75 ; Compare accumulator ($75.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($7C.b),Y		; D1 7C ; Compare accumulator ($7C.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($86.b),Y		; D1 86 ; Compare accumulator ($86.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($93.b),Y		; D1 93 ; Compare accumulator ($93.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($9D.b),Y		; D1 9D ; Compare accumulator ($9D.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp ($41.b),Y		; D1 41 ; Compare accumulator ($41.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	sbc $D1.b,S		; E3 D1 ; Subtract stack-relative $D1.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	.db $F0, $D1		; F0 D1 ; Branch if equal to $F0, $D1 [Flow: branch]
	sbc $13D1.w,X		; FD D1 13 ; Subtract with carry $13D1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($41.b)		; D2 41 ; Compare accumulator (indirect) ($41.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	eor $41D2.w,Y		; 59 D2 41 ; Exclusive OR accumulator with memory $41D2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($79D2.w)		; 6C D2 79 ; Jump indirect to ($79D2.w) [Flow: jump]
	cmp ($92.b)		; D2 92 ; Compare accumulator (indirect) ($92.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp ($41.b)		; D2 41 ; Compare accumulator (indirect) ($41.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cmp ($7A.b)		; D2 7A ; Compare accumulator (indirect) ($7A.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	lda [$CB.b],Y		; B7 CB ; Load accumulator (long indexed) [$CB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$CB.b],Y		; B7 CB ; Load accumulator (long indexed) [$CB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy $CB.b		; C4 CB ; Compare $CB.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	wai		; CB ; Wait for interrupt
	wai		; CB ; Wait for interrupt
	wai		; CB ; Wait for interrupt
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $CB.b,X		; D5 CB ; Compare accumulator $CB.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $41CB.w,Y		; D9 CB 41 ; Compare accumulator $41CB.w,Y [Reads: Y Index] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $CB.b,X		; F5 CB ; Subtract $CB.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cop $CC.b		; 02 CC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($CC.b)		; 12 CC ; OR accumulator with memory (indirect) ($CC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $CC.b		; 25 CC ; Logical AND $CC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $CC.b,X		; 35 CC ; Logical AND $CC.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $CC.b		; 45 CC ; Exclusive OR $CC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $74CC.w,X		; 5E CC 74 ; Logical shift right $74CC.w,X [Reads: X Index] [Flags: ZNC]
	cpy $CC84.w		; CC 84 CC ; Compare $CC84.w with Y register [Reads: Y Index] [Flags: ZNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	cpy $CB41.w		; CC 41 CB ; Compare $CB41.w with Y register [Reads: Y Index] [Flags: ZNC]
	dec $E1CC.w		; CE CC E1 ; Decrement $E1CC.w [Flags: ZN]
	cpy $CB41.w		; CC 41 CB ; Compare $CB41.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora $CD.b,S		; 03 CD ; OR accumulator with stack relative $CD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $41CD.w,Y		; 19 CD 41 ; OR accumulator with memory $41CD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $41CD.w,Y		; 59 CD 41 ; Exclusive OR accumulator with memory $41CD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($41CD.w)		; 6C CD 41 ; Jump indirect to ($41CD.w) [Flow: jump]
	wai		; CB ; Wait for interrupt
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $CD83CD.l,X		; 7F CD 83 CD ; Add long $CD83CD.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$CD.b]		; 87 CD ; Store accumulator (long) [$CD.b] [Reads: Accumulator, Direct Page]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cmp $CD9B.w		; CD 9B CD ; Compare $CD9B.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	cmp $CDBE.w		; CD BE CD ; Compare $CDBE.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp ($CD.b),Y		; D1 CD ; Compare accumulator ($CD.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sbc ($CD.b,X)		; E1 CD ; Subtract with carry ($CD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl $CE.b		; 06 CE ; Arithmetic shift left $CE.b [Reads: Direct Page] [Flags: ZNC]
	asl $CE.b		; 06 CE ; Arithmetic shift left $CE.b [Reads: Direct Page] [Flags: ZNC]
	asl $CE.b,X		; 16 CE ; Arithmetic shift left $CE.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	rol $CE.b		; 26 CE ; Rotate left $CE.b [Reads: Direct Page] [Flags: ZNC]
	bit $7FCE.w,X		; 3C CE 7F ; Test bits $7FCE.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	dec $CE7F.w		; CE 7F CE ; Decrement $CE7F.w [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($CE.b)		; 92 CE ; Store accumulator (indirect) ($CE.b) [Reads: Accumulator, Direct Page]
	sta $CEB2CE.l,X		; 9F CE B2 CE ; Store accumulator (long,X) $CEB2CE.l,X [Reads: Accumulator, X Index]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $CE.b		; C5 CE ; Compare $CE.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	dec $CEF4.w		; CE F4 CE ; Decrement $CEF4.w [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cmp ($41.b)		; D2 41 ; Compare accumulator (indirect) ($41.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	sbc $D2.b,S		; E3 D2 ; Subtract stack-relative $D2.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc [$D2.b]		; E7 D2 ; Subtract with carry (long) [$D2.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $D3.b,X		; 15 D3 ; OR accumulator with memory $D3.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $D3.b,S		; 43 D3 ; Exclusive OR accumulator with stack relative $D3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($D3.b,S),Y		; 53 D3 ; XOR accumulator (stack relative indirect indexed) ($D3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$D3.b		; 69 D3 ; Add #$D3.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $D38FD3.l,X		; 7F D3 8F D3 ; Add long $D38FD3.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $A9D3.w		; 9C D3 A9 ; Store zero to $A9D3.w
	cmp ($B6.b,S),Y		; D3 B6 ; Compare accumulator (stack relative indirect indexed) ($B6.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cmp ($C9.b,S),Y		; D3 C9 ; Compare accumulator (stack relative indirect indexed) ($C9.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cmp ($D9.b,S),Y		; D3 D9 ; Compare accumulator (stack relative indirect indexed) ($D9.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cmp ($E3.b,S),Y		; D3 E3 ; Compare accumulator (stack relative indirect indexed) ($E3.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cmp ($F3.b,S),Y		; D3 F3 ; Compare accumulator (stack relative indirect indexed) ($F3.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cmp ($41.b,S),Y		; D3 41 ; Compare accumulator (stack relative indirect indexed) ($41.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	pei ($28.b)		; D4 28 ; Push effective indirect address ($28.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($41.b)		; D4 41 ; Push effective indirect address ($41.b) [Reads: Direct Page] [Writes: Stack Pointer]
	wai		; CB ; Wait for interrupt
	eor [$D4.b]		; 47 D4 ; Exclusive OR accumulator with memory (long) [$D4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvn $41,$D4		; 54 D4 41 ; Move block negative $41,$D4 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	wai		; CB ; Wait for interrupt
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($D4.b),Y		; 91 D4 ; Store accumulator ($D4.b),Y [Reads: Accumulator, Direct Page, Y Index]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	pei ($41.b)		; D4 41 ; Push effective indirect address ($41.b) [Reads: Direct Page] [Writes: Stack Pointer]
	wai		; CB ; Wait for interrupt
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	pei ($B8.b)		; D4 B8 ; Push effective indirect address ($B8.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($C2.b)		; D4 C2 ; Push effective indirect address ($C2.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DE.b)		; D4 DE ; Push effective indirect address ($DE.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($EE.b)		; D4 EE ; Push effective indirect address ($EE.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($F5.b)		; D4 F5 ; Push effective indirect address ($F5.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($02.b)		; D4 02 ; Push effective indirect address ($02.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $15.b,X		; D5 15 ; Compare accumulator $15.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp $1F.b,X		; D5 1F ; Compare accumulator $1F.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp $41.b,X		; D5 41 ; Compare accumulator $41.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	jmp $D56FD5.l		; 5C D5 6F D5 ; Jump long to $D56FD5.l [Flow: jump]
	adc $D58FD5.l,X		; 7F D5 8F D5 ; Add long $D58FD5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $D5.b,X		; D5 D5 ; Compare accumulator $D5.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp $D5.b,X		; D5 D5 ; Compare accumulator $D5.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $D5.b		; E5 D5 ; Subtract $D5.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $D5.b		; E5 D5 ; Subtract $D5.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $D5.b		; E5 D5 ; Subtract $D5.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $11D5.w,X		; FE D5 11 ; Increment memory $11D5.w,X [Reads: X Index] [Flags: ZN]
	dec $21.b,X		; D6 21 ; Decrement memory $21.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dec $21.b,X		; D6 21 ; Decrement memory $21.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dec $21.b,X		; D6 21 ; Decrement memory $21.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dec $7A.b,X		; D6 7A ; Decrement memory $7A.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	lda [$CB.b],Y		; B7 CB ; Load accumulator (long indexed) [$CB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$CB.b],Y		; B7 CB ; Load accumulator (long indexed) [$CB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy $CB.b		; C4 CB ; Compare $CB.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	wai		; CB ; Wait for interrupt
	wai		; CB ; Wait for interrupt
	wai		; CB ; Wait for interrupt
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $CB.b,X		; D5 CB ; Compare accumulator $CB.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $41CB.w,Y		; D9 CB 41 ; Compare accumulator $41CB.w,Y [Reads: Y Index] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $CB.b,X		; F5 CB ; Subtract $CB.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cop $CC.b		; 02 CC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($CC.b)		; 12 CC ; OR accumulator with memory (indirect) ($CC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $CC.b		; 25 CC ; Logical AND $CC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $CC.b,X		; 35 CC ; Logical AND $CC.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $CC.b		; 45 CC ; Exclusive OR $CC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $74CC.w,X		; 5E CC 74 ; Logical shift right $74CC.w,X [Reads: X Index] [Flags: ZNC]
	cpy $CC84.w		; CC 84 CC ; Compare $CC84.w with Y register [Reads: Y Index] [Flags: ZNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	cpy $CB41.w		; CC 41 CB ; Compare $CB41.w with Y register [Reads: Y Index] [Flags: ZNC]
	dec $E1CC.w		; CE CC E1 ; Decrement $E1CC.w [Flags: ZN]
	cpy $CB41.w		; CC 41 CB ; Compare $CB41.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora $CD.b,S		; 03 CD ; OR accumulator with stack relative $CD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $41CD.w,Y		; 19 CD 41 ; OR accumulator with memory $41CD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $41CD.w,Y		; 59 CD 41 ; Exclusive OR accumulator with memory $41CD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($41CD.w)		; 6C CD 41 ; Jump indirect to ($41CD.w) [Flow: jump]
	wai		; CB ; Wait for interrupt
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $CD83CD.l,X		; 7F CD 83 CD ; Add long $CD83CD.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$CD.b]		; 87 CD ; Store accumulator (long) [$CD.b] [Reads: Accumulator, Direct Page]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cmp $CD9B.w		; CD 9B CD ; Compare $CD9B.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	cmp $CDBE.w		; CD BE CD ; Compare $CDBE.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp ($CD.b),Y		; D1 CD ; Compare accumulator ($CD.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sbc ($CD.b,X)		; E1 CD ; Subtract with carry ($CD.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl $CE.b		; 06 CE ; Arithmetic shift left $CE.b [Reads: Direct Page] [Flags: ZNC]
	asl $CE.b		; 06 CE ; Arithmetic shift left $CE.b [Reads: Direct Page] [Flags: ZNC]
	asl $CE.b,X		; 16 CE ; Arithmetic shift left $CE.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	rol $CE.b		; 26 CE ; Rotate left $CE.b [Reads: Direct Page] [Flags: ZNC]
	bit $7FCE.w,X		; 3C CE 7F ; Test bits $7FCE.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	dec $CE7F.w		; CE 7F CE ; Decrement $CE7F.w [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($CE.b)		; 92 CE ; Store accumulator (indirect) ($CE.b) [Reads: Accumulator, Direct Page]
	sta $CEB2CE.l,X		; 9F CE B2 CE ; Store accumulator (long,X) $CEB2CE.l,X [Reads: Accumulator, X Index]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $CE.b		; C5 CE ; Compare $CE.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	dec $CEF4.w		; CE F4 CE ; Decrement $CEF4.w [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($CB.b,X)		; 41 CB ; Exclusive OR accumulator with memory ($CB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $401F06.l,X		; FF 06 1F 40 ; Subtract with carry (long,X) $401F06.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $3F0114.l,X		; 3F 14 01 3F ; AND accumulator with memory (long,X) $3F0114.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($1F.b,S),Y		; 13 1F ; OR accumulator (stack relative indirect indexed) ($1F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $1A		; 42 1A ; Reserved instruction
	ora $201A4B.l,X		; 1F 4B 1A 20 ; Logical OR long $201A4B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	and $2D.b		; 25 2D ; Logical AND $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $3F2029.l,X		; 3F 29 20 3F ; AND accumulator with memory (long,X) $3F2029.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $AC0B06.l,X		; FF 06 0B AC ; Subtract with carry (long,X) $AC0B06.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $3F091E.l,X		; FF 1E 09 3F ; Subtract with carry (long,X) $3F091E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $3F0B.w,X		; 1E 0B 3F ; Arithmetic shift left $3F0B.w,X [Reads: X Index] [Flags: ZNC]
	sbc $3F1E18.l,X		; FF 18 1E 3F ; Subtract with carry (long,X) $3F1E18.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $1E3F.w,X		; 1E 3F 1E ; Arithmetic shift left $1E3F.w,X [Reads: X Index] [Flags: ZNC]
	ora $1E3F.w		; 0D 3F 1E ; Logical OR $1E3F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $09FF3F.l		; 0F 3F FF 09 ; OR accumulator with memory (long) $09FF3F.l [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jmp.w [$1812]		; DC 12 18 ; Jump long indirect [$1812] [Flow: jump]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sbc $221A07.l,X		; FF 07 1A 22 ; Subtract with carry (long,X) $221A07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($12.b),Y		; 11 12 ; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $220A1E.l		; 22 1E 0A 22 ; Jump to subroutine long $220A1E.l [Writes: Stack Pointer] [Flow: call]
	ora #$2F.b		; 09 2F ; Logical OR #$2F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0E310A.l		; 22 0A 31 0E ; Jump to subroutine long $0E310A.l [Writes: Stack Pointer] [Flow: call]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and ($22.b,S),Y		; 33 22 ; AND accumulator (stack relative indirect indexed) ($22.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $29.b		; 14 29 ; Test and reset bits $29.b [Reads: Accumulator] [Flags: Z]
	jsl $222316.l		; 22 16 23 22 ; Jump to subroutine long $222316.l [Writes: Stack Pointer] [Flow: call]
	ora [$39.b],Y		; 17 39 ; OR accumulator with memory (long indexed) [$39.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	and ($0A.b,X)		; 21 0A ; Logical AND ($0A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $221A25.l		; 22 25 1A 22 ; Jump to subroutine long $221A25.l [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	.db $30, $1E		; 30 1E ; Branch if minus to $30, $1E [Flow: branch]
	jsl $220E38.l		; 22 38 0E 22 ; Jump to subroutine long $220E38.l [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	ora ($22.b),Y		; 11 22 ; OR accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $221A.w,Y		; 39 1A 22 ; AND accumulator with memory $221A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($2D.b,X)		; 21 2D ; Logical AND ($2D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $223228.l		; 22 28 32 22 ; Jump to subroutine long $223228.l [Writes: Stack Pointer] [Flow: call]
	and ($37.b)		; 32 37 ; AND accumulator with memory (indirect) ($37.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $AA2837.l		; 22 37 28 AA ; Jump to subroutine long $AA2837.l [Writes: Stack Pointer] [Flow: call]
	sbc $0E0C11.l,X		; FF 11 0C 0E ; Subtract with carry (long,X) $0E0C11.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($0C.b,S),Y		; 13 0C ; OR accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $0616.w		; 0E 16 06 ; Arithmetic shift left $0616.w [Flags: ZNC]
	sbc $19.b,S		; E3 19 ; Subtract stack-relative $19.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $FF12.w		; 0E 12 FF ; Arithmetic shift left $FF12.w [Flags: ZNC]
	tsb $372F.w		; 0C 2F 37 ; Test and set bits $372F.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsr $FFB9.w		; 20 B9 FF ; Jump to subroutine at $FFB9.w [Writes: Stack Pointer] [Flow: call]
	tsb $D006.w		; 0C 06 D0 ; Test and set bits $D006.w [Reads: Accumulator] [Flags: Z]
	asl $D01D.w		; 0E 1D D0 ; Arithmetic shift left $D01D.w [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr $FFD0.w		; 20 D0 FF ; Jump to subroutine at $FFD0.w [Writes: Stack Pointer] [Flow: call]
	trb $16.b		; 14 16 ; Test and reset bits $16.b [Reads: Accumulator] [Flags: Z]
	and ($FF.b,S),Y		; 33 FF ; AND accumulator (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $0E.b		; 06 0E ; Arithmetic shift left $0E.b [Reads: Direct Page] [Flags: ZNC]
	and ($08.b,S),Y		; 33 08 ; AND accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $10120B.l		; 0F 0B 12 10 ; OR accumulator with memory (long) $10120B.l [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($13.b)		; 12 13 ; OR accumulator with memory (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $12.b,X		; 16 12 ; Arithmetic shift left $12.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $1A22.w		; 0E 22 1A ; Arithmetic shift left $1A22.w [Flags: ZNC]
	trb $D3.b		; 14 D3 ; Test and reset bits $D3.b [Reads: Accumulator] [Flags: Z]
	sbc $551908.l,X		; FF 08 19 55 ; Subtract with carry (long,X) $551908.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $C0.b		; 04 C0 ; Test and set bits $C0.b [Reads: Accumulator] [Flags: Z]
	ora $D318.w		; 0D 18 D3 ; Logical OR $D318.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($1A.b),Y		; 11 1A ; OR accumulator with memory ($1A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $160BFF.l		; 22 FF 0B 16 ; Jump to subroutine long $160BFF.l [Writes: Stack Pointer] [Flow: call]
	ora $050C.w,Y		; 19 0C 05 ; OR accumulator with memory $050C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($0E.b)		; 12 0E ; OR accumulator with memory (indirect) ($0E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $13.b		; 25 13 ; Logical AND $13.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $180B.w,Y		; 19 0B 18 ; OR accumulator with memory $180B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($FF.b)		; 12 FF ; OR accumulator with memory (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $4517.w		; 0E 17 45 ; Arithmetic shift left $4517.w [Flags: ZNC]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	sbc $10.b,S		; E3 10 ; Subtract stack-relative $10.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora #$E3.b		; 09 E3 ; Logical OR #$E3.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $1C.b,X		; 15 1C ; OR accumulator with memory $1C.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($16.b,S),Y		; D3 16 ; Compare accumulator (stack relative indirect indexed) ($16.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	trb $12.b		; 14 12 ; Test and reset bits $12.b [Reads: Accumulator] [Flags: Z]
	ora [$0E.b],Y		; 17 0E ; OR accumulator with memory (long indexed) [$0E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b)		; 12 FF ; OR accumulator with memory (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$12.b		; 09 12 ; Logical OR #$12.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp ($0D.b,S),Y		; D3 0D ; Compare accumulator (stack relative indirect indexed) ($0D.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	ora $12.b,X		; 15 12 ; OR accumulator with memory $12.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $07		; 10 07 ; Branch if plus to $10, $07 [Flow: branch]
	eor ($17.b,X)		; 41 17 ; Exclusive OR accumulator with memory ($17.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $41.b		; 14 41 ; Test and reset bits $41.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $FF12.w		; 0E 12 FF ; Arithmetic shift left $FF12.w [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $D3.b		; 06 D3 ; Arithmetic shift left $D3.b [Reads: Direct Page] [Flags: ZNC]
	tsb $1115.w		; 0C 15 11 ; Test and set bits $1115.w [Reads: Accumulator] [Flags: Z]
	ora $2208.w		; 0D 08 22 ; Logical OR $2208.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0D.b,X		; 15 0D ; OR accumulator with memory $0D.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0E.b,X		; 16 0E ; Arithmetic shift left $0E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $22140D.l,X		; FF 0D 14 22 ; Subtract with carry (long,X) $22140D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $DC.b		; 05 DC ; Logical OR $DC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0FDB.w,Y		; 19 DB 0F ; OR accumulator with memory $0FDB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$22.b]		; 07 22 ; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $E30F.w		; 0E 0F E3 ; Arithmetic shift left $E30F.w [Flags: ZNC]
	.db $10, $19		; 10 19 ; Branch if plus to $10, $19 [Flow: branch]
	jsl $220D14.l		; 22 14 0D 22 ; Jump to subroutine long $220D14.l [Writes: Stack Pointer] [Flow: call]
	ora $1111.w,Y		; 19 11 11 ; OR accumulator with memory $1111.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $BA1109.l,X		; FF 09 11 BA ; Subtract with carry (long,X) $BA1109.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $1116.w		; 0E 16 11 ; Arithmetic shift left $1116.w [Flags: ZNC]
	asl $D318.w		; 0E 18 D3 ; Arithmetic shift left $D318.w [Flags: ZNC]
	ora $17DA1B.l		; 0F 1B DA 17 ; OR accumulator with memory (long) $17DA1B.l [Writes: Accumulator] [Flags: ZN]
	ora [$11.b]		; 07 11 ; OR accumulator with memory (long) [$11.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $1A1B.w,Y		; 79 1B 1A ; Add $1A1B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $0A06FF.l		; 22 FF 06 0A ; Jump to subroutine long $0A06FF.l [Writes: Stack Pointer] [Flow: call]
	eor $0A.b,X		; 55 0A ; Exclusive OR accumulator with memory $0A.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($55.b,S),Y		; 13 55 ; OR accumulator (stack relative indirect indexed) ($55.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $7904.w		; 0E 04 79 ; Arithmetic shift left $7904.w [Flags: ZNC]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $22051A.l		; 22 1A 05 22 ; Jump to subroutine long $22051A.l [Writes: Stack Pointer] [Flow: call]
	sbc $550C04.l,X		; FF 04 0C 55 ; Subtract with carry (long,X) $550C04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $08.b,X		; 16 08 ; Arithmetic shift left $08.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $080E.w		; 0E 0E 08 ; Arithmetic shift left $080E.w [Flags: ZNC]
	.db $10, $0E		; 10 0E ; Branch if plus to $10, $0E [Flow: branch]
	cmp ($1A.b,S),Y		; D3 1A ; Compare accumulator (stack relative indirect indexed) ($1A.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	asl $1B08.w		; 0E 08 1B ; Arithmetic shift left $1B08.w [Flags: ZNC]
	ora $FF08.w		; 0D 08 FF ; Logical OR $FF08.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $13.b		; 06 13 ; Arithmetic shift left $13.b [Reads: Direct Page] [Flags: ZNC]
	ora ($0C.b)		; 12 0C ; OR accumulator with memory (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $1C.b		; 25 1C ; Logical AND $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$41.b]		; 07 41 ; OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $12.b,X		; 35 12 ; Logical AND $12.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $192B.w		; 0C 2B 19 ; Test and set bits $192B.w [Reads: Accumulator] [Flags: Z]
	ora [$2E.b],Y		; 17 2E ; OR accumulator with memory (long indexed) [$2E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy $1C.b		; C4 1C ; Compare $1C.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	jsr $2514.w		; 20 14 25 ; Jump to subroutine at $2514.w [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $0D27.w,Y		; 19 27 0D ; OR accumulator with memory $0D27.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy $28.b		; C4 28 ; Compare $28.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ora $2E19.w,X		; 1D 19 2E ; OR accumulator with memory $2E19.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $16.b,X		; 34 16 ; Test bits $16.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and [$15.b],Y		; 37 15 ; AND accumulator with memory (long indexed) [$15.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and [$28.b]		; 27 28 ; AND accumulator with memory (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and $344133.l		; 2F 33 41 34 ; AND accumulator with memory (long) $344133.l [Writes: Accumulator] [Flags: ZN]
	bit $3519.w		; 2C 19 35 ; Test bits $3519.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and [$25.b],Y		; 37 25 ; AND accumulator with memory (long indexed) [$25.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $120F08.l,X		; FF 08 0F 12 ; Subtract with carry (long,X) $120F08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($25.b)		; 12 25 ; OR accumulator with memory (indirect) ($25.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $D312.w		; 0D 12 D3 ; Logical OR $D312.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $1215.w		; 0C 15 12 ; Test and set bits $1215.w [Reads: Accumulator] [Flags: Z]
	ora $19110B.l		; 0F 0B 11 19 ; OR accumulator with memory (long) $19110B.l [Writes: Accumulator] [Flags: ZN]
	asl $FF12.w		; 0E 12 FF ; Arithmetic shift left $FF12.w [Flags: ZNC]
	ora [$15.b],Y		; 17 15 ; OR accumulator with memory (long indexed) [$15.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $EB3412.l		; 22 12 34 EB ; Jump to subroutine long $EB3412.l [Writes: Stack Pointer] [Flow: call]
	bit $13.b		; 24 13 ; Test bits $13.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($27.b,S),Y		; 33 27 ; AND accumulator (stack relative indirect indexed) ($27.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $172A12.l		; 0F 12 2A 17 ; OR accumulator with memory (long) $172A12.l [Writes: Accumulator] [Flags: ZN]
	sbc $2A.b,S		; E3 2A ; Subtract stack-relative $2A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	tsb $2C12.w		; 0C 12 2C ; Test and set bits $2C12.w [Reads: Accumulator] [Flags: Z]
	asl $2511.w,X		; 1E 11 25 ; Arithmetic shift left $2511.w,X [Reads: X Index] [Flags: ZNC]
	bit $0E.b,X		; 34 0E ; Test bits $0E.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and [$32.b]		; 27 32 ; AND accumulator with memory (long) [$32.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($29.b)		; 12 29 ; OR accumulator with memory (indirect) ($29.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $12		; 30 12 ; Branch if minus to $30, $12 [Flow: branch]
	bit $1121.w		; 2C 21 11 ; Test bits $1121.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	sbc $250B08.l,X		; FF 08 0B 25 ; Subtract with carry (long,X) $250B08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$07.b		; 09 07 ; Logical OR #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($0B.b),Y		; 11 0B ; OR accumulator with memory ($0B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $0E.b		; 06 0E ; Arithmetic shift left $0E.b [Reads: Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($0E.b)		; 12 0E ; OR accumulator with memory (indirect) ($0E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$D3.b],Y		; 17 D3 ; OR accumulator with memory (long indexed) [$D3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $1A		; 10 1A ; Branch if plus to $10, $1A [Flow: branch]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor ($FF.b,X)		; 41 FF ; Exclusive OR accumulator with memory ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0D.b		; 04 0D ; Test and set bits $0D.b [Reads: Accumulator] [Flags: Z]
	jsl $220311.l		; 22 11 03 22 ; Jump to subroutine long $220311.l [Writes: Stack Pointer] [Flow: call]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $1A.b,Y		; B6 1A ; Load X register $1A.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ora ($22.b)		; 12 22 ; OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$27.b		; 09 27 ; Logical OR #$27.b with accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $222F10.l		; 22 10 2F 22 ; Jump to subroutine long $222F10.l [Writes: Stack Pointer] [Flow: call]
	ora $25.b,X		; 15 25 ; OR accumulator with memory $25.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($17.b)		; 12 17 ; OR accumulator with memory (indirect) ($17.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $11.b		; 26 11 ; Rotate left $11.b [Reads: Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $22.b,X		; 35 22 ; Logical AND $22.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $222A.w,X		; 1E 2A 22 ; Arithmetic shift left $222A.w,X [Reads: X Index] [Flags: ZNC]
	rol $0A.b		; 26 0A ; Rotate left $0A.b [Reads: Direct Page] [Flags: ZNC]
	ora ($2B.b)		; 12 2B ; OR accumulator with memory (indirect) ($2B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $3512.w		; 0C 12 35 ; Test and set bits $3512.w [Reads: Accumulator] [Flags: Z]
	ora [$22.b]		; 07 22 ; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$16.b],Y		; 37 16 ; AND accumulator with memory (long indexed) [$16.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($38.b),Y		; 11 38 ; OR accumulator with memory ($38.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$0E.b		; 09 0E ; Logical OR #$0E.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $32.b		; 24 32 ; Test bits $32.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($28.b)		; 12 28 ; OR accumulator with memory (indirect) ($28.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $0E.b,X		; 35 0E ; Logical AND $0E.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $24		; 30 24 ; Branch if minus to $30, $24 [Flow: branch]
	jsl $E33030.l		; 22 30 30 E3 ; Jump to subroutine long $E33030.l [Writes: Stack Pointer] [Flow: call]
	rol $35.b,X		; 36 35 ; Rotate left $35.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($37.b),Y		; 11 37 ; OR accumulator with memory ($37.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $B40D05.l,X		; FF 05 0D B4 ; Subtract with carry (long,X) $B40D05.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($13.b),Y		; 11 13 ; OR accumulator with memory ($13.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($11.b,S),Y		; 13 11 ; OR accumulator (stack relative indirect indexed) ($11.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $09.b,X		; 16 09 ; Arithmetic shift left $09.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $121307.l,X		; FF 07 13 12 ; Subtract with carry (long,X) $121307.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $0E0CD3.l		; 0F D3 0C 0E ; OR accumulator with memory (long) $0E0CD3.l [Writes: Accumulator] [Flags: ZN]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $11.b		; 05 11 ; Logical OR $11.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0A.b,X		; 16 0A ; Arithmetic shift left $0A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($16.b)		; 12 16 ; OR accumulator with memory (indirect) ($16.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b,S),Y		; 13 12 ; OR accumulator (stack relative indirect indexed) ($12.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $D50E11.l,X		; FF 11 0E D5 ; Subtract with carry (long,X) $D50E11.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1A0609.l,X		; FF 09 06 1A ; Subtract with carry (long,X) $1A0609.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $2E0E0F.l,X		; FF 0F 0E 2E ; Subtract with carry (long,X) $2E0E0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $251608.l,X		; FF 08 16 25 ; Subtract with carry (long,X) $251608.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $25170F.l		; 22 0F 17 25 ; Jump to subroutine long $25170F.l [Writes: Stack Pointer] [Flow: call]
	asl $13.b,X		; 16 13 ; Arithmetic shift left $13.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($19.b)		; 12 19 ; OR accumulator with memory (indirect) ($19.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $06FF12.l		; 0F 12 FF 06 ; OR accumulator with memory (long) $06FF12.l [Writes: Accumulator] [Flags: ZN]
	ora $0E.b,X		; 15 0E ; OR accumulator with memory $0E.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $12.b,X		; 15 12 ; OR accumulator with memory $12.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1214.w		; 0D 14 12 ; Logical OR $1214.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $14.b,X		; 16 14 ; Arithmetic shift left $14.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($19.b),Y		; 11 19 ; OR accumulator with memory ($19.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$22.b		; 09 22 ; Logical OR #$22.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $220F05.l,X		; FF 05 0F 22 ; Subtract with carry (long,X) $220F05.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$0D.b]		; 07 0D ; OR accumulator with memory (long) [$0D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($08.b),Y		; 11 08 ; OR accumulator with memory ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($41.b)		; 12 41 ; OR accumulator with memory (indirect) ($41.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $10, $41		; 10 41 ; Branch if plus to $10, $41 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $10, $D3		; 10 D3 ; Branch if plus to $10, $D3 [Flow: branch]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($D3.b,S),Y		; 13 D3 ; OR accumulator (stack relative indirect indexed) ($D3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $DA0C08.l,X		; FF 08 0C DA ; Subtract with carry (long,X) $DA0C08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$10.b		; 09 10 ; Logical OR #$10.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $140A.w,Y		; 79 0A 14 ; Add $140A.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $080B.w		; AC 0B 08 ; Load $080B.w into Y register [Writes: Y Index] [Flags: ZN]
	eor ($0E.b,X)		; 41 0E ; Exclusive OR accumulator with memory ($0E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $41		; 10 41 ; Branch if plus to $10, $41 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jsl $0D08FF.l		; 22 FF 08 0D ; Jump to subroutine long $0D08FF.l [Writes: Stack Pointer] [Flow: call]
	asl $0F08.w		; 0E 08 0F ; Arithmetic shift left $0F08.w [Flags: ZNC]
	asl $0E0B.w		; 0E 0B 0E ; Arithmetic shift left $0E0B.w [Flags: ZNC]
	asl $170C.w		; 0E 0C 17 ; Arithmetic shift left $170C.w [Flags: ZNC]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$D3.b		; 09 D3 ; Logical OR #$D3.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $00211B.l,X		; FF 1B 21 00 ; Subtract with carry (long,X) $00211B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $552B.w		; 1C 2B 55 ; Test and reset bits $552B.w [Reads: Accumulator] [Flags: Z]
	and ($12.b,X)		; 21 12 ; Logical AND ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor $24.b,X		; 55 24 ; Exclusive OR accumulator with memory $24.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cmp $CF1027.l		; CF 27 10 CF ; Compare accumulator (long) $CF1027.l [Reads: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	asl $55.b,X		; 16 55 ; Arithmetic shift left $55.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	rol $551E.w		; 2E 1E 55 ; Rotate left $551E.w [Flags: ZNC]
	and ($17.b,S),Y		; 33 17 ; AND accumulator (stack relative indirect indexed) ($17.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $551138.l		; CF 38 11 55 ; Compare accumulator (long) $551138.l [Reads: Accumulator] [Flags: ZNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	and $55.b,S		; 23 55 ; AND accumulator with stack relative $55.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $CF27.w		; 2C 27 CF ; Test bits $CF27.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	sbc $251B0B.l,X		; FF 0B 1B 25 ; Subtract with carry (long,X) $251B0B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $4110.w		; 0D 10 41 ; Logical OR $4110.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $4113.w		; 0E 13 41 ; Arithmetic shift left $4113.w [Flags: ZNC]
	trb $1A.b		; 14 1A ; Test and reset bits $1A.b [Reads: Accumulator] [Flags: Z]
	and $17.b		; 25 17 ; Logical AND $17.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsl $170CFF.l		; 22 FF 0C 17 ; Jump to subroutine long $170CFF.l [Writes: Stack Pointer] [Flow: call]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora $1209.w		; 0D 09 12 ; Logical OR $1209.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $A814.w		; 0E 14 A8 ; Arithmetic shift left $A814.w [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $A8.b,X		; 15 A8 ; OR accumulator with memory $A8.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ora $120B.w		; 0D 0B 12 ; Logical OR $120B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $3317.w		; 0E 17 33 ; Arithmetic shift left $3317.w [Flags: ZNC]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	trb $0E.b		; 14 0E ; Test and reset bits $0E.b [Reads: Accumulator] [Flags: Z]
	ldy $1117.w		; AC 17 11 ; Load $1117.w into Y register [Writes: Y Index] [Flags: ZN]
	ora ($FF.b)		; 12 FF ; OR accumulator with memory (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0A.b		; 05 0A ; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($07.b,S),Y		; D3 07 ; Compare accumulator (stack relative indirect indexed) ($07.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	ora #$41.b		; 09 41 ; Logical OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($13.b,X)		; 41 13 ; Exclusive OR accumulator with memory ($13.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$08.b]		; 07 08 ; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $18.b,X		; 16 18 ; Arithmetic shift left $18.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ora [$09.b],Y		; 17 09 ; OR accumulator with memory (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tsb $5530.w		; 0C 30 55 ; Test and set bits $5530.w [Reads: Accumulator] [Flags: Z]
	ora ($29.b),Y		; 11 29 ; OR accumulator with memory ($29.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: ZN]
	rol $A8.b,X		; 36 A8 ; Rotate left $A8.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $22AA31.l,X		; 1F 31 AA 22 ; Logical OR long $22AA31.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	eor $28.b,X		; 55 28 ; Exclusive OR accumulator with memory $28.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $A8.b		; 14 A8 ; Test and reset bits $A8.b [Reads: Accumulator] [Flags: Z]
	rol $AA16.w		; 2E 16 AA ; Rotate left $AA16.w [Flags: ZNC]
	and ($19.b)		; 32 19 ; AND accumulator with memory (indirect) ($19.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	and $0A.b,X		; 35 0A ; Logical AND $0A.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda #$39.b		; A9 39 ; Load #$39.b into accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsl $551B39.l		; 22 39 1B 55 ; Jump to subroutine long $551B39.l [Writes: Stack Pointer] [Flow: call]
	rol $2A.b		; 26 2A ; Rotate left $2A.b [Reads: Direct Page] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	and ($A8.b)		; 32 A8 ; AND accumulator with memory (indirect) ($A8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $552A.w		; 2C 2A 55 ; Test bits $552A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $32.b,X		; 35 32 ; Logical AND $32.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $39.b,X		; 55 39 ; Exclusive OR accumulator with memory $39.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$08.b],Y		; 37 08 ; AND accumulator with memory (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $081108.l,X		; FF 08 11 08 ; Subtract with carry (long,X) $081108.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora #$D3.b		; 09 D3 ; Logical OR #$D3.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $11A9.w		; 0D A9 11 ; Logical OR $11A9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($07.b)		; 12 07 ; OR accumulator with memory (indirect) ($07.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $19.b,X		; 55 19 ; Exclusive OR accumulator with memory $19.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($55.b)		; 12 55 ; OR accumulator with memory (indirect) ($55.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $110607.l,X		; FF 07 06 11 ; Subtract with carry (long,X) $110607.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$16.b		; 09 16 ; Logical OR #$16.b with accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $22140B.l		; 22 0B 14 22 ; Jump to subroutine long $22140B.l [Writes: Stack Pointer] [Flow: call]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $22.b,X		; 16 22 ; Arithmetic shift left $22.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $A91206.l,X		; FF 06 12 A9 ; Subtract with carry (long,X) $A91206.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $AA.b,X		; 16 AA ; Arithmetic shift left $AA.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $10120D.l		; 0F 0D 12 10 ; OR accumulator with memory (long) $10120D.l [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp ($14.b,S),Y		; D3 14 ; Compare accumulator (stack relative indirect indexed) ($14.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	ora ($12.b,S),Y		; 13 12 ; OR accumulator (stack relative indirect indexed) ($12.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $22.b,X		; 16 22 ; Arithmetic shift left $22.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $D30305.l,X		; FF 05 03 D3 ; Subtract with carry (long,X) $D30305.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	eor ($06.b,X)		; 41 06 ; Exclusive OR accumulator with memory ($06.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $111133.l		; 0F 33 11 11 ; OR accumulator with memory (long) $111133.l [Writes: Accumulator] [Flags: ZN]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsl $221619.l		; 22 19 16 22 ; Jump to subroutine long $221619.l [Writes: Stack Pointer] [Flow: call]
	sbc $A81006.l,X		; FF 06 10 A8 ; Subtract with carry (long,X) $A81006.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $16.b		; 06 16 ; Arithmetic shift left $16.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $BA07.w		; 0C 07 BA ; Test and set bits $BA07.w [Reads: Accumulator] [Flags: Z]
	asl $5507.w		; 0E 07 55 ; Arithmetic shift left $5507.w [Flags: ZNC]
	ora ($0D.b,S),Y		; 13 0D ; OR accumulator (stack relative indirect indexed) ($0D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	trb $16.b		; 14 16 ; Test and reset bits $16.b [Reads: Accumulator] [Flags: Z]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ora [$0F.b],Y		; 17 0F ; OR accumulator with memory (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $620708.l,X		; FF 08 07 62 ; Subtract with carry (long,X) $620708.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora [$B3.b]		; 07 B3 ; OR accumulator with memory (long) [$B3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $0F.b		; 14 0F ; Test and reset bits $0F.b [Reads: Accumulator] [Flags: Z]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	asl $00.b,X		; 16 00 ; Arithmetic shift left $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $0218.w,Y		; 59 18 02 ; Exclusive OR accumulator with memory $0218.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $1B59.w		; 0E 59 1B ; Arithmetic shift left $1B59.w [Flags: ZNC]
	ora $16045A.l		; 0F 5A 04 16 ; OR accumulator with memory (long) $16045A.l [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	sbc $EB1B26.l,X		; FF 26 1B EB ; Subtract with carry (long,X) $EB1B26.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $0A.b		; 06 0A ; Arithmetic shift left $0A.b [Reads: Direct Page] [Flags: ZNC]
	lsr $06.b,X		; 56 06 ; Logical shift right $06.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $0756.w		; 1C 56 07 ; Test and reset bits $0756.w [Reads: Accumulator] [Flags: Z]
	ora ($55.b),Y		; 11 55 ; OR accumulator with memory ($55.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $56.b,X		; 16 56 ; Arithmetic shift left $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor $0C.b,X		; 55 0C ; Exclusive OR accumulator with memory $0C.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$55.b		; 09 55 ; Logical OR #$55.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $5512.w		; 0D 12 55 ; Logical OR $5512.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($1A.b)		; 12 1A ; OR accumulator with memory (indirect) ($1A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $13.b,X		; 56 13 ; Logical shift right $13.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora [$56.b]		; 07 56 ; OR accumulator with memory (long) [$56.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($14.b,S),Y		; 13 14 ; OR accumulator (stack relative indirect indexed) ($14.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $18.b,X		; 56 18 ; Logical shift right $18.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr $1C.b,X		; 56 1C ; Logical shift right $1C.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tsb $56.b		; 04 56 ; Test and set bits $56.b [Reads: Accumulator] [Flags: Z]
	tsb $3B.b		; 04 3B ; Test and set bits $3B.b [Reads: Accumulator] [Flags: Z]
	eor ($08.b)		; 52 08 ; Exclusive OR accumulator with memory (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$55.b]		; 27 55 ; AND accumulator with memory (long) [$55.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $0E55.w		; 2D 55 0E ; Logical AND $0E55.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $2D0E56.l		; 22 56 0E 2D ; Jump to subroutine long $2D0E56.l [Writes: Stack Pointer] [Flow: call]
	eor $14.b,X		; 55 14 ; Exclusive OR accumulator with memory $14.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($55.b,X)		; 21 55 ; Logical AND ($55.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $560D.w		; 20 0D 56 ; Jump to subroutine at $560D.w [Writes: Stack Pointer] [Flow: call]
	and ($08.b),Y		; 31 08 ; AND accumulator with memory ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $31.b,X		; 56 31 ; Logical shift right $31.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $55.b		; 14 55 ; Test and reset bits $55.b [Reads: Accumulator] [Flags: Z]
	and ($0C.b,S),Y		; 33 0C ; AND accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $35.b,X		; 56 35 ; Logical shift right $35.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $3855.w		; 0E 55 38 ; Arithmetic shift left $3855.w [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr $28.b,X		; 56 28 ; Logical shift right $28.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr $2B.b,X		; 56 2B ; Logical shift right $2B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lsr $35.b,X		; 56 35 ; Logical shift right $35.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $3656.w		; 2D 56 36 ; Logical AND $3656.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and [$56.b],Y		; 37 56 ; AND accumulator with memory (long indexed) [$56.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E80712.l,X		; FF 12 07 E8 ; Subtract with carry (long,X) $E80712.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1E.b,X		; 15 1E ; OR accumulator with memory $1E.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$06.b]		; E7 06 ; Subtract with carry (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and ($0D.b),Y		; 31 0D ; AND accumulator with memory ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $1000.w		; 2D 00 10 ; Logical AND $1000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora [$15.b],Y		; 17 15 ; OR accumulator with memory (long indexed) [$15.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $22E8.w,Y		; 39 E8 22 ; AND accumulator with memory $22E8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $2DC4.w		; 0E C4 2D ; Arithmetic shift left $2DC4.w [Flags: ZNC]
	asl $2517.w,X		; 1E 17 25 ; Arithmetic shift left $2517.w,X [Reads: X Index] [Flags: ZNC]
	and #$79.b		; 29 79 ; Logical AND #$79.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and [$2A.b]		; 27 2A ; AND accumulator with memory (long) [$2A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($2D.b,S),Y		; 33 2D ; AND accumulator (stack relative indirect indexed) ($2D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $00.b,X		; 36 00 ; Rotate left $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $25.b,X		; 35 25 ; Logical AND $25.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	and $29.b,X		; 35 29 ; Logical AND $29.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $FF.b		; C4 FF ; Compare $FF.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ora ($04.b,S),Y		; 13 04 ; OR accumulator (stack relative indirect indexed) ($04.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0C13.w		; 0D 13 0C ; Logical OR $0C13.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $0D1A.w		; 2C 1A 0D ; Test bits $0D1A.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora [$FF.b],Y		; 17 FF ; OR accumulator with memory (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pea $0B04.w		; F4 04 0B ; Push absolute address $0B04.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sbc ($0C.b)		; F2 0C ; Subtract with carry (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $22.b,X		; 16 22 ; Arithmetic shift left $22.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $0A.b,X		; 35 0A ; Logical AND $0A.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$36.b]		; 27 36 ; AND accumulator with memory (long) [$36.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $27.b		; 06 27 ; Arithmetic shift left $27.b [Reads: Direct Page] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $3B27.w		; 0D 27 3B ; Logical OR $3B27.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($F3.b)		; 12 F3 ; OR accumulator with memory (indirect) ($F3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $272C.w		; 2D 2C 27 ; Logical AND $272C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$34.b]		; 27 34 ; AND accumulator with memory (long) [$34.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $0EFF27.l		; 2F 27 FF 0E ; AND accumulator with memory (long) $0EFF27.l [Writes: Accumulator] [Flags: ZN]
	asl $0F27.w,X		; 1E 27 0F ; Arithmetic shift left $0F27.w,X [Reads: X Index] [Flags: ZNC]
	ora $2F03C9.l,X		; 1F C9 03 2F ; Logical OR long $2F03C9.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $2735.w		; 0D 35 27 ; Logical OR $2735.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0FC929.l		; 0F 29 C9 0F ; OR accumulator with memory (long) $0FC929.l [Writes: Accumulator] [Flags: ZN]
	and $27.b,X		; 35 27 ; Logical AND $27.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $34		; 10 34 ; Branch if plus to $10, $34 [Flow: branch]
	sbc $31.b,S		; E3 31 ; Subtract stack-relative $31.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $2AC9.w,X		; 1E C9 2A ; Arithmetic shift left $2AC9.w,X [Reads: X Index] [Flags: ZNC]
	and $C9.b,X		; 35 C9 ; Logical AND $C9.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $2F272A.l		; 2F 2A 27 2F ; AND accumulator with memory (long) $2F272A.l [Writes: Accumulator] [Flags: ZN]
	and $2936C9.l		; 2F C9 36 29 ; AND accumulator with memory (long) $2936C9.l [Writes: Accumulator] [Flags: ZN]
	and [$36.b]		; 27 36 ; AND accumulator with memory (long) [$36.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $27.b,X		; 36 27 ; Rotate left $27.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $270E07.l,X		; FF 07 0E 27 ; Subtract with carry (long,X) $270E07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $270A.w		; 0D 0A 27 ; Logical OR $270A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $17.b,X		; 15 17 ; OR accumulator with memory $17.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$16.b]		; 27 16 ; AND accumulator with memory (long) [$16.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $121627.l		; 0F 27 16 12 ; OR accumulator with memory (long) $121627.l [Writes: Accumulator] [Flags: ZN]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	adc $0E06.w,Y		; 79 06 0E ; Add $0E06.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($09.b,S),Y		; 33 09 ; AND accumulator (stack relative indirect indexed) ($09.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0D10.w		; 0D 10 0D ; Logical OR $0D10.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $0D0B.w		; 0E 0B 0D ; Arithmetic shift left $0D0B.w [Flags: ZNC]
	asl $13.b,X		; 16 13 ; Arithmetic shift left $13.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1617.w		; 0E 17 16 ; Arithmetic shift left $1617.w [Flags: ZNC]
	asl $0D.b,X		; 16 0D ; Arithmetic shift left $0D.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FFAC.w,Y		; 19 AC FF ; OR accumulator with memory $FFAC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $06.b		; 02 06 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$0D.b],Y		; 37 0D ; AND accumulator with memory (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1058.w		; 0D 58 10 ; Logical OR $1058.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $55.b		; 05 55 ; Logical OR $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ora ($08.b,S),Y		; 13 08 ; OR accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ora $1C.b,X		; 15 1C ; OR accumulator with memory $1C.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $FF0A.w		; 0E 0A FF ; Arithmetic shift left $FF0A.w [Flags: ZNC]
	tsb WRDIVH.w		; 0C 05 42 ; Test and set bits WRDIVH.w [Reads: Accumulator] [Flags: Z]
	tsb $AC07.w		; 0C 07 AC ; Test and set bits $AC07.w [Reads: Accumulator] [Flags: Z]
	ora $18E017.l		; 0F 17 E0 18 ; OR accumulator with memory (long) $18E017.l [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $42, $FF		; 42 FF ; Reserved instruction
	tsb RDMPYH.w		; 0C 17 42 ; Test and set bits RDMPYH.w [Reads: Accumulator] [Flags: Z]
	ora JOY2L.w		; 0D 1A 42 ; Logical OR JOY2L.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	jmp.w [$0817]		; DC 17 08 ; Jump long indirect [$0817] [Flow: jump]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $42150E.l,X		; FF 0E 15 42 ; Subtract with carry (long,X) $42150E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $07		; 10 07 ; Branch if plus to $10, $07 [Flow: branch]
	.db $42, $10		; 42 10 ; Reserved instruction
	ora $1515BA.l		; 0F BA 15 15 ; OR accumulator with memory (long) $1515BA.l [Writes: Accumulator] [Flags: ZN]
	.db $42, $FF		; 42 FF ; Reserved instruction
	ora #$18.b		; 09 18 ; Logical OR #$18.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $1117.w		; AC 17 11 ; Load $1117.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $42, $FF		; 42 FF ; Reserved instruction
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora $4211.w,Y		; 19 11 42 ; OR accumulator with memory $4211.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $C508.w		; 0C 08 C5 ; Test and set bits $C508.w [Reads: Accumulator] [Flags: Z]
	ora ($17.b),Y		; 11 17 ; OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $0E.b		; C5 0E ; Compare $0E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora ($C5.b)		; 12 C5 ; OR accumulator with memory (indirect) ($C5.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $BA1109.l,X		; FF 09 11 BA ; Subtract with carry (long,X) $BA1109.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $4116.w		; 0E 16 41 ; Arithmetic shift left $4116.w [Flags: ZNC]
	ora $17E31B.l		; 0F 1B E3 17 ; OR accumulator with memory (long) $17E31B.l [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($FF.b,X)		; 41 FF ; Exclusive OR accumulator with memory ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $150D.w		; 0D 0D 15 ; Logical OR $150D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $061836.l		; 0F 36 18 06 ; OR accumulator with memory (long) $061836.l [Writes: Accumulator] [Flags: ZN]
	ora $08FF.w		; 0D FF 08 ; Logical OR $08FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $170A.w		; 0D 0A 17 ; Logical OR $170A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0D0B.w		; 0D 0B 0D ; Logical OR $0D0B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $160C.w		; 0D 0C 16 ; Logical OR $160C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0816.w		; 0D 16 08 ; Logical OR $0816.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0AFF.w		; 0D FF 0A ; Logical OR $0AFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $17.b,S		; E3 17 ; Subtract stack-relative $17.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	tsb $16F3.w		; 0C F3 16 ; Test and set bits $16F3.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $1C.b,X		; 75 1C ; Add $1C.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl $183D.w		; 0E 3D 18 ; Arithmetic shift left $183D.w [Flags: ZNC]
	jsr $1B1D.w		; 20 1D 1B ; Jump to subroutine at $1B1D.w [Writes: Stack Pointer] [Flow: call]
	bit $F3.b,X		; 34 F3 ; Test bits $F3.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol $741D.w		; 2E 1D 74 ; Rotate left $741D.w [Flags: ZNC]
	bit $2A19.w		; 2C 19 2A ; Test bits $2A19.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and ($18.b),Y		; 31 18 ; AND accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $1635.w,X		; 3C 35 16 ; Test bits $1635.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rol $18.b,X		; 36 18 ; Rotate left $18.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr $3433.w		; 20 33 34 ; Jump to subroutine at $3433.w [Writes: Stack Pointer] [Flow: call]
	and ($36.b,S),Y		; 33 36 ; AND accumulator (stack relative indirect indexed) ($36.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sbc $41140C.l,X		; FF 0C 14 41 ; Subtract with carry (long,X) $41140C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $420C.w		; 0E 0C 42 ; Arithmetic shift left $420C.w [Flags: ZNC]
	ora ($0D.b),Y		; 11 0D ; OR accumulator with memory ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $17.b,S		; E3 17 ; Subtract stack-relative $17.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora [$DA.b],Y		; 17 DA ; OR accumulator with memory (long indexed) [$DA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $06FF43.l		; 0F 43 FF 06 ; OR accumulator with memory (long) $06FF43.l [Writes: Accumulator] [Flags: ZN]
	ora $091140.l,X		; 1F 40 11 09 ; Logical OR long $091140.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$13.b		; 49 13 ; Exclusive OR #$13.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$14.b		; 49 14 ; Exclusive OR #$14.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $AC.b,X		; 16 AC ; Arithmetic shift left $AC.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $4A0E.w,Y		; 19 0E 4A ; OR accumulator with memory $4A0E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $291741.l,X		; 1F 41 17 29 ; Logical OR long $291741.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($19.b,S),Y		; 33 19 ; AND accumulator (stack relative indirect indexed) ($19.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($4A.b),Y		; 31 4A ; AND accumulator with memory ($4A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jsr $2541.w		; 20 41 25 ; Jump to subroutine at $2541.w [Writes: Stack Pointer] [Flow: call]
	asl $2D4A.w		; 0E 4A 2D ; Arithmetic shift left $2D4A.w [Flags: ZNC]
	trb $42.b		; 14 42 ; Test and reset bits $42.b [Reads: Accumulator] [Flags: Z]
	and $4826.w		; 2D 26 48 ; Logical AND $4826.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($21.b)		; 32 21 ; AND accumulator with memory (indirect) ($21.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $AC0B06.l,X		; FF 06 0B AC ; Subtract with carry (long,X) $AC0B06.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $461B.w		; 0C 1B 46 ; Test and set bits $461B.w [Reads: Accumulator] [Flags: Z]
	ora $4107.w		; 0D 07 41 ; Logical OR $4107.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $12461B.l		; 0F 1B 46 12 ; OR accumulator with memory (long) $12461B.l [Writes: Accumulator] [Flags: ZN]
	ora [$58.b]		; 07 58 ; OR accumulator with memory (long) [$58.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $511308.l,X		; FF 08 13 51 ; Subtract with carry (long,X) $511308.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $510E.w		; 0E 0E 51 ; Arithmetic shift left $510E.w [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($08.b),Y		; 11 08 ; OR accumulator with memory ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $0951.w,Y		; 19 51 09 ; OR accumulator with memory $0951.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($51.b,S),Y		; 33 51 ; AND accumulator (stack relative indirect indexed) ($51.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$37.b		; 09 37 ; Logical OR #$37.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($10.b),Y		; 51 10 ; Exclusive OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($41.b),Y		; 31 41 ; AND accumulator with memory ($41.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$2F.b],Y		; 17 2F ; OR accumulator with memory (long indexed) [$2F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($1D.b),Y		; 51 1D ; Exclusive OR accumulator with memory ($1D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $0A.b,X		; 35 0A ; Logical AND $0A.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $0F.b		; 25 0F ; Logical AND $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $0815.w		; 2C 15 08 ; Test bits $0815.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and ($14.b,S),Y		; 33 14 ; AND accumulator (stack relative indirect indexed) ($14.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($33.b),Y		; 51 33 ; Exclusive OR accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$51.b],Y		; 17 51 ; OR accumulator with memory (long indexed) [$51.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $09.b,X		; 36 09 ; Rotate left $09.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($29.b),Y		; 51 29 ; Exclusive OR accumulator with memory ($29.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	eor ($29.b),Y		; 51 29 ; Exclusive OR accumulator with memory ($29.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $3B51.w,X		; 3D 51 3B ; AND accumulator with memory $3B51.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $FF08.w		; 2E 08 FF ; Rotate left $FF08.w [Flags: ZNC]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	cmp ($12.b),Y		; D1 12 ; Compare accumulator ($12.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	ora [$42.b],Y		; 17 42 ; OR accumulator with memory (long indexed) [$42.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $12.b		; 14 12 ; Test and reset bits $12.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $080F08.l,X		; FF 08 0F 08 ; Subtract with carry (long,X) $080F08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0805.w		; 0C 05 08 ; Test and set bits $0805.w [Reads: Accumulator] [Flags: Z]
	tsb $0814.w		; 0C 14 08 ; Test and set bits $0814.w [Reads: Accumulator] [Flags: Z]
	ora $0810.w		; 0D 10 08 ; Logical OR $0810.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($0C.b),Y		; 11 0C ; OR accumulator with memory ($0C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $18.b,X		; 16 18 ; Arithmetic shift left $18.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$08.b],Y		; 17 08 ; OR accumulator with memory (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$10.b],Y		; 17 10 ; OR accumulator with memory (long indexed) [$10.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $EB0713.l,X		; FF 13 07 EB ; Subtract with carry (long,X) $EB0713.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($08.b)		; 12 08 ; OR accumulator with memory (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $18		; 30 18 ; Branch if minus to $30, $18 [Flow: branch]
	ora $FF2F.w,Y		; 19 2F FF ; OR accumulator with memory $FF2F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0E0C.w,X		; 1D 0C 0E ; OR accumulator with memory $0E0C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stz $0D0E.w,X		; 9E 0E 0D ; Store zero to $0D0E.w,X [Reads: X Index]
	ldy #$0E.b		; A0 0E ; Load #$0E.b into Y register [Writes: Y Index] [Flags: ZN]
	asl $0E2E.w		; 0E 2E 0E ; Arithmetic shift left $0E2E.w [Flags: ZNC]
	ora ($A0.b),Y		; 11 A0 ; OR accumulator with memory ($A0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $109F0C.l		; 0F 0C 9F 10 ; OR accumulator with memory (long) $109F0C.l [Writes: Accumulator] [Flags: ZN]
	ora ($9F.b),Y		; 11 9F ; OR accumulator with memory ($9F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E3160D.l,X		; FF 0D 16 E3 ; Subtract with carry (long,X) $E3160D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($14.b),Y		; 11 14 ; OR accumulator with memory ($14.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $15		; 42 15 ; Reserved instruction
	trb $42.b		; 14 42 ; Test and reset bits $42.b [Reads: Accumulator] [Flags: Z]
	ora [$10.b],Y		; 17 10 ; OR accumulator with memory (long indexed) [$10.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $FF		; 42 FF ; Reserved instruction
	trb $18.b		; 14 18 ; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	.db $42, $19		; 42 19 ; Reserved instruction
	ora #$41.b		; 09 41 ; Logical OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $42130B.l,X		; FF 0B 13 42 ; Subtract with carry (long,X) $42130B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	lsr $16.b		; 46 16 ; Logical shift right $16.b [Reads: Direct Page] [Flags: ZNC]
	ora ($41.b)		; 12 41 ; OR accumulator with memory (indirect) ($41.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $410E0C.l,X		; FF 0C 0E 41 ; Subtract with carry (long,X) $410E0C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $4117.w		; 0E 17 41 ; Arithmetic shift left $4117.w [Flags: ZNC]
	ora ($05.b)		; 12 05 ; OR accumulator with memory (indirect) ($05.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $17.b,X		; 55 17 ; Exclusive OR accumulator with memory $17.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF08.w,Y		; 19 08 FF ; OR accumulator with memory $FF08.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $410F.w		; 0C 0F 41 ; Test and set bits $410F.w [Reads: Accumulator] [Flags: Z]
	ora [$07.b],Y		; 17 07 ; OR accumulator with memory (long indexed) [$07.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($17.b),Y		; 51 17 ; Exclusive OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $FF51.w		; 0C 51 FF ; Test and set bits $FF51.w [Reads: Accumulator] [Flags: Z]
	trb $12.b		; 14 12 ; Test and reset bits $12.b [Reads: Accumulator] [Flags: Z]
	eor [$19.b],Y		; 57 19 ; Exclusive OR accumulator with memory (long indexed) [$19.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($B3.b)		; 12 B3 ; OR accumulator with memory (indirect) ($B3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $570E.w		; 1C 0E 57 ; Test and reset bits $570E.w [Reads: Accumulator] [Flags: Z]
	trb $5716.w		; 1C 16 57 ; Test and reset bits $5716.w [Reads: Accumulator] [Flags: Z]
	ora $4C27.w,Y		; 19 27 4C ; OR accumulator with memory $4C27.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $0122.w		; 1C 22 01 ; Test and reset bits $0122.w [Reads: Accumulator] [Flags: Z]
	ora $264C2A.l,X		; 1F 2A 4C 26 ; Logical OR long $264C2A.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $294C.w,X		; 1D 4C 29 ; OR accumulator with memory $294C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $062A.w		; 4C 2A 06 ; Jump to $062A.w [Flow: jump]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bit $4C1B.w		; 2C 1B 4C ; Test bits $4C1B.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	.db $30, $0A		; 30 0A ; Branch if minus to $30, $0A [Flow: branch]
	jmp $1435.w		; 4C 35 14 ; Jump to $1435.w [Flow: jump]
	jmp $372B.w		; 4C 2B 37 ; Jump to $372B.w [Flow: jump]
	sbc ($21.b)		; F2 21 ; Subtract with carry (indirect) ($21.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $D4.b,X		; 36 D4 ; Rotate left $D4.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $22.b		; 24 22 ; Test bits $22.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jmp $2925.w		; 4C 25 29 ; Jump to $2925.w [Flow: jump]
	pei ($2C.b)		; D4 2C ; Push effective indirect address ($2C.b) [Reads: Direct Page] [Writes: Stack Pointer]
	jsr $324C.w		; 20 4C 32 ; Jump to subroutine at $324C.w [Writes: Stack Pointer] [Flow: call]
	and $4C.b,S		; 23 4C ; AND accumulator with stack relative $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($30.b)		; 32 30 ; AND accumulator with memory (indirect) ($30.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pei ($33.b)		; D4 33 ; Push effective indirect address ($33.b) [Reads: Direct Page] [Writes: Stack Pointer]
	bit $01.b,X		; 34 01 ; Test bits $01.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $FFD4.w		; 2D D4 FF ; Logical AND $FFD4.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$1A.b		; 09 1A ; Logical OR #$1A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($0B.b,X)		; 41 0B ; Exclusive OR accumulator with memory ($0B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($41.b)		; 12 41 ; OR accumulator with memory (indirect) ($41.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($19.b)		; 12 19 ; OR accumulator with memory (indirect) ($19.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $47.b,X		; 15 47 ; OR accumulator with memory $47.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $4609.w		; 0E 09 46 ; Arithmetic shift left $4609.w [Flags: ZNC]
	ora ($17.b)		; 12 17 ; OR accumulator with memory (indirect) ($17.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $460B0D.l,X		; FF 0D 0B 46 ; Subtract with carry (long,X) $460B0D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($15.b),Y		; 11 15 ; OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $1112.w		; 4D 12 11 ; Exclusive OR $1112.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor [$13.b]		; 47 13 ; Exclusive OR accumulator with memory (long) [$13.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $17E3.w		; 0E E3 17 ; Arithmetic shift left $17E3.w [Flags: ZNC]
	ora $47.b,X		; 15 47 ; OR accumulator with memory $47.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	tsb $FF46.w		; 0C 46 FF ; Test and set bits $FF46.w [Reads: Accumulator] [Flags: Z]
	ora [$0E.b]		; 07 0E ; OR accumulator with memory (long) [$0E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0C08.w		; 0D 08 0C ; Logical OR $0C08.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr $13.b		; 46 13 ; Logical shift right $13.b [Reads: Direct Page] [Flags: ZNC]
	ora $14EB.w,Y		; 19 EB 14 ; OR accumulator with memory $14EB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $170D.w,Y		; 19 0D 17 ; OR accumulator with memory $170D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$58.b]		; 07 58 ; OR accumulator with memory (long) [$58.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$11.b],Y		; 17 11 ; OR accumulator with memory (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $0D.b,X		; 55 0D ; Exclusive OR accumulator with memory $0D.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $55.b		; 25 55 ; Logical AND $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1F0D27.l,X		; 1F 27 0D 1F ; Logical OR long $1F0D27.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $0A350D.l		; 2F 0D 35 0A ; AND accumulator with memory (long) $0A350D.l [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $14.b,X		; 35 14 ; Logical AND $14.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $35.b,X		; 55 35 ; Exclusive OR accumulator with memory $35.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0B3900.l		; 0F 00 39 0B ; OR accumulator with memory (long) $0B3900.l [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $3B0D.w,Y		; 19 0D 3B ; OR accumulator with memory $3B0D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($58.b),Y		; 11 58 ; OR accumulator with memory ($58.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	bit $55.b		; 24 55 ; Test bits $55.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	and #$BA.b		; 29 BA ; Logical AND #$BA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($39.b),Y		; 31 39 ; AND accumulator with memory ($39.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $36.b,X		; 55 36 ; Exclusive OR accumulator with memory $36.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($55.b,X)		; 21 55 ; Logical AND ($55.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$32.b],Y		; 37 32 ; AND accumulator with memory (long indexed) [$32.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $3439.w		; 0D 39 34 ; Logical OR $3439.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $2E3A.w		; 0D 3A 2E ; Logical OR $2E3A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sbc $580808.l,X		; FF 08 08 58 ; Subtract with carry (long,X) $580808.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $58		; 10 58 ; Branch if plus to $10, $58 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $161158.l		; 0F 58 11 16 ; OR accumulator with memory (long) $161158.l [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ora $0C.b,X		; 15 0C ; OR accumulator with memory $0C.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($55.b)		; 12 55 ; OR accumulator with memory (indirect) ($55.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $391705.l,X		; FF 05 17 39 ; Subtract with carry (long,X) $391705.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$0E.b		; 09 0E ; Logical OR #$0E.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rol $180E.w,X		; 3E 0E 18 ; Rotate left $180E.w,X [Reads: X Index] [Flags: ZNC]
	rol $06FF.w,X		; 3E FF 06 ; Rotate left $06FF.w,X [Reads: X Index] [Flags: ZNC]
	ora ($47.b,S),Y		; 13 47 ; OR accumulator (stack relative indirect indexed) ($47.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0D46.w		; 0C 46 0D ; Test and set bits $0D46.w [Reads: Accumulator] [Flags: Z]
	ora ($D2.b,S),Y		; 13 D2 ; OR accumulator (stack relative indirect indexed) ($D2.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $EB.b		; 14 EB ; Test and reset bits $EB.b [Reads: Accumulator] [Flags: Z]
	.db $10, $1B		; 10 1B ; Branch if plus to $10, $1B [Flow: branch]
	cmp ($14.b)		; D2 14 ; Compare accumulator (indirect) ($14.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $141B4D.l		; 0F 4D 1B 14 ; OR accumulator with memory (long) $141B4D.l [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $4708.w		; 0C 08 47 ; Test and set bits $4708.w [Reads: Accumulator] [Flags: Z]
	ora $0F0814.l		; 0F 14 08 0F ; OR accumulator with memory (long) $0F0814.l [Writes: Accumulator] [Flags: ZN]
	asl $1100.w		; 0E 00 11 ; Arithmetic shift left $1100.w [Flags: ZNC]
	ora #$17.b		; 09 17 ; Logical OR #$17.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $14.b,X		; 15 14 ; OR accumulator with memory $14.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora [$16.b],Y		; 17 16 ; OR accumulator with memory (long indexed) [$16.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	clc		; 18 ; Clear carry flag [Flags: C]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $081104.l,X		; FF 04 11 08 ; Subtract with carry (long,X) $081104.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $16.b		; 05 16 ; Logical OR $16.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $0C.b,X		; 55 0C ; Exclusive OR accumulator with memory $0C.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$BA.b]		; 07 BA ; OR accumulator with memory (long) [$BA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $10.b,X		; 16 10 ; Arithmetic shift left $10.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $0F11FF.l		; 0F FF 11 0F ; OR accumulator with memory (long) $0F11FF.l [Writes: Accumulator] [Flags: ZN]
	eor ($12.b,X)		; 41 12 ; Exclusive OR accumulator with memory ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$E8.b]		; 07 E8 ; OR accumulator with memory (long) [$E8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1E.b,X		; 15 1E ; OR accumulator with memory $1E.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$1F.b]		; E7 1F ; Subtract with carry (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $06C4.w		; 0D C4 06 ; Logical OR $06C4.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	and ($08.b,S),Y		; 33 08 ; AND accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($41.b,S),Y		; 33 41 ; AND accumulator (stack relative indirect indexed) ($41.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	cpy $0A.b		; C4 0A ; Compare $0A.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	and ($0D.b),Y		; 31 0D ; AND accumulator with memory ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $2A		; 10 2A ; Branch if plus to $10, $2A [Flow: branch]
	ora [$2C.b],Y		; 17 2C ; OR accumulator with memory (long indexed) [$2C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $3317.w		; 0D 17 33 ; Logical OR $3317.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$41.b		; 09 41 ; Logical OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $29.b		; 25 29 ; Logical AND $29.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $282F.w,Y		; 79 2F 28 ; Add $282F.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$FF.b],Y		; 17 FF ; OR accumulator with memory (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($0D.b)		; 12 0D ; OR accumulator with memory (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $F40000.l,X		; FF 00 00 F4 ; Subtract with carry (long,X) $F40000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0B.b		; 04 0B ; Test and set bits $0B.b [Reads: Accumulator] [Flags: Z]
	sbc ($1A.b)		; F2 1A ; Subtract with carry (indirect) ($1A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $C9		; 10 C9 ; Branch if plus to $10, $C9 [Flow: branch]
	asl $C91A.w,X		; 1E 1A C9 ; Arithmetic shift left $C91A.w,X [Reads: X Index] [Flags: ZNC]
	tsb $2727.w		; 0C 27 27 ; Test and set bits $2727.w [Reads: Accumulator] [Flags: Z]
	ora $2C.b,X		; 15 2C ; OR accumulator with memory $2C.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$16.b		; C9 16 ; Compare #$16.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $2819EB.l		; 22 EB 19 28 ; Jump to subroutine long $2819EB.l [Writes: Stack Pointer] [Flow: call]
	cmp #$35.b		; C9 35 ; Compare #$35.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and [$36.b]		; 27 36 ; AND accumulator with memory (long) [$36.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $27.b		; 06 27 ; Arithmetic shift left $27.b [Reads: Direct Page] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $3B27.w		; 0D 27 3B ; Logical OR $3B27.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($F3.b)		; 12 F3 ; OR accumulator with memory (indirect) ($F3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $272C.w		; 2D 2C 27 ; Logical AND $272C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$34.b]		; 27 34 ; AND accumulator with memory (long) [$34.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $0BFF27.l		; 2F 27 FF 0B ; AND accumulator with memory (long) $0BFF27.l [Writes: Accumulator] [Flags: ZN]
	ora [$27.b]		; 07 27 ; OR accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $C908.w		; 0D 08 C9 ; Logical OR $C908.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $271E.w		; 0E 1E 27 ; Arithmetic shift left $271E.w [Flags: ZNC]
	ora $03C91F.l		; 0F 1F C9 03 ; OR accumulator with memory (long) $03C91F.l [Writes: Accumulator] [Flags: ZN]
	and $350DEB.l		; 2F EB 0D 35 ; AND accumulator with memory (long) $350DEB.l [Writes: Accumulator] [Flags: ZN]
	and [$0F.b]		; 27 0F ; AND accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$C9.b		; 29 C9 ; Logical AND #$C9.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $102735.l		; 0F 35 27 10 ; OR accumulator with memory (long) $102735.l [Writes: Accumulator] [Flags: ZN]
	bit $E3.b,X		; 34 E3 ; Test bits $E3.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($1E.b),Y		; 31 1E ; AND accumulator with memory ($1E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$2A.b		; C9 2A ; Compare #$2A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	and $C9.b,X		; 35 C9 ; Logical AND $C9.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $2F272A.l		; 2F 2A 27 2F ; AND accumulator with memory (long) $2F272A.l [Writes: Accumulator] [Flags: ZN]
	and $2936C9.l		; 2F C9 36 29 ; AND accumulator with memory (long) $2936C9.l [Writes: Accumulator] [Flags: ZN]
	and [$36.b]		; 27 36 ; AND accumulator with memory (long) [$36.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $27.b,X		; 36 27 ; Rotate left $27.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $270E07.l,X		; FF 07 0E 27 ; Subtract with carry (long,X) $270E07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $270A.w		; 0D 0A 27 ; Logical OR $270A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $17.b,X		; 15 17 ; OR accumulator with memory $17.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$16.b]		; 27 16 ; AND accumulator with memory (long) [$16.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $121627.l		; 0F 27 16 12 ; OR accumulator with memory (long) $121627.l [Writes: Accumulator] [Flags: ZN]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	adc $100D.w,Y		; 79 0D 10 ; Add $100D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($16.b,X)		; 41 16 ; Exclusive OR accumulator with memory ($16.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $13.b,X		; 16 13 ; Arithmetic shift left $13.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1717.w		; 0E 17 17 ; Arithmetic shift left $1717.w [Flags: ZNC]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $FFAC.w,Y		; 19 AC FF ; OR accumulator with memory $FFAC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $06.b		; 02 06 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$0D.b],Y		; 37 0D ; AND accumulator with memory (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1058.w		; 0D 58 10 ; Logical OR $1058.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $55.b		; 05 55 ; Logical OR $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($0A.b),Y		; 11 0A ; OR accumulator with memory ($0A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $12.b,X		; 55 12 ; Exclusive OR accumulator with memory $12.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($58.b),Y		; 11 58 ; OR accumulator with memory ($58.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($08.b,S),Y		; 13 08 ; OR accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ora [$0E.b],Y		; 17 0E ; OR accumulator with memory (long indexed) [$0E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $41050C.l,X		; FF 0C 05 41 ; Subtract with carry (long,X) $41050C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $AC07.w		; 0C 07 AC ; Test and set bits $AC07.w [Reads: Accumulator] [Flags: Z]
	ora $12E017.l		; 0F 17 E0 12 ; OR accumulator with memory (long) $12E017.l [Writes: Accumulator] [Flags: ZN]
	ora [$41.b]		; 07 41 ; OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor ($FF.b,X)		; 41 FF ; Exclusive OR accumulator with memory ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $4117.w		; 0C 17 41 ; Test and set bits $4117.w [Reads: Accumulator] [Flags: Z]
	ora $411A.w		; 0D 1A 41 ; Logical OR $411A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	jmp.w [$0817]		; DC 17 08 ; Jump long indirect [$0817] [Flow: jump]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $E3140A.l,X		; FF 0A 14 E3 ; Subtract with carry (long,X) $E3140A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $4115.w		; 0E 15 41 ; Arithmetic shift left $4115.w [Flags: ZNC]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $FF		; 42 FF ; Reserved instruction
	ora #$18.b		; 09 18 ; Logical OR #$18.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $070C.w,Y		; 79 0C 07 ; Add $070C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $0D17.w,X		; DE 17 0D ; Decrement memory $0D17.w,X [Reads: X Index] [Flags: ZN]
	eor ($1A.b,X)		; 41 1A ; Exclusive OR accumulator with memory ($1A.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($41.b)		; 12 41 ; OR accumulator with memory (indirect) ($41.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $190D0D.l,X		; FF 0D 0D 19 ; Subtract with carry (long,X) $190D0D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $101919.l		; 0F 19 19 10 ; OR accumulator with memory (long) $101919.l [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $1411.w,Y		; 19 11 14 ; OR accumulator with memory $1411.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1314.w,Y		; 19 14 13 ; OR accumulator with memory $1314.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1119.w,Y		; 19 19 11 ; OR accumulator with memory $1119.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($FF.b,X)		; 41 FF ; Exclusive OR accumulator with memory ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$11.b		; 09 11 ; Logical OR #$11.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	asl $4516.w		; 0E 16 45 ; Arithmetic shift left $4516.w [Flags: ZNC]
	ora $17E31B.l		; 0F 1B E3 17 ; OR accumulator with memory (long) $17E31B.l [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor $1A.b,S		; 43 1A ; Exclusive OR accumulator with stack relative $1A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $AC.b		; 04 AC ; Test and set bits $AC.b [Reads: Accumulator] [Flags: Z]
	sbc $0D0D0A.l,X		; FF 0A 0D 0D ; Subtract with carry (long,X) $0D0D0A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0F.b,X		; 15 0F ; OR accumulator with memory $0F.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $18.b,X		; 36 18 ; Rotate left $18.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $0D.b		; 06 0D ; Arithmetic shift left $0D.b [Reads: Direct Page] [Flags: ZNC]
	sbc $0D1808.l,X		; FF 08 18 0D ; Subtract with carry (long,X) $0D1808.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora [$0D.b],Y		; 17 0D ; OR accumulator with memory (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0C45.w		; 0D 45 0C ; Logical OR $0C45.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $0D.b,X		; 16 0D ; Arithmetic shift left $0D.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $08.b,X		; 16 08 ; Arithmetic shift left $08.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $08FF.w		; 0D FF 08 ; Logical OR $08FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($41.b)		; 12 41 ; OR accumulator with memory (indirect) ($41.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	asl $18.b,X		; 16 18 ; Arithmetic shift left $18.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc $1C.b,X		; 75 1C ; Add $1C.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora [$41.b]		; 07 41 ; OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and $41.b,X		; 35 41 ; Logical AND $41.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsr $2E1D.w		; 20 1D 2E ; Jump to subroutine at $2E1D.w [Writes: Stack Pointer] [Flow: call]
	ora ($41.b)		; 12 41 ; OR accumulator with memory (indirect) ($41.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $14.b,X		; 34 14 ; Test bits $14.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and $16.b,X		; 35 16 ; Logical AND $16.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsl $2E4339.l		; 22 39 43 2E ; Jump to subroutine long $2E4339.l [Writes: Stack Pointer] [Flow: call]
	jsr $3341.w		; 20 41 33 ; Jump to subroutine at $3341.w [Writes: Stack Pointer] [Flow: call]
	rol $79.b,X		; 36 79 ; Rotate left $79.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $410F08.l,X		; FF 08 0F 41 ; Subtract with carry (long,X) $410F08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $410C.w		; 0E 0C 41 ; Arithmetic shift left $410C.w [Flags: ZNC]
	ora ($0D.b),Y		; 11 0D ; OR accumulator with memory ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $18.b,S		; E3 18 ; Subtract stack-relative $18.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $0DFF45.l		; 0F 45 FF 0D ; OR accumulator with memory (long) $0DFF45.l [Writes: Accumulator] [Flags: ZN]
	asl $45.b		; 06 45 ; Arithmetic shift left $45.b [Reads: Direct Page] [Flags: ZNC]
	trb $16.b		; 14 16 ; Test and reset bits $16.b [Reads: Accumulator] [Flags: Z]
	ldy $1F1A.w		; AC 1A 1F ; Load $1F1A.w into Y register [Writes: Y Index] [Flags: ZN]
	eor $13.b		; 45 13 ; Exclusive OR $13.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$41.b],Y		; 37 41 ; AND accumulator with memory (long indexed) [$41.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $1E.b		; 25 1E ; Logical AND $1E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $2B.b,S		; 43 2B ; Exclusive OR accumulator with stack relative $2B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $382942.l,X		; 1F 42 29 38 ; Logical OR long $382942.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($2D.b,X)		; 41 2D ; Exclusive OR accumulator with memory ($2D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($41.b,X)		; 21 41 ; Logical AND ($41.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($21.b)		; 32 21 ; AND accumulator with memory (indirect) ($21.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: ZNC]
	adc $1B0C.w,Y		; 79 0C 1B ; Add $1B0C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $0D.b		; 46 0D ; Logical shift right $0D.b [Reads: Direct Page] [Flags: ZNC]
	ora [$45.b]		; 07 45 ; OR accumulator with memory (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF461B.l		; 0F 1B 46 FF ; OR accumulator with memory (long) $FF461B.l [Writes: Accumulator] [Flags: ZN]
	asl $510E.w		; 0E 0E 51 ; Arithmetic shift left $510E.w [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($45.b),Y		; 11 45 ; OR accumulator with memory ($45.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $0451.w,Y		; 19 51 04 ; OR accumulator with memory $0451.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$33.b		; 09 33 ; Logical OR #$33.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($09.b),Y		; 51 09 ; Exclusive OR accumulator with memory ($09.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$51.b],Y		; 37 51 ; AND accumulator with memory (long indexed) [$51.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $31		; 10 31 ; Branch if plus to $10, $31 [Flow: branch]
	eor $17.b		; 45 17 ; Exclusive OR $17.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $0F2551.l		; 2F 51 25 0F ; AND accumulator with memory (long) $0F2551.l [Writes: Accumulator] [Flags: ZN]
	eor ($28.b,X)		; 41 28 ; Exclusive OR accumulator with memory ($28.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$45.b		; 09 45 ; Logical OR #$45.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $4315.w		; 2C 15 43 ; Test bits $4315.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and ($14.b,S),Y		; 33 14 ; AND accumulator (stack relative indirect indexed) ($14.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($33.b),Y		; 51 33 ; Exclusive OR accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$51.b],Y		; 17 51 ; OR accumulator with memory (long indexed) [$51.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($28.b),Y		; 51 28 ; Exclusive OR accumulator with memory ($28.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($51.b),Y		; 31 51 ; AND accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($29.b),Y		; 51 29 ; Exclusive OR accumulator with memory ($29.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor ($29.b),Y		; 51 29 ; Exclusive OR accumulator with memory ($29.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $3751.w,X		; 3D 51 37 ; AND accumulator with memory $3751.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $2D3AE3.l		; 22 E3 3A 2D ; Jump to subroutine long $2D3AE3.l [Writes: Stack Pointer] [Flow: call]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	cmp ($14.b),Y		; D1 14 ; Compare accumulator ($14.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	tsb $140B.w		; 0C 0B 14 ; Test and set bits $140B.w [Reads: Accumulator] [Flags: Z]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $410E08.l,X		; FF 08 0E 41 ; Subtract with carry (long,X) $410E08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $4105.w		; 0C 05 41 ; Test and set bits $4105.w [Reads: Accumulator] [Flags: Z]
	ora ($09.b),Y		; 11 09 ; OR accumulator with memory ($09.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($16.b,X)		; 41 16 ; Exclusive OR accumulator with memory ($16.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF45.w,Y		; 19 45 FF ; OR accumulator with memory $FF45.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $4112.w		; 0C 12 41 ; Test and set bits $4112.w [Reads: Accumulator] [Flags: Z]
	ora ($07.b,S),Y		; 13 07 ; OR accumulator (stack relative indirect indexed) ($07.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora ($08.b)		; 12 08 ; OR accumulator with memory (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $18		; 30 18 ; Branch if minus to $30, $18 [Flow: branch]
	ora $192F.w,Y		; 19 2F 19 ; OR accumulator with memory $192F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $FF41.w		; 0C 41 FF ; Test and set bits $FF41.w [Reads: Accumulator] [Flags: Z]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($0C.b,X)		; 41 0C ; Exclusive OR accumulator with memory ($0C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $1445.w		; 0C 45 14 ; Test and set bits $1445.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($FF.b,X)		; 41 FF ; Exclusive OR accumulator with memory ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0E0C.w,X		; 1D 0C 0E ; OR accumulator with memory $0E0C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stz $0D0E.w,X		; 9E 0E 0D ; Store zero to $0D0E.w,X [Reads: X Index]
	ldy #$0E.b		; A0 0E ; Load #$0E.b into Y register [Writes: Y Index] [Flags: ZN]
	asl $0E2E.w		; 0E 2E 0E ; Arithmetic shift left $0E2E.w [Flags: ZNC]
	ora ($A0.b),Y		; 11 A0 ; OR accumulator with memory ($A0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $109F0C.l		; 0F 0C 9F 10 ; OR accumulator with memory (long) $109F0C.l [Writes: Accumulator] [Flags: ZN]
	ora ($9F.b),Y		; 11 9F ; OR accumulator with memory ($9F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $15.b		; 14 15 ; Test and reset bits $15.b [Reads: Accumulator] [Flags: Z]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $06FFDB.l		; 0F DB FF 06 ; OR accumulator with memory (long) $06FFDB.l [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor ($0D.b,X)		; 41 0D ; Exclusive OR accumulator with memory ($0D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $E3.b,X		; 16 E3 ; Arithmetic shift left $E3.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($14.b),Y		; 11 14 ; OR accumulator with memory ($14.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($15.b,X)		; 41 15 ; Exclusive OR accumulator with memory ($15.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $41.b		; 14 41 ; Test and reset bits $41.b [Reads: Accumulator] [Flags: Z]
	ora [$10.b],Y		; 17 10 ; OR accumulator with memory (long indexed) [$10.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($FF.b,X)		; 41 FF ; Exclusive OR accumulator with memory ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $18.b		; 14 18 ; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	eor ($19.b,X)		; 41 19 ; Exclusive OR accumulator with memory ($19.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$41.b		; 09 41 ; Logical OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $0A0F08.l,X		; FF 08 0F 0A ; Subtract with carry (long,X) $0A0F08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($41.b)		; 12 41 ; OR accumulator with memory (indirect) ($41.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $12.b,X		; 16 12 ; Arithmetic shift left $12.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $17.b		; 45 17 ; Exclusive OR $17.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $FF55.w		; 1C 55 FF ; Test and reset bits $FF55.w [Reads: Accumulator] [Flags: Z]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $0B.b,S		; E3 0B ; Subtract stack-relative $0B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $79.b		; 14 79 ; Test and reset bits $79.b [Reads: Accumulator] [Flags: Z]
	tsb $450E.w		; 0C 0E 45 ; Test and set bits $450E.w [Reads: Accumulator] [Flags: Z]
	asl $4117.w		; 0E 17 41 ; Arithmetic shift left $4117.w [Flags: ZNC]
	ora ($05.b)		; 12 05 ; OR accumulator with memory (indirect) ($05.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $17.b,X		; 55 17 ; Exclusive OR accumulator with memory $17.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF08.w,Y		; 19 08 FF ; OR accumulator with memory $FF08.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $450F.w		; 0C 0F 45 ; Test and set bits $450F.w [Reads: Accumulator] [Flags: Z]
	ora [$07.b],Y		; 17 07 ; OR accumulator with memory (long indexed) [$07.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($17.b),Y		; 51 17 ; Exclusive OR accumulator with memory ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $FF51.w		; 0C 51 FF ; Test and set bits $FF51.w [Reads: Accumulator] [Flags: Z]
	trb $12.b		; 14 12 ; Test and reset bits $12.b [Reads: Accumulator] [Flags: Z]
	eor [$19.b],Y		; 57 19 ; Exclusive OR accumulator with memory (long indexed) [$19.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($B3.b)		; 12 B3 ; OR accumulator with memory (indirect) ($B3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $570E.w		; 1C 0E 57 ; Test and reset bits $570E.w [Reads: Accumulator] [Flags: Z]
	trb $5716.w		; 1C 16 57 ; Test and reset bits $5716.w [Reads: Accumulator] [Flags: Z]
	ora $4C27.w,Y		; 19 27 4C ; OR accumulator with memory $4C27.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $0122.w		; 1C 22 01 ; Test and reset bits $0122.w [Reads: Accumulator] [Flags: Z]
	ora $234C2A.l,X		; 1F 2A 4C 23 ; Logical OR long $234C2A.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $26D4.w		; 0C D4 26 ; Test and set bits $26D4.w [Reads: Accumulator] [Flags: Z]
	ora $294C.w,X		; 1D 4C 29 ; OR accumulator with memory $294C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	jmp $062A.w		; 4C 2A 06 ; Jump to $062A.w [Flow: jump]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bit $4C1B.w		; 2C 1B 4C ; Test bits $4C1B.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	.db $30, $0A		; 30 0A ; Branch if minus to $30, $0A [Flow: branch]
	jmp $1435.w		; 4C 35 14 ; Jump to $1435.w [Flow: jump]
	jmp $372B.w		; 4C 2B 37 ; Jump to $372B.w [Flow: jump]
	sbc ($24.b)		; F2 24 ; Subtract with carry (indirect) ($24.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsl $282A4C.l		; 22 4C 2A 28 ; Jump to subroutine long $282A4C.l [Writes: Stack Pointer] [Flow: call]
	jmp $2332.w		; 4C 32 23 ; Jump to $2332.w [Flow: jump]
	jmp $3433.w		; 4C 33 34 ; Jump to $3433.w [Flow: jump]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora #$1A.b		; 09 1A ; Logical OR #$1A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	tsb MDMAEN.w		; 0C 0B 42 ; Test and set bits MDMAEN.w [Reads: Accumulator] [Flags: Z]
	tsb $4112.w		; 0C 12 41 ; Test and set bits $4112.w [Reads: Accumulator] [Flags: Z]
	.db $10, $13		; 10 13 ; Branch if plus to $10, $13 [Flow: branch]
	.db $42, $12		; 42 12 ; Reserved instruction
	ora $15DD.w,Y		; 19 DD 15 ; OR accumulator with memory $15DD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pei ($FF.b)		; D4 FF ; Push effective indirect address ($FF.b) [Reads: Direct Page] [Writes: Stack Pointer]
	asl $13.b		; 06 13 ; Arithmetic shift left $13.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	trb $0A.b		; 14 0A ; Test and reset bits $0A.b [Reads: Accumulator] [Flags: Z]
	ora ($17.b)		; 12 17 ; OR accumulator with memory (indirect) ($17.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	asl $12.b,X		; 16 12 ; Arithmetic shift left $12.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $33170E.l,X		; FF 0E 17 33 ; Subtract with carry (long,X) $33170E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($08.b,S),Y		; 13 08 ; OR accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($41.b),Y		; 11 41 ; OR accumulator with memory ($41.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($06.b,S),Y		; 13 06 ; OR accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	tsb $FF08.w		; 0C 08 FF ; Test and set bits $FF08.w [Reads: Accumulator] [Flags: Z]
	ora [$0E.b]		; 07 0E ; OR accumulator with memory (long) [$0E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0C08.w		; 0D 08 0C ; Logical OR $0C08.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $13.b		; 45 13 ; Exclusive OR $13.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $14EB.w,Y		; 19 EB 14 ; OR accumulator with memory $14EB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $170D.w,Y		; 19 0D 17 ; OR accumulator with memory $170D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($55.b),Y		; 11 55 ; OR accumulator with memory ($55.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $5525.w		; 0D 25 55 ; Logical OR $5525.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $5537.w,Y		; 19 37 55 ; OR accumulator with memory $5537.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1F0D27.l,X		; 1F 27 0D 1F ; Logical OR long $1F0D27.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $1B260D.l		; 2F 0D 26 1B ; AND accumulator with memory (long) $1B260D.l [Writes: Accumulator] [Flags: ZN]
	eor $2F.b,X		; 55 2F ; Exclusive OR accumulator with memory $2F.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $3400.w		; 0D 00 34 ; Logical OR $3400.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZNC]
	and $0A.b,X		; 35 0A ; Logical AND $0A.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $14.b,X		; 35 14 ; Logical AND $14.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $39.b,X		; 55 39 ; Exclusive OR accumulator with memory $39.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $2B0D.w,Y		; 19 0D 2B ; OR accumulator with memory $2B0D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$BA.b		; 29 BA ; Logical AND #$BA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($39.b),Y		; 31 39 ; AND accumulator with memory ($39.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $36.b,X		; 55 36 ; Exclusive OR accumulator with memory $36.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($55.b,X)		; 21 55 ; Logical AND ($55.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$32.b],Y		; 37 32 ; AND accumulator with memory (long indexed) [$32.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $3439.w		; 0D 39 34 ; Logical OR $3439.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $08FF.w		; 0D FF 08 ; Logical OR $08FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $58		; 10 58 ; Branch if plus to $10, $58 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $161158.l		; 0F 58 11 16 ; OR accumulator with memory (long) $161158.l [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ora $5512.w,Y		; 19 12 55 ; OR accumulator with memory $5512.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $391705.l,X		; FF 05 17 39 ; Subtract with carry (long,X) $391705.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rol $140D.w,X		; 3E 0D 14 ; Rotate left $140D.w,X [Reads: X Index] [Flags: ZNC]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $100014.l		; 0F 14 00 10 ; OR accumulator with memory (long) $100014.l [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $174511.l		; 0F 11 45 17 ; OR accumulator with memory (long) $174511.l [Writes: Accumulator] [Flags: ZN]
	ora [$3E.b],Y		; 17 3E ; OR accumulator with memory (long indexed) [$3E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $D2130D.l,X		; FF 0D 13 D2 ; Subtract with carry (long,X) $D2130D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0E080C.l		; 0F 0C 08 0E ; OR accumulator with memory (long) $0E080C.l [Writes: Accumulator] [Flags: ZN]
	trb $EB.b		; 14 EB ; Test and reset bits $EB.b [Reads: Accumulator] [Flags: Z]
	trb $0F.b		; 14 0F ; Test and reset bits $0F.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$41.b],Y		; 17 41 ; OR accumulator with memory (long indexed) [$41.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	sbc $000B09.l,X		; FF 09 0B 00 ; Subtract with carry (long,X) $000B09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor ($0F.b,X)		; 41 0F ; Exclusive OR accumulator with memory ($0F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	ora ($09.b),Y		; 11 09 ; OR accumulator with memory ($09.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $15.b		; 45 15 ; Exclusive OR $15.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $0A.b		; 14 0A ; Test and reset bits $0A.b [Reads: Accumulator] [Flags: Z]
	sbc $0A1605.l,X		; FF 05 16 0A ; Subtract with carry (long,X) $0A1605.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $BA07.w		; 0C 07 BA ; Test and set bits $BA07.w [Reads: Accumulator] [Flags: Z]
	ora ($06.b,S),Y		; 13 06 ; OR accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $16.b,X		; 55 16 ; Exclusive OR accumulator with memory $16.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($0F.b),Y		; 11 0F ; OR accumulator with memory ($0F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $9DD92E.l,X		; FF 2E D9 9D ; Subtract with carry (long,X) $9DD92E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx $D933.w		; EC 33 D9 ; Compare $D933.w with X register [Reads: X Index] [Flags: ZNC]
	sta $65EC.w,X		; 9D EC 65 ; Store accumulator to $65EC.w,X [Reads: Accumulator, X Index]
	cmp $EC9D.w,Y		; D9 9D EC ; Compare accumulator $EC9D.w,Y [Reads: Y Index] [Flags: ZNC]
	sta [$D9.b],Y		; 97 D9 ; Store accumulator (long indexed) [$D9.b],Y [Reads: Accumulator, Direct Page, Y Index]
	cmp $D9.b,S		; C3 D9 ; Compare accumulator (stack relative) $D9.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp $D9CD.w,Y		; D9 CD D9 ; Compare accumulator $D9CD.w,Y [Reads: Y Index] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cmp $D9EF.w,Y		; D9 EF D9 ; Compare accumulator $D9EF.w,Y [Reads: Y Index] [Flags: ZNC]
	sta $0FEC.w,X		; 9D EC 0F ; Store accumulator to $0FEC.w,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	trb $DA.b		; 14 DA ; Test and reset bits $DA.b [Reads: Accumulator] [Flags: Z]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $DA25.w		; EC 25 DA ; Compare $DA25.w with X register [Reads: X Index] [Flags: ZNC]
	and $DA47DA.l,X		; 3F DA 47 DA ; AND accumulator with memory (long,X) $DA47DA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cmp ($DA.b,X)		; C1 DA ; Compare accumulator ($DA.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sta $DEEC.w,X		; 9D EC DE ; Store accumulator to $DEEC.w,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cpx $0FDA.w		; EC DA 0F ; Compare $0FDA.w with X register [Reads: X Index] [Flags: ZNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and $DB.b,S		; 23 DB ; AND accumulator with stack relative $DB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $46EC.w,X		; 9D EC 46 ; Store accumulator to $46EC.w,X [Reads: Accumulator, X Index]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	eor $77DB.w,X		; 5D DB 77 ; Exclusive OR accumulator with memory $77DB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	jmp ($A2DB.w,X)		; 7C DB A2 ; Jump indirect indexed to ($A2DB.w,X) [Reads: X Index] [Flow: jump]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	lda $CADB.w,Y		; B9 DB CA ; Load $CADB.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sbc ($DB.b,X)		; E1 DB ; Subtract with carry ($DB.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $DB.b,S		; E3 DB ; Subtract stack-relative $DB.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora #$DC.b		; 09 DC ; Logical OR #$DC.b with accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $31DC.w		; 20 DC 31 ; Jump to subroutine at $31DC.w [Writes: Stack Pointer] [Flow: call]
	jmp.w [$DC39]		; DC 39 DC ; Jump long indirect [$DC39] [Flow: jump]
	eor ($DC.b,S),Y		; 53 DC ; XOR accumulator (stack relative indirect indexed) ($DC.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $9DDC.w		; 6D DC 9D ; Add $9DDC.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cpx $DC7B.w		; EC 7B DC ; Compare $DC7B.w with X register [Reads: X Index] [Flags: ZNC]
	sta $8FEC.w,X		; 9D EC 8F ; Store accumulator to $8FEC.w,X [Reads: Accumulator, X Index]
	jmp.w [$DC94]		; DC 94 DC ; Jump long indirect [$DC94] [Flow: jump]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	jmp.w [$DCCB]		; DC CB DC ; Jump long indirect [$DCCB] [Flow: jump]
	dec $DC.b,X		; D6 DC ; Decrement memory $DC.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc $10DC.w		; ED DC 10 ; Subtract $10DC.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cmp $DD33.w,X		; DD 33 DD ; Compare accumulator $DD33.w,X [Reads: X Index] [Flags: ZNC]
	eor ($DD.b,S),Y		; 53 DD ; XOR accumulator (stack relative indirect indexed) ($DD.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp $DD84.w,X		; DD 84 DD ; Compare accumulator $DD84.w,X [Reads: X Index] [Flags: ZNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $DDAF.w,X		; DD AF DD ; Compare accumulator $DDAF.w,X [Reads: X Index] [Flags: ZNC]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	cmp $DDE9.w,X		; DD E9 DD ; Compare accumulator $DDE9.w,X [Reads: X Index] [Flags: ZNC]
	ora ($DE.b)		; 12 DE ; OR accumulator with memory (indirect) ($DE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $DE.b,S		; 23 DE ; AND accumulator with stack relative $DE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $47DE.w,Y		; 39 DE 47 ; AND accumulator with memory $47DE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: ZN]
	adc $DE.b,S		; 63 DE ; Add with carry (stack relative) $DE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $DE		; 80 DE ; Branch always to $80, $DE [Flow: branch]
	lda $DE.b,S		; A3 DE ; Load accumulator (stack relative) $DE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $DE.b,X		; B4 DE ; Load Y register $DE.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	sta $B6EC.w,X		; 9D EC B6 ; Store accumulator to $B6EC.w,X [Reads: Accumulator, X Index]
	dec $DEDF.w,X		; DE DF DE ; Decrement memory $DEDF.w,X [Reads: X Index] [Flags: ZN]
	nop		; EA ; No operation
	dec $DF04.w,X		; DE 04 DF ; Decrement memory $DF04.w,X [Reads: X Index] [Flags: ZN]
	asl $23DF.w,X		; 1E DF 23 ; Arithmetic shift left $23DF.w,X [Reads: X Index] [Flags: ZNC]
	cmp $3CDF31.l,X		; DF 31 DF 3C ; Compare accumulator (long,X) $3CDF31.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $52DF47.l,X		; DF 47 DF 52 ; Compare accumulator (long,X) $52DF47.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $86DF5D.l,X		; DF 5D DF 86 ; Compare accumulator (long,X) $86DF5D.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $ABDFA0.l,X		; DF A0 DF AB ; Compare accumulator (long,X) $ABDFA0.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $06DFD4.l,X		; DF D4 DF 06 ; Compare accumulator (long,X) $06DFD4.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cpx #$23.b		; E0 23 ; Compare #$23.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$49.b		; E0 49 ; Compare #$49.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$4E.b		; E0 4E ; Compare #$4E.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$6B.b		; E0 6B ; Compare #$6B.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$7C.b		; E0 7C ; Compare #$7C.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$A5.b		; E0 A5 ; Compare #$A5.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$B6.b		; E0 B6 ; Compare #$B6.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$C1.b		; E0 C1 ; Compare #$C1.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$C6.b		; E0 C6 ; Compare #$C6.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$D1.b		; E0 D1 ; Compare #$D1.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$DC.b		; E0 DC ; Compare #$DC.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$E4.b		; E0 E4 ; Compare #$E4.b with X register [Reads: X Index] [Flags: ZNC]
	cpx #$0D.b		; E0 0D ; Compare #$0D.b with X register [Reads: X Index] [Flags: ZNC]
	sbc ($1E.b,X)		; E1 1E ; Subtract with carry ($1E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($44.b,X)		; E1 44 ; Subtract with carry ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($64.b,X)		; E1 64 ; Subtract with carry ($64.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($9D.b,X)		; E1 9D ; Subtract with carry ($9D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpx $E17E.w		; EC 7E E1 ; Compare $E17E.w with X register [Reads: X Index] [Flags: ZNC]
	sta ($E1.b)		; 92 E1 ; Store accumulator (indirect) ($E1.b) [Reads: Accumulator, Direct Page]
	ldx $CFE1.w,Y		; BE E1 CF ; Load X register $CFE1.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc ($EC.b,X)		; E1 EC ; Subtract with carry ($EC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($9D.b,X)		; E1 9D ; Subtract with carry ($9D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $08E1.w,X		; FD E1 08 ; Subtract with carry $08E1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
.INDEX 8
	sep #$13		; E2 13
.ACCU 8
	sep #$2A		; E2 2A
	sep #$44		; E2 44 ; Set processor status bits #$44 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
.ACCU 8
	sep #$64		; E2 64
.ACCU 8
.INDEX 8
	sep #$7B		; E2 7B
.INDEX 8
	sep #$9D		; E2 9D
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $8FEC.w,X		; 9D EC 8F ; Store accumulator to $8FEC.w,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$B2		; E2 B2
	sep #$C9		; E2 C9 ; Set processor status bits #$C9 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
.ACCU 8
	sep #$EC		; E2 EC
	sep #$03		; E2 03 ; Set processor status bits #$03 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sbc $1D.b,S		; E3 1D ; Subtract stack-relative $1D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $2B.b,S		; E3 2B ; Subtract stack-relative $2B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $33.b,S		; E3 33 ; Subtract stack-relative $33.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $3E.b,S		; E3 3E ; Subtract stack-relative $3E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $5E.b,S		; E3 5E ; Subtract stack-relative $5E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $75.b,S		; E3 75 ; Subtract stack-relative $75.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $95.b,S		; E3 95 ; Subtract stack-relative $95.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $97.b,S		; E3 97 ; Subtract stack-relative $97.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $9D.b,S		; E3 9D ; Subtract stack-relative $9D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cpx $E3C0.w		; EC C0 E3 ; Compare $E3C0.w with X register [Reads: X Index] [Flags: ZNC]
	sta $C8EC.w,X		; 9D EC C8 ; Store accumulator to $C8EC.w,X [Reads: Accumulator, X Index]
	sbc $E2.b,S		; E3 E2 ; Subtract stack-relative $E2.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cpx $3D.b		; E4 3D ; Compare $3D.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $9D.b		; E4 9D ; Compare $9D.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $E457.w		; EC 57 E4 ; Compare $E457.w with X register [Reads: X Index] [Flags: ZNC]
	jmp $E473E4.l		; 5C E4 73 E4 ; Jump long to $E473E4.l [Flow: jump]
	sta $9DE4.w,Y		; 99 E4 9D ; Store accumulator to $9DE4.w,Y [Reads: Accumulator, Y Index]
	cpx $E4B3.w		; EC B3 E4 ; Compare $E4B3.w with X register [Reads: X Index] [Flags: ZNC]
	cpy $E4.b		; C4 E4 ; Compare $E4.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cmp $E4.b,X		; D5 E4 ; Compare accumulator $E4.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cpx $EB.b		; E4 EB ; Compare $EB.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $9D.b		; E4 9D ; Compare $9D.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx $E50E.w		; EC 0E E5 ; Compare $E50E.w with X register [Reads: X Index] [Flags: ZNC]
	and [$E5.b],Y		; 37 E5 ; AND accumulator with memory (long indexed) [$E5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $6BE5.w		; 4E E5 6B ; Logical shift right $6BE5.w [Flags: ZNC]
	sbc $7C.b		; E5 7C ; Subtract $7C.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $90.b		; E5 90 ; Subtract $90.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $9B.b		; E5 9B ; Subtract $9B.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $9D.b		; E5 9D ; Subtract $9D.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpx $E5B8.w		; EC B8 E5 ; Compare $E5B8.w with X register [Reads: X Index] [Flags: ZNC]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	sbc $C5.b		; E5 C5 ; Subtract $C5.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $EB.b		; E5 EB ; Subtract $EB.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F3.b		; E5 F3 ; Subtract $F3.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FB.b		; E5 FB ; Subtract $FB.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0C.b		; E5 0C ; Subtract $0C.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $26.b		; E6 26 ; Increment $26.b [Reads: Direct Page] [Flags: ZN]
	inc $3A.b		; E6 3A ; Increment $3A.b [Reads: Direct Page] [Flags: ZN]
	inc $54.b		; E6 54 ; Increment $54.b [Reads: Direct Page] [Flags: ZN]
	inc $9D.b		; E6 9D ; Increment $9D.b [Reads: Direct Page] [Flags: ZN]
	cpx $E659.w		; EC 59 E6 ; Compare $E659.w with X register [Reads: X Index] [Flags: ZNC]
	adc ($E6.b,X)		; 61 E6 ; Add with carry ($E6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $E6.b		; 66 E6 ; Rotate right $E6.b [Reads: Direct Page] [Flags: ZNC]
	sta ($E6.b)		; 92 E6 ; Store accumulator (indirect) ($E6.b) [Reads: Accumulator, Direct Page]
	lda ($E6.b)		; B2 E6 ; Load accumulator (indirect) ($E6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $9DE6.w,X		; DE E6 9D ; Decrement memory $9DE6.w,X [Reads: X Index] [Flags: ZN]
	cpx $E6EF.w		; EC EF E6 ; Compare $E6EF.w with X register [Reads: X Index] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	inc $1A.b		; E6 1A ; Increment $1A.b [Reads: Direct Page] [Flags: ZN]
	sbc [$22.b]		; E7 22 ; Subtract with carry (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$36.b]		; E7 36 ; Subtract with carry (long) [$36.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$3B.b]		; E7 3B ; Subtract with carry (long) [$3B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$52.b]		; E7 52 ; Subtract with carry (long) [$52.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$75.b]		; E7 75 ; Subtract with carry (long) [$75.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$9B.b]		; E7 9B ; Subtract with carry (long) [$9B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$9D.b]		; E7 9D ; Subtract with carry (long) [$9D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$B4.b]		; E7 B4 ; Subtract with carry (long) [$B4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$BC.b]		; E7 BC ; Subtract with carry (long) [$BC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$D9.b]		; E7 D9 ; Subtract with carry (long) [$D9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$02.b]		; E7 02 ; Subtract with carry (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	trb $36E8.w		; 1C E8 36 ; Test and reset bits $36E8.w [Reads: Accumulator] [Flags: Z]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lsr $E8.b,X		; 56 E8 ; Logical shift right $E8.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $70, $E8		; 70 E8 ; Branch if overflow set to $70, $E8 [Flow: branch]
	sta $87EC.w,X		; 9D EC 87 ; Store accumulator to $87EC.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stz $9DE8.w,X		; 9E E8 9D ; Store zero to $9DE8.w,X [Reads: X Index]
	cpx $E8A9.w		; EC A9 E8 ; Compare $E8A9.w with X register [Reads: X Index] [Flags: ZNC]
	cmp $EC9DE8.l		; CF E8 9D EC ; Compare accumulator (long) $EC9DE8.l [Reads: Accumulator] [Flags: ZNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta $15EC.w,X		; 9D EC 15 ; Store accumulator to $15EC.w,X [Reads: Accumulator, X Index]
	sbc #$38.b		; E9 38 ; Subtract #$38.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc #$52.b		; E9 52 ; Subtract #$52.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc #$9D.b		; E9 9D ; Subtract #$9D.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	adc ($E9.b)		; 72 E9 ; Add with carry (indirect) ($E9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $E9.b,S		; 83 E9 ; Store accumulator (stack relative) $E9.b,S [Reads: Accumulator, Stack Pointer]
	sta $8EEC.w,X		; 9D EC 8E ; Store accumulator to $8EEC.w,X [Reads: Accumulator, X Index]
	sbc #$B1.b		; E9 B1 ; Subtract #$B1.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc #$BF.b		; E9 BF ; Subtract #$BF.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc #$C7.b		; E9 C7 ; Subtract #$C7.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc #$DE.b		; E9 DE ; Subtract #$DE.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc #$9D.b		; E9 9D ; Subtract #$9D.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cpx $EA01.w		; EC 01 EA ; Compare $EA01.w with X register [Reads: X Index] [Flags: ZNC]
	tsb $14EA.w		; 0C EA 14 ; Test and set bits $14EA.w [Reads: Accumulator] [Flags: Z]
	nop		; EA ; No operation
	jsl $EA2AEA.l		; 22 EA 2A EA ; Jump to subroutine long $EA2AEA.l [Writes: Stack Pointer] [Flow: call]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	nop		; EA ; No operation
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	nop		; EA ; No operation
	lsr $62EA.w		; 4E EA 62 ; Logical shift right $62EA.w [Flags: ZNC]
	nop		; EA ; No operation
	adc ($EA.b,S),Y		; 73 EA ; Add with carry (stack relative indirect indexed) ($EA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	nop		; EA ; No operation
	sta $98EC.w,X		; 9D EC 98 ; Store accumulator to $98EC.w,X [Reads: Accumulator, X Index]
	nop		; EA ; No operation
	sta $9DEA.w,X		; 9D EA 9D ; Store accumulator to $9DEA.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	ldx #$EA.b		; A2 EA ; Load #$EA.b into X register [Writes: X Index] [Flags: ZN]
	lda ($EA.b,S),Y		; B3 EA ; Load accumulator (stack relative indirect indexed) ($EA.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($EA.b,X)		; C1 EA ; Compare accumulator ($EA.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc ($EA.b,X)		; E1 EA ; Subtract with carry ($EA.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $01EC.w,X		; 9D EC 01 ; Store accumulator to $01EC.w,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $EB.b		; 06 EB ; Arithmetic shift left $EB.b [Reads: Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	.db $10, $EB		; 10 EB ; Branch if plus to $10, $EB [Flow: branch]
	asl $29EB.w,X		; 1E EB 29 ; Arithmetic shift left $29EB.w,X [Reads: X Index] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bit $EB.b,X		; 34 EB ; Test bits $EB.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol $EB.b,X		; 36 EB ; Rotate left $EB.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor [$EB.b]		; 47 EB ; Exclusive OR accumulator with memory (long) [$EB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor $62EB.w,X		; 5D EB 62 ; Exclusive OR accumulator with memory $62EB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	adc [$EB.b]		; 67 EB ; Add with carry (long) [$EB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jmp ($77EB.w)		; 6C EB 77 ; Jump indirect to ($77EB.w) [Flow: jump]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	jmp ($81EB.w,X)		; 7C EB 81 ; Jump indirect indexed to ($81EB.w,X) [Reads: X Index] [Flow: jump]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	stx $EB.b		; 86 EB ; Store X register to $EB.b [Reads: X Index]
	sta ($EB.b),Y		; 91 EB ; Store accumulator ($EB.b),Y [Reads: Accumulator, Direct Page, Y Index]
	sta $EBA4EB.l,X		; 9F EB A4 EB ; Store accumulator (long,X) $EBA4EB.l,X [Reads: Accumulator, X Index]
	lda #$EB.b		; A9 EB ; Load #$EB.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$EB.b		; C0 EB ; Compare #$EB.b with Y register [Reads: Y Index] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
.ACCU 8
	sep #$EB		; E2 EB
	nop		; EA ; No operation
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $EBF4EB.l		; EF EB F4 EB ; Subtract with carry (long) $EBF4EB.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $9DEB.w,Y		; F9 EB 9D ; Subtract with carry $9DEB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx $EC01.w		; EC 01 EC ; Compare $EC01.w with X register [Reads: X Index] [Flags: ZNC]
	ora #$EC.b		; 09 EC ; Logical OR #$EC.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $9DEC.w,X		; 1D EC 9D ; OR accumulator with memory $9DEC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpx $EC22.w		; EC 22 EC ; Compare $EC22.w with X register [Reads: X Index] [Flags: ZNC]
	and [$EC.b]		; 27 EC ; AND accumulator with memory (long) [$EC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $31EC.w		; 2C EC 31 ; Test bits $31EC.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	cpx $EC39.w		; EC 39 EC ; Compare $EC39.w with X register [Reads: X Index] [Flags: ZNC]
	sta $3EEC.w,X		; 9D EC 3E ; Store accumulator to $3EEC.w,X [Reads: Accumulator, X Index]
	cpx $EC4F.w		; EC 4F EC ; Compare $EC4F.w with X register [Reads: X Index] [Flags: ZNC]
	mvn $5F,$EC		; 54 EC 5F ; Move block negative $5F,$EC [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cpx $EC64.w		; EC 64 EC ; Compare $EC64.w with X register [Reads: X Index] [Flags: ZNC]
	jmp ($7DEC.w)		; 6C EC 7D ; Jump indirect to ($7DEC.w) [Flow: jump]
	cpx $EC82.w		; EC 82 EC ; Compare $EC82.w with X register [Reads: X Index] [Flags: ZNC]
	sta [$EC.b]		; 87 EC ; Store accumulator (long) [$EC.b] [Reads: Accumulator, Direct Page]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	sta $9DEC.w,X		; 9D EC 9D ; Store accumulator to $9DEC.w,X [Reads: Accumulator, X Index]
	cpx $EC9D.w		; EC 9D EC ; Compare $EC9D.w with X register [Reads: X Index] [Flags: ZNC]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$D6.b],Y		; 17 D6 ; OR accumulator with memory (long indexed) [$D6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $128500.l,X		; FF 00 85 12 ; Subtract with carry (long,X) $128500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $1586.w		; 6D 86 15 ; Add $1586.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $0F88.w		; 6D 88 0F ; Add $0F88.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $1088.w		; 6D 88 10 ; Add $1088.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $1889.w		; 6D 89 18 ; Add $1889.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $EF97.w		; 6D 97 EF ; Add $EF97.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	asl $98.b		; 06 98 ; Arithmetic shift left $98.b [Reads: Direct Page] [Flags: ZNC]
	sbc #$06.b		; E9 06 ; Subtract #$06.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $99.b		; 06 99 ; Arithmetic shift left $99.b [Reads: Direct Page] [Flags: ZNC]
	nop		; EA ; No operation
	asl $99.b		; 06 99 ; Arithmetic shift left $99.b [Reads: Direct Page] [Flags: ZNC]
	cpx $9A06.w		; EC 06 9A ; Compare $9A06.w with X register [Reads: X Index] [Flags: ZNC]
	sbc #$06.b		; E9 06 ; Subtract #$06.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $97.b		; 06 97 ; Arithmetic shift left $97.b [Reads: Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $97.b		; 06 97 ; Arithmetic shift left $97.b [Reads: Direct Page] [Flags: ZNC]
	ora $04.b,X		; 15 04 ; OR accumulator with memory $04.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora $9A6D.w		; 0D 6D 9A ; Logical OR $9A6D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($6D.b)		; 12 6D ; OR accumulator with memory (indirect) ($6D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $090400.l,X		; FF 00 04 09 ; Subtract with carry (long,X) $090400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $1404.w,X		; 1E 04 14 ; Arithmetic shift left $1404.w,X [Reads: X Index] [Flags: ZNC]
	eor $1B04.w,X		; 5D 04 1B ; Exclusive OR accumulator with memory $1B04.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora [$05.b]		; 07 05 ; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $5F1509.l,X		; 5F 09 15 5F ; Exclusive OR accumulator with memory (long,X) $5F1509.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($E7.b)		; 12 E7 ; OR accumulator with memory (indirect) ($E7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $15.b,X		; 16 15 ; Arithmetic shift left $15.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $04.b,X		; 15 04 ; OR accumulator with memory $04.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1A.b,X		; 15 1A ; OR accumulator with memory $1A.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $15.b		; 06 15 ; Arithmetic shift left $15.b [Reads: Direct Page] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $1C.b,X		; 15 1C ; OR accumulator with memory $1C.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $1AF617.l		; 8F 17 F6 1A ; Store accumulator (long) $1AF617.l [Reads: Accumulator]
	ora [$FA.b],Y		; 17 FA ; OR accumulator with memory (long indexed) [$FA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sed		; F8 ; Set decimal flag [Flags: D]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $8F151B.l		; 8F 1B 15 8F ; Store accumulator (long) $8F151B.l [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$C7.b]		; 07 C7 ; OR accumulator with memory (long) [$C7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $071700.l,X		; FF 00 17 07 ; Subtract with carry (long,X) $071700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $0717.w		; 8C 17 07 ; Store Y register to $0717.w [Reads: Y Index]
	sta $0717.w		; 8D 17 07 ; Store accumulator to $0717.w [Reads: Accumulator]
	sta $0717.w		; 8D 17 07 ; Store accumulator to $0717.w [Reads: Accumulator]
	sta $0717.w		; 8D 17 07 ; Store accumulator to $0717.w [Reads: Accumulator]
	sta $0717.w		; 8D 17 07 ; Store accumulator to $0717.w [Reads: Accumulator]
	sta $0717.w		; 8D 17 07 ; Store accumulator to $0717.w [Reads: Accumulator]
	sta $0717.w		; 8D 17 07 ; Store accumulator to $0717.w [Reads: Accumulator]
	sta $0717.w		; 8D 17 07 ; Store accumulator to $0717.w [Reads: Accumulator]
	sta $0717.w		; 8D 17 07 ; Store accumulator to $0717.w [Reads: Accumulator]
	sta $0717.w		; 8D 17 07 ; Store accumulator to $0717.w [Reads: Accumulator]
	sta $0717.w		; 8D 17 07 ; Store accumulator to $0717.w [Reads: Accumulator]
	sta $0717.w		; 8D 17 07 ; Store accumulator to $0717.w [Reads: Accumulator]
	sta $0717.w		; 8D 17 07 ; Store accumulator to $0717.w [Reads: Accumulator]
	sta $00FF.w		; 8D FF 00 ; Store accumulator to $00FF.w [Reads: Accumulator]
	asl $0912.w		; 0E 12 09 ; Arithmetic shift left $0912.w [Flags: ZNC]
	sbc $071600.l,X		; FF 00 16 07 ; Subtract with carry (long,X) $071600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc $070800.l,X		; FF 00 08 07 ; Subtract with carry (long,X) $070800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $08.b		; C5 08 ; Compare $08.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp $0B.b		; C5 0B ; Compare $0B.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora [$15.b],Y		; 17 15 ; OR accumulator with memory (long indexed) [$15.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $170800.l,X		; FF 00 08 17 ; Subtract with carry (long,X) $170800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stx $1709.w		; 8E 09 17 ; Store X register to $1709.w [Reads: X Index]
	stx $ED09.w		; 8E 09 ED ; Store X register to $ED09.w [Reads: X Index]
	ora $09.b		; 05 09 ; Logical OR $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc ($05.b),Y		; F1 05 ; Subtract with carry ($05.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc ($17.b,S),Y		; F3 17 ; Subtract with carry (stack relative indirect indexed) ($17.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $05ED.w		; 0E ED 05 ; Arithmetic shift left $05ED.w [Flags: ZNC]
	asl $05F1.w		; 0E F1 05 ; Arithmetic shift left $05F1.w [Flags: ZNC]
	sbc $1C0400.l,X		; FF 00 04 1C ; Subtract with carry (long,X) $1C0400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $0708.w,X		; 1E 08 07 ; Arithmetic shift left $0708.w,X [Reads: X Index] [Flags: ZNC]
	stx $160B.w		; 8E 0B 16 ; Store X register to $160B.w [Reads: X Index]
	stx $1B0B.w		; 8E 0B 1B ; Store X register to $1B0B.w [Reads: X Index]
	stx $0516.w		; 8E 16 05 ; Store X register to $0516.w [Reads: X Index]
	stx $0A16.w		; 8E 16 0A ; Store X register to $0A16.w [Reads: X Index]
	stx $0719.w		; 8E 19 07 ; Store X register to $0719.w [Reads: X Index]
	stx $0819.w		; 8E 19 08 ; Store X register to $0819.w [Reads: X Index]
	stx $061B.w		; 8E 1B 06 ; Store X register to $061B.w [Reads: X Index]
	stx $091B.w		; 8E 1B 09 ; Store X register to $091B.w [Reads: X Index]
	stx $00FF.w		; 8E FF 00 ; Store X register to $00FF.w [Reads: X Index]
	ora $07.b,X		; 15 07 ; OR accumulator with memory $07.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sbc $161200.l,X		; FF 00 12 16 ; Subtract with carry (long,X) $161200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($16.b,X)		; A1 16 ; Load accumulator ($16.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $24.b		; 05 24 ; Logical OR $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $24.b		; 05 24 ; Logical OR $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $24.b		; 05 24 ; Logical OR $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $E400.w,X		; FE 00 E4 ; Increment memory $E400.w,X [Reads: X Index] [Flags: ZN]
	sbc $170A00.l,X		; FF 00 0A 17 ; Subtract with carry (long,X) $170A00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $180A.w		; 6D 0A 18 ; Add $180A.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $170C.w		; 6D 0C 17 ; Add $170C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $6F180C.l		; 6F 0C 18 6F ; Add with carry (long) $6F180C.l [Writes: Accumulator] [Flags: ZVNC]
	ora ($1C.b),Y		; 11 1C ; OR accumulator with memory ($1C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $1C12.w		; 6D 12 1C ; Add $1C12.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $1A16.w		; 6D 16 1A ; Add $1A16.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $1B16.w		; 6D 16 1B ; Add $1B16.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $00FF.w		; 6D FF 00 ; Add $00FF.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($06.b,S),Y		; 73 06 ; Add with carry (stack relative indirect indexed) ($06.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $76		; 10 76 ; Branch if plus to $10, $76 [Flow: branch]
	sbc $141100.l,X		; FF 00 11 14 ; Subtract with carry (long,X) $141100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $1804.w,X		; 1E 04 18 ; Arithmetic shift left $1804.w,X [Reads: X Index] [Flags: ZNC]
	ora $04.b,X		; 15 04 ; OR accumulator with memory $04.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $05.b,X		; 15 05 ; OR accumulator with memory $05.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $05.b,X		; 15 05 ; OR accumulator with memory $05.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $16.b,X		; 15 16 ; OR accumulator with memory $16.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	jmp ($1618.w,X)		; 7C 18 16 ; Jump indirect indexed to ($1618.w,X) [Reads: X Index] [Flow: jump]
	cmp [$FE.b]		; C7 FE ; Compare accumulator (long) [$FE.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $1A96.w,X		; 1E 96 1A ; Arithmetic shift left $1A96.w,X [Reads: X Index] [Flags: ZNC]
	trb $7C.b		; 14 7C ; Test and reset bits $7C.b [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cmp ($FF.b),Y		; D1 FF ; Compare accumulator ($FF.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	ora ($84.b,X)		; 01 84 ; Logical OR ($84.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $8AB0.w		; 0C B0 8A ; Test and set bits $8AB0.w [Reads: Accumulator] [Flags: Z]
	ora $198AAF.l		; 0F AF 8A 19 ; OR accumulator with memory (long) $198AAF.l [Writes: Accumulator] [Flags: ZN]
	ldx $038D.w		; AE 8D 03 ; Load $038D.w into X register [Writes: X Index] [Flags: ZN]
	ldx $1B8D.w		; AE 8D 1B ; Load $1B8D.w into X register [Writes: X Index] [Flags: ZN]
	ldx $0F93.w		; AE 93 0F ; Load $0F93.w into X register [Writes: X Index] [Flags: ZN]
	ldx $0898.w		; AE 98 08 ; Load $0898.w into X register [Writes: X Index] [Flags: ZN]
	.db $B0, $98		; B0 98 ; Branch if carry set to $B0, $98 [Flow: branch]
	ora [$B1.b],Y		; 17 B1 ; OR accumulator with memory (long indexed) [$B1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	tsb $9BB0.w		; 0C B0 9B ; Test and set bits $9BB0.w [Reads: Accumulator] [Flags: Z]
	ora ($B1.b,S),Y		; 13 B1 ; OR accumulator (stack relative indirect indexed) ($B1.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $048C01.l,X		; FF 01 8C 04 ; Subtract with carry (long,X) $048C01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $1191.w		; AE 91 11 ; Load $1191.w into X register [Writes: X Index] [Flags: ZN]
	ldx $0497.w		; AE 97 04 ; Load $0497.w into X register [Writes: X Index] [Flags: ZN]
	lda $B1169B.l		; AF 9B 16 B1 ; Load long $B1169B.l into accumulator [Writes: Accumulator] [Flags: ZN]
	bit #$0A.b		; 89 0A ; Test bits #$0A.b with accumulator [Reads: Accumulator] [Flags: Z]
	sta $8F1589.l		; 8F 89 15 8F ; Store accumulator (long) $8F1589.l [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$15.b		; 09 15 ; Logical OR #$15.b with accumulator [Writes: Accumulator] [Flags: ZN]
	stx $18.b,Y		; 96 18 ; Store X register $18.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	cmp [$97.b]		; C7 97 ; Compare accumulator (long) [$97.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $97.b,X		; 15 97 ; OR accumulator with memory $97.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$15.b],Y		; 17 15 ; OR accumulator with memory (long indexed) [$15.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $150700.l,X		; FF 00 07 15 ; Subtract with carry (long,X) $150700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $8F1508.l		; 8F 08 15 8F ; Store accumulator (long) $8F1508.l [Reads: Accumulator]
	ora #$15.b		; 09 15 ; Logical OR #$15.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $0A.b		; 24 0A ; Test bits $0A.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	.db $10, $8F		; 10 8F ; Branch if plus to $10, $8F [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $9B81.w		; 0C 81 9B ; Test and set bits $9B81.w [Reads: Accumulator] [Flags: Z]
	ora [$81.b]		; 07 81 ; OR accumulator with memory (long) [$81.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	trb $81.b		; 14 81 ; Test and reset bits $81.b [Reads: Accumulator] [Flags: Z]
	sbc $070B00.l,X		; FF 00 0B 07 ; Subtract with carry (long,X) $070B00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($0E.b,S),Y		; 93 0E ; Store accumulator (stack relative indirect indexed) ($0E.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	.db $10, $93		; 10 93 ; Branch if plus to $10, $93 [Flow: branch]
	asl $07.b,X		; 16 07 ; Arithmetic shift left $07.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sta ($07.b,S),Y		; 93 07 ; Store accumulator (stack relative indirect indexed) ($07.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ora $26.b,X		; 15 26 ; OR accumulator with memory $26.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $11.b		; 26 11 ; Rotate left $11.b [Reads: Direct Page] [Flags: ZNC]
	asl $7E.b		; 06 7E ; Arithmetic shift left $7E.b [Reads: Direct Page] [Flags: ZNC]
	ora ($12.b),Y		; 11 12 ; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $17.b		; 26 17 ; Rotate left $17.b [Reads: Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rol $17.b		; 26 17 ; Rotate left $17.b [Reads: Direct Page] [Flags: ZNC]
	ora [$26.b],Y		; 17 26 ; OR accumulator with memory (long indexed) [$26.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $160A00.l,X		; FF 00 0A 16 ; Subtract with carry (long,X) $160A00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stx $0E.b		; 86 0E ; Store X register to $0E.b [Reads: X Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	stx $10.b		; 86 10 ; Store X register to $10.b [Reads: X Index]
	asl $86.b,X		; 16 86 ; Arithmetic shift left $86.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $18.b,X		; 16 18 ; Arithmetic shift left $18.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	stx $FF.b		; 86 FF ; Store X register to $FF.b [Reads: X Index]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($06.b,S),Y		; 13 06 ; OR accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $8E.b,X		; 16 8E ; Arithmetic shift left $8E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $19.b		; 06 19 ; Arithmetic shift left $19.b [Reads: Direct Page] [Flags: ZNC]
	stx $160A.w		; 8E 0A 16 ; Store X register to $160A.w [Reads: X Index]
	stx $190A.w		; 8E 0A 19 ; Store X register to $190A.w [Reads: X Index]
	stx $0710.w		; 8E 10 07 ; Store X register to $0710.w [Reads: X Index]
	ora ($15.b,S),Y		; 13 15 ; OR accumulator (stack relative indirect indexed) ($15.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $8A.b,X		; 16 8A ; Arithmetic shift left $8A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora [$16.b],Y		; 17 16 ; OR accumulator with memory (long indexed) [$16.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1C15.w,Y		; 19 15 1C ; OR accumulator with memory $1C15.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $8A16.w,Y		; 19 16 8A ; OR accumulator with memory $8A16.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc [$0B.b]		; E7 0B ; Subtract with carry (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $070400.l,X		; FF 00 04 07 ; Subtract with carry (long,X) $070400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $1004.w,X		; 1E 04 10 ; Arithmetic shift left $1004.w,X [Reads: X Index] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	tsb $8A03.w		; 0C 03 8A ; Test and set bits $8A03.w [Reads: Accumulator] [Flags: Z]
	trb $07.b		; 14 07 ; Test and reset bits $07.b [Reads: Accumulator] [Flags: Z]
	sty $1C.b		; 84 1C ; Store Y register to $1C.b [Reads: Y Index]
	ora $83.b,S		; 03 83 ; OR accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $830C.w		; 1C 0C 83 ; Test and reset bits $830C.w [Reads: Accumulator] [Flags: Z]
	sbc $141500.l,X		; FF 00 15 14 ; Subtract with carry (long,X) $141500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($15.b,S),Y		; 53 15 ; XOR accumulator (stack relative indirect indexed) ($15.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$53.b],Y		; 17 53 ; OR accumulator with memory (long indexed) [$53.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1A.b,X		; 15 1A ; OR accumulator with memory $1A.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($18.b,S),Y		; 53 18 ; XOR accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor ($18.b,S),Y		; 53 18 ; XOR accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$53.b],Y		; 17 53 ; OR accumulator with memory (long indexed) [$53.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $53.b		; 14 53 ; Test and reset bits $53.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc [$19.b],Y		; F7 19 ; Subtract with carry (long indexed) [$19.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $07.b,S		; E3 07 ; Subtract stack-relative $07.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $08.b,S		; E3 08 ; Subtract stack-relative $08.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora [$E3.b]		; 07 E3 ; OR accumulator with memory (long) [$E3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $1605.w,X		; 1E 05 16 ; Arithmetic shift left $1605.w,X [Reads: X Index] [Flags: ZNC]
	and $05.b,S		; 23 05 ; AND accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0A23.w,Y		; 19 23 0A ; OR accumulator with memory $0A23.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $23.b,X		; 16 23 ; Arithmetic shift left $23.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $1823.w,Y		; 19 23 18 ; OR accumulator with memory $1823.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $8F051C.l		; 8F 1C 05 8F ; Store accumulator (long) $8F051C.l [Reads: Accumulator]
	sbc $041500.l,X		; FF 00 15 04 ; Subtract with carry (long,X) $041500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0915.w,Y		; 99 15 09 ; Store accumulator to $0915.w,Y [Reads: Accumulator, Y Index]
	sta $0616.w,Y		; 99 16 06 ; Store accumulator to $0616.w,Y [Reads: Accumulator, Y Index]
	ora $17.b,X		; 15 17 ; OR accumulator with memory $17.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$D1.b]		; 07 D1 ; OR accumulator with memory (long) [$D1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$0A.b],Y		; 17 0A ; OR accumulator with memory (long indexed) [$0A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0A19.w,Y		; 99 19 0A ; Store accumulator to $0A19.w,Y [Reads: Accumulator, Y Index]
	sta $041B.w,Y		; 99 1B 04 ; Store accumulator to $041B.w,Y [Reads: Accumulator, Y Index]
	sta $091B.w,Y		; 99 1B 09 ; Store accumulator to $091B.w,Y [Reads: Accumulator, Y Index]
	sta $00FF.w,Y		; 99 FF 00 ; Store accumulator to $00FF.w,Y [Reads: Accumulator, Y Index]
	ora $07.b,X		; 15 07 ; OR accumulator with memory $07.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sbc $050600.l,X		; FF 00 06 05 ; Subtract with carry (long,X) $050600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $00FE.w		; 6D FE 00 ; Add $00FE.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cpx $06.b		; E4 06 ; Compare $06.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	ora [$6F.b],Y		; 17 6F ; OR accumulator with memory (long indexed) [$6F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $18.b		; 06 18 ; Arithmetic shift left $18.b [Reads: Direct Page] [Flags: ZNC]
	adc $6D1109.l		; 6F 09 11 6D ; Add with carry (long) $6D1109.l [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $146D.w		; 0D 6D 14 ; Logical OR $146D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$6D.b]		; 07 6D ; OR accumulator with memory (long) [$6D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $0D.b		; 14 0D ; Test and reset bits $0D.b [Reads: Accumulator] [Flags: Z]
	adc $6F1214.l		; 6F 14 12 6F ; Add with carry (long) $6F1214.l [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $1C6D.w		; 0D 6D 1C ; Logical OR $1C6D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $131C.w		; 6D 1C 13 ; Add $131C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $00FF.w		; 6D FF 00 ; Add $00FF.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	trb $06.b		; 14 06 ; Test and reset bits $06.b [Reads: Accumulator] [Flags: Z]
	adc $0814.w		; 6D 14 08 ; Add $0814.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $1114.w		; 6D 14 11 ; Add $1114.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $1214.w		; 6D 14 12 ; Add $1214.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $1115.w		; 6D 15 11 ; Add $1115.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $1215.w		; 6D 15 12 ; Add $1215.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $0918.w		; 6D 18 09 ; Add $0918.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $00FF.w		; 6D FF 00 ; Add $00FF.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	trb $15.b		; 14 15 ; Test and reset bits $15.b [Reads: Accumulator] [Flags: Z]
	sta [$14.b],Y		; 97 14 ; Store accumulator (long indexed) [$14.b],Y [Reads: Accumulator, Direct Page, Y Index]
	asl $97.b,X		; 16 97 ; Arithmetic shift left $97.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $17.b		; 14 17 ; Test and reset bits $17.b [Reads: Accumulator] [Flags: Z]
	sta [$14.b],Y		; 97 14 ; Store accumulator (long indexed) [$14.b],Y [Reads: Accumulator, Direct Page, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta [$14.b],Y		; 97 14 ; Store accumulator (long indexed) [$14.b],Y [Reads: Accumulator, Direct Page, Y Index]
	ora $FF97.w,Y		; 19 97 FF ; OR accumulator with memory $FF97.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($C5.b,S),Y		; 13 C5 ; OR accumulator (stack relative indirect indexed) ($C5.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $1C.b		; 04 1C ; Test and set bits $1C.b [Reads: Accumulator] [Flags: Z]
	cmp $06.b		; C5 06 ; Compare $06.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $C7.b		; 05 C7 ; Logical OR $C7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$C5.b]		; 07 C5 ; OR accumulator with memory (long) [$C5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp [$0C.b]		; C7 0C ; Compare accumulator (long) [$0C.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tsb $FFD1.w		; 0C D1 FF ; Test and set bits $FFD1.w [Reads: Accumulator] [Flags: Z]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $C5.b,S		; 03 C5 ; OR accumulator with stack relative $C5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1A.b		; 05 1A ; Logical OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $06.b,S		; 23 06 ; AND accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $23.b		; 05 23 ; Logical OR $23.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $09.b		; 06 09 ; Arithmetic shift left $09.b [Reads: Direct Page] [Flags: ZNC]
	lda [$09.b]		; A7 09 ; Load accumulator (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $A7.b		; 04 A7 ; Test and set bits $A7.b [Reads: Accumulator] [Flags: Z]
	tsb $C50C.w		; 0C 0C C5 ; Test and set bits $C50C.w [Reads: Accumulator] [Flags: Z]
	ora [$06.b],Y		; 17 06 ; OR accumulator with memory (long indexed) [$06.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $1917.w		; 1C 17 19 ; Test and reset bits $1917.w [Reads: Accumulator] [Flags: Z]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: ZN]
	ora [$23.b]		; 07 23 ; OR accumulator with memory (long) [$23.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $9A.b,X		; 15 9A ; OR accumulator with memory $9A.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $2418.w,Y		; 19 18 24 ; OR accumulator with memory $2418.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	trb $FF80.w		; 1C 80 FF ; Test and reset bits $FF80.w [Reads: Accumulator] [Flags: Z]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$18.b],Y		; 17 18 ; OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($18.b,S),Y		; 13 18 ; OR accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($1B.b,S),Y		; 13 1B ; OR accumulator (stack relative indirect indexed) ($1B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsb $0618.w		; 0C 18 06 ; Test and set bits $0618.w [Reads: Accumulator] [Flags: Z]
	ora $050E5B.l		; 0F 5B 0E 05 ; OR accumulator with memory (long) $050E5B.l [Writes: Accumulator] [Flags: ZN]
	stx $16.b		; 86 16 ; Store X register to $16.b [Reads: X Index]
	tsb $86.b		; 04 86 ; Test and set bits $86.b [Reads: Accumulator] [Flags: Z]
	sbc $0A0600.l,X		; FF 00 06 0A ; Subtract with carry (long,X) $0A0600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($0A.b,X)		; 81 0A ; Store accumulator ($0A.b,X) [Reads: Accumulator, X Index, Direct Page]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta ($0D.b,X)		; 81 0D ; Store accumulator ($0D.b,X) [Reads: Accumulator, X Index, Direct Page]
	ora [$81.b]		; 07 81 ; OR accumulator with memory (long) [$81.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $181600.l,X		; FF 00 16 18 ; Subtract with carry (long,X) $181600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $E7.b,X		; 16 E7 ; Arithmetic shift left $E7.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $1E		; 10 1E ; Branch if plus to $10, $1E [Flow: branch]
	ora $08930F.l		; 0F 0F 93 08 ; OR accumulator with memory (long) $08930F.l [Writes: Accumulator] [Flags: ZN]
	ora $0C26.w		; 0D 26 0C ; Logical OR $0C26.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$26.b]		; 07 26 ; OR accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $2610.w		; 0C 10 26 ; Test and set bits $2610.w [Reads: Accumulator] [Flags: Z]
	ora $11260D.l		; 0F 0D 26 11 ; OR accumulator with memory (long) $11260D.l [Writes: Accumulator] [Flags: ZN]
	ora ($26.b,S),Y		; 13 26 ; OR accumulator (stack relative indirect indexed) ($26.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($0F.b,S),Y		; 13 0F ; OR accumulator (stack relative indirect indexed) ($0F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $0A0A.w,X		; 1E 0A 0A ; Arithmetic shift left $0A0A.w,X [Reads: X Index] [Flags: ZNC]
	trb $0717.w		; 1C 17 07 ; Test and reset bits $0717.w [Reads: Accumulator] [Flags: Z]
	and $17.b,S		; 23 17 ; AND accumulator with stack relative $17.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $E3.b,X		; 16 E3 ; Arithmetic shift left $E3.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $1A.b,S		; E3 1A ; Subtract stack-relative $1A.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora $23.b		; 05 23 ; Logical OR $23.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $1A.b,S		; 23 1A ; AND accumulator with stack relative $1A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$E3.b],Y		; 17 E3 ; OR accumulator with memory (long indexed) [$E3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $170500.l,X		; FF 00 05 17 ; Subtract with carry (long,X) $170500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $09.b		; 04 09 ; Test and set bits $09.b [Reads: Accumulator] [Flags: Z]
	sbc $05.b,S		; E3 05 ; Subtract stack-relative $05.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	asl $E3.b		; 06 E3 ; Arithmetic shift left $E3.b [Reads: Direct Page] [Flags: ZNC]
	ora [$08.b]		; 07 08 ; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $99.b		; 14 99 ; Test and reset bits $99.b [Reads: Accumulator] [Flags: Z]
	asl $1C.b		; 06 1C ; Arithmetic shift left $1C.b [Reads: Direct Page] [Flags: ZNC]
	sta $1608.w,Y		; 99 08 16 ; Store accumulator to $1608.w,Y [Reads: Accumulator, Y Index]
	sta $1908.w,Y		; 99 08 19 ; Store accumulator to $1908.w,Y [Reads: Accumulator, Y Index]
	sta $140B.w,Y		; 99 0B 14 ; Store accumulator to $140B.w,Y [Reads: Accumulator, Y Index]
	sta $1B0B.w,Y		; 99 0B 1B ; Store accumulator to $1B0B.w,Y [Reads: Accumulator, Y Index]
	sta $00FF.w,Y		; 99 FF 00 ; Store accumulator to $00FF.w,Y [Reads: Accumulator, Y Index]
	ora $07.b		; 05 07 ; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($FF.b,X)		; C1 FF ; Compare accumulator ($FF.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $160B.w,X		; 1E 0B 16 ; Arithmetic shift left $160B.w,X [Reads: X Index] [Flags: ZNC]
	asl $1505.w,X		; 1E 05 15 ; Arithmetic shift left $1505.w,X [Reads: X Index] [Flags: ZNC]
	rol $06.b		; 26 06 ; Rotate left $06.b [Reads: Direct Page] [Flags: ZNC]
	ora $26.b		; 05 26 ; Logical OR $26.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$03.b		; 09 03 ; Logical OR #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $0C.b		; 26 0C ; Rotate left $0C.b [Reads: Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rol $15.b		; 26 15 ; Rotate left $15.b [Reads: Direct Page] [Flags: ZNC]
	ora $26.b,S		; 03 26 ; OR accumulator with stack relative $26.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1B.b,X		; 15 1B ; OR accumulator with memory $1B.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $16.b		; 26 16 ; Rotate left $16.b [Reads: Direct Page] [Flags: ZNC]
	ora ($26.b,S),Y		; 13 26 ; OR accumulator (stack relative indirect indexed) ($26.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $26.b,S		; 03 26 ; OR accumulator with stack relative $26.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $2617.w,Y		; 19 17 26 ; OR accumulator with memory $2617.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $2609.w		; 1C 09 26 ; Test and reset bits $2609.w [Reads: Accumulator] [Flags: Z]
	sbc $0B0D00.l,X		; FF 00 0D 0B ; Subtract with carry (long,X) $0B0D00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $6E0F0D.l		; 6F 0D 0F 6E ; Add with carry (long) $6E0F0D.l [Writes: Accumulator] [Flags: ZVNC]
	ora $6F13.w		; 0D 13 6F ; Logical OR $6F13.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $6E10.w		; 0E 10 6E ; Arithmetic shift left $6E10.w [Flags: ZNC]
	ora $FF6E12.l		; 0F 12 6E FF ; OR accumulator with memory (long) $FF6E12.l [Writes: Accumulator] [Flags: ZN]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $54.b		; 06 54 ; Arithmetic shift left $54.b [Reads: Direct Page] [Flags: ZNC]
	ora [$09.b],Y		; 17 09 ; OR accumulator with memory (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $07,$19		; 54 19 07 ; Move block negative $07,$19 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $00,$FF		; 54 FF 00 ; Move block negative $00,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $101281.l		; 0F 81 12 10 ; OR accumulator with memory (long) $101281.l [Writes: Accumulator] [Flags: ZN]
	sta ($15.b,X)		; 81 15 ; Store accumulator ($15.b,X) [Reads: Accumulator, X Index, Direct Page]
	ora $19179A.l		; 0F 9A 17 19 ; OR accumulator with memory (long) $19179A.l [Writes: Accumulator] [Flags: ZN]
	.db $80, $18		; 80 18 ; Branch always to $80, $18 [Flow: branch]
	ora $8F.b,S		; 03 8F ; OR accumulator with stack relative $8F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $24.b		; 14 24 ; Test and reset bits $24.b [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $A7.b,X		; 16 A7 ; Arithmetic shift left $A7.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $160600.l,X		; FF 00 06 16 ; Subtract with carry (long,X) $160600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $1405.w,X		; 1E 05 14 ; Arithmetic shift left $1405.w,X [Reads: X Index] [Flags: ZNC]
	and ($05.b,X)		; 21 05 ; Logical AND ($05.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $09.b,S		; 23 09 ; AND accumulator with stack relative $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($8A.b,S),Y		; 13 8A ; OR accumulator (stack relative indirect indexed) ($8A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	trb $A7.b		; 14 A7 ; Test and reset bits $A7.b [Reads: Accumulator] [Flags: Z]
	trb $07.b		; 14 07 ; Test and reset bits $07.b [Reads: Accumulator] [Flags: Z]
	sta $A71418.l		; 8F 18 14 A7 ; Store accumulator (long) $A71418.l [Reads: Accumulator]
	ora $8016.w,Y		; 19 16 80 ; OR accumulator with memory $8016.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora [$C6.b],Y		; 17 C6 ; OR accumulator with memory (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $24.b		; 14 24 ; Test and reset bits $24.b [Reads: Accumulator] [Flags: Z]
	trb $A71B.w		; 1C 1B A7 ; Test and reset bits $A71B.w [Reads: Accumulator] [Flags: Z]
	sbc $F70200.l,X		; FF 00 02 F7 ; Subtract with carry (long,X) $F70200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($0A.b)		; 12 0A ; OR accumulator with memory (indirect) ($0A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta ($0A.b,X)		; 81 0A ; Store accumulator ($0A.b,X) [Reads: Accumulator, X Index, Direct Page]
	trb $81.b		; 14 81 ; Test and reset bits $81.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $C5.b,X		; 15 C5 ; OR accumulator with memory $C5.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $10E1.w		; 0D E1 10 ; Logical OR $10E1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($14.b,S),Y		; 13 14 ; OR accumulator (stack relative indirect indexed) ($14.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora ($FE.b,S),Y		; 13 FE ; OR accumulator (stack relative indirect indexed) ($FE.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($14.b),Y		; 11 14 ; OR accumulator with memory ($14.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$81.b		; 09 81 ; Logical OR #$81.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$12.b],Y		; 17 12 ; OR accumulator with memory (long indexed) [$12.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($1E.b,X)		; 81 1E ; Store accumulator ($1E.b,X) [Reads: Accumulator, X Index, Direct Page]
	nop		; EA ; No operation
	ora ($1E.b,S),Y		; 13 1E ; OR accumulator (stack relative indirect indexed) ($1E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	pea $FF13.w		; F4 13 FF ; Push absolute address $FF13.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and ($06.b,X)		; 21 06 ; Logical AND ($06.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $A7.b		; 05 A7 ; Logical OR $A7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$8F.b],Y		; 17 8F ; OR accumulator with memory (long indexed) [$8F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $A70C09.l		; 8F 09 0C A7 ; Store accumulator (long) $A70C09.l [Reads: Accumulator]
	trb $15.b		; 14 15 ; Test and reset bits $15.b [Reads: Accumulator] [Flags: Z]
	.db $80, $17		; 80 17 ; Branch always to $80, $17 [Flow: branch]
	ora [$A7.b],Y		; 17 A7 ; OR accumulator with memory (long indexed) [$A7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $2413.w,Y		; 19 13 24 ; OR accumulator with memory $2413.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora [$C6.b],Y		; 17 C6 ; OR accumulator with memory (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $2315.w		; 1C 15 23 ; Test and reset bits $2315.w [Reads: Accumulator] [Flags: Z]
	sbc $0C0600.l,X		; FF 00 06 0C ; Subtract with carry (long,X) $0C0600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($0A.b,X)		; 81 0A ; Store accumulator ($0A.b,X) [Reads: Accumulator, X Index, Direct Page]
	ora [$81.b]		; 07 81 ; OR accumulator with memory (long) [$81.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $9A0C.w		; 0C 0C 9A ; Test and set bits $9A0C.w [Reads: Accumulator] [Flags: Z]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	cmp $14.b		; C5 14 ; Compare $14.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	asl $9A.b		; 06 9A ; Arithmetic shift left $9A.b [Reads: Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	tsb $1A9A.w		; 0C 9A 1A ; Test and set bits $1A9A.w [Reads: Accumulator] [Flags: Z]
	ora [$81.b]		; 07 81 ; OR accumulator with memory (long) [$81.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $041800.l,X		; FF 00 18 04 ; Subtract with carry (long,X) $041800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $1509EF.l		; 0F EF 09 15 ; OR accumulator with memory (long) $1509EF.l [Writes: Accumulator] [Flags: ZN]
	ora $8B.b		; 05 8B ; Logical OR $8B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $E400.w,X		; FE 00 E4 ; Increment memory $E400.w,X [Reads: X Index] [Flags: ZN]
	ora $09.b,X		; 15 09 ; OR accumulator with memory $09.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($16.b,S),Y		; 13 16 ; OR accumulator (stack relative indirect indexed) ($16.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$8A.b],Y		; 17 8A ; OR accumulator with memory (long indexed) [$8A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	rol $1A.b		; 26 1A ; Rotate left $1A.b [Reads: Direct Page] [Flags: ZNC]
	ora [$8A.b],Y		; 17 8A ; OR accumulator with memory (long indexed) [$8A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $0E1100.l,X		; FF 00 11 0E ; Subtract with carry (long,X) $0E1100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stx $1111.w		; 8E 11 11 ; Store X register to $1111.w [Reads: X Index]
	stx $0414.w		; 8E 14 04 ; Store X register to $0414.w [Reads: X Index]
	cmp $14.b		; C5 14 ; Compare $14.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $14.b		; 24 14 ; Test bits $14.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $24.b,X		; 15 24 ; OR accumulator with memory $24.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $1B.b		; 14 1B ; Test and reset bits $1B.b [Reads: Accumulator] [Flags: Z]
	cmp $FF.b		; C5 FF ; Compare $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $8A.b,S		; 03 8A ; OR accumulator with stack relative $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$07.b		; 09 07 ; Logical OR #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $0D.b,S		; 23 0D ; AND accumulator with stack relative $0D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $0F8A.w		; 0C 8A 0F ; Test and set bits $0F8A.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $13.b		; 24 13 ; Test bits $13.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $8A.b,S		; 03 8A ; OR accumulator with stack relative $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $07.b,X		; 16 07 ; Arithmetic shift left $07.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $1A.b		; 24 1A ; Test bits $1A.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $FF8A.w		; 0C 8A FF ; Test and set bits $FF8A.w [Reads: Accumulator] [Flags: Z]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$26.b		; 09 26 ; Logical OR #$26.b with accumulator [Writes: Accumulator] [Flags: ZN]
	trb $0A.b		; 14 0A ; Test and reset bits $0A.b [Reads: Accumulator] [Flags: Z]
	bit $14.b		; 24 14 ; Test bits $14.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($24.b)		; 12 24 ; OR accumulator with memory (indirect) ($24.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $051700.l,X		; FF 00 17 05 ; Subtract with carry (long,X) $051700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $0A19.w,X		; 1E 19 0A ; Arithmetic shift left $0A19.w,X [Reads: X Index] [Flags: ZNC]
	asl $1707.w,X		; 1E 07 17 ; Arithmetic shift left $1707.w,X [Reads: X Index] [Flags: ZNC]
	ora ($FE.b,S),Y		; 13 FE ; OR accumulator (stack relative indirect indexed) ($FE.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$18.b]		; 07 18 ; OR accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($08.b,S),Y		; 13 08 ; OR accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $C5.b,X		; 15 C5 ; OR accumulator with memory $C5.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $0A.b		; C5 0A ; Compare $0A.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tsb $8A.b		; 04 8A ; Test and set bits $8A.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $FB.b,X		; 15 FB ; OR accumulator with memory $FB.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $13.b,X		; 16 13 ; Arithmetic shift left $13.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jmp $5B1C16.l		; 5C 16 1C 5B ; Jump long to $5B1C16.l [Flow: jump]
	asl $09.b,X		; 16 09 ; Arithmetic shift left $09.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	ora [$07.b],Y		; 17 07 ; OR accumulator with memory (long indexed) [$07.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($17.b),Y		; D1 17 ; Compare accumulator ($17.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $FF.b,X		; 15 FF ; OR accumulator with memory $FF.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1E.b		; 06 1E ; Arithmetic shift left $1E.b [Reads: Direct Page] [Flags: ZNC]
	tsb $19.b		; 04 19 ; Test and set bits $19.b [Reads: Accumulator] [Flags: Z]
	sta ($0B.b),Y		; 91 0B ; Store accumulator ($0B.b),Y [Reads: Accumulator, Direct Page, Y Index]
	asl $91.b,X		; 16 91 ; Arithmetic shift left $91.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($05.b)		; 12 05 ; OR accumulator with memory (indirect) ($05.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0E12.w,X		; 9D 12 0E ; Store accumulator to $0E12.w,X [Reads: Accumulator, X Index]
	sta $F012.w,X		; 9D 12 F0 ; Store accumulator to $F012.w,X [Reads: Accumulator, X Index]
	ora [$12.b]		; 07 12 ; OR accumulator with memory (long) [$12.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($9D.b)		; 12 9D ; OR accumulator with memory (indirect) ($9D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($15.b)		; 12 15 ; OR accumulator with memory (indirect) ($15.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0716.w,X		; 9D 16 07 ; Store accumulator to $0716.w,X [Reads: Accumulator, X Index]
	bit $18.b		; 24 18 ; Test bits $18.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($24.b),Y		; 11 24 ; OR accumulator with memory ($24.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $E400.w,X		; FE 00 E4 ; Increment memory $E400.w,X [Reads: X Index] [Flags: ZN]
	ora $2415.w,Y		; 19 15 24 ; OR accumulator with memory $2415.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	asl $0C.b,X		; 16 0C ; Arithmetic shift left $0C.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sta ($15.b),Y		; 91 15 ; Store accumulator ($15.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ora ($04.b,S),Y		; 13 04 ; OR accumulator (stack relative indirect indexed) ($04.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$04.b],Y		; 17 04 ; OR accumulator with memory (long indexed) [$04.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($18.b),Y		; 91 18 ; Store accumulator ($18.b),Y [Reads: Accumulator, Direct Page, Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp ($FF.b),Y		; D1 FF ; Compare accumulator ($FF.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$41.b		; 09 41 ; Logical OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $954169.l		; EF 69 41 95 ; Subtract with carry (long) $954169.l [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $1B98.w		; 1C 98 1B ; Test and reset bits $1B98.w [Reads: Accumulator] [Flags: Z]
	eor $9A.b,S		; 43 9A ; Exclusive OR accumulator with stack relative $9A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$46.b],Y		; 17 46 ; OR accumulator with memory (long indexed) [$46.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora $FF46.w,Y		; 19 46 FF ; OR accumulator with memory $FF46.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($6D.b),Y		; 11 6D ; OR accumulator with memory ($6D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc $0F0D.w		; 6D 0D 0F ; Add $0F0D.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $0615.w		; 6D 15 06 ; Add $0615.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $00FF.w		; 6D FF 00 ; Add $00FF.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	asl $12.b		; 06 12 ; Arithmetic shift left $12.b [Reads: Direct Page] [Flags: ZNC]
	ror $1306.w		; 6E 06 13 ; Rotate right $1306.w [Flags: ZNC]
	ror $1406.w		; 6E 06 14 ; Rotate right $1406.w [Flags: ZNC]
	ror $1207.w		; 6E 07 12 ; Rotate right $1207.w [Flags: ZNC]
	ror $1307.w		; 6E 07 13 ; Rotate right $1307.w [Flags: ZNC]
	ror $1407.w		; 6E 07 14 ; Rotate right $1407.w [Flags: ZNC]
	ror $00FF.w		; 6E FF 00 ; Rotate right $00FF.w [Flags: ZNC]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: ZNC]
	sty $18.b		; 84 18 ; Store Y register to $18.b [Reads: Y Index]
	sbc [$14.b],Y		; F7 14 ; Subtract with carry (long indexed) [$14.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $090600.l,X		; FF 00 06 09 ; Subtract with carry (long,X) $090600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($08.b,S),Y		; 93 08 ; Store accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ora $93.b		; 05 93 ; Logical OR $93.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	bit $08.b		; 24 08 ; Test bits $08.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $24.b,S		; 03 24 ; OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$8F.b],Y		; 17 8F ; OR accumulator with memory (long indexed) [$8F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $2408.w		; 0C 08 24 ; Test and set bits $2408.w [Reads: Accumulator] [Flags: Z]
	ora $152317.l		; 0F 17 23 15 ; OR accumulator with memory (long) $152317.l [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $18.b,X		; 16 18 ; Arithmetic shift left $18.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $06B7.w,Y		; 19 B7 06 ; OR accumulator with memory $06B7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $A6.b		; 06 A6 ; Arithmetic shift left $A6.b [Reads: Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $A5.b		; 04 A5 ; Test and set bits $A5.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda [$0B.b]		; A7 0B ; Load accumulator (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$D1.b],Y		; 17 D1 ; OR accumulator with memory (long indexed) [$D1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $A518.w		; 0C 18 A5 ; Test and set bits $A518.w [Reads: Accumulator] [Flags: Z]
	tsb $A51A.w		; 0C 1A A5 ; Test and set bits $A51A.w [Reads: Accumulator] [Flags: Z]
	ora ($18.b),Y		; 11 18 ; OR accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $18.b		; A5 18 ; Load $18.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $8F.b,X		; 16 8F ; Arithmetic shift left $8F.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $1CA6.w,Y		; 19 A6 1C ; OR accumulator with memory $1CA6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$A6.b]		; 07 A6 ; OR accumulator with memory (long) [$A6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $160500.l,X		; FF 00 05 16 ; Subtract with carry (long,X) $160500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($06.b,X)		; 81 06 ; Store accumulator ($06.b,X) [Reads: Accumulator, X Index, Direct Page]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora ($1A.b),Y		; 11 1A ; OR accumulator with memory ($1A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$81.b		; 09 81 ; Logical OR #$81.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora ($1B.b),Y		; 11 1B ; OR accumulator with memory ($1B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($81.b),Y		; 11 81 ; OR accumulator with memory ($81.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0B.b		; 05 0B ; Logical OR $0B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $18.b		; 04 18 ; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	tsb $1809.w		; 0C 09 18 ; Test and set bits $1809.w [Reads: Accumulator] [Flags: Z]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZNC]
	cmp ($08.b),Y		; D1 08 ; Compare accumulator ($08.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	ora [$8B.b]		; 07 8B ; OR accumulator with memory (long) [$8B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$8B.b],Y		; 17 8B ; OR accumulator with memory (long indexed) [$8B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1009EF.l		; 0F EF 09 10 ; OR accumulator with memory (long) $1009EF.l [Writes: Accumulator] [Flags: ZN]
	ora [$8B.b],Y		; 17 8B ; OR accumulator with memory (long indexed) [$8B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $16.b		; 14 16 ; Test and reset bits $16.b [Reads: Accumulator] [Flags: Z]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	asl $09.b,X		; 16 09 ; Arithmetic shift left $09.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $17.b		; 24 17 ; Test bits $17.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $18.b,S		; 23 18 ; AND accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$24.b]		; 07 24 ; OR accumulator with memory (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sbc $140700.l,X		; FF 00 07 14 ; Subtract with carry (long,X) $140700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $0808.w		; 1C 08 08 ; Test and reset bits $0808.w [Reads: Accumulator] [Flags: Z]
	ora ($08.b,S),Y		; 13 08 ; OR accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($FF.b,S),Y		; 13 FF ; OR accumulator (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$84.b]		; 07 84 ; OR accumulator with memory (long) [$84.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $17.b		; 05 17 ; Logical OR $17.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $06.b,X		; 15 06 ; OR accumulator with memory $06.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $08.b,X		; 15 08 ; OR accumulator with memory $08.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $83.b		; 04 83 ; Test and set bits $83.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta $18.b,S		; 83 18 ; Store accumulator (stack relative) $18.b,S [Reads: Accumulator, Stack Pointer]
	ora $0B1924.l		; 0F 24 19 0B ; OR accumulator with memory (long) $0B1924.l [Writes: Accumulator] [Flags: ZN]
	bit $19.b		; 24 19 ; Test bits $19.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($24.b)		; 12 24 ; OR accumulator with memory (indirect) ($24.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $151100.l,X		; FF 00 11 15 ; Subtract with carry (long,X) $151100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($12.b,S),Y		; 93 12 ; Store accumulator (stack relative indirect indexed) ($12.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ora $0593.w,Y		; 19 93 05 ; OR accumulator with memory $0593.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $13.b,X		; 15 13 ; OR accumulator with memory $13.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1A.b		; 05 1A ; Logical OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($06.b,S),Y		; 13 06 ; OR accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$13.b],Y		; 17 13 ; OR accumulator with memory (long indexed) [$13.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($15.b,S),Y		; 13 15 ; OR accumulator (stack relative indirect indexed) ($15.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $13.b		; 14 13 ; Test and reset bits $13.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($8A.b,S),Y		; 13 8A ; OR accumulator (stack relative indirect indexed) ($8A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $0E0E00.l,X		; FF 00 0E 0E ; Subtract with carry (long,X) $0E0E00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$FF.b		; 09 FF ; Logical OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $8F.b		; 14 8F ; Test and reset bits $8F.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $8F.b,X		; 16 8F ; Arithmetic shift left $8F.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $7E0709.l		; 8F 09 07 7E ; Store accumulator (long) $7E0709.l [Reads: Accumulator]
	sbc $170600.l,X		; FF 00 06 17 ; Subtract with carry (long,X) $170600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $08.b,S		; E3 08 ; Subtract stack-relative $08.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $E3.b		; 14 E3 ; Test and reset bits $E3.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	brk $8E.b		; 00 8E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$42.b],Y		; 17 42 ; OR accumulator with memory (long indexed) [$42.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $90, $18		; 90 18 ; Branch if carry clear to $90, $18 [Flow: branch]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sta ($17.b)		; 92 17 ; Store accumulator (indirect) ($17.b) [Reads: Accumulator, Direct Page]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sbc $0E0201.l,X		; FF 01 02 0E ; Subtract with carry (long,X) $0E0201.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $2997.w		; EE 97 29 ; Increment $2997.w [Flags: ZN]
	eor ($97.b,X)		; 41 97 ; Exclusive OR accumulator with memory ($97.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $41.b,X		; 56 41 ; Logical shift right $41.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $078D00.l,X		; FF 00 8D 07 ; Subtract with carry (long,X) $078D00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $42, $8F		; 42 8F ; Reserved instruction
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sta ($07.b)		; 92 07 ; Store accumulator (indirect) ($07.b) [Reads: Accumulator, Direct Page]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sbc $170700.l,X		; FF 00 07 17 ; Subtract with carry (long,X) $170700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $1C09.w		; 4E 09 1C ; Logical shift right $1C09.w [Flags: ZNC]
	adc ($0C.b,X)		; 61 0C ; Add with carry ($0C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora [$4F.b],Y		; 17 4F ; OR accumulator with memory (long indexed) [$4F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $4F1A.w		; 0C 1A 4F ; Test and set bits $4F1A.w [Reads: Accumulator] [Flags: Z]
	asl $6113.w		; 0E 13 61 ; Arithmetic shift left $6113.w [Flags: ZNC]
	ora $05.b,X		; 15 05 ; OR accumulator with memory $05.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $0B16.w		; 4E 16 0B ; Logical shift right $0B16.w [Flags: ZNC]
	lsr $1A17.w		; 4E 17 1A ; Logical shift right $1A17.w [Flags: ZNC]
	lsr $0719.w		; 4E 19 07 ; Logical shift right $0719.w [Flags: ZNC]
	adc ($1A.b,X)		; 61 1A ; Add with carry ($1A.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsb $4E.b		; 04 4E ; Test and set bits $4E.b [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lsr $1B1A.w		; 4E 1A 1B ; Logical shift right $1B1A.w [Flags: ZNC]
	adc ($1B.b,X)		; 61 1B ; Add with carry ($1B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lsr $00FF.w		; 4E FF 00 ; Logical shift right $00FF.w [Flags: ZNC]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0E81.w		; 0C 81 0E ; Test and set bits $0E81.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $0E.b		; C5 0E ; Compare $0E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $100F7E.l		; 0F 7E 0F 10 ; OR accumulator with memory (long) $100F7E.l [Writes: Accumulator] [Flags: ZN]
	sta ($14.b,X)		; 81 14 ; Store accumulator ($14.b,X) [Reads: Accumulator, X Index, Direct Page]
	ora ($9A.b)		; 12 9A ; OR accumulator with memory (indirect) ($9A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0F.b,X		; 15 0F ; OR accumulator with memory $0F.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($17.b,X)		; 81 17 ; Store accumulator ($17.b,X) [Reads: Accumulator, X Index, Direct Page]
	tsb $FF9A.w		; 0C 9A FF ; Test and set bits $FF9A.w [Reads: Accumulator] [Flags: Z]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1573.w		; 0E 73 15 ; Arithmetic shift left $1573.w [Flags: ZNC]
	trb $4B.b		; 14 4B ; Test and reset bits $4B.b [Reads: Accumulator] [Flags: Z]
	asl $0D.b,X		; 16 0D ; Arithmetic shift left $0D.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sbc $EB0500.l,X		; FF 00 05 EB ; Subtract with carry (long,X) $EB0500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $9307.w,Y		; 19 07 93 ; OR accumulator with memory $9307.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $9317.w,Y		; 19 17 93 ; OR accumulator with memory $9317.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $07.b		; 04 07 ; Test and set bits $07.b [Reads: Accumulator] [Flags: Z]
	ora ($05.b,S),Y		; 13 05 ; OR accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	rol $06.b		; 26 06 ; Rotate left $06.b [Reads: Direct Page] [Flags: ZNC]
	ora $13.b,S		; 03 13 ; OR accumulator with stack relative $13.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: ZNC]
	ora ($0F.b,S),Y		; 13 0F ; OR accumulator (stack relative indirect indexed) ($0F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $131109.l		; EF 09 11 13 ; Subtract with carry (long) $131109.l [Writes: Accumulator] [Flags: ZVNC]
	rol $12.b		; 26 12 ; Rotate left $12.b [Reads: Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $26.b,S		; 03 26 ; OR accumulator with stack relative $26.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $8013.w		; 1C 13 80 ; Test and reset bits $8013.w [Reads: Accumulator] [Flags: Z]
	trb $2619.w		; 1C 19 26 ; Test and reset bits $2619.w [Reads: Accumulator] [Flags: Z]
	sbc $080400.l,X		; FF 00 04 08 ; Subtract with carry (long,X) $080400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($04.b),Y		; D1 04 ; Compare accumulator ($04.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	tsb $0523.w		; 0C 23 05 ; Test and set bits $0523.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$04.b]		; 07 04 ; OR accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$0C.b]		; A7 0C ; Load accumulator (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $A7.b,S		; 03 A7 ; OR accumulator with stack relative $A7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $8B0C.w		; 0C 0C 8B ; Test and set bits $8B0C.w [Reads: Accumulator] [Flags: Z]
	ora $1409EF.l		; 0F EF 09 14 ; OR accumulator with memory (long) $1409EF.l [Writes: Accumulator] [Flags: ZN]
	ora $8B.b		; 05 8B ; Logical OR $8B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $0A.b		; 14 0A ; Test and reset bits $0A.b [Reads: Accumulator] [Flags: Z]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	trb $17.b		; 14 17 ; Test and reset bits $17.b [Reads: Accumulator] [Flags: Z]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	trb $19.b		; 14 19 ; Test and reset bits $19.b [Reads: Accumulator] [Flags: Z]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$17.b]		; A7 17 ; Load accumulator (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($8B.b,S),Y		; 13 8B ; OR accumulator (stack relative indirect indexed) ($8B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$24.b]		; 07 24 ; OR accumulator with memory (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $18.b		; 24 18 ; Test bits $18.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	trb $00FF.w		; 1C FF 00 ; Test and reset bits $00FF.w [Reads: Accumulator] [Flags: Z]
	trb $0C.b		; 14 0C ; Test and reset bits $0C.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $06.b,X		; 16 06 ; Arithmetic shift left $06.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sta ($04.b,S),Y		; 93 04 ; Store accumulator (stack relative indirect indexed) ($04.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	trb $13.b		; 14 13 ; Test and reset bits $13.b [Reads: Accumulator] [Flags: Z]
	asl $16.b		; 06 16 ; Arithmetic shift left $16.b [Reads: Direct Page] [Flags: ZNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $0B.b		; 04 0B ; Test and set bits $0B.b [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	rol $19.b		; 26 19 ; Rotate left $19.b [Reads: Direct Page] [Flags: ZNC]
	asl $26.b,X		; 16 26 ; Arithmetic shift left $26.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$18.b]		; 07 18 ; OR accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $08.b,X		; 16 08 ; Arithmetic shift left $08.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $8F9314.l		; 8F 14 93 8F ; Store accumulator (long) $8F9314.l [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta ($8A.b,S),Y		; 93 8A ; Store accumulator (stack relative indirect indexed) ($8A.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $80, $8D		; 80 8D ; Branch always to $80, $8D [Flow: branch]
	ora $8A.b,X		; 15 8A ; OR accumulator with memory $8A.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $5B05.w		; 8E 05 5B ; Store X register to $5B05.w [Reads: X Index]
	sta ($1A.b,S),Y		; 93 1A ; Store accumulator (stack relative indirect indexed) ($1A.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	cmp ($14.b),Y		; D1 14 ; Compare accumulator ($14.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	ora [$8B.b],Y		; 17 8B ; OR accumulator with memory (long indexed) [$8B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $15.b,X		; 95 15 ; Store accumulator to $15.b,X [Reads: Accumulator, X Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $1A.b,X		; 95 1A ; Store accumulator to $1A.b,X [Reads: Accumulator, X Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sbc $171600.l,X		; FF 00 16 17 ; Subtract with carry (long,X) $171600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($FF.b)		; 92 FF ; Store accumulator (indirect) ($FF.b) [Reads: Accumulator, Direct Page]
	ora ($8C.b,X)		; 01 8C ; Logical OR ($8C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$1E.b],Y		; 17 1E ; OR accumulator with memory (long indexed) [$1E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($18.b,S),Y		; 93 18 ; Store accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	asl $1795.w,X		; 1E 95 17 ; Arithmetic shift left $1795.w,X [Reads: X Index] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	asl $83.b,X		; 16 83 ; Arithmetic shift left $83.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora $8E84.w,Y		; 19 84 8E ; OR accumulator with memory $8E84.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $8A.b		; 14 8A ; Test and reset bits $8A.b [Reads: Accumulator] [Flags: Z]
	.db $90, $1B		; 90 1B ; Branch if carry clear to $90, $1B [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($17.b),Y		; 91 17 ; Store accumulator ($17.b),Y [Reads: Accumulator, Direct Page, Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta ($14.b)		; 92 14 ; Store accumulator (indirect) ($14.b) [Reads: Accumulator, Direct Page]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $0B0200.l,X		; FF 00 02 0B ; Subtract with carry (long,X) $0B0200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	asl $6905.w		; 0E 05 69 ; Arithmetic shift left $6905.w [Flags: ZNC]
	asl $690E.w		; 0E 0E 69 ; Arithmetic shift left $690E.w [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$E3.b],Y		; 17 E3 ; OR accumulator with memory (long indexed) [$E3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$A7.b]		; 07 A7 ; OR accumulator with memory (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZNC]
	adc ($08.b,X)		; 61 08 ; Add with carry ($08.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $A7.b,S		; 03 A7 ; OR accumulator with stack relative $A7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $A6.b,X		; 15 A6 ; OR accumulator with memory $A6.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$A7.b],Y		; 17 A7 ; OR accumulator with memory (long indexed) [$A7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $08A5.w,Y		; 19 A5 08 ; OR accumulator with memory $08A5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	lda [$0B.b]		; A7 0B ; Load accumulator (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$A7.b]		; 07 A7 ; OR accumulator with memory (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $04.b,X		; 15 04 ; OR accumulator with memory $04.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($15.b,X)		; 61 15 ; Add with carry ($15.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $A5.b		; 04 A5 ; Test and set bits $A5.b [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc ($FF.b,X)		; 61 FF ; Add with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $1C.b		; 05 1C ; Logical OR $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $0B.b		; C5 0B ; Compare $0B.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora ($C5.b,S),Y		; 13 C5 ; OR accumulator (stack relative indirect indexed) ($C5.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $17.b		; 14 17 ; Test and reset bits $17.b [Reads: Accumulator] [Flags: Z]
	adc $0818.w,X		; 7D 18 08 ; Add $0818.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $00FF.w,X		; 7E FF 00 ; Rotate right $00FF.w,X [Reads: X Index] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	tsb $24.b		; 04 24 ; Test and set bits $24.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $1B.b		; 24 1B ; Test bits $1B.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc ($41.b,S),Y		; 73 41 ; Add with carry (stack relative indirect indexed) ($41.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $2C0E00.l,X		; FF 00 0E 2C ; Subtract with carry (long,X) $2C0E00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $42, $12		; 42 12 ; Reserved instruction
	ora $124B.w		; 0D 4B 12 ; Logical OR $124B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($4B.b)		; 12 4B ; OR accumulator with memory (indirect) ($4B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $6C4801.l,X		; FF 01 48 6C ; Subtract with carry (long,X) $6C4801.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($8D.b,X)		; 41 8D ; Exclusive OR accumulator with memory ($8D.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $42, $8E		; 42 8E ; Reserved instruction
	ora ($42.b),Y		; 11 42 ; OR accumulator with memory ($42.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E70800.l,X		; FF 00 08 E7 ; Subtract with carry (long,X) $E70800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $18.b		; 14 18 ; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	ora [$61.b]		; 07 61 ; OR accumulator with memory (long) [$61.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $051200.l,X		; FF 00 12 05 ; Subtract with carry (long,X) $051200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $060B13.l		; 6F 13 0B 06 ; Add with carry (long) $060B13.l [Writes: Accumulator] [Flags: ZVNC]
	ora ($05.b,S),Y		; 13 05 ; OR accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $D10316.l		; 6F 16 03 D1 ; Add with carry (long) $D10316.l [Writes: Accumulator] [Flags: ZVNC]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $1919.w		; 6D 19 19 ; Add $1919.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $051A.w		; 6D 1A 05 ; Add $051A.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $E915.w		; 6D 15 E9 ; Add $E915.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	asl $17.b		; 06 17 ; Arithmetic shift left $17.b [Reads: Direct Page] [Flags: ZNC]
	sbc [$06.b]		; E7 06 ; Subtract with carry (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora [$E9.b],Y		; 17 E9 ; OR accumulator with memory (long indexed) [$E9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $17.b		; 06 17 ; Arithmetic shift left $17.b [Reads: Direct Page] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $19.b		; 06 19 ; Arithmetic shift left $19.b [Reads: Direct Page] [Flags: ZNC]
	sbc #$06.b		; E9 06 ; Subtract #$06.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cpx $FF06.w		; EC 06 FF ; Compare $FF06.w with X register [Reads: X Index] [Flags: ZNC]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($6D.b,S),Y		; 13 6D ; OR accumulator (stack relative indirect indexed) ($6D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$09.b],Y		; 17 09 ; OR accumulator with memory (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $0618.w		; 6D 18 06 ; Add $0618.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $1619.w		; 6D 19 16 ; Add $1619.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $161C.w		; 6D 1C 16 ; Add $161C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc $00FF.w		; 6D FF 00 ; Add $00FF.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	sta ($86.b,X)		; 81 86 ; Store accumulator ($86.b,X) [Reads: Accumulator, X Index, Direct Page]
	cpx $10.b		; E4 10 ; Compare $10.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $16.b		; 06 16 ; Arithmetic shift left $16.b [Reads: Direct Page] [Flags: ZNC]
	bit $07.b		; 24 07 ; Test bits $07.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bit $94.b		; 24 94 ; Test bits $94.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora [$37.b],Y		; 17 37 ; OR accumulator with memory (long indexed) [$37.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stx $E1.b,Y		; 96 E1 ; Store X register $E1.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	.db $10, $96		; 10 96 ; Branch if plus to $10, $96 [Flow: branch]
	ora $13969A.l		; 0F 9A 96 13 ; OR accumulator with memory (long) $13969A.l [Writes: Accumulator] [Flags: ZN]
	sta ($98.b,X)		; 81 98 ; Store accumulator ($98.b,X) [Reads: Accumulator, X Index, Direct Page]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta ($99.b,X)		; 81 99 ; Store accumulator ($99.b,X) [Reads: Accumulator, X Index, Direct Page]
	ora $9981.w		; 0D 81 99 ; Logical OR $9981.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc $9B11.w,X		; FE 11 9B ; Increment memory $9B11.w,X [Reads: X Index] [Flags: ZN]
	ora [$81.b],Y		; 17 81 ; OR accumulator with memory (long indexed) [$81.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $070C00.l,X		; FF 00 0C 07 ; Subtract with carry (long,X) $070C00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($06.b,S),Y		; 93 06 ; Store accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	tsb $24.b		; 04 24 ; Test and set bits $24.b [Reads: Accumulator] [Flags: Z]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: ZNC]
	bit $0C.b		; 24 0C ; Test bits $0C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $26.b		; 05 26 ; Logical OR $26.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $132613.l		; 0F 13 26 13 ; OR accumulator with memory (long) $132613.l [Writes: Accumulator] [Flags: ZN]
	ora $26.b		; 05 26 ; Logical OR $26.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($09.b,S),Y		; 13 09 ; OR accumulator (stack relative indirect indexed) ($09.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $14.b		; 26 14 ; Rotate left $14.b [Reads: Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	ror $0717.w,X		; 7E 17 07 ; Rotate right $0717.w,X [Reads: X Index] [Flags: ZNC]
	adc $26181A.l,X		; 7F 1A 18 26 ; Add long $26181A.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0E0700.l,X		; FF 00 07 0E ; Subtract with carry (long,X) $0E0700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($07.b,S),Y		; 93 07 ; Store accumulator (stack relative indirect indexed) ($07.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ora ($93.b),Y		; 11 93 ; OR accumulator with memory ($93.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0B93.w		; 0C 93 0B ; Test and set bits $0B93.w [Reads: Accumulator] [Flags: Z]
	ora ($93.b,S),Y		; 13 93 ; OR accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $8B.b		; 14 8B ; Test and reset bits $8B.b [Reads: Accumulator] [Flags: Z]
	ora $1209EF.l		; 0F EF 09 12 ; OR accumulator with memory (long) $1209EF.l [Writes: Accumulator] [Flags: ZN]
	asl $128B.w		; 0E 8B 12 ; Arithmetic shift left $128B.w [Flags: ZNC]
	ora ($8B.b)		; 12 8B ; OR accumulator with memory (indirect) ($8B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $170A00.l,X		; FF 00 0A 17 ; Subtract with carry (long,X) $170A00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stx $180A.w		; 8E 0A 18 ; Store X register to $180A.w [Reads: X Index]
	stx $140B.w		; 8E 0B 14 ; Store X register to $140B.w [Reads: X Index]
	ora $0B.b,X		; 15 0B ; OR accumulator with memory $0B.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $0E15.w		; 1C 15 0E ; Test and reset bits $0E15.w [Reads: Accumulator] [Flags: Z]
	ora [$8E.b],Y		; 17 8E ; OR accumulator with memory (long indexed) [$8E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $8E18.w		; 0E 18 8E ; Arithmetic shift left $8E18.w [Flags: ZNC]
	sbc $070400.l,X		; FF 00 04 07 ; Subtract with carry (long,X) $070400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $0B04.w,X		; 1E 04 0B ; Arithmetic shift left $0B04.w,X [Reads: X Index] [Flags: ZNC]
	asl $0A06.w,X		; 1E 06 0A ; Arithmetic shift left $0A06.w,X [Reads: X Index] [Flags: ZNC]
	sta $09.b,S		; 83 09 ; Store accumulator (stack relative) $09.b,S [Reads: Accumulator, Stack Pointer]
	asl $84.b		; 06 84 ; Arithmetic shift left $84.b [Reads: Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $1515.w		; 0C 15 15 ; Test and set bits $1515.w [Reads: Accumulator] [Flags: Z]
	asl $1C.b		; 06 1C ; Arithmetic shift left $1C.b [Reads: Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $84.b,S		; 03 84 ; OR accumulator with stack relative $84.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	tsb $8A.b		; 04 8A ; Test and set bits $8A.b [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tsb $8A.b		; 04 8A ; Test and set bits $8A.b [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tsb $1584.w		; 0C 84 15 ; Test and set bits $1584.w [Reads: Accumulator] [Flags: Z]
	ora [$84.b],Y		; 17 84 ; OR accumulator with memory (long indexed) [$84.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1B.b,X		; 15 1B ; OR accumulator with memory $1B.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($1B.b,X)		; 61 1B ; Add with carry ($1B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	trb $61.b		; 14 61 ; Test and reset bits $61.b [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	sty $FF.b		; 84 FF ; Store Y register to $FF.b [Reads: Y Index]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $54.b		; 06 54 ; Arithmetic shift left $54.b [Reads: Direct Page] [Flags: ZNC]
	ora [$09.b],Y		; 17 09 ; OR accumulator with memory (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvn $07,$19		; 54 19 07 ; Move block negative $07,$19 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvn $17,$18		; 54 18 17 ; Move block negative $17,$18 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cmp ($1C.b),Y		; D1 1C ; Compare accumulator ($1C.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	ora $C5.b,S		; 03 C5 ; OR accumulator with stack relative $C5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $050600.l,X		; FF 00 06 05 ; Subtract with carry (long,X) $050600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc ($09.b,X)		; 61 09 ; Add with carry ($09.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsb $61.b		; 04 61 ; Test and set bits $61.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldx $15.b		; A6 15 ; Load $15.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	tsb $C5.b		; 04 C5 ; Test and set bits $C5.b [Reads: Accumulator] [Flags: Z]
	ora $0B.b,X		; 15 0B ; OR accumulator with memory $0B.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($18.b,X)		; 61 18 ; Add with carry ($18.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $A7.b		; 05 A7 ; Logical OR $A7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldx $1A.b		; A6 1A ; Load $1A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	asl $5C.b		; 06 5C ; Arithmetic shift left $5C.b [Reads: Direct Page] [Flags: ZNC]
	sbc $130800.l,X		; FF 00 08 13 ; Subtract with carry (long,X) $130800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $1309.w,Y		; 99 09 13 ; Store accumulator to $1309.w,Y [Reads: Accumulator, Y Index]
	sta $130A.w,Y		; 99 0A 13 ; Store accumulator to $130A.w,Y [Reads: Accumulator, Y Index]
	sta $130B.w,Y		; 99 0B 13 ; Store accumulator to $130B.w,Y [Reads: Accumulator, Y Index]
	sta $130C.w,Y		; 99 0C 13 ; Store accumulator to $130C.w,Y [Reads: Accumulator, Y Index]
	sta $00FF.w,Y		; 99 FF 00 ; Store accumulator to $00FF.w,Y [Reads: Accumulator, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $42.b		; 06 42 ; Arithmetic shift left $42.b [Reads: Direct Page] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	eor ($FE.b,X)		; 41 FE ; Exclusive OR accumulator with memory ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $B10600.l,X		; FF 00 06 B1 ; Subtract with carry (long,X) $B10600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($FE.b,X)		; 41 FE ; Exclusive OR accumulator with memory ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $412A.w,Y		; 99 2A 41 ; Store accumulator to $412A.w,Y [Reads: Accumulator, Y Index]
	sbc $181800.l,X		; FF 00 18 18 ; Subtract with carry (long,X) $181800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $09.b		; 64 09 ; Store zero to $09.b
	ora [$61.b],Y		; 17 61 ; OR accumulator with memory (long indexed) [$61.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($18.b),Y		; 71 18 ; Add with carry ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc ($19.b),Y		; 71 19 ; Add with carry ($19.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$61.b]		; 07 61 ; OR accumulator with memory (long) [$61.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $71.b,X		; 16 71 ; Arithmetic shift left $71.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $14.b		; 06 14 ; Arithmetic shift left $14.b [Reads: Direct Page] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $081800.l,X		; FF 00 18 08 ; Subtract with carry (long,X) $081800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $18.b		; 64 18 ; Store zero to $18.b
	ora [$64.b],Y		; 17 64 ; OR accumulator with memory (long indexed) [$64.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0C.b		; 05 0C ; Logical OR $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $05.b,S		; 83 05 ; Store accumulator (stack relative) $05.b,S [Reads: Accumulator, Stack Pointer]
	ora ($83.b,S),Y		; 13 83 ; OR accumulator (stack relative indirect indexed) ($83.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $0A71.w		; 0C 71 0A ; Test and set bits $0A71.w [Reads: Accumulator] [Flags: Z]
	ora ($71.b,S),Y		; 13 71 ; OR accumulator (stack relative indirect indexed) ($71.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $1B71.w		; 0E 71 1B ; Arithmetic shift left $1B71.w [Flags: ZNC]
	ora ($71.b)		; 12 71 ; OR accumulator with memory (indirect) ($71.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $080700.l,X		; FF 00 07 08 ; Subtract with carry (long,X) $080700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $1B.b		; 64 1B ; Store zero to $1B.b
	tsb $64.b		; 04 64 ; Test and set bits $64.b [Reads: Accumulator] [Flags: Z]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($05.b),Y		; 71 05 ; Add with carry ($05.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc ($0A.b),Y		; 71 0A ; Add with carry ($0A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $71.b		; 06 71 ; Arithmetic shift left $71.b [Reads: Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc ($0B.b),Y		; 71 0B ; Add with carry ($0B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($66.b),Y		; 11 66 ; OR accumulator with memory ($66.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $1967.w,X		; 1E 67 19 ; Arithmetic shift left $1967.w,X [Reads: X Index] [Flags: ZNC]
	ora [$71.b]		; 07 71 ; OR accumulator with memory (long) [$71.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $7109.w,Y		; 19 09 71 ; OR accumulator with memory $7109.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $190300.l,X		; FF 00 03 19 ; Subtract with carry (long,X) $190300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($0A.b,X)		; 21 0A ; Logical AND ($0A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$81.b]		; 07 81 ; OR accumulator with memory (long) [$81.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $119A07.l		; 0F 07 9A 11 ; OR accumulator with memory (long) $119A07.l [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($19.b,X)		; 81 19 ; Store accumulator ($19.b,X) [Reads: Accumulator, X Index, Direct Page]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sta $13E81C.l		; 8F 1C E8 13 ; Store accumulator (long) $13E81C.l [Reads: Accumulator]
	trb $241B.w		; 1C 1B 24 ; Test and reset bits $241B.w [Reads: Accumulator] [Flags: Z]
	sbc $0B8900.l,X		; FF 00 89 0B ; Subtract with carry (long,X) $0B8900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $1E		; 10 1E ; Branch if plus to $10, $1E [Flow: branch]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora #$1E.b		; 09 1E ; Logical OR #$1E.b with accumulator [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	asl $1E.b,X		; 16 1E ; Arithmetic shift left $1E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$86.b]		; 07 86 ; OR accumulator with memory (long) [$86.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$86.b],Y		; 17 86 ; OR accumulator with memory (long indexed) [$86.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $0B0700.l,X		; FF 00 07 0B ; Subtract with carry (long,X) $0B0700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $09.b		; 24 09 ; Test bits $09.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl $24.b,X		; 16 24 ; Arithmetic shift left $24.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $04.b,X		; 15 04 ; OR accumulator with memory $04.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $15.b		; C6 15 ; Decrement $15.b [Reads: Direct Page] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda [$17.b]		; A7 17 ; Load accumulator (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$A7.b]		; 07 A7 ; OR accumulator with memory (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$09.b],Y		; 17 09 ; OR accumulator with memory (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: ZN]
	ora ($1C.b,S),Y		; 13 1C ; OR accumulator (stack relative indirect indexed) ($1C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$26.b],Y		; 17 26 ; OR accumulator with memory (long indexed) [$26.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $A709.w,Y		; 19 09 A7 ; OR accumulator with memory $A709.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $C6.b		; 05 C6 ; Logical OR $C6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	dec $FF.b		; C6 FF ; Decrement $FF.b [Reads: Direct Page] [Flags: ZN]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0C18.w,Y		; 19 18 0C ; OR accumulator with memory $0C18.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $7F.b		; 06 7F ; Arithmetic shift left $7F.b [Reads: Direct Page] [Flags: ZNC]
	.db $10, $07		; 10 07 ; Branch if plus to $10, $07 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	trb $09.b		; 14 09 ; Test and reset bits $09.b [Reads: Accumulator] [Flags: Z]
	ror $0B18.w,X		; 7E 18 0B ; Rotate right $0B18.w,X [Reads: X Index] [Flags: ZNC]
	rol $18.b		; 26 18 ; Rotate left $18.b [Reads: Direct Page] [Flags: ZNC]
	ora [$24.b],Y		; 17 24 ; OR accumulator with memory (long indexed) [$24.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc [$0B.b]		; E7 0B ; Subtract with carry (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $110600.l,X		; FF 00 06 11 ; Subtract with carry (long,X) $110600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	ora ($80.b),Y		; 11 80 ; OR accumulator with memory ($80.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($80.b),Y		; 11 80 ; OR accumulator with memory ($80.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $8011.w		; 0C 11 80 ; Test and set bits $8011.w [Reads: Accumulator] [Flags: Z]
	asl $15.b,X		; 16 15 ; Arithmetic shift left $15.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lda [$17.b]		; A7 17 ; Load accumulator (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	dec $19.b		; C6 19 ; Decrement $19.b [Reads: Direct Page] [Flags: ZN]
	trb $1A80.w		; 1C 80 1A ; Test and reset bits $1A80.w [Reads: Accumulator] [Flags: Z]
	trb $13.b		; 14 13 ; Test and reset bits $13.b [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora [$23.b],Y		; 17 23 ; OR accumulator with memory (long indexed) [$23.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $800A.w		; 1C 0A 80 ; Test and reset bits $800A.w [Reads: Accumulator] [Flags: Z]
	trb $261B.w		; 1C 1B 26 ; Test and reset bits $261B.w [Reads: Accumulator] [Flags: Z]
	sbc $171100.l,X		; FF 00 11 17 ; Subtract with carry (long,X) $171100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($0E.b,S),Y		; 93 0E ; Store accumulator (stack relative indirect indexed) ($0E.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $99140F.l,X		; 7F 0F 14 99 ; Add long $99140F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($07.b)		; 12 07 ; OR accumulator with memory (indirect) ($07.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($12.b,X)		; A1 12 ; Load accumulator ($12.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda ($16.b,X)		; A1 16 ; Load accumulator ($16.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sta $1717.w,Y		; 99 17 17 ; Store accumulator to $1717.w,Y [Reads: Accumulator, Y Index]
	adc $0700FF.l,X		; 7F FF 00 07 ; Add long $0700FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $23.b		; 06 23 ; Arithmetic shift left $23.b [Reads: Direct Page] [Flags: ZNC]
	ora [$08.b]		; 07 08 ; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $08.b,S		; 23 08 ; AND accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $09.b,S		; 23 09 ; AND accumulator with stack relative $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$23.b]		; 07 23 ; OR accumulator with memory (long) [$23.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $0B.b		; 14 0B ; Test and reset bits $0B.b [Reads: Accumulator] [Flags: Z]
	adc $0317.w,X		; 7D 17 03 ; Add $0317.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $0B19.w,X		; 7D 19 0B ; Add $0B19.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $031B.w,X		; 7D 1B 03 ; Add $031B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $00FF.w,X		; 7D FF 00 ; Add $00FF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $16.b,S		; 03 16 ; OR accumulator with stack relative $16.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $09.b,X		; 76 09 ; Rotate right $09.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora [$42.b]		; 07 42 ; OR accumulator with memory (long) [$42.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$1A.b		; 09 1A ; Logical OR #$1A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $E400.w,X		; FD 00 E4 ; Subtract with carry $E400.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $6BEB01.l,X		; FF 01 EB 6B ; Subtract with carry (long,X) $6BEB01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $42, $8B		; 42 8B ; Reserved instruction
	ror $FF42.w		; 6E 42 FF ; Rotate right $FF42.w [Flags: ZNC]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc #$41.b		; 69 41 ; Add #$41.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	stx $70.b		; 86 70 ; Store X register to $70.b [Reads: X Index]
	eor ($91.b,X)		; 41 91 ; Exclusive OR accumulator with memory ($91.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $41.b,X		; 75 41 ; Add $41.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1B0800.l,X		; FF 00 08 1B ; Subtract with carry (long,X) $1B0800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $10.b,S		; 63 10 ; Add with carry (stack relative) $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	trb $63.b		; 14 63 ; Test and reset bits $63.b [Reads: Accumulator] [Flags: Z]
	ora $14.b		; 05 14 ; Logical OR $14.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($06.b),Y		; 71 06 ; Add with carry ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$E3.b]		; 07 E3 ; OR accumulator with memory (long) [$E3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $0B.b,S		; E3 0B ; Subtract stack-relative $0B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc ($10.b),Y		; 71 10 ; Add with carry ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$71.b],Y		; 17 71 ; OR accumulator with memory (long indexed) [$71.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$08.b],Y		; 17 08 ; OR accumulator with memory (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($18.b,X)		; 61 18 ; Add with carry ($18.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc ($1B.b),Y		; 71 1B ; Add with carry ($1B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $71.b		; 14 71 ; Test and reset bits $71.b [Reads: Accumulator] [Flags: Z]
	sbc $030500.l,X		; FF 00 05 03 ; Subtract with carry (long,X) $030500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($05.b),Y		; 71 05 ; Add with carry ($05.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc ($07.b),Y		; 71 07 ; Add with carry ($07.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $091261.l		; 0F 61 12 09 ; OR accumulator with memory (long) $091261.l [Writes: Accumulator] [Flags: ZN]
	adc ($12.b),Y		; 71 12 ; Add with carry ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $71.b,X		; 15 71 ; OR accumulator with memory $71.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora #$71.b		; 09 71 ; Logical OR #$71.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $71.b,X		; 15 71 ; OR accumulator with memory $71.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $070E00.l,X		; FF 00 0E 07 ; Subtract with carry (long,X) $070E00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $1B.b,S		; 63 1B ; Add with carry (stack relative) $1B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ora #$64.b		; 09 64 ; Logical OR #$64.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $14.b		; 05 14 ; Logical OR $14.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $4F1B05.l		; 4F 05 1B 4F ; Exclusive OR accumulator with memory (long) $4F1B05.l [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $4F.b,X		; 16 4F ; Arithmetic shift left $4F.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc ($0E.b,X)		; 61 0E ; Add with carry ($0E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $71.b,S		; 03 71 ; OR accumulator with stack relative $71.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0C.b,X		; 15 0C ; OR accumulator with memory $0C.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($18.b),Y		; 71 18 ; Add with carry ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc ($1C.b,X)		; 61 1C ; Add with carry ($1C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora [$71.b]		; 07 71 ; OR accumulator with memory (long) [$71.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $00FF01.l,X		; FF 01 FF 00 ; Subtract with carry (long,X) $00FF01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $14.b		; 05 14 ; Logical OR $14.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$1A.b]		; 07 1A ; OR accumulator with memory (long) [$1A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($18.b,S),Y		; 13 18 ; OR accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1806.w,Y		; 19 06 18 ; OR accumulator with memory $1806.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc [$14.b]		; E7 14 ; Subtract with carry (long) [$14.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsb $17.b		; 04 17 ; Test and set bits $17.b [Reads: Accumulator] [Flags: Z]
	asl $030C.w,X		; 1E 0C 03 ; Arithmetic shift left $030C.w,X [Reads: X Index] [Flags: ZNC]
	asl $0415.w,X		; 1E 15 04 ; Arithmetic shift left $0415.w,X [Reads: X Index] [Flags: ZNC]
	asl $0B17.w,X		; 1E 17 0B ; Arithmetic shift left $0B17.w,X [Reads: X Index] [Flags: ZNC]
	lda [$18.b]		; A7 18 ; Load accumulator (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $19A7.w,Y		; 19 A7 19 ; OR accumulator with memory $19A7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $A7.b		; 04 A7 ; Test and set bits $A7.b [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cpx $1C.b		; E4 1C ; Compare $1C.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $A7.b,X		; 15 A7 ; OR accumulator with memory $A7.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $100A00.l,X		; FF 00 0A 10 ; Subtract with carry (long,X) $100A00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0B.b,S		; E3 0B ; Subtract stack-relative $0B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora $00FFE3.l		; 0F E3 FF 00 ; OR accumulator with memory (long) $00FFE3.l [Writes: Accumulator] [Flags: ZN]
	ora [$15.b]		; 07 15 ; OR accumulator with memory (long) [$15.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($18.b,S),Y		; 93 18 ; Store accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	tsb $1E.b		; 04 1E ; Test and set bits $1E.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $1A04.w,X		; 1E 04 1A ; Arithmetic shift left $1A04.w,X [Reads: X Index] [Flags: ZNC]
	bit $12.b		; 24 12 ; Test bits $12.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $8A.b,S		; 03 8A ; OR accumulator with stack relative $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$A7.b]		; 07 A7 ; OR accumulator with memory (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ror $1818.w,X		; 7E 18 18 ; Rotate right $1818.w,X [Reads: X Index] [Flags: ZNC]
	adc $0300FF.l,X		; 7F FF 00 03 ; Add long $0300FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $05.b		; 06 05 ; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $F5.b		; 06 F5 ; Arithmetic shift left $F5.b [Reads: Direct Page] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $FA.b		; 06 FA ; Arithmetic shift left $FA.b [Reads: Direct Page] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $1A.b,X		; F5 1A ; Subtract $1A.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$8A.b],Y		; 17 8A ; OR accumulator with memory (long indexed) [$8A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lda [$0B.b]		; A7 0B ; Load accumulator (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $A7.b,S		; 03 A7 ; OR accumulator with stack relative $A7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$05.b],Y		; 17 05 ; OR accumulator with memory (long indexed) [$05.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $17		; 80 17 ; Branch always to $80, $17 [Flow: branch]
	asl $5B.b,X		; 16 5B ; Arithmetic shift left $5B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $15.b		; 14 15 ; Test and reset bits $15.b [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $80, $1C		; 80 1C ; Branch always to $80, $1C [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $07.b,X		; 15 07 ; OR accumulator with memory $07.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$3B.b		; 09 3B ; Logical OR #$3B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $E70800.l,X		; FF 00 08 E7 ; Subtract with carry (long,X) $E70800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $04.b		; 14 04 ; Test and reset bits $04.b [Reads: Accumulator] [Flags: Z]
	ora [$C6.b]		; 07 C6 ; OR accumulator with memory (long) [$C6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$15.b		; 09 15 ; Logical OR #$15.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp ($0C.b),Y		; D1 0C ; Compare accumulator ($0C.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	ora #$C6.b		; 09 C6 ; Logical OR #$C6.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $8B13.w		; 0D 13 8B ; Logical OR $8B13.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $1009EF.l		; 0F EF 09 10 ; OR accumulator with memory (long) $1009EF.l [Writes: Accumulator] [Flags: ZN]
	ora [$8A.b],Y		; 17 8A ; OR accumulator with memory (long indexed) [$8A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $17.b		; 14 17 ; Test and reset bits $17.b [Reads: Accumulator] [Flags: Z]
	lda [$18.b]		; A7 18 ; Load accumulator (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$7E.b]		; 07 7E ; OR accumulator with memory (long) [$7E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $24.b		; 14 24 ; Test and reset bits $24.b [Reads: Accumulator] [Flags: Z]
	trb $C513.w		; 1C 13 C5 ; Test and reset bits $C513.w [Reads: Accumulator] [Flags: Z]
	trb $2414.w		; 1C 14 24 ; Test and reset bits $2414.w [Reads: Accumulator] [Flags: Z]
	sbc $1B0200.l,X		; FF 00 02 1B ; Subtract with carry (long,X) $1B0200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($05.b,X)		; A1 05 ; Load accumulator ($05.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $D11406.l		; 8F 06 14 D1 ; Store accumulator (long) $D11406.l [Reads: Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sta $8F1409.l		; 8F 09 14 8F ; Store accumulator (long) $8F1409.l [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $8F.b,X		; 16 8F ; Arithmetic shift left $8F.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	trb $8F.b		; 14 8F ; Test and reset bits $8F.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $1500FF.l		; 8F FF 00 15 ; Store accumulator (long) $1500FF.l [Reads: Accumulator]
	ora [$BD.b]		; 07 BD ; OR accumulator with memory (long) [$BD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $180400.l,X		; FF 00 04 18 ; Subtract with carry (long,X) $180400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $1B0E.w,X		; 1E 0E 1B ; Arithmetic shift left $1B0E.w,X [Reads: X Index] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1208F7.l		; 0F F7 08 12 ; OR accumulator with memory (long) $1208F7.l [Writes: Accumulator] [Flags: ZN]
	ora [$C5.b],Y		; 17 C5 ; OR accumulator with memory (long indexed) [$C5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($12.b),Y		; D1 12 ; Compare accumulator ($12.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	ora $1815.w,Y		; 19 15 18 ; OR accumulator with memory $1815.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $FF.b,X		; 15 FF ; OR accumulator with memory $FF.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $030C.w,X		; 1E 0C 03 ; Arithmetic shift left $030C.w,X [Reads: X Index] [Flags: ZNC]
	asl $1804.w,X		; 1E 04 18 ; Arithmetic shift left $1804.w,X [Reads: X Index] [Flags: ZNC]
	ora $05.b,X		; 15 05 ; OR accumulator with memory $05.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $08.b		; C5 08 ; Compare $08.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora #$15.b		; 09 15 ; Logical OR #$15.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$17.b		; 09 17 ; Logical OR #$17.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $0F.b		; C5 0F ; Compare $0F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $C6.b,X		; 15 C6 ; OR accumulator with memory $C6.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($E7.b)		; 12 E7 ; OR accumulator with memory (indirect) ($E7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $12.b,X		; 16 12 ; Arithmetic shift left $12.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $148A.w,Y		; 19 8A 14 ; OR accumulator with memory $148A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $15.b,S		; 03 15 ; OR accumulator with stack relative $15.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $0A.b,X		; 16 0A ; Arithmetic shift left $0A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lda [$1B.b]		; A7 1B ; Load accumulator (long) [$1B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $15.b,S		; 03 15 ; OR accumulator with stack relative $15.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $090900.l,X		; FF 00 09 09 ; Subtract with carry (long,X) $090900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $09.b		; C5 09 ; Compare $09.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	asl $C5.b,X		; 16 C5 ; Arithmetic shift left $C5.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tsb $C50C.w		; 0C 0C C5 ; Test and set bits $C50C.w [Reads: Accumulator] [Flags: Z]
	tsb $C513.w		; 0C 13 C5 ; Test and set bits $C513.w [Reads: Accumulator] [Flags: Z]
	tsb $8F17.w		; 0C 17 8F ; Test and set bits $8F17.w [Reads: Accumulator] [Flags: Z]
	ora $04.b,X		; 15 04 ; OR accumulator with memory $04.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$1C.b]		; A7 1C ; Load accumulator (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $1CA7.w		; 0C A7 1C ; Test and set bits $1CA7.w [Reads: Accumulator] [Flags: Z]
	tsb $15.b		; 04 15 ; Test and set bits $15.b [Reads: Accumulator] [Flags: Z]
	sbc $160C00.l,X		; FF 00 0C 16 ; Subtract with carry (long,X) $160C00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $0C.b,S		; 43 0C ; Exclusive OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$43.b],Y		; 17 43 ; OR accumulator with memory (long indexed) [$43.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb HDMATBL1L.w		; 0C 18 43 ; Test and set bits HDMATBL1L.w [Reads: Accumulator] [Flags: Z]
	tsb HDMATBL1H.w		; 0C 19 43 ; Test and set bits HDMATBL1H.w [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc [$0B.b],Y		; F7 0B ; Subtract with carry (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $080B00.l,X		; FF 00 0B 08 ; Subtract with carry (long,X) $080B00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $1E15.w,X		; 7E 15 1E ; Rotate right $1E15.w,X [Reads: X Index] [Flags: ZNC]
	stx $17.b,Y		; 96 17 ; Store X register $17.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	asl $1996.w,X		; 1E 96 19 ; Arithmetic shift left $1996.w,X [Reads: X Index] [Flags: ZNC]
	asl $1B96.w,X		; 1E 96 1B ; Arithmetic shift left $1B96.w,X [Reads: X Index] [Flags: ZNC]
	asl $FF96.w,X		; 1E 96 FF ; Arithmetic shift left $FF96.w,X [Reads: X Index] [Flags: ZNC]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF15.l		; EF 15 FF 00 ; Subtract with carry (long) $00FF15.l [Writes: Accumulator] [Flags: ZVNC]
	ora ($10.b,S),Y		; 13 10 ; OR accumulator (stack relative indirect indexed) ($10.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $8F0914.l		; 8F 14 09 8F ; Store accumulator (long) $8F0914.l [Reads: Accumulator]
	trb $0C.b		; 14 0C ; Test and reset bits $0C.b [Reads: Accumulator] [Flags: Z]
	sta $8F0F14.l		; 8F 14 0F 8F ; Store accumulator (long) $8F0F14.l [Reads: Accumulator]
	ora [$08.b],Y		; 17 08 ; OR accumulator with memory (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0600FF.l		; 8F FF 00 06 ; Store accumulator (long) $0600FF.l [Reads: Accumulator]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $17.b,X		; 15 17 ; OR accumulator with memory $17.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $1783.w		; 0E 83 17 ; Arithmetic shift left $1783.w [Flags: ZNC]
	ora ($83.b),Y		; 11 83 ; OR accumulator with memory ($83.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $E400.w,X		; FE 00 E4 ; Increment memory $E400.w,X [Reads: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $184E.w		; 0D 4E 18 ; Logical OR $184E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($4E.b)		; 12 4E ; OR accumulator with memory (indirect) ($4E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $4F0E.w,Y		; 19 0E 4F ; OR accumulator with memory $4F0E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $4F0F.w,Y		; 19 0F 4F ; OR accumulator with memory $4F0F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $4F10.w,Y		; 19 10 4F ; OR accumulator with memory $4F10.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $4F11.w,Y		; 19 11 4F ; OR accumulator with memory $4F11.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $060800.l,X		; FF 00 08 06 ; Subtract with carry (long,X) $060800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $0708.w,X		; 1E 08 07 ; Arithmetic shift left $0708.w,X [Reads: X Index] [Flags: ZNC]
	asl $1408.w,X		; 1E 08 14 ; Arithmetic shift left $1408.w,X [Reads: X Index] [Flags: ZNC]
	asl $1C05.w,X		; 1E 05 1C ; Arithmetic shift left $1C05.w,X [Reads: X Index] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $1C.b		; 06 1C ; Arithmetic shift left $1C.b [Reads: Direct Page] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$1C.b]		; 07 1C ; OR accumulator with memory (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $C6.b,S		; 03 C6 ; OR accumulator with stack relative $C6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $098A.w		; 1C 8A 09 ; Test and reset bits $098A.w [Reads: Accumulator] [Flags: Z]
	trb $0A8A.w		; 1C 8A 0A ; Test and reset bits $0A8A.w [Reads: Accumulator] [Flags: Z]
	trb $0B8A.w		; 1C 8A 0B ; Test and reset bits $0B8A.w [Reads: Accumulator] [Flags: Z]
	trb $1A8A.w		; 1C 8A 1A ; Test and reset bits $1A8A.w [Reads: Accumulator] [Flags: Z]
	ora [$26.b],Y		; 17 26 ; OR accumulator with memory (long indexed) [$26.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($26.b,S),Y		; 13 26 ; OR accumulator (stack relative indirect indexed) ($26.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $130900.l,X		; FF 00 09 13 ; Subtract with carry (long,X) $130900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $0A.b		; 26 0A ; Rotate left $0A.b [Reads: Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($0F.b,S),Y		; 13 0F ; OR accumulator (stack relative indirect indexed) ($0F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($26.b),Y		; 11 26 ; OR accumulator with memory ($26.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $2617.w		; 0E 17 26 ; Arithmetic shift left $2617.w [Flags: ZNC]
	ora ($0D.b)		; 12 0D ; OR accumulator with memory (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $13.b		; 26 13 ; Rotate left $13.b [Reads: Direct Page] [Flags: ZNC]
	ora #$26.b		; 09 26 ; Logical OR #$26.b with accumulator [Writes: Accumulator] [Flags: ZN]
	trb $800F.w		; 1C 0F 80 ; Test and reset bits $800F.w [Reads: Accumulator] [Flags: Z]
	sbc $1C0600.l,X		; FF 00 06 1C ; Subtract with carry (long,X) $1C0600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $0604.w,X		; 1E 04 06 ; Arithmetic shift left $0604.w,X [Reads: X Index] [Flags: ZNC]
	rol $04.b		; 26 04 ; Rotate left $04.b [Reads: Direct Page] [Flags: ZNC]
	trb $8B.b		; 14 8B ; Test and reset bits $8B.b [Reads: Accumulator] [Flags: Z]
	ora #$18.b		; 09 18 ; Logical OR #$18.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	tsb $2605.w		; 0C 05 26 ; Test and set bits $2605.w [Reads: Accumulator] [Flags: Z]
	tsb $8B13.w		; 0C 13 8B ; Test and set bits $8B13.w [Reads: Accumulator] [Flags: Z]
	trb $10.b		; 14 10 ; Test and reset bits $10.b [Reads: Accumulator] [Flags: Z]
	bit $18.b		; 24 18 ; Test bits $18.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $1C.b		; 24 1C ; Test bits $1C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($24.b),Y		; 11 24 ; OR accumulator with memory ($24.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $180500.l,X		; FF 00 05 18 ; Subtract with carry (long,X) $180500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $08.b,S		; 23 08 ; AND accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $23.b,X		; 16 23 ; Arithmetic shift left $23.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($08.b),Y		; 91 08 ; Store accumulator ($08.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ora $1223.w,Y		; 19 23 12 ; OR accumulator with memory $1223.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $A1.b		; 14 A1 ; Test and reset bits $A1.b [Reads: Accumulator] [Flags: Z]
	sbc $041200.l,X		; FF 00 12 04 ; Subtract with carry (long,X) $041200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0612.w,X		; 9D 12 06 ; Store accumulator to $0612.w,X [Reads: Accumulator, X Index]
	sta $0912.w,X		; 9D 12 09 ; Store accumulator to $0912.w,X [Reads: Accumulator, X Index]
	sta $0B12.w,X		; 9D 12 0B ; Store accumulator to $0B12.w,X [Reads: Accumulator, X Index]
	sta $0717.w,X		; 9D 17 07 ; Store accumulator to $0717.w,X [Reads: Accumulator, X Index]
	ora $18.b,X		; 15 18 ; OR accumulator with memory $18.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror $00FF.w,X		; 7E FF 00 ; Rotate right $00FF.w,X [Reads: X Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $C5.b,S		; 03 C5 ; OR accumulator with stack relative $C5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $0C15.w		; 0E 15 0C ; Arithmetic shift left $0C15.w [Flags: ZNC]
	trb $80.b		; 14 80 ; Test and reset bits $80.b [Reads: Accumulator] [Flags: Z]
	sbc $0A0800.l,X		; FF 00 08 0A ; Subtract with carry (long,X) $0A0800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $1807.w,X		; 1E 07 18 ; Arithmetic shift left $1807.w,X [Reads: X Index] [Flags: ZNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $5B.b,X		; 16 5B ; Arithmetic shift left $5B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $10, $19		; 10 19 ; Branch if plus to $10, $19 [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $15.b		; C5 15 ; Compare $15.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $19.b		; C5 19 ; Compare $19.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $A7.b,X		; 15 A7 ; OR accumulator with memory $A7.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $D117.w,Y		; 19 17 D1 ; OR accumulator with memory $D117.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $A71B.w,Y		; 19 1B A7 ; OR accumulator with memory $A71B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $07.b,X		; 15 07 ; OR accumulator with memory $07.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	ora $07.b,X		; 15 07 ; OR accumulator with memory $07.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $0715.w		; CC 15 07 ; Compare $0715.w with Y register [Reads: Y Index] [Flags: ZNC]
	cmp $00FF.w		; CD FF 00 ; Compare $00FF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	ora $16.b		; 05 16 ; Logical OR $16.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ora $19.b		; 05 19 ; Logical OR $19.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ora [$04.b]		; 07 04 ; OR accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ora [$0B.b]		; 07 0B ; OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$8A.b],Y		; 17 8A ; OR accumulator with memory (long indexed) [$8A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$15.b		; 09 15 ; Logical OR #$15.b with accumulator [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ora #$1A.b		; 09 1A ; Logical OR #$1A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ora ($0C.b)		; 12 0C ; OR accumulator with memory (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$12.b],Y		; 97 12 ; Store accumulator (long indexed) [$12.b],Y [Reads: Accumulator, Direct Page, Y Index]
	ora ($97.b)		; 12 97 ; OR accumulator with memory (indirect) ($97.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$12.b],Y		; 17 12 ; OR accumulator with memory (long indexed) [$12.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $18.b,S		; 43 18 ; Exclusive OR accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($41.b,S),Y		; 13 41 ; OR accumulator (stack relative indirect indexed) ($41.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $EF0F00.l,X		; FF 00 0F EF ; Subtract with carry (long,X) $EF0F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0E.b,X		; 15 0E ; OR accumulator with memory $0E.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $FF15.w		; 0C 15 FF ; Test and set bits $FF15.w [Reads: Accumulator] [Flags: Z]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $E3.b		; 06 E3 ; Arithmetic shift left $E3.b [Reads: Direct Page] [Flags: ZNC]
	ora #$06.b		; 09 06 ; Logical OR #$06.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora ($0E.b,X)		; 01 0E ; Logical OR ($0E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $A7.b,X		; 16 A7 ; Arithmetic shift left $A7.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $A71A.w		; 0E 1A A7 ; Arithmetic shift left $A71A.w [Flags: ZNC]
	ora ($16.b)		; 12 16 ; OR accumulator with memory (indirect) ($16.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$12.b]		; A7 12 ; Load accumulator (long) [$12.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda [$16.b]		; A7 16 ; Load accumulator (long) [$16.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $098500.l,X		; FF 00 85 09 ; Subtract with carry (long,X) $098500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $85.b,S		; 83 85 ; Store accumulator (stack relative) $85.b,S [Reads: Accumulator, Stack Pointer]
	asl $83.b,X		; 16 83 ; Arithmetic shift left $83.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sty $05ED.w		; 8C ED 05 ; Store Y register to $05ED.w [Reads: Y Index]
	sty $05F2.w		; 8C F2 05 ; Store Y register to $05F2.w [Reads: Y Index]
	sta ($ED.b)		; 92 ED ; Store accumulator (indirect) ($ED.b) [Reads: Accumulator, Direct Page]
	ora $92.b		; 05 92 ; Logical OR $92.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc ($05.b)		; F2 05 ; Subtract with carry (indirect) ($05.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $90, $0A		; 90 0A ; Branch if carry clear to $90, $0A [Flow: branch]
	lda [$90.b]		; A7 90 ; Load accumulator (long) [$90.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $A7.b		; 14 A7 ; Test and reset bits $A7.b [Reads: Accumulator] [Flags: Z]
	sbc $180601.l,X		; FF 01 06 18 ; Subtract with carry (long,X) $180601.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $07.b,X		; 15 07 ; OR accumulator with memory $07.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $A7060B.l		; 4F 0B 06 A7 ; Exclusive OR accumulator with memory (long) $A7060B.l [Writes: Accumulator] [Flags: ZN]
	tsb $A70C.w		; 0C 0C A7 ; Test and set bits $A70C.w [Reads: Accumulator] [Flags: Z]
	ora ($0C.b,S),Y		; 13 0C ; OR accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$14.b]		; A7 14 ; Load accumulator (long) [$14.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $1800FF.l		; 4F FF 00 18 ; Exclusive OR accumulator with memory (long) $1800FF.l [Writes: Accumulator] [Flags: ZN]
	tsb $1E.b		; 04 1E ; Test and set bits $1E.b [Reads: Accumulator] [Flags: Z]
	ora $03.b,X		; 15 03 ; OR accumulator with memory $03.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $0C.b,X		; 16 0C ; Arithmetic shift left $0C.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$03.b],Y		; 17 03 ; OR accumulator with memory (long indexed) [$03.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $8F.b		; 06 8F ; Arithmetic shift left $8F.b [Reads: Direct Page] [Flags: ZNC]
	ora $8A03.w,Y		; 19 03 8A ; OR accumulator with memory $8A03.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsb $1B8A.w		; 0C 8A 1B ; Test and set bits $1B8A.w [Reads: Accumulator] [Flags: Z]
	ora $8A.b,S		; 03 8A ; OR accumulator with stack relative $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $191500.l,X		; FF 00 15 19 ; Subtract with carry (long,X) $191500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $00FF.w		; CE FF 00 ; Decrement $00FF.w [Flags: ZN]
	ora [$13.b]		; 07 13 ; OR accumulator with memory (long) [$13.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $07.b		; 24 07 ; Test bits $07.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $24.b,X		; 15 24 ; OR accumulator with memory $24.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0A0800.l,X		; FF 00 08 0A ; Subtract with carry (long,X) $0A0800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $00FF.w,X		; 7E FF 00 ; Rotate right $00FF.w,X [Reads: X Index] [Flags: ZNC]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $07.b,S		; 43 07 ; Exclusive OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$6F.b],Y		; 17 6F ; OR accumulator with memory (long indexed) [$6F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$18.b]		; 07 18 ; OR accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $481408.l		; 6F 08 14 48 ; Add with carry (long) $481408.l [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $43.b		; 05 43 ; Logical OR $43.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $16.b		; 14 16 ; Test and reset bits $16.b [Reads: Accumulator] [Flags: Z]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $04.b,X		; 16 04 ; Arithmetic shift left $04.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc $6F0B16.l		; 6F 16 0B 6F ; Add with carry (long) $6F0B16.l [Writes: Accumulator] [Flags: ZVNC]
	asl $0A.b,X		; 16 0A ; Arithmetic shift left $0A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $18.b,S		; 43 18 ; Exclusive OR accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $FE.b,S		; 43 FE ; Exclusive OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	mvp $17,$1C		; 44 1C 17 ; Move block positive $17,$1C [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $150700.l,X		; FF 00 07 15 ; Subtract with carry (long,X) $150700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $07.b		; C5 07 ; Compare $07.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $0E.b		; C5 0E ; Compare $0E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	asl $8A.b,X		; 16 8A ; Arithmetic shift left $8A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($19.b),Y		; 11 19 ; OR accumulator with memory ($19.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$0C.b],Y		; 17 0C ; OR accumulator with memory (long indexed) [$0C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ora [$1A.b],Y		; 17 1A ; OR accumulator with memory (long indexed) [$1A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $0718.w,X		; 7D 18 07 ; Add $0718.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $1A.b		; C6 1A ; Decrement $1A.b [Reads: Direct Page] [Flags: ZN]
	ora $9B.b,S		; 03 9B ; OR accumulator with stack relative $9B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $9B08.w		; 1C 08 9B ; Test and reset bits $9B08.w [Reads: Accumulator] [Flags: Z]
	sbc $148801.l,X		; FF 01 88 14 ; Subtract with carry (long,X) $148801.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $8AD1.w		; 0C D1 8A ; Test and set bits $8AD1.w [Reads: Accumulator] [Flags: Z]
	ora ($15.b)		; 12 15 ; OR accumulator with memory (indirect) ($15.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($D1.b,S),Y		; 13 D1 ; OR accumulator (stack relative indirect indexed) ($D1.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora [$15.b]		; 07 15 ; OR accumulator with memory (long) [$15.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $04.b,X		; 15 04 ; OR accumulator with memory $04.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $0B15.w		; 20 15 0B ; Jump to subroutine at $0B15.w [Writes: Stack Pointer] [Flow: call]
	jsr $0316.w		; 20 16 03 ; Jump to subroutine at $0316.w [Writes: Stack Pointer] [Flow: call]
	ora $18.b,X		; 15 18 ; OR accumulator with memory $18.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $C5.b,X		; 15 C5 ; OR accumulator with memory $C5.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp $1B.b		; C5 1B ; Compare $1B.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tsb $20.b		; 04 20 ; Test and set bits $20.b [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr $141B.w		; 20 1B 14 ; Jump to subroutine at $141B.w [Writes: Stack Pointer] [Flow: call]
	lsr $1B1B.w		; 4E 1B 1B ; Logical shift right $1B1B.w [Flags: ZNC]
	lsr $00FF.w		; 4E FF 00 ; Logical shift right $00FF.w [Flags: ZNC]
	ora $03.b,X		; 15 03 ; OR accumulator with memory $03.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$15.b]		; A7 15 ; Load accumulator (long) [$15.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda [$18.b]		; A7 18 ; Load accumulator (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $61.b		; 06 61 ; Arithmetic shift left $61.b [Reads: Direct Page] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: ZN]
	ora [$A7.b]		; 07 A7 ; OR accumulator with memory (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $160A00.l,X		; FF 00 0A 16 ; Subtract with carry (long,X) $160A00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $090F.w,X		; 7E 0F 09 ; Rotate right $090F.w,X [Reads: X Index] [Flags: ZNC]
	ror $1616.w,X		; 7E 16 16 ; Rotate right $1616.w,X [Reads: X Index] [Flags: ZNC]
	ror $00FF.w,X		; 7E FF 00 ; Rotate right $00FF.w,X [Reads: X Index] [Flags: ZNC]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ora [$0A.b]		; 07 0A ; OR accumulator with memory (long) [$0A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	asl $0C04.w,X		; 1E 04 0C ; Arithmetic shift left $0C04.w,X [Reads: X Index] [Flags: ZNC]
	asl $1707.w,X		; 1E 07 17 ; Arithmetic shift left $1707.w,X [Reads: X Index] [Flags: ZNC]
	sbc $15.b,S		; E3 15 ; Subtract stack-relative $15.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora [$C7.b]		; 07 C7 ; OR accumulator with memory (long) [$C7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $E400.w,X		; FE 00 E4 ; Increment memory $E400.w,X [Reads: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc [$14.b],Y		; F7 14 ; Subtract with carry (long indexed) [$14.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora [$8F.b]		; 07 8F ; OR accumulator with memory (long) [$8F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $0900FF.l		; 8F FF 00 09 ; Store accumulator (long) $0900FF.l [Reads: Accumulator]
	tsb $5F.b		; 04 5F ; Test and set bits $5F.b [Reads: Accumulator] [Flags: Z]
	ora ($04.b),Y		; 11 04 ; OR accumulator with memory ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $00FF.w,X		; 5D FF 00 ; Exclusive OR accumulator with memory $00FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $4E.b,X		; 15 4E ; OR accumulator with memory $4E.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $180D.w		; 4E 0D 18 ; Logical shift right $180D.w [Flags: ZNC]
	.db $82, $13, $18		; 82 13 18 ; Branch always long to $82, $13, $18 [Flow: branch]
	sta $16.b,S		; 83 16 ; Store accumulator (stack relative) $16.b,S [Reads: Accumulator, Stack Pointer]
	trb $A7.b		; 14 A7 ; Test and reset bits $A7.b [Reads: Accumulator] [Flags: Z]
	asl $1C.b,X		; 16 1C ; Arithmetic shift left $1C.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lda [$FF.b]		; A7 FF ; Load accumulator (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc ($03.b),Y		; F1 03 ; Subtract with carry ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $140400.l,X		; FF 00 04 14 ; Subtract with carry (long,X) $140400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda [$06.b]		; A7 06 ; Load accumulator (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $15.b,S		; 03 15 ; OR accumulator with stack relative $15.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $18.b		; 06 18 ; Arithmetic shift left $18.b [Reads: Direct Page] [Flags: ZNC]
	lda [$09.b]		; A7 09 ; Load accumulator (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $15.b,S		; 03 15 ; OR accumulator with stack relative $15.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $A7180A.l		; 4F 0A 18 A7 ; Exclusive OR accumulator with memory (long) $A7180A.l [Writes: Accumulator] [Flags: ZN]
	tsb $4F08.w		; 0C 08 4F ; Test and set bits $4F08.w [Reads: Accumulator] [Flags: Z]
	sbc $1B0400.l,X		; FF 00 04 1B ; Subtract with carry (long,X) $1B0400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $0A.b		; A6 0A ; Load $0A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	asl $C3.b		; 06 C3 ; Arithmetic shift left $C3.b [Reads: Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $A6.b,X		; 16 A6 ; Arithmetic shift left $A6.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $0CC3.w,Y		; 19 C3 0C ; OR accumulator with memory $0CC3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $0E.b,X		; 15 0E ; OR accumulator with memory $0E.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$C3.b		; 09 C3 ; Logical OR #$C3.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $07		; 10 07 ; Branch if plus to $10, $07 [Flow: branch]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp $15.b,S		; C3 15 ; Compare accumulator (stack relative) $15.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	ora $16C3.w,Y		; 19 C3 16 ; OR accumulator with memory $16C3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora [$C3.b],Y		; 17 C3 ; OR accumulator with memory (long indexed) [$C3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $060500.l,X		; FF 00 05 06 ; Subtract with carry (long,X) $060500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $06A7.w		; 0C A7 06 ; Test and set bits $06A7.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $0A.b		; A6 0A ; Load $0A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	ora #$8A.b		; 09 8A ; Logical OR #$8A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $A5.b		; 05 A5 ; Logical OR $A5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora [$A7.b],Y		; 17 A7 ; OR accumulator with memory (long indexed) [$A7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($18.b),Y		; 11 18 ; OR accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$16.b]		; A7 16 ; Load accumulator (long) [$16.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $A7.b,X		; 16 A7 ; Arithmetic shift left $A7.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora [$08.b],Y		; 17 08 ; OR accumulator with memory (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $18.b		; A5 18 ; Load $18.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$80.b]		; 07 80 ; OR accumulator with memory (long) [$80.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $A608.w,Y		; 19 08 A6 ; OR accumulator with memory $A608.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$15.b],Y		; 17 15 ; OR accumulator with memory (long indexed) [$15.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($14.b)		; 12 14 ; OR accumulator with memory (indirect) ($14.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($15.b,X)		; A1 15 ; Load accumulator ($15.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $24.b		; 14 24 ; Test and reset bits $24.b [Reads: Accumulator] [Flags: Z]
	ora $1B.b,X		; 15 1B ; OR accumulator with memory $1B.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $16.b		; 24 16 ; Test bits $16.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($1A.b),Y		; 91 1A ; Store accumulator ($1A.b),Y [Reads: Accumulator, Direct Page, Y Index]
	trb $24.b		; 14 24 ; Test and reset bits $24.b [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $0C15.w,X		; 1E 15 0C ; Arithmetic shift left $0C15.w,X [Reads: X Index] [Flags: ZNC]
	cmp ($FF.b),Y		; D1 FF ; Compare accumulator ($FF.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$41.b],Y		; 17 41 ; OR accumulator with memory (long indexed) [$41.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$1A.b]		; 07 1A ; OR accumulator with memory (long) [$1A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $09.b		; 46 09 ; Logical shift right $09.b [Reads: Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($0B.b,X)		; 41 0B ; Exclusive OR accumulator with memory ($0B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $46.b		; 14 46 ; Test and reset bits $46.b [Reads: Accumulator] [Flags: Z]
	inc $E400.w,X		; FE 00 E4 ; Increment memory $E400.w,X [Reads: X Index] [Flags: ZN]
	asl $4106.w		; 0E 06 41 ; Arithmetic shift left $4106.w [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	tsb $41.b		; 04 41 ; Test and set bits $41.b [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $46.b		; 14 46 ; Test and reset bits $46.b [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($FF.b,X)		; 41 FF ; Exclusive OR accumulator with memory ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1E.b,X		; 15 1E ; OR accumulator with memory $1E.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $14.b		; 05 14 ; Logical OR $14.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $05.b		; C5 05 ; Compare $05.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cmp $0B.b		; C5 0B ; Compare $0B.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	asl $A7.b		; 06 A7 ; Arithmetic shift left $A7.b [Reads: Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $A7.b,X		; 15 A7 ; OR accumulator with memory $A7.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $17.b,X		; 15 17 ; OR accumulator with memory $17.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($0916.w,X)		; 7C 16 09 ; Jump indirect indexed to ($0916.w,X) [Reads: X Index] [Flow: jump]
	cmp $18.b		; C5 18 ; Compare $18.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc [$14.b]		; E7 14 ; Subtract with carry (long) [$14.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $1514.w,Y		; 19 14 15 ; OR accumulator with memory $1514.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	dec $1B.b		; C6 1B ; Decrement $1B.b [Reads: Direct Page] [Flags: ZN]
	ora ($24.b,S),Y		; 13 24 ; OR accumulator (stack relative indirect indexed) ($24.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $E400.w,X		; FE 00 E4 ; Increment memory $E400.w,X [Reads: X Index] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	jmp ($01FF.w,X)		; 7C FF 01 ; Jump indirect indexed to ($01FF.w,X) [Reads: X Index] [Flow: jump]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $800B.w		; 0C 0B 80 ; Test and set bits $800B.w [Reads: Accumulator] [Flags: Z]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	cmp $92.b		; C5 92 ; Compare $92.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $10, $5B		; 10 5B ; Branch if plus to $10, $5B [Flow: branch]
	sta ($19.b)		; 92 19 ; Store accumulator (indirect) ($19.b) [Reads: Accumulator, Direct Page]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	sty $10.b,X		; 94 10 ; Store Y register $10.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	cmp ($96.b),Y		; D1 96 ; Compare accumulator ($96.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $80, $96		; 80 96 ; Branch always to $80, $96 [Flow: branch]
	asl $5B.b,X		; 16 5B ; Arithmetic shift left $5B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $050600.l,X		; FF 00 06 05 ; Subtract with carry (long,X) $050600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $09.b		; C5 09 ; Compare $09.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	asl $0D96.w,X		; 1E 96 0D ; Arithmetic shift left $0D96.w,X [Reads: X Index] [Flags: ZNC]
	ora ($95.b),Y		; 11 95 ; OR accumulator with memory ($95.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($1E.b),Y		; 11 1E ; OR accumulator with memory ($1E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stx $15.b,Y		; 96 15 ; Store X register $15.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ora ($95.b),Y		; 11 95 ; OR accumulator with memory ($95.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc [$0B.b],Y		; F7 0B ; Subtract with carry (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $1C.b,X		; 15 1C ; OR accumulator with memory $1C.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$C5.b]		; 07 C5 ; OR accumulator with memory (long) [$C5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0B0A00.l,X		; FF 00 0A 0B ; Subtract with carry (long,X) $0B0A00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $180F.w,X		; 1E 0F 18 ; Arithmetic shift left $180F.w,X [Reads: X Index] [Flags: ZNC]
	asl $1C1B.w,X		; 1E 1B 1C ; Arithmetic shift left $1C1B.w,X [Reads: X Index] [Flags: ZNC]
	asl $0F15.w,X		; 1E 15 0F ; Arithmetic shift left $0F15.w,X [Reads: X Index] [Flags: ZNC]
	asl $0F0E.w,X		; 1E 0E 0F ; Arithmetic shift left $0F0E.w,X [Reads: X Index] [Flags: ZNC]
	cmp [$0F.b]		; C7 0F ; Compare accumulator (long) [$0F.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $14.b,X		; 15 14 ; OR accumulator with memory $14.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$13.b]		; 07 13 ; OR accumulator with memory (long) [$13.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $18.b		; 14 18 ; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	ora ($1A.b,S),Y		; 13 1A ; OR accumulator (stack relative indirect indexed) ($1A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $1A.b,X		; 15 1A ; OR accumulator with memory $1A.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $15.b		; 14 15 ; Test and reset bits $15.b [Reads: Accumulator] [Flags: Z]
	sbc $0E0900.l,X		; FF 00 09 0E ; Subtract with carry (long,X) $0E0900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stx $0B.b,Y		; 96 0B ; Store X register $0B.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ora ($95.b,X)		; 01 95 ; Logical OR ($95.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $960E.w		; 0D 0E 96 ; Logical OR $960E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $119501.l		; 0F 01 95 11 ; OR accumulator with memory (long) $119501.l [Writes: Accumulator] [Flags: ZN]
	asl $1396.w		; 0E 96 13 ; Arithmetic shift left $1396.w [Flags: ZNC]
	ora ($95.b,X)		; 01 95 ; Logical OR ($95.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $07.b,X		; 15 07 ; OR accumulator with memory $07.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($15.b,S),Y		; 13 15 ; OR accumulator (stack relative indirect indexed) ($15.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $FF96.w		; 0E 96 FF ; Arithmetic shift left $FF96.w [Flags: ZNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda [$04.b]		; A7 04 ; Load accumulator (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $A7.b,X		; 15 A7 ; OR accumulator with memory $A7.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $09.b		; 24 09 ; Test bits $09.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora [$24.b],Y		; 17 24 ; OR accumulator with memory (long indexed) [$24.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $7C10.w		; 0E 10 7C ; Arithmetic shift left $7C10.w [Flags: ZNC]
	trb $18.b		; 14 18 ; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	bit $17.b		; 24 17 ; Test bits $17.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $53.b		; 14 53 ; Test and reset bits $53.b [Reads: Accumulator] [Flags: Z]
	ora $17.b,X		; 15 17 ; OR accumulator with memory $17.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($15.b,S),Y		; 53 15 ; XOR accumulator (stack relative indirect indexed) ($15.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor ($18.b,S),Y		; 53 18 ; XOR accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	eor ($18.b,S),Y		; 53 18 ; XOR accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$53.b],Y		; 17 53 ; OR accumulator with memory (long indexed) [$53.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $53.b		; 14 53 ; Test and reset bits $53.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc [$19.b],Y		; F7 19 ; Subtract with carry (long indexed) [$19.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $100500.l,X		; FF 00 05 10 ; Subtract with carry (long,X) $100500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $4F0F06.l		; 4F 06 0F 4F ; Exclusive OR accumulator with memory (long) $4F0F06.l [Writes: Accumulator] [Flags: ZN]
	ora [$10.b]		; 07 10 ; OR accumulator with memory (long) [$10.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $0401FF.l		; 4F FF 01 04 ; Exclusive OR accumulator with memory (long) $0401FF.l [Writes: Accumulator] [Flags: ZN]
	trb $D1.b		; 14 D1 ; Test and reset bits $D1.b [Reads: Accumulator] [Flags: Z]
	bit #$08.b		; 89 08 ; Test bits #$08.b with accumulator [Reads: Accumulator] [Flags: Z]
	.db $80, $8A		; 80 8A ; Branch always to $80, $8A [Flow: branch]
	.db $10, $A5		; 10 A5 ; Branch if plus to $10, $A5 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($8F.b,S),Y		; 13 8F ; OR accumulator (stack relative indirect indexed) ($8F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $5B.b,X		; 16 5B ; Arithmetic shift left $5B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	trb $108F.w		; 1C 8F 10 ; Test and reset bits $108F.w [Reads: Accumulator] [Flags: Z]
	tsb $95A7.w		; 0C A7 95 ; Test and set bits $95A7.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx $97.b		; A6 97 ; Load $97.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx $17.b		; A6 17 ; Load $17.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta $8F0C18.l		; 8F 18 0C 8F ; Store accumulator (long) $8F0C18.l [Reads: Accumulator]
	trb $D114.w		; 1C 14 D1 ; Test and reset bits $D114.w [Reads: Accumulator] [Flags: Z]
	sbc $130401.l,X		; FF 01 04 13 ; Subtract with carry (long,X) $130401.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $89		; 80 89 ; Branch always to $80, $89 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp ($8A.b),Y		; D1 8A ; Compare accumulator ($8A.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0B5B.w		; 0E 5B 0B ; Arithmetic shift left $0B5B.w [Flags: ZNC]
	tsb $8C8F.w		; 0C 8F 8C ; Test and set bits $8C8F.w [Reads: Accumulator] [Flags: Z]
	.db $10, $A6		; 10 A6 ; Branch if plus to $10, $A6 [Flow: branch]
	sty $A518.w		; 8C 18 A5 ; Store Y register to $A518.w [Reads: Y Index]
	sty $0E.b,X		; 94 0E ; Store Y register $0E.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	.db $80, $15		; 80 15 ; Branch always to $80, $15 [Flow: branch]
	trb $968F.w		; 1C 8F 96 ; Test and reset bits $968F.w [Reads: Accumulator] [Flags: Z]
	asl $5B.b		; 06 5B ; Arithmetic shift left $5B.b [Reads: Direct Page] [Flags: ZNC]
	stx $09.b,Y		; 96 09 ; Store X register $09.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$A6.b		; 09 A6 ; Logical OR #$A6.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $1C.b,X		; 16 1C ; Arithmetic shift left $1C.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sta $D1079C.l		; 8F 9C 07 D1 ; Store accumulator (long) $D1079C.l [Reads: Accumulator]
	sbc $160500.l,X		; FF 00 05 16 ; Subtract with carry (long,X) $160500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $05.b,S		; 23 05 ; AND accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0523.w,Y		; 19 23 05 ; OR accumulator with memory $0523.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $0904.w		; 1C 04 09 ; Test and reset bits $0904.w [Reads: Accumulator] [Flags: Z]
	trb $1C.b		; 14 1C ; Test and reset bits $1C.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	bit $08.b		; 24 08 ; Test bits $08.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	trb $0924.w		; 1C 24 09 ; Test and reset bits $0924.w [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	bit $09.b		; 24 09 ; Test bits $09.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	trb $FF24.w		; 1C 24 FF ; Test and reset bits $FF24.w [Reads: Accumulator] [Flags: Z]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc $410907.l		; 6F 07 09 41 ; Add with carry (long) $410907.l [Writes: Accumulator] [Flags: ZVNC]
	ora [$17.b]		; 07 17 ; OR accumulator with memory (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $44150B.l		; 6F 0B 15 44 ; Add with carry (long) $44150B.l [Writes: Accumulator] [Flags: ZVNC]
	tsb $6F09.w		; 0C 09 6F ; Test and set bits $6F09.w [Reads: Accumulator] [Flags: Z]
	ora $106F08.l		; 0F 08 6F 10 ; OR accumulator with memory (long) $106F08.l [Writes: Accumulator] [Flags: ZN]
	adc $41.b,S		; 63 41 ; Add with carry (stack relative) $41.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	trb $09.b		; 14 09 ; Test and reset bits $09.b [Reads: Accumulator] [Flags: Z]
	eor ($16.b,X)		; 41 16 ; Exclusive OR accumulator with memory ($16.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	mvp $06,$19		; 44 19 06 ; Move block positive $06,$19 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	adc $441A19.l		; 6F 19 1A 44 ; Add with carry (long) $441A19.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $140600.l,X		; FF 00 06 14 ; Subtract with carry (long,X) $140600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($06.b,X)		; 61 06 ; Add with carry ($06.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc ($07.b,X)		; 61 07 ; Add with carry ($07.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsb $9B.b		; 04 9B ; Test and set bits $9B.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $0923.w		; 0C 23 09 ; Test and set bits $0923.w [Reads: Accumulator] [Flags: Z]
	ora $C6.b		; 05 C6 ; Logical OR $C6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $20.b		; 04 20 ; Test and set bits $20.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr $1B0B.w		; 20 0B 1B ; Jump to subroutine at $1B0B.w [Writes: Stack Pointer] [Flow: call]
	jsr $00FF.w		; 20 FF 00 ; Jump to subroutine at $00FF.w [Writes: Stack Pointer] [Flow: call]
	asl $18.b		; 06 18 ; Arithmetic shift left $18.b [Reads: Direct Page] [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ora [$1A.b]		; 07 1A ; OR accumulator with memory (long) [$1A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $1308.w		; 4E 08 13 ; Logical shift right $1308.w [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $0A9B.w		; 1C 9B 0A ; Test and reset bits $0A9B.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc ($0C.b,X)		; 61 0C ; Add with carry ($0C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl $4E.b,X		; 16 4E ; Arithmetic shift left $4E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $4E13.w		; 0D 13 4E ; Logical OR $4E13.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $10, $13		; 10 13 ; Branch if plus to $10, $13 [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	lsr $1C14.w		; 4E 14 1C ; Logical shift right $1C14.w [Flags: ZNC]
	lsr $00FF.w		; 4E FF 00 ; Logical shift right $00FF.w [Flags: ZNC]
	ora #$0E.b		; 09 0E ; Logical OR #$0E.b with accumulator [Writes: Accumulator] [Flags: ZN]
	stx $0D.b,Y		; 96 0D ; Store X register $0D.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ora ($95.b,X)		; 01 95 ; Logical OR ($95.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($0E.b),Y		; 11 0E ; OR accumulator with memory ($0E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stx $15.b,Y		; 96 15 ; Store X register $15.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ora ($95.b,X)		; 01 95 ; Logical OR ($95.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $04.b,X		; 15 04 ; OR accumulator with memory $04.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$97.b]		; 07 97 ; OR accumulator with memory (long) [$97.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $03.b,X		; 16 03 ; Arithmetic shift left $03.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp $16.b		; C5 16 ; Compare $16.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tsb $FFC5.w		; 0C C5 FF ; Test and set bits $FFC5.w [Reads: Accumulator] [Flags: Z]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$84.b],Y		; 17 84 ; OR accumulator with memory (long indexed) [$84.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $18.b		; 05 18 ; Logical OR $18.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sty $09.b		; 84 09 ; Store Y register to $09.b [Reads: Y Index]
	ora [$4F.b],Y		; 17 4F ; OR accumulator with memory (long indexed) [$4F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora #$18.b		; 09 18 ; Logical OR #$18.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $4F160A.l		; 4F 0A 16 4F ; Exclusive OR accumulator with memory (long) $4F160A.l [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $0B4F.w,Y		; 19 4F 0B ; OR accumulator with memory $0B4F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $4E.b,X		; 16 4E ; Arithmetic shift left $4E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $144E.w,Y		; 19 4E 14 ; OR accumulator with memory $144E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$84.b],Y		; 17 84 ; OR accumulator with memory (long indexed) [$84.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $18.b,X		; 16 18 ; Arithmetic shift left $18.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lda [$1B.b]		; A7 1B ; Load accumulator (long) [$1B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda [$FF.b]		; A7 FF ; Load accumulator (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $1502.w		; EC 02 15 ; Compare $1502.w with X register [Reads: X Index] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $18.b,S		; 83 18 ; Store accumulator (stack relative) $18.b,S [Reads: Accumulator, Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $1B.b,S		; 83 1B ; Store accumulator (stack relative) $1B.b,S [Reads: Accumulator, Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $FF.b,S		; 83 FF ; Store accumulator (stack relative) $FF.b,S [Reads: Accumulator, Stack Pointer]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$15.b]		; 07 15 ; OR accumulator with memory (long) [$15.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $FF.b,X		; 15 FF ; OR accumulator with memory $FF.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $D1.b,S		; 03 D1 ; OR accumulator with stack relative $D1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $8B5B.w		; 0E 5B 8B ; Arithmetic shift left $8B5B.w [Flags: ZNC]
	ora [$A6.b],Y		; 17 A6 ; OR accumulator with memory (long indexed) [$A6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $A50F.w		; 8C 0F A5 ; Store Y register to $A50F.w [Reads: Y Index]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	sta $801410.l		; 8F 10 14 80 ; Store accumulator (long) $801410.l [Reads: Accumulator]
	sta $0F.b,X		; 95 0F ; Store accumulator to $0F.b,X [Reads: Accumulator, X Index]
	lda $FF.b		; A5 FF ; Load $FF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($8A.b,X)		; 01 8A ; Logical OR ($8A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora #$A5.b		; 09 A5 ; Logical OR #$A5.b with accumulator [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $8C5C.w		; 0E 5C 8C ; Arithmetic shift left $8C5C.w [Flags: ZNC]
	ora $0B10A6.l		; 0F A6 10 0B ; OR accumulator with memory (long) $0B10A6.l [Writes: Accumulator] [Flags: ZN]
	sta $8F1610.l		; 8F 10 16 8F ; Store accumulator (long) $8F1610.l [Reads: Accumulator]
	stx $0C.b,Y		; 96 0C ; Store X register $0C.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	cmp ($96.b),Y		; D1 96 ; Compare accumulator ($96.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	ora $0997A6.l		; 0F A6 97 09 ; OR accumulator with memory (long) $0997A6.l [Writes: Accumulator] [Flags: ZN]
	lda $97.b		; A5 97 ; Load $97.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $80.b,X		; 16 80 ; Arithmetic shift left $80.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $8005.w		; 1C 05 80 ; Test and reset bits $8005.w [Reads: Accumulator] [Flags: Z]
	trb $8F0F.w		; 1C 0F 8F ; Test and reset bits $8F0F.w [Reads: Accumulator] [Flags: Z]
	sbc $170500.l,X		; FF 00 05 17 ; Subtract with carry (long,X) $170500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $05.b,S		; A3 05 ; Load accumulator (stack relative) $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$A4.b],Y		; 17 A4 ; OR accumulator with memory (long indexed) [$A4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $17.b		; 05 17 ; Logical OR $17.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx #$FF.b		; A2 FF ; Load #$FF.b into X register [Writes: X Index] [Flags: ZN]
	brk $95.b		; 00 95 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $9618.w		; 0C 18 96 ; Test and set bits $9618.w [Reads: Accumulator] [Flags: Z]
	tsb $FF18.w		; 0C 18 FF ; Test and set bits $FF18.w [Reads: Accumulator] [Flags: Z]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $6A.b		; 04 6A ; Test and set bits $6A.b [Reads: Accumulator] [Flags: Z]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: ZNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $1A.b		; 06 1A ; Arithmetic shift left $1A.b [Reads: Direct Page] [Flags: ZNC]
	mvp $1A,$09		; 44 09 1A ; Move block positive $1A,$09 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	mvp $00,$FF		; 44 FF 00 ; Move block positive $00,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $EB17.w		; 0D 17 EB ; Logical OR $EB17.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($07.b)		; 92 07 ; Store accumulator (indirect) ($07.b) [Reads: Accumulator, Direct Page]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$E3.b]		; 07 E3 ; OR accumulator with memory (long) [$E3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZNC]
	sbc $07.b,S		; E3 07 ; Subtract stack-relative $07.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora [$E3.b]		; 07 E3 ; OR accumulator with memory (long) [$E3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$08.b]		; 07 08 ; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $10.b,S		; E3 10 ; Subtract stack-relative $10.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora ($EB.b,S),Y		; 13 EB ; OR accumulator (stack relative indirect indexed) ($EB.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $178500.l,X		; FF 00 85 17 ; Subtract with carry (long,X) $178500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $190700.l,X		; FF 00 07 19 ; Subtract with carry (long,X) $190700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $6F1808.l		; 6F 08 18 6F ; Add with carry (long) $6F1808.l [Writes: Accumulator] [Flags: ZVNC]
	ora #$17.b		; 09 17 ; Logical OR #$17.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $AD0616.l		; 6F 16 06 AD ; Add with carry (long) $AD0616.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $0F0900.l,X		; FF 00 09 0F ; Subtract with carry (long,X) $0F0900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $6F1009.l		; 6F 09 10 6F ; Add with carry (long) $6F1009.l [Writes: Accumulator] [Flags: ZVNC]
	ora #$11.b		; 09 11 ; Logical OR #$11.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $6F1B0E.l		; 6F 0E 1B 6F ; Add with carry (long) $6F1B0E.l [Writes: Accumulator] [Flags: ZVNC]
	ora ($0F.b)		; 12 0F ; OR accumulator with memory (indirect) ($0F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $6F1112.l		; 6F 12 11 6F ; Add with carry (long) $6F1112.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $1B0B00.l,X		; FF 00 0B 1B ; Subtract with carry (long,X) $1B0B00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $6F170F.l		; 6F 0F 17 6F ; Add with carry (long) $6F170F.l [Writes: Accumulator] [Flags: ZVNC]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $6F0F17.l		; 6F 17 0F 6F ; Add with carry (long) $6F0F17.l [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc $0400FF.l		; 6F FF 00 04 ; Add with carry (long) $0400FF.l [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $6F		; 10 6F ; Branch if plus to $10, $6F [Flow: branch]
	tsb $13.b		; 04 13 ; Test and set bits $13.b [Reads: Accumulator] [Flags: Z]
	adc $6F150B.l		; 6F 0B 15 6F ; Add with carry (long) $6F150B.l [Writes: Accumulator] [Flags: ZVNC]
	tsb $6F0B.w		; 0C 0B 6F ; Test and set bits $6F0B.w [Reads: Accumulator] [Flags: Z]
	ora $6F0B.w		; 0D 0B 6F ; Logical OR $6F0B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $6F15.w		; 0D 15 6F ; Logical OR $6F15.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $FF6F15.l		; 0F 15 6F FF ; OR accumulator with memory (long) $FF6F15.l [Writes: Accumulator] [Flags: ZN]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$26.b]		; 07 26 ; OR accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$26.b],Y		; 17 26 ; OR accumulator with memory (long indexed) [$26.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $2607.w		; 0C 07 26 ; Test and set bits $2607.w [Reads: Accumulator] [Flags: Z]
	tsb $2619.w		; 0C 19 26 ; Test and set bits $2619.w [Reads: Accumulator] [Flags: Z]
	sbc $0B0B00.l,X		; FF 00 0B 0B ; Subtract with carry (long,X) $0B0B00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $171400.l,X		; FF 00 14 17 ; Subtract with carry (long,X) $171400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($FF.b,S),Y		; 93 FF ; Store accumulator (stack relative indirect indexed) ($FF.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	asl $180B.w		; 0E 0B 18 ; Arithmetic shift left $180B.w [Flags: ZNC]
	trb $1809.w		; 1C 09 18 ; Test and reset bits $1809.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $24.b,S		; 03 24 ; OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $241C.w		; 0C 1C 24 ; Test and set bits $241C.w [Reads: Accumulator] [Flags: Z]
	sbc $170900.l,X		; FF 00 09 17 ; Subtract with carry (long,X) $170900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	trb $18.b		; 14 18 ; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $18.b		; 06 18 ; Arithmetic shift left $18.b [Reads: Direct Page] [Flags: ZNC]
	asl $00FF.w,X		; 1E FF 00 ; Arithmetic shift left $00FF.w,X [Reads: X Index] [Flags: ZNC]
	ora $09.b,S		; 03 09 ; OR accumulator with stack relative $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $6F1003.l		; 6F 03 10 6F ; Add with carry (long) $6F1003.l [Writes: Accumulator] [Flags: ZVNC]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	adc $6F0A04.l		; 6F 04 0A 6F ; Add with carry (long) $6F0A04.l [Writes: Accumulator] [Flags: ZVNC]
	ora [$09.b]		; 07 09 ; OR accumulator with memory (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $6F030A.l		; 6F 0A 03 6F ; Add with carry (long) $6F030A.l [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $6F.b		; 05 6F ; Logical OR $6F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $6F0E.w		; 0C 0E 6F ; Test and set bits $6F0E.w [Reads: Accumulator] [Flags: Z]
	.db $10, $1B		; 10 1B ; Branch if plus to $10, $1B [Flow: branch]
	lda $1313.w		; AD 13 13 ; Load $1313.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $1000FF.l		; 6F FF 00 10 ; Add with carry (long) $1000FF.l [Writes: Accumulator] [Flags: ZVNC]
	ora $106F.w,Y		; 19 6F 10 ; OR accumulator with memory $106F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $116F.w		; 1C 6F 11 ; Test and reset bits $116F.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $6F1D11.l		; 6F 11 1D 6F ; Add with carry (long) $6F1D11.l [Writes: Accumulator] [Flags: ZVNC]
	ora ($17.b)		; 12 17 ; OR accumulator with memory (indirect) ($17.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $6F1E12.l		; 6F 12 1E 6F ; Add with carry (long) $6F1E12.l [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $6F.b		; 06 6F ; Arithmetic shift left $6F.b [Reads: Direct Page] [Flags: ZNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora #$6F.b		; 09 6F ; Logical OR #$6F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	trb $6F07.w		; 1C 07 6F ; Test and reset bits $6F07.w [Reads: Accumulator] [Flags: Z]
	trb $6F08.w		; 1C 08 6F ; Test and reset bits $6F08.w [Reads: Accumulator] [Flags: Z]
	sbc $061400.l,X		; FF 00 14 06 ; Subtract with carry (long,X) $061400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $171400.l,X		; FF 00 14 17 ; Subtract with carry (long,X) $171400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($FF.b)		; 32 FF ; AND accumulator with memory (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and ($FF.b)		; 32 FF ; AND accumulator with memory (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $131815.l		; 0F 15 18 13 ; OR accumulator with memory (long) $131815.l [Writes: Accumulator] [Flags: ZN]
	ora ($18.b),Y		; 11 18 ; OR accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$0C.b],Y		; 17 0C ; OR accumulator with memory (long indexed) [$0C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $170E00.l,X		; FF 00 0E 17 ; Subtract with carry (long,X) $170E00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $10.b,S		; E3 10 ; Subtract stack-relative $10.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $11.b,S		; E3 11 ; Subtract stack-relative $11.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora $E3.b,X		; 15 E3 ; OR accumulator with memory $E3.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $170D00.l,X		; FF 00 0D 17 ; Subtract with carry (long,X) $170D00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($0A.b,S),Y		; 93 0A ; Store accumulator (stack relative indirect indexed) ($0A.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	ora $1226.w,Y		; 19 26 12 ; OR accumulator with memory $1226.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $26.b,X		; 15 26 ; OR accumulator with memory $26.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $1809.w		; 0E 09 18 ; Arithmetic shift left $1809.w [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $24.b		; 05 24 ; Logical OR $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $E3.b,X		; 16 E3 ; Arithmetic shift left $E3.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $11.b,S		; E3 11 ; Subtract stack-relative $11.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora $00FF24.l		; 0F 24 FF 00 ; OR accumulator with memory (long) $00FF24.l [Writes: Accumulator] [Flags: ZN]
	ora ($16.b)		; 12 16 ; OR accumulator with memory (indirect) ($16.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $14.b,X		; 16 14 ; Arithmetic shift left $14.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $1A.b,X		; 16 1A ; Arithmetic shift left $1A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $18.b		; 24 18 ; Test bits $18.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$BB.b]		; 07 BB ; OR accumulator with memory (long) [$BB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0B1B00.l,X		; FF 00 1B 0B ; Subtract with carry (long,X) $0B1B00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc $081300.l,X		; FF 00 13 08 ; Subtract with carry (long,X) $081300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($FF.b,S),Y		; 33 FF ; AND accumulator (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1F.b,S		; 03 1F ; OR accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $061500.l,X		; FF 00 15 06 ; Subtract with carry (long,X) $061500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $0A1B.w,X		; BC 1B 0A ; Load Y register $0A1B.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	and #$17.b		; 29 17 ; Logical AND #$17.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$35.b],Y		; 17 35 ; OR accumulator with memory (long indexed) [$35.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $1A1700.l,X		; FF 00 17 1A ; Subtract with carry (long,X) $1A1700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($FF.b,S),Y		; 73 FF ; Add with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$16.b]		; 07 16 ; OR accumulator with memory (long) [$16.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $081B00.l,X		; FF 00 1B 08 ; Subtract with carry (long,X) $081B00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc $031500.l,X		; FF 00 15 03 ; Subtract with carry (long,X) $031500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora [$6D.b],Y		; 17 6D ; OR accumulator with memory (long indexed) [$6D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00FF.w		; 6D FF 00 ; Add $00FF.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	asl $09.b,X		; 16 09 ; Arithmetic shift left $09.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $0C.b,X		; 16 0C ; Arithmetic shift left $0C.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0B09.w,Y		; 19 09 0B ; OR accumulator with memory $0B09.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: ZNC]
	sbc $0A1B00.l,X		; FF 00 1B 0A ; Subtract with carry (long,X) $0A1B00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc #$FF.b		; E9 FF ; Subtract #$FF.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF16.w,Y		; 19 16 FF ; OR accumulator with memory $FF16.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $ED0606.l		; 0F 06 06 ED ; OR accumulator with memory (long) $ED0606.l [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $F0.b		; 06 F0 ; Arithmetic shift left $F0.b [Reads: Direct Page] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora [$F2.b]		; 07 F2 ; OR accumulator with memory (long) [$F2.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora #$EF.b		; 09 EF ; Logical OR #$EF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $12.b,S		; 03 12 ; OR accumulator with stack relative $12.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $07.b		; 04 07 ; Test and set bits $07.b [Reads: Accumulator] [Flags: Z]
	ora $FF15.w		; 0D 15 FF ; Logical OR $FF15.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$E3.b],Y		; 17 E3 ; OR accumulator with memory (long indexed) [$E3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$18.b]		; 07 18 ; OR accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $08.b,S		; E3 08 ; Subtract stack-relative $08.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora [$E3.b],Y		; 17 E3 ; OR accumulator with memory (long indexed) [$E3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora [$83.b]		; 07 83 ; OR accumulator with memory (long) [$83.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	sta $14.b,S		; 83 14 ; Store accumulator (stack relative) $14.b,S [Reads: Accumulator, Stack Pointer]
	tsb $1A83.w		; 0C 83 1A ; Test and set bits $1A83.w [Reads: Accumulator] [Flags: Z]
	tsb $FF83.w		; 0C 83 FF ; Test and set bits $FF83.w [Reads: Accumulator] [Flags: Z]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $5B.b		; 05 5B ; Logical OR $5B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0A.b,X		; 16 0A ; Arithmetic shift left $0A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jmp $0600FF.l		; 5C FF 00 06 ; Jump long to $0600FF.l [Flow: jump]
	asl $28.b		; 06 28 ; Arithmetic shift left $28.b [Reads: Direct Page] [Flags: ZNC]
	asl $18.b		; 06 18 ; Arithmetic shift left $18.b [Reads: Direct Page] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $071500.l,X		; FF 00 15 07 ; Subtract with carry (long,X) $071500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc $071500.l,X		; FF 00 15 07 ; Subtract with carry (long,X) $071500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc $0B1B00.l,X		; FF 00 1B 0B ; Subtract with carry (long,X) $0B1B00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $FF.b		; 65 FF ; Add $FF.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$28.b]		; 07 28 ; OR accumulator with memory (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $17.b		; 14 17 ; Test and reset bits $17.b [Reads: Accumulator] [Flags: Z]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc $071800.l,X		; FF 00 18 07 ; Subtract with carry (long,X) $071800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($14.b)		; 72 14 ; Add with carry (indirect) ($14.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $FF28.w,Y		; 19 28 FF ; OR accumulator with memory $FF28.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$C8.b],Y		; 17 C8 ; OR accumulator with memory (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$17.b]		; 07 17 ; OR accumulator with memory (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $07.b,S		; E3 07 ; Subtract stack-relative $07.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $08.b,S		; E3 08 ; Subtract stack-relative $08.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora [$E3.b],Y		; 17 E3 ; OR accumulator with memory (long indexed) [$E3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $09.b,S		; E3 09 ; Subtract stack-relative $09.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora [$72.b]		; 07 72 ; OR accumulator with memory (long) [$72.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $171800.l,X		; FF 00 18 17 ; Subtract with carry (long,X) $171800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($FF.b)		; 72 FF ; Add with carry (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FFBB.w,Y		; 19 BB FF ; OR accumulator with memory $FFBB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $FF29.w		; 0E 29 FF ; Arithmetic shift left $FF29.w [Flags: ZNC]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $180900.l,X		; FF 00 09 18 ; Subtract with carry (long,X) $180900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	stx $05.b,Y		; 96 05 ; Store X register $05.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $091900.l,X		; FF 00 19 09 ; Subtract with carry (long,X) $091900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $FF.b,X		; B5 FF ; Load $FF.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $E3.b		; 05 E3 ; Logical OR $E3.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $08.b,S		; E3 08 ; Subtract stack-relative $08.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora $E3.b		; 05 E3 ; Logical OR $E3.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $E3.b		; 06 E3 ; Arithmetic shift left $E3.b [Reads: Direct Page] [Flags: ZNC]
	asl $18.b,X		; 16 18 ; Arithmetic shift left $18.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc $171600.l,X		; FF 00 16 17 ; Subtract with carry (long,X) $171600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc $170700.l,X		; FF 00 07 17 ; Subtract with carry (long,X) $170700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($08.b)		; B2 08 ; Load accumulator (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $09.b,S		; E3 09 ; Subtract stack-relative $09.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $1A.b		; 04 1A ; Test and set bits $1A.b [Reads: Accumulator] [Flags: Z]
	sbc $071800.l,X		; FF 00 18 07 ; Subtract with carry (long,X) $071800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($18.b),Y		; 31 18 ; AND accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$31.b],Y		; 17 31 ; OR accumulator with memory (long indexed) [$31.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $031600.l,X		; FF 00 16 03 ; Subtract with carry (long,X) $031600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $0C.b,X		; 16 0C ; Arithmetic shift left $0C.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$08.b],Y		; 17 08 ; OR accumulator with memory (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora $18.b,S		; 03 18 ; OR accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc $081600.l,X		; FF 00 16 08 ; Subtract with carry (long,X) $081600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc $081600.l,X		; FF 00 16 08 ; Subtract with carry (long,X) $081600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc $071500.l,X		; FF 00 15 07 ; Subtract with carry (long,X) $071500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $15.b,S		; E3 15 ; Subtract stack-relative $15.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $16.b,S		; E3 16 ; Subtract stack-relative $16.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora [$E3.b]		; 07 E3 ; OR accumulator with memory (long) [$E3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $08.b,X		; 16 08 ; Arithmetic shift left $08.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $14.b,S		; E3 14 ; Subtract stack-relative $14.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	trb $FFEB.w		; 1C EB FF ; Test and reset bits $FFEB.w [Reads: Accumulator] [Flags: Z]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$EB.b]		; 07 EB ; OR accumulator with memory (long) [$EB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FB.b		; 02 FB ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $62FFFB.l,X		; FF FB FF 62 ; Subtract with carry (long,X) $62FFFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $05.b		; 02 05 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004062.l,X		; FF 62 40 00 ; Subtract with carry (long,X) $004062.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FB.b		; 02 FB ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $620005.l,X		; FF 05 00 62 ; Subtract with carry (long,X) $620005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $05.b		; 02 05 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $62FFF8.l,X		; FF F8 FF 62 ; Subtract with carry (long,X) $62FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004062.l,X		; FF 62 40 00 ; Subtract with carry (long,X) $004062.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $620008.l,X		; FF 08 00 62 ; Subtract with carry (long,X) $620008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $64FFF8.l,X		; FF F8 FF 64 ; Subtract with carry (long,X) $64FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004064.l,X		; FF 64 40 00 ; Subtract with carry (long,X) $004064.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $640008.l,X		; FF 08 00 64 ; Subtract with carry (long,X) $640008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $66FFF8.l,X		; FF F8 FF 66 ; Subtract with carry (long,X) $66FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004066.l,X		; FF 66 40 00 ; Subtract with carry (long,X) $004066.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $660008.l,X		; FF 08 00 66 ; Subtract with carry (long,X) $660008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $68FFF8.l,X		; FF F8 FF 68 ; Subtract with carry (long,X) $68FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000068.l,X		; FF 68 00 00 ; Subtract with carry (long,X) $000068.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $680008.l,X		; FF 08 00 68 ; Subtract with carry (long,X) $680008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $6AFFF8.l,X		; FF F8 FF 6A ; Subtract with carry (long,X) $6AFFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00406A.l,X		; FF 6A 40 00 ; Subtract with carry (long,X) $00406A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $6A0008.l,X		; FF 08 00 6A ; Subtract with carry (long,X) $6A0008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6A.b		; 00 6A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $4EFFF8.l,X		; FF F8 FF 4E ; Subtract with carry (long,X) $4EFFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00404E.l,X		; FF 4E 40 00 ; Subtract with carry (long,X) $00404E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $4E0008.l,X		; FF 08 00 4E ; Subtract with carry (long,X) $4E0008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4E.b		; 00 4E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	cop $8B.b		; 02 8B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jsr $EDA7.w		; 20 A7 ED ; Jump to subroutine at $EDA7.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $63		; F0 63 ; Branch if equal to $F0, $63 [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $0DD0.w,Y		; B9 D0 0D ; Load $0DD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $F6		; 10 F6 ; Branch if plus to $10, $F6 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	sty $0AAA.w		; 8C AA 0A ; Store Y register to $0AAA.w [Reads: Y Index]
	jsl $09AF32.l		; 22 32 AF 09 ; Jump to subroutine long $09AF32.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	stz $0FFC.w		; 9C FC 0F ; Store zero to $0FFC.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$07.b		; 49 07 ; Exclusive OR #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$EC9F.w		; 69 9F EC ; Add #$EC9F.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $F8FC.w		; 0C FC F8 ; Test and set bits $F8FC.w [Reads: Accumulator] [Flags: Z]
	pea $0000.w		; F4 00 00 ; Push absolute address $0000.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A900FF.l,X		; FF FF 00 A9 ; Subtract with carry (long,X) $A900FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $9D.b		; 02 9D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $BD0F.w		; 20 0F BD ; Jump to subroutine at $BD0F.w [Writes: Stack Pointer] [Flow: call]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	cmp #$20.b		; [PATTERN: Memory clearing operation] C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $EEAD.w		; 4C AD EE ; Jump to $EEAD.w [Flow: jump]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	lda $5B.b		; A5 5B ; Load $5B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $17		; F0 17 ; Branch if equal to $F0, $17 [Flow: branch]
	jsl $09AF32.l		; 22 32 AF 09 ; Jump to subroutine long $09AF32.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $11		; 90 11 ; Branch if carry clear to $90, $11 [Flow: branch]
	ldy $0E20.w,X		; BC 20 0E ; Load Y register $0E20.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpy #$D6.b		; C0 D6 ; Compare #$D6.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $B0, $0D		; B0 0D ; Branch if carry set to $B0, $0D [Flow: branch]
	cpy #$7A.b		; C0 7A ; Compare #$7A.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $00F945.l		; 22 45 F9 00 ; Jump to subroutine long $00F945.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jmp $EEAD.w		; 4C AD EE ; Jump to $EEAD.w [Flow: jump]
	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	jmp $EEAD.w		; 4C AD EE ; Jump to $EEAD.w [Flow: jump]
	sty $0FB5.w		; 8C B5 0F ; Store Y register to $0FB5.w [Reads: Y Index]
	lda #$EA.b		; A9 EA ; Load #$EA.b into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy #$0E.b		; A0 0E ; Load #$0E.b into Y register [Writes: Y Index] [Flags: ZN]
	jsl $1DF65F.l		; 22 5F F6 1D ; Jump to subroutine long $1DF65F.l [Writes: Stack Pointer] [Flow: call]
	jsl $09AE64.l		; 22 64 AE 09 ; Jump to subroutine long $09AE64.l [Writes: Stack Pointer] [Flow: call]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F80.w,Y		; 99 80 0F ; Store accumulator to $0F80.w,Y [Reads: Accumulator, Y Index]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0F20.w,Y		; 99 20 0F ; Store accumulator to $0F20.w,Y [Reads: Accumulator, Y Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$09.b		; C0 09 ; Compare #$09.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D90.w,Y		; 99 90 0D ; Store accumulator to $0D90.w,Y [Reads: Accumulator, Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$03.b		; 69 03 ; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	lda $0FB5.w		; AD B5 0F ; Load $0FB5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$CE.b		; C9 CE ; Compare #$CE.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$CB.b		; C9 CB ; Compare #$CB.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda #$78.b		; A9 78 ; Load #$78.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $0C		; 90 0C ; Branch if carry clear to $90, $0C [Flow: branch]
	cmp #$70.b		; C9 70 ; Compare #$70.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	jsl $068526.l		; 22 26 85 06 ; Jump to subroutine long $068526.l [Writes: Stack Pointer] [Flow: call]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $0E20.w,X		; BD 20 0E ; Load $0E20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	cmp #$92.b		; C9 92 ; Compare #$92.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lsr $0E.b		; 46 0E ; Logical shift right $0E.b [Reads: Direct Page] [Flags: ZNC]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$C0.b		; C9 C0 ; Compare #$C0.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $01		; 90 01 ; Branch if carry clear to $90, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $0DBB7C.l		; 22 7C BB 0D ; Jump to subroutine long $0DBB7C.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	and $0E.b		; 25 0E ; Logical AND $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $71		; D0 71 ; Branch if not equal to $D0, $71 [Flow: branch]
	lda #$1C.b		; A9 1C ; Load #$1C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $69		; 30 69 ; Branch if minus to $30, $69 [Flow: branch]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AAA.w		; 8D AA 0A ; Store accumulator to $0AAA.w [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,Y		; 99 D0 0D ; Store accumulator to $0DD0.w,Y [Reads: Accumulator, Y Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Accumulator, Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$92.b		; C9 92 ; Compare #$92.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $EDEF.w,X		; 7D EF ED ; Add $EDEF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Accumulator, Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $EDFF.w,X		; 7D FF ED ; Add $EDFF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Accumulator, Y Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$92.b		; C9 92 ; Compare #$92.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $EDEF.w,X		; 7D EF ED ; Add $EDEF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $04.b		; E5 04 ; Subtract $04.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Accumulator, Y Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	adc $EDFF.w,X		; 7D FF ED ; Add $EDFF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Accumulator, Y Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	sta $0D90.w,Y		; 99 90 0D ; Store accumulator to $0D90.w,Y [Reads: Accumulator, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: ZN]
	cpy $0FA0.w		; CC A0 0F ; Compare $0FA0.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $2A		; F0 2A ; Branch if equal to $F0, $2A [Flow: branch]
	lda $0DD0.w,Y		; B9 D0 0D ; Load $0DD0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	lda $0CAA.w,Y		; B9 AA 0C ; Load $0CAA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$7A.b		; C9 7A ; Compare #$7A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $17		; F0 17 ; Branch if equal to $F0, $17 [Flow: branch]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DD0.w,Y		; 99 D0 0D ; Store accumulator to $0DD0.w,Y [Reads: Accumulator, Y Index]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Accumulator, Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E60.w,Y		; 99 60 0E ; Store accumulator to $0E60.w,Y [Reads: Accumulator, Y Index]
	sta $0BE0.w,Y		; 99 E0 0B ; Store accumulator to $0BE0.w,Y [Reads: Accumulator, Y Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Accumulator, Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $CE		; 10 CE ; Branch if plus to $10, $CE [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0009.l,X		; FF 09 00 FF ; Subtract with carry (long,X) $FF0009.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FC0009.l,X		; FF 09 00 FC ; Subtract with carry (long,X) $FC0009.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF0009.l,X		; FF 09 00 FF ; Subtract with carry (long,X) $FF0009.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FA000A.l,X		; FF 0A 00 FA ; Subtract with carry (long,X) $FA000A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF0009.l,X		; FF 09 00 FF ; Subtract with carry (long,X) $FF0009.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F9000C.l,X		; FF 0C 00 F9 ; Subtract with carry (long,X) $F9000C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FE0009.l,X		; FF 09 00 FE ; Subtract with carry (long,X) $FE0009.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F7000D.l,X		; FF 0D 00 F7 ; Subtract with carry (long,X) $F7000D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FD0009.l,X		; FF 09 00 FD ; Subtract with carry (long,X) $FD0009.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FC000E.l,X		; FF 0E 00 FC ; Subtract with carry (long,X) $FC000E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $09FFFC.l,X		; FF FC FF 09 ; Subtract with carry (long,X) $09FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FDFFFD.l,X		; FF FD FF FD ; Subtract with carry (long,X) $FDFFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FC0009.l,X		; FF 09 00 FC ; Subtract with carry (long,X) $FC0009.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $060004.l,X		; FF 04 00 06 ; Subtract with carry (long,X) $060004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $060004.l,X		; FF 04 00 06 ; Subtract with carry (long,X) $060004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $090008.l,X		; FF 08 00 09 ; Subtract with carry (long,X) $090008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $09FFFA.l,X		; FF FA FF 09 ; Subtract with carry (long,X) $09FFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0CFFF9.l,X		; FF F9 FF 0C ; Subtract with carry (long,X) $0CFFF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $04FFF7.l,X		; FF F7 FF 04 ; Subtract with carry (long,X) $04FFF7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($080C.w,X)		; FC 0C 08 ; Jump to subroutine indirect indexed ($080C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0209.w		; 0D 09 02 ; Logical OR $0209.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsr ($0A10.w,X)		; FC 10 0A ; Jump to subroutine indirect indexed ($0A10.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	asl $FC0E.w		; 0E 0E FC ; Arithmetic shift left $FC0E.w [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $FF		; 10 FF ; Branch if plus to $10, $FF [Flow: branch]
	cop $FB.b		; 02 FB ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $F9.b,S		; 03 F9 ; OR accumulator with stack relative $F9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	tsb $0A.b		; 04 0A ; Test and set bits $0A.b [Reads: Accumulator] [Flags: Z]
	sbc [$04.b],Y		; F7 04 ; Subtract with carry (long indexed) [$04.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	inc $04.b,X		; F6 04 ; Increment memory $04.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $04F4.w		; 0E F4 04 ; Arithmetic shift left $04F4.w [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $0803F1.l		; 0F F1 03 08 ; OR accumulator with memory (long) $0803F1.l [Writes: Accumulator] [Flags: ZN]
	ora ($EF.b),Y		; 11 EF ; OR accumulator with memory ($EF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $585858.l		; 0F 58 58 58 ; OR accumulator with memory (long) $585858.l [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $5959.w,Y		; 59 59 59 ; Exclusive OR accumulator with memory $5959.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5959.w,Y		; 59 59 59 ; Exclusive OR accumulator with memory $5959.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5959.w,Y		; 59 59 59 ; Exclusive OR accumulator with memory $5959.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5959.w,Y		; 59 59 59 ; Exclusive OR accumulator with memory $5959.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5959.w,Y		; 59 59 59 ; Exclusive OR accumulator with memory $5959.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5959.w,Y		; 59 59 59 ; Exclusive OR accumulator with memory $5959.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5959.w,Y		; 59 59 59 ; Exclusive OR accumulator with memory $5959.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5959.w,Y		; 59 59 59 ; Exclusive OR accumulator with memory $5959.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5959.w,Y		; 59 59 59 ; Exclusive OR accumulator with memory $5959.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $5959.w,Y		; 59 59 59 ; Exclusive OR accumulator with memory $5959.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $8059.w,Y		; 59 59 80 ; Exclusive OR accumulator with memory $8059.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $BFB5.w,X		; DE B5 BF ; Decrement memory $BFB5.w,X [Reads: X Index] [Flags: ZN]
	inc $7FF9.w,X		; FE F9 7F ; Increment memory $7FF9.w,X [Reads: X Index] [Flags: ZN]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0FC6.w		; AD C6 0F ; Load $0FC6.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $0B		; B0 0B ; Branch if carry set to $B0, $0B [Flow: branch]
	lda $7FF92C.l,X		; BF 2C F9 7F ; Load long $7FF92C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	jsr $F198.w		; 20 98 F1 ; Jump to subroutine at $F198.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $7FF90E.l,X		; BF 0E F9 7F ; Load long $7FF90E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor #$07.b		; 49 07 ; Exclusive OR #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cpy #$04.b		; C0 04 ; Compare #$04.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	ldy $1B.b		; A4 1B ; Load $1B.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$20.b		; 69 20 ; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $EF8B.w,X		; 7D 8B EF ; Add $EF8B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F00B.w,X		; 7D 0B F0 ; Add $F00B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $0FB5.w		; AD B5 0F ; Load $0FB5.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$4E.b		; A9 4E ; Load #$4E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	lda $F04B.w,X		; BD 4B F0 ; Load $F04B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$F2.b		; A9 F2 ; Load #$F2.b into accumulator [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $F08B.w,X		; BD 8B F0 ; Load $F08B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $B1		; 10 B1 ; Branch if plus to $10, $B1 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $100008.l,X		; FF 08 00 10 ; Subtract with carry (long,X) $100008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0F0008.l,X		; FF 08 00 0F ; Subtract with carry (long,X) $0F0008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0B0007.l,X		; FF 07 00 0B ; Subtract with carry (long,X) $0B0007.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cop $0B.b		; 02 0B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
.ACCU 8
	sep #$E2		; E2 E2
.ACCU 8
	sep #$E2		; E2 E2
	sbc ($F2.b)		; F2 F2 ; Subtract with carry (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($E2.b)		; F2 E2 ; Subtract with carry (indirect) ($E2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
.ACCU 8
.INDEX 8
	sep #$F2		; E2 F2
.ACCU 8
	sep #$E2		; E2 E2
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $7FF9.w		; 0E F9 7F ; Arithmetic shift left $7FF9.w [Flags: ZNC]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7FF800.l,X		; 9F 00 F8 7F ; Store accumulator (long,X) $7FF800.l,X [Reads: Accumulator, X Index]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F15C.w,X		; 7D 5C F1 ; Add $F15C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F174.w,X		; 7D 74 F1 ; Add $F174.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $F180.w,X		; BD 80 F1 ; Load $F180.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	lda $F18C.w,X		; BD 8C F1 ; Load $F18C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora #$22.b		; 09 22 ; Logical OR #$22.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Accumulator, Direct Page, Y Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Accumulator, Direct Page, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $C0		; 10 C0 ; Branch if plus to $10, $C0 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0CAA.w,X		; BD AA 0C ; Load $0CAA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $47		; D0 47 ; Branch if not equal to $D0, $47 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $0BC0.w,Y		; B9 C0 0B ; Load $0BC0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$EF80.w		; 69 80 EF ; Add #$EF80.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
.ACCU 8
	sep #$20		; E2 20
	.db $B0, $13		; B0 13 ; Branch if carry set to $B0, $13 [Flow: branch]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda [$01.b]		; A7 01 ; Load accumulator (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $09F24B.l,X		; 3F 4B F2 09 ; AND accumulator with memory (long,X) $09F24B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Accumulator, Direct Page]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0BC0.w,Y		; 99 C0 0B ; Store accumulator to $0BC0.w,Y [Reads: Accumulator, Y Index]
	sta $0BC1.w,Y		; 99 C1 0B ; Store accumulator to $0BC1.w,Y [Reads: Accumulator, Y Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0BC0.w,X		; 9D C0 0B ; Store accumulator to $0BC0.w,X [Reads: Accumulator, X Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $EFDFBF.l,X		; 7F BF DF EF ; Add long $EFDFBF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$FB.b],Y		; F7 FB ; Subtract with carry (long indexed) [$FB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFE.w,X		; FD FE FF ; Subtract with carry $FFFE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx #$F2.b		; A2 F2 ; Load #$F2.b into X register [Writes: X Index] [Flags: ZN]
	ldy $F2.b		; A4 F2 ; Load $F2.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc ($50.b,S),Y		; F3 50 ; Subtract with carry (stack relative indirect indexed) ($50.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($7E.b,S),Y		; F3 7E ; Subtract with carry (stack relative indirect indexed) ($7E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	pea $F3DE.w		; F4 DE F3 ; Push absolute address $F3DE.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	pea $F483.w		; F4 83 F4 ; Push absolute address $F483.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	pea $F4C1.w		; F4 C1 F4 ; Push absolute address $F4C1.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ldy $F6.b		; A4 F6 ; Load $F6.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $F6.b,X		; B4 F6 ; Load Y register $F6.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $1DF6.w,Y		; B9 F6 1D ; Load $1DF6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$35.b],Y		; F7 35 ; Subtract with carry (long indexed) [$35.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$42.b],Y		; F7 42 ; Subtract with carry (long indexed) [$42.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$A5.b],Y		; F7 A5 ; Subtract with carry (long indexed) [$A5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($0A.b),Y		; 11 0A ; OR accumulator with memory ($0A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsr ($F270.w,X)		; FC 70 F2 ; Jump to subroutine indirect indexed ($F270.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $0DA18E.l		; 22 8E A1 0D ; Jump to subroutine long $0DA18E.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: ZN]
	lda $0130.w		; AD 30 01 ; Load $0130.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC227.l		; 8F 27 C2 7E ; Store accumulator (long) $7EC227.l [Reads: Accumulator]
	lda $0131.w		; AD 31 01 ; Load $0131.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC228.l		; 8F 28 C2 7E ; Store accumulator (long) $7EC228.l [Reads: Accumulator]
	lda #$F1.b		; A9 F1 ; Load #$F1.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	lda #$05.b		; [PATTERN: Memory clearing operation] A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	sta $0200.w		; 8D 00 02 ; Store accumulator to $0200.w [Reads: Accumulator]
	stz $03F3.w		; 9C F3 03 ; Store zero to $03F3.w
	stz $0322.w		; 9C 22 03 ; Store zero to $0322.w
	stz $55.b		; 64 55 ; Store zero to $55.b
.ACCU 16
	rep #$20		; C2 20
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC221.l		; 8F 21 C2 7E ; Store accumulator (long) $7EC221.l [Reads: Accumulator]
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC223.l		; 8F 23 C2 7E ; Store accumulator (long) $7EC223.l [Reads: Accumulator]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	lda $7EC300.l,X		; BF 00 C3 7E ; Load long $7EC300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FDD80.l,X		; 9F 80 DD 7F ; Store accumulator (long,X) $7FDD80.l,X [Reads: Accumulator, X Index]
	lda $7EC340.l,X		; BF 40 C3 7E ; Load long $7EC340.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FDDC0.l,X		; 9F C0 DD 7F ; Store accumulator (long,X) $7FDDC0.l,X [Reads: Accumulator, X Index]
	lda $7EC380.l,X		; BF 80 C3 7E ; Load long $7EC380.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FDE00.l,X		; 9F 00 DE 7F ; Store accumulator (long,X) $7FDE00.l,X [Reads: Accumulator, X Index]
	lda $7EC3C0.l,X		; BF C0 C3 7E ; Load long $7EC3C0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7FDE40.l,X		; 9F 40 DE 7F ; Store accumulator (long,X) $7FDE40.l,X [Reads: Accumulator, X Index]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC340.l,X		; 9F 40 C3 7E ; Store accumulator (long,X) $7EC340.l,X [Reads: Accumulator, X Index]
	sta $7EC380.l,X		; 9F 80 C3 7E ; Store accumulator (long,X) $7EC380.l,X [Reads: Accumulator, X Index]
	sta $7EC3C0.l,X		; 9F C0 C3 7E ; Store accumulator (long,X) $7EC3C0.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$40.b		; E0 40 ; Compare #$40.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $CB		; [PATTERN: Memory clearing operation] D0 CB ; Branch if not equal to $D0, $CB [Flow: branch]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
	stz $011A.w		; 9C 1A 01 ; Store zero to $011A.w
	stz $011C.w		; 9C 1C 01 ; Store zero to $011C.w
	lda $99.b		; A5 99 ; Load $99.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7EC225.l		; 8F 25 C2 7E ; Store accumulator (long) $7EC225.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	stz $04A0.w		; 9C A0 04 ; Store zero to $04A0.w
	jsl $0AFD0C.l		; 22 0C FD 0A ; Jump to subroutine long $0AFD0C.l [Writes: Stack Pointer] [Flow: call]
	inc $16.b		; E6 16 ; Increment $16.b [Reads: Direct Page] [Flags: ZN]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $C8.b		; C6 C8 ; Decrement $C8.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	jsl $0AFE20.l		; 22 20 FE 0A ; Jump to subroutine long $0AFE20.l [Writes: Stack Pointer] [Flow: call]
	jsl $00F28B.l		; 22 8B F2 00 ; Jump to subroutine long $00F28B.l [Writes: Stack Pointer] [Flow: call]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $98.b		; 85 98 ; Store accumulator to $98.b [Reads: Accumulator]
	stz $97.b		; 64 97 ; Store zero to $97.b
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00F135.l		; 22 35 F1 00 ; Jump to subroutine long $00F135.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC540.l		; AF 40 C5 7E ; Load long $7EC540.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC500.l		; 8F 00 C5 7E ; Store accumulator (long) $7EC500.l [Reads: Accumulator]
	lda $7EC541.l		; AF 41 C5 7E ; Load long $7EC541.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC501.l		; 8F 01 C5 7E ; Store accumulator (long) $7EC501.l [Reads: Accumulator]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $00F312.l		; 22 12 F3 00 ; Jump to subroutine long $00F312.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $6B		; D0 6B ; Branch if not equal to $D0, $6B [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$0018.w		; A9 18 00 ; Load #$0018.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	sta $7EC540.l,X		; 9F 40 C5 7E ; Store accumulator (long,X) $7EC540.l,X [Reads: Accumulator, X Index]
	sta $7EC560.l,X		; 9F 60 C5 7E ; Store accumulator (long,X) $7EC560.l,X [Reads: Accumulator, X Index]
	sta $7EC580.l,X		; 9F 80 C5 7E ; Store accumulator (long,X) $7EC580.l,X [Reads: Accumulator, X Index]
	sta $7EC5A0.l,X		; 9F A0 C5 7E ; Store accumulator (long,X) $7EC5A0.l,X [Reads: Accumulator, X Index]
	sta $7EC5C0.l,X		; 9F C0 C5 7E ; Store accumulator (long,X) $7EC5C0.l,X [Reads: Accumulator, X Index]
	sta $7EC5E0.l,X		; 9F E0 C5 7E ; Store accumulator (long,X) $7EC5E0.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $E2		; D0 E2 ; Branch if not equal to $D0, $E2 [Flow: branch]
	sta $7EC500.l		; 8F 00 C5 7E ; Store accumulator (long) $7EC500.l [Reads: Accumulator]
	sta $7EC540.l		; 8F 40 C5 7E ; Store accumulator (long) $7EC540.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $00F427.l		; 22 27 F4 00 ; Jump to subroutine long $00F427.l [Writes: Stack Pointer] [Flow: call]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9C.b		; 85 9C ; Store accumulator to $9C.b [Reads: Accumulator]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9D.b		; [PATTERN: Memory clearing operation] 85 9D ; Store accumulator to $9D.b [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9E.b		; 85 9E ; Store accumulator to $9E.b [Reads: Accumulator]
	stz $96.b		; 64 96 ; Store zero to $96.b
	stz $97.b		; 64 97 ; Store zero to $97.b
	stz $98.b		; 64 98 ; Store zero to $98.b
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $13.b		; 85 13 ; Store accumulator to $13.b [Reads: Accumulator]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1C.b		; 85 1C ; Store accumulator to $1C.b [Reads: Accumulator]
	stz $1D.b		; 64 1D ; Store zero to $1D.b
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
	jsl $0FFA6F.l		; 22 6F FA 0F ; Jump to subroutine long $0FFA6F.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $58		; D0 58 ; Branch if not equal to $D0, $58 [Flow: branch]
	jsl $00F135.l		; 22 35 F1 00 ; Jump to subroutine long $00F135.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC540.l		; AF 40 C5 7E ; Load long $7EC540.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC500.l		; 8F 00 C5 7E ; Store accumulator (long) $7EC500.l [Reads: Accumulator]
	lda $7EC541.l		; AF 41 C5 7E ; Load long $7EC541.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC501.l		; 8F 01 C5 7E ; Store accumulator (long) $7EC501.l [Reads: Accumulator]
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $3B		; D0 3B ; Branch if not equal to $D0, $3B [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC011.l		; 8F 11 C0 7E ; Store accumulator (long) $7EC011.l [Reads: Accumulator]
	sta $0647.w		; 8D 47 06 ; Store accumulator to $0647.w [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $95.b		; 85 95 ; Store accumulator to $95.b [Reads: Accumulator]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $7EF35C.l		; CF 5C F3 7E ; Compare accumulator (long) $7EF35C.l [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $28		; F0 28 ; Branch if equal to $F0, $28 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp $7EF35D.l		; CF 5D F3 7E ; Compare accumulator (long) $7EF35D.l [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $21		; F0 21 ; Branch if equal to $F0, $21 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp $7EF35E.l		; CF 5E F3 7E ; Compare accumulator (long) $7EF35E.l [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	inx		; [PATTERN: Memory clearing operation] E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp $7EF35F.l		; CF 5F F3 7E ; Compare accumulator (long) $7EF35F.l [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	stz $05FC.w		; 9C FC 05 ; Store zero to $05FC.w
	stz $05FD.w		; 9C FD 05 ; Store zero to $05FD.w
	lda #$16.b		; A9 16 ; Load #$16.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	sta $0710.w		; 8D 10 07 ; Store accumulator to $0710.w [Reads: Accumulator]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $C8.b		; C6 C8 ; Decrement $C8.b [Reads: Direct Page] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF35C.l,X		; 9F 5C F3 7E ; Store accumulator (long,X) $7EF35C.l,X [Reads: Accumulator, X Index]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AAA.w		; 8D AA 0A ; Store accumulator to $0AAA.w [Reads: Accumulator]
	jsl $00E3FA.l		; 22 FA E3 00 ; Jump to subroutine long $00E3FA.l [Writes: Stack Pointer] [Flow: call]
	stz $0AAA.w		; 9C AA 0A ; Store zero to $0AAA.w
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AAA.w		; 8D AA 0A ; Store accumulator to $0AAA.w [Reads: Accumulator]
	jsl $00E3FA.l		; 22 FA E3 00 ; Jump to subroutine long $00E3FA.l [Writes: Stack Pointer] [Flow: call]
	stz $0AAA.w		; 9C AA 0A ; Store zero to $0AAA.w
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AB1.w		; 8D B1 0A ; Store accumulator to $0AB1.w [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AA9.w		; 8D A9 0A ; Store accumulator to $0AA9.w [Reads: Accumulator]
	jsl $1BED72.l		; 22 72 ED 1B ; Jump to subroutine long $1BED72.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEC9E.l		; 22 9E EC 1B ; Jump to subroutine long $1BEC9E.l [Writes: Stack Pointer] [Flow: call]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: ZN]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: ZN]
	jsl $0FF5E3.l		; 22 E3 F5 0F ; Jump to subroutine long $0FF5E3.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $08F4CA.l		; 22 CA F4 08 ; Jump to subroutine long $08F4CA.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $08F4CA.l		; 22 CA F4 08 ; Jump to subroutine long $08F4CA.l [Writes: Stack Pointer] [Flow: call]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1CD8.w		; 8D D8 1C ; Store accumulator to $1CD8.w [Reads: Accumulator]
	jsl $0EC440.l		; 22 40 C4 0E ; Jump to subroutine long $0EC440.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsr $2820.w		; 20 20 28 ; Jump to subroutine at $2820.w [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	inc $AD.b,X		; F6 AD ; Increment memory $AD.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsb $04F0.w		; 0C F0 04 ; Test and set bits $04F0.w [Reads: Accumulator] [Flags: Z]
	jsl $08F4CA.l		; 22 CA F4 08 ; Jump to subroutine long $08F4CA.l [Writes: Stack Pointer] [Flow: call]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	dec $C8.b		; C6 C8 ; Decrement $C8.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $29		; D0 29 ; Branch if not equal to $D0, $29 [Flow: branch]
	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: ZN]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $21		; F0 21 ; Branch if equal to $F0, $21 [Flow: branch]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: ZN]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $30, $0C		; 30 0C ; Branch if minus to $30, $0C [Flow: branch]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	dec $B0.b		; C6 B0 ; Decrement $B0.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $B0.b		; 85 B0 ; Store accumulator to $B0.b [Reads: Accumulator]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda $F6.b		; A5 F6 ; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$C0.b		; 29 C0 ; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $F4.b		; 05 F4 ; Logical OR $F4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$D0.b		; 29 D0 ; Logical AND #$D0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $A1		; F0 A1 ; Branch if equal to $F0, $A1 [Flow: branch]
	lda #$2C.b		; A9 2C ; Load #$2C.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	lda #$F1.b		; A9 F1 ; Load #$F1.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $02B929.l		; 22 29 B9 02 ; Jump to subroutine long $02B929.l [Writes: Stack Pointer] [Flow: call]
	jsl $02856A.l		; 22 6A 85 02 ; Jump to subroutine long $02856A.l [Writes: Stack Pointer] [Flow: call]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $10		; B0 10 ; Branch if carry set to $B0, $10 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3CA.l		; 8F CA F3 7E ; Store accumulator (long) $7EF3CA.l [Reads: Accumulator]
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	jsl $028570.l		; 22 70 85 02 ; Jump to subroutine long $028570.l [Writes: Stack Pointer] [Flow: call]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $A1.b		; 05 A1 ; Logical OR $A1.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	stz $1B.b		; 64 1B ; Store zero to $1B.b
	jsl $0BFFBF.l		; 22 BF FF 0B ; Jump to subroutine long $0BFFBF.l [Writes: Stack Pointer] [Flow: call]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	lda $7EF36C.l		; AF 6C F3 7E ; Load long $7EF36C.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $09F4AC.l,X		; BF AC F4 09 ; Load long $09F4AC.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EF36D.l		; 8F 6D F3 7E ; Store accumulator (long) $7EF36D.l [Reads: Accumulator]
	sta $04AA.w		; 8D AA 04 ; Store accumulator to $04AA.w [Reads: Accumulator]
	lda $040C.w		; AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $7EF36F.l		; AF 6F F3 7E ; Load long $7EF36F.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF37C.l,X		; 9F 7C F3 7E ; Store accumulator (long,X) $7EF37C.l,X [Reads: Accumulator, X Index]
	jsl $09C44E.l		; 22 4E C4 09 ; Jump to subroutine long $09C44E.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $7EF405.l		; AF 05 F4 7E ; Load long $7EF405.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda $7EF403.l		; AF 03 F4 7E ; Load long $7EF403.l into accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta $7EF403.l		; 8F 03 F4 7E ; Store accumulator (long) $7EF403.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	inc $010A.w		; EE 0A 01 ; Increment $010A.w [Flags: ZN]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $59		; F0 59 ; Branch if equal to $F0, $59 [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	lda $040C.w		; AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$FF.b		; [PATTERN: Memory clearing operation] C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	stz $04AA.w		; 9C AA 04 ; Store zero to $04AA.w
	.db $80, $11		; 80 11 ; Branch always to $80, $11 [Flow: branch]
	stz $0132.w		; 9C 32 01 ; Store zero to $0132.w
	stz $1B.b		; 64 1B ; Store zero to $1B.b
	lda $7EF3CA.l		; AF CA F3 7E ; Load long $7EF3CA.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
	stz $A1.b		; 64 A1 ; Store zero to $A1.b
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	jsl $00894A.l		; [PATTERN: Memory clearing operation] 22 4A 89 00 ; Jump to subroutine long $00894A.l [Writes: Stack Pointer] [Flow: call]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $14.b		; 64 14 ; Store zero to $14.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $701FFE.l		; AF FE 1F 70 ; Load long $701FFE.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $00848C.l,X		; BF 8C 84 00 ; Load long $00848C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	stz $010A.w		; 9C 0A 01 ; Store zero to $010A.w
	jsl $0CCFBB.l		; 22 BB CF 0C ; Jump to subroutine long $0CCFBB.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $00894A.l		; 22 4A 89 00 ; Jump to subroutine long $00894A.l [Writes: Stack Pointer] [Flow: call]
	lda #$10.b		; [PATTERN: Memory clearing operation] A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1C.b		; 85 1C ; Store accumulator to $1C.b [Reads: Accumulator]
	stz $1B.b		; 64 1B ; Store zero to $1B.b
	jsl $0CF0E2.l		; 22 E2 F0 0C ; Jump to subroutine long $0CF0E2.l [Writes: Stack Pointer] [Flow: call]
	stz $04AA.w		; 9C AA 04 ; Store zero to $04AA.w
	stz $010A.w		; [PATTERN: Memory clearing operation] 9C 0A 01 ; Store zero to $010A.w
	stz $0132.w		; 9C 32 01 ; Store zero to $0132.w
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	stz NMITIMEN.w		; 9C 00 42 ; Store zero to NMITIMEN.w
	stz HDMAEN.w		; 9C 0C 42 ; Store zero to HDMAEN.w
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $E0.b		; [PATTERN: Memory clearing operation] 64 E0 ; Store zero to $E0.b
	stz $E2.b		; 64 E2 ; Store zero to $E2.b
	stz $E4.b		; 64 E4 ; Store zero to $E4.b
	stz $E6.b		; 64 E6 ; Store zero to $E6.b
	stz $E8.b		; 64 E8 ; Store zero to $E8.b
	stz $EA.b		; [PATTERN: Memory clearing operation] 64 EA ; Store zero to $EA.b
	stz $0120.w		; 9C 20 01 ; Store zero to $0120.w
	stz $011E.w		; 9C 1E 01 ; Store zero to $011E.w
	stz $0124.w		; 9C 24 01 ; Store zero to $0124.w
	stz $0122.w		; 9C 22 01 ; Store zero to $0122.w
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EF000.l,X		; 9F 00 F0 7E ; Store accumulator (long,X) $7EF000.l,X [Reads: Accumulator, X Index]
	sta $7EF100.l,X		; 9F 00 F1 7E ; Store accumulator (long,X) $7EF100.l,X [Reads: Accumulator, X Index]
	sta $7EF200.l,X		; 9F 00 F2 7E ; Store accumulator (long,X) $7EF200.l,X [Reads: Accumulator, X Index]
	sta $7EF300.l,X		; 9F 00 F3 7E ; Store accumulator (long,X) $7EF300.l,X [Reads: Accumulator, X Index]
	sta $7EF400.l,X		; 9F 00 F4 7E ; Store accumulator (long,X) $7EF400.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$0100.w		; E0 00 01 ; Compare #$0100.w with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $E5		; D0 E5 ; Branch if not equal to $D0, $E5 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	stz $0136.w		; 9C 36 01 ; Store zero to $0136.w
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta APUIO0.w		; 8D 40 21 ; Store accumulator to APUIO0.w [Reads: Accumulator]
	jsl $008913.l		; 22 13 89 00 ; Jump to subroutine long $008913.l [Writes: Stack Pointer] [Flow: call]
	lda #$81.b		; A9 81 ; Load #$81.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta NMITIMEN.w		; 8D 00 42 ; Store accumulator to NMITIMEN.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	nop		; EA ; No operation
	cpx $8F7F.w		; EC 7F 8F ; Compare $8F7F.w with X register [Reads: X Index] [Flags: ZNC]
	sta $AB4B8B.l,X		; 9F 8B 4B AB ; Store accumulator (long,X) $AB4B8B.l,X [Reads: Accumulator, X Index]
	ldx $B0.b		; A6 B0 ; Load $B0.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda #$34.b		; A9 34 ; Load #$34.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0850.w		; 8D 50 08 ; Store accumulator to $0850.w [Reads: Accumulator]
	lda $F677.w,X		; BD 77 F6 ; Load $F677.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0851.w		; 8D 51 08 ; Store accumulator to $0851.w [Reads: Accumulator]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $F675.w,X		; BD 75 F6 ; Load $F675.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $0852.w		; 8D 52 08 ; Store accumulator to $0852.w [Reads: Accumulator]
	lda #$78.b		; A9 78 ; Load #$78.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0853.w		; 8D 53 08 ; Store accumulator to $0853.w [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0A34.w		; 8D 34 0A ; Store accumulator to $0A34.w [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $098E4E.l		; 22 4E 8E 09 ; Jump to subroutine long $098E4E.l [Writes: Stack Pointer] [Flow: call]
	lda #$38.b		; A9 38 ; Load #$38.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EF372.l		; 8F 72 F3 7E ; Store accumulator (long) $7EF372.l [Reads: Accumulator]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: ZN]
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $08F283.l		; 22 83 F2 08 ; Jump to subroutine long $08F283.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF372.l		; AF 72 F3 7E ; Load long $7EF372.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $55		; D0 55 ; Branch if not equal to $D0, $55 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	lda $7FDD80.l,X		; BF 80 DD 7F ; Load long $7FDD80.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC300.l,X		; 9F 00 C3 7E ; Store accumulator (long,X) $7EC300.l,X [Reads: Accumulator, X Index]
	lda $7FDDC0.l,X		; BF C0 DD 7F ; Load long $7FDDC0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC340.l,X		; 9F 40 C3 7E ; Store accumulator (long,X) $7EC340.l,X [Reads: Accumulator, X Index]
	lda $7FDE00.l,X		; BF 00 DE 7F ; Load long $7FDE00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC380.l,X		; 9F 80 C3 7E ; Store accumulator (long,X) $7EC380.l,X [Reads: Accumulator, X Index]
	lda $7FDE40.l,X		; BF 40 DE 7F ; Load long $7FDE40.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7EC3C0.l,X		; 9F C0 C3 7E ; Store accumulator (long,X) $7EC3C0.l,X [Reads: Accumulator, X Index]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC540.l,X		; 9F 40 C5 7E ; Store accumulator (long,X) $7EC540.l,X [Reads: Accumulator, X Index]
	sta $7EC580.l,X		; 9F 80 C5 7E ; Store accumulator (long,X) $7EC580.l,X [Reads: Accumulator, X Index]
	sta $7EC5C0.l,X		; 9F C0 C5 7E ; Store accumulator (long,X) $7EC5C0.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$40.b		; E0 40 ; Compare #$40.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $CB		; D0 CB ; Branch if not equal to $D0, $CB [Flow: branch]
	sta $7EC500.l		; 8F 00 C5 7E ; Store accumulator (long) $7EC500.l [Reads: Accumulator]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
	lda $7EC225.l		; AF 25 C2 7E ; Load long $7EC225.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $99.b		; 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: ZN]
	jsl $08F283.l		; 22 83 F2 08 ; Jump to subroutine long $08F283.l [Writes: Stack Pointer] [Flow: call]
	jsl $0DDB75.l		; 22 75 DB 0D ; Jump to subroutine long $0DDB75.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $020A.w		; AD 0A 02 ; Load $020A.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $D0, $F2		; D0 F2 ; Branch if not equal to $D0, $F2 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $0AAA.w		; 8D AA 0A ; Store accumulator to $0AAA.w [Reads: Accumulator]
	jsl $00E3FA.l		; 22 FA E3 00 ; Jump to subroutine long $00E3FA.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC017.l		; AF 17 C0 7E ; Load long $7EC017.l into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $01FEC1.l		; 22 C1 FE 01 ; Jump to subroutine long $01FEC1.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $DD		; 80 DD ; Branch always to $80, $DD [Flow: branch]
	jsl $00E3FA.l		; 22 FA E3 00 ; Jump to subroutine long $00E3FA.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC212.l		; AF 12 C2 7E ; Load long $7EC212.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00F169.l		; 22 69 F1 00 ; Jump to subroutine long $00F169.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC540.l		; AF 40 C5 7E ; Load long $7EC540.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC500.l		; 8F 00 C5 7E ; Store accumulator (long) $7EC500.l [Reads: Accumulator]
	lda $7EC541.l		; AF 41 C5 7E ; Load long $7EC541.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC501.l		; 8F 01 C5 7E ; Store accumulator (long) $7EC501.l [Reads: Accumulator]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $D0, $3C		; D0 3C ; Branch if not equal to $D0, $3C [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	jsl $0BFE70.l		; 22 70 FE 0B ; Jump to subroutine long $0BFE70.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC212.l		; AF 12 C2 7E ; Load long $7EC212.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	lda $010C.w		; AD 0C 01 ; Load $010C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	lda #$90.b		; A9 90 ; Load #$90.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $031F.w		; 8D 1F 03 ; Store accumulator to $031F.w [Reads: Accumulator]
	lda $7EC227.l		; AF 27 C2 7E ; Load long $7EC227.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	lda $7EC228.l		; AF 28 C2 7E ; Load long $7EC228.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $7EC221.l		; AF 21 C2 7E ; Load long $7EC221.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	lda $7EC223.l		; AF 23 C2 7E ; Load long $7EC223.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $F7B1F7.l		; AF F7 B1 F7 ; Load long $F7B1F7.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	jsr ($F79B.w,X)		; FC 9B F7 ; Jump to subroutine indirect indexed ($F79B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsl $068328.l		; 22 28 83 06 ; Jump to subroutine long $068328.l [Writes: Stack Pointer] [Flow: call]
	jsl $0DA18E.l		; 22 8E A1 0D ; Jump to subroutine long $0DA18E.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: ZN]
	dec $13.b		; C6 13 ; Decrement $13.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $E5		; D0 E5 ; Branch if not equal to $D0, $E5 [Flow: branch]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $95.b		; 85 95 ; Store accumulator to $95.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $B0.b		; 85 B0 ; Store accumulator to $B0.b [Reads: Accumulator]
	jmp $F50F.w		; 4C 0F F5 ; Jump to $F50F.w [Flow: jump]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $8B08FF.l,X		; FF FF 08 8B ; Subtract with carry (long,X) $8B08FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $001F00.l		; 8F 00 1F 00 ; Store accumulator (long) $001F00.l [Reads: Accumulator]
	ldx #$1F00.w		; A2 00 1F ; Load #$1F00.w into X register [Writes: X Index] [Flags: ZN]
	ldy #$1F02.w		; A0 02 1F ; Load #$1F02.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$00FD.w		; A9 FD 00 ; Load #$00FD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	mvn $00,$00		; 54 00 00 ; Move block negative $00,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lda #$1F31.w		; A9 31 1F ; Load #$1F31.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1F0A.w		; 8D 0A 1F ; Store accumulator to $1F0A.w [Reads: Accumulator]
	lda #$000C.w		; A9 0C 00 ; Load #$000C.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx #$F810.w		; A2 10 F8 ; Load #$F810.w into X register [Writes: X Index] [Flags: ZN]
	ldy #$1F32.w		; A0 32 1F ; Load #$1F32.w into Y register [Writes: Y Index] [Flags: ZN]
	mvn $09,$00		; 54 00 09 ; Move block negative $09,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora #$1F00.w		; 09 00 1F ; Logical OR #$1F00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $1D		; 30 1D ; Branch if minus to $30, $1D [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora #$00A5.w		; 09 A5 00 ; Logical OR #$00A5.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $FC		; F0 FC ; Branch if equal to $F0, $FC [Flow: branch]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $F8		; D0 F8 ; Branch if not equal to $D0, $F8 [Flow: branch]
	jsl $09FD04.l		; 22 04 FD 09 ; Jump to subroutine long $09FD04.l [Writes: Stack Pointer] [Flow: call]
	jsr $F83D.w		; 20 3D F8 ; Jump to subroutine at $F83D.w [Writes: Stack Pointer] [Flow: call]
	jsr $F864.w		; 20 64 F8 ; Jump to subroutine at $F864.w [Writes: Stack Pointer] [Flow: call]
	jsr $F8FB.w		; 20 FB F8 ; Jump to subroutine at $F8FB.w [Writes: Stack Pointer] [Flow: call]
	jsr $FA4F.w		; 20 4F FA ; Jump to subroutine at $FA4F.w [Writes: Stack Pointer] [Flow: call]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda #$85FF.w		; A9 FF 85 ; Load #$85FF.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $E080.w		; 0C 80 E0 ; Test and set bits $E080.w [Reads: Accumulator] [Flags: Z]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $1F03.w		; AD 03 1F ; Load $1F03.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $B0.b		; 85 B0 ; Store accumulator to $B0.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $B0.b		; 65 B0 ; Add $B0.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc #$FF8C.w		; 69 8C FF ; Add #$FF8C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ldy #$1F3F.w		; A0 3F 1F ; Load #$1F3F.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$0005.w		; A9 05 00 ; Load #$0005.w into accumulator [Writes: Accumulator] [Flags: ZN]
	mvn $09,$09		; 54 09 09 ; Move block negative $09,$09 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ldy $04.b		; A4 04 ; Load $04.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $FB6D.w,Y		; B9 6D FB ; Load $FB6D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $50.b		; E5 50 ; Subtract $50.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $51.b		; 85 51 ; Store accumulator to $51.b [Reads: Accumulator]
	lda $FBAD.w,Y		; B9 AD FB ; Load $FBAD.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $52.b		; 85 52 ; Store accumulator to $52.b [Reads: Accumulator]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $52.b		; E5 52 ; Subtract $52.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $53.b		; 85 53 ; Store accumulator to $53.b [Reads: Accumulator]
	ldy $05.b		; A4 05 ; Load $05.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $FB6D.w,Y		; B9 6D FB ; Load $FB6D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $54.b		; 85 54 ; Store accumulator to $54.b [Reads: Accumulator]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $54.b		; E5 54 ; Subtract $54.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $55.b		; 85 55 ; Store accumulator to $55.b [Reads: Accumulator]
	lda $FBAD.w,Y		; B9 AD FB ; Load $FBAD.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $56.b		; 85 56 ; Store accumulator to $56.b [Reads: Accumulator]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $56.b		; E5 56 ; Subtract $56.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $57.b		; 85 57 ; Store accumulator to $57.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ldx $54.b		; A6 54 ; Load $54.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stx M7A.w		; 8E 1B 21 ; Store X register to M7A.w [Reads: X Index]
	ldx $55.b		; A6 55 ; Load $55.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stx M7A.w		; 8E 1B 21 ; Store X register to M7A.w [Reads: X Index]
	ldx $50.b		; A6 50 ; Load $50.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stx M7B.w		; 8E 1C 21 ; Store X register to M7B.w [Reads: X Index]
	lda MPYM.w		; AD 35 21 ; Load MPYM.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $58.b		; 85 58 ; Store accumulator to $58.b [Reads: Accumulator]
	ldx $56.b		; A6 56 ; Load $56.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stx M7A.w		; 8E 1B 21 ; Store X register to M7A.w [Reads: X Index]
	ldx $57.b		; A6 57 ; Load $57.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stx M7A.w		; 8E 1B 21 ; Store X register to M7A.w [Reads: X Index]
	ldx $52.b		; A6 52 ; Load $52.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stx M7B.w		; 8E 1C 21 ; Store X register to M7B.w [Reads: X Index]
	lda MPYM.w		; AD 35 21 ; Load MPYM.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $5E.b		; 85 5E ; Store accumulator to $5E.b [Reads: Accumulator]
	ldx $56.b		; A6 56 ; Load $56.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stx M7A.w		; 8E 1B 21 ; Store X register to M7A.w [Reads: X Index]
	ldx $57.b		; A6 57 ; Load $57.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stx M7A.w		; 8E 1B 21 ; Store X register to M7A.w [Reads: X Index]
	ldx $50.b		; A6 50 ; Load $50.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stx M7B.w		; 8E 1C 21 ; Store X register to M7B.w [Reads: X Index]
	lda MPYM.w		; AD 35 21 ; Load MPYM.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $5A.b		; 85 5A ; Store accumulator to $5A.b [Reads: Accumulator]
	ldx $54.b		; A6 54 ; Load $54.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stx M7A.w		; 8E 1B 21 ; Store X register to M7A.w [Reads: X Index]
	ldx $55.b		; A6 55 ; Load $55.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stx M7A.w		; 8E 1B 21 ; Store X register to M7A.w [Reads: X Index]
	ldx $52.b		; A6 52 ; Load $52.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stx M7B.w		; 8E 1C 21 ; Store X register to M7B.w [Reads: X Index]
	lda MPYM.w		; AD 35 21 ; Load MPYM.w into accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $5C.b		; 85 5C ; Store accumulator to $5C.b [Reads: Accumulator]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $3F.b		; A5 3F ; Load $3F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $3F.b		; 65 3F ; Add $3F.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($41.b),Y		; B1 41 ; Load accumulator ($41.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $47.b		; 85 47 ; Store accumulator to $47.b [Reads: Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($41.b),Y		; B1 41 ; Load accumulator ($41.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda ($41.b),Y		; B1 41 ; Load accumulator ($41.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $45.b		; 85 45 ; Store accumulator to $45.b [Reads: Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
.ACCU 16
	rep #$20		; C2 20
	jsr $F931.w		; 20 31 F9 ; Jump to subroutine at $F931.w [Writes: Stack Pointer] [Flow: call]
	jsr $F9D6.w		; 20 D6 F9 ; Jump to subroutine at $F9D6.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $48.b		; 65 48 ; Add $48.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $60.b,X		; 95 60 ; Store accumulator to $60.b,X [Reads: Accumulator, X Index]
	sec		; 38 ; Set carry flag [Flags: C]
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $4A.b		; E5 4A ; Subtract $4A.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $88.b,X		; 95 88 ; Store accumulator to $88.b,X [Reads: Accumulator, X Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	.db $D0, $D4		; D0 D4 ; Branch if not equal to $D0, $D4 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $56.b		; A4 56 ; Load $56.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sty M7A.w		; 8C 1B 21 ; Store Y register to M7A.w [Reads: Y Index]
	ldy $57.b		; A4 57 ; Load $57.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty M7A.w		; 8C 1B 21 ; Store Y register to M7A.w [Reads: Y Index]
	ldy $45.b		; A4 45 ; Load $45.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty M7B.w		; 8C 1C 21 ; Store Y register to M7B.w [Reads: Y Index]
	lda MPYL.w		; AD 34 21 ; Load MPYL.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $54.b		; A4 54 ; Load $54.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty M7A.w		; 8C 1B 21 ; Store Y register to M7A.w [Reads: Y Index]
	ldy $55.b		; A4 55 ; Load $55.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty M7A.w		; 8C 1B 21 ; Store Y register to M7A.w [Reads: Y Index]
	ldy $47.b		; A4 47 ; Load $47.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty M7B.w		; 8C 1C 21 ; Store Y register to M7B.w [Reads: Y Index]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc MPYL.w		; ED 34 21 ; Subtract MPYL.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	ldy $58.b		; A4 58 ; Load $58.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sty M7A.w		; 8C 1B 21 ; Store Y register to M7A.w [Reads: Y Index]
	ldy $59.b		; A4 59 ; Load $59.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty M7A.w		; 8C 1B 21 ; Store Y register to M7A.w [Reads: Y Index]
	ldy $45.b		; A4 45 ; Load $45.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty M7B.w		; 8C 1C 21 ; Store Y register to M7B.w [Reads: Y Index]
	lda MPYL.w		; AD 34 21 ; Load MPYL.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $52.b		; A4 52 ; Load $52.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty M7A.w		; 8C 1B 21 ; Store Y register to M7A.w [Reads: Y Index]
	ldy $53.b		; A4 53 ; Load $53.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty M7A.w		; 8C 1B 21 ; Store Y register to M7A.w [Reads: Y Index]
	ldy $46.b		; A4 46 ; Load $46.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty M7B.w		; 8C 1C 21 ; Store Y register to M7B.w [Reads: Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $2134.w		; 6D 34 21 ; Add $2134.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldy $5A.b		; A4 5A ; Load $5A.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty M7A.w		; 8C 1B 21 ; Store Y register to M7A.w [Reads: Y Index]
	ldy $5B.b		; A4 5B ; Load $5B.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty M7A.w		; 8C 1B 21 ; Store Y register to M7A.w [Reads: Y Index]
	ldy $47.b		; A4 47 ; Load $47.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty M7B.w		; 8C 1C 21 ; Store Y register to M7B.w [Reads: Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $2134.w		; 6D 34 21 ; Add $2134.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $4A.b		; 85 4A ; Store accumulator to $4A.b [Reads: Accumulator]
	ldy $5C.b		; A4 5C ; Load $5C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sty M7A.w		; 8C 1B 21 ; Store Y register to M7A.w [Reads: Y Index]
	ldy $5D.b		; A4 5D ; Load $5D.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty M7A.w		; 8C 1B 21 ; Store Y register to M7A.w [Reads: Y Index]
	ldy $45.b		; A4 45 ; Load $45.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty M7B.w		; 8C 1C 21 ; Store Y register to M7B.w [Reads: Y Index]
	lda MPYM.w		; AD 35 21 ; Load MPYM.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $50.b		; A4 50 ; Load $50.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty M7A.w		; 8C 1B 21 ; Store Y register to M7A.w [Reads: Y Index]
	ldy $51.b		; A4 51 ; Load $51.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty M7A.w		; 8C 1B 21 ; Store Y register to M7A.w [Reads: Y Index]
	ldy $46.b		; A4 46 ; Load $46.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty M7B.w		; 8C 1C 21 ; Store Y register to M7B.w [Reads: Y Index]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc MPYM.w		; ED 35 21 ; Subtract MPYM.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ldy $5E.b		; A4 5E ; Load $5E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty M7A.w		; 8C 1B 21 ; Store Y register to M7A.w [Reads: Y Index]
	ldy $5F.b		; A4 5F ; Load $5F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty M7A.w		; 8C 1B 21 ; Store Y register to M7A.w [Reads: Y Index]
	ldy $47.b		; A4 47 ; Load $47.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty M7B.w		; 8C 1C 21 ; Store Y register to M7B.w [Reads: Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $2135.w		; 6D 35 21 ; Add $2135.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	rep #$05		; C2 05 ; Reset processor status bits #$05 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $4C.b		; 85 4C ; Store accumulator to $4C.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $B2851A.l,X		; FF 1A 85 B2 ; Subtract with carry (long,X) $B2851A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $4C.b		; A5 4C ; Load $4C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $B0.b		; 85 B0 ; Store accumulator to $B0.b [Reads: Accumulator]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$46.b]		; 07 46 ; OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($46.b)		; B2 46 ; Load accumulator (indirect) ($46.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $4A		; B0 4A ; Branch if carry set to $B0, $4A [Flow: branch]
	.db $D0, $F9		; D0 F9 ; Branch if not equal to $D0, $F9 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta WRDIVL.w		; 8D 04 42 ; Store accumulator to WRDIVL.w [Reads: Accumulator]
	ldy $B0.b		; A4 B0 ; Load $B0.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty WRDIVB.w		; 8C 06 42 ; Store Y register to WRDIVB.w [Reads: Y Index]
	nop		; EA ; No operation
	nop		; EA ; No operation
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor #$38.b		; 49 38 ; Exclusive OR #$38.b with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $30, $06		; 30 06 ; Branch if minus to $30, $06 [Flow: branch]
	nop		; EA ; No operation
	lda RDDIVL.w		; AD 14 42 ; Load RDDIVL.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	sbc RDDIVL.w		; ED 14 42 ; Subtract RDDIVL.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	lda $4A.b		; A5 4A ; Load $4A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $B2851A.l,X		; FF 1A 85 B2 ; Subtract with carry (long,X) $B2851A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $4C.b		; A5 4C ; Load $4C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $B0.b		; 85 B0 ; Store accumulator to $B0.b [Reads: Accumulator]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$46.b]		; 07 46 ; OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($46.b)		; B2 46 ; Load accumulator (indirect) ($46.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $4A		; B0 4A ; Branch if carry set to $B0, $4A [Flow: branch]
	.db $D0, $F9		; D0 F9 ; Branch if not equal to $D0, $F9 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lda $B2.b		; A5 B2 ; Load $B2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta WRDIVL.w		; 8D 04 42 ; Store accumulator to WRDIVL.w [Reads: Accumulator]
	ldy $B0.b		; A4 B0 ; Load $B0.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	sty WRDIVB.w		; 8C 06 42 ; Store Y register to WRDIVB.w [Reads: Y Index]
	nop		; EA ; No operation
	nop		; EA ; No operation
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $30, $06		; 30 06 ; Branch if minus to $30, $06 [Flow: branch]
	nop		; EA ; No operation
	lda RDDIVL.w		; AD 14 42 ; Load RDDIVL.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	sbc RDDIVL.w		; ED 14 42 ; Subtract RDDIVL.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $4A.b		; 85 4A ; Store accumulator to $4A.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	lda ($43.b),Y		; B1 43 ; Load accumulator ($43.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $4E.b		; 85 4E ; Store accumulator to $4E.b [Reads: Accumulator]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $B0.b		; 85 B0 ; Store accumulator to $B0.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $C0.b		; 85 C0 ; Store accumulator to $C0.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda ($43.b),Y		; B1 43 ; Load accumulator ($43.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $1F60.w,Y		; B9 60 1F ; Load $1F60.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $C0.b,X		; 95 C0 ; Store accumulator to $C0.b,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $1F88.w,Y		; B9 88 1F ; Load $1F88.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $C0.b,X		; 95 C0 ; Store accumulator to $C0.b,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $B0.b		; C6 B0 ; Decrement $B0.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EA		; D0 EA ; Branch if not equal to $D0, $EA [Flow: branch]
	lda ($43.b),Y		; B1 43 ; Load accumulator ($43.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta $4F.b		; 85 4F ; Store accumulator to $4F.b [Reads: Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $C0.b		; A5 C0 ; Load $C0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $0E		; 90 0E ; Branch if carry clear to $90, $0E [Flow: branch]
	jsr $FB24.w		; 20 24 FB ; Jump to subroutine at $FB24.w [Writes: Stack Pointer] [Flow: call]
	.db $30, $0F		; 30 0F ; Branch if minus to $30, $0F [Flow: branch]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	jsr $FACA.w		; 20 CA FA ; Jump to subroutine at $FACA.w [Writes: Stack Pointer] [Flow: call]
	jsl $09FD1E.l		; 22 1E FD 09 ; Jump to subroutine long $09FD1E.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	dec $40.b		; C6 40 ; Decrement $40.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $BD		; D0 BD ; Branch if not equal to $D0, $BD [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $4E.b		; A5 4E ; Load $4E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $F6		; 10 F6 ; Branch if plus to $10, $F6 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $C0.b		; A5 C0 ; Load $C0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $B0.b		; 85 B0 ; Store accumulator to $B0.b [Reads: Accumulator]
	lda $C0.b,X		; B5 C0 ; Load $C0.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $1FC0.w,Y		; B9 C0 1F ; Load $1FC0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $C0.b,X		; 95 C0 ; Store accumulator to $C0.b,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sta $1FC0.w,Y		; 99 C0 1F ; Store accumulator to $1FC0.w,Y [Reads: Accumulator, Y Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $B0.b		; C6 B0 ; Decrement $B0.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $EC		; D0 EC ; Branch if not equal to $D0, $EC [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	jsr $FAD7.w		; 20 D7 FA ; Jump to subroutine at $FAD7.w [Writes: Stack Pointer] [Flow: call]
	jsl $09FD1E.l		; 22 1E FD 09 ; Jump to subroutine long $09FD1E.l [Writes: Stack Pointer] [Flow: call]
	jmp $FA91.w		; 4C 91 FA ; Jump to $FA91.w [Flow: jump]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $24		; D0 24 ; Branch if not equal to $D0, $24 [Flow: branch]
	lda $4F.b		; A5 4F ; Load $4F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $09FCAE.l		; 22 AE FC 09 ; Jump to subroutine long $09FCAE.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $4F.b		; A5 4F ; Load $4F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $09FCAE.l		; 22 AE FC 09 ; Jump to subroutine long $09FCAE.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $1F03.w		; AD 03 1F ; Load $1F03.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $1F02.w		; AD 02 1F ; Load $1F02.w into accumulator [Writes: Accumulator] [Flags: ZN]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $FC		; 10 FC ; Branch if plus to $10, $FC [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $09FCAE.l		; 22 AE FC 09 ; Jump to subroutine long $09FCAE.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sep #$05		; E2 05 ; Set processor status bits #$05 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	lda $C3.b		; A5 C3 ; Load $C3.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $C1.b		; E5 C1 ; Subtract $C1.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta M7A.w		; 8D 1B 21 ; Store accumulator to M7A.w [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta M7A.w		; 8D 1B 21 ; Store accumulator to M7A.w [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	lda $C6.b		; A5 C6 ; Load $C6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $C4.b		; E5 C4 ; Subtract $C4.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta M7B.w		; 8D 1C 21 ; Store accumulator to M7B.w [Reads: Accumulator]
	lda MPYL.w		; AD 34 21 ; Load MPYL.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $B0.b		; 85 B0 ; Store accumulator to $B0.b [Reads: Accumulator]
	lda MPYM.w		; AD 35 21 ; Load MPYM.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $B1.b		; 85 B1 ; Store accumulator to $B1.b [Reads: Accumulator]
	sep #$05		; E2 05 ; Set processor status bits #$05 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	lda $C5.b		; A5 C5 ; Load $C5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $C3.b		; E5 C3 ; Subtract $C3.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta M7A.w		; 8D 1B 21 ; Store accumulator to M7A.w [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta M7A.w		; 8D 1B 21 ; Store accumulator to M7A.w [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	lda $C4.b		; A5 C4 ; Load $C4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $C2.b		; E5 C2 ; Subtract $C2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta M7B.w		; 8D 1C 21 ; Store accumulator to M7B.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	sec		; 38 ; Set carry flag [Flags: C]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc MPYL.w		; ED 34 21 ; Subtract MPYL.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sta $B0.b		; 85 B0 ; Store accumulator to $B0.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZNC]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $100E.w		; 0C 0E 10 ; Test and set bits $100E.w [Reads: Accumulator] [Flags: Z]
	ora ($13.b),Y		; 11 13 ; OR accumulator with memory ($13.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $16.b		; 14 16 ; Test and reset bits $16.b [Reads: Accumulator] [Flags: Z]
	ora [$18.b],Y		; 17 18 ; OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $201E.w,X		; 1D 1E 20 ; OR accumulator with memory $201E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $27.b		; 26 27 ; Rotate left $27.b [Reads: Direct Page] [Flags: ZNC]
	and #$2A.b		; 29 2A ; Logical AND #$2A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	bit $2E2D.w		; 2C 2D 2E ; Test bits $2E2D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $323130.l		; 2F 30 31 32 ; AND accumulator with memory (long) $323130.l [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $36.b,X		; 35 36 ; Logical AND $36.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$38.b],Y		; 37 38 ; AND accumulator with memory (long indexed) [$38.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	and $3B3A.w,Y		; 39 3A 3B ; AND accumulator with memory $3B3A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $3D3C.w,X		; 3C 3C 3D ; Test bits $3D3C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $3E3E.w,X		; 3D 3E 3E ; AND accumulator with memory $3E3E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $3F3F.w,X		; 3E 3F 3F ; Rotate left $3F3F.w,X [Reads: X Index] [Flags: ZNC]
	and $404040.l,X		; 3F 40 40 40 ; AND accumulator with memory (long,X) $404040.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	and $3E3F3F.l,X		; 3F 3F 3F 3E ; AND accumulator with memory (long,X) $3E3F3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $3D3E.w,X		; 3E 3E 3D ; Rotate left $3D3E.w,X [Reads: X Index] [Flags: ZNC]
	and $3C3C.w,X		; 3D 3C 3C ; AND accumulator with memory $3C3C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $3838.w,Y		; 39 38 38 ; AND accumulator with memory $3838.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$36.b],Y		; 37 36 ; AND accumulator with memory (long indexed) [$36.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $34.b,X		; 35 34 ; Logical AND $34.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($32.b,S),Y		; 33 32 ; AND accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($30.b),Y		; 31 30 ; AND accumulator with memory ($30.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $2C2D2E.l		; 2F 2E 2D 2C ; AND accumulator with memory (long) $2C2D2E.l [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and #$27.b		; 29 27 ; Logical AND #$27.b with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $25.b		; 26 25 ; Rotate left $25.b [Reads: Direct Page] [Flags: ZNC]
	bit $22.b		; 24 22 ; Test bits $22.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $1B1D.w,X		; 1E 1D 1B ; Arithmetic shift left $1B1D.w,X [Reads: X Index] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$16.b],Y		; 17 16 ; OR accumulator with memory (long indexed) [$16.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $13.b		; 14 13 ; Test and reset bits $13.b [Reads: Accumulator] [Flags: Z]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $0B0C.w		; 0E 0C 0B ; Arithmetic shift left $0B0C.w [Flags: ZNC]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $05.b		; 06 05 ; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: ZNC]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FAFB.w,X		; FD FB FA ; Subtract with carry $FAFB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc [$F5.b],Y		; F7 F5 ; Subtract with carry (long indexed) [$F5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	pea $F0F2.w		; F4 F2 F0 ; Push absolute address $F0F2.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sbc $EAECED.l		; EF ED EC EA ; Subtract with carry (long) $EAECED.l [Writes: Accumulator] [Flags: ZVNC]
	sbc #$E8.b		; E9 E8 ; Subtract #$E8.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	inc $E5.b		; E6 E5 ; Increment $E5.b [Reads: Direct Page] [Flags: ZN]
	sbc $E2.b,S		; E3 E2 ; Subtract stack-relative $E2.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cpx #$DF.b		; E0 DF ; Compare #$DF.b with X register [Reads: X Index] [Flags: ZNC]
	dec $DBDC.w,X		; DE DC DB ; Decrement memory $DBDC.w,X [Reads: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cmp $D6D7.w,Y		; D9 D7 D6 ; Compare accumulator $D6D7.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp $D4.b,X		; D5 D4 ; Compare accumulator $D4.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp ($D2.b,S),Y		; D3 D2 ; Compare accumulator (stack relative indirect indexed) ($D2.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cmp ($D0.b),Y		; D1 D0 ; Compare accumulator ($D0.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp $CCCDCE.l		; CF CE CD CC ; Compare accumulator (long) $CCCDCE.l [Reads: Accumulator] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cmp #$C8.b		; C9 C8 ; Compare #$C8.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp [$C6.b]		; C7 C6 ; Compare accumulator (long) [$C6.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $C5.b		; C5 C5 ; Compare $C5.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cpy $C4.b		; C4 C4 ; Compare $C4.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	rep #$C2		; C2 C2 ; Reset processor status bits #$C2 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	rep #$C1		; C2 C1 ; Reset processor status bits #$C1 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	cmp ($C1.b,X)		; C1 C1 ; Compare accumulator ($C1.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$C1.b		; C0 C1 ; Compare #$C1.b with Y register [Reads: Y Index] [Flags: ZNC]
	cmp ($C1.b,X)		; C1 C1 ; Compare accumulator ($C1.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	rep #$C2		; C2 C2 ; Reset processor status bits #$C2 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	rep #$C3		; C2 C3 ; Reset processor status bits #$C3 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	cmp $C4.b,S		; C3 C4 ; Compare accumulator (stack relative) $C4.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cpy $C5.b		; C4 C5 ; Compare $C5.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cmp $C6.b		; C5 C6 ; Compare $C6.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$C8.b]		; C7 C8 ; Compare accumulator (long) [$C8.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp #$CA.b		; C9 CA ; Compare #$CA.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	cpy $CECD.w		; CC CD CE ; Compare $CECD.w with Y register [Reads: Y Index] [Flags: ZNC]
	cmp $D2D1D0.l		; CF D0 D1 D2 ; Compare accumulator (long) $D2D1D0.l [Reads: Accumulator] [Flags: ZNC]
	cmp ($D4.b,S),Y		; D3 D4 ; Compare accumulator (stack relative indirect indexed) ($D4.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cmp $D6.b,X		; D5 D6 ; Compare accumulator $D6.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp [$D9.b],Y		; D7 D9 ; Compare accumulator (long indexed) [$D9.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	jmp.w [$DFDE]		; DC DE DF ; Jump long indirect [$DFDE] [Flow: jump]
	cpx #$E2.b		; E0 E2 ; Compare #$E2.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $E5.b,S		; E3 E5 ; Subtract stack-relative $E5.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	inc $E8.b		; E6 E8 ; Increment $E8.b [Reads: Direct Page] [Flags: ZN]
	sbc #$EA.b		; E9 EA ; Subtract #$EA.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	cpx $EFED.w		; EC ED EF ; Compare $EFED.w with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $F2		; F0 F2 ; Branch if equal to $F0, $F2 [Flow: branch]
	pea $F7F5.w		; F4 F5 F7 ; Push absolute address $F7F5.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sed		; F8 ; Set decimal flag [Flags: D]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $00FE.w,X		; FD FE 00 ; Subtract with carry $00FE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $100E.w		; 0C 0E 10 ; Test and set bits $100E.w [Reads: Accumulator] [Flags: Z]
	ora ($13.b),Y		; 11 13 ; OR accumulator with memory ($13.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $16.b		; 14 16 ; Test and reset bits $16.b [Reads: Accumulator] [Flags: Z]
	ora [$18.b],Y		; 17 18 ; OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $201E.w,X		; 1D 1E 20 ; OR accumulator with memory $201E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	rol $27.b		; 26 27 ; Rotate left $27.b [Reads: Direct Page] [Flags: ZNC]
	and #$2A.b		; 29 2A ; Logical AND #$2A.b with accumulator [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	bit $2E2D.w		; 2C 2D 2E ; Test bits $2E2D.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	and $323130.l		; 2F 30 31 32 ; AND accumulator with memory (long) $323130.l [Writes: Accumulator] [Flags: ZN]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $36.b,X		; 35 36 ; Logical AND $36.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$38.b],Y		; 37 38 ; AND accumulator with memory (long indexed) [$38.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	and $3B3A.w,Y		; 39 3A 3B ; AND accumulator with memory $3B3A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $3D3C.w,X		; 3C 3C 3D ; Test bits $3D3C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $3E3E.w,X		; 3D 3E 3E ; AND accumulator with memory $3E3E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $3F3F.w,X		; 3E 3F 3F ; Rotate left $3F3F.w,X [Reads: X Index] [Flags: ZNC]
	and $404040.l,X		; 3F 40 40 40 ; AND accumulator with memory (long,X) $404040.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sbc $30E208.l,X		; FF 08 E2 30 ; Subtract with carry (long,X) $30E208.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
.ACCU 16
	rep #$20		; C2 20
	lda $09FCC4.l,X		; BF C4 FC 09 ; Load long $09FCC4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B5.b		; 85 B5 ; Store accumulator to $B5.b [Reads: Accumulator]
	lda $09FCC6.l,X		; BF C6 FC 09 ; Load long $09FCC6.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B7.b		; 85 B7 ; Store accumulator to $B7.b [Reads: Accumulator]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF00.l,X		; FF 00 FF 00 ; Subtract with carry (long,X) $00FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF0000.l,X		; FF 00 00 FF ; Subtract with carry (long,X) $FF0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFF00.l,X		; FF 00 FF FF ; Subtract with carry (long,X) $FFFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0000.l,X		; FF 00 00 FF ; Subtract with carry (long,X) $FF0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF00FF.l,X		; FF FF 00 FF ; Subtract with carry (long,X) $FF00FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFFF.l,X		; FF FF FF 00 ; Subtract with carry (long,X) $00FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF00FF.l,X		; FF FF 00 FF ; Subtract with carry (long,X) $FF00FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $8B08FF.l,X		; FF FF 08 8B ; Subtract with carry (long,X) $8B08FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $7EE800.l		; 8F 00 E8 7E ; Store accumulator (long) $7EE800.l [Reads: Accumulator]
	ldx #$E800.w		; A2 00 E8 ; Load #$E800.w into X register [Writes: X Index] [Flags: ZN]
	ldy #$E802.w		; A0 02 E8 ; Load #$E802.w into Y register [Writes: Y Index] [Flags: ZN]
	lda #$07FD.w		; A9 FD 07 ; Load #$07FD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	mvn $7E,$7E		; 54 7E 7E ; Move block negative $7E,$7E [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$7E.b		; A9 7E ; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ldy $C0.b		; A4 C0 ; Load $C0.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda $C0.b,X		; B5 C0 ; Load $C0.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	cmp $C0.b,X		; D5 C0 ; Compare accumulator $C0.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $90, $F8		; 90 F8 ; Branch if carry clear to $90, $F8 [Flow: branch]
	.db $F0, $F6		; F0 F6 ; Branch if equal to $F0, $F6 [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lda $C0.b,X		; B5 C0 ; Load $C0.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $80, $F1		; 80 F1 ; Branch always to $80, $F1 [Flow: branch]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $B9.b		; 85 B9 ; Store accumulator to $B9.b [Reads: Accumulator]
	lda $1FC0.w,Y		; B9 C0 1F ; Load $1FC0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and #$38.b		; 29 38 ; Logical AND #$38.b with accumulator [Writes: Accumulator] [Flags: ZN]
	bit #$20.b		; 89 20 ; Test bits #$20.b with accumulator [Reads: Accumulator] [Flags: Z]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	eor #$24.b		; 49 24 ; Exclusive OR #$24.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc #$E8.b		; 69 E8 ; Add #$E8.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sta $BA.b		; 85 BA ; Store accumulator to $BA.b [Reads: Accumulator]
	sty $E9.b		; 84 E9 ; Store Y register to $E9.b [Reads: Y Index]
	sty $F2.b		; 84 F2 ; Store Y register to $F2.b [Reads: Y Index]
	lda $C0.b		; A5 C0 ; Load $C0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	lda $1FC0.w,Y		; B9 C0 1F ; Load $1FC0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $E2.b		; 85 E2 ; Store accumulator to $E2.b [Reads: Accumulator]
	sta $EB.b		; 85 EB ; Store accumulator to $EB.b [Reads: Accumulator]
	lda $1FBF.w,Y		; B9 BF 1F ; Load $1FBF.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $E1.b		; 85 E1 ; Store accumulator to $E1.b [Reads: Accumulator]
	sta $EA.b		; 85 EA ; Store accumulator to $EA.b [Reads: Accumulator]
	jsr $FEB4.w		; 20 B4 FE ; Jump to subroutine at $FEB4.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	jsr $FF1E.w		; 20 1E FF ; Jump to subroutine at $FF1E.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $FDCF.w		; 20 CF FD ; Jump to subroutine at $FDCF.w [Writes: Stack Pointer] [Flow: call]
	lda $B9.b		; A5 B9 ; Load $B9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	sta $B9.b		; 85 B9 ; Store accumulator to $B9.b [Reads: Accumulator]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	lda $BA.b		; A5 BA ; Load $BA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	bit #$08.b		; 89 08 ; Test bits #$08.b with accumulator [Reads: Accumulator] [Flags: Z]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	eor #$19.b		; 49 19 ; Exclusive OR #$19.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $BA.b		; 85 BA ; Store accumulator to $BA.b [Reads: Accumulator]
	stz $B9.b		; 64 B9 ; Store zero to $B9.b
	ldx $E2.b		; A6 E2 ; Load $E2.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cpx $E4.b		; E4 E4 ; Compare $E4.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	ldx $E3.b		; A6 E3 ; Load $E3.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stx $E1.b		; 86 E1 ; Store X register to $E1.b [Reads: X Index]
	jsr $FEB4.w		; 20 B4 FE ; Jump to subroutine at $FEB4.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $D1		; B0 D1 ; Branch if carry set to $B0, $D1 [Flow: branch]
	ldx $E2.b		; A6 E2 ; Load $E2.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $E2.b		; 86 E2 ; Store X register to $E2.b [Reads: X Index]
	ldx $EB.b		; A6 EB ; Load $EB.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cpx $ED.b		; E4 ED ; Compare $ED.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	ldx $EC.b		; A6 EC ; Load $EC.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	stx $EA.b		; 86 EA ; Store X register to $EA.b [Reads: X Index]
	jsr $FF1E.w		; 20 1E FF ; Jump to subroutine at $FF1E.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $BD		; B0 BD ; Branch if carry set to $B0, $BD [Flow: branch]
	ldx $EB.b		; A6 EB ; Load $EB.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stx $EB.b		; 86 EB ; Store X register to $EB.b [Reads: X Index]
.ACCU 16
	rep #$21		; C2 21
	lda $E5.b		; A5 E5 ; Load $E5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $E7.b		; 65 E7 ; Add $E7.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $E5.b		; 85 E5 ; Store accumulator to $E5.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $F0.b		; 65 F0 ; Add $F0.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $80, $A8		; 80 A8 ; Branch always to $80, $A8 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $EF.b		; A5 EF ; Load $EF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$38.b		; 29 38 ; Logical AND #$38.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $BC.b		; 85 BC ; Store accumulator to $BC.b [Reads: Accumulator]
	lda $EF.b		; A5 EF ; Load $EF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$38.b		; 29 38 ; Logical AND #$38.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $BC.b		; E5 BC ; Subtract $BC.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $34		; D0 34 ; Branch if not equal to $D0, $34 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $09FEA4.l,X		; BF A4 FE 09 ; Load long $09FEA4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	and $09FE94.l,X		; 3F 94 FE 09 ; AND accumulator with memory (long,X) $09FE94.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B2.b		; 85 B2 ; Store accumulator to $B2.b [Reads: Accumulator]
	lda $EF.b		; A5 EF ; Load $EF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0038.w		; 29 38 00 ; Logical AND #$0038.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $B9.b		; 05 B9 ; Logical OR $B9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $B5.b		; A5 B5 ; Load $B5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $0000.w,Y		; 59 00 00 ; Exclusive OR accumulator with memory $0000.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $B2.b		; 25 B2 ; Logical AND $B2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $0000.w,Y		; 59 00 00 ; Exclusive OR accumulator with memory $0000.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0000.w,Y		; 99 00 00 ; Store accumulator to $0000.w,Y [Reads: Accumulator, Y Index]
	lda $B7.b		; A5 B7 ; Load $B7.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $0010.w,Y		; 59 10 00 ; Exclusive OR accumulator with memory $0010.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $B2.b		; 25 B2 ; Logical AND $B2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $0010.w,Y		; 59 10 00 ; Exclusive OR accumulator with memory $0010.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0010.w,Y		; 99 10 00 ; Store accumulator to $0010.w,Y [Reads: Accumulator, Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $90, $FB		; 90 FB ; Branch if carry clear to $90, $FB [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $FA.b		; 85 FA ; Store accumulator to $FA.b [Reads: Accumulator]
	stz $FB.b		; 64 FB ; Store zero to $FB.b
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $09FEA4.l,X		; BF A4 FE 09 ; Load long $09FEA4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B2.b		; 85 B2 ; Store accumulator to $B2.b [Reads: Accumulator]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda $EF.b		; A5 EF ; Load $EF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$0038.w		; 29 38 00 ; Logical AND #$0038.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $B9.b		; 05 B9 ; Logical OR $B9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	lda $B5.b		; A5 B5 ; Load $B5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $0000.w,Y		; 59 00 00 ; Exclusive OR accumulator with memory $0000.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $B2.b		; 25 B2 ; Logical AND $B2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $0000.w,Y		; 59 00 00 ; Exclusive OR accumulator with memory $0000.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0000.w,Y		; 99 00 00 ; Store accumulator to $0000.w,Y [Reads: Accumulator, Y Index]
	lda $B7.b		; A5 B7 ; Load $B7.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $0010.w,Y		; 59 10 00 ; Exclusive OR accumulator with memory $0010.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $B2.b		; 25 B2 ; Logical AND $B2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $0010.w,Y		; 59 10 00 ; Exclusive OR accumulator with memory $0010.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0010.w,Y		; 99 10 00 ; Store accumulator to $0010.w,Y [Reads: Accumulator, Y Index]
	sec		; 38 ; Set carry flag [Flags: C]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$0020.w		; E9 20 00 ; Subtract #$0020.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $FA.b		; C6 FA ; Decrement $FA.b [Reads: Direct Page] [Flags: ZN]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	lda $B5.b		; A5 B5 ; Load $B5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0000.w,Y		; 99 00 00 ; Store accumulator to $0000.w,Y [Reads: Accumulator, Y Index]
	lda $B7.b		; A5 B7 ; Load $B7.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0010.w,Y		; 99 10 00 ; Store accumulator to $0010.w,Y [Reads: Accumulator, Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$0020.w		; E9 20 00 ; Subtract #$0020.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	dec $FA.b		; C6 FA ; Decrement $FA.b [Reads: Direct Page] [Flags: ZN]
	.db $D0, $ED		; D0 ED ; Branch if not equal to $D0, $ED [Flow: branch]
	lda $09FE94.l,X		; BF 94 FE 09 ; Load long $09FE94.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B2.b		; 85 B2 ; Store accumulator to $B2.b [Reads: Accumulator]
	lda $B5.b		; A5 B5 ; Load $B5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $0000.w,Y		; 59 00 00 ; Exclusive OR accumulator with memory $0000.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $B2.b		; 25 B2 ; Logical AND $B2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $0000.w,Y		; 59 00 00 ; Exclusive OR accumulator with memory $0000.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0000.w,Y		; 99 00 00 ; Store accumulator to $0000.w,Y [Reads: Accumulator, Y Index]
	lda $B7.b		; A5 B7 ; Load $B7.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $0010.w,Y		; 59 10 00 ; Exclusive OR accumulator with memory $0010.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $B2.b		; 25 B2 ; Logical AND $B2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $0010.w,Y		; 59 10 00 ; Exclusive OR accumulator with memory $0010.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $0010.w,Y		; 99 10 00 ; Store accumulator to $0010.w,Y [Reads: Accumulator, Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $7F7FFF.l,X		; FF FF 7F 7F ; Subtract with carry (long,X) $7F7FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $1F1F3F.l,X		; 3F 3F 1F 1F ; AND accumulator with memory (long,X) $1F1F3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $07070F.l		; 0F 0F 07 07 ; OR accumulator with memory (long) $07070F.l [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($FEFC.w,X)		; FC FC FE ; Jump to subroutine indirect indexed ($FEFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $FFFF.w,X		; FE FF FF ; Increment memory $FFFF.w,X [Reads: X Index] [Flags: ZN]
	dec $E0.b		; C6 E0 ; Decrement $E0.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $E9.b		; A6 E9 ; Load $E9.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx $C0.b		; A6 C0 ; Load $C0.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $C0.b,X		; B5 C0 ; Load $C0.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $E2.b		; C5 E2 ; Compare $E2.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $90, $F0		; 90 F0 ; Branch if carry clear to $90, $F0 [Flow: branch]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $BF.b,X		; B5 BF ; Load $BF.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $E1.b		; 85 E1 ; Store accumulator to $E1.b [Reads: Accumulator]
	stx $E9.b		; 86 E9 ; Store X register to $E9.b [Reads: X Index]
	.db $80, $E2		; 80 E2 ; Branch always to $80, $E2 [Flow: branch]
	sta $E4.b		; 85 E4 ; Store accumulator to $E4.b [Reads: Accumulator]
	lda $BF.b,X		; B5 BF ; Load $BF.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $E3.b		; 85 E3 ; Store accumulator to $E3.b [Reads: Accumulator]
	stx $E9.b		; 86 E9 ; Store X register to $E9.b [Reads: X Index]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E1.b		; E5 E1 ; Subtract $E1.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta WRDIVH.l		; 8F 05 42 00 ; Store accumulator (long) WRDIVH.l [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta WRDIVL.l		; 8F 04 42 00 ; Store accumulator (long) WRDIVL.l [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	lda $E4.b		; A5 E4 ; Load $E4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta WRDIVB.l		; 8F 06 42 00 ; Store accumulator (long) WRDIVB.l [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0080.w		; 09 80 00 ; Logical OR #$0080.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $E5.b		; 85 E5 ; Store accumulator to $E5.b [Reads: Accumulator]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda RDDIVL.l		; AF 14 42 00 ; Load long RDDIVL.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc RDDIVL.l		; EF 14 42 00 ; Subtract with carry (long) RDDIVL.l [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $E7.b		; 85 E7 ; Store accumulator to $E7.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $E0.b		; C6 E0 ; Decrement $E0.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $F2.b		; A6 F2 ; Load $F2.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cpx $C0.b		; E4 C0 ; Compare $C0.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: ZN]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lda $C0.b,X		; B5 C0 ; Load $C0.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $EB.b		; C5 EB ; Compare $EB.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $90, $EC		; 90 EC ; Branch if carry clear to $90, $EC [Flow: branch]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $BF.b,X		; B5 BF ; Load $BF.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $EA.b		; 85 EA ; Store accumulator to $EA.b [Reads: Accumulator]
	stx $F2.b		; 86 F2 ; Store X register to $F2.b [Reads: X Index]
	.db $80, $DE		; 80 DE ; Branch always to $80, $DE [Flow: branch]
	sta $ED.b		; 85 ED ; Store accumulator to $ED.b [Reads: Accumulator]
	lda $BF.b,X		; B5 BF ; Load $BF.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $EC.b		; 85 EC ; Store accumulator to $EC.b [Reads: Accumulator]
	stx $F2.b		; 86 F2 ; Store X register to $F2.b [Reads: X Index]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $EA.b		; E5 EA ; Subtract $EA.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta WRDIVH.l		; 8F 05 42 00 ; Store accumulator (long) WRDIVH.l [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta WRDIVL.l		; 8F 04 42 00 ; Store accumulator (long) WRDIVL.l [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	lda $ED.b		; A5 ED ; Load $ED.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $EB.b		; E5 EB ; Subtract $EB.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta WRDIVB.l		; 8F 06 42 00 ; Store accumulator (long) WRDIVB.l [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $E9.b		; A5 E9 ; Load $E9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$0080.w		; 09 80 00 ; Logical OR #$0080.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: ZN]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: ZNC]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda RDDIVL.l		; AF 14 42 00 ; Load long RDDIVL.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc RDDIVL.l		; EF 14 42 00 ; Subtract with carry (long) RDDIVL.l [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $F0.b		; 85 F0 ; Store accumulator to $F0.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $06FFAA.l,X		; FF AA FF 06 ; Subtract with carry (long,X) $06FFAA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $D2.b		; 05 D2 ; Logical OR $D2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $00FFE4.l,X		; FF E4 FF 00 ; Subtract with carry (long,X) $00FFE4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D8.b		; 00 D8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cld		; D8 ; Clear decimal flag [Flags: D]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $02.b		; 05 02 ; Logical OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $05.b		; 02 05 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $D8.b,X		; F6 D8 ; Increment memory $D8.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	inc $28.b,X		; F6 28 ; Increment memory $28.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	inc $03.b,X		; F6 03 ; Increment memory $03.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: ZNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $03		; Opcode 03 overrunning bank boundry at 04FFFF. Skipping. ; OR accumulator with stack relative $03 [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
.ENDS
