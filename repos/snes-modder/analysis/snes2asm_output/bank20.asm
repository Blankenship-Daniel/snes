.BANK 20 SLOT 0
.ORG $0000

.SECTION "Bank20" FORCE

	sbc $E31C.w,Y		; F9 1C E3 ; Subtract with carry $E31C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp [$E0.b]		; C7 E0 ; Compare accumulator (long) [$E0.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $1C1C0D.l,X		; 1F 0D 1C 1C ; Logical OR long $1C1C0D.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$1F.b]		; 07 1F ; OR accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $CF		; 30 CF ; Branch if minus to $30, $CF [Flow: branch]
	eor [$60.b]		; 47 60 ; Exclusive OR accumulator with memory (long) [$60.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $BF4001.l,X		; 9F 01 40 BF ; Store accumulator (long,X) $BF4001.l,X [Reads: Accumulator, X Index]
	eor $C0.b,S		; 43 C0 ; Exclusive OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $1F1F01.l,X		; 3F 01 1F 1F ; AND accumulator with memory (long,X) $1F1F01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $3F.b,S		; 23 3F ; AND accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($7F.b),Y		; 11 7F ; OR accumulator with memory ($7F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $F10FF5.l,X		; 7F F5 0F F1 ; Add long $F10FF5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $B207F9.l		; 0F F9 07 B2 ; OR accumulator with memory (long) $B207F9.l [Writes: Accumulator] [Flags: ZN]
	lsr $1DE9.w		; 4E E9 1D ; Logical shift right $1DE9.w [Flags: ZNC]
	cmp $773D.w,Y		; D9 3D 77 ; Compare accumulator $773D.w,Y [Reads: Y Index] [Flags: ZNC]
	lda $227FB7.l,X		; BF B7 7F 22 ; Load long $227FB7.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$8104.w		; C0 04 81 ; Compare #$8104.w with Y register [Reads: Y Index] [Flags: ZNC]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $A5.b,S		; 43 A5 ; Exclusive OR accumulator with stack relative $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $21E0.w		; 6D E0 21 ; Add $21E0.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ldx #$D066.w		; A2 66 D0 ; Load #$D066.w into X register [Writes: X Index] [Flags: ZN]
	and ($68.b)		; 32 68 ; AND accumulator with memory (indirect) ($68.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $C539.w,Y		; 99 39 C5 ; Store accumulator to $C539.w,Y [Reads: Accumulator, Y Index]
	asl $0FE2.w,X		; 1E E2 0F ; Arithmetic shift left $0FE2.w,X [Reads: X Index] [Flags: ZNC]
	sbc ($13.b),Y		; F1 13 ; Subtract with carry ($13.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($19.b,S),Y		; 13 19 ; OR accumulator (stack relative indirect indexed) ($19.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $E2C6.w		; 8D C6 E2 ; Store accumulator to $E2C6.w [Reads: Accumulator]
	sbc $7BFC.w,Y		; F9 FC 7B ; Subtract with carry $7BFC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$29.b]		; 87 29 ; Store accumulator (long) [$29.b] [Reads: Accumulator, Direct Page]
	cmp [$3C.b],Y		; D7 3C ; Compare accumulator (long indexed) [$3C.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp $1F.b,S		; C3 1F ; Compare accumulator (stack relative) $1F.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cpx #$E21D.w		; E0 1D E2 ; Compare #$E21D.w with X register [Reads: X Index] [Flags: ZNC]
	ora $F807F0.l		; 0F F0 07 F8 ; OR accumulator with memory (long) $F807F0.l [Writes: Accumulator] [Flags: ZN]
	stx $CE.b		; 86 CE ; Store X register to $CE.b [Reads: X Index]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FEF10F.l,X		; FF 0F F1 FE ; Subtract with carry (long,X) $FEF10F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $FC.b,S		; C3 FC ; Compare accumulator (stack relative) $FC.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	ora $C23DF0.l		; 0F F0 3D C2 ; OR accumulator with memory (long) $C23DF0.l [Writes: Accumulator] [Flags: ZN]
	sbc [$08.b],Y		; F7 08 ; Subtract with carry (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $07F820.l,X		; DF 20 F8 07 ; Compare accumulator (long,X) $07F820.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cpx #$221F.w		; E0 1F 22 ; Compare #$221F.w with X register [Reads: X Index] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $011E83.l,X		; 1F 83 1E 01 ; Logical OR long $011E83.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$43.b]		; 07 43 ; OR accumulator with memory (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($2503.w,X)		; FC 03 25 ; Jump to subroutine indirect indexed ($2503.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $3F7F01.l,X		; FF 01 7F 3F ; Subtract with carry (long,X) $3F7F01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $0027FF.l		; 2F FF 27 00 ; AND accumulator with memory (long) $0027FF.l [Writes: Accumulator] [Flags: ZN]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $09BF23.l,X		; 7F 23 BF 09 ; Add long $09BF23.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $EFEFDF.l,X		; DF DF EF EF ; Compare accumulator (long,X) $EFEFDF.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc $DBDBFF.l,X		; FF FF DB DB ; Subtract with carry (long,X) $DBDBFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $27FD.w,X		; FD FD 27 ; Subtract with carry $27FD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C7C70D.l,X		; FF 0D C7 C7 ; Subtract with carry (long,X) $C7C70D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($F3.b,S),Y		; F3 F3 ; Subtract with carry (stack relative indirect indexed) ($F3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $DBAD.w		; AD AD DB ; Load $DBAD.w into accumulator [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cmp $B3B3DF.l,X		; DF DF B3 B3 ; Compare accumulator (long,X) $B3B3DF.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $CF03FF.l		; 22 FF 03 CF ; Jump to subroutine long $CF03FF.l [Writes: Stack Pointer] [Flow: call]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	lda [$BF.b],Y		; B7 BF ; Load accumulator (long indexed) [$BF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $0005FF.l		; 22 FF 05 00 ; Jump to subroutine long $0005FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $FE936C.l,X		; FF 6C 93 FE ; Subtract with carry (long,X) $FE936C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($49.b,X)		; 01 49 ; Logical OR ($49.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $FF2700.l,X		; FF 00 27 FF ; Subtract with carry (long,X) $FF2700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $3FC043.l,X		; FF 43 C0 3F ; Subtract with carry (long,X) $3FC043.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($F8.b,X)		; 01 F8 ; Logical OR ($F8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$43.b]		; 07 43 ; OR accumulator with memory (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($4303.w,X)		; FC 03 43 ; Jump to subroutine indirect indexed ($4303.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FF2700.l,X		; FF 00 27 FF ; Subtract with carry (long,X) $FF2700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $4B03FC.l		; 0F FC 03 4B ; OR accumulator with memory (long) $4B03FC.l [Writes: Accumulator] [Flags: ZN]
	sbc $FF2800.l,X		; FF 00 28 FF ; Subtract with carry (long,X) $FF2800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $FF00.w		; 4E 00 FF ; Logical shift right $FF00.w [Flags: ZNC]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $58D703.l,X		; FF 03 D7 58 ; Subtract with carry (long,X) $58D703.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $EF4348.l		; CF 48 43 EF ; Compare accumulator (long) $EF4348.l [Reads: Accumulator] [Flags: ZNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ora $F7.b,S		; 03 F7 ; OR accumulator with stack relative $F7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc [$78.b]		; E7 78 ; Subtract with carry (long) [$78.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $EF.b,S		; 43 EF ; Exclusive OR accumulator with stack relative $EF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $70, $03		; 70 03 ; Branch if overflow set to $70, $03 [Flow: branch]
	and $33.b,S		; 23 33 ; AND accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $03.b,S		; 23 03 ; AND accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $7E.b,X		; 35 7E ; Logical AND $7E.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($FC.b,X)		; 81 FC ; Store accumulator ($FC.b,X) [Reads: Accumulator, X Index, Direct Page]
	ora $E8.b,S		; 03 E8 ; OR accumulator with stack relative $E8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$F2.b],Y		; 17 F2 ; OR accumulator with memory (long indexed) [$F2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $CA1DE4.l		; 0F E4 1D CA ; OR accumulator with memory (long) $CA1DE4.l [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $F8FCFE.l,X		; FF FE FC F8 ; Subtract with carry (long,X) $F8FCFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$C2E0.w		; E0 E0 C2 ; Compare #$C2E0.w with X register [Reads: X Index] [Flags: ZNC]
	sty $F7.b		; 84 F7 ; Store Y register to $F7.b [Reads: Y Index]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	cpy $8484.w		; CC 84 84 ; Compare $8484.w with Y register [Reads: Y Index] [Flags: ZNC]
	jmp $33CC.w		; 4C CC 33 ; Jump to $33CC.w [Flow: jump]
	sbc $7FF807.l,X		; FF 07 F8 7F ; Subtract with carry (long,X) $7FF807.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $7B		; 30 7B ; Branch if minus to $30, $7B [Flow: branch]
	and ($00.b,S),Y		; 33 00 ; AND accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $FFFF00.l,X		; 7F 00 FF FF ; Add long $FFFF00.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $31.b		; 00 31 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($62.b),Y		; 31 62 ; AND accumulator with memory ($62.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $62, $CE, $FF		; 62 CE FF ; Push effective relative address $62, $CE, $FF [Writes: Stack Pointer]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF10.l		; EF 10 FF 00 ; Subtract with carry (long) $00FF10.l [Writes: Accumulator] [Flags: ZVNC]
	dec $009D.w		; CE 9D 00 ; Decrement $009D.w [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $3C01FE.l		; EF FE 01 3C ; Subtract with carry (long) $3C01FE.l [Writes: Accumulator] [Flags: ZVNC]
	cmp $B9.b,S		; C3 B9 ; Compare accumulator (stack relative) $B9.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp [$33.b]		; C7 33 ; Compare accumulator (long) [$33.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	eor $6EDFA7.l		; 4F A7 DF 6E ; Exclusive OR accumulator with memory (long) $6EDFA7.l [Writes: Accumulator] [Flags: ZN]
	sta $CB1EED.l,X		; 9F ED 1E CB ; Store accumulator (long,X) $CB1EED.l,X [Reads: Accumulator, X Index]
	bit $1F22.w,X		; 3C 22 1F ; Test bits $1F22.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $3F011F.l		; 22 1F 01 3F ; Jump to subroutine long $3F011F.l [Writes: Stack Pointer] [Flow: call]
	adc $05FF22.l,X		; 7F 22 FF 05 ; Add long $05FF22.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$9FFF.w		; E0 FF 9F ; Compare #$9FFF.w with X register [Reads: X Index] [Flags: ZNC]
	cpx #$807F.w		; E0 7F 80 ; Compare #$807F.w with X register [Reads: X Index] [Flags: ZNC]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8021E0.l,X		; FF E0 21 80 ; Subtract with carry (long,X) $8021E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFC37E.l,X		; FF 7E C3 FF ; Subtract with carry (long,X) $FFC37E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $A5E7.w,Y		; 99 E7 A5 ; Store accumulator to $A5E7.w,Y [Reads: Accumulator, Y Index]
	ror $3D18.w,X		; 7E 18 3D ; Rotate right $3D18.w,X [Reads: X Index] [Flags: ZNC]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	cmp ($1C.b,X)		; C1 1C ; Compare accumulator ($1C.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc $C3.b,S		; E3 C3 ; Subtract stack-relative $C3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($C3.b,X)		; 81 C3 ; Store accumulator ($C3.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $6DAAFF.l,X		; FF FF AA 6D ; Subtract with carry (long,X) $6DAAFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $65.b		; A6 65 ; Load $65.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	cmp ($32.b,S),Y		; D3 32 ; Compare accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	sbc #$18.b		; E9 18 ; Subtract #$18.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	eor $F5.b		; 45 F5 ; Exclusive OR $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $27E0.w		; 0C E0 27 ; Test and set bits $27E0.w [Reads: Accumulator] [Flags: Z]
	lda [$4E.b],Y		; B7 4E ; Load accumulator (long indexed) [$4E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	tsb $0206.w		; 0C 06 02 ; Test and set bits $0206.w [Reads: Accumulator] [Flags: Z]
	cop $42.b		; 02 42 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jmp $EBB3.w		; 4C B3 EB ; Jump to $EBB3.w [Flow: jump]
	lda [$DF.b],Y		; B7 DF ; Load accumulator (long indexed) [$DF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$76.b]		; E7 76 ; Subtract with carry (long) [$76.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $7B0E35.l		; 4F 35 0E 7B ; Exclusive OR accumulator with memory (long) $7B0E35.l [Writes: Accumulator] [Flags: ZN]
	mvp $4E,$75		; 44 75 4E ; Move block positive $4E,$75 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lda $8E.b,X		; B5 8E ; Load $8E.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$E7.b]		; 47 E7 ; Exclusive OR accumulator with memory (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $9ECEAF.l		; 4F AF CE 9E ; Exclusive OR accumulator with memory (long) $9ECEAF.l [Writes: Accumulator] [Flags: ZN]
	stz $425E.w,X		; 9E 5E 42 ; Store zero to $425E.w,X [Reads: X Index]
	lda $FFBD.w,X		; BD BD FF ; Load $FFBD.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $BD		; 42 BD ; Reserved instruction
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $BD42.w,X		; BD 42 BD ; Load $BD42.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $DB.b		; 66 DB ; Rotate right $DB.b [Reads: Direct Page] [Flags: ZNC]
	bit $FF22.w,X		; 3C 22 FF ; Test bits $FF22.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $C3		; 42 C3 ; Reserved instruction
	cmp $66.b,S		; C3 66 ; Compare accumulator (stack relative) $66.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	mvp $BB,$BB		; 44 BB BB ; Move block positive $BB,$BB [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	jsl $4409FF.l		; 22 FF 09 44 ; Jump to subroutine long $4409FF.l [Writes: Stack Pointer] [Flow: call]
	mvp $28,$28		; 44 28 28 ; Move block positive $28,$28 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	jmp ($9A7C.w,X)		; 7C 7C 9A ; Jump indirect indexed to ($9A7C.w,X) [Reads: X Index] [Flow: jump]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	bit #$89.b		; 89 89 ; Test bits #$89.b with accumulator [Reads: Accumulator] [Flags: Z]
	jsl $BB0400.l		; 22 00 04 BB ; Jump to subroutine long $BB0400.l [Writes: Stack Pointer] [Flow: call]
	cmp [$83.b],Y		; D7 83 ; Compare accumulator (long indexed) [$83.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	adc $76.b		; 65 76 ; Add $76.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$7F.b		; 09 7F ; Logical OR #$7F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and ($FF.b,X)		; 21 FF ; Logical AND ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lsr $59F8.w,X		; 5E F8 59 ; Logical shift right $59F8.w,X [Reads: X Index] [Flags: ZNC]
	cpx $705F.w		; EC 5F 70 ; Compare $705F.w with X register [Reads: X Index] [Flags: ZNC]
	asl $0022.w		; 0E 22 00 ; Arithmetic shift left $0022.w [Flags: ZNC]
	cpx #$612F.w		; E0 2F 61 ; Compare #$612F.w with X register [Reads: X Index] [Flags: ZNC]
	cpy #$C0C6.w		; C0 C6 C0 ; Compare #$C0C6.w with Y register [Reads: Y Index] [Flags: ZNC]
	eor ($07.b,X)		; 41 07 ; Exclusive OR accumulator with memory ($07.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $70.b		; 14 70 ; Test and reset bits $70.b [Reads: Accumulator] [Flags: Z]
	eor $4F20E0.l		; 4F E0 20 4F ; Exclusive OR accumulator with memory (long) $4F20E0.l [Writes: Accumulator] [Flags: ZN]
	cmp $731818.l		; CF 18 18 73 ; Compare accumulator (long) $731818.l [Reads: Accumulator] [Flags: ZNC]
	adc ($04.b,S),Y		; 73 04 ; Add with carry (stack relative indirect indexed) ($04.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$13.b		; 09 13 ; Logical OR #$13.b with accumulator [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora $8CE730.l,X		; 1F 30 E7 8C ; Logical OR long $8CE730.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $192100.l,X		; 1F 00 21 19 ; Logical OR long $192100.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $933D.w		; 4D 3D 93 ; Exclusive OR $933D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $BE7789.l,X		; 7F 89 77 BE ; Add long $BE7789.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($BF.b,X)		; 61 BF ; Add with carry ($BF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $060040.l,X		; DF 40 00 06 ; Compare accumulator (long,X) $060040.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $FF2F.w		; 0E 2F FF ; Arithmetic shift left $FF2F.w [Flags: ZNC]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $4FC03F.l,X		; FF 3F C0 4F ; Subtract with carry (long,X) $4FC03F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $73		; F0 73 ; Branch if equal to $F0, $73 [Flow: branch]
	jsr ($E020.w,X)		; FC 20 E0 ; Jump to subroutine indirect indexed ($E020.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sta $23FF7F.l		; 8F 7F FF 23 ; Store accumulator (long) $23FF7F.l [Reads: Accumulator]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $FFC000.l,X		; 1F 00 C0 FF ; Logical OR long $FFC000.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF7CB3.l,X		; FF B3 7C FF ; Subtract with carry (long,X) $FF7CB3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $BB.b		; 00 BB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($C7C7.w,X)		; 7C C7 C7 ; Jump indirect indexed to ($C7C7.w,X) [Reads: X Index] [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jmp ($0022.w)		; 6C 22 00 ; Jump indirect to ($0022.w) [Flow: jump]
	tsb $83.b		; 04 83 ; Test and set bits $83.b [Reads: Accumulator] [Flags: Z]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $008310.l,X		; FF 10 83 00 ; Subtract with carry (long,X) $008310.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $61.b		; E6 61 ; Increment $61.b [Reads: Direct Page] [Flags: ZN]
	inc $F669.w		; EE 69 F6 ; Increment $F669.w [Flags: ZN]
	adc $79E6.w,Y		; 79 E6 79 ; Add $79E6.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $CE71.w		; EE 71 CE ; Increment $CE71.w [Flags: ZN]
	adc ($23.b),Y		; 71 23 ; Add with carry ($23.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($18.b)		; 32 18 ; AND accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $76.b,X		; 95 76 ; Store accumulator to $76.b,X [Reads: Accumulator, X Index]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	cpx $D857.w		; EC 57 D8 ; Compare $D857.w with X register [Reads: X Index] [Flags: ZNC]
	lda [$B8.b]		; A7 B8 ; Load accumulator (long) [$B8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $47.b,S		; 43 47 ; Exclusive OR accumulator with stack relative $47.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc $7C.b,S		; 63 7C ; Add with carry (stack relative) $7C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lda ($BE.b),Y		; B1 BE ; Load accumulator ($BE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($23.b),Y		; 11 23 ; OR accumulator with memory ($23.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $83.b,S		; 43 83 ; Exclusive OR accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $81.b,S		; 83 81 ; Store accumulator (stack relative) $81.b,S [Reads: Accumulator, Stack Pointer]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $0100.w,X		; 3C 00 01 ; Test bits $0100.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	inc $8501.w,X		; FE 01 85 ; Increment memory $8501.w,X [Reads: X Index] [Flags: ZN]
	mvn $23,$00		; 54 00 23 ; Move block negative $23,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc $22FE00.l,X		; FF 00 FE 22 ; Subtract with carry (long,X) $22FE00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $29EE4F.l,X		; FF 4F EE 29 ; Subtract with carry (long,X) $29EE4F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$93.b]		; 27 93 ; AND accumulator with memory (long) [$93.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $FF4380.l,X		; 7F 80 43 FF ; Add long $FF4380.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $2301.w,X		; FE 01 23 ; Increment memory $2301.w,X [Reads: X Index] [Flags: ZN]
	sbc $F7F803.l,X		; FF 03 F8 F7 ; Subtract with carry (long,X) $F7F803.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF43DF.l		; EF DF 43 FF ; Subtract with carry (long) $FF43DF.l [Writes: Accumulator] [Flags: ZVNC]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $04FB80.l,X		; 7F 80 FB 04 ; Add long $04FB80.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $004400.l,X		; FF 00 44 00 ; Subtract with carry (long,X) $004400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $01FF23.l,X		; FF 23 FF 01 ; Subtract with carry (long,X) $01FF23.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0026E0.l,X		; FF E0 26 00 ; Subtract with carry (long,X) $0026E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	trb $37D4.w		; 1C D4 37 ; Test and reset bits $37D4.w [Reads: Accumulator] [Flags: Z]
	lda ($61.b,X)		; A1 61 ; Load accumulator ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $4A.b		; C4 4A ; Compare $4A.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	dec $DE50.w		; CE 50 DE ; Decrement $DE50.w [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jmp.w [$C040]		; DC 40 C0 ; Jump long indirect [$C040] [Flow: jump]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	asl $2131.w,X		; 1E 31 21 ; Arithmetic shift left $2131.w,X [Reads: X Index] [Flags: ZNC]
	and ($23.b,X)		; 21 23 ; Logical AND ($23.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $9B5E.w		; AD 5E 9B ; Load $9B5E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp ($79B6.w,X)		; 7C B6 79 ; Jump indirect indexed to ($79B6.w,X) [Reads: X Index] [Flow: jump]
	lda $DE73.w,X		; BD 73 DE ; Load $DE73.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $9E6D.w,Y		; 39 6D 9E ; AND accumulator with memory $9E6D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$CF.b],Y		; 37 CF ; AND accumulator with memory (long indexed) [$CF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0022E0.l,X		; 1F E0 22 00 ; Logical OR long $0022E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $EFDF.w,X		; BC DF EF ; Load Y register $EFDF.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $F0, $B5		; F0 B5 ; Branch if equal to $F0, $B5 [Flow: branch]
	stx $271A.w		; 8E 1A 27 ; Store X register to $271A.w [Reads: X Index]
	sbc $76F3.w		; ED F3 76 ; Subtract $76F3.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	adc $5C5B.w,Y		; 79 5B 5C ; Add $5C5B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FEB900.l,X		; FF 00 B9 FE ; Subtract with carry (long,X) $FEB900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $CF5F00.l,X		; FF 00 5F CF ; Subtract with carry (long,X) $CF5F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$83.b]		; 07 83 ; OR accumulator with memory (long) [$83.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$FEF8.w		; A0 F8 FE ; Load #$FEF8.w into Y register [Writes: Y Index] [Flags: ZN]
	mvp $FF,$00		; 44 00 FF ; Move block positive $FF,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora [$7E.b]		; 07 7E ; OR accumulator with memory (long) [$7E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($BD.b,X)		; 81 BD ; Store accumulator ($BD.b,X) [Reads: Accumulator, X Index, Direct Page]
	eor $7E.b,S		; 43 7E ; Exclusive OR accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $433EC1.l,X		; FF C1 3E 43 ; Subtract with carry (long,X) $433EC1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $3C0200.l,X		; FF 00 02 3C ; Subtract with carry (long,X) $3C0200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($83.b,X)		; 81 83 ; Store accumulator ($83.b,X) [Reads: Accumulator, X Index, Direct Page]
	jsl $0007FF.l		; 22 FF 07 00 ; Jump to subroutine long $0007FF.l [Writes: Stack Pointer] [Flow: call]
	brk $99.b		; 00 99 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $BFBF.w,Y		; 99 BF BF ; Store accumulator to $BFBF.w,Y [Reads: Accumulator, Y Index]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: ZN]
	and $42.b,S		; 23 42 ; AND accumulator with stack relative $42.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $FFBD00.l,X		; FF 00 BD FF ; Subtract with carry (long,X) $FFBD00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $406600.l,X		; FF 00 66 40 ; Subtract with carry (long,X) $406600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $D983.w,Y		; 19 83 D9 ; OR accumulator with memory $D983.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $39.b		; 24 39 ; Test bits $39.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($1B.b),Y		; 11 1B ; OR accumulator with memory ($1B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($1B.b,S),Y		; 13 1B ; OR accumulator (stack relative indirect indexed) ($1B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $2B.b,S		; 03 2B ; OR accumulator with stack relative $2B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($6B.b,S),Y		; 13 6B ; OR accumulator (stack relative indirect indexed) ($6B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($43.b,S),Y		; 33 43 ; AND accumulator (stack relative indirect indexed) ($43.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	eor ($02.b,S),Y		; 53 02 ; XOR accumulator (stack relative indirect indexed) ($02.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $36.b,S		; 63 36 ; Add with carry (stack relative) $36.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	trb $22.b		; 14 22 ; Test and reset bits $22.b [Reads: Accumulator] [Flags: Z]
	tsb $09.b		; 04 09 ; Test and set bits $09.b [Reads: Accumulator] [Flags: Z]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cmp $DB.b,S		; C3 DB ; Compare accumulator (stack relative) $DB.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	stz $3E96.w,X		; 9E 96 3E ; Store zero to $3E96.w,X [Reads: X Index]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and ($35.b)		; 32 35 ; AND accumulator with memory (indirect) ($35.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $33.b,S		; 43 33 ; Exclusive OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $06.b,X		; 34 06 ; Test bits $06.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($35.b)		; 32 35 ; AND accumulator with memory (indirect) ($35.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $240A.w		; 0C 0A 24 ; Test and set bits $240A.w [Reads: Accumulator] [Flags: Z]
	adc ($C1.b,X)		; 61 C1 ; Add with carry ($C1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and $C8.b,S		; 23 C8 ; AND accumulator with stack relative $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $68.b		; 85 68 ; Store accumulator to $68.b [Reads: Accumulator]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $008300.l,X		; FF 00 83 00 ; Subtract with carry (long,X) $008300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $23.b		; 02 23 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $CE007F.l		; 0F 7F 00 CE ; OR accumulator with memory (long) $CE007F.l [Writes: Accumulator] [Flags: ZN]
	and ($D1.b),Y		; 31 D1 ; AND accumulator with memory ($D1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $1EE1.w		; 2E E1 1E ; Rotate left $1EE1.w [Flags: ZNC]
	cmp $3E.b,S		; C3 3E ; Compare accumulator (stack relative) $3E.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sta $7A.b,S		; 83 7A ; Store accumulator (stack relative) $7A.b,S [Reads: Accumulator, Stack Pointer]
	sta [$74.b],Y		; 97 74 ; Store accumulator (long indexed) [$74.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $002468.l		; AF 68 24 00 ; Load long $002468.l into accumulator [Writes: Accumulator] [Flags: ZN]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $43		; 10 43 ; Branch if plus to $10, $43 [Flow: branch]
	sbc $000B00.l,X		; FF 00 0B 00 ; Subtract with carry (long,X) $000B00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F1FFC7.l,X		; FF C7 FF F1 ; Subtract with carry (long,X) $F1FFC7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F1FFF8.l,X		; FF F8 FF F1 ; Subtract with carry (long,X) $F1FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $27FF8F.l,X		; FF 8F FF 27 ; Subtract with carry (long,X) $27FF8F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $649B70.l		; 8F 70 9B 64 ; Store accumulator (long) $649B70.l [Reads: Accumulator]
	lda ($4E.b),Y		; B1 4E ; Load accumulator ($4E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
.INDEX 8
	sep #$1F		; E2 1F
	dec $3F.b		; C6 3F ; Decrement $3F.b [Reads: Direct Page] [Flags: ZN]
	bit #$84.b		; 89 84 ; Test bits #$84.b with accumulator [Reads: Accumulator] [Flags: Z]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cop $24.b		; 02 24 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	.db $10, $59		; 10 59 ; Branch if plus to $10, $59 [Flow: branch]
	dec $4E89.w,X		; DE 89 4E ; Decrement memory $4E89.w,X [Reads: X Index] [Flags: ZN]
	eor $C9.b,S		; 43 C9 ; Exclusive OR accumulator with stack relative $C9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $D908.w		; 0E 08 D9 ; Arithmetic shift left $D908.w [Flags: ZNC]
	asl $7CB3.w,X		; 1E B3 7C ; Arithmetic shift left $7CB3.w,X [Reads: X Index] [Flags: ZNC]
	sta [$78.b]		; 87 78 ; Store accumulator (long) [$78.b] [Reads: Accumulator, Direct Page]
	sbc $222000.l,X		; FF 00 20 22 ; Subtract with carry (long,X) $222000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	jsr $0100.w		; 20 00 01 ; Jump to subroutine at $0100.w [Writes: Stack Pointer] [Flow: call]
	ora $47.b,S		; 03 47 ; OR accumulator with stack relative $47.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $F046FF.l		; 0F FF 46 F0 ; OR accumulator with memory (long) $F046FF.l [Writes: Accumulator] [Flags: ZN]
	sbc $0EFF29.l,X		; FF 29 FF 0E ; Subtract with carry (long,X) $0EFF29.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $DD31EF.l,X		; 1F EF 31 DD ; Logical OR long $DD31EF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $BB.b,S		; 63 BB ; Add with carry (stack relative) $BB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$F7.b]		; C7 F7 ; Compare accumulator (long) [$F7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sta $FAFEFD.l		; 8F FD FE FA ; Store accumulator (long) $FAFEFD.l [Reads: Accumulator]
	lda $9BFD.w,X		; BD FD 9B ; Load $9BFD.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $48.b,S		; 83 48 ; Store accumulator (stack relative) $48.b,S [Reads: Accumulator, Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: ZNC]
	sta [$F8.b]		; 87 F8 ; Store accumulator (long) [$F8.b] [Reads: Accumulator, Direct Page]
	ora $C33CF0.l		; 0F F0 3C C3 ; OR accumulator with memory (long) $C33CF0.l [Writes: Accumulator] [Flags: ZN]
	jmp ($2483.w,X)		; 7C 83 24 ; Jump indirect indexed to ($2483.w,X) [Reads: X Index] [Flow: jump]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $004883.l,X		; 1F 83 48 00 ; Logical OR long $004883.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $00FF03.l,X		; FF 03 FF 00 ; Subtract with carry (long,X) $00FF03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $220024.l,X		; FF 24 00 22 ; Subtract with carry (long,X) $220024.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $419811.l,X		; FF 11 98 41 ; Subtract with carry (long,X) $419811.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($60.b,X)		; A1 60 ; Load accumulator ($60.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $F93C.w,X		; FD 3C F9 ; Subtract with carry $F93C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $71,$ED		; 44 ED 71 ; Move block positive $71,$ED [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pei ($59.b)		; D4 59 ; Push effective indirect address ($59.b) [Reads: Direct Page] [Writes: Stack Pointer]
	lda $60.b		; A5 60 ; Load $60.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	bit $1E26.w,X		; 3C 26 1E ; Test bits $1E26.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	jsl $22E002.l		; 22 02 E0 22 ; Jump to subroutine long $22E002.l [Writes: Stack Pointer] [Flow: call]
	jsl $75001A.l		; 22 1A 00 75 ; Jump to subroutine long $75001A.l [Writes: Stack Pointer] [Flow: call]
	stx $65.b,Y		; 96 65 ; Store X register $65.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ldx $CB.b		; A6 CB ; Load $CB.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	jmp $1897.w		; 4C 97 18 ; Jump to $1897.w [Flow: jump]
	lda $20BF30.l		; AF 30 BF 20 ; Load long $20BF30.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $62FD60.l,X		; FF 60 FD 62 ; Subtract with carry (long,X) $62FD60.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $30, $60		; 30 60 ; Branch if minus to $30, $60 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	mvp $02,$06		; 44 06 02 ; Move block positive $02,$06 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $A84FB8.l,X		; 5F B8 4F A8 ; Exclusive OR accumulator with memory (long,X) $A84FB8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$58.b],Y		; 97 58 ; Store accumulator (long indexed) [$58.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sbc $DF4570.l		; EF 70 45 DF ; Subtract with carry (long) $DF4570.l [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpx #$6A.b		; E0 6A ; Compare #$6A.b with X register [Reads: X Index] [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	stz $3E.b		; 64 3E ; Store zero to $3E.b
	rol $787C.w,X		; 3E 7C 78 ; Rotate left $787C.w,X [Reads: X Index] [Flags: ZNC]
	.db $70, $74		; 70 74 ; Branch if overflow set to $70, $74 [Flow: branch]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	sbc $0A.b,X		; F5 0A ; Subtract $0A.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $DB1B.w		; EE 1B DB ; Increment $DB1B.w [Flags: ZN]
	rol $74B2.w,X		; 3E B2 74 ; Rotate left $74B2.w,X [Reads: X Index] [Flags: ZNC]
	lda $63.b		; A5 63 ; Load $63.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $01.b		; E6 01 ; Increment $01.b [Reads: Direct Page] [Flags: ZN]
	sbc ($54.b,S),Y		; F3 54 ; Subtract with carry (stack relative indirect indexed) ($54.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $16.b,X		; F5 16 ; Subtract $16.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $5F6B31.l,X		; 1F 31 6B 5F ; Logical OR long $5F6B31.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc #$68.b		; E9 68 ; Subtract #$68.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	lda $D87750.l		; AF 50 77 D8 ; Load long $D87750.l into accumulator [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	jmp ($2E4D.w,X)		; 7C 4D 2E ; Jump indirect indexed to ($2E4D.w,X) [Reads: X Index] [Flow: jump]
	lda $C6.b		; A5 C6 ; Load $C6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $86.b		; 65 86 ; Add $86.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $26.b		; C5 26 ; Compare $26.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $50, $FA		; 50 FA ; Branch if overflow clear to $50, $FA [Flow: branch]
	sty $FAD6.w		; 8C D6 FA ; Store Y register to $FAD6.w [Reads: Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda $79.b		; A5 79 ; Load $79.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx $98.b		; E4 98 ; Compare $98.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc ($AC.b)		; F2 AC ; Subtract with carry (indirect) ($AC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $3E.b,X		; 34 3E ; Test bits $3E.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora #$1F.b		; 09 1F ; Logical OR #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $171903.l		; 0F 03 19 17 ; OR accumulator with memory (long) $171903.l [Writes: Accumulator] [Flags: ZN]
	cop $83.b		; 02 83 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($70.b,X)		; E1 70 ; Subtract with carry ($70.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $C396.w,X		; 9E 96 C3 ; Store zero to $C396.w,X [Reads: X Index]
	cmp ($79.b,S),Y		; D3 79 ; Compare accumulator (stack relative indirect indexed) ($79.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	adc $0C0C.w,Y		; 79 0C 0C ; Add $0C0C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $67.b		; 84 67 ; Store Y register to $67.b [Reads: Y Index]
	eor $D0ACBC.l		; 4F BC AC D0 ; Exclusive OR accumulator with memory (long) $D0ACBC.l [Writes: Accumulator] [Flags: ZN]
	sta ($EB.b)		; 92 EB ; Store accumulator (indirect) ($EB.b) [Reads: Accumulator, Direct Page]
	adc ($2C.b,X)		; 61 2C ; Add with carry ($2C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stx $F3.b		; 86 F3 ; Store X register to $F3.b [Reads: X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $00047E.l,X		; FF 7E 04 00 ; Subtract with carry (long,X) $00047E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $8124FF.l,X		; FF FF 24 81 ; Subtract with carry (long,X) $8124FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $FF.b		; 46 FF ; Logical shift right $FF.b [Reads: Direct Page] [Flags: ZNC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $FF0044.l,X		; FF 44 00 FF ; Subtract with carry (long,X) $FF0044.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($E7.b,X)		; 01 E7 ; Logical OR ($E7.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc [$22.b]		; E7 22 ; Subtract with carry (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $9E2BE0.l,X		; FF E0 2B 9E ; Subtract with carry (long,X) $9E2BE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($9F.b,X)		; 61 9F ; Add with carry ($9F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	stz $C5.b		; 64 C5 ; Store zero to $C5.b
	lsr $66A1.w,X		; 5E A1 66 ; Logical shift right $66A1.w,X [Reads: X Index] [Flags: ZNC]
	.db $42, $3D		; 42 3D ; Reserved instruction
	bit $0002.w,X		; 3C 02 00 ; Test bits $0002.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $6E.b		; 64 6E ; Store zero to $6E.b
	ror $3C7E.w,X		; 7E 7E 3C ; Rotate right $3C7E.w,X [Reads: X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta [$48.b]		; 87 48 ; Store accumulator (long) [$48.b] [Reads: Accumulator, Direct Page]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	adc $A974B4.l		; 6F B4 74 A9 ; Add with carry (long) $A974B4.l [Writes: Accumulator] [Flags: ZVNC]
	adc $7FA7.w,Y		; 79 A7 7F ; Add $7FA7.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy #$7F.b		; A0 7F ; Load #$7F.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $7C.b,S		; A3 7C ; Load accumulator (stack relative) $7C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda ($7C.b,S),Y		; B3 7C ; Load accumulator (stack relative indirect indexed) ($7C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $10		; 30 10 ; Branch if minus to $30, $10 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $23.b		; 06 23 ; Arithmetic shift left $23.b [Reads: Direct Page] [Flags: ZNC]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $3C.b		; 06 3C ; Arithmetic shift left $3C.b [Reads: Direct Page] [Flags: ZNC]
	bit $8181.w,X		; 3C 81 81 ; Test bits $8181.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	bit $5183.w,X		; 3C 83 51 ; Test bits $5183.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $7E.b,S		; C3 7E ; Compare accumulator (stack relative) $7E.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	bit $0022.w,X		; 3C 22 00 ; Test bits $0022.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	adc $CF.b,X		; 75 CF ; Add $CF.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $91		; 70 91 ; Branch if overflow set to $70, $91 [Flow: branch]
	ror $1EE1.w		; 6E E1 1E ; Rotate right $1EE1.w [Flags: ZNC]
	eor $86.b,S		; 43 86 ; Exclusive OR accumulator with stack relative $86.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $2402.w,Y		; D9 02 24 ; Compare accumulator $2402.w,Y [Reads: Y Index] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	.db $10, $83		; 10 83 ; Branch if plus to $10, $83 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($E3FF.w,X)		; FC FF E3 ; Jump to subroutine indirect indexed ($E3FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $1FFF8F.l,X		; FF 8F FF 1F ; Subtract with carry (long,X) $1FFF8F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F1FF8F.l,X		; FF 8F FF F1 ; Subtract with carry (long,X) $F1FF8F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0F0027.l,X		; FF 27 00 0F ; Subtract with carry (long,X) $0F0027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stx $49.b		; 86 49 ; Store X register to $49.b [Reads: X Index]
	sta $B953.w,X		; 9D 53 B9 ; Store accumulator to $B953.w,X [Reads: Accumulator, X Index]
	adc [$B6.b]		; 67 B6 ; Add with carry (long) [$B6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $6FB1.w		; 6E B1 6F ; Rotate right $6FB1.w [Flags: ZNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	adc [$AF.b]		; 67 AF ; Add with carry (long) [$AF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $B7		; 70 B7 ; Branch if overflow set to $70, $B7 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta $2B.b,S		; 83 2B ; Store accumulator (stack relative) $2B.b,S [Reads: Accumulator, Stack Pointer]
	ora $24.b,S		; 03 24 ; OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000002.l,X		; FF 02 00 00 ; Subtract with carry (long,X) $000002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($84.b,S),Y		; 33 84 ; AND accumulator (stack relative indirect indexed) ($84.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $60.b		; 04 60 ; Test and set bits $60.b [Reads: Accumulator] [Flags: Z]
	ora $5F205F.l,X		; 1F 5F 20 5F ; Logical OR long $5F205F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	mvp $52,$2D		; 44 2D 52 ; Move block positive $52,$2D [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $72.b		; 04 72 ; Test and set bits $72.b [Reads: Accumulator] [Flags: Z]
	ora $053A.w		; 0D 3A 05 ; Logical OR $053A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $190028.l		; 0F 28 00 19 ; OR accumulator with memory (long) $190028.l [Writes: Accumulator] [Flags: ZN]
	lda $D572.w		; AD 72 D5 ; Load $D572.w into accumulator [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $751E.w		; ED 1E 75 ; Subtract $751E.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	stx $9CEB.w		; 8E EB 9C ; Store X register to $9CEB.w [Reads: X Index]
	lda [$78.b],Y		; B7 78 ; Load accumulator (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $01FEE0.l,X		; DF E0 FE 01 ; Compare accumulator (long,X) $01FEE0.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cop $06.b		; 02 06 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1E.b		; 06 1E ; Arithmetic shift left $1E.b [Reads: Direct Page] [Flags: ZNC]
	rol $F0FC.w,X		; 3E FC F0 ; Rotate left $F0FC.w,X [Reads: X Index] [Flags: ZNC]
	ora ($DF.b,X)		; 01 DF ; Logical OR ($DF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $43.b		; 24 43 ; Test bits $43.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sbc $2BE004.l,X		; FF 04 E0 2B ; Subtract with carry (long,X) $2BE004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($84.b,S),Y		; 73 84 ; Add with carry (stack relative indirect indexed) ($84.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $38D788.l		; 6F 88 D7 38 ; Add with carry (long) $38D788.l [Writes: Accumulator] [Flags: ZVNC]
	cmp $20DF30.l		; CF 30 DF 20 ; Compare accumulator (long) $20DF30.l [Reads: Accumulator] [Flags: ZNC]
	ror $26.b		; 66 26 ; Rotate right $26.b [Reads: Direct Page] [Flags: ZNC]
	asl $3E1E.w		; 0E 1E 3E ; Arithmetic shift left $3E1E.w [Flags: ZNC]
	rol $383C.w,X		; 3E 3C 38 ; Rotate left $383C.w,X [Reads: X Index] [Flags: ZNC]
	dec $37.b,X		; D6 37 ; Decrement memory $37.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc $35.b,X		; F5 35 ; Subtract $35.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $35.b,X		; D5 35 ; Compare accumulator $35.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $55.b,X		; F5 55 ; Subtract $55.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($15.b),Y		; F1 15 ; Subtract with carry ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	and $FF3AC5.l,X		; 3F C5 3A FF ; AND accumulator with memory (long,X) $FF3AC5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dec $470F.w		; CE 0F 47 ; Decrement $470F.w [Flags: ZN]
	and $E66500.l,X		; 3F 00 65 E6 ; AND accumulator with memory (long,X) $E66500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $A5.b		; 45 A5 ; Exclusive OR $A5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $1A.b		; A6 1A ; Load $1A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	sta $A6.b		; 85 A6 ; Store accumulator to $A6.b [Reads: Accumulator]
	eor $A3FE.w,X		; 5D FE A3 ; Exclusive OR accumulator with memory $A3FE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp $1A00FF.l		; 5C FF 00 1A ; Jump long to $1A00FF.l [Flow: jump]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
.ACCU 8
.INDEX 8
	sep #$FC		; E2 FC
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $2D1332.l		; 0F 32 13 2D ; OR accumulator with memory (long) $2D1332.l [Writes: Accumulator] [Flags: ZN]
	ora ($2E.b,X)		; 01 2E ; Logical OR ($2E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($3D.b,S),Y		; 13 3D ; OR accumulator (stack relative indirect indexed) ($3D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $1F.b,X		; 16 1F ; Arithmetic shift left $1F.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0C.b,X		; 15 0C ; OR accumulator with memory $0C.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $1F.b,X		; 34 1F ; Test bits $1F.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cpx $4BB4.w		; EC B4 4B ; Compare $4BB4.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $FA27.w,Y		; F9 27 FA ; Subtract with carry $FA27.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $FF.b,X		; 76 FF ; Rotate right $FF.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sty $9F.b,X		; 94 9F ; Store Y register $9F.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	tsb $0B.b		; 04 0B ; Test and set bits $0B.b [Reads: Accumulator] [Flags: Z]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $201200.l		; 22 00 12 20 ; Jump to subroutine long $201200.l [Writes: Stack Pointer] [Flow: call]
	adc ($F0.b),Y		; 71 F0 ; Add with carry ($F0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A4F0D0.l,X		; FF D0 F0 A4 ; Subtract with carry (long,X) $A4F0D0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx $A1.b		; E4 A1 ; Compare $A1.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc ($A8.b,X)		; E1 A8 ; Subtract with carry ($A8.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	dec $FF.b,X		; D6 FF ; Decrement memory $FF.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc #$22.b		; E9 22 ; Subtract #$22.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc $CFE007.l,X		; FF 07 E0 CF ; Subtract with carry (long,X) $CFE007.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	stz $C097.w,X		; 9E 97 C0 ; Store zero to $C097.w,X [Reads: X Index]
	sbc #$FF.b		; E9 FF ; Subtract #$FF.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	lsr $00FF.w		; 4E FF 00 ; Logical shift right $00FF.w [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $47.b		; 00 47 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AA0100.l,X		; FF 00 01 AA ; Subtract with carry (long,X) $AA0100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $45.b,X		; 55 45 ; Exclusive OR accumulator with memory $45.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $07003F.l,X		; FF 3F 00 07 ; Subtract with carry (long,X) $07003F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $3300.w		; 0C 00 33 ; Test and set bits $3300.w [Reads: Accumulator] [Flags: Z]
	brk $CF.b		; 00 CF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $24.b,S		; 03 24 ; OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0F.b,S		; 03 0F ; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $2087.w,X		; 3C 87 20 ; Test bits $2087.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $F00F.w,X		; 3C 0F F0 ; Test bits $F00F.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $FF43C0.l,X		; 3F C0 43 FF ; AND accumulator with memory (long,X) $FF43C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0F.b,S		; 03 0F ; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $C0F0.w,X		; 3C F0 C0 ; Test bits $C0F0.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $040022.l,X		; FF 22 00 04 ; Subtract with carry (long,X) $040022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF7F00.l,X		; FF 00 7F FF ; Subtract with carry (long,X) $FF7F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $00FF44.l,X		; 3F 44 FF 00 ; AND accumulator with memory (long,X) $00FF44.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $3F.b		; 04 3F ; Test and set bits $3F.b [Reads: Accumulator] [Flags: Z]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $0024FF.l,X		; FF FF 24 00 ; Subtract with carry (long,X) $0024FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $FF0100.l		; 22 00 01 FF ; Jump to subroutine long $FF0100.l [Writes: Stack Pointer] [Flow: call]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0043.l,X		; FF 43 00 FF ; Subtract with carry (long,X) $FF0043.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0024FF.l,X		; FF FF 24 00 ; Subtract with carry (long,X) $0024FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $2706F5.l		; 4F F5 06 27 ; Exclusive OR accumulator with memory (long) $2706F5.l [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $26AA00.l,X		; FF 00 AA 26 ; Subtract with carry (long,X) $26AA00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $AAAA01.l,X		; FF 01 AA AA ; Subtract with carry (long,X) $AAAA01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	tsb $0055.w		; 0C 55 00 ; Test and set bits $0055.w [Reads: Accumulator] [Flags: Z]
	ora $10.b,S		; 03 10 ; OR accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FD81.w,X		; FD 81 FD ; Subtract with carry $FD81.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($B7.b,S),Y		; 13 B7 ; OR accumulator (stack relative indirect indexed) ($B7.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $07.b,S		; 43 07 ; Exclusive OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $02FC0A.l,X		; FF 0A FC 02 ; Subtract with carry (long,X) $02FC0A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $49.b,S		; 03 49 ; OR accumulator with stack relative $49.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $03.b,S		; 83 03 ; Store accumulator (stack relative) $03.b,S [Reads: Accumulator, Stack Pointer]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FF00.w,X		; FD 00 FF ; Subtract with carry $FF00.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $FD,$02		; 44 02 FD ; Move block positive $FD,$02 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FD02FD.l,X		; FF FD 02 FD ; Subtract with carry (long,X) $FD02FD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $23FF00.l,X		; FF 00 FF 23 ; Subtract with carry (long,X) $23FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0022.w,X		; FD 22 00 ; Subtract with carry $0022.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor [$FF.b]		; 47 FF ; Exclusive OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $01FE.w,X		; FE FE 01 ; Increment memory $01FE.w,X [Reads: X Index] [Flags: ZN]
	sbc $2401FE.l,X		; FF FE 01 24 ; Subtract with carry (long,X) $2401FE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $000101.l,X		; FF 01 01 00 ; Subtract with carry (long,X) $000101.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $00		; 50 00 ; Branch if overflow clear to $50, $00 [Flow: branch]
	sbc $26FE00.l,X		; FF 00 FE 26 ; Subtract with carry (long,X) $26FE00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $769509.l,X		; FF 09 95 76 ; Subtract with carry (long,X) $769509.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F51E.w		; ED 1E F5 ; Subtract $F51E.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	asl $06F9.w		; 0E F9 06 ; Arithmetic shift left $06F9.w [Flags: ZNC]
	sbc $02.b,X		; F5 02 ; Subtract $02.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $F7.b,S		; 43 F7 ; Exclusive OR accumulator with stack relative $F7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	sbc $06.b,X		; F5 06 ; Subtract $06.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $80, $E0		; 80 E0 ; Branch always to $80, $E0 [Flow: branch]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $10, $64		; 10 64 ; Branch if plus to $10, $64 [Flow: branch]
	stz $CF33.w		; 9C 33 CF ; Store zero to $CF33.w
	jmp $F867E3.l		; 5C E3 67 F8 ; Jump long to $F867E3.l [Flow: jump]
	adc ($FE.b),Y		; 71 FE ; Add with carry ($FE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $B1EF.w		; 2E EF B1 ; Rotate left $B1EF.w [Flags: ZNC]
	adc ($D6.b),Y		; 71 D6 ; Add with carry ($D6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $10, $0E		; 10 0E ; Branch if plus to $10, $0E [Flow: branch]
	ora $330FCC.l		; 0F CC 0F 33 ; OR accumulator with memory (long) $330FCC.l [Writes: Accumulator] [Flags: ZN]
	ora $CC.b,S		; 03 CC ; OR accumulator with stack relative $CC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy #$33.b		; C0 33 ; Compare #$33.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $CC		; F0 CC ; Branch if equal to $F0, $CC [Flow: branch]
	bit $CF33.w,X		; 3C 33 CF ; Test bits $CF33.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cpy $33F3.w		; CC F3 33 ; Compare $33F3.w with Y register [Reads: Y Index] [Flags: ZNC]
	bit $FCF0.w,X		; 3C F0 FC ; Test bits $FCF0.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $00030F.l,X		; 3F 0F 03 00 ; AND accumulator with memory (long,X) $00030F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$84.b]		; 67 84 ; Add with carry (long) [$84.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($01.b,X)		; 21 01 ; Logical AND ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $FC73F0.l		; 6F F0 73 FC ; Add with carry (long) $FC73F0.l [Writes: Accumulator] [Flags: ZVNC]
	bit $A7EF.w		; 2C EF A7 ; Test bits $A7EF.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	adc [$D4.b]		; 67 D4 ; Add with carry (long) [$D4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $10.b		; 05 10 ; Logical OR $10.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $6CFC73.l		; 0F 73 FC 6C ; OR accumulator with memory (long) $6CFC73.l [Writes: Accumulator] [Flags: ZN]
	sty $5B.b		; 84 5B ; Store Y register to $5B.b [Reads: Y Index]
	ora ($87.b,X)		; 01 87 ; Logical OR ($87.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $50, $01		; 50 01 ; Branch if overflow clear to $50, $01 [Flow: branch]
	sta $64.b,S		; 83 64 ; Store accumulator (stack relative) $64.b,S [Reads: Accumulator, Stack Pointer]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0D00.w		; 20 00 0D ; Jump to subroutine at $0D00.w [Writes: Stack Pointer] [Flow: call]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $00FF7F.l,X		; FF 7F FF 00 ; Subtract with carry (long,X) $00FF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($7F.b,X)		; 81 7F ; Store accumulator ($7F.b,X) [Reads: Accumulator, X Index, Direct Page]
	inc $007E.w,X		; FE 7E 00 ; Increment memory $007E.w,X [Reads: X Index] [Flags: ZN]
	ora $0F.b,S		; 03 0F ; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $050022.l,X		; 3F 22 00 05 ; AND accumulator with memory (long,X) $050022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($3D.b,X)		; 01 3D ; Logical OR ($3D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $00C0.w		; 0E C0 00 ; Arithmetic shift left $00C0.w [Flags: ZNC]
	sbc $220022.l,X		; FF 22 00 22 ; Subtract with carry (long,X) $220022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F00005.l,X		; FF 05 00 F0 ; Subtract with carry (long,X) $F00005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $F0C7B8.l		; 8F B8 C7 F0 ; Store accumulator (long) $F0C7B8.l [Reads: Accumulator]
	jsl $0023FF.l		; 22 FF 23 00 ; Jump to subroutine long $0023FF.l [Writes: Stack Pointer] [Flow: call]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $FF0000.l		; 22 00 00 FF ; Jump to subroutine long $FF0000.l [Writes: Stack Pointer] [Flow: call]
	jsl $FF2200.l		; 22 00 22 FF ; Jump to subroutine long $FF2200.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $FF,$00		; 44 00 FF ; Move block positive $FF,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	jsl $0023FF.l		; 22 FF 23 00 ; Jump to subroutine long $0023FF.l [Writes: Stack Pointer] [Flow: call]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $FF0000.l		; 22 00 00 FF ; Jump to subroutine long $FF0000.l [Writes: Stack Pointer] [Flow: call]
	jsl $FF2200.l		; 22 00 22 FF ; Jump to subroutine long $FF2200.l [Writes: Stack Pointer] [Flow: call]
	sta $8B.b		; 85 8B ; Store accumulator to $8B.b [Reads: Accumulator]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $010022.l,X		; FF 22 00 01 ; Subtract with carry (long,X) $010022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $FF0000.l		; 22 00 00 FF ; Jump to subroutine long $FF0000.l [Writes: Stack Pointer] [Flow: call]
	jsl $FF0800.l		; 22 00 08 FF ; Jump to subroutine long $FF0800.l [Writes: Stack Pointer] [Flow: call]
	sbc $0507FA.l,X		; FF FA 07 05 ; Subtract with carry (long,X) $0507FA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $060023.l,X		; FF 23 00 06 ; Subtract with carry (long,X) $060023.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0C00.w,X)		; FC 00 0C ; Jump to subroutine indirect indexed ($0C00.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $38.b,X		; B4 38 ; Load Y register $38.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	cpy $F046.w		; CC 46 F0 ; Compare $F046.w with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $8F04.w		; 0C 04 8F ; Test and set bits $8F04.w [Reads: Accumulator] [Flags: Z]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	.db $F0, $C0		; F0 C0 ; Branch if equal to $F0, $C0 [Flow: branch]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $83.b,X		; 15 83 ; OR accumulator with memory $83.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $F20F.w,X		; FE 0F F2 ; Increment memory $F20F.w,X [Reads: X Index] [Flags: ZN]
	asl $FDFD.w,X		; 1E FD FD ; Arithmetic shift left $FDFD.w,X [Reads: X Index] [Flags: ZNC]
	sbc $F63FCB.l,X		; FF CB 3F F6 ; Subtract with carry (long,X) $F63FCB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc $7B77.w,X		; 7D 77 7B ; Add $7B77.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$0F.b],Y		; 77 0F ; Add with carry (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $3F1F1F.l		; 0F 1F 1F 3F ; OR accumulator with memory (long) $3F1F1F.l [Writes: Accumulator] [Flags: ZN]
	and $45FF22.l,X		; 3F 22 FF 45 ; AND accumulator with memory (long,X) $45FF22.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $688300.l		; 22 00 83 68 ; Jump to subroutine long $688300.l [Writes: Stack Pointer] [Flow: call]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF2400.l,X		; FF 00 24 FF ; Subtract with carry (long,X) $FF2400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $034F00.l		; 22 00 4F 03 ; Jump to subroutine long $034F00.l [Writes: Stack Pointer] [Flow: call]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($4B.b,X)		; 01 4B ; Logical OR ($4B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $FE0300.l,X		; FF 00 03 FE ; Subtract with carry (long,X) $FE0300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $45FE00.l,X		; FF 00 FE 45 ; Subtract with carry (long,X) $45FE00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $06.b,X		; F5 06 ; Subtract $06.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora #$EA.b		; 09 EA ; Logical OR #$EA.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0DEB.w		; 0D EB 0D ; Logical OR $0DEB.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $1A.b,X		; 95 1A ; Store accumulator to $1A.b,X [Reads: Accumulator, X Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $97.b,X		; 74 97 ; Store zero to $97.b,X [Reads: X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	jsl $F015F8.l		; 22 F8 15 F0 ; Jump to subroutine long $F015F8.l [Writes: Stack Pointer] [Flow: call]
	.db $F0, $E1		; F0 E1 ; Branch if equal to $F0, $E1 [Flow: branch]
	sta $07.b,S		; 83 07 ; Store accumulator (stack relative) $07.b,S [Reads: Accumulator, Stack Pointer]
	lda #$58.b		; A9 58 ; Load #$58.b into accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($6F.b,S),Y		; 93 6F ; Store accumulator (stack relative indirect indexed) ($6F.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	cpy $D333.w		; CC 33 D3 ; Compare $D333.w with Y register [Reads: Y Index] [Flags: ZNC]
	bit $1FEC.w,X		; 3C EC 1F ; Test bits $1FEC.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	lda ($4F.b)		; B2 4F ; Load accumulator (indirect) ($4F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $CC67.w,Y		; 99 67 CC ; Store accumulator to $CC67.w,Y [Reads: Accumulator, Y Index]
	and ($07.b,S),Y		; 33 07 ; AND accumulator (stack relative indirect indexed) ($07.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sec		; 38 ; Set carry flag [Flags: C]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sty $63F3.w		; 8C F3 63 ; Store Y register to $63F3.w [Reads: Y Index]
	jsr ($4884.w,X)		; FC 84 48 ; Jump to subroutine indirect indexed ($4884.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $90, $6C		; 90 6C ; Branch if carry clear to $90, $6C [Flow: branch]
	sta $A4.b		; 85 A4 ; Store accumulator to $A4.b [Reads: Accumulator]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda [$4F.b],Y		; B7 4F ; Load accumulator (long indexed) [$4F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc [$CF.b]		; 67 CF ; Add with carry (long) [$CF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $07		; 30 07 ; Branch if minus to $30, $07 [Flow: branch]
	ora $25.b,S		; 03 25 ; OR accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $87.b		; 00 87 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	jmp.w [$6F23]		; DC 23 6F ; Jump long indirect [$6F23] [Flow: jump]
	.db $10, $27		; 10 27 ; Branch if plus to $10, $27 [Flow: branch]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $12.b,Y		; B6 12 ; Load X register $12.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ora $9A26.w,X		; 1D 26 9A ; OR accumulator with memory $9A26.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $9A.b		; 02 9A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $5E.b		; C6 5E ; Decrement $5E.b [Reads: Direct Page] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	asl $A2.b		; 06 A2 ; Arithmetic shift left $A2.b [Reads: Direct Page] [Flags: ZNC]
	asl $B2.b		; 06 B2 ; Arithmetic shift left $B2.b [Reads: Direct Page] [Flags: ZNC]
	asl $49.b,X		; 16 49 ; Arithmetic shift left $49.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor #$41.b		; 49 41 ; Exclusive OR #$41.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $21.b		; 65 21 ; Add $21.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor ($59.b,X)		; 41 59 ; Exclusive OR accumulator with memory ($59.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor #$9F.b		; 49 9F ; Exclusive OR #$9F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	cpx #$8B.b		; E0 8B ; Compare #$8B.b with X register [Reads: X Index] [Flags: ZNC]
	sbc ($8C.b,S),Y		; F3 8C ; Subtract with carry (stack relative indirect indexed) ($8C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$88.b],Y		; F7 88 ; Subtract with carry (long indexed) [$88.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$8F.b],Y		; F7 8F ; Subtract with carry (long indexed) [$8F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $43		; F0 43 ; Branch if equal to $F0, $43 [Flow: branch]
	sta $03F6.w		; 8D F6 03 ; Store accumulator to $03F6.w [Reads: Accumulator]
	sta $00E2.w,X		; 9D E2 00 ; Store accumulator to $00E2.w,X [Reads: Accumulator, X Index]
	tsb $25.b		; 04 25 ; Test and set bits $25.b [Reads: Accumulator] [Flags: Z]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $44BF00.l,X		; FF 00 BF 44 ; Subtract with carry (long,X) $44BF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $0631.w,X		; DE 31 06 ; Decrement memory $0631.w,X [Reads: X Index] [Flags: ZN]
	sbc $FBFF00.l,X		; FF 00 FF FB ; Subtract with carry (long,X) $FBFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stx $FB.b		; 86 FB ; Store X register to $FB.b [Reads: X Index]
	sbc $180028.l,X		; FF 28 00 18 ; Subtract with carry (long,X) $180028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit #$F1.b		; 89 F1 ; Test bits #$F1.b with accumulator [Reads: Accumulator] [Flags: Z]
	stx $90F7.w		; 8E F7 90 ; Store X register to $90F7.w [Reads: X Index]
	sbc $9CE393.l		; EF 93 E3 9C ; Subtract with carry (long) $9CE393.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $A7CFB0.l		; EF B0 CF A7 ; Subtract with carry (long) $A7CFB0.l [Writes: Accumulator] [Flags: ZVNC]
	cmp [$BE.b]		; C7 BE ; Compare accumulator (long) [$BE.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	dec $06.b		; C6 06 ; Decrement $06.b [Reads: Direct Page] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0000.w		; 0C 00 00 ; Test and set bits $0000.w [Reads: Accumulator] [Flags: Z]
	ora $FF19.w,Y		; 19 19 FF ; OR accumulator with memory $FF19.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0002.l,X		; FF 02 00 FF ; Subtract with carry (long,X) $FF0002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $024889.l,X		; FF 89 48 02 ; Subtract with carry (long,X) $024889.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $87.b		; 84 87 ; Store Y register to $87.b [Reads: Y Index]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $80, $01		; 80 01 ; Branch always to $80, $01 [Flow: branch]
	sbc $FE7E43.l,X		; FF 43 7E FE ; Subtract with carry (long,X) $FE7E43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: ZNC]
	rol $B6.b,X		; 36 B6 ; Rotate left $B6.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $B6.b,X		; 16 B6 ; Arithmetic shift left $B6.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $010100.l,X		; 7F 00 01 01 ; Add long $010100.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $C000FF.l,X		; 3F FF 00 C0 ; AND accumulator with memory (long,X) $C000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $40AD08.l,X		; BF 08 AD 40 ; Load long $40AD08.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc $FF40.w,X		; FE 40 FF ; Increment memory $FF40.w,X [Reads: X Index] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor ($01.b)		; 52 01 ; Exclusive OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	and $01.b,S		; 23 01 ; AND accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$27.b]		; 07 27 ; OR accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $EF160E.l,X		; FF 0E 16 EF ; Subtract with carry (long,X) $EF160E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $DB1F.w		; ED 1F DB ; Subtract $DB1F.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc $EDDFB6.l,X		; FF B6 DF ED ; Subtract with carry (long,X) $EDDFB6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $B6BFDB.l,X		; BF DB BF B6 ; Load long $B6BFDB.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $FF286D.l,X		; 7F 6D 28 FF ; Add long $FF286D.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $03.b		; 45 03 ; Exclusive OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $DC.b,S		; 83 DC ; Store accumulator (stack relative) $DC.b,S [Reads: Accumulator, Stack Pointer]
	ora $23.b,S		; 03 23 ; OR accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($E6.b,X)		; 01 E6 ; Logical OR ($E6.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$99.b]		; 07 99 ; OR accumulator with memory (long) [$99.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $7966.w,X		; 1E 66 79 ; Arithmetic shift left $7966.w,X [Reads: X Index] [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cpx $6F.b		; E4 6F ; Compare $6F.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $90, $BF		; 90 BF ; Branch if carry clear to $90, $BF [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	cpx #$80.b		; E0 80 ; Compare #$80.b with X register [Reads: X Index] [Flags: ZNC]
	ora $0F.b,S		; 03 0F ; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $83FFFF.l,X		; 3F FF FF 83 ; AND accumulator with memory (long,X) $83FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora $4B.b,S		; 03 4B ; OR accumulator with stack relative $4B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $0F0100.l,X		; FF 00 01 0F ; Subtract with carry (long,X) $0F0100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $83FF25.l,X		; 3F 25 FF 83 ; AND accumulator with memory (long,X) $83FF25.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp $6F27.w,Y		; D9 27 6F ; Compare accumulator $6F27.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $10, $33		; 10 33 ; Branch if plus to $10, $33 [Flow: branch]
	tsb $0718.w		; 0C 18 07 ; Test and set bits $0718.w [Reads: Accumulator] [Flags: Z]
	tsb $0703.w		; 0C 03 07 ; Test and set bits $0703.w [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $303FC7.l,X		; FF C7 3F 30 ; Subtract with carry (long,X) $303FC7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $93F06F.l		; CF 6F F0 93 ; Compare accumulator (long) $93F06F.l [Reads: Accumulator] [Flags: ZNC]
	jmp ($1FE0.w,X)		; 7C E0 1F ; Jump indirect indexed to ($1FE0.w,X) [Reads: X Index] [Flow: jump]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp [$0F.b]		; C7 0F ; Compare accumulator (long) [$0F.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $F0, $27		; F0 27 ; Branch if equal to $F0, $27 [Flow: branch]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	brk $59.b		; 00 59 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit #$25.b		; 89 25 ; Test bits #$25.b with accumulator [Reads: Accumulator] [Flags: Z]
	tsb $28.b		; 04 28 ; Test and set bits $28.b [Reads: Accumulator] [Flags: Z]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	tsb $30.b		; 04 30 ; Test and set bits $30.b [Reads: Accumulator] [Flags: Z]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($12.b)		; 92 12 ; Store accumulator (indirect) ($12.b) [Reads: Accumulator, Direct Page]
	eor $FE.b,S		; 43 FE ; Exclusive OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $C103.w,X		; 7E 03 C1 ; Rotate right $C103.w,X [Reads: X Index] [Flags: ZNC]
	and $440080.l,X		; 3F 80 00 44 ; AND accumulator with memory (long,X) $440080.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $00057F.l,X		; FF 7F 05 00 ; Subtract with carry (long,X) $00057F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $0101.w		; 6D 01 01 ; Add $0101.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $FF1600.l		; 22 00 16 FF ; Jump to subroutine long $FF1600.l [Writes: Stack Pointer] [Flow: call]
	and $BF00B9.l,X		; 3F B9 00 BF ; AND accumulator with memory (long,X) $BF00B9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $BC.b		; 00 BC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $AC.b		; 02 AC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$85.b		; 09 85 ; Logical OR #$85.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	sbc $7F0000.l,X		; FF 00 00 7F ; Subtract with carry (long,X) $7F0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor ($52.b,X)		; 41 52 ; Exclusive OR accumulator with memory ($52.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	and $00002E.l,X		; 3F 2E 00 00 ; AND accumulator with memory (long,X) $00002E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $090028.l,X		; FF 28 00 09 ; Subtract with carry (long,X) $090028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cmp $E09FF8.l,X		; DF F8 9F E0 ; Compare accumulator (long,X) $E09FF8.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sta $FF8FCF.l,X		; 9F CF 8F FF ; Store accumulator (long,X) $FF8FCF.l,X [Reads: Accumulator, X Index]
	.db $80, $44		; 80 44 ; Branch always to $80, $44 [Flow: branch]
	.db $F0, $BF		; F0 BF ; Branch if equal to $F0, $BF [Flow: branch]
	ora $3F.b		; 05 3F ; Logical OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $440322.l,X		; 3F 22 03 44 ; AND accumulator with memory (long,X) $440322.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $FF,$00		; 44 00 FF ; Move block positive $FF,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	jsl $0000FF.l		; 22 FF 00 00 ; Jump to subroutine long $0000FF.l [Writes: Stack Pointer] [Flow: call]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($92.b)		; 12 92 ; OR accumulator with memory (indirect) ($92.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $DE.b		; 46 DE ; Logical shift right $DE.b [Reads: Direct Page] [Flags: ZNC]
	ora ($AE.b)		; 12 AE ; OR accumulator with memory (indirect) ($AE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $82, $BC, $FF		; 82 BC FF ; Branch always long to $82, $BC, $FF [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $6D.b,S		; 03 6D ; OR accumulator with stack relative $6D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($41.b,X)		; 21 41 ; Logical AND ($41.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor ($83.b,X)		; 41 83 ; Exclusive OR accumulator with memory ($83.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $840000.l		; 6F 00 00 84 ; Add with carry (long) $840000.l [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $80, $23		; 80 23 ; Branch always to $80, $23 [Flow: branch]
	sbc $FF0001.l,X		; FF 01 00 FF ; Subtract with carry (long,X) $FF0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0E03FF.l,X		; FF FF 03 0E ; Subtract with carry (long,X) $0E03FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $1D1F02.l		; 0F 02 1F 1D ; OR accumulator with memory (long) $1D1F02.l [Writes: Accumulator] [Flags: ZN]
	asl $0D1D.w,X		; 1E 1D 0D ; Arithmetic shift left $0D1D.w,X [Reads: X Index] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $7D777E.l		; 0F 7E 77 7D ; OR accumulator with memory (long) $7D777E.l [Writes: Accumulator] [Flags: ZN]
	ora [$27.b],Y		; 17 27 ; OR accumulator with memory (long indexed) [$27.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FFDB04.l,X		; FF 04 DB FF ; Subtract with carry (long,X) $FFDB04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $FF.b,Y		; B6 FF ; Load X register $FF.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	adc $3F85.w		; 6D 85 3F ; Add $3F85.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	ora $83.b		; 05 83 ; Logical OR $83.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $FF2805.l,X		; 3F 05 28 FF ; AND accumulator with memory (long,X) $FF2805.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $02.b		; 46 02 ; Logical shift right $02.b [Reads: Direct Page] [Flags: ZNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsl $002401.l		; 22 01 24 00 ; Jump to subroutine long $002401.l [Writes: Stack Pointer] [Flow: call]
	eor $FD.b,S		; 43 FD ; Exclusive OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $829F02.l,X		; 7F 02 9F 82 ; Add long $829F02.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $E2, $BF		; 62 E2 BF ; Push effective relative address $62, $E2, $BF [Writes: Stack Pointer]
	adc $3DC2.w,X		; 7D C2 3D ; Add $3DC2.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FFFF40.l,X		; 3F 40 FF FF ; AND accumulator with memory (long,X) $FFFF40.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $1D7D.w,X		; FD 7D 1D ; Subtract with carry $1D7D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $FF4F00.l		; 22 00 4F FF ; Jump to subroutine long $FF4F00.l [Writes: Stack Pointer] [Flow: call]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $06F549.l,X		; FF 49 F5 06 ; Subtract with carry (long,X) $06F549.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $75.b		; 05 75 ; Logical OR $75.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $95.b		; 06 95 ; Arithmetic shift left $95.b [Reads: Direct Page] [Flags: ZNC]
	stx $65.b		; 86 65 ; Store X register to $65.b [Reads: X Index]
	inc $25.b		; E6 25 ; Increment $25.b [Reads: Direct Page] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp $3C.b,S		; C3 3C ; Compare accumulator (stack relative) $3C.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	bit $0F03.w,X		; 3C 03 0F ; Test bits $0F03.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol DMAP0.w		; 2E 00 43 ; Rotate left DMAP0.w [Flags: ZNC]
	sbc $7F0B00.l,X		; FF 00 0B 7F ; Subtract with carry (long,X) $7F0B00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $60		; 80 60 ; Branch always to $80, $60 [Flow: branch]
	cpx #$3F.b		; E0 3F ; Compare #$3F.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $3F3FC0.l,X		; FF C0 3F 3F ; Subtract with carry (long,X) $3F3FC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $1F7F01.l,X		; FF 01 7F 1F ; Subtract with carry (long,X) $1F7F01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $FF4600.l		; 22 00 46 FF ; Jump to subroutine long $FF4600.l [Writes: Stack Pointer] [Flow: call]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cop $24.b		; 02 24 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0022.l,X		; FF 22 00 FF ; Subtract with carry (long,X) $FF0022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $A5E0FF.l		; 22 FF E0 A5 ; Jump to subroutine long $A5E0FF.l [Writes: Stack Pointer] [Flow: call]
	inc $FDFE.w,X		; FE FE FD ; Increment memory $FDFE.w,X [Reads: X Index] [Flags: ZN]
	jsr ($F8FB.w,X)		; FC FB F8 ; Jump to subroutine indirect indexed ($F8FB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc [$F1.b],Y		; F7 F1 ; Subtract with carry (long indexed) [$F1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C4DEE2.l		; EF E2 DE C4 ; Subtract with carry (long) $C4DEE2.l [Writes: Accumulator] [Flags: ZVNC]
	ldy $FEFF.w,X		; BC FF FE ; Load Y register $FEFF.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	jsr ($F0F8.w,X)		; FC F8 F0 ; Jump to subroutine indirect indexed ($F0F8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpx #$C1.b		; E0 C1 ; Compare #$C1.b with X register [Reads: X Index] [Flags: ZNC]
	sta $89.b,S		; 83 89 ; Store accumulator (stack relative) $89.b,S [Reads: Accumulator, Stack Pointer]
	adc $F312.w,Y		; 79 12 F3 ; Add $F312.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $E6.b		; 25 E6 ; Logical AND $E6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp $9B94.w		; CD 94 9B ; Compare $9B94.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	and #$37.b		; 29 37 ; Logical AND #$37.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor ($6F.b)		; 52 6F ; Exclusive OR accumulator with memory (indirect) ($6F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $DF.b		; A4 DF ; Load $DF.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	and ($63.b),Y		; 31 63 ; AND accumulator with memory ($63.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec $8D.b		; C6 8D ; Decrement $8D.b [Reads: Direct Page] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cpy #$40.b		; C0 40 ; Compare #$40.b with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$B0.b		; A0 B0 ; Load #$B0.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $D0, $58		; D0 58 ; Branch if not equal to $D0, $58 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	bit $16F4.w		; 2C F4 16 ; Test bits $16F4.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $7E85.w,X		; FD 85 7E ; Subtract with carry $7E85.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $A74F9F.l,X		; 3F 9F 4F A7 ; AND accumulator with memory (long,X) $A74F9F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($E9.b,S),Y		; D3 E9 ; Compare accumulator (stack relative indirect indexed) ($E9.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	pea $067A.w		; F4 7A 06 ; Push absolute address $067A.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ora $83.b,S		; 03 83 ; OR accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta ($41.b,X)		; 81 41 ; Store accumulator ($41.b,X) [Reads: Accumulator, X Index, Direct Page]
	cpy #$A0.b		; C0 A0 ; Compare #$A0.b with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $50, $B0		; 50 B0 ; Branch if overflow clear to $50, $B0 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	mvn $6A,$EC		; 54 EC 6A ; Move block negative $6A,$EC [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	inc $FC.b,X		; F6 FC ; Increment memory $FC.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ror $1F3F.w,X		; 7E 3F 1F ; Rotate right $1F3F.w,X [Reads: X Index] [Flags: ZNC]
	ora $010307.l		; 0F 07 03 01 ; OR accumulator with memory (long) $010307.l [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora [$64.b]		; 07 64 ; OR accumulator with memory (long) [$64.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FA.b,S		; 03 FA ; OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($C5.b,X)		; 01 C5 ; Logical OR ($C5.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	cpy $28.b		; C4 28 ; Compare $28.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	trb $D5.b		; 14 D5 ; Test and reset bits $D5.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $3B079F.l,X		; 3F 9F 07 3B ; AND accumulator with memory (long,X) $3B079F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $777F.w,X		; 7D 7F 77 ; Add $777F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($00.b,S),Y		; 33 00 ; AND accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	tsb $3FF8.w		; 0C F8 3F ; Test and set bits $3FF8.w [Reads: Accumulator] [Flags: Z]
	sbc $F860.w,Y		; F9 60 F8 ; Subtract with carry $F860.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $F10EDC.l,X		; 3F DC 0E F1 ; AND accumulator with memory (long,X) $F10EDC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CD.b		; 00 CD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $7FFE7F.l,X		; BF 7F FE 7F ; Load long $7FFE7F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $1E030F.l,X		; 3F 0F 03 1E ; AND accumulator with memory (long,X) $1E030F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($ED.b,X)		; 01 ED ; Logical OR ($ED.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $7D.b,S		; 03 7D ; OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $EF.b,S		; 03 EF ; OR accumulator with stack relative $EF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F5.b		; 00 F5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror $E31C.w,X		; 7E 1C E3 ; Rotate right $E31C.w,X [Reads: X Index] [Flags: ZNC]
	sbc ($83.b,S),Y		; F3 83 ; Subtract with carry (stack relative indirect indexed) ($83.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc ($EC.b),Y		; F1 EC ; Subtract with carry ($EC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $523D.w,X		; 1E 3D 52 ; Arithmetic shift left $523D.w,X [Reads: X Index] [Flags: ZNC]
	mvp $D6,$00		; 44 00 D6 ; Move block positive $D6,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cpx #$5D.b		; E0 5D ; Compare #$5D.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $80.b		; E5 80 ; Subtract $80.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta [$C0.b],Y		; 97 C0 ; Store accumulator (long indexed) [$C0.b],Y [Reads: Accumulator, Direct Page, Y Index]
	cmp $0EB180.l,X		; DF 80 B1 0E ; Compare accumulator (long,X) $0EB180.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	ror $3F0F.w,X		; 7E 0F 3F ; Rotate right $3F0F.w,X [Reads: X Index] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cpx #$4F.b		; E0 4F ; Compare #$4F.b with X register [Reads: X Index] [Flags: ZNC]
	sta $FE00FC.l,X		; 9F FC 00 FE ; Store accumulator (long,X) $FE00FC.l,X [Reads: Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp $14FF1C.l,X		; DF 1C FF 14 ; Compare accumulator (long,X) $14FF1C.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	ldx $A036.w,Y		; BE 36 A0 ; Load X register $A036.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	rol $01.b,X		; 36 01 ; Rotate left $01.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $49.b,X		; 34 49 ; Test bits $49.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	trb $0B.b		; 14 0B ; Test and reset bits $0B.b [Reads: Accumulator] [Flags: Z]
	ora $3E3E.w,X		; 1D 3E 3E ; OR accumulator with memory $3E3E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $F7FE7F.l,X		; 7F 7F FE F7 ; Add long $F7FE7F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	.db $10, $29		; 10 29 ; Branch if plus to $10, $29 [Flow: branch]
	brk $91.b		; 00 91 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $1F761C.l,X		; FF 1C 76 1F ; Subtract with carry (long,X) $1F761C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $1B.b,X		; 75 1B ; Add $1B.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($6EDE.w,X)		; FC DE 6E ; Jump to subroutine indirect indexed ($6EDE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $BC.b		; 00 BC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $BFBF.w,Y		; BE BF BF ; Load X register $BFBF.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	.db $80, $01		; 80 01 ; Branch always to $80, $01 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $10.b		; 04 10 ; Test and set bits $10.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	jsr $4002.w		; 20 02 40 ; Jump to subroutine at $4002.w [Writes: Stack Pointer] [Flow: call]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	jsr $0810.w		; 20 10 08 ; Jump to subroutine at $0810.w [Writes: Stack Pointer] [Flow: call]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $000003.l,X		; FF 03 00 00 ; Subtract with carry (long,X) $000003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0029FF.l,X		; FF FF 29 00 ; Subtract with carry (long,X) $0029FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $2C.b		; 06 2C ; Arithmetic shift left $2C.b [Reads: Direct Page] [Flags: ZNC]
	asl $1E58.w		; 0E 58 1E ; Arithmetic shift left $1E58.w [Flags: ZNC]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	trb $07.b		; 14 07 ; Test and reset bits $07.b [Reads: Accumulator] [Flags: Z]
	ora $001E3F.l,X		; 1F 3F 1E 00 ; Logical OR long $001E3F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $0F3E00.l		; 2F 00 3E 0F ; AND accumulator with memory (long) $0F3E00.l [Writes: Accumulator] [Flags: ZN]
	and $0DB40B.l,X		; 3F 0B B4 0D ; AND accumulator with memory (long,X) $0DB40B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $9406.w,Y		; 99 06 94 ; Store accumulator to $9406.w,Y [Reads: Accumulator, Y Index]
	ora $8D.b,S		; 03 8D ; OR accumulator with stack relative $8D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1F22.w,X		; 1E 22 1F ; Arithmetic shift left $1F22.w,X [Reads: X Index] [Flags: ZNC]
	cop $0E.b		; 02 0E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $002703.l		; 0F 03 27 00 ; OR accumulator with memory (long) $002703.l [Writes: Accumulator] [Flags: ZN]
	eor $07.b		; 45 07 ; Exclusive OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $25.b		; 05 25 ; Logical OR $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $17.b,S		; 03 17 ; OR accumulator with stack relative $17.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $1A00.w		; 0C 00 1A ; Test and set bits $1A00.w [Reads: Accumulator] [Flags: Z]
	brk $35.b		; 00 35 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2E.b		; 00 2E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9A.b		; 00 9A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$63.b		; C0 63 ; Compare #$63.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	ora $F9E51F.l,X		; 1F 1F E5 F9 ; Logical OR long $F9E51F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($BD4F.w,X)		; FC 4F BD ; Jump to subroutine indirect indexed ($BD4F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc $0627.w,Y		; 79 27 06 ; Add $0627.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$49.b],Y		; 17 49 ; OR accumulator with memory (long indexed) [$49.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $7D93.w,Y		; BE 93 7D ; Load X register $7D93.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	rol $FA.b		; 26 FA ; Rotate left $FA.b [Reads: Direct Page] [Flags: ZNC]
	jmp $98F4.w		; 4C F4 98 ; Jump to $98F4.w [Flow: jump]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $30, $D0		; 30 D0 ; Branch if minus to $30, $D0 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$C0.b		; A0 C0 ; Load #$C0.b into Y register [Writes: Y Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rol $6C.b,X		; 36 6C ; Rotate left $6C.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp $67B3.w,Y		; D9 B3 67 ; Compare accumulator $67B3.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp $223F9F.l		; CF 9F 3F 22 ; Compare accumulator (long) $223F9F.l [Reads: Accumulator] [Flags: ZNC]
	sbc $010883.l,X		; FF 83 08 01 ; Subtract with carry (long,X) $010883.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $1002FF.l		; 22 FF 02 10 ; Jump to subroutine long $1002FF.l [Writes: Stack Pointer] [Flow: call]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	sta $07.b,S		; 83 07 ; Store accumulator (stack relative) $07.b,S [Reads: Accumulator, Stack Pointer]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A6FFFE.l		; EF FE FF A6 ; Subtract with carry (long) $A6FFFE.l [Writes: Accumulator] [Flags: ZVNC]
	eor $66BF.w,Y		; 59 BF 66 ; Exclusive OR accumulator with memory $66BF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $B67F.w,Y		; 99 7F B6 ; Store accumulator to $B67F.w,Y [Reads: Accumulator, Y Index]
	eor #$BF.b		; 49 BF ; Exclusive OR #$BF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ror $84.b,X		; 76 84 ; Rotate right $84.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	asl $00FF.w,X		; 1E FF 00 ; Arithmetic shift left $00FF.w,X [Reads: X Index] [Flags: ZNC]
	bit $03.b,X		; 34 03 ; Test bits $03.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora [$B0.b]		; 07 B0 ; OR accumulator with memory (long) [$B0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $D8.b		; C6 D8 ; Decrement $D8.b [Reads: Direct Page] [Flags: ZN]
	sbc $E8.b,X		; F5 E8 ; Subtract $E8.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $7A30.w		; 8D 30 7A ; Store accumulator to $7A30.w [Reads: Accumulator]
	ora ($CF.b,X)		; 01 CF ; Logical OR ($CF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc [$FB.b],Y		; F7 FB ; Subtract with carry (long indexed) [$FB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $73EB.w,X		; FD EB 73 ; Subtract with carry $73EB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $C0,$00		; 44 00 C0 ; Move block positive $C0,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $80.b		; 45 80 ; Exclusive OR $80.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $27002F.l,X		; FF 2F 00 27 ; Subtract with carry (long,X) $27002F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0BBA16.l,X		; FF 16 BA 0B ; Subtract with carry (long,X) $0BBA16.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp $065C05.l		; 5C 05 5C 06 ; Jump long to $065C05.l [Flow: jump]
	sta $2E62.w		; 8D 62 2E ; Store accumulator to $2E62.w [Reads: Accumulator]
	cmp ($50.b,X)		; C1 50 ; Compare accumulator ($50.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sta [$A0.b]		; 87 A0 ; Store accumulator (long) [$A0.b] [Reads: Accumulator, Direct Page]
	ora $5FFF00.l,X		; 1F 00 FF 5F ; Logical OR long $5FFF00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $F3F7EF.l		; EF EF F7 F3 ; Subtract with carry (long) $F3F7EF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF4FDF.l		; EF DF 4F FF ; Subtract with carry (long) $FF4FDF.l [Writes: Accumulator] [Flags: ZVNC]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $186517.l,X		; FF 17 65 18 ; Subtract with carry (long,X) $186517.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($0C.b,S),Y		; D3 0C ; Compare accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cpx $7D03.w		; EC 03 7D ; Compare $7D03.w with X register [Reads: X Index] [Flags: ZNC]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $D8.b,S		; 03 D8 ; OR accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$20.b]		; 07 20 ; OR accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $BF3FC0.l,X		; 1F C0 3F BF ; Logical OR long $BF3FC0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $831F.w,X		; 3E 1F 83 ; Rotate left $831F.w,X [Reads: X Index] [Flags: ZNC]
	ora $FFFF3F.l,X		; 1F 3F FF FF ; Logical OR long $FFFF3F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	mvp $FF,$00		; 44 00 FF ; Move block positive $FF,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $011A83.l,X		; FF 83 1A 01 ; Subtract with carry (long,X) $011A83.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($00.b),Y		; 31 00 ; AND accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $3A.b,X		; 55 3A ; Exclusive OR accumulator with memory $3A.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $37		; F0 37 ; Branch if equal to $F0, $37 [Flow: branch]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	bit $38F5.w		; 2C F5 38 ; Test bits $38F5.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ldx $7800.w,Y		; BE 00 78 ; Load X register $7800.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsl $0F0600.l		; 22 00 06 0F ; Jump to subroutine long $0F0600.l [Writes: Stack Pointer] [Flow: call]
	brk $3B.b		; 00 3B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $787E7E.l,X		; 7F 7E 7E 78 ; Add long $787E7E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $2AE000.l		; 22 00 E0 2A ; Jump to subroutine long $2AE000.l [Writes: Stack Pointer] [Flow: call]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cpy $18.b		; C4 18 ; Compare $18.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	lda [$10.b]		; A7 10 ; Load accumulator (long) [$10.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($0C.b),Y		; D1 0C ; Compare accumulator ($0C.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	adc $1A00.w,X		; 7D 00 1A ; Add $1A00.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $0E3E78.l,X		; 3F 78 3E 0E ; AND accumulator with memory (long,X) $0E3E78.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $3E.b		; 65 3E ; Add $3E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $7127.w,Y		; 79 27 71 ; Add $7127.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $7D.b,S		; 23 7D ; AND accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $3A.b		; 00 3A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $1B143F.l		; 22 3F 14 1B ; Jump to subroutine long $1B143F.l [Writes: Stack Pointer] [Flow: call]
	ora $79BD.w,X		; 1D BD 79 ; OR accumulator with memory $79BD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($71.b,S),Y		; B3 71 ; Load accumulator (stack relative indirect indexed) ($71.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($60.b,X)		; A1 60 ; Load accumulator ($60.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$60.b		; A0 60 ; Load #$60.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $D0, $30		; D0 30 ; Branch if not equal to $D0, $30 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sty $6C.b,X		; 94 6C ; Store Y register $6C.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	ror $06.b,X		; 76 06 ; Rotate right $06.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $841F.w		; 0E 1F 84 ; Arithmetic shift left $841F.w [Flags: ZNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $BE.b		; 45 BE ; Exclusive OR $BE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($46.b,S),Y		; 13 46 ; OR accumulator (stack relative indirect indexed) ($46.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $BD4B.w,X		; BD 4B BD ; Load $BD4B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $BB.b,X		; 55 BB ; Exclusive OR accumulator with memory $BB.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvn $4B,$BA		; 54 BA 4B ; Move block negative $4B,$BA [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	lda $BE45.w,X		; BD 45 BE ; Load $BE45.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $28.b,X		; 34 28 ; Test bits $28.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and #$34.b		; 29 34 ; Logical AND #$34.b with accumulator [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sty $1B.b		; 84 1B ; Store Y register to $1B.b [Reads: Y Index]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $FF		; 30 FF ; Branch if minus to $30, $FF [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $4CCFB7.l,X		; FF B7 CF 4C ; Subtract with carry (long,X) $4CCFB7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($DB.b,S),Y		; B3 DB ; Load accumulator (stack relative indirect indexed) ($DB.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $FF0000.l		; 5C 00 00 FF ; Jump long to $FF0000.l [Flow: jump]
	cmp $8348B7.l		; CF B7 48 83 ; Compare accumulator (long) $8348B7.l [Reads: Accumulator] [Flags: ZNC]
	jsr $AD6B.w		; 20 6B AD ; Jump to subroutine at $AD6B.w [Writes: Stack Pointer] [Flow: call]
	sbc $66.b,X		; F5 66 ; Subtract $66.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $D546.w,X		; FD 46 D5 ; Subtract with carry $D546.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $DD.b		; 46 DD ; Logical shift right $DD.b [Reads: Direct Page] [Flags: ZNC]
	lsr $6699.w,X		; 5E 99 66 ; Logical shift right $6699.w,X [Reads: X Index] [Flags: ZNC]
	sbc [$18.b],Y		; F7 18 ; Subtract with carry (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $3C.b,S		; C3 3C ; Compare accumulator (stack relative) $3C.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	jsr $0022.w		; 20 22 00 ; Jump to subroutine at $0022.w [Writes: Stack Pointer] [Flow: call]
	ora $BF.b,S		; 03 BF ; OR accumulator with stack relative $BF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $23FF00.l,X		; 7F 00 FF 23 ; Add long $23FF00.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	sta $80.b,S		; 83 80 ; Store accumulator (stack relative) $80.b,S [Reads: Accumulator, Stack Pointer]
	sta $22.b,S		; 83 22 ; Store accumulator (stack relative) $22.b,S [Reads: Accumulator, Stack Pointer]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $7C7C7F.l,X		; 7F 7F 7C 7C ; Add long $7C7C7F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $7897BF.l,X		; 7F BF 97 78 ; Add long $7897BF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: ZNC]
	pea $5E73.w		; F4 73 5E ; Push absolute address $5E73.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	eor $662F.w,X		; 5D 2F 66 ; Exclusive OR accumulator with memory $662F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $B3.b		; 26 B3 ; Rotate left $B3.b [Reads: Direct Page] [Flags: ZNC]
	asl $0291.w		; 0E 91 02 ; Arithmetic shift left $0291.w [Flags: ZNC]
	cmp $E30C.w,X		; DD 0C E3 ; Compare accumulator $E30C.w,X [Reads: X Index] [Flags: ZNC]
	ora $FF257B.l,X		; 1F 7B 25 FF ; Logical OR long $FF257B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $1FF807.l,X		; FF 07 F8 1F ; Subtract with carry (long,X) $1FF807.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$43.b		; E0 43 ; Compare #$43.b with X register [Reads: X Index] [Flags: ZNC]
	and $7F45C0.l,X		; 3F C0 45 7F ; AND accumulator with memory (long,X) $7F45C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $28		; 80 28 ; Branch always to $80, $28 [Flow: branch]
	sbc $FF004E.l,X		; FF 4E 00 FF ; Subtract with carry (long,X) $FF004E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$70.b],Y		; 17 70 ; OR accumulator with memory (long indexed) [$70.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	lda ($34.b)		; B2 34 ; Load accumulator (indirect) ($34.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda ($6C.b,X)		; A1 6C ; Load accumulator ($6C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $58.b		; A5 58 ; Load $58.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	adc $9A00.w,X		; 7D 00 9A ; Add $9A00.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($6A.b,X)		; 01 6A ; Logical OR ($6A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta ($3F.b,X)		; 81 3F ; Store accumulator ($3F.b,X) [Reads: Accumulator, X Index, Direct Page]
	adc $3D5E7E.l,X		; 7F 7E 5E 3D ; Add long $3D5E7E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($E7.b,S),Y		; 93 E7 ; Store accumulator (stack relative indirect indexed) ($E7.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sbc [$22.b],Y		; F7 22 ; Subtract with carry (long indexed) [$22.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $000394.l,X		; FF 94 03 00 ; Subtract with carry (long,X) $000394.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0000.w		; 0D 00 00 ; Logical OR $0000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $07071F.l,X		; 1F 1F 07 07 ; Logical OR long $07071F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and #$0500.w		; 29 00 05 ; Logical AND #$0500.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	cpy #$A040.w		; C0 40 A0 ; Compare #$A040.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $60.b		; 45 60 ; Exclusive OR $60.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$D006.w		; A0 06 D0 ; Load #$D006.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $30, $FE		; 30 FE ; Branch if minus to $30, $FE [Flow: branch]
	cop $7F.b		; 02 7F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $9F221F.l,X		; 3F 1F 22 9F ; AND accumulator with memory (long,X) $9F221F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $010F.w		; 0E 0F 01 ; Arithmetic shift left $010F.w [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$0A.b]		; 07 0A ; OR accumulator with memory (long) [$0A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $072200.l		; 22 00 22 07 ; Jump to subroutine long $072200.l [Writes: Stack Pointer] [Flow: call]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $26.b,S		; 83 26 ; Store accumulator (stack relative) $26.b,S [Reads: Accumulator, Stack Pointer]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $220107.l		; 0F 07 01 22 ; OR accumulator with memory (long) $220107.l [Writes: Accumulator] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$31.b]		; 47 31 ; Exclusive OR accumulator with memory (long) [$31.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $91.b		; 00 91 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1CE2.w		; 0E E2 1C ; Arithmetic shift left $1CE2.w [Flags: ZNC]
	adc ($00.b,S),Y		; 73 00 ; Add with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $A320.w,Y		; D9 20 A3 ; Compare accumulator $A320.w,Y [Reads: Y Index] [Flags: ZNC]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $DCBEBC.l,X		; 1F BC BE DC ; Logical OR long $DCBEBC.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($B5.b,X)		; C1 B5 ; Compare accumulator ($B5.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $DEED.w,X		; BD ED DE ; Load $DEED.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc $EF.b,X		; F6 EF ; Increment memory $EF.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc [$FD.b],Y		; F7 FD ; Subtract with carry (long indexed) [$FD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	inc $FFFD.w,X		; FE FD FF ; Increment memory $FFFD.w,X [Reads: X Index] [Flags: ZN]
	inc $8000.w,X		; FE 00 80 ; Increment memory $8000.w,X [Reads: X Index] [Flags: ZN]
	cpy #$F0E0.w		; C0 E0 F0 ; Compare #$F0E0.w with Y register [Reads: Y Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($42FE.w,X)		; FC FE 42 ; Jump to subroutine indirect indexed ($42FE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	lda $90DF21.l,X		; BF 21 DF 90 ; Load long $90DF21.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $6477C8.l		; EF C8 77 64 ; Subtract with carry (long) $6477C8.l [Writes: Accumulator] [Flags: ZVNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($1D.b)		; 32 1D ; AND accumulator with memory (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $8C0E.w,Y		; 19 0E 8C ; OR accumulator with memory $8C0E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$3D.b]		; 87 3D ; Store accumulator (long) [$3D.b] [Reads: Accumulator, Direct Page]
	asl $870F.w,X		; 1E 0F 87 ; Arithmetic shift left $870F.w,X [Reads: X Index] [Flags: ZNC]
	cmp $E1.b,S		; C3 E1 ; Compare accumulator (stack relative) $E1.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	.db $F0, $78		; F0 78 ; Branch if equal to $F0, $78 [Flow: branch]
	sta [$80.b],Y		; 97 80 ; Store accumulator (long indexed) [$80.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tsb $09.b		; 04 09 ; Test and set bits $09.b [Reads: Accumulator] [Flags: Z]
	lda $DB00.w,X		; BD 00 DB ; Load $DB00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $AD		; 42 AD ; Reserved instruction
	ror $BDC3.w		; 6E C3 BD ; Rotate right $BDC3.w [Flags: ZNC]
	sbc $FF25C3.l,X		; FF C3 25 FF ; Subtract with carry (long,X) $FF25C3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $42.b		; 04 42 ; Test and set bits $42.b [Reads: Accumulator] [Flags: Z]
	bit $8110.w,X		; 3C 10 81 ; Test bits $8110.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cmp $22.b,S		; C3 22 ; Compare accumulator (stack relative) $22.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc $3F3F01.l,X		; FF 01 3F 3F ; Subtract with carry (long,X) $3F3F01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $800003.l,X		; FF 03 00 80 ; Subtract with carry (long,X) $800003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $FF23C0.l,X		; 7F C0 23 FF ; Add long $FF23C0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $909700.l		; 22 00 97 90 ; Jump to subroutine long $909700.l [Writes: Stack Pointer] [Flow: call]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($10.b)		; 32 10 ; AND accumulator with memory (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $78B788.l		; CF 88 B7 78 ; Compare accumulator (long) $78B788.l [Reads: Accumulator] [Flags: ZNC]
	adc [$F8.b]		; 67 F8 ; Add with carry (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $E4.b,S		; 83 E4 ; Store accumulator (stack relative) $E4.b,S [Reads: Accumulator, Stack Pointer]
	ora $8A.b,S		; 03 8A ; OR accumulator with stack relative $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($64.b),Y		; 11 64 ; OR accumulator with memory ($64.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0D92.w,Y		; 19 92 0D ; OR accumulator with memory $0D92.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E7F7FF.l,X		; FF FF F7 E7 ; Subtract with carry (long,X) $E7F7FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	adc $7FFF.w,X		; 7D FF 7F ; Add $7FFF.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$00.b]		; E7 00 ; Subtract with carry (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $70.b,X		; B5 70 ; Load $70.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $AF1C.w		; CE 1C AF ; Decrement $AF1C.w [Flags: ZN]
	asl $74.b		; 06 74 ; Arithmetic shift left $74.b [Reads: Direct Page] [Flags: ZNC]
	ora $7E.b,S		; 03 7E ; OR accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($BF.b,X)		; 01 BF ; Logical OR ($BF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $DF.b		; 00 DF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $BF7E.w,X		; 7D 7E BF ; Add $BF7E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp $E0E3.w,X		; DD E3 E0 ; Compare accumulator $E0E3.w,X [Reads: X Index] [Flags: ZNC]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora $02.b		; 05 02 ; Logical OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $881C00.l,X		; 3F 00 1C 88 ; AND accumulator with memory (long,X) $881C00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and [$05.b],Y		; 37 05 ; AND accumulator with memory (long indexed) [$05.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$FD.b],Y		; 17 FD ; OR accumulator with memory (long indexed) [$FD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $AF.b		; 00 AF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $5084.w		; 20 84 50 ; Jump to subroutine at $5084.w [Writes: Stack Pointer] [Flow: call]
	eor $B0.b		; 45 B0 ; Exclusive OR $B0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	eor ($54.b,X)		; 41 54 ; Exclusive OR accumulator with memory ($54.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $C8.b,S		; 83 C8 ; Store accumulator (stack relative) $C8.b,S [Reads: Accumulator, Stack Pointer]
	ora [$02.b]		; 07 02 ; OR accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $70, $F9		; 70 F9 ; Branch if overflow set to $70, $F9 [Flow: branch]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	adc [$EF.b],Y		; 77 EF ; Add with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $040A85.l,X		; FF 85 0A 04 ; Subtract with carry (long,X) $040A85.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$0F0F.w		; 09 0F 0F ; Logical OR #$0F0F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $3E3E1F.l,X		; 1F 1F 3E 3E ; Logical OR long $3E3E1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($F87C.w,X)		; 7C 7C F8 ; Jump indirect indexed to ($F87C.w,X) [Reads: X Index] [Flow: jump]
	sed		; F8 ; Set decimal flag [Flags: D]
	stx $11.b		; 86 11 ; Store X register to $11.b [Reads: X Index]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$7F.b]		; 07 7F ; OR accumulator with memory (long) [$7F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $850F0F.l,X		; 7F 0F 0F 85 ; Add long $850F0F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $05.b,X		; 74 05 ; Store zero to $05.b,X [Reads: X Index]
	sta $12.b,S		; 83 12 ; Store accumulator (stack relative) $12.b,S [Reads: Accumulator, Stack Pointer]
	tsb $29.b		; 04 29 ; Test and set bits $29.b [Reads: Accumulator] [Flags: Z]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $1F1D.w,X		; 1D 1D 1F ; OR accumulator with memory $1F1D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $013F23.l,X		; 1F 23 3F 01 ; Logical OR long $013F23.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $00297F.l,X		; 7F 7F 29 00 ; Add long $00297F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $10.b,S		; 23 10 ; AND accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $38.b,S		; 23 38 ; AND accumulator with stack relative $38.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $7C.b		; 05 7C ; Logical OR $7C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($7E7E.w,X)		; 7C 7E 7E ; Jump indirect indexed to ($7E7E.w,X) [Reads: X Index] [Flow: jump]
	sbc $002DFF.l,X		; FF FF 2D 00 ; Subtract with carry (long,X) $002DFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2B.b		; 00 2B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($04.b)		; 12 04 ; OR accumulator with memory (indirect) ($04.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $1E0E.w		; 0E 0E 1E ; Arithmetic shift left $1E0E.w [Flags: ZNC]
	asl $1B00.w		; 0E 00 1B ; Arithmetic shift left $1B00.w [Flags: ZNC]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $30.b		; 06 30 ; Arithmetic shift left $30.b [Reads: Direct Page] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lsr $09.b,X		; 56 09 ; Logical shift right $09.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $E283.w,X		; DD 83 E2 ; Compare accumulator $E283.w,X [Reads: X Index] [Flags: ZNC]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $3B3B1F.l		; 0F 1F 3B 3B ; OR accumulator with memory (long) $3B3B1F.l [Writes: Accumulator] [Flags: ZN]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $B41BE4.l		; 0F E4 1B B4 ; OR accumulator with memory (long) $B41BE4.l [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	stz $AE63.w		; 9C 63 AE ; Store zero to $AE63.w
	and ($A7.b),Y		; 31 A7 ; AND accumulator with memory ($A7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sta $CE1E.w,Y		; 99 1E CE ; Store accumulator to $CE1E.w,Y [Reads: Accumulator, Y Index]
	eor $2247C6.l		; 4F C6 47 22 ; Exclusive OR accumulator with memory (long) $2247C6.l [Writes: Accumulator] [Flags: ZN]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $30, $38		; 30 38 ; Branch if minus to $30, $38 [Flow: branch]
	inc $CEFF.w,X		; FE FF CE ; Increment memory $CEFF.w,X [Reads: X Index] [Flags: ZN]
	sbc $00FF46.l,X		; FF 46 FF 00 ; Subtract with carry (long,X) $00FF46.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F17E81.l,X		; FF 81 7E F1 ; Subtract with carry (long,X) $F17E81.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $00FF.w		; 0E FF 00 ; Arithmetic shift left $00FF.w [Flags: ZNC]
	sta $002770.l		; 8F 70 27 00 ; Store accumulator (long) $002770.l [Reads: Accumulator]
	lsr $00FF.w		; 4E FF 00 ; Logical shift right $00FF.w [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	eor $C0.b,S		; 43 C0 ; Exclusive OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$0200.w		; E0 00 02 ; Compare #$0200.w with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	.db $F0, $36		; F0 36 ; Branch if equal to $F0, $36 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0A.b,S		; 03 0A ; OR accumulator with stack relative $0A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$12.b]		; 07 12 ; OR accumulator with memory (long) [$12.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $50, $31		; 50 31 ; Branch if overflow clear to $50, $31 [Flow: branch]
.ACCU 16
	rep #$23		; C2 23
	lda $63.b,S		; A3 63 ; Load accumulator (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $24.b		; 14 24 ; Test and reset bits $24.b [Reads: Accumulator] [Flags: Z]
	lsr $9CDC.w		; 4E DC 9C ; Logical shift right $9CDC.w [Flags: ZNC]
	cmp #$4339.w		; C9 39 43 ; Compare #$4339.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sec		; 38 ; Set carry flag [Flags: C]
	ora $C4.b		; 05 C4 ; Logical OR $C4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $1EEE.w,X		; 3C EE 1E ; Test bits $1EEE.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sbc $DF431F.l		; EF 1F 43 DF ; Subtract with carry (long) $DF431F.l [Writes: Accumulator] [Flags: ZVNC]
	and $47461F.l,X		; 3F 1F 46 47 ; AND accumulator with memory (long,X) $47461F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor [$43.b]		; 47 43 ; Exclusive OR accumulator with memory (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($20.b,X)		; 61 20 ; Add with carry ($20.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($F3.b)		; 72 F3 ; Add with carry (indirect) ($F3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpx $18EF.w		; EC EF 18 ; Compare $18EF.w with X register [Reads: X Index] [Flags: ZNC]
	asl $3C30.w,X		; 1E 30 3C ; Arithmetic shift left $3C30.w,X [Reads: X Index] [Flags: ZNC]
	cpx #$C3F9.w		; E0 F9 C3 ; Compare #$C3F9.w with X register [Reads: X Index] [Flags: ZNC]
	sbc ($85.b)		; F2 85 ; Subtract with carry (indirect) ($85.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $25.b		; E6 25 ; Increment $25.b [Reads: Direct Page] [Flags: ZN]
	inc $0C.b		; E6 0C ; Increment $0C.b [Reads: Direct Page] [Flags: ZN]
	.db $10, $E1		; 10 E1 ; Branch if plus to $10, $E1 [Flow: branch]
	cmp $06.b,S		; C3 06 ; Compare accumulator (stack relative) $06.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	ora $3818.w		; 0D 18 38 ; Logical OR $3818.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $E01F80.l,X		; 7F 80 1F E0 ; Add long $E01F80.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$F8.b]		; 87 F8 ; Store accumulator (long) [$F8.b] [Reads: Accumulator, Direct Page]
	sbc [$F8.b]		; E7 F8 ; Subtract with carry (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($FC.b,S),Y		; F3 FC ; Subtract with carry (stack relative indirect indexed) ($FC.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc ($03.b,S),Y		; F3 03 ; Subtract with carry (stack relative indirect indexed) ($03.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F801.w,Y		; F9 01 F8 ; Subtract with carry $F801.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	sbc $FEFC01.l,X		; FF 01 FC FE ; Subtract with carry (long,X) $FEFC01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $FF00.w		; 4E 00 FF ; Logical shift right $FF00.w [Flags: ZNC]
	bit $E0FF.w		; 2C FF E0 ; Test bits $E0FF.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	bit $F9.b,X		; 34 F9 ; Test bits $F9.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sbc $F8F8.w,Y		; F9 F8 F8 ; Subtract with carry $F8F8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$ECC0.w		; C0 C0 EC ; Compare #$ECC0.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpx #$F0F7.w		; E0 F7 F0 ; Compare #$F0F7.w with X register [Reads: X Index] [Flags: ZNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $F8F9FF.l,X		; FF FF F9 F8 ; Subtract with carry (long,X) $F8F9FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$F0E0.w		; C0 E0 F0 ; Compare #$F0E0.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FFFF.w,Y		; F9 FF FF ; Subtract with carry $FFFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $CDCDCF.l		; CF CF CD CD ; Compare accumulator (long) $CDCDCF.l [Reads: Accumulator] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	jsl $006300.l		; 22 00 63 00 ; Jump to subroutine long $006300.l [Writes: Stack Pointer] [Flow: call]
	sty $00.b,X		; 94 00 ; Store Y register $00.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $0088CD.l		; CF CD 88 00 ; Compare accumulator (long) $0088CD.l [Reads: Accumulator] [Flags: ZNC]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $DF		; 80 DF ; Branch always to $80, $DF [Flow: branch]
	eor $906FAF.l,X		; 5F AF 6F 90 ; Exclusive OR accumulator with memory (long,X) $906FAF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $70, $9F		; 70 9F ; Branch if overflow set to $70, $9F [Flow: branch]
	lsr $70.b		; 46 70 ; Logical shift right $70.b [Reads: Direct Page] [Flags: ZNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2410.w		; 20 10 24 ; Jump to subroutine at $2410.w [Writes: Stack Pointer] [Flow: call]
	ora $01801F.l		; 0F 1F 80 01 ; OR accumulator with memory (long) $01801F.l [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $10.b		; 04 10 ; Test and set bits $10.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	jsr $4002.w		; 20 02 40 ; Jump to subroutine at $4002.w [Writes: Stack Pointer] [Flow: call]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	jsr $0810.w		; 20 10 08 ; Jump to subroutine at $0810.w [Writes: Stack Pointer] [Flow: call]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($A1.b,X)		; 01 A1 ; Logical OR ($A1.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $62, $92, $76		; 62 92 76 ; Push effective relative address $62, $92, $76 [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($7A8E.w,X)		; 7C 8E 7A ; Jump indirect indexed to ($7A8E.w,X) [Reads: X Index] [Flow: jump]
	eor $CD.b,S		; 43 CD ; Exclusive OR accumulator with stack relative $CD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$CC.b]		; 07 CC ; OR accumulator with memory (long) [$CC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jmp ($1C9B.w)		; 6C 9B 1C ; Jump indirect to ($1C9B.w) [Flow: jump]
	ora #$0103.w		; 09 03 01 ; Logical OR #$0103.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$E1.b],Y		; 17 E1 ; OR accumulator with memory (long indexed) [$E1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $FEFF.w,X		; FE FF FE ; Increment memory $FEFF.w,X [Reads: X Index] [Flags: ZN]
	asl $011F.w,X		; 1E 1F 01 ; Arithmetic shift left $011F.w,X [Reads: X Index] [Flags: ZNC]
	ora ($81.b,X)		; 01 81 ; Logical OR ($81.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta ($F0.b,X)		; 81 F0 ; Store accumulator ($F0.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc ($DE.b),Y		; F1 DE ; Subtract with carry ($DE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FF9E.l,X		; FF 9E FF 00 ; Subtract with carry (long,X) $00FF9E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0E7E.w,X		; FE 7E 0E ; Increment memory $0E7E.w,X [Reads: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta [$68.b],Y		; 97 68 ; Store accumulator (long indexed) [$68.b],Y [Reads: Accumulator, Direct Page, Y Index]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($4300.w,X)		; FC 00 43 ; Jump to subroutine indirect indexed ($4300.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $0200.w,X		; FE 00 02 ; Increment memory $0200.w,X [Reads: X Index] [Flags: ZN]
	sbc $28FF00.l,X		; FF 00 FF 28 ; Subtract with carry (long,X) $28FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $050102.l		; 2F 02 01 05 ; AND accumulator with memory (long) $050102.l [Writes: Accumulator] [Flags: ZN]
	ora $0E.b,S		; 03 0E ; OR accumulator with stack relative $0E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $1A.b		; 02 1A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $34.b		; 06 34 ; Arithmetic shift left $34.b [Reads: Direct Page] [Flags: ZNC]
	tsb $1C6C.w		; 0C 6C 1C ; Test and set bits $1C6C.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp $0239.w,Y		; D9 39 02 ; Compare accumulator $0239.w,Y [Reads: Y Index] [Flags: ZNC]
	tsb $0D.b		; 04 0D ; Test and set bits $0D.b [Reads: Accumulator] [Flags: Z]
	ora $6333.w,Y		; 19 33 63 ; OR accumulator with memory $6333.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp [$46.b]		; C7 46 ; Compare accumulator (long) [$46.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cmp ($92.b,X)		; C1 92 ; Compare accumulator ($92.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sta ($03.b,S),Y		; 93 03 ; Store accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	and $60.b,S		; 23 60 ; AND accumulator with stack relative $60.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($22.b,X)		; 61 22 ; Add with carry ($22.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $C3.b,S		; 63 C3 ; Add with carry (stack relative) $C3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cmp $40.b,S		; C3 40 ; Compare accumulator (stack relative) $40.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp ($42.b,X)		; C1 42 ; Compare accumulator ($42.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cmp $3E.b,S		; C3 3E ; Compare accumulator (stack relative) $3E.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	jmp ($9EDC.w)		; 6C DC 9E ; Jump indirect to ($9EDC.w) [Flow: jump]
	stz $3E3C.w		; 9C 3C 3E ; Store zero to $3E3C.w
	bit $6897.w,X		; 3C 97 68 ; Test bits $6897.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ora ($97.b,X)		; 01 97 ; Logical OR ($97.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $070704.l,X		; FF 04 07 07 ; Subtract with carry (long,X) $070704.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $000022.l,X		; FF 22 00 00 ; Subtract with carry (long,X) $000022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $7F7F09.l,X		; FF 09 7F 7F ; Subtract with carry (long,X) $7F7F09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $07871F.l,X		; 1F 1F 87 07 ; Logical OR long $07871F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$07.b]		; E7 07 ; Subtract with carry (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($03.b,S),Y		; F3 03 ; Subtract with carry (stack relative indirect indexed) ($03.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $801C00.l		; 22 00 1C 80 ; Jump to subroutine long $801C00.l [Writes: Stack Pointer] [Flow: call]
	cpx #$F8F8.w		; E0 F8 F8 ; Compare #$F8F8.w with X register [Reads: X Index] [Flags: ZNC]
	jsr ($E467.w,X)		; FC 67 E4 ; Jump to subroutine indirect indexed ($E467.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	cpx $C8CF.w		; EC CF C8 ; Compare $C8CF.w with X register [Reads: X Index] [Flags: ZNC]
	sta [$98.b],Y		; 97 98 ; Store accumulator (long indexed) [$98.b],Y [Reads: Accumulator, Direct Page, Y Index]
	adc $E09F70.l		; 6F 70 9F E0 ; Add with carry (long) $E09F70.l [Writes: Accumulator] [Flags: ZVNC]
	rol $F8C0.w,X		; 3E C0 F8 ; Rotate left $F8C0.w,X [Reads: X Index] [Flags: ZNC]
	brk $7A.b		; 00 7A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $F4		; F0 F4 ; Branch if equal to $F0, $F4 [Flow: branch]
	cpx #$1088.w		; E0 88 10 ; Compare #$1088.w with X register [Reads: X Index] [Flags: ZNC]
	jsr $4E00.w		; 20 00 4E ; Jump to subroutine at $4E00.w [Writes: Stack Pointer] [Flow: call]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $808243.l,X		; FF 43 82 80 ; Subtract with carry (long,X) $808243.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$F22B.w		; E0 2B F2 ; Compare #$F22B.w with X register [Reads: X Index] [Flags: ZNC]
	cpy #$415C.w		; C0 5C 41 ; Compare #$415C.w with Y register [Reads: Y Index] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($90.b,X)		; 01 90 ; Logical OR ($90.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $E0.b,S		; 03 E0 ; OR accumulator with stack relative $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $C18181.l,X		; 1F 81 81 C1 ; Logical OR long $C18181.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $07.b,S		; 43 07 ; Exclusive OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $8EFF1F.l		; 0F 1F FF 8E ; OR accumulator with memory (long) $8EFF1F.l [Writes: Accumulator] [Flags: ZN]
	.db $80, $E4		; 80 E4 ; Branch always to $80, $E4 [Flow: branch]
	sbc ($F2.b,X)		; E1 F2 ; Subtract with carry ($F2.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $82		; F0 82 ; Branch if equal to $F0, $82 [Flow: branch]
	.db $80, $CA		; 80 CA ; Branch always to $80, $CA [Flow: branch]
	cpy #$E0E4.w		; C0 E4 E0 ; Compare #$E0E4.w with Y register [Reads: Y Index] [Flags: ZNC]
.ACCU 8
	sep #$E1		; E2 E1
	rep #$C0		; C2 C0 ; Reset processor status bits #$C0 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sta ($E3.b,X)		; 81 E3 ; Store accumulator ($E3.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc ($81.b),Y		; F1 81 ; Subtract with carry ($81.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($E3.b,X)		; C1 E3 ; Compare accumulator ($E3.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc ($C1.b,X)		; E1 C1 ; Subtract with carry ($C1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $277098.l		; 4F 98 70 27 ; Exclusive OR accumulator with memory (long) $277098.l [Writes: Accumulator] [Flags: ZN]
	ora $016897.l		; 0F 97 68 01 ; OR accumulator with memory (long) $016897.l [Writes: Accumulator] [Flags: ZN]
	ora ($41.b,S),Y		; 13 41 ; OR accumulator (stack relative indirect indexed) ($41.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	stx $CD22.w		; 8E 22 CD ; Store X register to $CD22.w [Reads: X Index]
	bit $CB.b,X		; 34 CB ; Test bits $CB.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora $FA.b		; 05 FA ; Logical OR $FA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $FBFD.w,X		; FE FD FB ; Increment memory $FBFD.w,X [Reads: X Index] [Flags: ZN]
	inc $0083.w,X		; FE 83 00 ; Increment memory $0083.w,X [Reads: X Index] [Flags: ZN]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $848778.l		; 2F 78 87 84 ; AND accumulator with memory (long) $848778.l [Writes: Accumulator] [Flags: ZN]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($3A.b),Y		; 31 3A ; AND accumulator with memory ($3A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($33.b,X)		; 41 33 ; Exclusive OR accumulator with memory ($33.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	and $02.b		; 25 02 ; Logical AND $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora [$72.b]		; 07 72 ; OR accumulator with memory (long) [$72.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $CC7800.l		; 8F 00 78 CC ; Store accumulator (long) $CC7800.l [Reads: Accumulator]
	sty $8C.b		; 84 8C ; Store Y register to $8C.b [Reads: Y Index]
	cld		; D8 ; Clear decimal flag [Flags: D]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	dec $C43F.w		; CE 3F C4 ; Decrement $C43F.w [Flags: ZN]
	and $E83EC0.l,X		; 3F C0 3E E8 ; AND accumulator with memory (long,X) $E83EC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	trb $F0.b		; 14 F0 ; Test and reset bits $F0.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $3FC01F.l,X		; FF 1F C0 3F ; Subtract with carry (long,X) $3FC01F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $404000.l,X		; FF 00 40 40 ; Subtract with carry (long,X) $404000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($6B.b,X)		; 41 6B ; Exclusive OR accumulator with memory ($6B.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$60.b],Y		; 77 60 ; Add with carry (long indexed) [$60.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $C1.b		; 45 C1 ; Exclusive OR $C1.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $FD43.w,X		; 3E 43 FD ; Rotate left $FD43.w,X [Reads: X Index] [Flags: ZNC]
	cop $06.b		; 02 06 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $6D72.w		; ED 72 6D ; Subtract $6D72.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	lda ($DD.b)		; B2 DD ; Load accumulator (indirect) ($DD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $62, $80, $22		; 62 80 22 ; Push effective relative address $62, $80, $22 [Writes: Stack Pointer]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	.db $B0, $70		; B0 70 ; Branch if carry set to $B0, $70 [Flow: branch]
	sta [$68.b],Y		; 97 68 ; Store accumulator (long indexed) [$68.b],Y [Reads: Accumulator, Direct Page, Y Index]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc ($FC.b,S),Y		; F3 FC ; Subtract with carry (stack relative indirect indexed) ($FC.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FCFE.w,Y		; F9 FE FC ; Subtract with carry $FCFE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF28FE.l,X		; FF FE 28 FF ; Subtract with carry (long,X) $FF28FE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $01.b		; 14 01 ; Test and reset bits $01.b [Reads: Accumulator] [Flags: Z]
	cop $0F.b		; 02 0F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $3C.b		; 04 3C ; Test and set bits $3C.b [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$F7.b]		; 27 F7 ; AND accumulator with memory (long) [$F7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $FF1EEF.l		; 4F EF 1E FF ; Exclusive OR accumulator with memory (long) $FF1EEF.l [Writes: Accumulator] [Flags: ZN]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $0C03.w,X		; 9E 03 0C ; Store zero to $0C03.w,X [Reads: X Index]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpy #$8022.w		; C0 22 80 ; Compare #$8022.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora ($FF.b),Y		; 11 FF ; OR accumulator with memory ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $33.b		; 06 33 ; Arithmetic shift left $33.b [Reads: Direct Page] [Flags: ZNC]
	cpy $E3FF.w		; CC FF E3 ; Compare $E3FF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc [$0F.b],Y		; F7 0F ; Subtract with carry (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$6F.b],Y		; 97 6F ; Store accumulator (long indexed) [$6F.b],Y [Reads: Accumulator, Direct Page, Y Index]
	ora [$EF.b],Y		; 17 EF ; OR accumulator with memory (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp [$F1.b]		; C7 F1 ; Compare accumulator (long) [$F1.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsr $0025.w		; 20 25 00 ; Jump to subroutine at $0025.w [Writes: Stack Pointer] [Flow: call]
	ora $9B64.w		; 0D 64 9B ; Logical OR $9B64.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $4B.b,X		; 34 4B ; Test bits $4B.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	trb $0E23.w		; 1C 23 0E ; Test and reset bits $0E23.w [Reads: Accumulator] [Flags: Z]
	ora ($07.b),Y		; 11 07 ; OR accumulator with memory ($07.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $FE.b		; 04 FE ; Test and set bits $FE.b [Reads: Accumulator] [Flags: Z]
	sbc $06FF4E.l,X		; FF 4E FF 06 ; Subtract with carry (long,X) $06FF4E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stx $1D.b		; 86 1D ; Store X register to $1D.b [Reads: X Index]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $700F80.l,X		; 7F 80 0F 70 ; Add long $700F80.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $98.b,S		; 43 98 ; Exclusive OR accumulator with stack relative $98.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $70, $06		; 70 06 ; Branch if overflow set to $70, $06 [Flow: branch]
	sty $70.b,X		; 94 70 ; Store Y register $70.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta $7C.b		; 85 7C ; Store accumulator to $7C.b [Reads: Accumulator]
	sta $44.b,S		; 83 44 ; Store accumulator (stack relative) $44.b,S [Reads: Accumulator, Stack Pointer]
	adc $0F2282.l,X		; 7F 82 22 0F ; Add long $0F2282.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $0F		; 80 0F ; Branch always to $80, $0F [Flow: branch]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $98.b,S		; 03 98 ; OR accumulator with stack relative $98.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta ($3E.b,X)		; 81 3E ; Store accumulator ($3E.b,X) [Reads: Accumulator, X Index, Direct Page]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $39.b		; 00 39 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc ($F0.b)		; F2 F0 ; Subtract with carry (indirect) ($F0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $87070F.l,X		; 7F 0F 07 87 ; Add long $87070F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc ($43.b),Y		; F1 43 ; Subtract with carry ($43.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $970D00.l,X		; FF 00 0D 97 ; Subtract with carry (long,X) $970D00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cpx #$DF60.w		; E0 60 DF ; Compare #$DF60.w with X register [Reads: X Index] [Flags: ZNC]
	eor $9F00E0.l,X		; 5F E0 00 9F ; Exclusive OR accumulator with memory (long,X) $9F00E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $20.b,S		; 43 20 ; Exclusive OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $4F0000.l,X		; 1F 00 00 4F ; Logical OR long $4F0000.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cpy #$E040.w		; C0 40 E0 ; Compare #$E040.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $80, $44		; 80 44 ; Branch always to $80, $44 [Flow: branch]
	adc $5683BF.l,X		; 7F BF 83 56 ; Add long $5683BF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	adc $241F3F.l,X		; 7F 3F 1F 24 ; Add long $241F3F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $4F.b		; 00 4F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF2700.l,X		; FF 00 27 FF ; Subtract with carry (long,X) $FF2700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor #$02.b		; 49 02 ; Exclusive OR #$02.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $FF0645.l,X		; FF 45 06 FF ; Subtract with carry (long,X) $FF0645.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1CFF18.l		; 0F 18 FF 1C ; OR accumulator with memory (long) $1CFF18.l [Writes: Accumulator] [Flags: ZN]
	sbc $427E8D.l,X		; FF 8D 7E 42 ; Subtract with carry (long,X) $427E8D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $C33D.w,X		; BD 3D C3 ; Load $C33D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stz $C17F.w,X		; 9E 7F C1 ; Store zero to $C17F.w,X [Reads: X Index]
	rol $817E.w,X		; 3E 7E 81 ; Rotate left $817E.w,X [Reads: X Index] [Flags: ZNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$68.b],Y		; 97 68 ; Store accumulator (long indexed) [$68.b],Y [Reads: Accumulator, Direct Page, Y Index]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $43C6.w,Y		; 39 C6 43 ; AND accumulator with memory $43C6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $1106.w,Y		; F9 06 11 ; Subtract with carry $1106.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $62.b,X		; 95 62 ; Store accumulator to $62.b,X [Reads: Accumulator, X Index]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	cpy #$00DB.w		; C0 DB 00 ; Compare #$00DB.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda $18.b		; A5 18 ; Load $18.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit #$34.b		; 89 34 ; Test bits #$34.b with accumulator [Reads: Accumulator] [Flags: Z]
	cpx #$80C0.w		; E0 C0 80 ; Compare #$80C0.w with X register [Reads: X Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $7E3C.w		; 1C 3C 7E ; Test and reset bits $7E3C.w [Reads: Accumulator] [Flags: Z]
	ror $4F.b,X		; 76 4F ; Rotate right $4F.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $FF3700.l,X		; FF 00 37 FF ; Subtract with carry (long,X) $FF3700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$9F.b]		; 07 9F ; OR accumulator with memory (long) [$9F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $7716EF.l		; 6F EF 16 77 ; Add with carry (long) $7716EF.l [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and ($CE.b),Y		; 31 CE ; AND accumulator with memory ($CE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $B1.b,S		; 43 B1 ; Exclusive OR accumulator with stack relative $B1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr $F105.w		; 4E 05 F1 ; Logical shift right $F105.w [Flags: ZNC]
	asl $1EE1.w		; 0E E1 1E ; Arithmetic shift left $1EE1.w [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $600DE0.l		; 22 E0 0D 60 ; Jump to subroutine long $600DE0.l [Writes: Stack Pointer] [Flow: call]
	cpx #$FFC0.w		; E0 C0 FF ; Compare #$FFC0.w with X register [Reads: X Index] [Flags: ZNC]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $3E		; F0 3E ; Branch if equal to $F0, $3E [Flow: branch]
	and $3F20C0.l,X		; 3F C0 20 3F ; AND accumulator with memory (long,X) $3F20C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$4400.w		; C0 00 44 ; Compare #$4400.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $000302.l,X		; FF 02 03 00 ; Subtract with carry (long,X) $000302.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $E00023.l,X		; 1F 23 00 E0 ; Logical OR long $E00023.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $7B0031.l		; 2F 31 00 7B ; AND accumulator with memory (long) $7B0031.l [Writes: Accumulator] [Flags: ZN]
	ora $66.b		; 05 66 ; Logical OR $66.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $4C33.w,Y		; 19 33 4C ; OR accumulator with memory $4C33.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $30F380.l,X		; 7F 80 F3 30 ; Add long $30F380.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $7A00.w,X		; FE 00 7A ; Increment memory $7A00.w,X [Reads: X Index] [Flags: ZN]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	.db $30, $21		; 30 21 ; Branch if minus to $30, $21 [Flow: branch]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0D71.w		; 4D 71 0D ; Exclusive OR $0D71.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($85.b,S),Y		; 73 85 ; Add with carry (stack relative indirect indexed) ($85.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$09.b]		; 67 09 ; Add with carry (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dec $DE10.w		; CE 10 DE ; Decrement $DE10.w [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $790681.l,X		; 7F 81 06 79 ; Add long $790681.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0C.b,S		; 03 0C ; OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $69.b,X		; 34 69 ; Test bits $69.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	ora ($08.b),Y		; 11 08 ; OR accumulator with memory ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $82, $7F, $0B		; 82 7F 0B ; Branch always long to $82, $7F, $0B [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$BF		; C2 BF
	.db $62, $5F, $32		; 62 5F 32 ; Push effective relative address $62, $5F, $32 [Writes: Stack Pointer]
	and $0D171B.l		; 2F 1B 17 0D ; AND accumulator with memory (long) $0D171B.l [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$04.b]		; 07 04 ; OR accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $800C00.l		; 22 00 0C 80 ; Jump to subroutine long $800C00.l [Writes: Stack Pointer] [Flow: call]
	cpy #$F0E0.w		; C0 E0 F0 ; Compare #$F0E0.w with Y register [Reads: Y Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc [$E0.b]		; E7 E0 ; Subtract with carry (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	cpx #$E7E0.w		; E0 E0 E7 ; Compare #$E7E0.w with X register [Reads: X Index] [Flags: ZNC]
	sbc [$27.b]		; E7 27 ; Subtract with carry (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F0E003.l,X		; FF 03 E0 F0 ; Subtract with carry (long,X) $F0E003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$23E7.w		; E0 E7 23 ; Compare #$23E7.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $7F9047.l,X		; FF 47 90 7F ; Subtract with carry (long,X) $7F9047.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor [$D8.b]		; 47 D8 ; Exclusive OR accumulator with memory (long) [$D8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $110027.l,X		; 3F 27 00 11 ; AND accumulator with memory (long,X) $110027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $CC3300.l,X		; FF 00 33 CC ; Subtract with carry (long,X) $CC3300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $EFDF00.l,X		; FF 00 DF EF ; Subtract with carry (long,X) $EFDF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$EF.b],Y		; D7 EF ; Compare accumulator (long indexed) [$EF.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	and [$CF.b],Y		; 37 CF ; AND accumulator with memory (long indexed) [$CF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($25.b,X)		; 01 25 ; Logical OR ($25.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $97.b		; 00 97 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	ora ($47.b,X)		; 01 47 ; Logical OR ($47.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $90, $7F		; 90 7F ; Branch if carry clear to $90, $7F [Flow: branch]
	eor [$D8.b]		; 47 D8 ; Exclusive OR accumulator with memory (long) [$D8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $FF0027.l,X		; 3F 27 00 FF ; AND accumulator with memory (long,X) $FF0027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ldx $037E.w,Y		; BE 7E 03 ; Load X register $037E.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldy $B97C.w,X		; BC 7C B9 ; Load Y register $B97C.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	adc $0125.w,Y		; 79 25 01 ; Add $0125.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: ZNC]
	sbc $01002A.l,X		; FF 2A 00 01 ; Subtract with carry (long,X) $01002A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF267F.l,X		; FF 7F 26 FF ; Subtract with carry (long,X) $FF267F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $03FF23.l,X		; 7F 23 FF 03 ; Add long $03FF23.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($F3.b,S),Y		; F3 F3 ; Subtract with carry (stack relative indirect indexed) ($F3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($DF.b,X)		; 01 DF ; Logical OR ($DF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $0EFF2A.l,X		; DF 2A FF 0E ; Compare accumulator (long,X) $0EFF2A.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $DC10EF.l,X		; FF EF 10 DC ; Subtract with carry (long,X) $DC10EF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$B2.b]		; 27 B2 ; AND accumulator with memory (long) [$B2.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $C09F61.l		; 4F 61 9F C0 ; Exclusive OR accumulator with memory (long) $C09F61.l [Writes: Accumulator] [Flags: ZN]
	and $277F80.l,X		; 3F 80 7F 27 ; AND accumulator with memory (long,X) $277F80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004600.l,X		; FF 00 46 00 ; Subtract with carry (long,X) $004600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $27FF22.l,X		; FF 22 FF 27 ; Subtract with carry (long,X) $27FF22.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $BF0A00.l,X		; FF 00 0A BF ; Subtract with carry (long,X) $BF0A00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CF.b		; 00 CF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F5.b		; 00 F5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $7B0500.l		; 22 00 05 7B ; Jump to subroutine long $7B0500.l [Writes: Stack Pointer] [Flow: call]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $458A80.l,X		; 1F 80 8A 45 ; Logical OR long $458A80.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $7805FF.l,X		; 7F FF 05 78 ; Add long $7805FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda [$7F.b],Y		; B7 7F ; Load accumulator (long indexed) [$7F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$433F.w		; C0 3F 43 ; Compare #$433F.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $3F0300.l,X		; FF 00 03 3F ; Subtract with carry (long,X) $3F0300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $23070F.l,X		; 1F 0F 07 23 ; Logical OR long $23070F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7F8000.l,X		; FF 00 80 7F ; Subtract with carry (long,X) $7F8000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $80437F.l,X		; FF 7F 43 80 ; Subtract with carry (long,X) $80437F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $220000.l,X		; FF 00 00 22 ; Subtract with carry (long,X) $220000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $010022.l,X		; FF 22 00 01 ; Subtract with carry (long,X) $010022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $00227F.l,X		; 7F 7F 22 00 ; Add long $00227F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $70, $8F		; 70 8F ; Branch if overflow set to $70, $8F [Flow: branch]
	.db $70, $90		; 70 90 ; Branch if overflow set to $70, $90 [Flow: branch]
	sbc $23.b,S		; E3 23 ; Subtract stack-relative $23.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cmp [$44.b]		; C7 44 ; Compare accumulator (long) [$44.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sta $909F88.l		; 8F 88 9F 90 ; Store accumulator (long) $909F88.l [Reads: Accumulator]
	eor $BF.b,S		; 43 BF ; Exclusive OR accumulator with stack relative $BF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy #$27E0.w		; A0 E0 27 ; Load #$27E0.w into Y register [Writes: Y Index] [Flags: ZN]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $7238.w		; 1C 38 72 ; Test and reset bits $7238.w [Reads: Accumulator] [Flags: Z]
	ror $46.b		; 66 46 ; Rotate right $46.b [Reads: Direct Page] [Flags: ZNC]
	lsr $4A.b		; 46 4A ; Logical shift right $4A.b [Reads: Direct Page] [Flags: ZNC]
	lda $B1.b,X		; B5 B1 ; Load $B1.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	eor ($73.b,X)		; 41 73 ; Exclusive OR accumulator with memory ($73.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $F4BF.w,X		; BD BF F4 ; Load $F4BF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $FB.b,X		; 75 FB ; Add $FB.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $40FF47.l,X		; FF 47 FF 40 ; Subtract with carry (long,X) $40FF47.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $0E7C.w		; CC 7C 0E ; Compare $0E7C.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora [$20.b]		; 07 20 ; OR accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $7F		; 30 7F ; Branch if minus to $30, $7F [Flow: branch]
	.db $80, $5F		; 80 5F ; Branch always to $80, $5F [Flow: branch]
	ldy #$609F.w		; A0 9F 60 ; Load #$609F.w into Y register [Writes: Y Index] [Flags: ZN]
	adc $9F47E0.l,X		; 7F E0 47 9F ; Add long $9F47E0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $23		; 80 23 ; Branch always to $80, $23 [Flow: branch]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $02FF.w		; 2C FF 02 ; Test bits $02FF.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	inc $FCFF.w,X		; FE FF FC ; Increment memory $FCFF.w,X [Reads: X Index] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $FFFE43.l,X		; FF 43 FE FF ; Subtract with carry (long,X) $FFFE43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $4C9F60.l		; 0F 60 9F 4C ; OR accumulator with memory (long) $4C9F60.l [Writes: Accumulator] [Flags: ZN]
	lda ($AE.b,S),Y		; B3 AE ; Load accumulator (stack relative indirect indexed) ($AE.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($7E.b),Y		; 71 7E ; Add with carry ($7E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($B6.b,X)		; E1 B6 ; Subtract with carry ($B6.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda #$ADBA.w		; A9 BA AD ; Load #$ADBA.w into accumulator [Writes: Accumulator] [Flags: ZN]
	lda $ACAE.w,X		; BD AE AC ; Load $ACAE.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $230023.l,X		; BF 23 00 23 ; Load long $230023.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cpx #$0726.w		; E0 26 07 ; Compare #$0726.w with X register [Reads: X Index] [Flags: ZNC]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $19.b		; 04 19 ; Test and set bits $19.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc ($30.b,S),Y		; 73 30 ; Add with carry (stack relative indirect indexed) ($30.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($70.b),Y		; F1 70 ; Subtract with carry ($70.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $30		; B0 30 ; Branch if carry set to $B0, $30 [Flow: branch]
	ldy $003C.w,X		; BC 3C 00 ; Load Y register $003C.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $02434F.l		; 0F 4F 43 02 ; OR accumulator with memory (long) $02434F.l [Writes: Accumulator] [Flags: ZN]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($73.b,S),Y		; B3 73 ; Load accumulator (stack relative indirect indexed) ($73.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$67.b]		; A7 67 ; Load accumulator (long) [$67.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $5F9F4F.l		; 8F 4F 9F 5F ; Store accumulator (long) $5F9F4F.l [Reads: Accumulator]
	eor $BF.b,S		; 43 BF ; Exclusive OR accumulator with stack relative $BF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $7E9E0D.l,X		; 7F 0D 9E 7E ; Add long $7E9E0D.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $0C3E.w		; CE 3E 0C ; Decrement $0C3E.w [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $30, $20		; 30 20 ; Branch if minus to $30, $20 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $5F43DE.l,X		; DF DE 43 5F ; Compare accumulator (long,X) $5F43DE.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	lsr $3F01.w,X		; 5E 01 3F ; Logical shift right $3F01.w,X [Reads: X Index] [Flags: ZNC]
	rol $2F43.w,X		; 3E 43 2F ; Rotate left $2F43.w,X [Reads: X Index] [Flags: ZNC]
	rol $1F03.w		; 2E 03 1F ; Rotate left $1F03.w [Flags: ZNC]
	asl $1617.w,X		; 1E 17 16 ; Arithmetic shift left $1617.w,X [Reads: X Index] [Flags: ZNC]
	and $E0.b,S		; 23 E0 ; AND accumulator with stack relative $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $F802F0.l		; 22 F0 02 F8 ; Jump to subroutine long $F802F0.l [Writes: Stack Pointer] [Flow: call]
	sbc $002DFF.l,X		; FF FF 2D 00 ; Subtract with carry (long,X) $002DFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $9B.b		; 05 9B ; Logical OR $9B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$CD.b]		; 67 CD ; Add with carry (long) [$CD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($EB.b,S),Y		; 33 EB ; AND accumulator (stack relative indirect indexed) ($EB.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $45.b		; 14 45 ; Test and reset bits $45.b [Reads: Accumulator] [Flags: Z]
	sbc #$0317.w		; E9 17 03 ; Subtract #$0317.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	adc #$B997.w		; 69 97 B9 ; Add #$B997.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp [$25.b]		; C7 25 ; Compare accumulator (long) [$25.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $70, $0D		; 70 0D ; Branch if overflow set to $70, $0D [Flow: branch]
	.db $30, $10		; 30 10 ; Branch if minus to $30, $10 [Flow: branch]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	ora $F1E0FF.l		; 0F FF E0 F1 ; OR accumulator with memory (long) $F1E0FF.l [Writes: Accumulator] [Flags: ZN]
	ora ($F2.b,X)		; 01 F2 ; Logical OR ($F2.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $84.b,S		; 03 84 ; OR accumulator with stack relative $84.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $C8.b		; 05 C8 ; Logical OR $C8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $87.b,S		; 43 87 ; Exclusive OR accumulator with stack relative $87.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $3278.w		; 0C 78 32 ; Test and set bits $3278.w [Reads: Accumulator] [Flags: Z]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	eor #$00FF.w		; 49 FF 00 ; Exclusive OR #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $DF00BF.l		; 0F BF 00 DF ; OR accumulator with memory (long) $DF00BF.l [Writes: Accumulator] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8A.b		; 00 8A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $1B		; 80 1B ; Branch always to $80, $1B [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $433C24.l,X		; 1F 24 3C 43 ; Logical OR long $433C24.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $66		; 42 66 ; Reserved instruction
	tsb $5A.b		; 04 5A ; Test and set bits $5A.b [Reads: Accumulator] [Flags: Z]
	ror $FFDB.w,X		; 7E DB FF ; Rotate right $FFDB.w,X [Reads: X Index] [Flags: ZNC]
	sbc [$83.b]		; E7 83 ; Subtract with carry (long) [$83.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C3.b		; 00 C3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $8199.w,Y		; 99 99 81 ; Store accumulator to $8199.w,Y [Reads: Accumulator, Y Index]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$80.b]		; 07 80 ; OR accumulator with memory (long) [$80.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $9F40C0.l,X		; 7F C0 40 9F ; Add long $9F40C0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $27A643.l,X		; 1F 43 A6 27 ; Logical OR long $27A643.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $3FBF.w		; 0D BF 3F ; Logical OR $3FBF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $007F3F.l		; 8F 3F 7F 00 ; Store accumulator (long) $007F3F.l [Reads: Accumulator]
	and $585860.l,X		; 3F 60 58 58 ; AND accumulator with memory (long,X) $585860.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	adc $7F43A0.l		; 6F A0 43 7F ; Add with carry (long) $7F43A0.l [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	adc [$B8.b],Y		; 77 B8 ; Add with carry (long indexed) [$B8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $807F9F.l,X		; 7F 9F 7F 80 ; Add long $807F9F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	lda $163FFF.l,X		; BF FF 3F 16 ; Load long $163FFF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($FF.b,X)		; 41 FF ; Exclusive OR accumulator with memory ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($FF.b,X)		; 21 FF ; Logical AND ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$62.b]		; 07 62 ; OR accumulator with memory (long) [$62.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0001.w,X		; FD 01 00 ; Subtract with carry $0001.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $1C3C02.l,X		; FF 02 3C 1C ; Subtract with carry (long,X) $1C3C02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $9F.b		; 05 9F ; Logical OR $9F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	cpx #$00FF.w		; E0 FF 00 ; Compare #$00FF.w with X register [Reads: X Index] [Flags: ZNC]
	eor $1F.b,S		; 43 1F ; Exclusive OR accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr $9F0D.w		; 20 0D 9F ; Jump to subroutine at $9F0D.w [Writes: Stack Pointer] [Flow: call]
	ldy #$60DF.w		; A0 DF 60 ; Load #$60DF.w into Y register [Writes: Y Index] [Flags: ZN]
	cmp $006020.l,X		; DF 20 60 00 ; Compare accumulator (long,X) $006020.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$0040.w		; C0 40 00 ; Compare #$0040.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0F0027.l,X		; FF 27 00 0F ; Subtract with carry (long,X) $0F0027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C6FF8E.l,X		; FF 8E FF C6 ; Subtract with carry (long,X) $C6FF8E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F4FFE4.l,X		; FF E4 FF F4 ; Subtract with carry (long,X) $F4FFE4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $CFFFE4.l,X		; FF E4 FF CF ; Subtract with carry (long,X) $CFFFE4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C0FFF8.l,X		; FF F8 FF C0 ; Subtract with carry (long,X) $C0FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $A9.b		; 05 A9 ; Logical OR $A9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $EDF2.w,Y		; BE F2 ED ; Load X register $EDF2.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	inc $09.b,X		; F6 09 ; Increment memory $09.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	eor $9E.b,S		; 43 9E ; Exclusive OR accumulator with stack relative $9E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda ($06.b,X)		; A1 06 ; Load accumulator ($06.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $FEA1.w,Y		; BE A1 FE ; Load X register $FEA1.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and $40.b,S		; 23 40 ; AND accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $4A.b,S		; 83 4A ; Store accumulator (stack relative) $4A.b,S [Reads: Accumulator, Stack Pointer]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $9E.b		; 00 9E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0787.w,X		; 1E 87 07 ; Arithmetic shift left $0787.w,X [Reads: X Index] [Flags: ZNC]
	cmp $43.b,S		; C3 43 ; Compare accumulator (stack relative) $43.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	eor $F8.b,S		; 43 F8 ; Exclusive OR accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora $3F3C7C.l		; 0F 7C 3C 3F ; OR accumulator with memory (long) $3F3C7C.l [Writes: Accumulator] [Flags: ZN]
	ora $61077F.l		; 0F 7F 07 61 ; OR accumulator with memory (long) $61077F.l [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	bit $0707.w,X		; 3C 07 07 ; Test bits $0707.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$43.b],Y		; F7 43 ; Subtract with carry (long indexed) [$43.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $EF		; F0 EF ; Branch if equal to $F0, $EF [Flow: branch]
	ora ($D0.b,X)		; 01 D0 ; Logical OR ($D0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $DFE043.l		; EF 43 E0 DF ; Subtract with carry (long) $DFE043.l [Writes: Accumulator] [Flags: ZVNC]
	eor $A0.b,S		; 43 A0 ; Exclusive OR accumulator with stack relative $A0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $0F0027.l,X		; DF 27 00 0F ; Compare accumulator (long,X) $0F0027.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	inc $CF.b,X		; F6 CF ; Increment memory $CF.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dec $EF.b,X		; D6 EF ; Decrement memory $EF.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	inc $EAE7.w,X		; FE E7 EA ; Increment memory $EAE7.w,X [Reads: X Index] [Flags: ZN]
	sbc [$FD.b],Y		; F7 FD ; Subtract with carry (long indexed) [$FD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($FE.b,S),Y		; F3 FE ; Subtract with carry (stack relative indirect indexed) ($FE.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FCFF.w,Y		; F9 FF FC ; Subtract with carry $FCFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $002BFE.l,X		; FF FE 2B 00 ; Subtract with carry (long,X) $002BFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $43FF00.l,X		; FF 00 FF 43 ; Subtract with carry (long,X) $43FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and #$1000.w		; 29 00 10 ; Logical AND #$1000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $02FE.w,X		; FD FE 02 ; Subtract with carry $02FE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($00FE.w,X)		; FC FE 00 ; Jump to subroutine indirect indexed ($00FE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FD0201.l,X		; FF 01 02 FD ; Subtract with carry (long,X) $FD0201.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFFFC.l,X		; FF FC FF FF ; Subtract with carry (long,X) $FFFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $FE7E.w,Y		; BE 7E FE ; Load X register $FE7E.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	rol $3E43.w,X		; 3E 43 3E ; Rotate left $3E43.w,X [Reads: X Index] [Flags: ZNC]
	lsr $BE03.w,X		; 5E 03 BE ; Logical shift right $BE03.w,X [Reads: X Index] [Flags: ZNC]
	dec $3EDE.w,X		; DE DE 3E ; Decrement memory $3EDE.w,X [Reads: X Index] [Flags: ZN]
	eor $BE.b,S		; 43 BE ; Exclusive OR accumulator with stack relative $BE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $0103.w,X		; 7E 03 01 ; Rotate right $0103.w,X [Reads: X Index] [Flags: ZNC]
	ora ($81.b,X)		; 01 81 ; Logical OR ($81.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta ($24.b,X)		; 81 24 ; Store accumulator ($24.b,X) [Reads: Accumulator, X Index, Direct Page]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $6283.w,X		; FE 83 62 ; Increment memory $6283.w,X [Reads: X Index] [Flags: ZN]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $0027FF.l		; 22 FF 27 00 ; Jump to subroutine long $0027FF.l [Writes: Stack Pointer] [Flow: call]
	eor $277EBE.l		; 4F BE 7E 27 ; Exclusive OR accumulator with memory (long) $277EBE.l [Writes: Accumulator] [Flags: ZN]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $0F0FFF.l,X		; FF FF 0F 0F ; Subtract with carry (long,X) $0F0FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $01.b,S		; 23 01 ; AND accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $8E.b,S		; 03 8E ; OR accumulator with stack relative $8E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $40C0.w,X		; 3E C0 40 ; Rotate left $40C0.w,X [Reads: X Index] [Flags: ZNC]
	eor $80.b,S		; 43 80 ; Exclusive OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $00FF02.l,X		; 7F 02 FF 00 ; Add long $00FF02.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $03AD84.l,X		; FF 84 AD 03 ; Subtract with carry (long,X) $03AD84.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($41.b,X)		; 01 41 ; Logical OR ($41.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $E00025.l,X		; 3F 25 00 E0 ; AND accumulator with memory (long,X) $E00025.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $F7B8BF.l		; 2F BF B8 F7 ; AND accumulator with memory (long) $F7B8BF.l [Writes: Accumulator] [Flags: ZN]
	pea $0AFB.w		; F4 FB 0A ; Push absolute address $0AFB.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	bit $BE04.w,X		; 3C 04 BE ; Test bits $BE04.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	.db $82, $9F, $87		; 82 9F 87 ; Branch always long to $82, $9F, $87 [Flow: branch]
	cmp $20EF40.l		; CF 40 EF 20 ; Compare accumulator (long) $20EF40.l [Reads: Accumulator] [Flags: ZNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	tsb $C306.w		; 0C 06 C3 ; Test and set bits $C306.w [Reads: Accumulator] [Flags: Z]
	eor #$3060.w		; 49 60 30 ; Exclusive OR #$3060.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $7F.b,X		; 16 7F ; Arithmetic shift left $7F.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($BF.b,X)		; 01 BF ; Logical OR ($BF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta ($5F.b,X)		; 81 5F ; Store accumulator ($5F.b,X) [Reads: Accumulator, X Index, Direct Page]
	eor ($2F.b,X)		; 41 2F ; Exclusive OR accumulator with memory ($2F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($17.b,X)		; 21 17 ; Logical AND ($17.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($F3.b),Y		; 11 F3 ; OR accumulator with memory ($F3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($FF.b),Y		; F1 FF ; Subtract with carry ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor ($B8.b,X)		; 41 B8 ; Exclusive OR accumulator with memory ($B8.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp.w [$F4EC]		; DC EC F4 ; Jump long indirect [$F4EC] [Flow: jump]
	sed		; F8 ; Set decimal flag [Flags: D]
	tsb $3C00.w		; 0C 00 3C ; Test and set bits $3C00.w [Reads: Accumulator] [Flags: Z]
	eor [$5F.b]		; 47 5F ; Exclusive OR accumulator with memory (long) [$5F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy #$7A03.w		; A0 03 7A ; Load #$7A03.w into Y register [Writes: Y Index] [Flags: ZN]
	sta $60.b		; 85 60 ; Store accumulator to $60.b [Reads: Accumulator]
	sta $024C83.l,X		; 9F 83 4C 02 ; Store accumulator (long,X) $024C83.l,X [Reads: Accumulator, X Index]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $FC0CFF.l		; 22 FF 0C FC ; Jump to subroutine long $FC0CFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $C0FFF0.l,X		; FF F0 FF C0 ; Subtract with carry (long,X) $C0FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0FFF83.l,X		; FF 83 FF 0F ; Subtract with carry (long,X) $0FFF83.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7FFF3F.l,X		; FF 3F FF 7F ; Subtract with carry (long,X) $7FFF3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $00,$FF		; 44 FF 00 ; Move block positive $00,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $1F.b		; 04 1F ; Test and set bits $1F.b [Reads: Accumulator] [Flags: Z]
	sbc $F1FFFC.l,X		; FF FC FF F1 ; Subtract with carry (long,X) $F1FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $E1,$FF		; 44 FF E1 ; Move block positive $E1,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $C1.b		; 00 C1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	lda [$75.b]		; A7 75 ; Load accumulator (long) [$75.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $BC6B.w		; AE 6B BC ; Load $BC6B.w into X register [Writes: X Index] [Flags: ZN]
	adc [$B8.b],Y		; 77 B8 ; Add with carry (long indexed) [$B8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $70.b,X		; B5 70 ; Load $70.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $024C83.l		; 8F 83 4C 02 ; Store accumulator (long) $024C83.l [Reads: Accumulator]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $50, $60		; 50 60 ; Branch if overflow clear to $50, $60 [Flow: branch]
	.db $F0, $D0		; F0 D0 ; Branch if equal to $F0, $D0 [Flow: branch]
	ldy #$60C0.w		; A0 C0 60 ; Load #$60C0.w into Y register [Writes: Y Index] [Flags: ZN]
	ldy #$40C0.w		; A0 C0 40 ; Load #$40C0.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0F8F.w,Y		; 19 8F 0F ; OR accumulator with memory $0F8F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $7F3F1F.l,X		; 1F 1F 3F 7F ; Logical OR long $7F3F1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $9E66FF.l,X		; FF FF 66 9E ; Subtract with carry (long,X) $9E66FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($CE.b)		; 32 CE ; AND accumulator with memory (indirect) ($CE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $CCE7.w,Y		; 99 E7 CC ; Store accumulator to $CCE7.w,Y [Reads: Accumulator, Y Index]
	sbc ($E7.b,S),Y		; F3 E7 ; Subtract with carry (stack relative indirect indexed) ($E7.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc ($FC.b,S),Y		; F3 FC ; Subtract with carry (stack relative indirect indexed) ($FC.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $01FF7F.l,X		; FF 7F FF 01 ; Subtract with carry (long,X) $01FF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($25.b,X)		; 01 25 ; Logical OR ($25.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $441FFF.l,X		; 3F FF 1F 44 ; AND accumulator with memory (long,X) $441FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $9F000F.l,X		; FF 0F 00 9F ; Subtract with carry (long,X) $9F000F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $2F0027.l,X		; FF 27 00 2F ; Subtract with carry (long,X) $2F0027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $450027.l,X		; FF 27 00 45 ; Subtract with carry (long,X) $450027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $457E.w,X		; BD 7E 45 ; Load $457E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($7E.b,X)		; A1 7E ; Load accumulator ($7E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $BD.b,S		; 43 BD ; Exclusive OR accumulator with stack relative $BD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $0027.w,X		; 7E 27 00 ; Rotate right $0027.w,X [Reads: X Index] [Flags: ZNC]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $020101.l,X		; FF 01 01 02 ; Subtract with carry (long,X) $020101.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $06.b		; 02 06 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $23.b		; 06 23 ; Arithmetic shift left $23.b [Reads: Direct Page] [Flags: ZNC]
	asl $1E23.w		; 0E 23 1E ; Arithmetic shift left $1E23.w [Flags: ZNC]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	sbc $F1F9FD.l,X		; FF FD F9 F1 ; Subtract with carry (long,X) $F1F9FD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($E1.b),Y		; F1 E1 ; Subtract with carry ($E1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($FF.b,X)		; E1 FF ; Subtract with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($01FE.w,X)		; FC FE 01 ; Jump to subroutine indirect indexed ($01FE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000023.l,X		; FF 23 00 00 ; Subtract with carry (long,X) $000023.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FEFDFE.l,X		; FF FE FD FE ; Subtract with carry (long,X) $FEFDFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FAFD.w,X		; FE FD FA ; Increment memory $FAFD.w,X [Reads: X Index] [Flags: ZN]
	sbc $FBFC.w,X		; FD FC FB ; Subtract with carry $FBFC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pea $43FB.w		; F4 FB 43 ; Push absolute address $43FB.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc [$27.b],Y		; F7 27 ; Subtract with carry (long indexed) [$27.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $DEE3.w,X		; DD E3 DE ; Compare accumulator $DEE3.w,X [Reads: X Index] [Flags: ZNC]
	sbc #$E6D5.w		; E9 D5 E6 ; Subtract #$E6D5.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc ($EB.b)		; F2 EB ; Subtract with carry (indirect) ($EB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $EF		; F0 EF ; Branch if equal to $F0, $EF [Flow: branch]
	sbc ($EC.b)		; F2 EC ; Subtract with carry (indirect) ($EC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($00.b,S),Y		; F3 00 ; Subtract with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $23.b		; 04 23 ; Test and set bits $23.b [Reads: Accumulator] [Flags: Z]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $0B04.w		; 8C 04 0B ; Store Y register to $0B04.w [Reads: Y Index]
	sta $1FE07F.l,X		; 9F 7F E0 1F ; Store accumulator (long,X) $1FE07F.l,X [Reads: Accumulator, X Index]
	ora $7F80E0.l,X		; 1F E0 80 7F ; Logical OR long $7F80E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$1F.b]		; E7 1F ; Subtract with carry (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($0E.b)		; F2 0E ; Subtract with carry (indirect) ($0E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	ora ($61.b,X)		; 01 61 ; Logical OR ($61.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $DE44.w,X		; FD 44 DE ; Subtract with carry $DE44.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($03.b),Y		; F1 03 ; Subtract with carry ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $01DE.w,X		; FD DE 01 ; Subtract with carry $01DE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $2CE000.l		; 22 00 E0 2C ; Jump to subroutine long $2CE000.l [Writes: Stack Pointer] [Flow: call]
	cpx #$A361.w		; E0 61 A3 ; Compare #$A361.w with X register [Reads: X Index] [Flags: ZNC]
	.db $62, $71, $B2		; 62 71 B2 ; Push effective relative address $62, $71, $B2 [Writes: Stack Pointer]
	eor $BCBA.w,Y		; 59 BA BC ; Exclusive OR accumulator with memory $BCBA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $DEAE.w,X		; DD AE DE ; Compare accumulator $DEAE.w,X [Reads: X Index] [Flags: ZNC]
	cmp [$EF.b],Y		; D7 EF ; Compare accumulator (long indexed) [$EF.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sbc [$1E.b]		; E7 1E ; Subtract with carry (long) [$1E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	trb $040C.w		; 1C 0C 04 ; Test and reset bits $040C.w [Reads: Accumulator] [Flags: Z]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta [$3F.b]		; 87 3F ; Store accumulator (long) [$3F.b] [Reads: Accumulator, Direct Page]
	lda [$3F.b]		; A7 3F ; Load accumulator (long) [$3F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$5F.b],Y		; 97 5F ; Store accumulator (long indexed) [$5F.b],Y [Reads: Accumulator, Direct Page, Y Index]
	sta $70806F.l		; 8F 6F 80 70 ; Store accumulator (long) $70806F.l [Reads: Accumulator]
	cpy #$E03F.w		; C0 3F E0 ; Compare #$E03F.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora $4000FF.l,X		; 1F FF 00 40 ; Logical OR long $4000FF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsr $0F10.w		; 20 10 0F ; Jump to subroutine at $0F10.w [Writes: Stack Pointer] [Flow: call]
	jsl $FD0B00.l		; 22 00 0B FD ; Jump to subroutine long $FD0B00.l [Writes: Stack Pointer] [Flow: call]
	inc $FCFB.w,X		; FE FB FC ; Increment memory $FCFB.w,X [Reads: X Index] [Flags: ZN]
	inc $F9.b,X		; F6 F9 ; Increment memory $F9.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc $FBF3.w		; ED F3 FB ; Subtract $FBF3.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc [$DF.b]		; E7 DF ; Subtract with carry (long) [$DF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$43.b]		; E7 43 ; Subtract with carry (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$CF.b],Y		; F7 CF ; Subtract with carry (long indexed) [$CF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $618303.l,X		; FF 03 83 61 ; Subtract with carry (long,X) $618303.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($1C.b,X)		; 01 1C ; Logical OR ($1C.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $0B0C.w		; 0C 0C 0B ; Test and set bits $0B0C.w [Reads: Accumulator] [Flags: Z]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FB.b		; 05 FB ; Logical OR $FB.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FFFA.w,X		; FD FA FF ; Subtract with carry $FFFA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FBF8FC.l,X		; FF FC F8 FB ; Subtract with carry (long,X) $FBF8FC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora $FB.b,S		; 03 FB ; OR accumulator with stack relative $FB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FCFA.w,X		; FD FA FC ; Subtract with carry $FCFA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	inc $03F9.w,X		; FE F9 03 ; Increment memory $03F9.w,X [Reads: X Index] [Flags: ZN]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$22.b]		; 07 22 ; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $0B7E.w,Y		; BE 7E 0B ; Load X register $0B7E.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	inc $3E3E.w,X		; FE 3E 3E ; Increment memory $3E3E.w,X [Reads: X Index] [Flags: ZN]
	dec $EE1E.w,X		; DE 1E EE ; Decrement memory $EE1E.w,X [Reads: X Index] [Flags: ZN]
	asl $06F6.w		; 0E F6 06 ; Arithmetic shift left $06F6.w [Flags: ZNC]
	inc $FDFD.w,X		; FE FD FD ; Increment memory $FDFD.w,X [Reads: X Index] [Flags: ZN]
	rol $01.b		; 26 01 ; Rotate left $01.b [Reads: Direct Page] [Flags: ZNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $3E.b,S		; 23 3E ; AND accumulator with stack relative $3E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $FE3E.w,X		; FE 3E FE ; Increment memory $FE3E.w,X [Reads: X Index] [Flags: ZN]
	eor [$BE.b]		; 47 BE ; Exclusive OR accumulator with memory (long) [$BE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $C101.w,X		; 7E 01 C1 ; Rotate right $C101.w,X [Reads: X Index] [Flags: ZNC]
	cmp ($25.b,X)		; C1 25 ; Compare accumulator ($25.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: ZNC]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $A040BF.l,X		; 7F BF 40 A0 ; Add long $A040BF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $5F.b,S		; 43 5F ; Exclusive OR accumulator with stack relative $5F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $B85044.l,X		; BF 44 50 B8 ; Load long $B85044.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsl $FF000F.l		; 22 0F 00 FF ; Jump to subroutine long $FF000F.l [Writes: Stack Pointer] [Flow: call]
	mvp $FE,$00		; 44 00 FE ; Move block positive $FE,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $CF.b,S		; 43 CF ; Exclusive OR accumulator with stack relative $CF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $007B00.l,X		; FF 00 7B 00 ; Subtract with carry (long,X) $007B00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF2700.l,X		; FF 00 27 FF ; Subtract with carry (long,X) $FF2700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($6A.b),Y		; 11 6A ; OR accumulator with memory ($6A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $8A		; 10 8A ; Branch if plus to $10, $8A [Flow: branch]
	.db $80, $F8		; 80 F8 ; Branch always to $80, $F8 [Flow: branch]
	.db $70, $F4		; 70 F4 ; Branch if overflow set to $70, $F4 [Flow: branch]
	sta [$76.b]		; 87 76 ; Store accumulator (long) [$76.b] [Reads: Accumulator, Direct Page]
.INDEX 8
	sep #$9E		; E2 9E
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	adc $B104.w,X		; 7D 04 B1 ; Add $B104.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	sbc $75.b		; E5 75 ; Subtract $75.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $07, $14		; 62 07 14 ; Push effective relative address $62, $07, $14 [Writes: Stack Pointer]
	ora ($83.b,X)		; 01 83 ; Logical OR ($83.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor [$3F.b]		; 47 3F ; Exclusive OR accumulator with memory (long) [$3F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy #$48.b		; C0 48 ; Compare #$48.b with Y register [Reads: Y Index] [Flags: ZNC]
	lda [$87.b],Y		; B7 87 ; Load accumulator (long indexed) [$87.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $7D.b,S		; E3 7D ; Subtract stack-relative $7D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc ($1D.b,S),Y		; F3 1D ; Subtract with carry (stack relative indirect indexed) ($1D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	jmp ($A25E.w)		; 6C 5E A2 ; Jump indirect to ($A25E.w) [Flow: jump]
	sbc $80C01B.l		; EF 1B C0 80 ; Subtract with carry (long) $80C01B.l [Writes: Accumulator] [Flags: ZVNC]
	jsl $010A00.l		; 22 00 0A 01 ; Jump to subroutine long $010A00.l [Writes: Stack Pointer] [Flow: call]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $0FF000.l,X		; FF 00 F0 0F ; Subtract with carry (long,X) $0FF000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $8778C0.l,X		; 3F C0 78 87 ; AND accumulator with memory (long,X) $8778C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$4C.b]		; 87 4C ; Store accumulator (long) [$4C.b] [Reads: Accumulator, Direct Page]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: ZNC]
	jsl $010A00.l		; 22 00 0A 01 ; Jump to subroutine long $010A00.l [Writes: Stack Pointer] [Flow: call]
	eor $DFF8E0.l,X		; 5F E0 F8 DF ; Exclusive OR accumulator with memory (long,X) $DFF8E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpx $E7DF.w		; EC DF E7 ; Compare $E7DF.w with X register [Reads: X Index] [Flags: ZNC]
	cmp $43DEE6.l,X		; DF E6 DE 43 ; Compare accumulator (long,X) $43DEE6.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cpx $DC.b		; E4 DC ; Compare $DC.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cop $E6.b		; 02 E6 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $22E0.w,X		; DE E0 22 ; Decrement memory $22E0.w,X [Reads: X Index] [Flags: ZN]
	cpy #$05.b		; C0 05 ; Compare #$05.b with Y register [Reads: Y Index] [Flags: ZNC]
	cmp ($C3.b,X)		; C1 C3 ; Compare accumulator ($C3.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cmp $C1.b,S		; C3 C1 ; Compare accumulator (stack relative) $C1.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	adc [$78.b]		; 67 78 ; Add with carry (long) [$78.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $20.b,S		; 43 20 ; Exclusive OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $7F7F03.l,X		; 3F 03 7F 7F ; AND accumulator with memory (long,X) $7F7F03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $80, $9F		; 80 9F ; Branch always to $80, $9F [Flow: branch]
	jsl $FC0BFF.l		; 22 FF 0B FC ; Jump to subroutine long $FC0BFF.l [Writes: Stack Pointer] [Flow: call]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $0C.b,S		; 23 0C ; AND accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $FC1400.l		; 22 00 14 FC ; Jump to subroutine long $FC1400.l [Writes: Stack Pointer] [Flow: call]
	stz $F39F.w		; 9C 9F F3 ; Store zero to $F39F.w
	sbc ($0D.b,S),Y		; F3 0D ; Subtract with carry (stack relative indirect indexed) ($0D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $C5.b		; 00 C5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $D2.b		; 84 D2 ; Store Y register to $D2.b [Reads: Y Index]
	.db $42, $6B		; 42 6B ; Reserved instruction
	lda $34.b,S		; A3 34 ; Load accumulator (stack relative) $34.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor [$99.b],Y		; 57 99 ; Exclusive OR accumulator with memory (long indexed) [$99.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $FF22.w		; 2C 22 FF ; Test bits $FF22.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora ($7B.b,S),Y		; 13 7B ; OR accumulator (stack relative indirect indexed) ($7B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $881C.w,X		; 3D 1C 88 ; AND accumulator with memory $881C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $FF.b,S		; C3 FF ; Compare accumulator (stack relative) $FF.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $C8.b		; 04 C8 ; Test and set bits $C8.b [Reads: Accumulator] [Flags: Z]
	and [$CF.b],Y		; 37 CF ; AND accumulator with memory (long indexed) [$CF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $CC		; 30 CC ; Branch if minus to $30, $CC [Flow: branch]
	and ($CF.b,S),Y		; 33 CF ; AND accumulator (stack relative indirect indexed) ($CF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $FF3FC0.l,X		; 3F C0 3F FF ; AND accumulator with memory (long,X) $FF3FC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $3A.b		; C5 3A ; Compare $3A.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cpy $3B.b		; C4 3B ; Compare $3B.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cmp [$38.b]		; C7 38 ; Compare accumulator (long) [$38.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$3F.b]		; C7 3F ; Compare accumulator (long) [$3F.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cpx #$1F.b		; E0 1F ; Compare #$1F.b with X register [Reads: X Index] [Flags: ZNC]
	sbc ($1F.b,X)		; E1 1F ; Subtract with carry ($1F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $19.b		; E6 19 ; Increment $19.b [Reads: Direct Page] [Flags: ZN]
	lda $002740.l,X		; BF 40 27 00 ; Load long $002740.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor #$00C7.w		; 49 C7 00 ; Exclusive OR #$00C7.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $CF.b		; 05 CF ; Logical OR $CF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $DF.b		; 00 DF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$26.b]		; 07 26 ; OR accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $23F800.l,X		; FF 00 F8 23 ; Subtract with carry (long,X) $23F800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $7F00.w,Y		; 39 00 7F ; AND accumulator with memory $7F00.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($BB.b,X)		; 01 BB ; Logical OR ($BB.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $BB.b		; 00 BB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $39.b		; 05 39 ; Logical OR $39.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $FFFE.w,X		; 7D FE FF ; Add $FFFE.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1F8407.l,X		; FF 07 84 1F ; Subtract with carry (long,X) $1F8407.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora $C4.b,S		; 03 C4 ; OR accumulator with stack relative $C4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	sbc $00FF43.l,X		; FF 43 FF 00 ; Subtract with carry (long,X) $00FF43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$CF.b]		; 07 CF ; OR accumulator with memory (long) [$CF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($003B.w,X)		; FC 3B 00 ; Jump to subroutine indirect indexed ($003B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $2FE4FF.l,X		; FF FF E4 2F ; Subtract with carry (long,X) $2FE4FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $A658.w		; AC 58 A6 ; Load $A658.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $50, $B4		; 50 B4 ; Branch if overflow clear to $50, $B4 [Flow: branch]
	.db $50, $B2		; 50 B2 ; Branch if overflow clear to $50, $B2 [Flow: branch]
	eor ($B0.b)		; 52 B0 ; Exclusive OR accumulator with memory (indirect) ($B0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $50, $B4		; 50 B4 ; Branch if overflow clear to $50, $B4 [Flow: branch]
	.db $50, $A6		; 50 A6 ; Branch if overflow clear to $50, $A6 [Flow: branch]
	.db $50, $AF		; 50 AF ; Branch if overflow clear to $50, $AF [Flow: branch]
	eor $0F0F07.l,X		; 5F 07 0F 0F ; Exclusive OR accumulator with memory (long,X) $0F0F07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0F22.w		; 0D 22 0F ; Logical OR $0F22.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $97.b,S		; 43 97 ; Exclusive OR accumulator with stack relative $97.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $0D.b		; 24 0D ; Test bits $0D.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cmp $24DF6C.l,X		; DF 6C DF 24 ; Compare accumulator (long,X) $24DF6C.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	inc $FC01.w,X		; FE 01 FC ; Increment memory $FC01.w,X [Reads: X Index] [Flags: ZN]
	ora $8C.b,S		; 03 8C ; OR accumulator with stack relative $8C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($85.b,S),Y		; 73 85 ; Add with carry (stack relative indirect indexed) ($85.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($74.b),Y		; 11 74 ; OR accumulator with memory ($74.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	adc ($4C.b,S),Y		; 73 4C ; Add with carry (stack relative indirect indexed) ($4C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $DBC7.w,Y		; F9 C7 DB ; Subtract with carry $DBC7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $0D.b		; [PATTERN: Memory clearing operation] 64 0D ; Store zero to $0D.b
	sbc ($07.b,S),Y		; F3 07 ; Subtract with carry (stack relative indirect indexed) ($07.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	cmp [$F8.b]		; C7 F8 ; Compare accumulator (long) [$F8.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	stz $7B.b		; 64 7B ; Store zero to $7B.b
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	.db $10, $80		; 10 80 ; Branch if plus to $10, $80 [Flow: branch]
	sta [$78.b],Y		; 97 78 ; Store accumulator (long indexed) [$78.b],Y [Reads: Accumulator, Direct Page, Y Index]
	pei ($7B.b)		; D4 7B ; Push effective indirect address ($7B.b) [Reads: Direct Page] [Writes: Stack Pointer]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	adc [$D0.b],Y		; 77 D0 ; Add with carry (long indexed) [$D0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $7F5EA1.l		; 6F A1 5E 7F ; Add with carry (long) $7F5EA1.l [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	sbc $24FF0F.l,X		; FF 0F FF 24 ; Subtract with carry (long,X) $24FF0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	sbc $005483.l,X		; FF 83 54 00 ; Subtract with carry (long,X) $005483.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($94.b,X)		; 01 94 ; Logical OR ($94.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$CA.b]		; 87 CA ; Store accumulator (long) [$CA.b] [Reads: Accumulator, Direct Page]
	ora ($62.b,X)		; 01 62 ; Logical OR ($62.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $100025.l,X		; 7F 25 00 10 ; Add long $100025.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $E7		; 80 E7 ; Branch always to $80, $E7 [Flow: branch]
	cmp $F8DFEC.l,X		; DF EC DF F8 ; Compare accumulator (long,X) $F8DFEC.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $F1DFF0.l,X		; DF F0 DF F1 ; Compare accumulator (long,X) $F1DFF0.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	dec $E1DE.w		; CE DE E1 ; Decrement $E1DE.w [Flags: ZN]
	jmp ($3CFF.w,X)		; 7C FF 3C ; Jump indirect indexed to ($3CFF.w,X) [Reads: X Index] [Flow: jump]
	sbc $0EC024.l,X		; FF 24 C0 0E ; Subtract with carry (long,X) $0EC024.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $100F0F.l,X		; FF 0F 0F 10 ; Subtract with carry (long,X) $100F0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $382F30.l,X		; 1F 30 2F 38 ; Logical OR long $382F30.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and [$2F.b]		; 27 2F ; AND accumulator with memory (long) [$2F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $26		; 30 26 ; Branch if minus to $30, $26 [Flow: branch]
	and $2443.w,Y		; 39 43 24 ; AND accumulator with memory $2443.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($F0.b,X)		; 01 F0 ; Logical OR ($F0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpx #$22.b		; E0 22 ; Compare #$22.b with X register [Reads: X Index] [Flags: ZNC]
	cpy #$13.b		; C0 13 ; Compare #$13.b with Y register [Reads: Y Index] [Flags: ZNC]
	cmp ($C3.b,X)		; C1 C3 ; Compare accumulator ($C3.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cmp $FF.b,S		; C3 FF ; Compare accumulator (stack relative) $FF.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc $01DE21.l,X		; FF 21 DE 01 ; Subtract with carry (long,X) $01DE21.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $3FC0.w,X		; FE C0 3F ; Increment memory $3FC0.w,X [Reads: X Index] [Flags: ZN]
	cmp ($3E.b,X)		; C1 3E ; Compare accumulator ($3E.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	and $FF07C0.l,X		; 3F C0 07 FF ; AND accumulator with memory (long,X) $FF07C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $8300FF.l,X		; 3F FF 00 83 ; AND accumulator with memory (long,X) $8300FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldx $00.b,Y		; B6 00 ; Load X register $00.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $000EFF.l		; 22 FF 0E 00 ; Jump to subroutine long $000EFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $70AF00.l,X		; FF 00 AF 70 ; Subtract with carry (long,X) $70AF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $488750.l,X		; 9F 50 87 48 ; Store accumulator (long,X) $488750.l,X [Reads: Accumulator, X Index]
	sta ($45.b)		; 92 45 ; Store accumulator (indirect) ($45.b) [Reads: Accumulator, Direct Page]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	.db $62, $D5, $31		; 62 D5 31 ; Push effective relative address $62, $D5, $31 [Writes: Stack Pointer]
	jsl $200400.l		; 22 00 04 20 ; Jump to subroutine long $200400.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $38		; 30 38 ; Branch if minus to $30, $38 [Flow: branch]
	trb $450E.w		; 1C 0E 45 ; Test and reset bits $450E.w [Reads: Accumulator] [Flags: Z]
	sbc $800900.l,X		; FF 00 09 80 ; Subtract with carry (long,X) $800900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $60FF3F.l,X		; 7F 3F FF 60 ; Add long $60FF3F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $18FF4F.l,X		; FF 4F FF 18 ; Subtract with carry (long,X) $18FF4F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $4366.w,Y		; 99 66 43 ; Store accumulator to $4366.w,Y [Reads: Accumulator, Y Index]
	stx $69.b,Y		; 96 69 ; Store X register $69.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ora $99.b		; 05 99 ; Logical OR $99.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$9E.b]		; 67 9E ; Add with carry (long) [$9E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $273EC1.l,X		; 7F C1 3E 27 ; Add long $273EC1.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0C.b,S		; E3 0C ; Subtract stack-relative $0C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cmp [$18.b]		; C7 18 ; Compare accumulator (long) [$18.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	bit #$1136.w		; 89 36 11 ; Test bits #$1136.w with accumulator [Reads: Accumulator] [Flags: Z]
	inc $1FE0.w		; EE E0 1F ; Increment $1FE0.w [Flags: ZN]
	sta $43.b,S		; 83 43 ; Store accumulator (stack relative) $43.b,S [Reads: Accumulator, Stack Pointer]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $E0F000.l,X		; FF 00 F0 E0 ; Subtract with carry (long,X) $E0F000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$24.b		; C0 24 ; Compare #$24.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $4D.b		; 00 4D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clv		; B8 ; Clear overflow flag [Flags: V]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $2700.w,X		; FE 00 27 ; Increment memory $2700.w,X [Reads: X Index] [Flags: ZN]
	sbc $27002F.l,X		; FF 2F 00 27 ; Subtract with carry (long,X) $27002F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $002FE4.l,X		; FF E4 2F 00 ; Subtract with carry (long,X) $002FE4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $1FED1F.l		; EF 1F ED 1F ; Subtract with carry (long) $1FED1F.l [Writes: Accumulator] [Flags: ZVNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ora $E81FE9.l,X		; 1F E9 1F E8 ; Logical OR long $E81FE9.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0384EC.l,X		; 1F EC 84 03 ; Logical OR long $0384EC.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $27.b,S		; 03 27 ; OR accumulator with stack relative $27.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($01.b,X)		; C1 01 ; Compare accumulator ($01.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	lsr $4720.w,X		; 5E 20 47 ; Logical shift right $4720.w,X [Reads: X Index] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	and [$18.b]		; 27 18 ; AND accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $0A.b,X		; 35 0A ; Logical AND $0A.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp ($FE03.w,X)		; 7C 03 FE ; Jump indirect indexed to ($FE03.w,X) [Reads: X Index] [Flow: jump]
	and ($FE.b,X)		; 21 FE ; Logical AND ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc ($3E.b),Y		; 71 3E ; Add with carry ($3E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $010303.l,X		; 1F 03 03 01 ; Logical OR long $010303.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $301700.l		; 22 00 17 30 ; Jump to subroutine long $301700.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $F8		; 30 F8 ; Branch if minus to $30, $F8 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	jsr ($DC84.w,X)		; FC 84 DC ; Jump to subroutine indirect indexed ($DC84.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $9F.b		; 24 9F ; Test bits $9F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	adc $2F.b,S		; 63 2F ; Add with carry (stack relative) $2F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $D0, $27		; D0 27 ; Branch if not equal to $D0, $27 [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	jsr $CFDF.w		; 20 DF CF ; Jump to subroutine at $CFDF.w [Writes: Stack Pointer] [Flow: call]
	and [$7B.b],Y		; 37 7B ; AND accumulator with memory (long indexed) [$7B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	stz $070F.w		; 9C 0F 07 ; Store zero to $070F.w
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $0FD6.w		; 2E D6 0F ; Rotate left $0FD6.w [Flags: ZNC]
	bit $DC.b		; 24 DC ; Test bits $DC.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $DD.b		; 25 DD ; Logical AND $DD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$DF.b]		; 27 DF ; AND accumulator with memory (long) [$DF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cmp $3FDF30.l,X		; DF 30 DF 3F ; Compare accumulator (long,X) $3FDF30.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cpy #$C1.b		; C0 C1 ; Compare #$C1.b with Y register [Reads: Y Index] [Flags: ZNC]
	cmp ($C3.b,X)		; C1 C3 ; Compare accumulator ($C3.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
.ACCU 16
	rep #$23		; C2 23
	cpy #$43.b		; C0 43 ; Compare #$43.b with Y register [Reads: Y Index] [Flags: ZNC]
	adc [$7B.b]		; 67 7B ; Add with carry (long) [$7B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $AF.b,S		; 43 AF ; Exclusive OR accumulator with stack relative $AF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda ($01.b,S),Y		; B3 01 ; Load accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$3B.b]		; 27 3B ; AND accumulator with memory (long) [$3B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $37.b,S		; 43 37 ; Exclusive OR accumulator with stack relative $37.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	tsb $83.b		; 04 83 ; Test and set bits $83.b [Reads: Accumulator] [Flags: Z]
	sta $C3.b,S		; 83 C3 ; Store accumulator (stack relative) $C3.b,S [Reads: Accumulator, Stack Pointer]
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $070BC3.l		; 22 C3 0B 07 ; Jump to subroutine long $070BC3.l [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr $5FFF.w		; 20 FF 5F ; Jump to subroutine at $5FFF.w [Writes: Stack Pointer] [Flow: call]
	cpx #$F0.b		; E0 F0 ; Compare #$F0.b with X register [Reads: X Index] [Flags: ZNC]
	cmp $E7DFE8.l		; CF E8 DF E7 ; Compare accumulator (long) $E7DFE8.l [Reads: Accumulator] [Flags: ZNC]
	cmp $DCE443.l,X		; DF 43 E4 DC ; Compare accumulator (long,X) $DCE443.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C022E0.l,X		; FF E0 22 C0 ; Subtract with carry (long,X) $C022E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($C3.b,X)		; 01 C3 ; Logical OR ($C3.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $43.b,S		; C3 43 ; Compare accumulator (stack relative) $43.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	bit $3B.b		; 24 3B ; Test bits $3B.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sta $90.b,S		; 83 90 ; Store accumulator (stack relative) $90.b,S [Reads: Accumulator, Stack Pointer]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $3F		; 30 3F ; Branch if minus to $30, $3F [Flow: branch]
	ora $00231F.l,X		; 1F 1F 23 00 ; Logical OR long $00231F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $C3.b		; 02 C3 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $80.b,S		; C3 80 ; Compare accumulator (stack relative) $80.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	sbc $8907F8.l,X		; FF F8 07 89 ; Subtract with carry (long,X) $8907F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsl $FC0C00.l		; 22 00 0C FC ; Jump to subroutine long $FC0C00.l [Writes: Stack Pointer] [Flow: call]
	stz $E89F.w		; 9C 9F E8 ; Store zero to $E89F.w
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc [$0F.b],Y		; F7 0F ; Subtract with carry (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	and [$A9.b],Y		; 37 A9 ; AND accumulator with memory (long indexed) [$A9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $56.b,X		; 76 56 ; Rotate right $56.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp $4A43.w,Y		; D9 43 4A ; Compare accumulator $4A43.w,Y [Reads: Y Index] [Flags: ZNC]
	cmp $4602.w		; CD 02 46 ; Compare $4602.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp $07.b		; C5 07 ; Compare $07.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $201B00.l		; 22 00 1B 20 ; Jump to subroutine long $201B00.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc ($F0.b),Y		; F1 F0 ; Subtract with carry ($F0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($F0.b,S),Y		; 73 F0 ; Add with carry (stack relative indirect indexed) ($F0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $4D78.w,Y		; 99 78 4D ; Store accumulator to $4D78.w,Y [Reads: Accumulator, Y Index]
	bit $1E27.w,X		; 3C 27 1E ; Test bits $1E27.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cmp ($8E.b,S),Y		; D3 8E ; Compare accumulator (stack relative indirect indexed) ($8E.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	dec $0F.b,X		; D6 0F ; Decrement memory $0F.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc $83070F.l,X		; FF 0F 07 83 ; Subtract with carry (long,X) $83070F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($61.b,X)		; C1 61 ; Compare accumulator ($61.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	and ($47.b,X)		; 21 47 ; Logical AND ($47.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $80015F.l,X		; 9F 5F 01 80 ; Store accumulator (long,X) $80015F.l,X [Reads: Accumulator, X Index]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor $80.b,S		; 43 80 ; Exclusive OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $00FF01.l,X		; 7F 01 FF 00 ; Add long $00FF01.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $20.b,S		; 23 20 ; AND accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $FF0300.l		; 22 00 03 FF ; Jump to subroutine long $FF0300.l [Writes: Stack Pointer] [Flow: call]
	sbc $238181.l,X		; FF 81 81 23 ; Subtract with carry (long,X) $238181.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($1A.b),Y		; B1 1A ; Load accumulator ($1A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($81.b,X)		; 81 81 ; Store accumulator ($81.b,X) [Reads: Accumulator, X Index, Direct Page]
	bit #$8189.w		; 89 89 81 ; Test bits #$8189.w with accumulator [Reads: Accumulator] [Flags: Z]
	sta ($FF.b,X)		; 81 FF ; Store accumulator ($FF.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $4E7E00.l,X		; FF 00 7E 4E ; Subtract with carry (long,X) $4E7E00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $767E.w		; 4E 7E 76 ; Logical shift right $767E.w [Flags: ZNC]
	ror $FF00.w,X		; 7E 00 FF ; Rotate right $FF00.w,X [Reads: X Index] [Flags: ZNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($827C.w,X)		; 7C 7C 82 ; Jump indirect indexed to ($827C.w,X) [Reads: X Index] [Flow: jump]
	dec $39.b		; C6 39 ; Decrement $39.b [Reads: Direct Page] [Flags: ZN]
	sta $7C.b,S		; 83 7C ; Store accumulator (stack relative) $7C.b,S [Reads: Accumulator, Stack Pointer]
	sbc $03FB84.l,X		; FF 84 FB 03 ; Subtract with carry (long,X) $03FB84.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $01.b,S		; 83 01 ; Store accumulator (stack relative) $01.b,S [Reads: Accumulator, Stack Pointer]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $01		; 42 01 ; Reserved instruction
	sty $93.b		; 84 93 ; Store Y register to $93.b [Reads: Y Index]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $170024.l,X		; FF 24 00 17 ; Subtract with carry (long,X) $170024.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $0CDD.w		; 1C DD 0C ; Test and reset bits $0CDD.w [Reads: Accumulator] [Flags: Z]
	sta $6060.w		; 8D 60 60 ; Store accumulator to $6060.w [Reads: Accumulator]
	adc ($76.b)		; 72 76 ; Add with carry (indirect) ($76.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ror $0E08.w		; 6E 08 0E ; Rotate right $0E08.w [Flags: ZNC]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $22DD.w		; 1C DD 22 ; Test and reset bits $22DD.w [Reads: Accumulator] [Flags: Z]
	adc ($9F.b)		; 72 9F ; Add with carry (indirect) ($9F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit #$F191.w		; 89 91 F1 ; Test bits #$F191.w with accumulator [Reads: Accumulator] [Flags: Z]
	and $002722.l,X		; 3F 22 27 00 ; AND accumulator with memory (long,X) $002722.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0028E0.l,X		; FF E0 28 00 ; Subtract with carry (long,X) $0028E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$18.b],Y		; 37 18 ; AND accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc [$08.b]		; 67 08 ; Add with carry (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $282F88.l		; 8F 88 2F 28 ; Store accumulator (long) $282F88.l [Reads: Accumulator]
	adc $082F48.l		; 6F 48 2F 08 ; Add with carry (long) $082F48.l [Writes: Accumulator] [Flags: ZVNC]
	eor [$18.b],Y		; 57 18 ; Exclusive OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$F8.b],Y		; F7 F8 ; Subtract with carry (long indexed) [$F8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$F0.b		; E0 F0 ; Compare #$F0.b with X register [Reads: X Index] [Flags: ZNC]
	.db $70, $D0		; 70 D0 ; Branch if overflow set to $70, $D0 [Flow: branch]
	.db $B0, $F0		; B0 F0 ; Branch if carry set to $B0, $F0 [Flow: branch]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	stz $89.b,X		; 74 89 ; Store zero to $89.b,X [Reads: X Index]
	ror $89.b,X		; 76 89 ; Rotate right $89.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc [$88.b],Y		; 77 88 ; Add with carry (long indexed) [$88.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $8D.b,X		; 76 8D ; Rotate right $8D.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc ($8E.b,S),Y		; 73 8E ; Add with carry (stack relative indirect indexed) ($8E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($8D.b),Y		; 71 8D ; Add with carry ($8D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($8D.b)		; 72 8D ; Add with carry (indirect) ($8D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($22.b,S),Y		; 73 22 ; Add with carry (stack relative indirect indexed) ($22.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $CF		; 30 CF ; Branch if minus to $30, $CF [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$3F.b]		; 07 3F ; OR accumulator with memory (long) [$3F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy #$4F.b		; C0 4F ; Compare #$4F.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $70, $30		; 70 30 ; Branch if overflow set to $70, $30 [Flow: branch]
	and $608080.l,X		; 3F 80 80 60 ; AND accumulator with memory (long,X) $608080.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpx #$9F.b		; E0 9F ; Compare #$9F.b with X register [Reads: X Index] [Flags: ZNC]
	adc $030022.l,X		; 7F 22 00 03 ; Add long $030022.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	adc $00221F.l,X		; 7F 1F 22 00 ; Add long $00221F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $43.b		; 04 43 ; Test and set bits $43.b [Reads: Accumulator] [Flags: Z]
	sbc $FF2300.l,X		; FF 00 23 FF ; Subtract with carry (long,X) $FF2300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $0F0022.l,X		; FF 22 00 0F ; Subtract with carry (long,X) $0F0022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$BB.b],Y		; D7 BB ; Compare accumulator (long indexed) [$BB.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	lda [$5B.b],Y		; B7 5B ; Load accumulator (long indexed) [$5B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $EB9FEB.l,X		; 1F EB 9F EB ; Logical OR long $EB9FEB.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $B36F73.l		; CF 73 6F B3 ; Compare accumulator (long) $B36F73.l [Reads: Accumulator] [Flags: ZNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda [$B3.b],Y		; B7 B3 ; Load accumulator (long indexed) [$B3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $030325.l		; 4F 25 03 03 ; Exclusive OR accumulator with memory (long) $030325.l [Writes: Accumulator] [Flags: ZN]
	ora [$4F.b]		; 07 4F ; OR accumulator with memory (long) [$4F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx $DC.b		; E4 DC ; Compare $DC.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $E7.b,S		; 43 E7 ; Exclusive OR accumulator with stack relative $E7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $DFE804.l,X		; DF 04 E8 DF ; Compare accumulator (long,X) $DFE804.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	.db $F0, $DF		; F0 DF ; Branch if equal to $F0, $DF [Flow: branch]
	cpx #$84.b		; E0 84 ; Compare #$84.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $C30001.l,X		; FF 01 00 C3 ; Subtract with carry (long,X) $C30001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $C0.b		; 25 C0 ; Logical AND $C0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($3F.b,X)		; 01 3F ; Logical OR ($3F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $2F3043.l,X		; 3F 43 30 2F ; AND accumulator with memory (long,X) $2F3043.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$28.b]		; 07 28 ; OR accumulator with memory (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$24.b],Y		; 37 24 ; AND accumulator with memory (long indexed) [$24.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and [$38.b]		; 27 38 ; AND accumulator with memory (long) [$38.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $C025FF.l,X		; FF FF 25 C0 ; Subtract with carry (long,X) $C025FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $0C.b,S		; 23 0C ; AND accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $10, $FF		; 10 FF ; Branch if plus to $10, $FF [Flow: branch]
	sbc $817B84.l,X		; FF 84 7B 81 ; Subtract with carry (long,X) $817B84.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $FE01.w,X		; 7E 01 FE ; Rotate right $FE01.w,X [Reads: X Index] [Flags: ZNC]
	sta $7C.b,S		; 83 7C ; Store accumulator (stack relative) $7C.b,S [Reads: Accumulator, Stack Pointer]
	jsr ($F303.w,X)		; FC 03 F3 ; Jump to subroutine indirect indexed ($F303.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc ($00.b,S),Y		; F3 00 ; Subtract with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	jsl $671000.l		; 22 00 10 67 ; Jump to subroutine long $671000.l [Writes: Stack Pointer] [Flow: call]
	cpx $3D.b		; E4 3D ; Compare $3D.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	inc $F00F.w,X		; FE 0F F0 ; Increment memory $F00F.w,X [Reads: X Index] [Flags: ZN]
	.db $10, $EF		; 10 EF ; Branch if plus to $10, $EF [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	.db $50, $B0		; 50 B0 ; Branch if overflow clear to $50, $B0 [Flow: branch]
	sta [$78.b]		; 87 78 ; Store accumulator (long) [$78.b] [Reads: Accumulator, Direct Page]
	cmp ($31.b,X)		; C1 31 ; Compare accumulator ($31.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsl $071300.l		; 22 00 13 07 ; Jump to subroutine long $071300.l [Writes: Stack Pointer] [Flow: call]
	ora $7A0E00.l		; 0F 00 0E 7A ; OR accumulator with memory (long) $7A0E00.l [Writes: Accumulator] [Flags: ZN]
	inc $9A.b,X		; F6 9A ; Increment memory $9A.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ror $EA.b,X		; 76 EA ; Rotate right $EA.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $3A.b,X		; 16 3A ; Arithmetic shift left $3A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dec $5A.b		; C6 5A ; Decrement $5A.b [Reads: Direct Page] [Flags: ZN]
	ror $2B.b		; 66 2B ; Rotate right $2B.b [Reads: Direct Page] [Flags: ZNC]
	rol $5B.b,X		; 36 5B ; Rotate left $5B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dec $BA.b,X		; D6 BA ; Decrement memory $BA.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ror $23.b,X		; 76 23 ; Rotate right $23.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $81.b		; 25 81 ; Logical AND $81.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($21.b,X)		; C1 21 ; Compare accumulator ($21.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr ($F1FE.w,X)		; FC FE F1 ; Jump to subroutine indirect indexed ($F1FE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $F2E7.w,Y		; F9 E7 F2 ; Subtract with carry $F2E7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $9CE5.w		; CE E5 9C ; Decrement $9CE5.w [Flags: ZN]
	cmp #$D3B8.w		; C9 B8 D3 ; Compare #$D3B8.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $30, $95		; 30 95 ; Branch if minus to $30, $95 [Flow: branch]
	.db $70, $FC		; 70 FC ; Branch if overflow set to $70, $FC [Flow: branch]
	.db $F0, $E0		; F0 E0 ; Branch if equal to $F0, $E0 [Flow: branch]
	cmp ($82.b,X)		; C1 82 ; Compare accumulator ($82.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	stx $0C.b		; 86 0C ; Store X register to $0C.b [Reads: X Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc ($F2.b)		; F2 F2 ; Subtract with carry (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	jsr ($FDFC.w,X)		; FC FC FD ; Jump to subroutine indirect indexed ($FDFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FF26.w,X		; FD 26 FF ; Subtract with carry $FF26.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $009F00.l		; 0F 00 9F 00 ; OR accumulator with memory (long) $009F00.l [Writes: Accumulator] [Flags: ZN]
	sbc $40B700.l,X		; FF 00 B7 40 ; Subtract with carry (long,X) $40B700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$80.b]		; 67 80 ; Add with carry (long) [$80.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $C7.b,S		; 43 C7 ; Exclusive OR accumulator with stack relative $C7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $7FBF9F.l		; 0F 9F BF 7F ; OR accumulator with memory (long) $7FBF9F.l [Writes: Accumulator] [Flags: ZN]
	jsl $0001FF.l		; 22 FF 01 00 ; Jump to subroutine long $0001FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $26002D.l,X		; FF 2D 00 26 ; Subtract with carry (long,X) $26002D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FC21E0.l,X		; FF E0 21 FC ; Subtract with carry (long,X) $FC21E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $6DAC.w,X		; 3D AC 6D ; AND accumulator with memory $6DAC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ldy #$52.b		; A0 52 ; Load #$52.b into Y register [Writes: Y Index] [Flags: ZN]
	ldx $40.b,Y		; B6 40 ; Load X register $40.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	ldx $EE28.w		; AE 28 EE ; Load $EE28.w into X register [Writes: X Index] [Flags: ZN]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: ZNC]
	jsr ($023D.w,X)		; FC 3D 02 ; Jump to subroutine indirect indexed ($023D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora ($1F.b)		; 12 1F ; OR accumulator with memory (indirect) ($1F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$1111.w		; 09 11 11 ; Logical OR #$1111.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $00FF02.l,X		; 1F 02 FF 00 ; Logical OR long $00FF02.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sbc $CD4A.w,X		; FD 4A CD ; Subtract with carry $CD4A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $79.b,Y		; B6 79 ; Load X register $79.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$84.b]		; 07 84 ; OR accumulator with memory (long) [$84.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($02.b)		; 92 02 ; Store accumulator (indirect) ($02.b) [Reads: Accumulator, Direct Page]
	jsl $300000.l		; 22 00 00 30 ; Jump to subroutine long $300000.l [Writes: Stack Pointer] [Flow: call]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sbc $23C443.l,X		; FF 43 C4 23 ; Subtract with carry (long,X) $23C443.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($C7.b,X)		; 01 C7 ; Logical OR ($C7.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $43.b		; 24 43 ; Test bits $43.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cmp $26.b		; C5 26 ; Compare $26.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora ($C6.b,X)		; 01 C6 ; Logical OR ($C6.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $43.b		; 25 43 ; Logical AND $43.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $23.b		; C4 23 ; Compare $23.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	ora ($1B.b,X)		; 01 1B ; Logical OR ($1B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $191618.l		; 22 18 16 19 ; Jump to subroutine long $191618.l [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $C33CF0.l		; 0F F0 3C C3 ; OR accumulator with memory (long) $C33CF0.l [Writes: Accumulator] [Flags: ZN]
	sbc ($0F.b),Y		; F1 0F ; Subtract with carry ($0F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$3F.b]		; C7 3F ; Compare accumulator (long) [$3F.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	trb $70FF.w		; 1C FF 70 ; Test and reset bits $70FF.w [Reads: Accumulator] [Flags: Z]
	sbc $03FFC0.l,X		; FF C0 FF 03 ; Subtract with carry (long,X) $03FFC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($C3F0.w,X)		; FC F0 C3 ; Jump to subroutine indirect indexed ($C3F0.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $FF223F.l		; 0F 3F 22 FF ; OR accumulator with memory (long) $FF223F.l [Writes: Accumulator] [Flags: ZN]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($0C.b,S),Y		; F3 0C ; Subtract with carry (stack relative indirect indexed) ($0C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($1E.b,X)		; E1 1E ; Subtract with carry ($1E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $3C.b,S		; C3 3C ; Compare accumulator (stack relative) $3C.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sta [$78.b]		; 87 78 ; Store accumulator (long) [$78.b] [Reads: Accumulator, Direct Page]
	ora $E01FF0.l		; 0F F0 1F E0 ; OR accumulator with memory (long) $E01FF0.l [Writes: Accumulator] [Flags: ZN]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	inc $FF24.w,X		; FE 24 FF ; Increment memory $FF24.w,X [Reads: X Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp ($21.b,X)		; C1 21 ; Compare accumulator ($21.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sep #$03		; E2 03 ; Set processor status bits #$03 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sbc $06.b		; E5 06 ; Subtract $06.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tsb $18F7.w		; 0C F7 18 ; Test and set bits $18F7.w [Reads: Accumulator] [Flags: Z]
	sbc $FF4310.l		; EF 10 43 FF ; Subtract with carry (long) $FF4310.l [Writes: Accumulator] [Flags: ZVNC]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $181C.w,X		; 1E 1C 18 ; Arithmetic shift left $181C.w,X [Reads: X Index] [Flags: ZNC]
	.db $10, $80		; 10 80 ; Branch if plus to $10, $80 [Flow: branch]
	cpy #$C1.b		; C0 C1 ; Compare #$C1.b with Y register [Reads: Y Index] [Flags: ZNC]
	cmp [$E7.b]		; C7 E7 ; Compare accumulator (long) [$E7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	eor $E05FE3.l,X		; 5F E3 5F E0 ; Exclusive OR accumulator with memory (long,X) $E05FE3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $DC4FF0.l,X		; 5F F0 4F DC ; Exclusive OR accumulator with memory (long,X) $DC4FF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $A7.b,S		; 63 A7 ; Add with carry (stack relative) $A7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	sbc $00247F.l,X		; FF 7F 24 00 ; Subtract with carry (long,X) $00247F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $7F40.w		; 0C 40 7F ; Test and set bits $7F40.w [Reads: Accumulator] [Flags: Z]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $F9.b		; 04 F9 ; Test and set bits $F9.b [Reads: Accumulator] [Flags: Z]
	asl $F8.b		; 06 F8 ; Arithmetic shift left $F8.b [Reads: Direct Page] [Flags: ZNC]
	ora [$B9.b]		; 07 B9 ; OR accumulator with memory (long) [$B9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $43.b		; 46 43 ; Logical shift right $43.b [Reads: Direct Page] [Flags: ZNC]
	sta ($7E.b,X)		; 81 7E ; Store accumulator ($7E.b,X) [Reads: Accumulator, X Index, Direct Page]
	ora ($B8.b,X)		; 01 B8 ; Logical OR ($B8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor [$27.b]		; 47 27 ; Exclusive OR accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $13ED10.l		; EF 10 ED 13 ; Subtract with carry (long) $13ED10.l [Writes: Accumulator] [Flags: ZVNC]
	cpy $0C33.w		; CC 33 0C ; Compare $0C33.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc ($C6.b,S),Y		; F3 C6 ; Subtract with carry (stack relative indirect indexed) ($C6.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $DC6B.w,Y		; 39 6B DC ; AND accumulator with memory $DC6B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $EE.b,X		; 35 EE ; Logical AND $EE.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$6F.b],Y		; 97 6F ; Store accumulator (long indexed) [$6F.b],Y [Reads: Accumulator, Direct Page, Y Index]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $11.b,S		; 03 11 ; OR accumulator with stack relative $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($C0.b,X)		; 01 C0 ; Logical OR ($C0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpx #$60.b		; E0 60 ; Compare #$60.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $1FE0E0.l,X		; FF E0 E0 1F ; Subtract with carry (long,X) $1FE0E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $FDFF.w,X		; 1E FF FD ; Arithmetic shift left $FDFF.w,X [Reads: X Index] [Flags: ZNC]
	sbc $3FFFFE.l,X		; FF FE FF 3F ; Subtract with carry (long,X) $3FFFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $22FF7F.l,X		; 7F 7F FF 22 ; Add long $22FF7F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$23.b		; E0 23 ; Compare #$23.b with X register [Reads: X Index] [Flags: ZNC]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	ora $D11FE0.l,X		; 1F E0 1F D1 ; Logical OR long $D11FE0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($A7.b),Y		; 31 A7 ; AND accumulator with memory ($A7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $FF5FDB.l		; 6F DB 5F FF ; Add with carry (long) $FF5FDB.l [Writes: Accumulator] [Flags: ZVNC]
	trb $B845.w		; 1C 45 B8 ; Test and reset bits $B845.w [Reads: Accumulator] [Flags: Z]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	asl $2010.w		; 0E 10 20 ; Arithmetic shift left $2010.w [Flags: ZNC]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $09.b		; 04 09 ; Test and set bits $09.b [Reads: Accumulator] [Flags: Z]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	ror $B6FF.w		; 6E FF B6 ; Rotate right $B6FF.w [Flags: ZNC]
	sbc $4403FE.l,X		; FF FE 03 44 ; Subtract with carry (long,X) $4403FE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $FB.b		; 06 FB ; Arithmetic shift left $FB.b [Reads: Direct Page] [Flags: ZNC]
	cop $BB.b		; 02 BB ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EE.b		; 00 EE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $8F.b,S		; 43 8F ; Exclusive OR accumulator with stack relative $8F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $70, $43		; 70 43 ; Branch if overflow set to $70, $43 [Flow: branch]
	sta $FF0110.l,X		; 9F 10 01 FF ; Store accumulator (long,X) $FF0110.l,X [Reads: Accumulator, X Index]
	.db $10, $45		; 10 45 ; Branch if plus to $10, $45 [Flow: branch]
	lda $000350.l,X		; BF 50 03 00 ; Load long $000350.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$C0.b],Y		; 17 C0 ; OR accumulator with memory (long indexed) [$C0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $846F8D.l,X		; 3F 8D 6F 84 ; AND accumulator with memory (long,X) $846F8D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $FC1C9B.l		; 4F 9B 1C FC ; Exclusive OR accumulator with memory (long) $FC1C9B.l [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	clv		; B8 ; Clear overflow flag [Flags: V]
	eor $B95EB8.l,X		; 5F B8 5E B9 ; Exclusive OR accumulator with memory (long,X) $B95EB8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1000.w,Y		; 59 00 10 ; Exclusive OR accumulator with memory $1000.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $60		; 30 60 ; Branch if minus to $30, $60 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor $1F.b,S		; 43 1F ; Exclusive OR accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $7F4720.l,X		; FF 20 47 7F ; Subtract with carry (long,X) $7F4720.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	sbc $0027A0.l,X		; FF A0 27 00 ; Subtract with carry (long,X) $0027A0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $A03FC0.l		; 0F C0 3F A0 ; OR accumulator with memory (long) $A03FC0.l [Writes: Accumulator] [Flags: ZN]
	adc $9E4DC2.l		; 6F C2 4D 9E ; Add with carry (long) $9E4DC2.l [Writes: Accumulator] [Flags: ZVNC]
	ora $19FE.w,Y		; 19 FE 19 ; OR accumulator with memory $19FE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $BE59.w,Y		; BE 59 BE ; Load X register $BE59.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	ldx $835F.w,Y		; BE 5F 83 ; Load X register $835F.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($E4.b,X)		; 01 E4 ; Logical OR ($E4.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($00.b,S),Y		; 33 00 ; AND accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $C4.b,S		; 43 C4 ; Exclusive OR accumulator with stack relative $C4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $83.b,S		; 23 83 ; AND accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $C6.b		; 00 C6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $C7,$27		; 44 27 C7 ; Move block positive $C7,$27 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $D3.b,S		; 03 D3 ; OR accumulator with stack relative $D3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($1B.b,S),Y		; 33 1B ; AND accumulator (stack relative indirect indexed) ($1B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	bit $18.b		; 24 18 ; Test bits $18.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: ZNC]
	sbc $13F703.l		; EF 03 F7 13 ; Subtract with carry (long) $13F703.l [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor $FD.b,S		; 43 FD ; Exclusive OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0F.b		; 05 0F ; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $F2FF02.l,X		; FF 02 FF F2 ; Subtract with carry (long,X) $F2FF02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0A1208.l		; 0F 08 12 0A ; OR accumulator with memory (long) $0A1208.l [Writes: Accumulator] [Flags: ZN]
	stx $C2.b		; 86 C2 ; Store X register to $C2.b [Reads: X Index]
	cmp $02.b,S		; C3 02 ; Compare accumulator (stack relative) $02.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $7F43C0.l,X		; 3F C0 43 7F ; AND accumulator with memory (long,X) $7F43C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $E0		; 80 E0 ; Branch always to $80, $E0 [Flow: branch]
	bit $BE.b		; 24 BE ; Test bits $BE.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $EC.b,S		; 43 EC ; Exclusive OR accumulator with stack relative $EC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $1FF6.w		; 2E F6 1F ; Rotate left $1FF6.w [Flags: ZNC]
	sbc $FFFF00.l,X		; FF 00 FF FF ; Subtract with carry (long,X) $FFFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $215D.w,Y		; BE 5D 21 ; Load X register $215D.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sta $80.b,X		; 95 80 ; Store accumulator to $80.b,X [Reads: Accumulator, X Index]
	.db $80, $BF		; 80 BF ; Branch always to $80, $BF [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sta $C471.w		; 8D 71 C4 ; Store accumulator to $C471.w [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $DB.b		; 24 DB ; Test bits $DB.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	stx $E9.b,Y		; 96 E9 ; Store X register $E9.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	cmp $F8E7F0.l		; CF F0 E7 F8 ; Compare accumulator (long) $F8E7F0.l [Reads: Accumulator] [Flags: ZNC]
	adc $FA.b		; 65 FA ; Add $FA.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $24.b,S		; 03 24 ; OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $33CC00.l,X		; FF 00 CC 33 ; Subtract with carry (long,X) $33CC00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc #$DA27.w		; E9 27 DA ; Subtract #$DA27.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	rol $EB.b,X		; 36 EB ; Rotate left $EB.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora [$B5.b],Y		; 17 B5 ; OR accumulator with memory (long indexed) [$B5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $5B.b,X		; B5 5B ; Load $5B.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp $DE25.w,X		; DD 25 DE ; Compare accumulator $DE25.w,X [Reads: X Index] [Flags: ZNC]
	sbc ($0E.b),Y		; F1 0E ; Subtract with carry ($0E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $BE.b,S		; 83 BE ; Store accumulator (stack relative) $BE.b,S [Reads: Accumulator, Stack Pointer]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	adc $1C1880.l,X		; 7F 80 18 1C ; Add long $1C1880.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $230E.w,X		; 1E 0E 23 ; Arithmetic shift left $230E.w,X [Reads: X Index] [Flags: ZNC]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ldy $DBB5.w,X		; BC B5 DB ; Load Y register $DBB5.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sbc [$A8.b],Y		; F7 A8 ; Subtract with carry (long indexed) [$A8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$AF.b],Y		; 77 AF ; Add with carry (long indexed) [$AF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $FF		; 70 FF ; Branch if overflow set to $70, $FF [Flow: branch]
	sta $BE.b,S		; 83 BE ; Store accumulator (stack relative) $BE.b,S [Reads: Accumulator, Stack Pointer]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$23.b]		; 07 23 ; OR accumulator with memory (long) [$23.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	ora $7F601F.l,X		; 1F 1F 60 7F ; Logical OR long $7F601F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $44		; 80 44 ; Branch always to $80, $44 [Flow: branch]
	sbc $0F0000.l,X		; FF 00 00 0F ; Subtract with carry (long,X) $0F0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $AF.b,S		; 83 AF ; Store accumulator (stack relative) $AF.b,S [Reads: Accumulator, Stack Pointer]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpx #$80.b		; E0 80 ; Compare #$80.b with X register [Reads: X Index] [Flags: ZNC]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	.db $10, $B8		; 10 B8 ; Branch if plus to $10, $B8 [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ldx $BC5F.w,Y		; BE 5F BC ; Load X register $BC5F.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	eor $BA5CBB.l,X		; 5F BB 5C BA ; Exclusive OR accumulator with memory (long,X) $BA5CBB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $1DFA.w,X		; 5D FA 1D ; Exclusive OR accumulator with memory $1DFA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $3FC03F.l,X		; DF 3F C0 3F ; Compare accumulator (long,X) $3FC03F.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	ora [$26.b]		; 07 26 ; OR accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $5B.b		; 46 5B ; Logical shift right $5B.b [Reads: Direct Page] [Flags: ZNC]
	inc $16F3.w,X		; FE F3 16 ; Increment memory $16F3.w,X [Reads: X Index] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ldx $5B.b		; A6 5B ; Load $5B.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lsr $BB.b		; 46 BB ; Logical shift right $BB.b [Reads: Direct Page] [Flags: ZNC]
	asl $FB.b		; 06 FB ; Arithmetic shift left $FB.b [Reads: Direct Page] [Flags: ZNC]
	inc $01FF.w,X		; FE FF 01 ; Increment memory $01FF.w,X [Reads: X Index] [Flags: ZN]
	inc $26A0.w,X		; FE A0 26 ; Increment memory $26A0.w,X [Reads: X Index] [Flags: ZN]
	brk $49.b		; 00 49 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $FA0550.l,X		; BF 50 05 FA ; Load long $FA0550.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $D8.b,X		; 15 D8 ; OR accumulator with memory $D8.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$CF.b],Y		; 37 CF ; AND accumulator with memory (long indexed) [$CF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$27.b],Y		; 37 27 ; AND accumulator with memory (long indexed) [$27.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $024384.l,X		; BF 84 43 02 ; Load long $024384.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $BC.b,S		; 43 BC ; Exclusive OR accumulator with stack relative $BC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	ora $FB.b		; 05 FB ; Logical OR $FB.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $C63EDD.l,X		; 1F DD 3E C6 ; Logical OR long $C63EDD.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $0027.w,Y		; 39 27 00 ; AND accumulator with memory $0027.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $7F.b,S		; 03 7F ; OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: ZN]
	jsr $7F43.w		; 20 43 7F ; Jump to subroutine at $7F43.w [Writes: Stack Pointer] [Flow: call]
	ldy #$07.b		; A0 07 ; Load #$07.b into Y register [Writes: Y Index] [Flags: ZN]
	cmp $956AE0.l,X		; DF E0 6A 95 ; Compare accumulator (long,X) $956AE0.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	and $0027FF.l,X		; 3F FF 27 00 ; AND accumulator with memory (long,X) $0027FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $B85FBC.l		; 0F BC 5F B8 ; OR accumulator with memory (long) $B85FBC.l [Writes: Accumulator] [Flags: ZN]
	eor $BE5DBA.l,X		; 5F BA 5D BE ; Exclusive OR accumulator with memory (long,X) $BE5DBA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $5BBC.w,Y		; 59 BC 5B ; Exclusive OR accumulator with memory $5BBC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $DA1E.w,X		; FD 1E DA ; Subtract with carry $DA1E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $3BC4.w,X		; 3D C4 3B ; AND accumulator with memory $3BC4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpx $37.b		; E4 37 ; Compare $37.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$C439.w		; C9 39 C4 ; Compare #$C439.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	bit $C343.w,X		; 3C 43 C3 ; Test bits $C343.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $3FC243.l,X		; 3F 43 C2 3F ; AND accumulator with memory (long,X) $3FC243.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $E2.b		; 05 E2 ; Logical OR $E2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $060FF0.l,X		; 1F F0 0F 06 ; Logical OR long $060FF0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $25.b,S		; 03 25 ; OR accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $308F.w		; 8C 8F 30 ; Store Y register to $308F.w [Reads: Y Index]
	and $00FFC0.l,X		; 3F C0 FF 00 ; AND accumulator with memory (long,X) $00FFC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $07FE01.l,X		; FF 01 FE 07 ; Subtract with carry (long,X) $07FE01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora $807FE0.l,X		; 1F E0 7F 80 ; Logical OR long $807FE0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $70, $C0		; 70 C0 ; Branch if overflow set to $70, $C0 [Flow: branch]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$20.b]		; 87 20 ; Store accumulator (long) [$20.b] [Reads: Accumulator, Direct Page]
	ora $46.b,S		; 03 46 ; OR accumulator with stack relative $46.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $002800.l,X		; FF 00 28 00 ; Subtract with carry (long,X) $002800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $B8.b,S		; 43 B8 ; Exclusive OR accumulator with stack relative $B8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $7FBC0B.l,X		; 7F 0B BC 7F ; Add long $7FBC0B.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $77.b,Y		; B6 77 ; Load X register $77.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	sta ($73.b,S),Y		; 93 73 ; Store accumulator (stack relative indirect indexed) ($73.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	bit #$8479.w		; 89 79 84 ; Test bits #$8479.w with accumulator [Reads: Accumulator] [Flags: Z]
	jmp ($7E82.w,X)		; 7C 82 7E ; Jump indirect indexed to ($7E82.w,X) [Reads: X Index] [Flow: jump]
	jsl $22E000.l		; 22 00 E0 22 ; Jump to subroutine long $22E000.l [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $0306.w		; 0C 06 03 ; Test and set bits $0306.w [Reads: Accumulator] [Flags: Z]
	ora ($0F.b,X)		; 01 0F ; Logical OR ($0F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $38FD1D.l,X		; FF 1D FD 38 ; Subtract with carry (long,X) $38FD1D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F372.w,Y		; F9 72 F3 ; Subtract with carry $F372.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx $E7.b		; E4 E7 ; Compare $E7.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp $201F10.l		; CF 10 1F 20 ; Compare accumulator (long) $201F10.l [Reads: Accumulator] [Flags: ZNC]
	and $060200.l,X		; 3F 00 02 06 ; AND accumulator with memory (long,X) $060200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $3018.w		; 0C 18 30 ; Test and set bits $3018.w [Reads: Accumulator] [Flags: Z]
	cpx #$C0.b		; E0 C0 ; Compare #$C0.b with X register [Reads: X Index] [Flags: ZNC]
	eor $B8D7B0.l		; 4F B0 D7 B8 ; Exclusive OR accumulator with memory (long) $B8D7B0.l [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	lda $B8D843.l,X		; BF 43 D8 B8 ; Load long $B8D843.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $C8.b		; 05 C8 ; Logical OR $C8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	stz $DC.b		; 64 DC ; Store zero to $DC.b
	lda ($6E.b)		; B2 6E ; Load accumulator (indirect) ($6E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $072200.l		; 22 00 22 07 ; Jump to subroutine long $072200.l [Writes: Stack Pointer] [Flow: call]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($F7.b,X)		; 01 F7 ; Logical OR ($F7.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc [$18.b]		; E7 18 ; Subtract with carry (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $EF.b,S		; 43 EF ; Exclusive OR accumulator with stack relative $EF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $10, $45		; 10 45 ; Branch if plus to $10, $45 [Flow: branch]
	sbc $0F0100.l,X		; FF 00 01 0F ; Subtract with carry (long,X) $0F0100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0F7F02.l,X		; FF 02 7F 0F ; Subtract with carry (long,X) $0F7F02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$4F.b],Y		; F7 4F ; Subtract with carry (long indexed) [$4F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF2800.l,X		; FF 00 28 FF ; Subtract with carry (long,X) $FF2800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$30.b		; E0 30 ; Compare #$30.b with X register [Reads: X Index] [Flags: ZNC]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0BF4.w,X		; 1E F4 0B ; Arithmetic shift left $0BF4.w,X [Reads: X Index] [Flags: ZNC]
	nop		; EA ; No operation
	ora $C5.b,X		; 15 C5 ; OR accumulator with memory $C5.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $7E00.w,X		; 7D 00 7E ; Add $7E00.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $120401.l,X		; 3F 01 04 12 ; AND accumulator with memory (long,X) $120401.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $E37C.w,Y		; 39 7C E3 ; AND accumulator with memory $E37C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	trb $38C7.w		; 1C C7 38 ; Test and reset bits $38C7.w [Reads: Accumulator] [Flags: Z]
	dec $FE30.w		; CE 30 FE ; Decrement $FE30.w [Flags: ZN]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit #$C917.w		; 89 17 C9 ; Test bits #$C917.w with accumulator [Reads: Accumulator] [Flags: Z]
	sta [$69.b]		; 87 69 ; Store accumulator (long) [$69.b] [Reads: Accumulator, Direct Page]
	trb $3338.w		; 1C 38 33 ; Test and reset bits $3338.w [Reads: Accumulator] [Flags: Z]
	cmp [$E6.b]		; C7 E6 ; Compare accumulator (long) [$E6.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	adc $35.b,X		; 75 35 ; Add $35.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $FF.b,X		; 95 FF ; Store accumulator to $FF.b,X [Reads: Accumulator, X Index]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $3C.b,S		; C3 3C ; Compare accumulator (stack relative) $3C.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	eor [$FF.b]		; 47 FF ; Exclusive OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $22.b,S		; C3 22 ; Compare accumulator (stack relative) $22.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	lda $C307.w,X		; BD 07 C3 ; Load $C307.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $8142.w,X		; 7E 42 81 ; Rotate right $8142.w,X [Reads: X Index] [Flags: ZNC]
	cmp $48CF40.l		; CF 40 CF 48 ; Compare accumulator (long) $48CF40.l [Reads: Accumulator] [Flags: ZNC]
	eor $E7.b		; 45 E7 ; Exclusive OR $E7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($CF.b,X)		; 01 CF ; Logical OR ($CF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $CF.b,S		; 43 CF ; Exclusive OR accumulator with stack relative $CF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora ($37.b,X)		; 01 37 ; Logical OR ($37.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($22.b,S),Y		; 33 22 ; AND accumulator (stack relative indirect indexed) ($22.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $33.b,S		; 03 33 ; OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and [$37.b],Y		; 37 37 ; AND accumulator with memory (long indexed) [$37.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $43.b,S		; 03 43 ; OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor #$0607.w		; 49 07 06 ; Exclusive OR #$0607.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $06.b		; 26 06 ; Rotate left $06.b [Reads: Direct Page] [Flags: ZNC]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $47.b		; 00 47 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($3E.b,X)		; 41 3E ; Exclusive OR accumulator with memory ($3E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $7B.b		; 84 7B ; Store Y register to $7B.b [Reads: Y Index]
	ora #$437F.w		; 09 7F 43 ; Logical OR #$437F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $9F7D5D.l		; 4F 5D 7D 9F ; Exclusive OR accumulator with memory (long) $9F7D5D.l [Writes: Accumulator] [Flags: ZN]
	sta $7EBF.w,X		; 9D BF 7E ; Store accumulator to $7EBF.w,X [Reads: Accumulator, X Index]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $3C		; 42 3C ; Reserved instruction
	ora $7E.b		; 05 7E ; Logical OR $7E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $2143.w,X		; 1E 43 21 ; Arithmetic shift left $2143.w,X [Reads: X Index] [Flags: ZNC]
	dec $7E07.w,X		; DE 07 7E ; Decrement memory $7E07.w,X [Reads: X Index] [Flags: ZN]
	adc ($7A.b)		; 72 7A ; Add with carry (indirect) ($7A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $E101.w,X		; 7E 01 E1 ; Rotate right $E101.w,X [Reads: X Index] [Flags: ZNC]
	sbc #$37FD.w		; E9 FD 37 ; Subtract #$37FD.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $9F46.w,Y		; B9 46 9F ; Load $9F46.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $788770.l		; 8F 70 87 78 ; Store accumulator (long) $788770.l [Reads: Accumulator]
	sta $7C.b,S		; 83 7C ; Store accumulator (stack relative) $7C.b,S [Reads: Accumulator, Stack Pointer]
	.db $80, $44		; 80 44 ; Branch always to $80, $44 [Flow: branch]
	adc $002782.l,X		; 7F 82 27 00 ; Add long $002782.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FD01FE.l		; 0F FE 01 FD ; OR accumulator with memory (long) $FD01FE.l [Writes: Accumulator] [Flags: ZN]
	ora $FB.b,S		; 03 FB ; OR accumulator with stack relative $FB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$F7.b]		; 07 F7 ; OR accumulator with memory (long) [$F7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $1CEF.w		; 0E EF 1C ; Arithmetic shift left $1CEF.w [Flags: ZNC]
	and $D837D8.l,X		; 3F D8 37 D8 ; AND accumulator with memory (long,X) $D837D8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $DA.b,X		; 35 DA ; Logical AND $DA.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $C301FF.l		; 22 FF 01 C3 ; Jump to subroutine long $C301FF.l [Writes: Stack Pointer] [Flow: call]
	cmp $43.b,S		; C3 43 ; Compare accumulator (stack relative) $43.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc $F68400.l,X		; FF 00 84 F6 ; Subtract with carry (long,X) $F68400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $0000.w,X		; 3C 00 00 ; Test bits $0000.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	lda $7EC3.w,X		; BD C3 7E ; Load $7EC3.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$20.b]		; 87 20 ; Store accumulator (long) [$20.b] [Reads: Accumulator, Direct Page]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cmp $3F.b,S		; C3 3F ; Compare accumulator (stack relative) $3F.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	jsl $2784FF.l		; 22 FF 84 27 ; Jump to subroutine long $2784FF.l [Writes: Stack Pointer] [Flow: call]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$76.b]		; 07 76 ; OR accumulator with memory (long) [$76.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $5CAD.w		; 0E AD 5C ; Arithmetic shift left $5CAD.w [Flags: ZNC]
	sbc $EE5C.w		; ED 5C EE ; Subtract $EE5C.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	lsr $5FEF.w,X		; 5E EF 5F ; Logical shift right $5FEF.w,X [Reads: X Index] [Flags: ZNC]
	jsl $011800.l		; 22 00 18 01 ; Jump to subroutine long $011800.l [Writes: Stack Pointer] [Flow: call]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $B35767.l		; AF 67 57 B3 ; Load long $B35767.l into accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $CC.b,X		; B4 CC ; Load Y register $CC.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp [$17.b]		; C7 17 ; Compare accumulator (long) [$17.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $10, $EF		; 10 EF ; Branch if plus to $10, $EF [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc [$10.b]		; E7 10 ; Subtract with carry (long) [$10.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($07.b)		; 12 07 ; OR accumulator with memory (indirect) ($07.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $7F87FF.l,X		; 3F FF 87 7F ; AND accumulator with memory (long,X) $7F87FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpx #$1F.b		; E0 1F ; Compare #$1F.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $20DF00.l,X		; FF 00 DF 20 ; Subtract with carry (long,X) $20DF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tsb $2407.w		; 0C 07 24 ; Test and set bits $2407.w [Reads: Accumulator] [Flags: Z]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $4301.w,X		; FE 01 43 ; Increment memory $4301.w,X [Reads: X Index] [Flags: ZN]
	jsr ($4303.w,X)		; FC 03 43 ; Jump to subroutine indirect indexed ($4303.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $4306.w,Y		; F9 06 43 ; Subtract with carry $4306.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($0C.b,S),Y		; F3 0C ; Subtract with carry (stack relative indirect indexed) ($0C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $89.b,S		; 03 89 ; OR accumulator with stack relative $89.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $7E81.w,X		; 7E 81 7E ; Rotate right $7E81.w,X [Reads: X Index] [Flags: ZNC]
	sta $F6.b,S		; 83 F6 ; Store accumulator (stack relative) $F6.b,S [Reads: Accumulator, Stack Pointer]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx #$1F.b		; E0 1F ; Compare #$1F.b with X register [Reads: X Index] [Flags: ZNC]
	jsr $43E0.w		; 20 E0 43 ; Jump to subroutine at $43E0.w [Writes: Stack Pointer] [Flow: call]
	ora $20E04F.l		; 0F 4F E0 20 ; OR accumulator with memory (long) $20E04F.l [Writes: Accumulator] [Flags: ZN]
	ror $3C7E.w,X		; 7E 7E 3C ; Rotate right $3C7E.w,X [Reads: X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $46B0B0.l,X		; 1F B0 B0 46 ; Logical OR long $46B0B0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($A2.b),Y		; B1 A2 ; Load accumulator ($A2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $2CD3.w,Y		; 59 D3 2C ; Exclusive OR accumulator with memory $2CD3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$1416.w		; E9 16 14 ; Subtract #$1416.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvn $A2,$CD		; 54 CD A2 ; Move block negative $A2,$CD [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cmp $254DA0.l		; CF A0 4D 25 ; Compare accumulator (long) $254DA0.l [Reads: Accumulator] [Flags: ZNC]
	ora ($09.b)		; 12 09 ; OR accumulator with memory (indirect) ($09.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $83.b		; 04 83 ; Test and set bits $83.b [Reads: Accumulator] [Flags: Z]
	ora ($14.b),Y		; 11 14 ; OR accumulator with memory ($14.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0043.l,X		; FF 43 00 FF ; Subtract with carry (long,X) $FF0043.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $00,$FF		; 44 FF 00 ; Move block positive $00,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $47.b		; 00 47 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $2FE000.l,X		; FF 00 E0 2F ; Subtract with carry (long,X) $2FE000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FE00.w,X		; FE 00 FE ; Increment memory $FE00.w,X [Reads: X Index] [Flags: ZN]
	cop $F9.b		; 02 F9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $F8.b		; 05 F8 ; Logical OR $F8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$F0.b]		; 07 F0 ; OR accumulator with memory (long) [$F0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	jsr ($F9FD.w,X)		; FC FD F9 ; Jump to subroutine indirect indexed ($F9FD.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc ($F0.b)		; F2 F0 ; Subtract with carry (indirect) ($F0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($9E.b),Y		; 91 9E ; Store accumulator ($9E.b),Y [Reads: Accumulator, Direct Page, Y Index]
	cmp $109748.l		; CF 48 97 10 ; Compare accumulator (long) $109748.l [Reads: Accumulator] [Flags: ZNC]
	and [$38.b],Y		; 37 38 ; AND accumulator with memory (long indexed) [$38.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $7C.b,S		; 43 7C ; Exclusive OR accumulator with stack relative $7C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $07.b		; 04 07 ; Test and set bits $07.b [Reads: Accumulator] [Flags: Z]
	cpy #$C6.b		; C0 C6 ; Compare #$C6.b with Y register [Reads: Y Index] [Flags: ZNC]
	jsr $60E4.w		; 20 E4 60 ; Jump to subroutine at $60E4.w [Writes: Stack Pointer] [Flow: call]
	.db $30, $68		; 30 68 ; Branch if minus to $30, $68 [Flow: branch]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $841B.w,Y		; 39 1B 84 ; AND accumulator with memory $841B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $5B.b		; A4 5B ; Load $5B.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	cmp $070800.l,X		; DF 00 08 07 ; Compare accumulator (long,X) $070800.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	eor $08.b		; 45 08 ; Exclusive OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$11.b]		; 67 11 ; Add with carry (long) [$11.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $7FFF00.l		; 0F 00 FF 7F ; OR accumulator with memory (long) $7FFF00.l [Writes: Accumulator] [Flags: ZN]
	cmp ($0E.b,S),Y		; D3 0E ; Compare accumulator (stack relative indirect indexed) ($0E.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	ror $696B.w		; 6E 6B 69 ; Rotate right $696B.w [Flags: ZNC]
	ora $BFDE21.l		; 0F 21 DE BF ; OR accumulator with memory (long) $BFDE21.l [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	ror $4580.w,X		; 7E 80 45 ; Rotate right $4580.w,X [Reads: X Index] [Flags: ZNC]
	.db $42, $BC		; 42 BC ; Reserved instruction
	ora #$00BE.w		; 09 BE 00 ; Logical OR #$00BE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $7E40E0.l,X		; FF E0 40 7E ; Subtract with carry (long,X) $7E40E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $F2, $FA		; 62 F2 FA ; Push effective relative address $62, $F2, $FA [Writes: Stack Pointer]
	ldx $0037.w,Y		; BE 37 00 ; Load X register $0037.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc $8F700F.l,X		; FF 0F 70 8F ; Subtract with carry (long,X) $8F700F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $7FB8BF.l		; 4F BF B8 7F ; Exclusive OR accumulator with memory (long) $7FB8BF.l [Writes: Accumulator] [Flags: ZN]
	adc $FF.b,S		; 63 FF ; Add with carry (stack relative) $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	jmp.w [$9EEF]		; DC EF 9E ; Jump long indirect [$9EEF] [Flow: jump]
	sbc ($A7.b),Y		; F1 A7 ; Subtract with carry ($A7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda $FC.b,S		; A3 FC ; Load accumulator (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $95.b		; 00 95 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $55,$FE		; 44 FE 55 ; Move block positive $55,$FE [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora #$FCA3.w		; 09 A3 FC ; Logical OR #$FCA3.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda [$F8.b]		; A7 F8 ; Load accumulator (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $F9.b,Y		; 96 F9 ; Store X register $F9.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	eor $D8F3.w,X		; 5D F3 D8 ; Exclusive OR accumulator with memory $D8F3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $070027.l		; 6F 27 00 07 ; Add with carry (long) $070027.l [Writes: Accumulator] [Flags: ZVNC]
	ldy $7B.b		; A4 7B ; Load $7B.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	eor [$B8.b]		; 47 B8 ; Exclusive OR accumulator with memory (long) [$B8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $C73FD3.l		; 2F D3 3F C7 ; AND accumulator with memory (long) $C73FD3.l [Writes: Accumulator] [Flags: ZN]
	mvp $0F,$FF		; 44 FF 0F ; Move block positive $0F,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	trb $FF1E.w		; 1C 1E FF ; Test and reset bits $FF1E.w [Reads: Accumulator] [Flags: Z]
	stz $0000.w,X		; 9E 00 00 ; Store zero to $0000.w,X [Reads: X Index]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $9F1F0F.l		; 0F 0F 1F 9F ; OR accumulator with memory (long) $9F1F0F.l [Writes: Accumulator] [Flags: ZN]
	sbc $3FFF00.l,X		; FF 00 FF 3F ; Subtract with carry (long,X) $3FFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E0FFF8.l,X		; FF F8 FF E0 ; Subtract with carry (long,X) $E0FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $07FF80.l,X		; FF 80 FF 07 ; Subtract with carry (long,X) $07FF80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1FFF0F.l,X		; FF 0F FF 1F ; Subtract with carry (long,X) $1FFF0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1F.b		; 05 1F ; Logical OR $1F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $8478FF.l,X		; 1F FF 78 84 ; Logical OR long $8478FF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $0000.w		; 4E 00 00 ; Logical shift right $0000.w [Flags: ZNC]
	ora $83.b,S		; 03 83 ; OR accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($00.b)		; 52 00 ; Exclusive OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF247F.l,X		; 1F 7F 24 FF ; Logical OR long $FF247F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($FC.b)		; 12 FC ; OR accumulator with memory (indirect) ($FC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$F7.b]		; 07 F7 ; OR accumulator with memory (long) [$F7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FC0FF1.l		; 0F F1 0F FC ; OR accumulator with memory (long) $FC0FF1.l [Writes: Accumulator] [Flags: ZN]
	ora $FA.b,S		; 03 FA ; OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	and $E0.b,S		; 23 E0 ; AND accumulator with stack relative $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $24F0.w		; 0C F0 24 ; Test and set bits $24F0.w [Reads: Accumulator] [Flags: Z]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	stx $79.b		; 86 79 ; Store X register to $79.b [Reads: X Index]
	sta [$78.b]		; 87 78 ; Store accumulator (long) [$78.b] [Reads: Accumulator, Direct Page]
	cmp $00FF30.l		; CF 30 FF 00 ; Compare accumulator (long) $00FF30.l [Reads: Accumulator] [Flags: ZNC]
	sbc $FF2280.l,X		; FF 80 22 FF ; Subtract with carry (long,X) $FF2280.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($80.b)		; 12 80 ; OR accumulator with memory (indirect) ($80.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $CF30FF.l,X		; FF FF 30 CF ; Subtract with carry (long,X) $CF30FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $CF3FC7.l,X		; 9F C7 3F CF ; Store accumulator (long,X) $CF3FC7.l,X [Reads: Accumulator, X Index]
	and $C73FC0.l,X		; 3F C0 3F C7 ; AND accumulator with memory (long,X) $C73FC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	cpx $FC13.w		; EC 13 FC ; Compare $FC13.w with X register [Reads: X Index] [Flags: ZNC]
	sta $26.b,S		; 83 26 ; Store accumulator (stack relative) $26.b,S [Reads: Accumulator, Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $43		; 80 43 ; Branch always to $80, $43 [Flow: branch]
	sbc $070400.l,X		; FF 00 04 07 ; Subtract with carry (long,X) $070400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $E01F80.l,X		; 7F 80 1F E0 ; Add long $E01F80.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$F8.b]		; 87 F8 ; Store accumulator (long) [$F8.b] [Reads: Accumulator, Direct Page]
	sbc [$F8.b]		; E7 F8 ; Subtract with carry (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($FC.b,S),Y		; F3 FC ; Subtract with carry (stack relative indirect indexed) ($FC.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc ($03.b,S),Y		; F3 03 ; Subtract with carry (stack relative indirect indexed) ($03.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F801.w,Y		; F9 01 F8 ; Subtract with carry $F801.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	sbc $FEFC01.l,X		; FF 01 FC FE ; Subtract with carry (long,X) $FEFC01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $1C,$FF		; 44 FF 1C ; Move block positive $1C,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $1FFF.w,X		; 1E FF 1F ; Arithmetic shift left $1FFF.w,X [Reads: X Index] [Flags: ZNC]
	sbc $07FF0F.l,X		; FF 0F FF 07 ; Subtract with carry (long,X) $07FF0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF2703.l,X		; FF 03 27 FF ; Subtract with carry (long,X) $FF2703.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $5C.b,S		; 43 5C ; Exclusive OR accumulator with stack relative $5C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $3FD843.l,X		; BF 43 D8 3F ; Load long $3FD843.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor [$90.b]		; 47 90 ; Exclusive OR accumulator with memory (long) [$90.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $4B0027.l,X		; 7F 27 00 4B ; Add long $4B0027.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FC0300.l,X		; FF 00 03 FC ; Subtract with carry (long,X) $FC0300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $09.b,S		; 03 09 ; OR accumulator with stack relative $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc [$27.b],Y		; F7 27 ; Subtract with carry (long indexed) [$27.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	jsr $AC50.w		; 20 50 AC ; Jump to subroutine at $AC50.w [Writes: Stack Pointer] [Flow: call]
	.db $D0, $2E		; D0 2E ; Branch if not equal to $D0, $2E [Flow: branch]
	ldy $5B.b		; A4 5B ; Load $5B.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldx $59.b		; A6 59 ; Load $59.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	dec $DF31.w		; CE 31 DF ; Decrement $DF31.w [Flags: ZN]
	and ($0F.b),Y		; 31 0F ; AND accumulator with memory ($0F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$83.b]		; 07 83 ; OR accumulator with memory (long) [$83.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($3B.b,X)		; 01 3B ; Logical OR ($3B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $80		; 70 80 ; Branch if overflow set to $70, $80 [Flow: branch]
	sbc ($00.b,X)		; E1 00 ; Subtract with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dec $01.b		; C6 01 ; Decrement $01.b [Reads: Direct Page] [Flags: ZN]
	tsb DMASRC0H.w		; 0C 03 43 ; Test and set bits DMASRC0H.w [Reads: Accumulator] [Flags: Z]
	trb $0B.b		; 14 0B ; Test and reset bits $0B.b [Reads: Accumulator] [Flags: Z]
	eor $24.b,S		; 43 24 ; Exclusive OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $F0381E.l		; 0F 1E 38 F0 ; OR accumulator with memory (long) $F0381E.l [Writes: Accumulator] [Flags: ZN]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: ZNC]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZNC]
	mvp $C4,$3B		; 44 3B C4 ; Move block positive $C4,$3B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor [$44.b]		; 47 44 ; Exclusive OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	tsb $56.b		; 04 56 ; Test and set bits $56.b [Reads: Accumulator] [Flags: Z]
	lda #$A05F.w		; A9 5F A0 ; Load #$A05F.w into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $80, $26		; 80 26 ; Branch always to $80, $26 [Flow: branch]
	brk $4C.b		; 00 4C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $9E029C.l,X		; FF 9C 02 9E ; Subtract with carry (long,X) $9E029C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $9F268E.l,X		; FF 8E 26 9F ; Subtract with carry (long,X) $9F268E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $8F.b		; 00 8F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$90.b]		; 47 90 ; Exclusive OR accumulator with memory (long) [$90.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $3FD843.l,X		; 7F 43 D8 3F ; Add long $3FD843.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $5C.b,S		; 43 5C ; Exclusive OR accumulator with stack relative $5C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $0F0027.l,X		; BF 27 00 0F ; Load long $0F0027.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and [$CF.b],Y		; 37 CF ; AND accumulator with memory (long indexed) [$CF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp [$4F.b]		; C7 4F ; Compare accumulator (long) [$4F.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	.db $B0, $C7		; B0 C7 ; Branch if carry set to $B0, $C7 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp ($3F.b,X)		; C1 3F ; Compare accumulator ($3F.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cpy #$3F.b		; C0 3F ; Compare #$3F.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	jsr ($2683.w,X)		; FC 83 26 ; Jump to subroutine indirect indexed ($2683.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $79		; 80 79 ; Branch always to $80, $79 [Flow: branch]
	stx $78.b,Y		; 96 78 ; Store X register $78.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta [$3C.b],Y		; 97 3C ; Store accumulator (long indexed) [$3C.b],Y [Reads: Accumulator, Direct Page, Y Index]
	cmp ($3F.b,S),Y		; D3 3F ; Compare accumulator (stack relative indirect indexed) ($3F.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and $E71FCC.l,X		; 3F CC 1F E7 ; AND accumulator with memory (long,X) $E71FCC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $F807F3.l		; 0F F3 07 F8 ; OR accumulator with memory (long) $F807F3.l [Writes: Accumulator] [Flags: ZN]
	jsl $F801F0.l		; 22 F0 01 F8 ; Jump to subroutine long $F801F0.l [Writes: Stack Pointer] [Flow: call]
	jsr ($FF22.w,X)		; FC 22 FF ; Jump to subroutine indirect indexed ($FF22.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpx #$27.b		; E0 27 ; Compare #$27.b with X register [Reads: X Index] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta [$84.b]		; 87 84 ; Store accumulator (long) [$84.b] [Reads: Accumulator, Direct Page]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($3A.b),Y		; 31 3A ; AND accumulator with memory ($3A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($33.b,X)		; 41 33 ; Exclusive OR accumulator with memory ($33.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	and $02.b		; 25 02 ; Logical AND $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora [$72.b]		; 07 72 ; OR accumulator with memory (long) [$72.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $CC7800.l		; 8F 00 78 CC ; Store accumulator (long) $CC7800.l [Reads: Accumulator]
	sty $8C.b		; 84 8C ; Store Y register to $8C.b [Reads: Y Index]
	cld		; D8 ; Clear decimal flag [Flags: D]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $8DFF1C.l,X		; FF 1C FF 8D ; Subtract with carry (long,X) $8DFF1C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $BD42.w,X		; 7E 42 BD ; Rotate right $BD42.w,X [Reads: X Index] [Flags: ZNC]
	and $9EC3.w,X		; 3D C3 9E ; AND accumulator with memory $9EC3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $7E3EC1.l,X		; 7F C1 3E 7E ; Add long $7E3EC1.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($27.b,X)		; 81 27 ; Store accumulator ($27.b,X) [Reads: Accumulator, X Index, Direct Page]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $070704.l,X		; FF 04 07 07 ; Subtract with carry (long,X) $070704.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $000022.l,X		; FF 22 00 00 ; Subtract with carry (long,X) $000022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $7F7F09.l,X		; FF 09 7F 7F ; Subtract with carry (long,X) $7F7F09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $07871F.l,X		; 1F 1F 87 07 ; Logical OR long $07871F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$07.b]		; E7 07 ; Subtract with carry (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($03.b,S),Y		; F3 03 ; Subtract with carry (stack relative indirect indexed) ($03.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $800600.l		; 22 00 06 80 ; Jump to subroutine long $800600.l [Writes: Stack Pointer] [Flow: call]
	cpx #$F8.b		; E0 F8 ; Compare #$F8.b with X register [Reads: X Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($3EFF.w,X)		; FC FF 3E ; Jump to subroutine indirect indexed ($3EFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	mvp $3F,$FF		; 44 FF 3F ; Move block positive $3F,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $7F1FFF.l,X		; 1F FF 1F 7F ; Logical OR long $7F1FFF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $3F8F7F.l,X		; 9F 7F 8F 3F ; Store accumulator (long,X) $3F8F7F.l,X [Reads: Accumulator, X Index]
	cmp $043F22.l		; CF 22 3F 04 ; Compare accumulator (long) $043F22.l [Reads: Accumulator] [Flags: ZNC]
	ora $8F9F1F.l,X		; 1F 1F 9F 8F ; Logical OR long $8F9F1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $FF0045.l		; CF 45 00 FF ; Compare accumulator (long) $FF0045.l [Reads: Accumulator] [Flags: ZNC]
	ora #$FE01.w		; 09 01 FE ; Logical OR #$FE01.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $E71FF3.l		; 0F F3 1F E7 ; OR accumulator with memory (long) $E71FF3.l [Writes: Accumulator] [Flags: ZN]
	jsl $FE13FF.l		; 22 FF 13 FE ; Jump to subroutine long $FE13FF.l [Writes: Stack Pointer] [Flow: call]
	jsr ($F3F8.w,X)		; FC F8 F3 ; Jump to subroutine indirect indexed ($F3F8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc [$80.b]		; E7 80 ; Subtract with carry (long) [$80.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $E0609F.l,X		; 7F 9F 60 E0 ; Add long $E0609F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $E770F0.l,X		; 1F F0 70 E7 ; Logical OR long $E770F0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sbc $22FF00.l,X		; FF 00 FF 22 ; Subtract with carry (long,X) $22FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $100F60.l,X		; 1F 60 0F 10 ; Logical OR long $100F60.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lsr $F7.b		; 46 F7 ; Logical shift right $F7.b [Reads: Direct Page] [Flags: ZNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ora [$FB.b]		; 07 FB ; OR accumulator with memory (long) [$FB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $FB		; F0 FB ; Branch if equal to $F0, $FB [Flow: branch]
	adc $79.b,X		; 75 79 ; Add $79.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stx $25.b		; 86 25 ; Store X register to $25.b [Reads: X Index]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $86.b		; 04 86 ; Test and set bits $86.b [Reads: Accumulator] [Flags: Z]
	eor $9F.b,S		; 43 9F ; Exclusive OR accumulator with stack relative $9F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($0B.b),Y		; 71 0B ; Add with carry ($0B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$79.b],Y		; 97 79 ; Store accumulator (long indexed) [$79.b],Y [Reads: Accumulator, Direct Page, Y Index]
	cmp $57EE3B.l		; CF 3B EE 57 ; Compare accumulator (long) $57EE3B.l [Reads: Accumulator] [Flags: ZNC]
	jsr ($B967.w,X)		; FC 67 B9 ; Jump to subroutine indirect indexed ($B967.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ror $D9.b		; 66 D9 ; Rotate right $D9.b [Reads: Direct Page] [Flags: ZNC]
	ldx $26.b		; A6 26 ; Load $26.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $37		; 80 37 ; Branch always to $80, $37 [Flow: branch]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $DB.b		; 24 DB ; Test bits $DB.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	stz $9B.b		; 64 9B ; Store zero to $9B.b
	sbc $1A.b		; E5 1A ; Subtract $1A.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and $5A.b		; 25 5A ; Logical AND $5A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$18.b]		; 27 18 ; AND accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $0A.b,X		; 35 0A ; Logical AND $0A.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$28.b],Y		; 37 28 ; AND accumulator with memory (long indexed) [$28.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $490FC0.l		; 22 C0 0F 49 ; Jump to subroutine long $490FC0.l [Writes: Stack Pointer] [Flow: call]
	ldx $CF.b,Y		; B6 CF ; Load X register $CF.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	and ($67.b),Y		; 31 67 ; AND accumulator with memory ($67.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	and $CB.b,X		; 35 CB ; Logical AND $CB.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $F0CFE1.l,X		; 9F E1 CF F0 ; Store accumulator (long,X) $F0CFE1.l,X [Reads: Accumulator, X Index]
	sbc [$F8.b]		; E7 F8 ; Subtract with carry (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stz $FB.b		; 64 FB ; Store zero to $FB.b
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $87,$FF		; 44 FF 87 ; Move block positive $87,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cpx #$22.b		; E0 22 ; Compare #$22.b with X register [Reads: X Index] [Flags: ZNC]
	cmp $FF.b,S		; C3 FF ; Compare accumulator (stack relative) $FF.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $FB.b,S		; C3 FB ; Compare accumulator (stack relative) $FB.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc $F9.b		; E5 F9 ; Subtract $F9.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $7C.b		; 66 7C ; Rotate right $7C.b [Reads: Direct Page] [Flags: ZNC]
	lda ($3E.b,S),Y		; B3 3E ; Load accumulator (stack relative indirect indexed) ($3E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $8787.w,Y		; F9 87 87 ; Subtract with carry $8787.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc ($E0.b,X)		; E1 E0 ; Subtract with carry ($E0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	sbc $C0FF00.l,X		; FF 00 FF C0 ; Subtract with carry (long,X) $C0FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F0FFE0.l,X		; FF E0 FF F0 ; Subtract with carry (long,X) $F0FFE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7FFFFC.l,X		; FF FC FF 7F ; Subtract with carry (long,X) $7FFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $807F1F.l,X		; FF 1F 7F 80 ; Subtract with carry (long,X) $807F1F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($7F.b)		; 12 7F ; OR accumulator with memory (indirect) ($7F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF0200.l,X		; 1F 00 02 FF ; Logical OR long $FF0200.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $F0F1.w		; 0E F1 F0 ; Arithmetic shift left $F0F1.w [Flags: ZNC]
	ora ($CE.b,X)		; 01 CE ; Logical OR ($CE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor $A9B031.l		; 4F 31 B0 A9 ; Exclusive OR accumulator with memory (long) $A9B031.l [Writes: Accumulator] [Flags: ZN]
	ror $0023.w		; 6E 23 00 ; Rotate right $0023.w [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $4E30.w		; 0E 30 4E ; Arithmetic shift left $4E30.w [Flags: ZNC]
	.db $10, $F3		; 10 F3 ; Branch if plus to $10, $F3 [Flow: branch]
	jsr ($FEF9.w,X)		; FC F9 FE ; Jump to subroutine indirect indexed ($FEF9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($FEFF.w,X)		; FC FF FE ; Jump to subroutine indirect indexed ($FEFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $E00027.l,X		; FF 27 00 E0 ; Subtract with carry (long,X) $E00027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and #$C63F.w		; 29 3F C6 ; Logical AND #$C63F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $10FF8C.l,X		; 7F 8C FF 10 ; Add long $10FF8C.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($2C.b,S),Y		; F3 2C ; Subtract with carry (stack relative indirect indexed) ($2C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($4C.b,S),Y		; F3 4C ; Subtract with carry (stack relative indirect indexed) ($4C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($8C.b,S),Y		; F3 8C ; Subtract with carry (stack relative indirect indexed) ($8C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $BC.b,S		; C3 BC ; Compare accumulator (stack relative) $BC.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp $3A.b		; C5 3A ; Compare $3A.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inc $F0FC.w,X		; FE FC F0 ; Increment memory $F0FC.w,X [Reads: X Index] [Flags: ZN]
	cpx #$C0.b		; E0 C0 ; Compare #$C0.b with X register [Reads: X Index] [Flags: ZNC]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $DF.b		; 00 DF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $C7B6CF.l		; AF CF B6 C7 ; Load long $C7B6CF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp ($3E.b,X)		; C1 3E ; Compare accumulator ($3E.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc ($0E.b),Y		; F1 0E ; Subtract with carry ($0E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FD06.w,Y		; F9 06 FD ; Subtract with carry $FD06.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
.ACCU 16
.INDEX 16
	rep #$FD		; C2 FD
	and ($80.b)		; 32 80 ; AND accumulator with memory (indirect) ($80.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $80, $23		; 80 23 ; Branch always to $80, $23 [Flow: branch]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$01F0.w		; C0 F0 01 ; Compare #$01F0.w with Y register [Reads: Y Index] [Flags: ZNC]
	cop $0F.b		; 02 0F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $3C.b		; 04 3C ; Test and set bits $3C.b [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$F7.b]		; 27 F7 ; AND accumulator with memory (long) [$F7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $FF1EEF.l		; 4F EF 1E FF ; Exclusive OR accumulator with memory (long) $FF1EEF.l [Writes: Accumulator] [Flags: ZN]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $0C03.w,X		; 9E 03 0C ; Store zero to $0C03.w,X [Reads: X Index]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpy #$8022.w		; C0 22 80 ; Compare #$8022.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora ($FF.b),Y		; 11 FF ; OR accumulator with memory ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $33.b		; 06 33 ; Arithmetic shift left $33.b [Reads: Direct Page] [Flags: ZNC]
	cpy $E3FF.w		; CC FF E3 ; Compare $E3FF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc [$0F.b],Y		; F7 0F ; Subtract with carry (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$6F.b],Y		; 97 6F ; Store accumulator (long indexed) [$6F.b],Y [Reads: Accumulator, Direct Page, Y Index]
	ora [$EF.b],Y		; 17 EF ; OR accumulator with memory (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp [$F1.b]		; C7 F1 ; Compare accumulator (long) [$F1.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsr $0025.w		; 20 25 00 ; Jump to subroutine at $0025.w [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and $C73FCF.l,X		; 3F CF 3F C7 ; AND accumulator with memory (long,X) $C73FCF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $E31FE7.l,X		; 1F E7 1F E3 ; Logical OR long $E31FE7.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $F00FF1.l		; 0F F1 0F F0 ; OR accumulator with memory (long) $F00FF1.l [Writes: Accumulator] [Flags: ZN]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $E3E7C7.l		; CF C7 E7 E3 ; Compare accumulator (long) $E3E7C7.l [Reads: Accumulator] [Flags: ZNC]
	sbc ($F0.b),Y		; F1 F0 ; Subtract with carry ($F0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($C73F.w,X)		; FC 3F C7 ; Jump to subroutine indirect indexed ($C73F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $7F43CF.l,X		; 3F CF 43 7F ; AND accumulator with memory (long,X) $7F43CF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $3FFF01.l,X		; 9F 01 FF 3F ; Store accumulator (long,X) $3FFF01.l,X [Reads: Accumulator, X Index]
	mvp $3E,$FF		; 44 FF 3E ; Move block positive $3E,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $3C.b		; 04 3C ; Test and set bits $3C.b [Reads: Accumulator] [Flags: Z]
	cmp [$CF.b]		; C7 CF ; Compare accumulator (long) [$CF.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sta $3F239F.l,X		; 9F 9F 23 3F ; Store accumulator (long,X) $3F239F.l,X [Reads: Accumulator, X Index]
	jsl $F01300.l		; 22 00 13 F0 ; Jump to subroutine long $F01300.l [Writes: Stack Pointer] [Flow: call]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $52.b		; 00 52 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4A.b		; 00 4A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $47.b		; 00 47 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $2C		; 10 2C ; Branch if plus to $10, $2C [Flow: branch]
	bit $38.b,X		; 34 38 ; Test bits $38.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	asl $004F.w,X		; 1E 4F 00 ; Arithmetic shift left $004F.w,X [Reads: X Index] [Flags: ZNC]
	sbc $110028.l,X		; FF 28 00 11 ; Subtract with carry (long,X) $110028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $33CC00.l,X		; FF 00 CC 33 ; Subtract with carry (long,X) $33CC00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F7FB00.l,X		; FF 00 FB F7 ; Subtract with carry (long,X) $F7FB00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc [$EC.b],Y		; F7 EC ; Subtract with carry (long indexed) [$EC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($1F.b,S),Y		; F3 1F ; Subtract with carry (stack relative indirect indexed) ($1F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$00FF.w		; E0 FF 00 ; Compare #$00FF.w with X register [Reads: X Index] [Flags: ZNC]
	cpy $2580.w		; CC 80 25 ; Compare $2580.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $D843BF.l		; 5C BF 43 D8 ; Jump long to $D843BF.l [Flow: jump]
	and $7F9047.l,X		; 3F 47 90 7F ; AND accumulator with memory (long,X) $7F9047.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $97.b		; 14 97 ; Test and reset bits $97.b [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta $48CF10.l,X		; 9F 10 CF 48 ; Store accumulator (long,X) $48CF10.l,X [Reads: Accumulator, X Index]
	adc [$A4.b]		; 67 A4 ; Add with carry (long) [$A4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($96.b),Y		; 71 96 ; Add with carry ($96.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($8E.b),Y		; 71 8E ; Add with carry ($8E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $8F		; 70 8F ; Branch if overflow set to $70, $8F [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lda [$60.b]		; A7 60 ; Load accumulator (long) [$60.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $30, $18		; 30 18 ; Branch if minus to $30, $18 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsl $FF0200.l		; 22 00 02 FF ; Jump to subroutine long $FF0200.l [Writes: Stack Pointer] [Flow: call]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $0063.w		; 8C 63 00 ; Store Y register to $0063.w [Reads: Y Index]
	cop $E0.b		; 02 E0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $FF247F.l,X		; 9F 7F 24 FF ; Store accumulator (long,X) $FF247F.l,X [Reads: Accumulator, X Index]
	eor $FE.b,S		; 43 FE ; Exclusive OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$7E03.w		; 09 03 7E ; Logical OR #$7E03.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $C43F.w		; 8D 3F C4 ; Store accumulator to $C43F.w [Reads: Accumulator]
	eor [$1F.b]		; 47 1F ; Exclusive OR accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sep #$03		; E2 03 ; Set processor status bits #$03 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($23FC.w,X)		; FC FC 23 ; Jump to subroutine indirect indexed ($23FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $0249.w,X		; FE 49 02 ; Increment memory $0249.w,X [Reads: X Index] [Flags: ZN]
	sbc $FF0645.l,X		; FF 45 06 FF ; Subtract with carry (long,X) $FF0645.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $3700FF.l		; 4F FF 00 37 ; Exclusive OR accumulator with memory (long) $3700FF.l [Writes: Accumulator] [Flags: ZN]
	sbc $E00027.l,X		; FF 27 00 E0 ; Subtract with carry (long,X) $E00027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $D431C8.l		; 22 C8 31 D4 ; Jump to subroutine long $D431C8.l [Writes: Stack Pointer] [Flow: call]
	and [$E3.b]		; 27 E3 ; AND accumulator with memory (long) [$E3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$E7.b]		; 07 E7 ; OR accumulator with memory (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $C70FC6.l		; 0F C6 0F C7 ; OR accumulator with memory (long) $C70FC6.l [Writes: Accumulator] [Flags: ZN]
	asl $9ED7.w		; 0E D7 9E ; Arithmetic shift left $9ED7.w [Flags: ZNC]
	sbc ($BE.b,S),Y		; F3 BE ; Subtract with carry (stack relative indirect indexed) ($BE.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $30		; 10 30 ; Branch if plus to $10, $30 [Flow: branch]
	.db $30, $A0		; 30 A0 ; Branch if minus to $30, $A0 [Flow: branch]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $3E		; F0 3E ; Branch if equal to $F0, $3E [Flow: branch]
	and $3F20C0.l,X		; 3F C0 20 3F ; AND accumulator with memory (long,X) $3F20C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$4400.w		; C0 00 44 ; Compare #$4400.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $000302.l,X		; FF 02 03 00 ; Subtract with carry (long,X) $000302.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0F0023.l,X		; 1F 23 00 0F ; Logical OR long $0F0023.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	ldx $1DEF.w,Y		; BE EF 1D ; Load X register $1DEF.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc $0B.b,X		; F5 0B ; Subtract $0B.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $FB43.w,X		; FE 43 FB ; Increment memory $FB43.w,X [Reads: X Index] [Flags: ZN]
	and $79.b		; 25 79 ; Logical AND $79.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0639.w,X		; 1E 39 06 ; Arithmetic shift left $0639.w,X [Reads: X Index] [Flags: ZNC]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $C01480.l		; 22 80 14 C0 ; Jump to subroutine long $C01480.l [Writes: Stack Pointer] [Flow: call]
	cpx $7E.b		; E4 7E ; Compare $7E.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	rol $CE07.w,X		; 3E 07 CE ; Rotate left $CE07.w,X [Reads: X Index] [Flags: ZNC]
	and $3BCC.w,Y		; 39 CC 3B ; AND accumulator with memory $3BCC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $9B.b		; E5 9B ; Subtract $9B.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $3FE3.w,X		; FD E3 3F ; Subtract with carry $3FE3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pea $6BD7.w		; F4 D7 6B ; Push absolute address $6BD7.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	adc $9C.b,S		; 63 9C ; Add with carry (stack relative) $9C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $47FD.w		; 9C FD 47 ; Store zero to $47FD.w
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora $C73FE0.l,X		; 1F E0 3F C7 ; Logical OR long $C73FE0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $FF238F.l,X		; 7F 8F 23 FF ; Add long $FF238F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$F82D.w		; E0 2D F8 ; Compare #$F82D.w with X register [Reads: X Index] [Flags: ZNC]
	cpx #$8FC7.w		; E0 C7 8F ; Compare #$8FC7.w with X register [Reads: X Index] [Flags: ZNC]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $E71FF0.l		; 0F F0 1F E7 ; OR accumulator with memory (long) $E71FF0.l [Writes: Accumulator] [Flags: ZN]
	and $1EFFCF.l,X		; 3F CF FF 1E ; AND accumulator with memory (long,X) $1EFFCF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $F8FF3C.l,X		; FF 3C FF F8 ; Subtract with carry (long,X) $F8FF3C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F0FCF0.l,X		; FF F0 FC F0 ; Subtract with carry (long,X) $F0FCF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$CF.b]		; E7 CF ; Subtract with carry (long) [$CF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $FFFF3F.l,X		; 1F 3F FF FF ; Logical OR long $FFFF3F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $3DC6.w,Y		; 79 C6 3D ; Add $3DC6.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $2F14.w		; 2C 14 2F ; Test bits $2F14.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	ora [$2F.b],Y		; 17 2F ; OR accumulator with memory (long indexed) [$2F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$0F.b],Y		; 17 0F ; OR accumulator with memory (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy #$2260.w		; C0 60 22 ; Compare #$2260.w with Y register [Reads: Y Index] [Flags: ZNC]
	jsr $1002.w		; 20 02 10 ; Jump to subroutine at $1002.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$22.b]		; 07 22 ; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FFC314.l,X		; FF 14 C3 FF ; Subtract with carry (long,X) $FFC314.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F0FF.w		; ED FF F0 ; Subtract $F0FF.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc $AC731F.l,X		; FF 1F 73 AC ; Subtract with carry (long,X) $AC731F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$CA.b],Y		; 37 CA ; AND accumulator with memory (long indexed) [$CA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $F9.b		; 06 F9 ; Arithmetic shift left $F9.b [Reads: Direct Page] [Flags: ZNC]
	sbc $F0E1C3.l,X		; FF C3 E1 F0 ; Subtract with carry (long,X) $F0E1C3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $F9C88C.l,X		; 1F 8C C8 F9 ; Logical OR long $F9C88C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta [$58.b],Y		; 97 58 ; Store accumulator (long indexed) [$58.b],Y [Reads: Accumulator, Direct Page, Y Index]
	cpx #$DF60.w		; E0 60 DF ; Compare #$DF60.w with X register [Reads: X Index] [Flags: ZNC]
	eor $9F00E0.l,X		; 5F E0 00 9F ; Exclusive OR accumulator with memory (long,X) $9F00E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $20.b,S		; 43 20 ; Exclusive OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00D683.l,X		; 1F 83 D6 00 ; Logical OR long $00D683.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $7F.b,X		; 15 7F ; OR accumulator with memory $7F.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $80, $3F		; 80 3F ; Branch always to $80, $3F [Flow: branch]
	cmp ($3F.b,X)		; C1 3F ; Compare accumulator ($3F.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cmp [$BA.b],Y		; D7 BA ; Compare accumulator (long indexed) [$BA.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp $C0BF70.l,X		; DF 70 BF C0 ; Compare accumulator (long,X) $C0BF70.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($17.b,X)		; 01 17 ; Logical OR ($17.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $C0783F.l,X		; 1F 3F 78 C0 ; Logical OR long $C0783F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $F80719.l,X		; FF 19 07 F8 ; Subtract with carry (long,X) $F80719.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$FB.b]		; 07 FB ; OR accumulator with memory (long) [$FB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $EFFFF7.l,X		; FF F7 FF EF ; Subtract with carry (long,X) $EFFFF7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FF1F.w,X		; FE 1F FF ; Increment memory $FF1F.w,X [Reads: X Index] [Flags: ZN]
	inc $FEFD.w,X		; FE FD FE ; Increment memory $FEFD.w,X [Reads: X Index] [Flags: ZN]
	sbc $F8FE.w,Y		; F9 FE F8 ; Subtract with carry $F8FE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	cop $05.b		; 02 05 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	pea $F008.w		; F4 08 F0 ; Push absolute address $F008.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sbc $16.b,X		; F5 16 ; Subtract $16.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lsr $F5.b		; 46 F5 ; Logical shift right $F5.b [Reads: Direct Page] [Flags: ZNC]
	inc $45.b,X		; F6 45 ; Increment memory $45.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	rol $F5.b,X		; 36 F5 ; Rotate left $F5.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $E80008.l		; 22 08 00 E8 ; Jump to subroutine long $E80008.l [Writes: Stack Pointer] [Flow: call]
	jsl $E80828.l		; 22 28 08 E8 ; Jump to subroutine long $E80828.l [Writes: Stack Pointer] [Flow: call]
	sbc $FC0300.l,X		; FF 00 03 FC ; Subtract with carry (long,X) $FC0300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc #$F5EE.w		; E9 EE F5 ; Subtract #$F5EE.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	inc $46.b,X		; F6 46 ; Increment memory $46.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc $36.b,X		; F5 36 ; Subtract $36.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsb $F6.b		; 04 F6 ; Test and set bits $F6.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $E8		; 10 E8 ; Branch if plus to $10, $E8 [Flow: branch]
	jsl $E80928.l		; 22 28 09 E8 ; Jump to subroutine long $E80928.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $2100.w,X		; 1E 00 21 ; Arithmetic shift left $2100.w,X [Reads: X Index] [Flags: ZNC]
	asl $3F4C.w,X		; 1E 4C 3F ; Arithmetic shift left $3F4C.w,X [Reads: X Index] [Flags: ZNC]
	lsr $3F46.w,X		; 5E 46 3F ; Logical shift right $3F46.w,X [Reads: X Index] [Flags: ZNC]
	eor $000002.l,X		; 5F 02 00 00 ; Exclusive OR accumulator with memory (long,X) $000002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $3F24.w,X		; 1E 24 3F ; Arithmetic shift left $3F24.w,X [Reads: X Index] [Flags: ZNC]
	asl $0F.b		; 06 0F ; Arithmetic shift left $0F.b [Reads: Direct Page] [Flags: ZNC]
	.db $70, $72		; 70 72 ; Branch if overflow set to $70, $72 [Flow: branch]
	sty $78FC.w		; 8C FC 78 ; Store Y register to $78FC.w [Reads: Y Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	eor $74.b		; 45 74 ; Exclusive OR $74.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	tsb $77.b		; 04 77 ; Test and set bits $77.b [Reads: Accumulator] [Flags: Z]
	sty $7073.w		; 8C 73 70 ; Store Y register to $7073.w [Reads: Y Index]
	sta ($23.b,X)		; 81 23 ; Store accumulator ($23.b,X) [Reads: Accumulator, X Index, Direct Page]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $99.b,S		; 43 99 ; Exclusive OR accumulator with stack relative $99.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $A906.w,X		; 7E 06 A9 ; Rotate right $A906.w,X [Reads: X Index] [Flags: ZNC]
	ror $7EAD.w,X		; 7E AD 7E ; Rotate right $7EAD.w,X [Reads: X Index] [Flags: ZNC]
	sta $997E.w,X		; 9D 7E 99 ; Store accumulator to $997E.w,X [Reads: Accumulator, X Index]
	mvp $A9,$7E		; 44 7E A9 ; Move block positive $A9,$7E [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $07.b		; 05 07 ; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	inc $1D03.w,X		; FE 03 1D ; Increment memory $1D03.w,X [Reads: X Index] [Flags: ZN]
	sbc [$43.b]		; E7 43 ; Subtract with carry (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sbc $44DF00.l		; EF 00 DF 44 ; Subtract with carry (long) $44DF00.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $0011D9.l		; EF D9 11 00 ; Subtract with carry (long) $0011D9.l [Writes: Accumulator] [Flags: ZVNC]
	ora $0A.b		; 05 0A ; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: ZNC]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E7FF18.l,X		; FF 18 FF E7 ; Subtract with carry (long,X) $E7FF18.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $45C0BF.l,X		; FF BF C0 45 ; Subtract with carry (long,X) $45C0BF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $001B80.l,X		; 7F 80 1B 00 ; Add long $001B80.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7118E7.l		; EF E7 18 71 ; Subtract with carry (long) $7118E7.l [Writes: Accumulator] [Flags: ZVNC]
	cmp ($C9.b),Y		; D1 C9 ; Compare accumulator ($C9.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	dec $03.b		; C6 03 ; Decrement $03.b [Reads: Direct Page] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $7C02.w,X		; 3C 02 7C ; Test bits $7C02.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	rol $7AF8.w,X		; 3E F8 7A ; Rotate left $7AF8.w,X [Reads: X Index] [Flags: ZNC]
	pea $EC72.w		; F4 72 EC ; Push absolute address $EC72.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sbc ($0D.b,S),Y		; F3 0D ; Subtract with carry (stack relative indirect indexed) ($0D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($C1FC.w,X)		; FC FC C1 ; Jump to subroutine indirect indexed ($C1FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sta ($22.b,X)		; 81 22 ; Store accumulator ($22.b,X) [Reads: Accumulator, X Index, Direct Page]
	ora ($13.b,X)		; 01 13 ; Logical OR ($13.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0EF5.w		; 0D F5 0E ; Logical OR $0EF5.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc $0E.b,X		; F6 0E ; Increment memory $0E.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$7C.b],Y		; F7 7C ; Subtract with carry (long indexed) [$7C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	adc $7F3FFC.l,X		; 7F FC 3F 7F ; Add long $7F3FFC.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $FF22.w		; 6D 22 FF ; Add $FF22.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx #$1821.w		; E0 21 18 ; Compare #$1821.w with X register [Reads: X Index] [Flags: ZNC]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sbc [$24.b]		; E7 24 ; Subtract with carry (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $080040.l,X		; BF 40 00 08 ; Load long $080040.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	trb $3C1C.w		; 1C 1C 3C ; Test and reset bits $3C1C.w [Reads: Accumulator] [Flags: Z]
	bit $0018.w,X		; 3C 18 00 ; Test bits $0018.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $15.b,S		; 03 15 ; OR accumulator with stack relative $15.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $E5.b		; 05 E5 ; Logical OR $E5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $43.b		; 05 43 ; Logical OR $43.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$A7.b]		; 27 A7 ; AND accumulator with memory (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx #$2B29.w		; E0 29 2B ; Compare #$2B29.w with X register [Reads: X Index] [Flags: ZNC]
	lda $050300.l		; AF 00 03 05 ; Load long $050300.l into accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	jmp $00FF58.l		; 5C 58 FF 00 ; Jump long to $00FF58.l [Flow: jump]
	sty $118C.w		; 8C 8C 11 ; Store Y register to $118C.w [Reads: Y Index]
	ora ($22.b),Y		; 11 22 ; OR accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsl $BB2424.l		; 22 24 24 BB ; Jump to subroutine long $BB2424.l [Writes: Stack Pointer] [Flow: call]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp $EEFF.w,X		; DD FF EE ; Compare accumulator $EEFF.w,X [Reads: X Index] [Flags: ZNC]
	sbc $EE7300.l,X		; FF 00 73 EE ; Subtract with carry (long,X) $EE7300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $FFDB.w,X		; DD DB FF ; Compare accumulator $FFDB.w,X [Reads: X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $84.b,S		; 03 84 ; OR accumulator with stack relative $84.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jsr ($F8C7.w,X)		; FC C7 F8 ; Jump to subroutine indirect indexed ($F8C7.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor $EF.b,S		; 43 EF ; Exclusive OR accumulator with stack relative $EF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $E0		; F0 E0 ; Branch if equal to $F0, $E0 [Flow: branch]
	and $F00F.w,X		; 3D 0F F0 ; AND accumulator with memory $F00F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $780070.l		; 2F 70 00 78 ; AND accumulator with memory (long) $780070.l [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cpy #$E0E0.w		; C0 E0 E0 ; Compare #$E0E0.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $C020E0.l,X		; 1F E0 20 C0 ; Logical OR long $C020E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $27BF90.l,X		; 5F 90 BF 27 ; Exclusive OR accumulator with memory (long,X) $27BF90.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($F34C.w,X)		; FC 4C F3 ; Jump to subroutine indirect indexed ($F34C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $50, $E1		; 50 E1 ; Branch if overflow clear to $50, $E1 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cpx $40.b		; E4 40 ; Compare $40.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpx #$A0DF.w		; E0 DF A0 ; Compare #$A0DF.w with X register [Reads: X Index] [Flags: ZNC]
	eor [$0F.b]		; 47 0F ; Exclusive OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $1B1E.w		; 1C 1E 1B ; Test and reset bits $1B1E.w [Reads: Accumulator] [Flags: Z]
	sbc $99FE.w,Y		; F9 FE 99 ; Subtract with carry $99FE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FDFB.w,X		; FE FB FD ; Increment memory $FDFB.w,X [Reads: X Index] [Flags: ZN]
	ora $F7FFFB.l,X		; 1F FB FF F7 ; Logical OR long $F7FFFB.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $D6F9E8.l,X		; 1F E8 F9 D6 ; Logical OR long $D6F9E8.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $00CE.w,Y		; 39 CE 00 ; AND accumulator with memory $00CE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	sbc $16.b,X		; F5 16 ; Subtract $16.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $F5.b,S		; 43 F5 ; Exclusive OR accumulator with stack relative $F5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $01.b,X		; F6 01 ; Increment memory $01.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	ora #$430E.w		; 09 0E 43 ; Logical OR #$430E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr ($00FF.w,X)		; FC FF 00 ; Jump to subroutine indirect indexed ($00FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsl $F00008.l		; 22 08 00 F0 ; Jump to subroutine long $F00008.l [Writes: Stack Pointer] [Flow: call]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($DF.b,X)		; 01 DF ; Logical OR ($DF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $08FF23.l,X		; DF 23 FF 08 ; Compare accumulator (long,X) $08FF23.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	jsr ($C4FF.w,X)		; FC FF C4 ; Jump to subroutine indirect indexed ($C4FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $8FFF87.l,X		; FF 87 FF 8F ; Subtract with carry (long,X) $8FFF87.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF289F.l,X		; FF 9F 28 FF ; Subtract with carry (long,X) $FF289F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $877F8F.l		; 0F 8F 7F 87 ; OR accumulator with memory (long) $877F8F.l [Writes: Accumulator] [Flags: ZN]
	adc $817F83.l,X		; 7F 83 7F 81 ; Add long $817F83.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $633FC1.l,X		; 7F C1 3F 63 ; Add long $633FC1.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $4F1F6F.l,X		; 1F 6F 1F 4F ; Logical OR long $4F1F6F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $097F23.l,X		; 3F 23 7F 09 ; AND accumulator with memory (long,X) $097F23.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $3F1F1F.l,X		; 3F 1F 1F 3F ; AND accumulator with memory (long,X) $3F1F1F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $4C73.w		; 8C 73 4C ; Store Y register to $4C73.w [Reads: Y Index]
	lda ($5C.b,S),Y		; B3 5C ; Load accumulator (stack relative indirect indexed) ($5C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$B847.w		; A0 47 B8 ; Load #$B847.w into Y register [Writes: Y Index] [Flags: ZN]
	mvp $88,$04		; 44 04 88 ; Move block positive $88,$04 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	stz $00.b,X		; 74 00 ; Store zero to $00.b,X [Reads: X Index]
	.db $80, $83		; 80 83 ; Branch always to $80, $83 [Flow: branch]
	bit $03.b		; 24 03 ; Test bits $03.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cpx #$E02B.w		; E0 2B E0 ; Compare #$E02B.w with X register [Reads: X Index] [Flags: ZNC]
	ora $FFDFE0.l,X		; 1F E0 DF FF ; Logical OR long $FFDFE0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpx $F2FF.w		; EC FF F2 ; Compare $F2FF.w with X register [Reads: X Index] [Flags: ZNC]
	adc $6EFFF6.l,X		; 7F F6 FF 6E ; Add long $6EFFF6.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $3DFF5E.l,X		; BF 5E FF 3D ; Load long $3DFF5E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $A240DF.l,X		; 1F DF 40 A2 ; Logical OR long $A240DF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $28.b,X		; 56 28 ; Logical shift right $28.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $0F31.w,X		; 1E 31 0F ; Arithmetic shift left $0F31.w,X [Reads: X Index] [Flags: ZNC]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $471C23.l		; 0F 23 1C 47 ; OR accumulator with memory (long) $471C23.l [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and [$4F.b],Y		; 37 4F ; AND accumulator with memory (long indexed) [$4F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$48.b],Y		; 37 48 ; AND accumulator with memory (long indexed) [$48.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$4F.b],Y		; 37 4F ; AND accumulator with memory (long indexed) [$4F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $22381C.l		; 0F 1C 38 22 ; OR accumulator with memory (long) $22381C.l [Writes: Accumulator] [Flags: ZN]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	.db $B0, $0F		; B0 0F ; Branch if carry set to $B0, $0F [Flow: branch]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $847FFE.l		; 0F FE 7F 84 ; OR accumulator with memory (long) $847FFE.l [Writes: Accumulator] [Flags: ZN]
	sbc $C1FF80.l,X		; FF 80 FF C1 ; Subtract with carry (long,X) $C1FF80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $0F,$FF		; 44 FF 0F ; Move block positive $0F,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF247F.l		; 0F 7F 24 FF ; OR accumulator with memory (long) $FF247F.l [Writes: Accumulator] [Flags: ZN]
	cpx #$CF2F.w		; E0 2F CF ; Compare #$CF2F.w with X register [Reads: X Index] [Flags: ZNC]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	brk $CF.b		; 00 CF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $ED00.w,X		; FD 00 ED ; Subtract with carry $ED00.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $77		; 80 77 ; Branch always to $80, $77 [Flow: branch]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $30.b,S		; 03 30 ; OR accumulator with stack relative $30.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $920230.l		; CF 30 02 92 ; Compare accumulator (long) $920230.l [Reads: Accumulator] [Flags: ZNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora $A7.b,S		; 03 A7 ; OR accumulator with stack relative $A7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	.db $70, $06		; 70 06 ; Branch if overflow set to $70, $06 [Flow: branch]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora $EC.b,S		; 03 EC ; OR accumulator with stack relative $EC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $E0		; F0 E0 ; Branch if equal to $F0, $E0 [Flow: branch]
	ora $0F00FF.l,X		; 1F FF 00 0F ; Logical OR long $0F00FF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $070F2F.l		; 8F 2F 0F 07 ; Store accumulator (long) $070F2F.l [Reads: Accumulator]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor $9D.b,S		; 43 9D ; Exclusive OR accumulator with stack relative $9D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $8D00.w,X		; 7E 00 8D ; Rotate right $8D00.w,X [Reads: X Index] [Flags: ZNC]
	mvp $B9,$7E		; 44 7E B9 ; Move block positive $B9,$7E [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $81.b		; 05 81 ; Logical OR $81.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $BDC3.w,X		; 7E C3 BD ; Rotate right $BDC3.w,X [Reads: X Index] [Flags: ZNC]
	ror $2542.w,X		; 7E 42 25 ; Rotate right $2542.w,X [Reads: X Index] [Flags: ZNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($42.b,X)		; 81 42 ; Store accumulator ($42.b,X) [Reads: Accumulator, X Index, Direct Page]
	eor $99.b,S		; 43 99 ; Exclusive OR accumulator with stack relative $99.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $7C86.w,X		; 7E 86 7C ; Rotate right $7C86.w,X [Reads: X Index] [Flags: ZNC]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $27A9.w,X		; 7E A9 27 ; Rotate right $27A9.w,X [Reads: X Index] [Flags: ZNC]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FABE.w,X		; 3D BE FA ; AND accumulator with memory $FABE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FB54.w,X		; FD 54 FB ; Subtract with carry $FB54.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	sbc [$10.b],Y		; F7 10 ; Subtract with carry (long indexed) [$10.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $801FE0.l		; EF E0 1F 80 ; Subtract with carry (long) $801FE0.l [Writes: Accumulator] [Flags: ZVNC]
	jmp ($7B83.w,X)		; 7C 83 7B ; Jump indirect indexed to ($7B83.w,X) [Reads: X Index] [Flow: jump]
	.db $50, $60		; 50 60 ; Branch if overflow clear to $50, $60 [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FFD900.l,X		; FF 00 D9 FF ; Subtract with carry (long,X) $FFD900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$00E6.w		; C0 E6 00 ; Compare #$00E6.w with Y register [Reads: Y Index] [Flags: ZNC]
	jmp ($6500.w)		; 6C 00 65 ; Jump indirect to ($6500.w) [Flow: jump]
	sta $F9.b,S		; 83 F9 ; Store accumulator (stack relative) $F9.b,S [Reads: Accumulator, Stack Pointer]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF33.w		; 2D 33 FF ; Logical AND $FF33.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $9A93.w,Y		; 19 93 9A ; OR accumulator with memory $9A93.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	ora ($3C.b,S),Y		; 13 3C ; OR accumulator (stack relative indirect indexed) ($3C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $3E.b		; 05 3E ; Logical OR $3E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($C6.b,X)		; C1 C6 ; Compare accumulator ($C6.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $D0D000.l,X		; FF 00 D0 D0 ; Subtract with carry (long,X) $D0D000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy $F4.b		; C4 F4 ; Compare $F4.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sbc [$50.b],Y		; F7 50 ; Subtract with carry (long indexed) [$50.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $31CE60.l,X		; 9F 60 CE 31 ; Store accumulator (long,X) $31CE60.l,X [Reads: Accumulator, X Index]
	sta $64.b,S		; 83 64 ; Store accumulator (stack relative) $64.b,S [Reads: Accumulator, Stack Pointer]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $0817.w		; 1C 17 08 ; Test and reset bits $0817.w [Reads: Accumulator] [Flags: Z]
	ora [$83.b]		; 07 83 ; OR accumulator with memory (long) [$83.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx $1800.w		; EC 00 18 ; Compare $1800.w with X register [Reads: X Index] [Flags: ZNC]
	and $007F00.l,X		; 3F 00 7F 00 ; AND accumulator with memory (long,X) $007F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	cpy #$F600.w		; C0 00 F6 ; Compare #$F600.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $E6.b		; 00 E6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C4.b		; 00 C4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $764030.l,X		; 1F 30 40 76 ; Logical OR long $764030.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $44.b		; 26 44 ; Rotate left $44.b [Reads: Direct Page] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	mvp $FF,$00		; 44 00 FF ; Move block positive $FF,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $5C.b		; 02 5C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $30, $22		; 30 22 ; Branch if minus to $30, $22 [Flow: branch]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda ($FF.b),Y		; B1 FF ; Load accumulator ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp $B03008.l		; 5C 08 30 B0 ; Jump long to $B03008.l [Flow: jump]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $007F.w		; 8E 7F 00 ; Store X register to $007F.w [Reads: X Index]
	sty $46.b		; 84 46 ; Store Y register to $46.b [Reads: Y Index]
	adc $C00380.l,X		; 7F 80 03 C0 ; Add long $C00380.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $2516E9.l,X		; 3F E9 16 25 ; AND accumulator with memory (long,X) $2516E9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $163F06.l,X		; 7F 06 3F 16 ; Add long $163F06.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $3EFF.w,X		; 7E FF 3E ; Rotate right $3EFF.w,X [Reads: X Index] [Flags: ZNC]
	sbc $FF4438.l,X		; FF 38 44 FF ; Subtract with carry (long,X) $FF4438.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	lda $EE3BC4.l,X		; BF C4 3B EE ; Load long $EE3BC4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($24.b),Y		; 11 24 ; OR accumulator with memory ($24.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $3BBF15.l,X		; FF 15 BF 3B ; Subtract with carry (long,X) $3BBF15.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($88.b),Y		; 11 88 ; OR accumulator with memory ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ror $48.b,X		; 76 48 ; Rotate right $48.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lda [$4C.b],Y		; B7 4C ; Load accumulator (long indexed) [$4C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda ($86.b,S),Y		; B3 86 ; Load accumulator (stack relative indirect indexed) ($86.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $7C87.w,Y		; 79 87 7C ; Add $7C87.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $7E.b		; 85 7E ; Store accumulator to $7E.b [Reads: Accumulator]
	eor $59BE.w		; 4D BE 59 ; Exclusive OR $59BE.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $8001.w,Y		; BE 01 80 ; Load X register $8001.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	sbc $FBFD7D.l,X		; FF 7D FD FB ; Subtract with carry (long,X) $FBFD7D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F7F8FB.l,X		; FF FB F8 F7 ; Subtract with carry (long,X) $F7F8FB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0FF8F7.l,X		; FF F7 F8 0F ; Subtract with carry (long,X) $0FF8F7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $7F947F.l,X		; 9F 7F 94 7F ; Store accumulator (long,X) $7F947F.l,X [Reads: Accumulator, X Index]
	jmp ($F8C0.w,X)		; 7C C0 F8 ; Jump indirect indexed to ($F8C0.w,X) [Reads: X Index] [Flow: jump]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $C41800.l		; 22 00 18 C4 ; Jump to subroutine long $C41800.l [Writes: Stack Pointer] [Flow: call]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	.db $B0, $4F		; B0 4F ; Branch if carry set to $B0, $4F [Flow: branch]
	lda $BE47.w,Y		; B9 47 BE ; Load $BE47.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($9F.b,X)		; 41 9F ; Exclusive OR accumulator with memory ($9F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $1FE030.l		; CF 30 E0 1F ; Compare accumulator (long) $1FE030.l [Reads: Accumulator] [Flags: ZNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	bit $6F5F.w,X		; 3C 5F 6F ; Test bits $6F5F.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	adc [$78.b],Y		; 77 78 ; Add with carry (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $441E7F.l,X		; 7F 7F 1E 44 ; Add long $441E7F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1E009C.l,X		; FF 9C 00 1E ; Subtract with carry (long,X) $1E009C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $0F,$FF		; 44 FF 0F ; Move block positive $0F,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF28C1.l,X		; FF C1 28 FF ; Subtract with carry (long,X) $FF28C1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $19.b		; 04 19 ; Test and set bits $19.b [Reads: Accumulator] [Flags: Z]
	sbc $180FFF.l		; EF FF 0F 18 ; Subtract with carry (long) $180FFF.l [Writes: Accumulator] [Flags: ZVNC]
	mvp $D8,$EF		; 44 EF D8 ; Move block positive $D8,$EF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora [$D4.b]		; 07 D4 ; OR accumulator with memory (long) [$D4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $DDE7DB.l		; EF DB E7 DD ; Subtract with carry (long) $DDE7DB.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $06.b,S		; E3 06 ; Subtract stack-relative $06.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$E0.b]		; 07 E0 ; OR accumulator with memory (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$0B.b]		; 47 0B ; Exclusive OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $7F0E.w		; 0C 0E 7F ; Test and set bits $7F0E.w [Reads: Accumulator] [Flags: Z]
	.db $80, $BF		; 80 BF ; Branch always to $80, $BF [Flow: branch]
	cpy #$E05F.w		; C0 5F E0 ; Compare #$E05F.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc $4FFF.w,Y		; 79 FF 4F ; Add $4FFF.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FCFF86.l,X		; FF 86 FF FC ; Subtract with carry (long,X) $FCFF86.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C2FF04.l,X		; FF 04 FF C2 ; Subtract with carry (long,X) $C2FF04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $B0, $86		; 62 B0 86 ; Push effective relative address $62, $B0, $86 [Writes: Stack Pointer]
	.db $B0, $79		; B0 79 ; Branch if carry set to $B0, $79 [Flow: branch]
	ora $FB.b,S		; 03 FB ; OR accumulator with stack relative $FB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $F6F8F8.l,X		; FF F8 F8 F6 ; Subtract with carry (long,X) $F6F8F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($EC.b,S),Y		; F3 EC ; Subtract with carry (stack relative indirect indexed) ($EC.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$E8.b],Y		; D7 E8 ; Compare accumulator (long indexed) [$E8.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sbc [$C8.b],Y		; F7 C8 ; Subtract with carry (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda [$C8.b],Y		; B7 C8 ; Load accumulator (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sty $7C.b		; 84 7C ; Store Y register to $7C.b [Reads: Y Index]
	.db $82, $00, $07		; 82 00 07 ; Branch always long to $82, $00, $07 [Flow: branch]
	asl $080C.w		; 0E 0C 08 ; Arithmetic shift left $080C.w [Flags: ZNC]
	tsb $372F.w		; 0C 2F 37 ; Test and set bits $372F.w [Reads: Accumulator] [Flags: Z]
	sbc ($0F.b),Y		; F1 0F ; Subtract with carry ($0F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($CF03.w,X)		; FC 03 CF ; Jump to subroutine indirect indexed ($CF03.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $30, $CE		; 30 CE ; Branch if minus to $30, $CE [Flow: branch]
	and ($44.b),Y		; 31 44 ; AND accumulator with memory ($44.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $0F0718.l,X		; 1F 18 07 0F ; Logical OR long $0F0718.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $040E4F.l,X		; 7F 4F 0E 04 ; Add long $040E4F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $860C00.l		; 22 00 0C 86 ; Jump to subroutine long $860C00.l [Writes: Stack Pointer] [Flow: call]
	adc [$85.b],Y		; 77 85 ; Add with carry (long indexed) [$85.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $589E.w		; 6E 9E 58 ; Rotate right $589E.w [Flags: ZNC]
	sty $B8.b,X		; 94 B8 ; Store Y register $B8.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cpx #$E010.w		; E0 10 E0 ; Compare #$E010.w with X register [Reads: X Index] [Flags: ZNC]
	cpx #$0022.w		; E0 22 00 ; Compare #$0022.w with X register [Reads: X Index] [Flags: ZNC]
	ora $08.b,S		; 03 08 ; OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $10, $20		; 10 20 ; Branch if plus to $10, $20 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $66.b		; 06 66 ; Arithmetic shift left $66.b [Reads: Direct Page] [Flags: ZNC]
	sta $00FF.w,Y		; 99 FF 00 ; Store accumulator to $00FF.w,Y [Reads: Accumulator, Y Index]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $06.b,S		; 43 06 ; Exclusive OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $010300.l		; 22 00 03 01 ; Jump to subroutine long $010300.l [Writes: Stack Pointer] [Flow: call]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $064300.l		; 0F 00 43 06 ; OR accumulator with memory (long) $064300.l [Writes: Accumulator] [Flags: ZN]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $707F.w,X		; 3E 7F 70 ; Rotate left $707F.w,X [Reads: X Index] [Flags: ZNC]
	.db $70, $79		; 70 79 ; Branch if overflow set to $70, $79 [Flow: branch]
	adc $4338.w,Y		; 79 38 43 ; Add $4338.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	tsb $E0.b		; 04 E0 ; Test and set bits $E0.b [Reads: Accumulator] [Flags: Z]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	sbc $507006.l,X		; FF 06 70 50 ; Subtract with carry (long,X) $507006.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $6F67.w		; 20 67 6F ; Jump to subroutine at $6F67.w [Writes: Stack Pointer] [Flow: call]
	and $002219.l,X		; 3F 19 22 00 ; AND accumulator with memory (long,X) $002219.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $C0.b,S		; 43 C0 ; Exclusive OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	sbc $C40008.l,X		; FF 08 00 C4 ; Subtract with carry (long,X) $C40008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$9B11.w		; C0 11 9B ; Compare #$9B11.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $0F46EF.l,X		; FF EF 46 0F ; Subtract with carry (long,X) $0F46EF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $67,$00		; 44 00 67 ; Move block positive $67,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $180200.l		; 22 00 02 18 ; Jump to subroutine long $180200.l [Writes: Stack Pointer] [Flow: call]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $0E1400.l		; 22 00 14 0E ; Jump to subroutine long $0E1400.l [Writes: Stack Pointer] [Flow: call]
	adc [$67.b]		; 67 67 ; Add with carry (long) [$67.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	sta $7C.b,S		; 83 7C ; Store accumulator (stack relative) $7C.b,S [Reads: Accumulator, Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $DFFF7C.l,X		; FF 7C FF DF ; Subtract with carry (long,X) $DFFF7C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF229F.l,X		; FF 9F 22 FF ; Subtract with carry (long,X) $FF229F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	jmp ($FF24.w,X)		; 7C 24 FF ; Jump indirect indexed to ($FF24.w,X) [Reads: X Index] [Flow: jump]
	ora $CF.b,S		; 03 CF ; OR accumulator with stack relative $CF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $491FF0.l		; 2F F0 1F 49 ; AND accumulator with memory (long) $491FF0.l [Writes: Accumulator] [Flags: ZN]
	sbc $FE0D00.l,X		; FF 00 0D FE ; Subtract with carry (long,X) $FE0D00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $10.b		; 06 10 ; Arithmetic shift left $10.b [Reads: Direct Page] [Flags: ZNC]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	cpx #$FFFF.w		; E0 FF FF ; Compare #$FFFF.w with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $E1		; F0 E1 ; Branch if equal to $F0, $E1 [Flow: branch]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	jsr ($F807.w,X)		; FC 07 F8 ; Jump to subroutine indirect indexed ($F807.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor #$00FF.w		; 49 FF 00 ; Exclusive OR #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $91.b,S		; 83 91 ; Store accumulator (stack relative) $91.b,S [Reads: Accumulator, Stack Pointer]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $F700FF.l,X		; FF FF 00 F7 ; Subtract with carry (long,X) $F700FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $08.b,S		; 83 08 ; Store accumulator (stack relative) $08.b,S [Reads: Accumulator, Stack Pointer]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc ($00.b,X)		; E1 00 ; Subtract with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $8184.w,Y		; F9 84 81 ; Subtract with carry $8184.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $1B.b		; 04 1B ; Test and set bits $1B.b [Reads: Accumulator] [Flags: Z]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $76.b		; 00 76 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $21.b		; 66 21 ; Rotate right $21.b [Reads: Direct Page] [Flags: ZNC]
	and $2430.w,Y		; 39 30 24 ; AND accumulator with memory $2430.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $70, $78		; 70 78 ; Branch if overflow set to $70, $78 [Flow: branch]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	sty $FF.b		; 84 FF ; Store Y register to $FF.b [Reads: Y Index]
	sty $DCFF.w		; 8C FF DC ; Store Y register to $DCFF.w [Reads: Y Index]
	sbc $FF7FFE.l,X		; FF FE 7F FF ; Subtract with carry (long,X) $FF7FFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $5F877F.l,X		; 1F 7F 87 5F ; Logical OR long $5F877F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpx #$FF23.w		; E0 23 FF ; Compare #$FF23.w with X register [Reads: X Index] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc $00071F.l,X		; 7F 1F 07 00 ; Add long $00071F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $FCE1.w,X		; 1E E1 FC ; Arithmetic shift left $FCE1.w,X [Reads: X Index] [Flags: ZNC]
	ora $10.b,S		; 03 10 ; OR accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $43E1DE.l		; EF DE E1 43 ; Subtract with carry (long) $43E1DE.l [Writes: Accumulator] [Flags: ZVNC]
	cmp $CF03E0.l,X		; DF E0 03 CF ; Compare accumulator (long,X) $CF03E0.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	.db $F0, $E7		; F0 E7 ; Branch if equal to $F0, $E7 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	bit $0F.b		; 24 0F ; Test bits $0F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $F3.b		; 04 F3 ; Test and set bits $F3.b [Reads: Accumulator] [Flags: Z]
	tsb $1EE1.w		; 0C E1 1E ; Test and set bits $1EE1.w [Reads: Accumulator] [Flags: Z]
	tsb $43F3.w		; 0C F3 43 ; Test and set bits $43F3.w [Reads: Accumulator] [Flags: Z]
	bit $43C3.w,X		; 3C C3 43 ; Test bits $43C3.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sbc $FF2500.l,X		; FF 00 25 FF ; Subtract with carry (long,X) $FF2500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $00.b,X		; 16 00 ; Arithmetic shift left $00.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $77.b		; 00 77 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lda [$5C.b]		; A7 5C ; Load accumulator (long) [$5C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $2F.b,S		; A3 2F ; Load accumulator (stack relative) $2F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	pei ($B7.b)		; D4 B7 ; Push effective indirect address ($B7.b) [Reads: Direct Page] [Writes: Stack Pointer]
	dec $E798.w		; CE 98 E7 ; Decrement $E798.w [Flags: ZN]
	cmp $FFE0F0.l		; CF F0 E0 FF ; Compare accumulator (long) $FFE0F0.l [Reads: Accumulator] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	ora $010B1F.l,X		; 1F 1F 0B 01 ; Logical OR long $010B1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $060F00.l		; 22 00 0F 06 ; Jump to subroutine long $060F00.l [Writes: Stack Pointer] [Flow: call]
	sbc $46FF79.l,X		; FF 79 FF 46 ; Subtract with carry (long,X) $46FF79.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $4CFF40.l,X		; FF 40 FF 4C ; Subtract with carry (long,X) $4CFF40.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $A7FFAF.l,X		; FF AF FF A7 ; Subtract with carry (long,X) $A7FFAF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $27FF47.l,X		; FF 47 FF 27 ; Subtract with carry (long,X) $27FF47.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $0400.w		; AC 00 04 ; Load $0400.w into Y register [Writes: Y Index] [Flags: ZN]
	ror $00FF.w,X		; 7E FF 00 ; Rotate right $00FF.w,X [Reads: X Index] [Flags: ZNC]
	sbc $FF2699.l,X		; FF 99 26 FF ; Subtract with carry (long,X) $FF2699.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $4F.b		; 00 4F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $67,$FF		; 44 FF 67 ; Move block positive $67,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $AF.b,S		; 43 AF ; Exclusive OR accumulator with stack relative $AF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF6743.l,X		; FF 43 67 FF ; Subtract with carry (long,X) $FF6743.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($4F.b,X)		; 01 4F ; Logical OR ($4F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $470027.l,X		; FF 27 00 47 ; Subtract with carry (long,X) $470027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $AA0400.l,X		; FF 00 04 AA ; Subtract with carry (long,X) $AA0400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $00.b,X		; 55 00 ; Exclusive OR accumulator with memory $00.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FF2200.l,X		; FF 00 22 FF ; Subtract with carry (long,X) $FF2200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $0027FF.l		; 2F FF 27 00 ; AND accumulator with memory (long) $0027FF.l [Writes: Accumulator] [Flags: ZN]
	sbc $FF0704.l,X		; FF 04 07 FF ; Subtract with carry (long,X) $FF0704.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($FF.b,X)		; C1 FF ; Compare accumulator ($FF.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	and #$0D00.w		; 29 00 0D ; Logical AND #$0D00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $EB64FF.l,X		; FF FF 64 EB ; Subtract with carry (long,X) $EB64FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $7FFFFF.l		; 0F FF FF 7F ; OR accumulator with memory (long) $7FFFFF.l [Writes: Accumulator] [Flags: ZN]
	adc $230F0F.l,X		; 7F 0F 0F 23 ; Add long $230F0F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $22		; 10 22 ; Branch if plus to $10, $22 [Flow: branch]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $F0		; 80 F0 ; Branch always to $80, $F0 [Flow: branch]
	sbc $0025FF.l,X		; FF FF 25 00 ; Subtract with carry (long,X) $0025FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $2200FF.l,X		; FF FF 00 22 ; Subtract with carry (long,X) $2200FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $010024.l,X		; FF 24 00 01 ; Subtract with carry (long,X) $010024.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda #$4361.w		; A9 61 43 ; Load #$4361.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	adc ($01.b,S),Y		; 73 01 ; Add with carry (stack relative indirect indexed) ($01.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda #$4361.w		; A9 61 43 ; Load #$4361.w into accumulator [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $5FA0.w		; 0D A0 5F ; Logical OR $5FA0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	jsr $0C1E.w		; 20 1E 0C ; Jump to subroutine at $0C1E.w [Writes: Stack Pointer] [Flow: call]
	tsb $1F1E.w		; 0C 1E 1F ; Test and set bits $1F1E.w [Reads: Accumulator] [Flags: Z]
	ora $D41F00.l,X		; 1F 00 1F D4 ; Logical OR long $D41F00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $43		; 30 43 ; Branch if minus to $30, $43 [Flow: branch]
	ldx DMALEN6H.w		; AE 66 43 ; Load DMALEN6H.w into X register [Writes: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $AE.b,S		; 43 AE ; Exclusive OR accumulator with stack relative $AE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $1B.b		; 66 1B ; Rotate right $1B.b [Reads: Direct Page] [Flags: ZNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $1F1919.l		; 0F 19 19 1F ; OR accumulator with memory (long) $1F1919.l [Writes: Accumulator] [Flags: ZN]
	ora $1F1919.l,X		; 1F 19 19 1F ; Logical OR long $1F1919.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $58E038.l		; CF 38 E0 58 ; Compare accumulator (long) $58E038.l [Reads: Accumulator] [Flags: ZNC]
	.db $B0, $6F		; B0 6F ; Branch if carry set to $B0, $6F [Flow: branch]
	cmp $5FAF30.l,X		; DF 30 AF 5F ; Compare accumulator (long,X) $5FAF30.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sty $6F.b,X		; 94 6F ; Store Y register $6F.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	cmp $A136.w		; CD 36 A1 ; Compare $A136.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	lsr $0700.w,X		; 5E 00 07 ; Logical shift right $0700.w,X [Reads: X Index] [Flags: ZNC]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($FE.b,S),Y		; 13 FE ; OR accumulator (stack relative indirect indexed) ($FE.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $1818.w,X		; FE 18 18 ; Increment memory $1818.w,X [Reads: X Index] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc $FFF7FF.l,X		; FF FF F7 FF ; Subtract with carry (long,X) $FFF7FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($FF.b,X)		; E1 FF ; Subtract with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$01FF.w		; C0 FF 01 ; Compare #$01FF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc [$FE.b]		; E7 FE ; Subtract with carry (long) [$FE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $0023.w,X		; 3C 23 00 ; Test bits $0023.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	asl $FC.b		; 06 FC ; Arithmetic shift left $FC.b [Reads: Direct Page] [Flags: ZNC]
	ora $0F.b,S		; 03 0F ; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	sbc $FF2270.l,X		; FF 70 22 FF ; Subtract with carry (long,X) $FF2270.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $80.b		; 05 80 ; Logical OR $80.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $80, $18		; 80 18 ; Branch always to $80, $18 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $00243F.l,X		; 3F 3F 24 00 ; AND accumulator with memory (long,X) $00243F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $A0C0E7.l,X		; 7F E7 C0 A0 ; Add long $A0C0E7.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $A0DCA0.l,X		; DF A0 DC A0 ; Compare accumulator (long,X) $A0DCA0.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	mvp $D1,$A0		; 44 A0 D1 ; Move block positive $D1,$A0 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora ($D8.b)		; 12 D8 ; OR accumulator with memory (indirect) ($D8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $E0DC.w		; 20 DC E0 ; Jump to subroutine at $E0DC.w [Writes: Stack Pointer] [Flow: call]
	sta $070300.l,X		; 9F 00 03 07 ; Store accumulator (long,X) $070300.l,X [Reads: Accumulator, X Index]
	asl $070E.w		; 0E 0E 07 ; Arithmetic shift left $070E.w [Flags: ZNC]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C6.b		; 00 C6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $22,$00		; 44 00 22 ; Move block positive $22,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $0E00C6.l,X		; 1F C6 00 0E ; Logical OR long $0E00C6.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($F1.b,X)		; 01 F1 ; Logical OR ($F1.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $DDDD.w,Y		; 39 DD DD ; AND accumulator with memory $DDDD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $01F1.w,Y		; 39 F1 01 ; AND accumulator with memory $01F1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $3F3F0F.l		; 0F 0F 3F 3F ; OR accumulator with memory (long) $3F3F0F.l [Writes: Accumulator] [Flags: ZN]
	inc $FCFF.w,X		; FE FF FC ; Increment memory $FCFF.w,X [Reads: X Index] [Flags: ZN]
	sbc $03FEF9.l,X		; FF F9 FE 03 ; Subtract with carry (long,X) $03FEF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($00FF.w,X)		; FC FF 00 ; Jump to subroutine indirect indexed ($00FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $C0		; F0 C0 ; Branch if equal to $F0, $C0 [Flow: branch]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7B7F0A.l,X		; FF 0A 7F 7B ; Subtract with carry (long,X) $7B7F0A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$A4.b]		; 07 A4 ; OR accumulator with memory (long) [$A4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sta $6DFA.w		; 8D FA 6D ; Store accumulator to $6DFA.w [Reads: Accumulator]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $0022.w,X		; 9D 22 00 ; Store accumulator to $0022.w,X [Reads: Accumulator, X Index]
	cop $80.b		; 02 80 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$2260.w		; C0 60 22 ; Compare #$2260.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $06FF00.l,X		; FF 00 FF 06 ; Subtract with carry (long,X) $06FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F807.w,Y		; F9 07 F8 ; Subtract with carry $F807.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $E01FC0.l,X		; 3F C0 1F E0 ; AND accumulator with memory (long,X) $E01FC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $F807F0.l		; 0F F0 07 F8 ; OR accumulator with memory (long) $F807F0.l [Writes: Accumulator] [Flags: ZN]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc ($F8.b,S),Y		; F3 F8 ; Subtract with carry (stack relative indirect indexed) ($F8.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($CF30.w,X)		; FC 30 CF ; Jump to subroutine indirect indexed ($CF30.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and ($CD.b)		; 32 CD ; AND accumulator with memory (indirect) ($CD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$88.b],Y		; 77 88 ; Add with carry (long indexed) [$88.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; [PATTERN: Memory clearing operation] 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $2363.w		; 9C 63 23 ; Store zero to $2363.w
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $DD.b,X		; 15 DD ; OR accumulator with memory $DD.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $0008.w		; 9C 08 00 ; Store zero to $0008.w
	and $07.b,S		; 23 07 ; AND accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$3E.b]		; 07 3E ; OR accumulator with memory (long) [$3E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $273F20.l,X		; 3F 20 3F 27 ; AND accumulator with memory (long,X) $273F20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	ora ($1C.b,S),Y		; 13 1C ; OR accumulator (stack relative indirect indexed) ($1C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $8C8B.w		; 0C 8B 8C ; Test and set bits $8C8B.w [Reads: Accumulator] [Flags: Z]
	cmp ($DC.b,S),Y		; D3 DC ; Compare accumulator (stack relative indirect indexed) ($DC.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsl $E007C0.l		; 22 C0 07 E0 ; Jump to subroutine long $E007C0.l [Writes: Stack Pointer] [Flow: call]
	.db $F0, $70		; F0 70 ; Branch if equal to $F0, $70 [Flow: branch]
	jsr $0000.w		; 20 00 00 ; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $F2.b,S		; 83 F2 ; Store accumulator (stack relative) $F2.b,S [Reads: Accumulator, Stack Pointer]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FEFE05.l,X		; FF 05 FE FE ; Subtract with carry (long,X) $FEFE05.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($FFFC.w,X)		; FC FC FF ; Jump to subroutine indirect indexed ($FFFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($0183.w,X)		; FC 83 01 ; Jump to subroutine indirect indexed ($0183.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$F0C0.w		; C0 C0 F0 ; Compare #$F0C0.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $7E		; F0 7E ; Branch if equal to $F0, $7E [Flow: branch]
	inc $FF25.w,X		; FE 25 FF ; Increment memory $FF25.w,X [Reads: X Index] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $3F.b		; 02 3F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $002201.l		; 0F 01 22 00 ; OR accumulator with memory (long) $002201.l [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $27002F.l,X		; FF 2F 00 27 ; Subtract with carry (long,X) $27002F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $03A309.l,X		; FF 09 A3 03 ; Subtract with carry (long,X) $03A309.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda [$07.b]		; A7 07 ; Load accumulator (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $80, $3F		; 80 3F ; Branch always to $80, $3F [Flow: branch]
	lda $63.b,S		; A3 63 ; Load accumulator (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc [$47.b]		; E7 47 ; Subtract with carry (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $AF.b,S		; 43 AF ; Exclusive OR accumulator with stack relative $AF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $07A70B.l		; 0F 0B A7 07 ; OR accumulator with memory (long) $07A70B.l [Writes: Accumulator] [Flags: ZN]
	jmp ($4078.w,X)		; 7C 78 40 ; Jump indirect indexed to ($4078.w,X) [Reads: X Index] [Flow: jump]
	trb $7038.w		; 1C 38 70 ; Test and reset bits $7038.w [Reads: Accumulator] [Flags: Z]
	.db $70, $78		; 70 78 ; Branch if overflow set to $70, $78 [Flow: branch]
	ldy #$4360.w		; A0 60 43 ; Load #$4360.w into Y register [Writes: Y Index] [Flags: ZN]
	lda $63.b,S		; A3 63 ; Load accumulator (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $A8.b,S		; 43 A8 ; Exclusive OR accumulator with stack relative $A8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $AB61A9.l		; 0F A9 61 AB ; OR accumulator with memory (long) $AB61A9.l [Writes: Accumulator] [Flags: ZN]
	.db $62, $A9, $60		; 62 A9 60 ; Push effective relative address $62, $A9, $60 [Writes: Stack Pointer]
	ora $1F1C1C.l,X		; 1F 1C 1C 1F ; Logical OR long $1F1C1C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1E1C1E.l,X		; 1F 1E 1C 1E ; Logical OR long $1E1C1E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	mvp $43,$7B		; 44 7B 43 ; Move block positive $43,$7B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$3F.b]		; 07 3F ; OR accumulator with memory (long) [$3F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor $6FAFBF.l,X		; 5F BF AF 6F ; Exclusive OR accumulator with memory (long,X) $6FAFBF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $C6.b		; 46 C6 ; Logical shift right $C6.b [Reads: Direct Page] [Flags: ZNC]
	jsl $FB1F80.l		; 22 80 1F FB ; Jump to subroutine long $FB1F80.l [Writes: Stack Pointer] [Flow: call]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $10, $39		; 10 39 ; Branch if plus to $10, $39 [Flow: branch]
	adc $402D40.l,X		; 7F 40 2D 40 ; Add long $402D40.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($40.b,X)		; 21 40 ; Logical AND ($40.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $C01240.l,X		; 3F 40 12 C0 ; AND accumulator with memory (long,X) $C01240.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and ($E0.b)		; 32 E0 ; AND accumulator with memory (indirect) ($E0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $B0001F.l,X		; 1F 1F 00 B0 ; Logical OR long $B0001F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $92		; 80 92 ; Branch always to $80, $92 [Flow: branch]
	stz $AD80.w,X		; 9E 80 AD ; Store zero to $AD80.w,X [Reads: X Index]
	sta $E0C0.w		; 8D C0 E0 ; Store accumulator to $E0C0.w [Reads: Accumulator]
	adc $0044FF.l,X		; 7F FF 44 00 ; Add long $0044FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $11		; 80 11 ; Branch always to $80, $11 [Flow: branch]
	sbc $3FBF7F.l,X		; FF 7F BF 3F ; Subtract with carry (long,X) $3FBF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $6FFF20.l,X		; FF 20 FF 6F ; Subtract with carry (long,X) $6FFF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $6F		; F0 6F ; Branch if equal to $F0, $6F [Flow: branch]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $004000.l,X		; 7F 00 40 00 ; Add long $004000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FE2300.l		; 0F 00 23 FE ; OR accumulator with memory (long) $FE2300.l [Writes: Accumulator] [Flags: ZN]
	and $E0.b,S		; 23 E0 ; AND accumulator with stack relative $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx #$C323.w		; E0 23 C3 ; Compare #$C323.w with X register [Reads: X Index] [Flags: ZNC]
	cmp $8F.b,S		; C3 8F ; Compare accumulator (stack relative) $8F.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sta $3C9F9F.l		; 8F 9F 9F 3C ; Store accumulator (long) $3C9F9F.l [Reads: Accumulator]
	and $1F0101.l,X		; 3F 01 01 1F ; AND accumulator with memory (long,X) $1F0101.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $60703C.l,X		; 1F 3C 70 60 ; Logical OR long $60703C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$DEA0.w		; C0 A0 DE ; Compare #$DEA0.w with Y register [Reads: Y Index] [Flags: ZNC]
	ldy #$A8D8.w		; A0 D8 A8 ; Load #$A8D8.w into Y register [Writes: Y Index] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ldy $BCDD.w,X		; BC DD BC ; Load Y register $BCDD.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cmp $10DFB8.l,X		; DF B8 DF 10 ; Compare accumulator (long,X) $10DFB8.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc $01F08F.l		; EF 8F F0 01 ; Subtract with carry (long) $01F08F.l [Writes: Accumulator] [Flags: ZVNC]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $28.b		; 02 28 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$00.b]		; C7 00 ; Compare accumulator (long) [$00.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $7F.b,S		; C3 7F ; Compare accumulator (stack relative) $7F.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	stx $3B.b		; 86 3B ; Store X register to $3B.b [Reads: X Index]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $0022.w,X		; 3C 22 00 ; Test bits $0022.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cop $C0.b		; 02 C0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF4680.l,X		; FF 80 46 FF ; Subtract with carry (long,X) $FF4680.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($0100.w,X)		; FC 00 01 ; Jump to subroutine indirect indexed ($0100.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($2703.w,X)		; FC 03 27 ; Jump to subroutine indirect indexed ($2703.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($E0FF.w,X)		; FC FF E0 ; Jump to subroutine indirect indexed ($E0FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	mvp $C0,$FF		; 44 FF C0 ; Move block positive $C0,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $80.b		; 45 80 ; Exclusive OR $80.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FF0005.l,X		; FF 05 00 FF ; Subtract with carry (long,X) $FF0005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($C0E0.w,X)		; FC E0 C0 ; Jump to subroutine indirect indexed ($C0E0.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpy #$8022.w		; C0 22 80 ; Compare #$8022.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $7E.b,S		; 43 7E ; Exclusive OR accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta ($19.b,X)		; 81 19 ; Store accumulator ($19.b,X) [Reads: Accumulator, X Index, Direct Page]
	rol $BDC1.w,X		; 3E C1 BD ; Rotate left $BDC1.w,X [Reads: X Index] [Flags: ZNC]
	eor $F9.b,S		; 43 F9 ; Exclusive OR accumulator with stack relative $F9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$F3.b]		; 07 F3 ; OR accumulator with memory (long) [$F3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1F1FE7.l		; 0F E7 1F 1F ; OR accumulator with memory (long) $1F1FE7.l [Writes: Accumulator] [Flags: ZN]
	sbc $CCFCFC.l,X		; FF FC FC CC ; Subtract with carry (long,X) $CCFCFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($E1.b,X)		; E1 E1 ; Subtract with carry ($E1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $07.b,S		; 63 07 ; Add with carry (stack relative) $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ora $1D817E.l,X		; 1F 7E 81 1D ; Logical OR long $1D817E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $0E.b,S		; E3 0E ; Subtract stack-relative $0E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc ($83.b),Y		; F1 83 ; Subtract with carry ($83.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx #$1D02.w		; A2 02 1D ; Load #$1D02.w into X register [Writes: X Index] [Flags: ZN]
	trb $1FE3.w		; 1C E3 1F ; Test and reset bits $1FE3.w [Reads: Accumulator] [Flags: Z]
	sbc ($3E.b,X)		; E1 3E ; Subtract with carry ($3E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($F0.b,X)		; C1 F0 ; Compare accumulator ($F0.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc $FCFC.w,Y		; F9 FC FC ; Subtract with carry $FCFC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	pea $FDF8.w		; F4 F8 FD ; Push absolute address $FDF8.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	jsr ($F8E7.w,X)		; FC E7 F8 ; Jump to subroutine indirect indexed ($F8E7.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cmp #$E1F6.w		; C9 F6 E1 ; Compare #$E1F6.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	inc $FE71.w,X		; FE 71 FE ; Increment memory $FE71.w,X [Reads: X Index] [Flags: ZN]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $F9.b		; 06 F9 ; Arithmetic shift left $F9.b [Reads: Direct Page] [Flags: ZNC]
	trb $F1E3.w		; 1C E3 F1 ; Test and reset bits $F1E3.w [Reads: Accumulator] [Flags: Z]
	asl $0026.w		; 0E 26 00 ; Arithmetic shift left $0026.w [Flags: ZNC]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	sta $9A.b,S		; 83 9A ; Store accumulator (stack relative) $9A.b,S [Reads: Accumulator, Stack Pointer]
	cop $23.b		; 02 23 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $FFFF7F.l,X		; 3F 7F FF FF ; AND accumulator with memory (long,X) $FFFF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc $25FC.w,X		; FE FC 25 ; Increment memory $25FC.w,X [Reads: X Index] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	sta $EC.b		; 85 EC ; Store accumulator to $EC.b [Reads: Accumulator]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $7F1EFF.l		; 22 FF 1E 7F ; Jump to subroutine long $7F1EFF.l [Writes: Stack Pointer] [Flow: call]
	and $FCFF7F.l,X		; 3F 7F FF FC ; AND accumulator with memory (long,X) $FCFF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0FF01F.l,X		; 1F 1F F0 0F ; Logical OR long $0FF01F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and [$B4.b],Y		; 37 B4 ; AND accumulator with memory (long indexed) [$B4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sbc [$DB.b],Y		; F7 DB ; Subtract with carry (long indexed) [$DB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$3B.b],Y		; D7 3B ; Compare accumulator (long indexed) [$3B.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp [$DB.b]		; C7 DB ; Compare accumulator (long) [$DB.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $00E0F7.l		; 0F F7 E0 00 ; OR accumulator with memory (long) $00E0F7.l [Writes: Accumulator] [Flags: ZN]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0800.w		; 20 00 08 ; Jump to subroutine at $0800.w [Writes: Stack Pointer] [Flow: call]
	sbc [$43.b],Y		; F7 43 ; Subtract with carry (long indexed) [$43.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $3B.b,S		; 83 3B ; Store accumulator (stack relative) $3B.b,S [Reads: Accumulator, Stack Pointer]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $F2.b,S		; 83 F2 ; Store accumulator (stack relative) $F2.b,S [Reads: Accumulator, Stack Pointer]
	cop $0E.b		; 02 0E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$00.b],Y		; F7 00 ; Subtract with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $60A5FE.l,X		; FF FE A5 60 ; Subtract with carry (long,X) $60A5FE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($70.b,S),Y		; B3 70 ; Load accumulator (stack relative indirect indexed) ($70.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $9F78.w,Y		; B9 78 9F ; Load $9F78.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	mvp $8F,$7E		; 44 7E 8F ; Move block positive $8F,$7E [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $99.b,S		; 43 99 ; Exclusive OR accumulator with stack relative $99.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $1E02.w,X		; 7E 02 1E ; Rotate right $1E02.w,X [Reads: X Index] [Flags: ZNC]
	asl $2406.w		; 0E 06 24 ; Arithmetic shift left $2406.w [Flags: ZNC]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	sta $80A080.l,X		; 9F 80 A0 80 ; Store accumulator (long,X) $80A080.l,X [Reads: Accumulator, X Index]
	cmp $BFBC9F.l,X		; DF 9F BC BF ; Compare accumulator (long,X) $BFBC9F.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	eor $F8.b,S		; 43 F8 ; Exclusive OR accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $157F23.l,X		; FF 23 7F 15 ; Subtract with carry (long,X) $157F23.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $E0E0C0.l,X		; DF C0 E0 E0 ; Compare accumulator (long,X) $E0E0C0.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	and $FF23FF.l,X		; 3F FF 23 FF ; AND accumulator with memory (long,X) $FF23FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($7F.b,X)		; A1 7F ; Load accumulator ($7F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy #$3F3F.w		; C0 3F 3F ; Compare #$3F3F.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$2FD0.w		; C0 D0 2F ; Compare #$2FD0.w with Y register [Reads: Y Index] [Flags: ZNC]
	and $00251F.l,X		; 3F 1F 25 00 ; AND accumulator with memory (long,X) $00251F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $8E		; 10 8E ; Branch if plus to $10, $8E [Flow: branch]
	sta $F8FFFC.l		; 8F FC FF F8 ; Store accumulator (long) $F8FFFC.l [Reads: Accumulator]
	sbc $06FFE3.l,X		; FF E3 FF 06 ; Subtract with carry (long,X) $06FFE3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $19FF3C.l,X		; FF 3C FF 19 ; Subtract with carry (long,X) $19FF3C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $BC43.w,X		; FE 43 BC ; Increment memory $BC43.w,X [Reads: X Index] [Flags: ZN]
	.db $70, $26		; 70 26 ; Branch if overflow set to $70, $26 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($F1.b),Y		; 71 F1 ; Add with carry ($F1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FF1FFF.l,X		; 3F FF 1F FF ; AND accumulator with memory (long,X) $FF1FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp [$FF.b]		; C7 FF ; Compare accumulator (long) [$FF.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $98FF3C.l,X		; FF 3C FF 98 ; Subtract with carry (long,X) $98FF3C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $0E3DC2.l,X		; 7F C2 3D 0E ; Add long $0E3DC2.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	ora ($D7.b,S),Y		; 13 D7 ; OR accumulator (stack relative indirect indexed) ($D7.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$EB.b]		; 47 EB ; Exclusive OR accumulator with memory (long) [$EB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $B7.b,S		; 63 B7 ; Add with carry (stack relative) $B7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $98		; 70 98 ; Branch if overflow set to $70, $98 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cmp $5FE43F.l		; CF 3F E4 5F ; Compare accumulator (long) $5FE43F.l [Reads: Accumulator] [Flags: ZNC]
	ldy $6F.b,X		; B4 6F ; Load Y register $6F.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc [$38.b],Y		; 77 38 ; Add with carry (long indexed) [$38.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $070F.w		; 1C 0F 07 ; Test and reset bits $070F.w [Reads: Accumulator] [Flags: Z]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $E0.b		; 25 E0 ; Logical AND $E0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $9A.b,S		; 83 9A ; Store accumulator (stack relative) $9A.b,S [Reads: Accumulator, Stack Pointer]
	cop $25.b		; 02 25 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $7F3F01.l,X		; 1F 01 3F 7F ; Logical OR long $7F3F01.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $0029FF.l		; 22 FF 29 00 ; Jump to subroutine long $0029FF.l [Writes: Stack Pointer] [Flow: call]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $830022.l,X		; FF 22 00 83 ; Subtract with carry (long,X) $830022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $E718E0.l,X		; 1F E0 18 E7 ; Logical OR long $E718E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor [$00.b]		; 47 00 ; Exclusive OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $26F800.l,X		; FF 00 F8 26 ; Subtract with carry (long,X) $26F800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7F8F1B.l,X		; FF 1B 8F 7F ; Subtract with carry (long,X) $7F8F1B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$0F.b],Y		; F7 0F ; Subtract with carry (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora [$79.b]		; 07 79 ; OR accumulator with memory (long) [$79.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$FE.b]		; 87 FE ; Store accumulator (long) [$FE.b] [Reads: Accumulator, Direct Page]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $C7.b		; 00 C7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	asl $0FF1.w		; 0E F1 0F ; Arithmetic shift left $0FF1.w [Flags: ZNC]
	ora [$F3.b]		; 07 F3 ; OR accumulator with memory (long) [$F3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc ($C0.b,X)		; E1 C0 ; Subtract with carry ($C0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $FCFE.w,X		; FE FE FC ; Increment memory $FCFE.w,X [Reads: X Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	adc [$9C.b],Y		; 77 9C ; Add with carry (long indexed) [$9C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $43.b,S		; 63 43 ; Add with carry (stack relative) $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sbc $770B00.l,X		; FF 00 0B 77 ; Subtract with carry (long,X) $770B00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and ($CD.b)		; 32 CD ; AND accumulator with memory (indirect) ($CD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $CF		; 30 CF ; Branch if minus to $30, $CF [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $08.b,S		; 23 08 ; AND accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	stz $24DD.w		; 9C DD 24 ; Store zero to $24DD.w
	sbc $230000.l,X		; FF 00 00 23 ; Subtract with carry (long,X) $230000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C0C009.l,X		; FF 09 C0 C0 ; Subtract with carry (long,X) $C0C009.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$70E0.w		; E0 E0 70 ; Compare #$70E0.w with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $38		; F0 38 ; Branch if equal to $F0, $38 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	asl $22FE.w,X		; 1E FE 22 ; Arithmetic shift left $22FE.w,X [Reads: X Index] [Flags: ZNC]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $3F		; 30 3F ; Branch if minus to $30, $3F [Flow: branch]
	ora $01070F.l,X		; 1F 0F 07 01 ; Logical OR long $01070F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $206000.l,X		; 3F 00 60 20 ; AND accumulator with memory (long,X) $206000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $882740.l,X		; DF 40 27 88 ; Compare accumulator (long,X) $882740.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	tsb $A0.b		; 04 A0 ; Test and set bits $A0.b [Reads: Accumulator] [Flags: Z]
	asl $33C0.w,X		; 1E C0 33 ; Arithmetic shift left $33C0.w,X [Reads: X Index] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	and $1F00.w		; 2D 00 1F ; Logical AND $1F00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $C1E370.l,X		; 3F 70 E3 C1 ; AND accumulator with memory (long,X) $C1E370.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $0192.w		; 8C 92 01 ; Store Y register to $0192.w [Reads: Y Index]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $303F.w		; 20 3F 30 ; Jump to subroutine at $303F.w [Writes: Stack Pointer] [Flow: call]
	and ($2C.b)		; 32 2C ; AND accumulator with memory (indirect) ($2C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	ora $5D6B.w,X		; 1D 6B 5D ; OR accumulator with memory $5D6B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$E45E.w		; 69 5E E4 ; Add #$E45E.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	cmp $C1DDFE.l,X		; DF FE DD C1 ; Compare accumulator (long,X) $C1DDFE.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp ($83.b,X)		; C1 83 ; Compare accumulator ($83.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc $0102.w		; ED 02 01 ; Subtract $0102.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc $00230F.l,X		; FF 0F 23 00 ; Subtract with carry (long,X) $00230F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sty $95.b		; 84 95 ; Store Y register to $95.b [Reads: Y Index]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $0024FF.l,X		; FF FF 24 00 ; Subtract with carry (long,X) $0024FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $63.b		; 04 63 ; Test and set bits $63.b [Reads: Accumulator] [Flags: Z]
	adc $E0.b,S		; 63 E0 ; Add with carry (stack relative) $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$22BF.w		; E0 BF 22 ; Compare #$22BF.w with X register [Reads: X Index] [Flags: ZNC]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFCFF.l,X		; FF FF FC FF ; Subtract with carry (long,X) $FFFCFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $9CFF00.l,X		; FF 00 FF 9C ; Subtract with carry (long,X) $9CFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $23FFFF.l,X		; 1F FF FF 23 ; Logical OR long $23FFFF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $47.b		; 00 47 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($7E.b,X)		; 81 7E ; Store accumulator ($7E.b,X) [Reads: Accumulator, X Index, Direct Page]
	ora [$41.b]		; 07 41 ; OR accumulator with memory (long) [$41.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $CEB1.w,Y		; BE B1 CE ; Load X register $CEB1.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp $FCF3F0.l		; CF F0 F3 FC ; Compare accumulator (long) $FCF3F0.l [Reads: Accumulator] [Flags: ZNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $C0.b		; 05 C0 ; Logical OR $C0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $83FE81.l,X		; FF 81 FE 83 ; Subtract with carry (long,X) $83FE81.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($8743.w,X)		; FC 43 87 ; Jump to subroutine indirect indexed ($8743.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $C7.b		; 00 C7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $67,$F8		; 44 F8 67 ; Move block positive $67,$F8 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $B22FF7.l		; 0F F7 2F B2 ; OR accumulator with memory (long) $B22FF7.l [Writes: Accumulator] [Flags: ZN]
	ror $EEDE.w		; 6E DE EE ; Rotate right $EEDE.w [Flags: ZNC]
	cpx $661C.w		; EC 1C 66 ; Compare $661C.w with X register [Reads: X Index] [Flags: ZNC]
	lsr $C7BB.w,X		; 5E BB C7 ; Logical shift right $C7BB.w,X [Reads: X Index] [Flags: ZNC]
	adc $36E990.l,X		; 7F 90 E9 36 ; Add long $36E990.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $F3.b,S		; 83 F3 ; Store accumulator (stack relative) $F3.b,S [Reads: Accumulator, Stack Pointer]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($22.b,X)		; 81 22 ; Store accumulator ($22.b,X) [Reads: Accumulator, X Index, Direct Page]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $47,$3B		; 44 3B 47 ; Move block positive $47,$3B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $F0, $B0		; F0 B0 ; Branch if equal to $F0, $B0 [Flow: branch]
	jsr $28E0.w		; 20 E0 28 ; Jump to subroutine at $28E0.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	stz $F4.b,X		; 74 F4 ; Store zero to $F4.b,X [Reads: X Index]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	jmp ($80FC.w,X)		; 7C FC 80 ; Jump indirect indexed to ($80FC.w,X) [Reads: X Index] [Flow: jump]
	cmp [$0F.b]		; C7 0F ; Compare accumulator (long) [$0F.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $070F1F.l,X		; 1F 1F 0F 07 ; Logical OR long $070F1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$28		; C2 28
	bit $15.b,X		; 34 15 ; Test bits $15.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $1615.w		; 0D 15 16 ; Logical OR $1615.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $DE2F.w		; 2C 2F DE ; Test bits $DE2F.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	cmp $013F3E.l,X		; DF 3E 3F 01 ; Compare accumulator (long,X) $013F3E.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cmp $E0.b,S		; C3 E0 ; Compare accumulator (stack relative) $E0.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	.db $F0, $E0		; F0 E0 ; Branch if equal to $F0, $E0 [Flow: branch]
	cpy #$0800.w		; C0 00 08 ; Compare #$0800.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc [$0B.b],Y		; 77 0B ; Add with carry (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$0F.b]		; 87 0F ; Store accumulator (long) [$0F.b] [Reads: Accumulator, Direct Page]
	adc [$7F.b],Y		; 77 7F ; Add with carry (long indexed) [$7F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$CFFF.w		; E0 FF CF ; Compare #$CFFF.w with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $90		; F0 90 ; Branch if equal to $F0, $90 [Flow: branch]
	sbc $F4F6F7.l		; EF F7 F6 F4 ; Subtract with carry (long) $F4F6F7.l [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $80		; F0 80 ; Branch if equal to $F0, $80 [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	sta ($89.b,X)		; 81 89 ; Store accumulator ($89.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc ($CB.b,S),Y		; F3 CB ; Subtract with carry (stack relative indirect indexed) ($CB.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $F7.b,S		; 43 F7 ; Exclusive OR accumulator with stack relative $F7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $04A485.l,X		; FF 85 A4 04 ; Subtract with carry (long,X) $04A485.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F7.b		; 02 F7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $34.b,X		; 76 34 ; Rotate right $34.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
.INDEX 8
	sep #$DE		; E2 DE
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $0C0E.w		; 0E 0E 0C ; Arithmetic shift left $0C0E.w [Flags: ZNC]
	tsb $1823.w		; 0C 23 18 ; Test and set bits $1823.w [Reads: Accumulator] [Flags: Z]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx #$F0.b		; E0 F0 ; Compare #$F0.b with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $F1		; F0 F1 ; Branch if equal to $F0, $F1 [Flow: branch]
	sbc ($E7.b,S),Y		; F3 E7 ; Subtract with carry (stack relative indirect indexed) ($E7.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$23.b]		; E7 23 ; Subtract with carry (long) [$23.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFC02.l,X		; FF 02 FC FF ; Subtract with carry (long,X) $FFFC02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $83		; F0 83 ; Branch if equal to $F0, $83 [Flow: branch]
	sta DMASRC0L.w		; 8D 02 43 ; Store accumulator to DMASRC0L.w [Reads: Accumulator]
	sbc $FF2200.l,X		; FF 00 22 FF ; Subtract with carry (long,X) $FF2200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $C0		; F0 C0 ; Branch if equal to $F0, $C0 [Flow: branch]
	.db $80, $83		; 80 83 ; Branch always to $80, $83 [Flow: branch]
	stx $02.b		; 86 02 ; Store X register to $02.b [Reads: X Index]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $F0,$FF		; 44 FF F0 ; Move block positive $F0,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $E0.b,S		; 43 E0 ; Exclusive OR accumulator with stack relative $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FFC043.l,X		; FF 43 C0 FF ; Subtract with carry (long,X) $FFC043.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	sta $DC.b,S		; 83 DC ; Store accumulator (stack relative) $DC.b,S [Reads: Accumulator, Stack Pointer]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF2300.l,X		; FF 00 23 FF ; Subtract with carry (long,X) $FF2300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $2500.w		; 2C 00 25 ; Test bits $2500.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	sbc $FF0044.l,X		; FF 44 00 FF ; Subtract with carry (long,X) $FF0044.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$609F.w		; 09 9F 60 ; Logical OR #$609F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc [$F8.b]		; 67 F8 ; Add with carry (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	cmp $67A0.w,X		; DD A0 67 ; Compare accumulator $67A0.w,X [Reads: X Index] [Flags: ZNC]
	cmp $3C.b,S		; C3 3C ; Compare accumulator (stack relative) $3C.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora [$20.b],Y		; 17 20 ; OR accumulator with memory (long indexed) [$20.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $3C.b,S		; C3 3C ; Compare accumulator (stack relative) $3C.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2061.w		; 20 61 20 ; Jump to subroutine at $2061.w [Writes: Stack Pointer] [Flow: call]
	.db $50, $30		; 50 30 ; Branch if overflow clear to $50, $30 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	mvn $59,$2C		; 54 2C 59 ; Move block negative $59,$2C [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	bit $5F.b		; 24 5F ; Test bits $5F.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	trb $0F1E.w		; 1C 1E 0F ; Test and reset bits $0F1E.w [Reads: Accumulator] [Flags: Z]
	ora [$22.b]		; 07 22 ; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $2748C8.l		; 4F C8 48 27 ; Exclusive OR accumulator with memory (long) $2748C8.l [Writes: Accumulator] [Flags: ZN]
	and [$09.b],Y		; 37 09 ; AND accumulator with memory (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0020.w		; 20 20 00 ; Jump to subroutine at $0020.w [Writes: Stack Pointer] [Flow: call]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora #$0404.w		; 09 04 04 ; Logical OR #$0404.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $FEFFDF.l,X		; FF DF FF FE ; Subtract with carry (long,X) $FEFFDF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FB9F9F.l,X		; FF 9F 9F FB ; Subtract with carry (long,X) $FB9F9F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $10.b		; 45 10 ; Exclusive OR $10.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FFEE01.l		; EF 01 EE FF ; Subtract with carry (long) $FFEE01.l [Writes: Accumulator] [Flags: ZVNC]
	and [$11.b]		; 27 11 ; AND accumulator with memory (long) [$11.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $EE.b,S		; 23 EE ; AND accumulator with stack relative $EE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $FF.b		; 05 FF ; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $47FF7F.l,X		; 7F 7F FF 47 ; Add long $47FF7F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$0800.w		; 29 00 08 ; Logical AND #$0800.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $00F704.l,X		; FF 04 F7 00 ; Subtract with carry (long,X) $00F704.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $F9F8.w		; 0E F8 F9 ; Arithmetic shift left $F9F8.w [Flags: ZNC]
	inc $26FE.w,X		; FE FE 26 ; Increment memory $26FE.w,X [Reads: X Index] [Flags: ZN]
	sbc $F10F02.l,X		; FF 02 0F F1 ; Subtract with carry (long,X) $F10F02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FF23.w,X		; FE 23 FF ; Increment memory $FF23.w,X [Reads: X Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$3F.b		; C0 3F ; Compare #$3F.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $30, $0F		; 30 0F ; Branch if minus to $30, $0F [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$E4.b]		; 07 E4 ; OR accumulator with memory (long) [$E4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $F2.b,S		; E3 F2 ; Subtract stack-relative $F2.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc ($43.b),Y		; F1 43 ; Subtract with carry ($43.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora $CF3FFF.l		; 0F FF 3F CF ; OR accumulator with memory (long) $CF3FFF.l [Writes: Accumulator] [Flags: ZN]
	sbc [$FB.b],Y		; F7 FB ; Subtract with carry (long indexed) [$FB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FCFD.w,X		; FD FD FC ; Subtract with carry $FCFD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $97776F.l		; AF 6F 77 97 ; Load long $97776F.l into accumulator [Writes: Accumulator] [Flags: ZN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sta [$47.b]		; 87 47 ; Store accumulator (long) [$47.b] [Reads: Accumulator, Direct Page]
	eor $80.b,S		; 43 80 ; Exclusive OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $3FC007.l,X		; 7F 07 C0 3F ; Add long $3FC007.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $081000.l,X		; FF 00 10 08 ; Subtract with carry (long,X) $081000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$38.b]		; 07 38 ; OR accumulator with memory (long) [$38.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $61FFF3.l,X		; FF F3 FF 61 ; Subtract with carry (long,X) $61FFF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($9E.b,X)		; [PATTERN: Memory clearing operation] 61 9E ; Add with carry ($9E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stz $0043.w,X		; 9E 43 00 ; Store zero to $0043.w,X [Reads: X Index]
	sbc $0FF002.l,X		; FF 02 F0 0F ; Subtract with carry (long,X) $0FF002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $010022.l,X		; FF 22 00 01 ; Subtract with carry (long,X) $010022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $2361.w,X		; 9E 61 23 ; Store zero to $2361.w,X [Reads: X Index]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF7FFF.l,X		; FF FF 7F FF ; Subtract with carry (long,X) $FF7FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $18FF.w,X		; 3C FF 18 ; Test bits $18FF.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sbc $80FF00.l,X		; FF 00 FF 80 ; Subtract with carry (long,X) $80FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $FF3CC3.l,X		; 7F C3 3C FF ; Add long $FF3CC3.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($3F.b,S),Y		; 33 3F ; AND accumulator (stack relative indirect indexed) ($3F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $F0.b,S		; 43 F0 ; Exclusive OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF9043.l,X		; FF 43 90 FF ; Subtract with carry (long,X) $FF9043.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $F1.b		; 06 F1 ; Arithmetic shift left $F1.b [Reads: Direct Page] [Flags: ZNC]
	inc $FEE1.w,X		; FE E1 FE ; Increment memory $FEE1.w,X [Reads: X Index] [Flags: ZN]
	cmp $FC.b,S		; C3 FC ; Compare accumulator (stack relative) $FC.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cpy #$26.b		; C0 26 ; Compare #$26.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($46.b,S),Y		; F3 46 ; Subtract with carry (stack relative indirect indexed) ($46.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $D000F0.l,X		; FF F0 00 D0 ; Subtract with carry (long,X) $D000F0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stx $E1.b		; 86 E1 ; Store X register to $E1.b [Reads: X Index]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4E.b		; 00 4E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $002800.l,X		; FF 00 28 00 ; Subtract with carry (long,X) $002800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F306.w,Y		; F9 06 F3 ; Subtract with carry $F306.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $19E6.w		; 0C E6 19 ; Test and set bits $19E6.w [Reads: Accumulator] [Flags: Z]
	cpy $DC33.w		; CC 33 DC ; Compare $DC33.w with Y register [Reads: Y Index] [Flags: ZNC]
	and $27.b,S		; 23 27 ; AND accumulator with stack relative $27.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0FF000.l,X		; FF 00 F0 0F ; Subtract with carry (long,X) $0FF000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $0FF030.l		; CF 30 F0 0F ; Compare accumulator (long) $0FF030.l [Reads: Accumulator] [Flags: ZNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $E31CF0.l		; 0F F0 1C E3 ; OR accumulator with memory (long) $E31CF0.l [Writes: Accumulator] [Flags: ZN]
	cpx #$1F.b		; E0 1F ; Compare #$1F.b with X register [Reads: X Index] [Flags: ZNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0F.b		; 05 0F ; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0F0707.l		; 0F 07 07 0F ; OR accumulator with memory (long) $0F0707.l [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $17.b		; 45 17 ; Exclusive OR $17.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $93.b		; 06 93 ; Arithmetic shift left $93.b [Reads: Direct Page] [Flags: ZNC]
	stz $8F88.w		; 9C 88 8F ; Store zero to $8F88.w
	sbc $22F0F8.l,X		; FF F8 F0 22 ; Subtract with carry (long,X) $22F0F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$19.b		; E0 19 ; Compare #$19.b with X register [Reads: X Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $70, $C4		; 70 C4 ; Branch if overflow set to $70, $C4 [Flow: branch]
	mvp $63,$E3		; 44 E3 63 ; Move block positive $63,$E3 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $B0, $70		; B0 70 ; Branch if carry set to $B0, $70 [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $4F779F.l		; EF 9F 77 4F ; Subtract with carry (long) $4F779F.l [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	and [$2F.b]		; 27 2F ; AND accumulator with memory (long) [$2F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $3B		; 30 3B ; Branch if minus to $30, $3B [Flow: branch]
	trb $070F.w		; 1C 0F 07 ; Test and reset bits $070F.w [Reads: Accumulator] [Flags: Z]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZNC]
	bit #$0168.w		; 89 68 01 ; Test bits #$0168.w with accumulator [Reads: Accumulator] [Flags: Z]
	ora $F7.b		; 05 F7 ; Logical OR $F7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $FFC7F8.l		; CF F8 C7 FF ; Compare accumulator (long) $FFC7F8.l [Reads: Accumulator] [Flags: ZNC]
	cpy #$83.b		; C0 83 ; Compare #$83.b with Y register [Reads: Y Index] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	cpx #$F0.b		; E0 F0 ; Compare #$F0.b with X register [Reads: X Index] [Flags: ZNC]
	sta $A6.b,S		; 83 A6 ; Store accumulator (stack relative) $A6.b,S [Reads: Accumulator, Stack Pointer]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0001.l,X		; FF 01 00 FF ; Subtract with carry (long,X) $FF0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $00,$FF		; 44 FF 00 ; Move block positive $00,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$21.b]		; 07 21 ; OR accumulator with memory (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($C1.b,X)		; 21 C1 ; Logical AND ($C1.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp ($01.b,X)		; C1 01 ; Compare accumulator ($01.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $23.b,S		; 03 23 ; OR accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF1F07.l,X		; FF 07 1F FF ; Subtract with carry (long,X) $FF1F07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $3EDE1F.l		; EF 1F DE 3E ; Subtract with carry (long) $3EDE1F.l [Writes: Accumulator] [Flags: ZVNC]
	inc $23FC.w,X		; FE FC 23 ; Increment memory $23FC.w,X [Reads: X Index] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C14300.l,X		; FF 00 43 C1 ; Subtract with carry (long,X) $C14300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $FF02.w,X		; 3E 02 FF ; Rotate left $FF02.w,X [Reads: X Index] [Flags: ZNC]
	brk $DD.b		; 00 DD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $C1,$3E		; 44 3E C1 ; Move block positive $C1,$3E [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FEE0.w,X		; FE E0 FE ; Increment memory $FEE0.w,X [Reads: X Index] [Flags: ZN]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$3E.b		; C0 3E ; Compare #$3E.b with Y register [Reads: Y Index] [Flags: ZNC]
	jsr $D0DE.w		; 20 DE D0 ; Jump to subroutine at $D0DE.w [Writes: Stack Pointer] [Flow: call]
	inc $F7E8.w		; EE E8 F7 ; Increment $F7E8.w [Flags: ZN]
	sbc $F7.b,X		; F5 F7 ; Subtract $F7.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pea $0122.w		; F4 22 01 ; Push absolute address $0122.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	trb $C1.b		; 14 C1 ; Test and reset bits $C1.b [Reads: Accumulator] [Flags: Z]
	sbc ($F1.b,X)		; E1 F1 ; Subtract with carry ($F1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $00FF60.l,X		; FF 60 FF 00 ; Subtract with carry (long,X) $00FF60.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $303FE0.l,X		; FF E0 3F 30 ; Subtract with carry (long,X) $303FE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $ECEFD8.l,X		; DF D8 EF EC ; Compare accumulator (long,X) $ECEFD8.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc [$F6.b],Y		; F7 F6 ; Subtract with carry (long indexed) [$F6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	jsl $C00E00.l		; 22 00 0E C0 ; Jump to subroutine long $C00E00.l [Writes: Stack Pointer] [Flow: call]
	cpx #$F0.b		; E0 F0 ; Compare #$F0.b with X register [Reads: X Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($F807.w,X)		; FC 07 F8 ; Jump to subroutine indirect indexed ($F807.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($7B04.w,X)		; FC 04 7B ; Jump to subroutine indirect indexed ($7B04.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc [$D7.b],Y		; F7 D7 ; Subtract with carry (long indexed) [$D7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $AF43AF.l		; EF AF 43 AF ; Subtract with carry (long) $AF43AF.l [Writes: Accumulator] [Flags: ZVNC]
	adc $77B705.l		; 6F 05 B7 77 ; Add with carry (long) $77B705.l [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora $84.b,S		; 03 84 ; OR accumulator with stack relative $84.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsl $081010.l		; 22 10 10 08 ; Jump to subroutine long $081010.l [Writes: Stack Pointer] [Flow: call]
	cld		; D8 ; Clear decimal flag [Flags: D]
	and $EF7F9F.l,X		; 3F 9F 7F EF ; AND accumulator with memory (long,X) $EF7F9F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $A03CDC.l,X		; 1F DC 3C A0 ; Logical OR long $A03CDC.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $40.b,S		; 63 40 ; Add with carry (stack relative) $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	lda $B97FBF.l,X		; BF BF 7F B9 ; Load long $B97FBF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $010022.l,X		; 7F 22 00 01 ; Add long $010022.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $1C.b,S		; 03 1C ; OR accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $1C0600.l		; 22 00 06 1C ; Jump to subroutine long $1C0600.l [Writes: Stack Pointer] [Flow: call]
	sbc $83.b,S		; E3 83 ; Subtract stack-relative $83.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $38FF7F.l,X		; FF 7F FF 38 ; Subtract with carry (long,X) $38FF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $C7.b		; 84 C7 ; Store Y register to $C7.b [Reads: Y Index]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$3F.b		; C0 3F ; Compare #$3F.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $38F10E.l		; 0F 0E F1 38 ; OR accumulator with memory (long) $38F10E.l [Writes: Accumulator] [Flags: ZN]
	cmp [$70.b]		; C7 70 ; Compare accumulator (long) [$70.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sta $C71EE1.l		; 8F E1 1E C7 ; Store accumulator (long) $C71EE1.l [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sta $609F70.l		; 8F 70 9F 60 ; Store accumulator (long) $609F70.l [Reads: Accumulator]
	bit $27C3.w,X		; 3C C3 27 ; Test bits $27C3.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F00F00.l,X		; FF 00 0F F0 ; Subtract with carry (long,X) $F00F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($0C.b,S),Y		; F3 0C ; Subtract with carry (stack relative indirect indexed) ($0C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $B283F0.l		; 0F F0 83 B2 ; OR accumulator with memory (long) $B283F0.l [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FD0100.l,X		; FF 00 01 FD ; Subtract with carry (long,X) $FD0100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $83.b		; 02 83 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpx $8313.w		; EC 13 83 ; Compare $8313.w with X register [Reads: X Index] [Flags: ZNC]
	bit $2701.w		; 2C 01 27 ; Test bits $2701.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($0C.b,S),Y		; F3 0C ; Subtract with carry (stack relative indirect indexed) ($0C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$18.b]		; E7 18 ; Subtract with carry (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dec $8C31.w		; CE 31 8C ; Decrement $8C31.w [Flags: ZN]
	adc ($19.b,S),Y		; 73 19 ; Add with carry (stack relative indirect indexed) ($19.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$73.b]		; E7 73 ; Subtract with carry (long) [$73.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $E70FF7.l		; 8F F7 0F E7 ; Store accumulator (long) $E70FF7.l [Reads: Accumulator]
	ora $0B0027.l,X		; 1F 27 00 0B ; Logical OR long $0B0027.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$7F.b]		; 87 7F ; Store accumulator (long) [$7F.b] [Reads: Accumulator, Direct Page]
	.db $30, $F0		; 30 F0 ; Branch if minus to $30, $F0 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $87D8C0.l		; EF C0 D8 87 ; Subtract with carry (long) $87D8C0.l [Writes: Accumulator] [Flags: ZVNC]
	sta [$8F.b],Y		; 97 8F ; Store accumulator (long indexed) [$8F.b],Y [Reads: Accumulator, Direct Page, Y Index]
	lda $2F0F43.l		; AF 43 0F 2F ; Load long $2F0F43.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $27		; 10 27 ; Branch if plus to $10, $27 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	.db $50, $D0		; 50 D0 ; Branch if overflow clear to $50, $D0 [Flow: branch]
	.db $D0, $97		; D0 97 ; Branch if not equal to $D0, $97 [Flow: branch]
	sta [$C8.b],Y		; 97 C8 ; Store accumulator (long indexed) [$C8.b],Y [Reads: Accumulator, Direct Page, Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc [$E7.b]		; E7 E7 ; Subtract with carry (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $F0		; 70 F0 ; Branch if overflow set to $70, $F0 [Flow: branch]
	and $FF00FF.l,X		; 3F FF 00 FF ; AND accumulator with memory (long,X) $FF00FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $3F7800.l,X		; FF 00 78 3F ; Subtract with carry (long,X) $3F7800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00220F.l,X		; 1F 0F 22 00 ; Logical OR long $00220F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b],Y		; 37 00 ; AND accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $10EF20.l,X		; DF 20 EF 10 ; Compare accumulator (long,X) $10EF20.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc [$08.b],Y		; F7 08 ; Subtract with carry (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tsb $FD.b		; 04 FD ; Test and set bits $FD.b [Reads: Accumulator] [Flags: Z]
	cop $DE.b		; 02 DE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($27.b,X)		; 21 27 ; Logical AND ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $DF4700.l,X		; FF 00 47 DF ; Subtract with carry (long,X) $DF4700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $0001.w		; 20 01 00 ; Jump to subroutine at $0001.w [Writes: Stack Pointer] [Flow: call]
	sbc $220023.l,X		; FF 23 00 22 ; Subtract with carry (long,X) $220023.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $4F0000.l,X		; DF 00 00 4F ; Compare accumulator (long,X) $4F0000.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc $00270F.l,X		; FF 0F 27 00 ; Subtract with carry (long,X) $00270F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $DD.b		; 00 DD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $C1,$3E		; 44 3E C1 ; Move block positive $C1,$3E [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DD.b		; 00 DD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $C1,$3E		; 44 3E C1 ; Move block positive $C1,$3E [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$0300.w		; 29 00 03 ; Logical AND #$0300.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $01F00F.l,X		; FF 0F F0 01 ; Subtract with carry (long,X) $01F00F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $65.b		; 84 65 ; Store Y register to $65.b [Reads: Y Index]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000003.l,X		; FF 03 00 00 ; Subtract with carry (long,X) $000003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FE		; F0 FE ; Branch if equal to $F0, $FE [Flow: branch]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $9F8008.l,X		; FF 08 80 9F ; Subtract with carry (long,X) $9F8008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $CF		; 80 CF ; Branch always to $80, $CF [Flow: branch]
	cpy #$E5.b		; C0 E5 ; Compare #$E5.b with Y register [Reads: Y Index] [Flags: ZNC]
.ACCU 8
.INDEX 8
	sep #$F2		; E2 F2
	sbc ($22.b),Y		; F1 22 ; Subtract with carry ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $83		; 80 83 ; Branch always to $80, $83 [Flow: branch]
	tsb $1102.w		; 0C 02 11 ; Test and set bits $1102.w [Reads: Accumulator] [Flags: Z]
	wai		; CB ; Wait for interrupt
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $7C.b		; C4 7C ; Compare $7C.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cmp [$BF.b]		; C7 BF ; Compare accumulator (long) [$BF.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cpx $DF.b		; E4 DF ; Compare $DF.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	pea $68EF.w		; F4 EF 68 ; Push absolute address $68EF.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	adc [$0F.b],Y		; 77 0F ; Add with carry (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc [$F7.b]		; E7 F7 ; Subtract with carry (long) [$F7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	jsl $800F00.l		; 22 00 0F 80 ; Jump to subroutine long $800F00.l [Writes: Stack Pointer] [Flow: call]
	cpx #$08.b		; E0 08 ; Compare #$08.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $FFF7FF.l,X		; FF FF F7 FF ; Subtract with carry (long,X) $FFF7FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc ($F3.b,S),Y		; F3 F3 ; Subtract with carry (stack relative indirect indexed) ($F3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $22FF22.l,X		; 1F 22 FF 22 ; Logical OR long $22FF22.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $22F3.w		; 0C F3 22 ; Test and set bits $22F3.w [Reads: Accumulator] [Flags: Z]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $708F00.l,X		; FF 00 8F 70 ; Subtract with carry (long,X) $708F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $4C.b,S		; 83 4C ; Store accumulator (stack relative) $4C.b,S [Reads: Accumulator, Stack Pointer]
	cop $46.b		; 02 46 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $002800.l,X		; FF 00 28 00 ; Subtract with carry (long,X) $002800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$33.b]		; 07 33 ; OR accumulator with memory (long) [$33.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $D827.w		; CC 27 D8 ; Compare $D827.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc $30CF90.l		; 6F 90 CF 30 ; Add with carry (long) $30CF90.l [Writes: Accumulator] [Flags: ZVNC]
	eor $9F.b,S		; 43 9F ; Exclusive OR accumulator with stack relative $9F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $3F.b,S		; 03 3F ; OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy #$7F.b		; C0 7F ; Compare #$7F.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $80, $27		; 80 27 ; Branch always to $80, $27 [Flow: branch]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $BF0B00.l,X		; FF 00 0B BF ; Subtract with carry (long,X) $BF0B00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cmp $986730.l		; CF 30 67 98 ; Compare accumulator (long) $986730.l [Reads: Accumulator] [Flags: ZNC]
	and [$C8.b],Y		; 37 C8 ; AND accumulator with memory (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($CC.b,S),Y		; 33 CC ; AND accumulator (stack relative indirect indexed) ($CC.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy $27.b		; C4 27 ; Compare $27.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $4926.w,Y		; D9 26 49 ; Compare accumulator $4926.w,Y [Reads: Y Index] [Flags: ZNC]
	sta $0366.w,Y		; 99 66 03 ; Store accumulator to $0366.w,Y [Reads: Accumulator, Y Index]
	sty $CC73.w		; 8C 73 CC ; Store Y register to $CC73.w [Reads: Y Index]
	and ($27.b,S),Y		; 33 27 ; AND accumulator (stack relative indirect indexed) ($27.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$3F.b]		; C7 3F ; Compare accumulator (long) [$3F.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	eor $83.b,S		; 43 83 ; Exclusive OR accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $7F8745.l,X		; 7F 45 87 7F ; Add long $7F8745.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $83.b,S		; 03 83 ; OR accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $273FC3.l,X		; 7F C3 3F 27 ; Add long $273FC3.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $27072F.l		; 0F 2F 07 27 ; OR accumulator with memory (long) $27072F.l [Writes: Accumulator] [Flags: ZN]
	ora $23.b,S		; 03 23 ; OR accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr $9030.w		; 20 30 90 ; Jump to subroutine at $9030.w [Writes: Stack Pointer] [Flow: call]
	sta $E0C7C4.l,X		; 9F C4 C7 E0 ; Store accumulator (long,X) $E0C7C4.l,X [Reads: Accumulator, X Index]
	cpx #$F8.b		; E0 F8 ; Compare #$F8.b with X register [Reads: X Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	jmp.w [$60CF]		; DC CF 60 ; Jump long indirect [$60CF] [Flow: jump]
	sec		; 38 ; Set carry flag [Flags: C]
	ora $2FE407.l,X		; 1F 07 E4 2F ; Logical OR long $2FE407.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $030685.l,X		; FF 85 06 03 ; Subtract with carry (long,X) $030685.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$DD.b		; 09 DD ; Logical OR #$DD.b with accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $F711EE.l		; 22 EE 11 F7 ; Jump to subroutine long $F711EE.l [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	bit $ED.b		; 24 ED ; Test bits $ED.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($27.b)		; 12 27 ; OR accumulator with memory (indirect) ($27.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $47.b		; 00 47 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $DF.b		; 45 DF ; Exclusive OR $DF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $FB23.w		; 20 23 FB ; Jump to subroutine at $FB23.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $E809DF.l		; 22 DF 09 E8 ; Jump to subroutine long $E809DF.l [Writes: Stack Pointer] [Flow: call]
	ora [$EC.b],Y		; 17 EC ; OR accumulator with memory (long indexed) [$EC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($EE.b,S),Y		; 13 EE ; OR accumulator (stack relative indirect indexed) ($EE.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($E6.b),Y		; 11 E6 ; OR accumulator with memory ($E6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0DF2.w,Y		; 19 F2 0D ; OR accumulator with memory $0DF2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $F8.b,S		; 43 F8 ; Exclusive OR accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ora [$27.b],Y		; 17 27 ; OR accumulator with memory (long indexed) [$27.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $7FFF44.l,X		; 3F 44 FF 7F ; AND accumulator with memory (long,X) $7FFF44.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $78.b		; 45 78 ; Exclusive OR $78.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $7FFF03.l,X		; FF 03 FF 7F ; Subtract with carry (long,X) $7FFF03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $00277F.l		; 8F 7F 27 00 ; Store accumulator (long) $00277F.l [Reads: Accumulator]
	sta $2201E0.l		; 8F E0 01 22 ; Store accumulator (long) $2201E0.l [Reads: Accumulator]
	ora ($94.b,X)		; 01 94 ; Logical OR ($94.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc ($01.b,S),Y		; F3 01 ; Subtract with carry (stack relative indirect indexed) ($01.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $0B8400.l		; 22 00 84 0B ; Jump to subroutine long $0B8400.l [Writes: Stack Pointer] [Flow: call]
	cop $E0.b		; 02 E0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $10.b,X		; 34 10 ; Test bits $10.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	trb $EF.b		; 14 EF ; Test and reset bits $EF.b [Reads: Accumulator] [Flags: Z]
	jsr ($9C07.w,X)		; FC 07 9C ; Jump to subroutine indirect indexed ($9C07.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	adc $B757AC.l		; 6F AC 57 B7 ; Add with carry (long) $B757AC.l [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp $000007.l,X		; DF 07 00 00 ; Compare accumulator (long,X) $000007.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	jsr $0810.w		; 20 10 08 ; Jump to subroutine at $0810.w [Writes: Stack Pointer] [Flow: call]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $031E.w,X		; 1E 1E 03 ; Arithmetic shift left $031E.w,X [Reads: X Index] [Flags: ZNC]
	cop $47.b		; 02 47 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $79,$7E		; 44 7E 79 ; Move block positive $79,$7E [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tsb $A833.w		; 0C 33 A8 ; Test and set bits $A833.w [Reads: Accumulator] [Flags: Z]
	lda [$E8.b],Y		; B7 E8 ; Load accumulator (long indexed) [$E8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$C8.b],Y		; F7 C8 ; Subtract with carry (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($80B8.w,X)		; FC B8 80 ; Jump to subroutine indirect indexed ($80B8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpy #$40.b		; C0 40 ; Compare #$40.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $F18EF0.l		; 8F F0 8E F1 ; Store accumulator (long) $F18EF0.l [Reads: Accumulator]
	sta [$44.b]		; 87 44 ; Store accumulator (long) [$44.b] [Reads: Accumulator, Direct Page]
	sed		; F8 ; Set decimal flag [Flags: D]
	cmp [$45.b]		; C7 45 ; Compare accumulator (long) [$45.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc $FC.b,S		; E3 FC ; Subtract stack-relative $FC.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $D02F80.l,X		; 7F 80 2F D0 ; Add long $D02F80.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor [$37.b]		; 47 37 ; Exclusive OR accumulator with memory (long) [$37.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $FC03.w		; 1C 03 FC ; Test and reset bits $FC03.w [Reads: Accumulator] [Flags: Z]
	jsr ($8383.w,X)		; FC 83 83 ; Jump to subroutine indirect indexed ($8383.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc $CF3FDF.l,X		; 7F DF 3F CF ; Add long $CF3FDF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $817F9F.l,X		; 3F 9F 7F 81 ; AND accumulator with memory (long,X) $817F9F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc ($60.b,X)		; 61 60 ; Add with carry ($60.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $7C8300.l,X		; 9F 00 83 7C ; Store accumulator (long,X) $7C8300.l,X [Reads: Accumulator, X Index]
	jsr $6030.w		; 20 30 60 ; Jump to subroutine at $6030.w [Writes: Stack Pointer] [Flow: call]
	rol $FF1F.w,X		; 3E 1F FF ; Rotate left $FF1F.w,X [Reads: X Index] [Flags: ZNC]
	ora $E0E01F.l,X		; 1F 1F E0 E0 ; Logical OR long $E0E01F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $F30FFF.l		; 22 FF 0F F3 ; Jump to subroutine long $F30FFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $101F1F.l,X		; FF 1F 1F 10 ; Subtract with carry (long,X) $101F1F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($01.b),Y		; F1 01 ; Subtract with carry ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1FE01F.l,X		; FF 1F E0 1F ; Subtract with carry (long,X) $1FE01F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$EE.b		; E0 EE ; Compare #$EE.b with X register [Reads: X Index] [Flags: ZNC]
	inc $FF48.w,X		; FE 48 FF ; Increment memory $FF48.w,X [Reads: X Index] [Flags: ZN]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF7FFF.l,X		; 1F FF 7F FF ; Logical OR long $FF7FFF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $23FFCE.l,X		; FF CE FF 23 ; Subtract with carry (long,X) $23FFCE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $C0837F.l,X		; 1F 7F 83 C0 ; Logical OR long $C0837F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF1FFF.l,X		; 3F FF 1F FF ; AND accumulator with memory (long,X) $FF1FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $4507FF.l		; 0F FF 07 45 ; OR accumulator with memory (long) $4507FF.l [Writes: Accumulator] [Flags: ZN]
	sbc $FF3200.l,X		; FF 00 32 FF ; Subtract with carry (long,X) $FF3200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $FF,$00		; 44 00 FF ; Move block positive $FF,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lsr $FF00.w		; 4E 00 FF ; Logical shift right $FF00.w [Flags: ZNC]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $050023.l,X		; FF 23 00 05 ; Subtract with carry (long,X) $050023.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $0B8C80.l,X		; 7F 80 8C 0B ; Add long $0B8C80.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	adc [$45.b],Y		; 77 45 ; Add with carry (long indexed) [$45.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$6F.b],Y		; F7 6F ; Subtract with carry (long indexed) [$6F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $700000.l		; 22 00 00 70 ; Jump to subroutine long $700000.l [Writes: Stack Pointer] [Flow: call]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0B.b,S		; 03 0B ; OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$45.b]		; 07 45 ; OR accumulator with memory (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$0F.b],Y		; 17 0F ; OR accumulator with memory (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $75837D.l		; 0F 7D 83 75 ; OR accumulator with memory (long) $75837D.l [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	eor $6F94.w,X		; 5D 94 6F ; Exclusive OR accumulator with memory $6F94.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc [$85.b],Y		; 77 85 ; Add with carry (long indexed) [$85.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $C101.w,X		; FE 01 C1 ; Increment memory $C101.w,X [Reads: X Index] [Flags: ZN]
	rol $0027.w,X		; 3E 27 00 ; Rotate left $0027.w,X [Reads: X Index] [Flags: ZNC]
	ora [$E1.b],Y		; 17 E1 ; OR accumulator with memory (long indexed) [$E1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $1C7F87.l,X		; 1F 87 7F 1C ; Logical OR long $1C7F87.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $C1FF70.l,X		; FF 70 FF C1 ; Subtract with carry (long,X) $C1FF70.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $F807.w,X		; FE 07 F8 ; Increment memory $F807.w,X [Reads: X Index] [Flags: ZN]
	asl $78E1.w,X		; 1E E1 78 ; Arithmetic shift left $78E1.w,X [Reads: X Index] [Flags: ZNC]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Accumulator, Direct Page]
	adc $FEFFFF.l,X		; 7F FF FF FE ; Add long $FEFFFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc ($87.b,X)		; E1 87 ; Subtract with carry ($87.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $277F82.l		; 4F 82 7F 27 ; Exclusive OR accumulator with memory (long) $277F82.l [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $DA.b,X		; 35 DA ; Logical AND $DA.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$37.b]		; 47 37 ; Exclusive OR accumulator with memory (long) [$37.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	jmp.w [$CE35]		; DC 35 CE ; Jump long indirect [$CE35] [Flow: jump]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc [$02.b]		; E7 02 ; Subtract with carry (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	.db $10, $80		; 10 80 ; Branch if plus to $10, $80 [Flow: branch]
	ror $3FC1.w,X		; 7E C1 3F ; Rotate right $3FC1.w,X [Reads: X Index] [Flags: ZNC]
	sbc ($1F.b,X)		; E1 1F ; Subtract with carry ($1F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($2F.b),Y		; D1 2F ; Compare accumulator ($2F.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp #$37.b		; C9 37 ; Compare #$37.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp $3B.b		; C5 3B ; Compare $3B.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $3D.b,S		; C3 3D ; Compare accumulator (stack relative) $3D.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cpx #$1F.b		; E0 1F ; Compare #$1F.b with X register [Reads: X Index] [Flags: ZNC]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $081900.l		; 0F 00 19 08 ; OR accumulator with memory (long) $081900.l [Writes: Accumulator] [Flags: ZN]
	and ($16.b),Y		; 31 16 ; AND accumulator with memory ($16.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $2A.b		; 65 2A ; Add $2A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $B552.w		; CD 52 B5 ; Compare $B552.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jsl $E52295.l		; 22 95 22 E5 ; Jump to subroutine long $E52295.l [Writes: Stack Pointer] [Flow: call]
	.db $42, $00		; 42 00 ; Reserved instruction
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZNC]
	.db $10, $20		; 10 20 ; Branch if plus to $10, $20 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $7F46BF.l,X		; 3F BF 46 7F ; AND accumulator with memory (long,X) $7F46BF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $40C002.l,X		; FF 02 C0 40 ; Subtract with carry (long,X) $40C002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $26		; 80 26 ; Branch always to $80, $26 [Flow: branch]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $F1307F.l,X		; 3F 7F 30 F1 ; AND accumulator with memory (long,X) $F1307F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $E727E2.l		; 22 E2 27 E7 ; Jump to subroutine long $E727E2.l [Writes: Stack Pointer] [Flow: call]
	eor $2F.b,S		; 43 2F ; Exclusive OR accumulator with stack relative $2F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF3E43.l		; EF 43 3E FF ; Subtract with carry (long) $FF3E43.l [Writes: Accumulator] [Flags: ZVNC]
	asl $3C.b		; 06 3C ; Arithmetic shift left $3C.b [Reads: Direct Page] [Flags: ZNC]
	sbc $181D0E.l,X		; FF 0E 1D 18 ; Subtract with carry (long,X) $181D0E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $23,$44		; 44 44 23 ; Move block positive $23,$44 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and $90.b,S		; 23 90 ; AND accumulator with stack relative $90.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $90, $43		; 90 43 ; Branch if carry clear to $90, $43 [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tsb $BB02.w		; 0C 02 BB ; Test and set bits $BB02.w [Reads: Accumulator] [Flags: Z]
	jmp.w [$246F]		; DC 6F 24 ; Jump long indirect [$246F] [Flow: jump]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $9F		; 80 9F ; Branch always to $80, $9F [Flow: branch]
	ora $7F.b,S		; 03 7F ; OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx #$9F.b		; E0 9F ; Compare #$9F.b with X register [Reads: X Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $80.b,S		; 43 80 ; Exclusive OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $E07F02.l,X		; 9F 02 7F E0 ; Store accumulator (long,X) $E07F02.l,X [Reads: Accumulator, X Index]
	sta $016022.l,X		; 9F 22 60 01 ; Store accumulator (long,X) $016022.l,X [Reads: Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $30.b,S		; 83 30 ; Store accumulator (stack relative) $30.b,S [Reads: Accumulator, Stack Pointer]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $60A360.l		; EF 60 A3 60 ; Subtract with carry (long) $60A360.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $7938.w,Y		; F9 38 79 ; Subtract with carry $7938.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	eor $7938.w,Y		; 59 38 79 ; Exclusive OR accumulator with memory $7938.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $361C.w		; 2C 1C 36 ; Test bits $361C.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	asl $1D13.w		; 0E 13 1D ; Arithmetic shift left $1D13.w [Flags: ZNC]
	and $06.b,S		; 23 06 ; AND accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $2FE000.l,X		; FF 00 E0 2F ; Subtract with carry (long,X) $2FE000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FC00.w,X		; FE 00 FC ; Increment memory $FC00.w,X [Reads: X Index] [Flags: ZN]
	jsr ($5515.w,X)		; FC 15 55 ; Jump to subroutine indirect indexed ($5515.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	lda ($FB.b,S),Y		; B3 FB ; Load accumulator (stack relative indirect indexed) ($FB.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $07.b,X		; F6 07 ; Increment memory $07.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc $FEFF07.l		; EF 07 FF FE ; Subtract with carry (long) $FEFF07.l [Writes: Accumulator] [Flags: ZVNC]
	ora ($BB.b,X)		; 01 BB ; Logical OR ($BB.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ora [$0E.b]		; 07 0E ; OR accumulator with memory (long) [$0E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $AF.b,X		; 16 AF ; Arithmetic shift left $AF.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $50, $7C		; 50 7C ; Branch if overflow clear to $50, $7C [Flow: branch]
	sta $18.b,S		; 83 18 ; Store accumulator (stack relative) $18.b,S [Reads: Accumulator, Stack Pointer]
	cpx $B0.b		; E4 B0 ; Compare $B0.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $AE9C.w		; 6D 9C AE ; Add $AE9C.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	adc $000099.l		; 6F 99 00 00 ; Add with carry (long) $000099.l [Writes: Accumulator] [Flags: ZVNC]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc [$6F.b],Y		; F7 6F ; Subtract with carry (long indexed) [$6F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $6E.b,X		; F6 6E ; Increment memory $6E.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	eor $F4.b,S		; 43 F4 ; Exclusive OR accumulator with stack relative $F4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jmp ($F103.w)		; 6C 03 F1 ; Jump indirect to ($F103.w) [Flow: jump]
	adc #$F2.b		; 69 F2 ; Add #$F2.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $F4.b,S		; 43 F4 ; Exclusive OR accumulator with stack relative $F4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $01000B.l		; 6F 0B 00 01 ; Add with carry (long) $01000B.l [Writes: Accumulator] [Flags: ZVNC]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$0F.b],Y		; 17 0F ; OR accumulator with memory (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $0E.b,X		; 16 0E ; Arithmetic shift left $0E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $14.b,S		; 43 14 ; Exclusive OR accumulator with stack relative $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $1103.w		; 0C 03 11 ; Test and set bits $1103.w [Reads: Accumulator] [Flags: Z]
	ora #$12.b		; 09 12 ; Logical OR #$12.b with accumulator [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor $14.b,S		; 43 14 ; Exclusive OR accumulator with stack relative $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $019087.l		; 0F 87 90 01 ; OR accumulator with memory (long) $019087.l [Writes: Accumulator] [Flags: ZN]
	cpx #$3E.b		; E0 3E ; Compare #$3E.b with X register [Reads: X Index] [Flags: ZNC]
	sta ($7E.b,X)		; 81 7E ; Store accumulator ($7E.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta [$78.b]		; 87 78 ; Store accumulator (long) [$78.b] [Reads: Accumulator, Direct Page]
	stx $D871.w		; 8E 71 D8 ; Store X register to $D871.w [Reads: X Index]
	and [$F1.b]		; 27 F1 ; AND accumulator with memory (long) [$F1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $C41FE7.l		; 0F E7 1F C4 ; OR accumulator with memory (long) $C41FE7.l [Writes: Accumulator] [Flags: ZN]
	and $7E3FC0.l,X		; 3F C0 3F 7E ; AND accumulator with memory (long,X) $7E3FC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc ($27.b),Y		; 71 27 ; Add with carry ($27.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $3F3F1F.l		; 0F 1F 3F 3F ; OR accumulator with memory (long) $3F3F1F.l [Writes: Accumulator] [Flags: ZN]
.ACCU 16
.INDEX 16
	rep #$3F		; C2 3F
	asl $38FF.w		; 0E FF 38 ; Arithmetic shift left $38FF.w [Flags: ZNC]
	sbc $83FEE1.l,X		; FF E1 FE 83 ; Subtract with carry (long,X) $83FEE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($F00F.w,X)		; FC 0F F0 ; Jump to subroutine indirect indexed ($F00F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $F0C3.w,X		; 3C C3 F0 ; Test bits $F0C3.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	tsb $FF3F.w		; 0C 3F FF ; Test and set bits $FF3F.w [Reads: Accumulator] [Flags: Z]
	sbc $F0FCFE.l,X		; FF FE FC F0 ; Subtract with carry (long,X) $F0FCFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$8203.w		; C0 03 82 ; Compare #$8203.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc $CA7F92.l,X		; 7F 92 7F CA ; Add long $CA7F92.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $331F66.l,X		; 3F 66 1F 33 ; AND accumulator with memory (long,X) $331F66.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0C0718.l		; 0F 18 07 0C ; OR accumulator with memory (long) $0C0718.l [Writes: Accumulator] [Flags: ZN]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $06F3.w		; 0D F3 06 ; Logical OR $06F3.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $FC03.w,Y		; F9 03 FC ; Subtract with carry $FC03.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $00FF44.l,X		; FF 44 FF 00 ; Subtract with carry (long,X) $00FF44.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $00.b,Y		; 96 00 ; Store X register $00.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ora #$7D83.w		; 09 83 7D ; Logical OR #$7D83.w with accumulator [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $59FF71.l,X		; FF 71 FF 59 ; Subtract with carry (long,X) $59FF71.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $2557D5.l,X		; DF D5 57 25 ; Compare accumulator (long,X) $2557D5.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $A728.w		; 20 28 A7 ; Jump to subroutine at $A728.w [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	lda [$42.b]		; A7 42 ; Load accumulator (long) [$42.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $4ABD44.l		; AF 44 BD 4A ; Load long $4ABD44.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $F512.w,X		; FD 12 F5 ; Subtract with carry $F512.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $42, $A7		; 42 A7 ; Reserved instruction
	.db $42, $AD		; 42 AD ; Reserved instruction
	lsr $27.b		; 46 27 ; Logical shift right $27.b [Reads: Direct Page] [Flags: ZNC]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $3FA01F.l,X		; 9F 1F A0 3F ; Store accumulator (long,X) $3FA01F.l,X [Reads: Accumulator, X Index]
	cmp [$78.b]		; C7 78 ; Compare accumulator (long) [$78.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cpy DMASRC7H.w		; CC 73 43 ; Compare DMASRC7H.w with Y register [Reads: Y Index] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	stz $05.b,X		; 74 05 ; Store zero to $05.b,X [Reads: X Index]
	cmp $0C7C73.l		; CF 73 7C 0C ; Compare accumulator (long) $0C7C73.l [Reads: Accumulator] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $4EBC.w		; 0C BC 4E ; Test and set bits $4EBC.w [Reads: Accumulator] [Flags: Z]
	adc $003FB8.l,X		; 7F B8 3F 00 ; Add long $003FB8.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $80.b		; 05 80 ; Logical OR $80.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($F3.b)		; 12 F3 ; OR accumulator with memory (indirect) ($F3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $4300FF.l,X		; 7F FF 00 43 ; Add long $4300FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tsb $D206.w		; 0C 06 D2 ; Test and set bits $D206.w [Reads: Accumulator] [Flags: Z]
	ora ($C0.b)		; 12 C0 ; OR accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $6D80FF.l,X		; BF FF 80 6D ; Load long $6D80FF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $2D.b		; 02 2D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $10.b,S		; 83 10 ; Store accumulator (stack relative) $10.b,S [Reads: Accumulator, Stack Pointer]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $FF0002.l,X		; FF 02 00 FF ; Subtract with carry (long,X) $FF0002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $070028.l,X		; FF 28 00 07 ; Subtract with carry (long,X) $070028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor ($2F.b,S),Y		; 53 2F ; XOR accumulator (stack relative indirect indexed) ($2F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit #$E417.w		; 89 17 E4 ; Test bits #$E417.w with accumulator [Reads: Accumulator] [Flags: Z]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lda ($5D.b)		; B2 5D ; Load accumulator (indirect) ($5D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $B1.b,S		; 43 B1 ; Exclusive OR accumulator with stack relative $B1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr $C706.w,X		; 5E 06 C7 ; Logical shift right $C706.w,X [Reads: X Index] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	adc $0000.w,Y		; 79 00 00 ; Add $0000.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $24		; 10 24 ; Branch if plus to $10, $24 [Flow: branch]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sty $94D4.w		; 8C D4 94 ; Store Y register to $94D4.w [Reads: Y Index]
	sbc $4CFB80.l,X		; FF 80 FB 4C ; Subtract with carry (long,X) $4CFB80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $243F20.l,X		; 7F 20 3F 24 ; Add long $243F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $AB		; 80 AB ; Branch always to $80, $AB [Flow: branch]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	adc ($3F.b,X)		; 61 3F ; Add with carry ($3F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda [$4D.b],Y		; B7 4D ; Load accumulator (long indexed) [$4D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	and [$FD.b]		; 27 FD ; AND accumulator with memory (long) [$FD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $62, $DF, $30		; 62 DF 30 ; Push effective relative address $62, $DF, $30 [Writes: Stack Pointer]
	adc $FF4398.l		; 6F 98 43 FF ; Add with carry (long) $FF4398.l [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	pea $036F.w		; F4 6F 03 ; Push absolute address $036F.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	cpx $F777.w		; EC 77 F7 ; Compare $F777.w with X register [Reads: X Index] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $14.b,S		; 43 14 ; Exclusive OR accumulator with stack relative $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0F7401.l		; 0F 01 74 0F ; OR accumulator with memory (long) $0F7401.l [Writes: Accumulator] [Flags: ZN]
	eor $F4.b		; 45 F4 ; Exclusive OR $F4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $030C83.l		; 6F 83 0C 03 ; Add with carry (long) $030C83.l [Writes: Accumulator] [Flags: ZVNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $83.b		; 14 83 ; Test and reset bits $83.b [Reads: Accumulator] [Flags: Z]
	jmp ($7887.w,X)		; 7C 87 78 ; Jump indirect indexed to ($7887.w,X) [Reads: X Index] [Flow: jump]
	sty $D873.w		; 8C 73 D8 ; Store Y register to $D873.w [Reads: Y Index]
	bit $F1.b		; 24 F1 ; Test bits $F1.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $15E1.w		; 0D E1 15 ; Logical OR $15E1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp ($35.b),Y		; D1 35 ; Compare accumulator ($35.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	lda ($75.b),Y		; B1 75 ; Load accumulator ($75.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($7078.w,X)		; 7C 78 70 ; Jump indirect indexed to ($7078.w,X) [Reads: X Index] [Flow: jump]
	and $02.b,S		; 23 02 ; AND accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $C3050A.l		; 22 0A 05 C3 ; Jump to subroutine long $C3050A.l [Writes: Stack Pointer] [Flow: call]
	and ($0F.b,S),Y		; 33 0F ; AND accumulator (stack relative indirect indexed) ($0F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $273F3F.l		; CF 3F 3F 27 ; Compare accumulator (long) $273F3F.l [Reads: Accumulator] [Flags: ZNC]
	sbc $FEFE04.l,X		; FF 04 FE FE ; Subtract with carry (long,X) $FEFE04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $C030.w		; 0C 30 C0 ; Test and set bits $C030.w [Reads: Accumulator] [Flags: Z]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $4F0F.w		; 4D 0F 4F ; Exclusive OR $4F0F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rol $B0.b		; 26 B0 ; Rotate left $B0.b [Reads: Direct Page] [Flags: ZNC]
	trb $BF.b		; 14 BF ; Test and reset bits $BF.b [Reads: Accumulator] [Flags: Z]
	cmp $A8CFA0.l		; CF A0 CF A8 ; Compare accumulator (long) $A8CFA0.l [Reads: Accumulator] [Flags: ZNC]
	cmp [$B4.b],Y		; D7 B4 ; Compare accumulator (long indexed) [$B4.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sbc [$DF.b]		; E7 DF ; Subtract with carry (long) [$DF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $EF		; F0 EF ; Branch if equal to $F0, $EF [Flow: branch]
	sbc $0000F0.l,X		; FF F0 00 00 ; Subtract with carry (long,X) $0000F0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$13.b],Y		; 17 13 ; OR accumulator with memory (long indexed) [$13.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$22.b]		; 07 22 ; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $DC5BDB.l,X		; FF DB 5B DC ; Subtract with carry (long,X) $DC5BDB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp $5FDF43.l		; 5C 43 DF 5F ; Jump long to $5FDF43.l [Flow: jump]
	tsb $40C0.w		; 0C C0 40 ; Test and set bits $40C0.w [Reads: Accumulator] [Flags: Z]
	lda $7D827F.l,X		; BF 7F 82 7D ; Load long $7D827F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $2400.w,X		; FD 00 24 ; Subtract with carry $2400.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $20.b,S		; 23 20 ; AND accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr $223F.w		; 20 3F 22 ; Jump to subroutine at $223F.w [Writes: Stack Pointer] [Flow: call]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tsb $58B6.w		; 0C B6 58 ; Test and set bits $58B6.w [Reads: Accumulator] [Flags: Z]
	ldy $B850.w		; AC 50 B8 ; Load $B850.w into Y register [Writes: Y Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $B0, $40		; B0 40 ; Branch if carry set to $B0, $40 [Flow: branch]
	cpx #$002C.w		; E0 2C 00 ; Compare #$002C.w with X register [Reads: X Index] [Flags: ZNC]
	ora $C6639C.l		; 0F 9C 63 C6 ; OR accumulator with memory (long) $C6639C.l [Writes: Accumulator] [Flags: ZN]
	adc $7CC3.w,Y		; 79 C3 7C ; Add $7CC3.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and $C45F9F.l,X		; 3F 9F 5F C4 ; AND accumulator with memory (long,X) $C45F9F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $87F8.w,X		; 3C F8 87 ; Test bits $87F8.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sbc $0022F8.l,X		; FF F8 22 00 ; Subtract with carry (long,X) $0022F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $2040.w		; 0E 40 20 ; Arithmetic shift left $2040.w [Flags: ZNC]
	ora $80.b,S		; 03 80 ; OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $70, $7F		; 70 7F ; Branch if overflow set to $70, $7F [Flow: branch]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sta [$F8.b]		; 87 F8 ; Store accumulator (long) [$F8.b] [Reads: Accumulator, Direct Page]
	sta $E01FF0.l		; 8F F0 1F E0 ; Store accumulator (long) $E01FF0.l [Reads: Accumulator]
	eor $9F.b,S		; 43 9F ; Exclusive OR accumulator with stack relative $9F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $93.b		; 02 93 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($2880.w)		; 6C 80 28 ; Jump indirect to ($2880.w) [Flow: jump]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1C.b		; 25 1C ; Logical AND $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $29		; 10 29 ; Branch if plus to $10, $29 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $1C.b		; 25 1C ; Logical AND $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $0B351D.l		; 22 1D 35 0B ; Jump to subroutine long $0B351D.l [Writes: Stack Pointer] [Flow: call]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $67.b,S		; 03 67 ; OR accumulator with stack relative $67.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $777090.l,X		; 1F 90 70 77 ; Logical OR long $777090.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $C7		; F0 C7 ; Branch if equal to $F0, $C7 [Flow: branch]
	cpy #$000F.w		; C0 0F 00 ; Compare #$000F.w with Y register [Reads: Y Index] [Flags: ZNC]
	jsr ($2203.w,X)		; FC 03 22 ; Jump to subroutine indirect indexed ($2203.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $F73B08.l		; 0F 08 3B F7 ; OR accumulator with memory (long) $F73B08.l [Writes: Accumulator] [Flags: ZN]
	ora $CF00FF.l		; 0F FF 00 CF ; OR accumulator with memory (long) $CF00FF.l [Writes: Accumulator] [Flags: ZN]
	cmp $7F0830.l		; CF 30 08 7F ; Compare accumulator (long) $7F0830.l [Reads: Accumulator] [Flags: ZNC]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	sbc $C03F06.l,X		; FF 06 3F C0 ; Subtract with carry (long,X) $C03F06.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$B0.b]		; C7 B0 ; Compare accumulator (long) [$B0.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	adc $04FF23.l,X		; 7F 23 FF 04 ; Add long $04FF23.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $C7.b		; 00 C7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$38.b]		; C7 38 ; Compare accumulator (long) [$38.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	mvp $FF,$49		; 44 49 FF ; Move block positive $FF,$49 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $38.b,S		; 83 38 ; Store accumulator (stack relative) $38.b,S [Reads: Accumulator, Stack Pointer]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $C005FF.l,X		; 7F FF 05 C0 ; Add long $C005FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ldy $FF53.w		; AC 53 FF ; Load $FF53.w into Y register [Writes: Y Index] [Flags: ZN]
	bit $0024.w		; 2C 24 00 ; Test bits $0024.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	asl $3F.b		; 06 3F ; Arithmetic shift left $3F.b [Reads: Direct Page] [Flags: ZNC]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C0C0FF.l,X		; FF FF C0 C0 ; Subtract with carry (long,X) $C0C0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $400B3F.l		; 22 3F 0B 40 ; Jump to subroutine long $400B3F.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $4F		; 30 4F ; Branch if minus to $30, $4F [Flow: branch]
	and $D9265F.l		; 2F 5F 26 D9 ; AND accumulator with memory (long) $D9265F.l [Writes: Accumulator] [Flags: ZN]
	sbc $3F0026.l,X		; FF 26 00 3F ; Subtract with carry (long,X) $3F0026.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$8022.w		; C0 22 80 ; Compare #$8022.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $0E.b		; 26 0E ; Rotate left $0E.b [Reads: Direct Page] [Flags: ZNC]
	sbc ($39.b),Y		; F1 39 ; Subtract with carry ($39.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$E7.b]		; C7 E7 ; Compare accumulator (long) [$E7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $7F7F9F.l,X		; 1F 9F 7F 7F ; Logical OR long $7F7F9F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $F8FEFE.l,X		; FF FE FE F8 ; Subtract with carry (long,X) $F8FEFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $E3.b,S		; E3 E3 ; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	.db $F0, $C0		; F0 C0 ; Branch if equal to $F0, $C0 [Flow: branch]
	jsl $010200.l		; 22 00 02 01 ; Jump to subroutine long $010200.l [Writes: Stack Pointer] [Flow: call]
	ora [$1C.b]		; 07 1C ; OR accumulator with memory (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta [$88.b]		; 87 88 ; Store accumulator (long) [$88.b] [Reads: Accumulator, Direct Page]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	sty $308F.w		; 8C 8F 30 ; Store Y register to $308F.w [Reads: Y Index]
	and $FF43C0.l,X		; 3F C0 43 FF ; AND accumulator with memory (long,X) $FF43C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $C070.w		; 1C 70 C0 ; Test and reset bits $C070.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F1.b,X		; F5 F1 ; Subtract $F1.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	mvp $F4,$F0		; 44 F0 F4 ; Move block positive $F4,$F0 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $F2.b		; 00 F2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $0A.b		; 24 0A ; Test bits $0A.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	clc		; 18 ; Clear carry flag [Flags: C]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $FCFC.w		; 0D FC FC ; Logical OR $FCFC.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sta $3F3F8F.l		; 8F 8F 3F 3F ; Store accumulator (long) $3F3F8F.l [Reads: Accumulator]
	adc $FFFF7F.l,X		; 7F 7F FF FF ; Add long $FFFF7F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($03FF.w,X)		; FC FF 03 ; Jump to subroutine indirect indexed ($03FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $C0703C.l		; 0F 3C 70 C0 ; OR accumulator with memory (long) $C0703C.l [Writes: Accumulator] [Flags: ZN]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor $1F.b,S		; 43 1F ; Exclusive OR accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $6F0F0E.l,X		; 5F 0E 0F 6F ; Exclusive OR accumulator with memory (long,X) $6F0F0E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $90, $BF		; 90 BF ; Branch if carry clear to $90, $BF [Flow: branch]
	.db $D0, $EF		; D0 EF ; Branch if not equal to $D0, $EF [Flow: branch]
	ora $C03FF0.l		; 0F F0 3F C0 ; OR accumulator with memory (long) $C03FF0.l [Writes: Accumulator] [Flags: ZN]
	lda $90A0A0.l,X		; BF A0 A0 90 ; Load long $90A0A0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $00FF44.l,X		; FF 44 FF 00 ; Subtract with carry (long,X) $00FF44.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	sta $4C.b,S		; 83 4C ; Store accumulator (stack relative) $4C.b,S [Reads: Accumulator, Stack Pointer]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$03FF.w		; C0 FF 03 ; Compare #$03FF.w with Y register [Reads: Y Index] [Flags: ZNC]
	jsr ($8087.w,X)		; FC 87 80 ; Jump to subroutine indirect indexed ($8087.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsb $22.b		; 04 22 ; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
	sbc $83FC00.l,X		; FF 00 FC 83 ; Subtract with carry (long,X) $83FC00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	eor $277CFB.l		; 4F FB 7C 27 ; Exclusive OR accumulator with memory (long) $277CFB.l [Writes: Accumulator] [Flags: ZN]
	brk $4D.b		; 00 4D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	jmp ($F801.w,X)		; 7C 01 F8 ; Jump indirect indexed to ($F801.w,X) [Reads: X Index] [Flow: jump]
	adc $0F0027.l,X		; 7F 27 00 0F ; Add long $0F0027.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $4C26.w,Y		; D9 26 4C ; Compare accumulator $4C26.w,Y [Reads: Y Index] [Flags: ZNC]
	lda ($66.b,S),Y		; B3 66 ; Load accumulator (stack relative indirect indexed) ($66.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $CC33.w,Y		; 99 33 CC ; Store accumulator to $CC33.w,Y [Reads: Accumulator, Y Index]
	ora $0DE6.w,Y		; 19 E6 0D ; OR accumulator with memory $0DE6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($03.b,S),Y		; F3 03 ; Subtract with carry (stack relative indirect indexed) ($03.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $27FF07.l,X		; FF 07 FF 27 ; Subtract with carry (long,X) $27FF07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $0C.b,X		; 35 0C ; Logical AND $0C.b,X with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $7D1C.w		; 2D 1C 7D ; Logical AND $7D1C.w with accumulator [Writes: Accumulator] [Flags: ZN]
	trb $3859.w		; 1C 59 38 ; Test and reset bits $3859.w [Reads: Accumulator] [Flags: Z]
	adc ($32.b,S),Y		; 73 32 ; Add with carry (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$20.b]		; E7 20 ; Subtract with carry (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $40CF40.l		; 8F 40 CF 40 ; Store accumulator (long) $40CF40.l [Reads: Accumulator]
	jsl $060402.l		; 22 02 04 06 ; Jump to subroutine long $060402.l [Writes: Stack Pointer] [Flow: call]
	tsb $3719.w		; 0C 19 37 ; Test and set bits $3719.w [Reads: Accumulator] [Flags: Z]
	and [$4F.b],Y		; 37 4F ; AND accumulator with memory (long indexed) [$4F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FF2700.l,X		; FF 00 27 FF ; Subtract with carry (long,X) $FF2700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$F00F.w		; 09 0F F0 ; Logical OR #$F00F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $3C.b,S		; C3 3C ; Compare accumulator (stack relative) $3C.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc ($1E.b,X)		; E1 1E ; Subtract with carry ($1E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tsb $43.b		; 04 43 ; Test and set bits $43.b [Reads: Accumulator] [Flags: Z]
	inc $0102.w,X		; FE 02 01 ; Increment memory $0102.w,X [Reads: X Index] [Flags: ZN]
	sbc $FF2301.l,X		; FF 01 23 FF ; Subtract with carry (long,X) $FF2301.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$FC20.w		; E0 20 FC ; Compare #$FC20.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $FCF9.w,Y		; F9 F9 FC ; Subtract with carry $FCF9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $01FE00.l,X		; FF 00 FE 01 ; Subtract with carry (long,X) $01FE00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($F802.w,X)		; FC 02 F8 ; Jump to subroutine indirect indexed ($F802.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsb $F1.b		; 04 F1 ; Test and set bits $F1.b [Reads: Accumulator] [Flags: Z]
	ora #$0303.w		; 09 03 03 ; Logical OR #$0303.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $FE3F.w		; 2E 3F FE ; Rotate left $FE3F.w [Flags: ZNC]
	jsr ($F3F9.w,X)		; FC F9 F3 ; Jump to subroutine indirect indexed ($F3F9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	asl $FC.b		; 06 FC ; Arithmetic shift left $FC.b [Reads: Direct Page] [Flags: ZNC]
	sty $C0.b		; 84 C0 ; Store Y register to $C0.b [Reads: Y Index]
	cpy #$FF3F.w		; C0 3F FF ; Compare #$FF3F.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $FF.b		; 46 FF ; Logical shift right $FF.b [Reads: Direct Page] [Flags: ZNC]
	.db $80, $83		; 80 83 ; Branch always to $80, $83 [Flow: branch]
	pea $2702.w		; F4 02 27 ; Push absolute address $2702.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	brk $49.b		; 00 49 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F00500.l,X		; FF 00 05 F0 ; Subtract with carry (long,X) $F00500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $C000FF.l		; 0F FF 00 C0 ; OR accumulator with memory (long) $C000FF.l [Writes: Accumulator] [Flags: ZN]
	and $FF0027.l,X		; 3F 27 00 FF ; AND accumulator with memory (long,X) $FF0027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpx #$0F21.w		; E0 21 0F ; Compare #$0F21.w with X register [Reads: X Index] [Flags: ZNC]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $3F.b		; 04 3F ; Test and set bits $3F.b [Reads: Accumulator] [Flags: Z]
	ora $E01777.l		; 0F 77 17 E0 ; OR accumulator with memory (long) $E01777.l [Writes: Accumulator] [Flags: ZN]
	jsr $47C7.w		; 20 C7 47 ; Jump to subroutine at $47C7.w [Writes: Stack Pointer] [Flow: call]
	cmp $BB4E.w		; CD 4E BB ; Compare $BB4E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	jmp ($0300.w,X)		; 7C 00 03 ; Jump indirect indexed to ($0300.w,X) [Reads: X Index] [Flow: jump]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $003038.l,X		; 1F 38 30 00 ; Logical OR long $003038.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $070700.l,X		; FF 00 07 07 ; Subtract with carry (long,X) $070700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($F1.b),Y		; F1 F1 ; Subtract with carry ($F1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp ($C07C.w,X)		; 7C 7C C0 ; Jump indirect indexed to ($C07C.w,X) [Reads: X Index] [Flow: jump]
	cpy #$FF22.w		; C0 22 FF ; Compare #$FF22.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $007E.w,X		; BD 7E 00 ; Load $007E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $223FFF.l,X		; FF FF 3F 22 ; Subtract with carry (long,X) $223FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $22DD40.l,X		; BF 40 DD 22 ; Load long $22DD40.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $F012.w		; ED 12 F0 ; Subtract $F012.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $9748B7.l		; 0F B7 48 97 ; OR accumulator with memory (long) $9748B7.l [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp [$38.b]		; C7 38 ; Compare accumulator (long) [$38.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc [$18.b]		; E7 18 ; Subtract with carry (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsl $4F0F12.l		; 22 12 0F 4F ; Jump to subroutine long $4F0F12.l [Writes: Stack Pointer] [Flow: call]
	adc $431F3F.l		; 6F 3F 1F 43 ; Add with carry (long) $431F3F.l [Writes: Accumulator] [Flags: ZVNC]
	sbc [$5F.b],Y		; F7 5F ; Subtract with carry (long indexed) [$5F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $F45BF3.l,X		; 1F F3 5B F4 ; Logical OR long $F45BF3.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp $B85FB3.l		; 5C B3 5F B8 ; Jump long to $B85FB3.l [Flow: jump]
	adc $AF37DF.l		; 6F DF 37 AF ; Add with carry (long) $AF37DF.l [Writes: Accumulator] [Flags: ZVNC]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	jsr $2420.w		; 20 20 24 ; Jump to subroutine at $2420.w [Writes: Stack Pointer] [Flow: call]
	and $20.b,S		; 23 20 ; AND accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	ora [$E0.b]		; 07 E0 ; OR accumulator with memory (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $BF70DF.l,X		; 7F DF 70 BF ; Add long $BF70DF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$F8.b]		; 67 F8 ; Add with carry (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $F05FF0.l		; 4F F0 5F F0 ; Exclusive OR accumulator with memory (long) $F05FF0.l [Writes: Accumulator] [Flags: ZN]
	jmp $5BF343.l		; 5C 43 F3 5B ; Jump long to $5BF343.l [Flow: jump]
	ora $180F00.l,X		; 1F 00 0F 18 ; Logical OR long $180F00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $20		; 30 20 ; Branch if minus to $30, $20 [Flow: branch]
	and $24.b,S		; 23 24 ; AND accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $4E.b		; 24 4E ; Test bits $4E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $4F.b,X		; 34 4F ; Test bits $4F.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $36.b,X		; 34 36 ; Test bits $36.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	tsb $27.b		; 04 27 ; Test and set bits $27.b [Reads: Accumulator] [Flags: Z]
	tsb $4D.b		; 04 4D ; Test and set bits $4D.b [Reads: Accumulator] [Flags: Z]
	tsb $9A.b		; 04 9A ; Test and set bits $9A.b [Reads: Accumulator] [Flags: Z]
	asl $1B95.w		; 0E 95 1B ; Arithmetic shift left $1B95.w [Flags: ZNC]
	cpx $0373.w		; EC 73 03 ; Compare $0373.w with X register [Reads: X Index] [Flags: ZNC]
	ora $0B.b,S		; 03 0B ; OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($60.b),Y		; 71 60 ; Add with carry ($60.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0DFE.w,X		; 7E FE 0D ; Rotate right $0DFE.w,X [Reads: X Index] [Flags: ZNC]
	ora $FF07FF.l		; 0F FF 07 FF ; OR accumulator with memory (long) $FF07FF.l [Writes: Accumulator] [Flags: ZN]
	.db $42, $BF		; 42 BF ; Reserved instruction
	cpx #$F01F.w		; E0 1F F0 ; Compare #$F01F.w with X register [Reads: X Index] [Flags: ZNC]
	ora $0100FF.l		; 0F FF 00 01 ; OR accumulator with memory (long) $0100FF.l [Writes: Accumulator] [Flags: ZN]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$43E0.w		; C0 E0 43 ; Compare #$43E0.w with Y register [Reads: Y Index] [Flags: ZNC]
	inc $0AFF.w,X		; FE FF 0A ; Increment memory $0AFF.w,X [Reads: X Index] [Flags: ZN]
	jsr ($78FF.w,X)		; FC FF 78 ; Jump to subroutine indirect indexed ($78FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $07FD32.l,X		; FF 32 FD 07 ; Subtract with carry (long,X) $07FD32.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora $26FFE0.l,X		; 1F E0 FF 26 ; Logical OR long $26FFE0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0F.b,S		; 03 0F ; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $253E.w,X		; 3D 3E 25 ; AND accumulator with memory $253E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $3629.w,X		; 3E 29 36 ; Rotate left $3629.w,X [Reads: X Index] [Flags: ZNC]
	eor $4772.w		; 4D 72 47 ; Exclusive OR $4772.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	eor $62.b,S		; 43 62 ; Exclusive OR accumulator with stack relative $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $2201.w,X		; 7D 01 22 ; Add $2201.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $C022.w,X		; 3D 22 C0 ; AND accumulator with memory $C022.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $80.b,S		; 23 80 ; AND accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cpy #$65E6.w		; C0 E6 65 ; Compare #$65E6.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc [$66.b]		; E7 66 ; Subtract with carry (long) [$66.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $63.b,S		; E3 63 ; Subtract stack-relative $63.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc ($71.b),Y		; F1 71 ; Subtract with carry ($71.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $70		; F0 70 ; Branch if equal to $F0, $70 [Flow: branch]
	eor $F8.b		; 45 F8 ; Exclusive OR $F8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	tsb $18.b		; 04 18 ; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $0F0E.w		; 1C 0E 0F ; Test and reset bits $0F0E.w [Reads: Accumulator] [Flags: Z]
	jsl $002907.l		; 22 07 29 00 ; Jump to subroutine long $002907.l [Writes: Stack Pointer] [Flow: call]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	ora $1F.b,S		; 03 1F ; OR accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $FF25F3.l,X		; 1F F3 25 FF ; Logical OR long $FF25F3.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $E0.b		; 46 E0 ; Logical shift right $E0.b [Reads: Direct Page] [Flags: ZNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0045FF.l,X		; 1F FF 45 00 ; Logical OR long $0045FF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpx #$1F05.w		; E0 05 1F ; Compare #$1F05.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $1F1F00.l,X		; FF 00 1F 1F ; Subtract with carry (long,X) $1F1F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$01.b],Y		; 17 01 ; OR accumulator with memory (long indexed) [$01.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $0C.b,S		; 23 0C ; AND accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	and ($32.b)		; 32 32 ; AND accumulator with memory (indirect) ($32.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FF7FFF.l,X		; FF FF 7F FF ; Subtract with carry (long,X) $FF7FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($F3.b,S),Y		; F3 F3 ; Subtract with carry (stack relative indirect indexed) ($F3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $2800.w		; 2D 00 28 ; Logical AND $2800.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $030010.l,X		; FF 10 00 03 ; Subtract with carry (long,X) $030010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $17.b,S		; 03 17 ; OR accumulator with stack relative $17.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $1C2F.w		; 0E 2F 1C ; Arithmetic shift left $1C2F.w [Flags: ZNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	and $3675.w,Y		; 39 75 36 ; AND accumulator with memory $3675.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldx $65.b		; A6 65 ; Load $65.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	inc $65.b		; E6 65 ; Increment $65.b [Reads: Direct Page] [Flags: ZN]
	jsl $010500.l		; 22 00 05 01 ; Jump to subroutine long $010500.l [Writes: Stack Pointer] [Flow: call]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $8FFF45.l,X		; FF 45 FF 8F ; Subtract with carry (long,X) $8FFF45.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $0F0027.l,X		; FF 27 00 0F ; Subtract with carry (long,X) $0F0027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $64FC70.l,X		; FF 70 FC 64 ; Subtract with carry (long,X) $64FC70.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $17F74F.l,X		; FF 4F F7 17 ; Subtract with carry (long,X) $17F74F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$8720.w		; E0 20 87 ; Compare #$8720.w with X register [Reads: X Index] [Flags: ZNC]
	eor [$8D.b]		; 47 8D ; Exclusive OR accumulator with memory (long) [$8D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $5C9B.w		; 4E 9B 5C ; Logical shift right $5C9B.w [Flags: ZNC]
	stx $10.b		; 86 10 ; Store X register to $10.b [Reads: X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $FF43.w		; 20 43 FF ; Jump to subroutine at $FF43.w [Writes: Stack Pointer] [Flow: call]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	mvp $7D,$0A		; 44 0A 7D ; Move block positive $7D,$0A [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $82, $7C, $83		; 82 7C 83 ; Branch always long to $82, $7C, $83 [Flow: branch]
	and ($DE.b,X)		; 21 DE ; Logical AND ($DE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	stz $00.b,X		; 74 00 ; Store zero to $00.b,X [Reads: X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	mvp $FF,$24		; 44 24 FF ; Move block positive $FF,$24 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cpx #$DFFF.w		; E0 FF DF ; Compare #$DFFF.w with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $BF		; F0 BF ; Branch if equal to $F0, $BF [Flow: branch]
	sbc [$78.b]		; E7 78 ; Subtract with carry (long) [$78.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $F0DF70.l		; CF 70 DF F0 ; Compare accumulator (long) $F0DF70.l [Reads: Accumulator] [Flags: ZNC]
	jmp $5BF343.l		; 5C 43 F3 5B ; Jump long to $5BF343.l [Flow: jump]
	cop $E0.b		; 02 E0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $738498.l		; CF 98 84 73 ; Compare accumulator (long) $738498.l [Reads: Accumulator] [Flags: ZNC]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clv		; B8 ; Clear overflow flag [Flags: V]
	eor [$BF.b]		; 47 BF ; Exclusive OR accumulator with memory (long) [$BF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ldx $D25C.w		; AE 5C D2 ; Load $D25C.w into X register [Writes: X Index] [Flags: ZN]
	bit $11EE.w		; 2C EE 11 ; Test bits $11EE.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	mvp $C3,$FD		; 44 FD C3 ; Move block positive $C3,$FD [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc $8300E8.l,X		; FF E8 00 83 ; Subtract with carry (long,X) $8300E8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $400500.l,X		; 9F 00 05 40 ; Store accumulator (long,X) $400500.l,X [Reads: Accumulator, X Index]
	cpy #$F3E8.w		; C0 E8 F3 ; Compare #$F3E8.w with Y register [Reads: Y Index] [Flags: ZNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	sbc $46.b,S		; E3 46 ; Subtract stack-relative $46.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	cmp ($01.b,S),Y		; D3 01 ; Compare accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	sbc $4B.b,S		; E3 4B ; Subtract stack-relative $4B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	eor $F3.b,S		; 43 F3 ; Exclusive OR accumulator with stack relative $F3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b		; 24 34 ; Test bits $34.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $43.b		; 24 43 ; Test bits $43.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	stz $0B63.w		; 9C 63 0B ; Store zero to $0B63.w
	dec $6731.w		; CE 31 67 ; Decrement $6731.w [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc ($2C.b,S),Y		; F3 2C ; Subtract with carry (stack relative indirect indexed) ($2C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($2C.b,S),Y		; B3 2C ; Load accumulator (stack relative indirect indexed) ($2C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ora $1AB7.w		; 0D B7 1A ; Logical OR $1AB7.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsl $A11340.l		; 22 40 13 A1 ; Jump to subroutine long $A11340.l [Writes: Stack Pointer] [Flow: call]
	adc #$6094.w		; 69 94 60 ; Add #$6094.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp $FF2C.w,X		; DD 2C FF ; Compare accumulator $FF2C.w,X [Reads: X Index] [Flags: ZNC]
	ora $9B6F93.l		; 0F 93 6F 9B ; OR accumulator with memory (long) $9B6F93.l [Writes: Accumulator] [Flags: ZN]
	adc [$CC.b],Y		; 77 CC ; Add with carry (long indexed) [$CC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $0F.b,X		; 16 0F ; Arithmetic shift left $0F.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$40.b]		; 07 40 ; OR accumulator with memory (long) [$40.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $10C0BF.l,X		; BF BF C0 10 ; Load long $10C0BF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $EF		; 10 EF ; Branch if plus to $10, $EF [Flow: branch]
	.db $10, $43		; 10 43 ; Branch if plus to $10, $43 [Flow: branch]
	sbc $3407EF.l,X		; FF EF 07 34 ; Subtract with carry (long,X) $3407EF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00EF10.l		; EF 10 EF 00 ; Subtract with carry (long) $00EF10.l [Writes: Accumulator] [Flags: ZVNC]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $010023.l		; EF 23 00 01 ; Subtract with carry (long) $010023.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $084300.l,X		; FF 00 43 08 ; Subtract with carry (long,X) $084300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$45.b],Y		; F7 45 ; Subtract with carry (long indexed) [$45.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$02.b]		; 07 02 ; OR accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($FF03.w,X)		; FC 03 FF ; Jump to subroutine indirect indexed ($FF03.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	jsr ($017C.w,X)		; FC 7C 01 ; Jump to subroutine indirect indexed ($017C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $03.b		; 25 03 ; Logical AND $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $C7.b		; 04 C7 ; Test and set bits $C7.b [Reads: Accumulator] [Flags: Z]
	sbc $3FFF0F.l,X		; FF 0F FF 3F ; Subtract with carry (long,X) $3FFF0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $FE07FF.l		; 22 FF 07 FE ; Jump to subroutine long $FE07FF.l [Writes: Stack Pointer] [Flow: call]
	inc $FCFC.w,X		; FE FC FC ; Increment memory $FCFC.w,X [Reads: X Index] [Flags: ZN]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	cpy #$23C0.w		; C0 C0 23 ; Compare #$23C0.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $00243F.l		; 0F 3F 24 00 ; OR accumulator with memory (long) $00243F.l [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $010025.l,X		; FF 25 00 01 ; Subtract with carry (long,X) $010025.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $8C84FF.l,X		; FF FF 84 8C ; Subtract with carry (long,X) $8C84FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $83.b		; 02 83 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $01.b,X		; 36 01 ; Rotate left $01.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $C1.b		; 05 C1 ; Logical OR $C1.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp ($C8.b,X)		; C1 C8 ; Compare accumulator ($C8.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sty $238C.w		; 8C 8C 23 ; Store Y register to $238C.w [Reads: Y Index]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	rep #$C2		; C2 C2 ; Reset processor status bits #$C2 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	jsl $F701FF.l		; 22 FF 01 F7 ; Jump to subroutine long $F701FF.l [Writes: Stack Pointer] [Flow: call]
	sbc ($24.b,S),Y		; F3 24 ; Subtract with carry (stack relative indirect indexed) ($24.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $058023.l,X		; FF 23 80 05 ; Subtract with carry (long,X) $058023.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $90, $90		; 90 90 ; Branch if carry clear to $90, $90 [Flow: branch]
	.db $82, $82, $23		; 82 82 23 ; Branch always long to $82, $82, $23 [Flow: branch]
	.db $80, $1C		; 80 1C ; Branch always to $80, $1C [Flow: branch]
	sbc $7F7FFF.l,X		; FF FF 7F 7F ; Subtract with carry (long,X) $7F7FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$6F.b]		; 67 6F ; Add with carry (long) [$6F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $7F7F.w,X		; 7D 7F 7F ; Add $7F7F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	bit #$8B79.w		; 89 79 8B ; Test bits #$8B79.w with accumulator [Reads: Accumulator] [Flags: Z]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	nop		; EA ; No operation
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc $FF0E.w,X		; FE 0E FF ; Increment memory $FF0E.w,X [Reads: X Index] [Flags: ZN]
	ora $040607.l		; 0F 07 06 04 ; OR accumulator with memory (long) $040607.l [Writes: Accumulator] [Flags: ZN]
	and $07.b,S		; 23 07 ; AND accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $273FDF.l		; 4F DF 3F 27 ; Exclusive OR accumulator with memory (long) $273FDF.l [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	mvp $27,$D8		; 44 D8 27 ; Move block positive $27,$D8 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc [$08.b],Y		; F7 08 ; Subtract with carry (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $0F		; 70 0F ; Branch if overflow set to $70, $0F [Flow: branch]
	and $2F4F00.l,X		; 3F 00 4F 2F ; AND accumulator with memory (long,X) $2F4F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $004483.l,X		; 1F 83 44 00 ; Logical OR long $004483.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	sbc $00FF3C.l,X		; FF 3C FF 00 ; Subtract with carry (long,X) $00FF3C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta ($06.b,X)		; 81 06 ; Store accumulator ($06.b,X) [Reads: Accumulator, X Index, Direct Page]
	ror $FFFF.w,X		; 7E FF FF ; Rotate right $FFFF.w,X [Reads: X Index] [Flags: ZNC]
	ror $3CFF.w,X		; 7E FF 3C ; Rotate right $3CFF.w,X [Reads: X Index] [Flags: ZNC]
	sbc $220022.l,X		; FF 22 00 22 ; Subtract with carry (long,X) $220022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $0022.w,X		; 7E 22 00 ; Rotate right $0022.w,X [Reads: X Index] [Flags: ZNC]
	eor $81.b,S		; 43 81 ; Exclusive OR accumulator with stack relative $81.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $0043.w,X		; 7E 43 00 ; Rotate right $0043.w,X [Reads: X Index] [Flags: ZNC]
	sta ($86.b,X)		; 81 86 ; Store accumulator ($86.b,X) [Reads: Accumulator, X Index, Direct Page]
	jsr $2203.w		; 20 03 22 ; Jump to subroutine at $2203.w [Writes: Stack Pointer] [Flow: call]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0022.w,X		; 7E 22 00 ; Rotate right $0022.w,X [Reads: X Index] [Flags: ZNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	mvp $84,$7B		; 44 7B 84 ; Move block positive $84,$7B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp [$93.b]		; C7 93 ; Compare accumulator (long) [$93.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jmp ($38C7.w)		; 6C C7 38 ; Jump indirect to ($38C7.w) [Flow: jump]
	cmp $8C8330.l		; CF 30 83 8C ; Compare accumulator (long) $8C8330.l [Reads: Accumulator] [Flags: ZNC]
	cop $26.b		; 02 26 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E10015.l,X		; FF 15 00 E1 ; Subtract with carry (long,X) $E10015.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor #$4CA8.w		; 49 A8 4C ; Exclusive OR #$4CA8.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $67.b,X		; B4 67 ; Load Y register $67.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and ($EF.b,S),Y		; 33 EF ; AND accumulator (stack relative indirect indexed) ($EF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc [$0F.b],Y		; F7 0F ; Subtract with carry (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc [$EF.b]		; 67 EF ; Add with carry (long) [$EF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $36		; 70 36 ; Branch if overflow set to $70, $36 [Flow: branch]
	and ($18.b,S),Y		; 33 18 ; AND accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $2207.w		; 0C 07 22 ; Test and set bits $2207.w [Reads: Accumulator] [Flags: Z]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $13AE12.l		; AF 12 AE 13 ; Load long $13AE12.l into accumulator [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	ora $AB.b,X		; 15 AB ; OR accumulator with memory $AB.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $9A.b,X		; 16 9A ; Arithmetic shift left $9A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	rol $A9.b		; 26 A9 ; Rotate left $A9.b [Reads: Direct Page] [Flags: ZNC]
	and [$E4.b],Y		; 37 E4 ; AND accumulator with memory (long indexed) [$E4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	cmp ($44.b,S),Y		; D3 44 ; Compare accumulator (stack relative indirect indexed) ($44.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	and $40.b,S		; 23 40 ; AND accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $304041.l,X		; 1F 41 40 30 ; Logical OR long $304041.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc [$1C.b]		; E7 1C ; Subtract with carry (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($0F.b),Y		; F1 0F ; Subtract with carry ($0F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sta $36.b,X		; 95 36 ; Store accumulator to $36.b,X [Reads: Accumulator, X Index]
	cmp #$EC53.w		; C9 53 EC ; Compare #$EC53.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	inc $E3F1.w		; EE F1 E3 ; Increment $E3F1.w [Flags: ZN]
	jsr ($FFFC.w,X)		; FC FC FF ; Jump to subroutine indirect indexed ($FFFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	cpx #$FCF0.w		; E0 F0 FC ; Compare #$FCF0.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $FE00FF.l,X		; FF FF 00 FE ; Subtract with carry (long,X) $FE00FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FE0143.l,X		; FF 43 01 FE ; Subtract with carry (long,X) $FE0143.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$F9.b]		; C7 F9 ; Compare accumulator (long) [$F9.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	asl $FF.b,X		; 16 FF ; Arithmetic shift left $FF.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lda $0025.w,Y		; B9 25 00 ; Load $0025.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $10.b		; 04 10 ; Test and set bits $10.b [Reads: Accumulator] [Flags: Z]
	lda $02FD.w,Y		; B9 FD 02 ; Load $02FD.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta ($45.b,X)		; 81 45 ; Store accumulator ($45.b,X) [Reads: Accumulator, X Index, Direct Page]
	ror $05FF.w,X		; 7E FF 05 ; Rotate right $05FF.w,X [Reads: X Index] [Flags: ZNC]
	rol $7F.b		; 26 7F ; Rotate left $7F.b [Reads: Direct Page] [Flags: ZNC]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($70.b,S),Y		; F3 70 ; Subtract with carry (stack relative indirect indexed) ($70.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $70.b,X		; F6 70 ; Increment memory $70.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc [$72.b],Y		; F7 72 ; Subtract with carry (long indexed) [$72.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $65.b,S		; E3 65 ; Subtract stack-relative $65.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $62.b		; E5 62 ; Subtract $62.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $E4.b,S		; 43 E4 ; Exclusive OR accumulator with stack relative $E4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $04.b,S		; 63 04 ; Add with carry (stack relative) $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	inc $65.b		; E6 65 ; Increment $65.b [Reads: Direct Page] [Flags: ZN]
	tsb $090B.w		; 0C 0B 09 ; Test and set bits $090B.w [Reads: Accumulator] [Flags: Z]
	bit $18.b		; 24 18 ; Test bits $18.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $BD.b		; 05 BD ; Logical OR $BD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $3CDB.w,X		; 7E DB 3C ; Rotate right $3CDB.w,X [Reads: X Index] [Flags: ZNC]
	lda $4942.w,X		; BD 42 49 ; Load $4942.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $C3		; 42 C3 ; Reserved instruction
	jsl $7C2400.l		; 22 00 24 7C ; Jump to subroutine long $7C2400.l [Writes: Stack Pointer] [Flow: call]
	eor $81.b		; 45 81 ; Exclusive OR $81.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $4249.w,X		; 7E 49 42 ; Rotate right $4249.w,X [Reads: X Index] [Flags: ZNC]
	cmp $22.b,S		; C3 22 ; Compare accumulator (stack relative) $22.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($FF23.w,X)		; 7C 23 FF ; Jump indirect indexed to ($FF23.w,X) [Reads: X Index] [Flow: jump]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $0027C0.l,X		; FF C0 27 00 ; Subtract with carry (long,X) $0027C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $C7.b		; 06 C7 ; Arithmetic shift left $C7.b [Reads: Direct Page] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $8006.w,Y		; F9 06 80 ; Subtract with carry $8006.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $7D4884.l,X		; 7F 84 48 7D ; Add long $7D4884.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($0022.w,X)		; FC 22 00 ; Jump to subroutine indirect indexed ($0022.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $02.b		; 24 02 ; Test bits $02.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $FC03.w,X		; FE 03 FC ; Increment memory $FC03.w,X [Reads: X Index] [Flags: ZN]
	eor $03.b,S		; 43 03 ; Exclusive OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $0607.w,X		; FD 07 06 ; Subtract with carry $0607.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	asl $3DF2.w		; 0E F2 3D ; Arithmetic shift left $3DF2.w [Flags: ZNC]
	cmp $F3.b		; C5 F3 ; Compare $F3.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora ($23.b,S),Y		; 13 23 ; OR accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$00.b]		; 47 00 ; Exclusive OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $00B283.l,X		; FF 83 B2 00 ; Subtract with carry (long,X) $00B283.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $78.b,S		; 03 78 ; OR accumulator with stack relative $78.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc [$27.b]		; E7 27 ; Subtract with carry (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $50.b,S		; 83 50 ; Store accumulator (stack relative) $50.b,S [Reads: Accumulator, Stack Pointer]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $0C.b		; 14 0C ; Test and reset bits $0C.b [Reads: Accumulator] [Flags: Z]
	jsr $4810.w		; 20 10 48 ; Jump to subroutine at $4810.w [Writes: Stack Pointer] [Flow: call]
	jsr $2373.w		; 20 73 23 ; Jump to subroutine at $2373.w [Writes: Stack Pointer] [Flow: call]
	eor $E3.b,S		; 43 E3 ; Exclusive OR accumulator with stack relative $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $83.b,S		; 43 83 ; Exclusive OR accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $1B00.w,X		; BC 00 1B ; Load Y register $1B00.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ora $3C3C1C.l,X		; 1F 1C 3C 3C ; Logical OR long $3C3C1C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FFFB00.l,X		; FF 00 FB FF ; Subtract with carry (long,X) $FFFB00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$7B0D.w		; 09 0D 7B ; Logical OR #$7B0D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $B7E0DF.l,X		; 7F DF E0 B7 ; Add long $B7E0DF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $009868.l		; CF 68 98 00 ; Compare accumulator (long) $009868.l [Reads: Accumulator] [Flags: ZNC]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($80.b)		; F2 80 ; Subtract with carry (indirect) ($80.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$83.b]		; 07 83 ; OR accumulator with memory (long) [$83.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ora $0F.b,S		; 03 0F ; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rep #$C3		; C2 C3 ; Reset processor status bits #$C3 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	inc $FFFF.w,X		; FE FF FF ; Increment memory $FFFF.w,X [Reads: X Index] [Flags: ZN]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000800.l,X		; FF 00 08 00 ; Subtract with carry (long,X) $000800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $0022.w,X		; 3C 22 00 ; Test bits $0022.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	asl $F7.b		; 06 F7 ; Arithmetic shift left $F7.b [Reads: Direct Page] [Flags: ZNC]
	and [$F8.b]		; 27 F8 ; AND accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $7C.b,S		; 83 7C ; Store accumulator (stack relative) $7C.b,S [Reads: Accumulator, Stack Pointer]
	eor [$C1.b]		; 47 C1 ; Exclusive OR accumulator with memory (long) [$C1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $FF00.w,X		; 3E 00 FF ; Rotate left $FF00.w,X [Reads: X Index] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($6F.b),Y		; 91 6F ; Store accumulator ($6F.b),Y [Reads: Accumulator, Direct Page, Y Index]
	cpy #$E03F.w		; C0 3F E0 ; Compare #$E03F.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora $FE4FF0.l,X		; 1F F0 4F FE ; Logical OR long $FE4FF0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($FF.b,X)		; C1 FF ; Compare accumulator ($FF.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cpx $FF.b		; E4 FF ; Compare $FF.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	inc $FFFF.w		; EE FF FF ; Increment $FFFF.w [Flags: ZN]
	jsl $400D00.l		; 22 00 0D 40 ; Jump to subroutine long $400D00.l [Writes: Stack Pointer] [Flow: call]
	cpy #$EEE4.w		; C0 E4 EE ; Compare #$EEE4.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $713E31.l,X		; FF 31 3E 71 ; Subtract with carry (long,X) $713E31.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $FEF9.w,X		; 7E F9 FE ; Rotate right $FEF9.w,X [Reads: X Index] [Flags: ZNC]
	sbc $CDFE.w,X		; FD FE CD ; Subtract with carry $CDFE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $85,$FE		; 44 FE 85 ; Move block positive $85,$FE [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $83.b,S		; 03 83 ; OR accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr ($80C0.w,X)		; FC C0 80 ; Jump to subroutine indirect indexed ($80C0.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $B0.b		; 14 B0 ; Test and reset bits $B0.b [Reads: Accumulator] [Flags: Z]
	and [$F8.b]		; 27 F8 ; AND accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	jsr ($F665.w,X)		; FC 65 F6 ; Jump to subroutine indirect indexed ($F665.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ldx $2A.b,Y		; B6 2A ; Load X register $2A.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	sbc ($2D.b,S),Y		; F3 2D ; Subtract with carry (stack relative indirect indexed) ($2D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($6D.b,S),Y		; F3 6D ; Subtract with carry (stack relative indirect indexed) ($6D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	adc $48.b,X		; 75 48 ; Add $48.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($41.b,X)		; 01 41 ; Logical OR ($41.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $FF0900.l		; 22 00 09 FF ; Jump to subroutine long $FF0900.l [Writes: Stack Pointer] [Flow: call]
	and $1DFE.w,Y		; 39 FE 1D ; AND accumulator with memory $1DFE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $07FF0E.l,X		; FF 0E FF 07 ; Subtract with carry (long,X) $07FF0E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF4403.l,X		; FF 03 44 FF ; Subtract with carry (long,X) $FF4403.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $001889.l,X		; FF 89 18 00 ; Subtract with carry (long,X) $001889.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $3583FF.l		; 22 FF 83 35 ; Jump to subroutine long $3583FF.l [Writes: Stack Pointer] [Flow: call]
	ora $83.b		; 05 83 ; Logical OR $83.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and #$2200.w		; 29 00 22 ; Logical AND #$2200.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($72.b,S),Y		; F3 72 ; Subtract with carry (stack relative indirect indexed) ($72.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ldx $BF7E.w,Y		; BE 7E BF ; Load X register $BF7E.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	adc $CF7F9F.l,X		; 7F 9F 7F CF ; Add long $CF7F9F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $010C83.l,X		; 3F 83 0C 01 ; AND accumulator with memory (long,X) $010C83.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sta $50.b,S		; 83 50 ; Store accumulator (stack relative) $50.b,S [Reads: Accumulator, Stack Pointer]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora [$F9.b]		; 07 F9 ; OR accumulator with memory (long) [$F9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $F50DF3.l		; 0F F3 0D F5 ; OR accumulator with memory (long) $F50DF3.l [Writes: Accumulator] [Flags: ZN]
	eor $0B.b		; 45 0B ; Exclusive OR $0B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc ($23.b,S),Y		; F3 23 ; Subtract with carry (stack relative indirect indexed) ($23.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $4F.b		; 04 4F ; Test and set bits $4F.b [Reads: Accumulator] [Flags: Z]
	.db $42, $C3		; 42 C3 ; Reserved instruction
	and [$7C.b]		; 27 7C ; AND accumulator with memory (long) [$7C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $47FF7F.l		; 0F 7F FF 47 ; OR accumulator with memory (long) $47FF7F.l [Writes: Accumulator] [Flags: ZN]
	sbc $5FFF50.l,X		; FF 50 FF 5F ; Subtract with carry (long,X) $5FFF50.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $47FF50.l,X		; FF 50 FF 47 ; Subtract with carry (long,X) $47FF50.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FF7F.l,X		; FF 7F FF 00 ; Subtract with carry (long,X) $00FF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $4F0027.l,X		; FF 27 00 4F ; Subtract with carry (long,X) $4F0027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($277D.w,X)		; FC 7D 27 ; Jump to subroutine indirect indexed ($277D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $484080.l,X		; 7F 80 40 48 ; Add long $484080.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $7F435F.l,X		; BF 5F 43 7F ; Load long $7F435F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $27		; 80 27 ; Branch always to $80, $27 [Flow: branch]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F04300.l,X		; FF 00 43 F0 ; Subtract with carry (long,X) $F04300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00FF02.l		; 0F 02 FF 00 ; OR accumulator with memory (long) $00FF02.l [Writes: Accumulator] [Flags: ZN]
	cpx #$1F44.w		; E0 44 1F ; Compare #$1F44.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $FF0027.l		; EF 27 00 FF ; Subtract with carry (long) $FF0027.l [Writes: Accumulator] [Flags: ZVNC]
	cop $C0.b		; 02 C0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $7F46C1.l,X		; 7F C1 46 7F ; Add long $7F46C1.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $00.b,S		; C3 00 ; Compare accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cmp ($44.b,X)		; C1 44 ; Compare accumulator ($44.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	adc $0027C0.l,X		; 7F C0 27 00 ; Add long $0027C0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $0FF800.l,X		; FF 00 F8 0F ; Subtract with carry (long,X) $0FF800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pea $E91B.w		; F4 1B E9 ; Push absolute address $E91B.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	rol $D3.b,X		; 36 D3 ; Rotate left $D3.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jmp ($7CC3.w)		; 6C C3 7C ; Jump indirect to ($7CC3.w) [Flow: jump]
	eor $C0.b,S		; 43 C0 ; Exclusive OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $C0E002.l,X		; 7F 02 E0 C0 ; Add long $C0E002.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $24		; 80 24 ; Branch always to $80, $24 [Flow: branch]
	brk $4F.b		; 00 4F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $E027DE.l,X		; DF DE 27 E0 ; Compare accumulator (long,X) $E027DE.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$F0.b]		; 07 F0 ; OR accumulator with memory (long) [$F0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $EF		; F0 EF ; Branch if equal to $F0, $EF [Flow: branch]
	sbc $DFDBDF.l		; EF DF DB DF ; Subtract with carry (long) $DFDBDF.l [Writes: Accumulator] [Flags: ZVNC]
	cmp $DF43.w,X		; DD 43 DF ; Compare accumulator $DF43.w,X [Reads: X Index] [Flags: ZNC]
	dec $FF22.w,X		; DE 22 FF ; Decrement memory $FF22.w,X [Reads: X Index] [Flags: ZN]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $E0.b,S		; 23 E0 ; AND accumulator with stack relative $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0002.l,X		; FF 02 00 FF ; Subtract with carry (long,X) $FF0002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $430024.l,X		; FF 24 00 43 ; Subtract with carry (long,X) $430024.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $0F07DE.l,X		; DF DE 07 0F ; Compare accumulator (long,X) $0F07DE.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	asl $E6E7.w		; 0E E7 E6 ; Arithmetic shift left $E6E7.w [Flags: ZNC]
	sbc ($F2.b,S),Y		; F3 F2 ; Subtract with carry (stack relative indirect indexed) ($F2.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF43FC.l,X		; FF FC 43 FF ; Subtract with carry (long,X) $FF43FC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$F0E0.w		; E0 E0 F0 ; Compare #$F0E0.w with X register [Reads: X Index] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	tsb $0022.w		; 0C 22 00 ; Test and set bits $0022.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $1003.w		; 0C 03 10 ; Test and set bits $1003.w [Reads: Accumulator] [Flags: Z]
	ora $401F20.l		; 0F 20 1F 40 ; OR accumulator with memory (long) $401F20.l [Writes: Accumulator] [Flags: ZN]
	and $433F41.l,X		; 3F 41 3F 43 ; AND accumulator with memory (long,X) $433F41.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $7F.b,S		; 83 7F ; Store accumulator (stack relative) $7F.b,S [Reads: Accumulator, Stack Pointer]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0F.b,S		; 03 0F ; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $7F3F3F.l,X		; 1F 3F 3F 7F ; Logical OR long $7F3F3F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $12E143.l,X		; 7F 43 E1 12 ; Add long $12E143.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $C3.b,S		; 43 C3 ; Exclusive OR accumulator with stack relative $C3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr $030F.w		; 20 0F 03 ; Jump to subroutine at $030F.w [Writes: Stack Pointer] [Flow: call]
	cpy #$0201.w		; C0 01 02 ; Compare #$0201.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $80, $81		; 80 81 ; Branch always to $80, $81 [Flow: branch]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	tsb $1C0C.w		; 0C 0C 1C ; Test and set bits $1C0C.w [Reads: Accumulator] [Flags: Z]
	trb $FC3C.w		; 1C 3C FC ; Test and reset bits $FC3C.w [Reads: Accumulator] [Flags: Z]
	ror $270F.w,X		; 7E 0F 27 ; Rotate right $270F.w,X [Reads: X Index] [Flags: ZNC]
	sbc $46A000.l,X		; FF 00 A0 46 ; Subtract with carry (long,X) $46A000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$2320.w		; E0 20 23 ; Compare #$2320.w with X register [Reads: X Index] [Flags: ZNC]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $F3ED45.l,X		; 1F 45 ED F3 ; Logical OR long $F3ED45.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$F5EF.w		; 09 EF F5 ; Logical OR #$F5EF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $C64D05.l		; 0F 05 4D C6 ; OR accumulator with memory (long) $C64D05.l [Writes: Accumulator] [Flags: ZN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	adc $AD.b,S		; 63 AD ; Add with carry (stack relative) $AD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $23.b		; 65 23 ; Add $23.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	trb $12.b		; 14 12 ; Test and reset bits $12.b [Reads: Accumulator] [Flags: Z]
	sbc $242400.l,X		; FF 00 24 24 ; Subtract with carry (long,X) $242400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sbc $43FF00.l,X		; FF 00 FF 43 ; Subtract with carry (long,X) $43FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $0001FF.l		; 22 FF 01 00 ; Jump to subroutine long $0001FF.l [Writes: Stack Pointer] [Flow: call]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $00,$E0		; 44 E0 00 ; Move block positive $00,$E0 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora ($1F.b,X)		; 01 1F ; Logical OR ($1F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $E00045.l,X		; FF 45 00 E0 ; Subtract with carry (long,X) $E00045.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $1F.b		; 04 1F ; Test and set bits $1F.b [Reads: Accumulator] [Flags: Z]
	sbc $1F1F00.l,X		; FF 00 1F 1F ; Subtract with carry (long,X) $1F1F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $D2.b,S		; 83 D2 ; Store accumulator (stack relative) $D2.b,S [Reads: Accumulator, Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4F.b		; 00 4F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFF9FF.l,X		; FF FF F9 FF ; Subtract with carry (long,X) $FFF9FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $43.b,X		; F6 43 ; Increment memory $43.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc $F706F7.l,X		; FF F7 06 F7 ; Subtract with carry (long,X) $F706F7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $FEFD.w,X		; FD FD FE ; Subtract with carry $FEFD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $0023.w,X		; FE 23 00 ; Increment memory $0023.w,X [Reads: X Index] [Flags: ZN]
	ora #$0408.w		; 09 08 04 ; Logical OR #$0408.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $8DDD.w,X		; DD DD 8D ; Compare accumulator $8DDD.w,X [Reads: X Index] [Flags: ZNC]
	sta $7070.w		; 8D 70 70 ; Store accumulator to $7070.w [Reads: Accumulator]
	and $7B.b,S		; 23 7B ; AND accumulator with stack relative $7B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $3A3A.w		; 0D 3A 3A ; Logical OR $3A3A.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp ($C1.b,X)		; C1 C1 ; Compare accumulator ($C1.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cmp $22DD.w,X		; DD DD 22 ; Compare accumulator $22DD.w,X [Reads: X Index] [Flags: ZNC]
	adc ($8F.b)		; 72 8F ; Add with carry (indirect) ($8F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sty $84.b		; 84 84 ; Store Y register to $84.b [Reads: Y Index]
	cmp $3E.b		; C5 3E ; Compare $3E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jsl $27FF2F.l		; 22 2F FF 27 ; Jump to subroutine long $27FF2F.l [Writes: Stack Pointer] [Flow: call]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	adc $CE7FCC.l,X		; 7F CC 7F CE ; Add long $CE7FCC.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $0784C7.l,X		; 7F C7 84 07 ; Add long $0784C7.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $7F		; D0 7F ; Branch if not equal to $D0, $7F [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	adc $430027.l,X		; 7F 27 00 43 ; Add long $430027.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$017F.w		; C0 7F 01 ; Compare #$017F.w with Y register [Reads: Y Index] [Flags: ZNC]
	cmp ($7E.b,X)		; C1 7E ; Compare accumulator ($7E.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	lsr $C3.b		; 46 C3 ; Logical shift right $C3.b [Reads: Direct Page] [Flags: ZNC]
	adc $7C02.w,X		; 7D 02 7C ; Add $7C02.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$277F.w		; C0 7F 27 ; Compare #$277F.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $4F.b		; 00 4F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$277F.w		; C0 7F 27 ; Compare #$277F.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $41		; 80 41 ; Branch always to $80, $41 [Flow: branch]
	eor $9C.b		; 45 9C ; Exclusive OR $9C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $8008.w,X		; 5D 08 80 ; Exclusive OR accumulator with memory $8008.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($BE.b,X)		; 41 BE ; Exclusive OR accumulator with memory ($BE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $FF7F80.l,X		; 7F 80 7F FF ; Add long $FF7F80.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $3E0022.l		; 22 22 00 3E ; Jump to subroutine long $3E0022.l [Writes: Stack Pointer] [Flow: call]
	jsl $BE0B00.l		; 22 00 0B BE ; Jump to subroutine long $BE0B00.l [Writes: Stack Pointer] [Flow: call]
	and $C01F9E.l,X		; 3F 9E 1F C0 ; AND accumulator with memory (long,X) $C01F9E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	cpy #$9F40.w		; C0 40 9F ; Compare #$9F40.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora $27A743.l,X		; 1F 43 A7 27 ; Logical OR long $27A743.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$6040.w		; 09 40 60 ; Logical OR #$6040.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $603F00.l,X		; 3F 00 3F 60 ; AND accumulator with memory (long,X) $603F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sbc $E68300.l,X		; FF 00 83 E6 ; Subtract with carry (long,X) $E68300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda ($3E.b)		; B2 3E ; Load accumulator (indirect) ($3E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($BF.b,X)		; 01 BF ; Logical OR ($BF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $27A643.l,X		; 3F 43 A6 27 ; AND accumulator with memory (long,X) $27A643.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$0000.w		; 09 00 00 ; Logical OR #$0000.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $404141.l,X		; 3F 41 41 40 ; AND accumulator with memory (long,X) $404141.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $7F.b,S		; 83 7F ; Store accumulator (stack relative) $7F.b,S [Reads: Accumulator, Stack Pointer]
	eor $C3.b,S		; 43 C3 ; Exclusive OR accumulator with stack relative $C3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $1FE10E.l,X		; 3F 0E E1 1F ; AND accumulator with memory (long,X) $1FE10E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy #$F05F.w		; A0 5F F0 ; Load #$F05F.w into Y register [Writes: Y Index] [Flags: ZN]
	ora $310F70.l		; 0F 70 0F 31 ; OR accumulator with memory (long) $310F70.l [Writes: Accumulator] [Flags: ZN]
	ora $3F3F7F.l		; 0F 7F 3F 3F ; OR accumulator with memory (long) $3F3F7F.l [Writes: Accumulator] [Flags: ZN]
	ora $0F221F.l,X		; 1F 1F 22 0F ; Logical OR long $0F221F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b],Y		; 17 07 ; OR accumulator with memory (long indexed) [$07.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$0A.b]		; 07 0A ; OR accumulator with memory (long) [$0A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$CA.b]		; 07 CA ; OR accumulator with memory (long) [$CA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp [$EA.b]		; C7 EA ; Compare accumulator (long) [$EA.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $E4.b,S		; C3 E4 ; Compare accumulator (stack relative) $E4.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	eor ($E2.b,X)		; 41 E2 ; Exclusive OR accumulator with memory ($E2.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy #$7079.w		; C0 79 70 ; Compare #$7079.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc ($F0.b)		; F2 F0 ; Subtract with carry (indirect) ($F0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $10		; 30 10 ; Branch if minus to $30, $10 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $4F06.w		; 1C 06 4F ; Test and reset bits $4F06.w [Reads: Accumulator] [Flags: Z]
	ldy #$2760.w		; A0 60 27 ; Load #$2760.w into Y register [Writes: Y Index] [Flags: ZN]
	ora $66AA0B.l,X		; 1F 0B AA 66 ; Logical OR long $66AA0B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $63A56B.l		; AF 6B A5 63 ; Load long $63A56B.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $65.b		; A6 65 ; Load $65.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $62.b,S		; A3 62 ; Load accumulator (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda ($61.b,X)		; A1 61 ; Load accumulator ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $A0.b,S		; 43 A0 ; Exclusive OR accumulator with stack relative $A0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora [$11.b]		; 07 11 ; OR accumulator with memory (long) [$11.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $1F1E.w		; 1C 1E 1F ; Test and reset bits $1F1E.w [Reads: Accumulator] [Flags: Z]
	ora $060743.l,X		; 1F 43 07 06 ; Logical OR long $060743.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $FC03.w,X		; FE 03 FC ; Increment memory $FC03.w,X [Reads: X Index] [Flags: ZN]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F8F801.l,X		; FF 01 F8 F8 ; Subtract with carry (long,X) $F8F801.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0025FF.l,X		; FF FF 25 00 ; Subtract with carry (long,X) $0025FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $6B.b,S		; 83 6B ; Store accumulator (stack relative) $6B.b,S [Reads: Accumulator, Stack Pointer]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $00.b,S		; 63 00 ; Add with carry (stack relative) $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $DD.b		; 00 DD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $6D9D.w		; 2D 9D 6D ; Logical AND $6D9D.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpx #$4310.w		; E0 10 43 ; Compare #$4310.w with X register [Reads: X Index] [Flags: ZNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $4ABA.w		; 0D BA 4A ; Logical OR $4ABA.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp ($31.b,X)		; C1 31 ; Compare accumulator ($31.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cmp $022D.w,X		; DD 2D 02 ; Compare accumulator $022D.w,X [Reads: X Index] [Flags: ZNC]
	cop $0F.b		; 02 0F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $37.b		; 02 37 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F8070E.l,X		; FF 0E 07 F8 ; Subtract with carry (long,X) $F8070E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $BC.b,S		; 43 BC ; Exclusive OR accumulator with stack relative $BC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	pea $FC03.w		; F4 03 FC ; Push absolute address $FC03.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $090028.l,X		; FF 28 00 09 ; Subtract with carry (long,X) $090028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and $03.b,S		; 23 03 ; AND accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $FF07.w,Y		; 19 07 FF ; OR accumulator with memory $FF07.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $BDFD.w,Y		; F9 FD BD ; Subtract with carry $BDFD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FDF5.w,X		; FD F5 FD ; Subtract with carry $FDF5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $CC01.w,X		; FD 01 CC ; Subtract with carry $CC01.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $C37FC6.l,X		; 7F C6 7F C3 ; Add long $C37FC6.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $D97FD1.l,X		; 7F D1 7F D9 ; Add long $D97FD1.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $C77FCD.l,X		; 7F CD 7F C7 ; Add long $C77FCD.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $263F83.l,X		; 7F 83 3F 26 ; Add long $263F83.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsl $F806FF.l		; 22 FF 06 F8 ; Jump to subroutine long $F806FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $F1F7.w,Y		; F9 F7 F1 ; Subtract with carry $F1F7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $43EDF3.l		; EF F3 ED 43 ; Subtract with carry (long) $43EDF3.l [Writes: Accumulator] [Flags: ZVNC]
	sbc ($EC.b,S),Y		; F3 EC ; Subtract with carry (stack relative indirect indexed) ($EC.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($71.b,X)		; 01 71 ; Logical OR ($71.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ror $FF23.w		; 6E 23 FF ; Rotate right $FF23.w [Flags: ZNC]
	and $EF.b,S		; 23 EF ; AND accumulator with stack relative $EF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $F8.b,S		; 83 F8 ; Store accumulator (stack relative) $F8.b,S [Reads: Accumulator, Stack Pointer]
	ora ($0B.b,X)		; 01 0B ; Logical OR ($0B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $5FBF60.l,X		; 9F 60 BF 5F ; Store accumulator (long,X) $5FBF60.l,X [Reads: Accumulator, X Index]
	cpx #$CF20.w		; E0 20 CF ; Compare #$CF20.w with X register [Reads: X Index] [Flags: ZNC]
	eor $B31393.l		; 4F 93 13 B3 ; Exclusive OR accumulator with memory (long) $B31393.l [Writes: Accumulator] [Flags: ZN]
	and ($23.b,S),Y		; 33 23 ; AND accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $4C6C30.l,X		; 1F 30 6C 4C ; Logical OR long $4C6C30.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $79E7.w,Y		; D9 E7 79 ; Compare accumulator $79E7.w,Y [Reads: Y Index] [Flags: ZNC]
	adc [$BC.b],Y		; 77 BC ; Add with carry (long indexed) [$BC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp $F030CC.l		; CF CC 30 F0 ; Compare accumulator (long) $F030CC.l [Reads: Accumulator] [Flags: ZNC]
	sta $9FE07F.l,X		; 9F 7F E0 9F ; Store accumulator (long,X) $9FE07F.l,X [Reads: Accumulator, X Index]
	ora $800020.l,X		; 1F 20 00 80 ; Logical OR long $800020.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $30, $0F		; 30 0F ; Branch if minus to $30, $0F [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$E083.w		; C0 83 E0 ; Compare #$E083.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora ($0F.b,X)		; 01 0F ; Logical OR ($0F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $60A04F.l		; 8F 4F A0 60 ; Store accumulator (long) $60A04F.l [Reads: Accumulator]
	sta $3FC07F.l,X		; 9F 7F C0 3F ; Store accumulator (long,X) $3FC07F.l,X [Reads: Accumulator, X Index]
	cpx #$BF1F.w		; E0 1F BF ; Compare #$BF1F.w with X register [Reads: X Index] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $30, $1F		; 30 1F ; Branch if minus to $30, $1F [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $B1.b		; 05 B1 ; Logical OR $B1.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $7E91.w,X		; 7E 91 7E ; Rotate right $7E91.w,X [Reads: X Index] [Flags: ZNC]
	cmp ($BE.b),Y		; D1 BE ; Compare accumulator ($BE.b),Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	eor $FD.b,S		; 43 FD ; Exclusive OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec $F143.w,X		; DE 43 F1 ; Decrement memory $F143.w,X [Reads: X Index] [Flags: ZN]
	dec $FD01.w,X		; DE 01 FD ; Decrement memory $FD01.w,X [Reads: X Index] [Flags: ZN]
	dec $0027.w,X		; DE 27 00 ; Decrement memory $0027.w,X [Reads: X Index] [Flags: ZN]
	ora $63.b		; 05 63 ; Logical OR $63.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $C73F43.l,X		; 1F 43 3F C7 ; Logical OR long $C73F43.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $7F8745.l,X		; 3F 45 87 7F ; AND accumulator with memory (long,X) $7F8745.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $83.b		; 06 83 ; Arithmetic shift left $83.b [Reads: Direct Page] [Flags: ZNC]
	adc $1F7F81.l,X		; 7F 81 7F 1F ; Add long $1F7F81.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $7F243F.l,X		; 3F 3F 24 7F ; AND accumulator with memory (long,X) $7F243F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $43F0.w,Y		; 79 F0 43 ; Add $43F0.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cpx #$7004.w		; E0 04 70 ; Compare #$7004.w with X register [Reads: X Index] [Flags: ZNC]
	cpx #$F87C.w		; E0 7C F8 ; Compare #$F87C.w with X register [Reads: X Index] [Flags: ZNC]
	jmp ($D483.w,X)		; 7C 83 D4 ; Jump indirect indexed to ($D483.w,X) [Reads: X Index] [Flow: jump]
	ora ($0B.b,X)		; 01 0B ; Logical OR ($0B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$B060.w		; A0 60 B0 ; Load #$B060.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $70, $47		; 70 47 ; Branch if overflow set to $70, $47 [Flow: branch]
	lda $C0057F.l,X		; BF 7F 05 C0 ; Load long $C0057F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $1F00FF.l,X		; 3F FF 00 1F ; AND accumulator with memory (long,X) $1F00FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $270029.l		; 0F 29 00 27 ; OR accumulator with memory (long) $270029.l [Writes: Accumulator] [Flags: ZN]
	sbc $029485.l,X		; FF 85 94 02 ; Subtract with carry (long,X) $029485.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $F8.b,S		; 83 F8 ; Store accumulator (stack relative) $F8.b,S [Reads: Accumulator, Stack Pointer]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $80437F.l,X		; FF 7F 43 80 ; Subtract with carry (long,X) $80437F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $220000.l,X		; FF 00 00 22 ; Subtract with carry (long,X) $220000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $010022.l,X		; FF 22 00 01 ; Subtract with carry (long,X) $010022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $00227F.l,X		; 7F 7F 22 00 ; Add long $00227F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$83.b],Y		; 17 83 ; OR accumulator with memory (long indexed) [$83.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $834F83.l,X		; 1F 83 4F 83 ; Logical OR long $834F83.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc [$C3.b]		; 67 C3 ; Add with carry (long) [$C3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($60.b,S),Y		; 33 60 ; AND accumulator (stack relative indirect indexed) ($60.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $CF		; 30 CF ; Branch if minus to $30, $CF [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc [$0F.b]		; E7 0F ; Subtract with carry (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $60		; F0 60 ; Branch if equal to $F0, $60 [Flow: branch]
	.db $30, $18		; 30 18 ; Branch if minus to $30, $18 [Flow: branch]
	tsb $C087.w		; 0C 87 C0 ; Test and set bits $C087.w [Reads: Accumulator] [Flags: Z]
	cpx #$22F0.w		; E0 F0 22 ; Compare #$22F0.w with X register [Reads: X Index] [Flags: ZNC]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$87.b]		; 07 87 ; OR accumulator with memory (long) [$87.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sta $51CE90.l		; 8F 90 CE 51 ; Store accumulator (long) $51CE90.l [Reads: Accumulator]
	cpy $D052.w		; CC 52 D0 ; Compare $D052.w with Y register [Reads: Y Index] [Flags: ZNC]
	jmp $FF40C0.l		; 5C C0 40 FF ; Jump long to $FF40C0.l [Flow: jump]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $70, $60		; 70 60 ; Branch if overflow set to $70, $60 [Flow: branch]
	jsr $2321.w		; 20 21 23 ; Jump to subroutine at $2321.w [Writes: Stack Pointer] [Flow: call]
	and $1FFF4F.l,X		; 3F 4F FF 1F ; AND accumulator with memory (long,X) $1FFF4F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $8D22DD.l		; 0F DD 22 8D ; OR accumulator with memory (long) $8D22DD.l [Writes: Accumulator] [Flags: ZN]
	adc ($70.b)		; 72 70 ; Add with carry (indirect) ($70.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $77847B.l		; 8F 7B 84 77 ; Store accumulator (long) $77847B.l [Reads: Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	lda [$48.b],Y		; B7 48 ; Load accumulator (long indexed) [$48.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$DD3F.w		; C0 3F DD ; Compare #$DD3F.w with Y register [Reads: Y Index] [Flags: ZNC]
	jsl $010027.l		; 22 27 00 01 ; Jump to subroutine long $010027.l [Writes: Stack Pointer] [Flow: call]
	lda $8025BF.l,X		; BF BF 25 80 ; Load long $8025BF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $7F.b,S		; 23 7F ; AND accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$78.b],Y		; 17 78 ; OR accumulator with memory (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc [$7C.b]		; 67 7C ; Add with carry (long) [$7C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($3F.b,S),Y		; 73 3F ; Add with carry (stack relative indirect indexed) ($3F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and $1F1FBF.l,X		; 3F BF 1F 1F ; AND accumulator with memory (long,X) $1F1FBF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $7150.w		; 20 50 71 ; Jump to subroutine at $7150.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $EF		; 80 EF ; Branch always to $80, $EF [Flow: branch]
	sbc [$70.b]		; E7 70 ; Subtract with carry (long) [$70.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $0E8FFF.l,X		; FF FF 8F 0E ; Subtract with carry (long,X) $0E8FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $6E8300.l		; 22 00 83 6E ; Jump to subroutine long $6E8300.l [Writes: Stack Pointer] [Flow: call]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $090022.l,X		; FF 22 00 09 ; Subtract with carry (long,X) $090022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $58E750.l		; EF 50 E7 58 ; Subtract with carry (long) $58E750.l [Writes: Accumulator] [Flags: ZVNC]
	pei ($6C.b)		; D4 6C ; Push effective indirect address ($6C.b) [Reads: Direct Page] [Writes: Stack Pointer]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	adc [$F7.b],Y		; 77 F7 ; Add with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta $E4.b,S		; 83 E4 ; Store accumulator (stack relative) $E4.b,S [Reads: Accumulator, Stack Pointer]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $050022.l,X		; FF 22 00 05 ; Subtract with carry (long,X) $050022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $40.b,S		; 43 40 ; Exclusive OR accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $BE4105.l,X		; BF 05 41 BE ; Load long $BE4105.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $BD.b,S		; 43 BD ; Exclusive OR accumulator with stack relative $BD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $FD.b,S		; 83 FD ; Store accumulator (stack relative) $FD.b,S [Reads: Accumulator, Stack Pointer]
	sta $A2.b		; 85 A2 ; Store accumulator to $A2.b [Reads: Accumulator]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7F.b,S		; E3 7F ; Subtract stack-relative $7F.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	lda ($3F.b,S),Y		; B3 3F ; Load accumulator (stack relative indirect indexed) ($3F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	eor $C06F8F.l,X		; 5F 8F 6F C0 ; Exclusive OR accumulator with memory (long,X) $C06F8F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $E0		; B0 E0 ; Branch if carry set to $B0, $E0 [Flow: branch]
	cmp $FFEFF0.l,X		; DF F0 EF FF ; Compare accumulator (long,X) $FFEFF0.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsr $8F10.w		; 20 10 8F ; Jump to subroutine at $8F10.w [Writes: Stack Pointer] [Flow: call]
	cpy #$F0E0.w		; C0 E0 F0 ; Compare #$F0E0.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc $46F500.l,X		; 7F 00 F5 46 ; Add long $46F500.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $FF,$00		; 44 00 FF ; Move block positive $FF,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora [$80.b]		; 07 80 ; OR accumulator with memory (long) [$80.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $1B		; 80 1B ; Branch always to $80, $1B [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $430000.l,X		; 7F 00 00 43 ; Add long $430000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$0F3F.w		; C0 3F 0F ; Compare #$0F3F.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpx #$F81F.w		; E0 1F F8 ; Compare #$F81F.w with X register [Reads: X Index] [Flags: ZNC]
	ora [$6F.b]		; 07 6F ; OR accumulator with memory (long) [$6F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $10, $65		; 10 65 ; Branch if plus to $10, $65 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	and $1F06.w,Y		; 39 06 1F ; AND accumulator with memory $1F06.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $23071F.l,X		; 3F 1F 07 23 ; AND accumulator with memory (long,X) $23071F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $00.b,S		; C3 00 ; Compare accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	bit $43C3.w,X		; 3C C3 43 ; Test bits $43C3.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp $25.b,S		; C3 25 ; Compare accumulator (stack relative) $25.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc $FF0043.l,X		; FF 43 00 FF ; Subtract with carry (long,X) $FF0043.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $3CE718.l		; 0F 18 E7 3C ; OR accumulator with memory (long) $3CE718.l [Writes: Accumulator] [Flags: ZN]
	cmp $FF.b,S		; C3 FF ; Compare accumulator (stack relative) $FF.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	brk $5A.b		; 00 5A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $E7.b,S		; C3 E7 ; Compare accumulator (stack relative) $E7.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $23C3E7.l,X		; FF E7 C3 23 ; Subtract with carry (long,X) $23C3E7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF9F43.l,X		; FF 43 9F FF ; Subtract with carry (long,X) $FF9F43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF2A.w,Y		; F9 2A FF ; Subtract with carry $FF2A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $C0.b		; 05 C0 ; Logical OR $C0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy #$E060.w		; C0 60 E0 ; Compare #$E060.w with Y register [Reads: Y Index] [Flags: ZNC]
	and $6883FF.l,X		; 3F FF 83 68 ; AND accumulator with memory (long,X) $6883FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $83.b,S		; 03 83 ; OR accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $0100.w		; 6E 00 01 ; Rotate right $0100.w [Flags: ZNC]
	and $00231F.l,X		; 3F 1F 23 00 ; AND accumulator with memory (long,X) $00231F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $186713.l		; 6F 13 67 18 ; Add with carry (long) $186713.l [Writes: Accumulator] [Flags: ZVNC]
	bit $1E03.w,X		; 3C 03 1E ; Test bits $1E03.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ora ($0B.b,X)		; 01 0B ; Logical OR ($0B.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and ($00.b)		; 32 00 ; AND accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $6B.b,S		; 83 6B ; Store accumulator (stack relative) $6B.b,S [Reads: Accumulator, Stack Pointer]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0000.l,X		; FF 00 00 FF ; Subtract with carry (long,X) $FF0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $0023FF.l		; 22 FF 23 00 ; Jump to subroutine long $0023FF.l [Writes: Stack Pointer] [Flow: call]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $0022FF.l		; 22 FF 22 00 ; Jump to subroutine long $0022FF.l [Writes: Stack Pointer] [Flow: call]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $090022.l,X		; FF 22 00 09 ; Subtract with carry (long,X) $090022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	stz $B77F.w,X		; 9E 7F B7 ; Store zero to $B77F.w,X [Reads: X Index]
	adc $A27FA3.l,X		; 7F A3 7F A2 ; Add long $A27FA3.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $01D284.l,X		; 7F 84 D2 01 ; Add long $01D284.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$0A1F.w		; E0 1F 0A ; Compare #$0A1F.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $3FC000.l,X		; FF 00 C0 3F ; Subtract with carry (long,X) $3FC000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$3F.b]		; C7 3F ; Compare accumulator (long) [$3F.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	dec $D33F.w,X		; DE 3F D3 ; Decrement memory $D33F.w,X [Reads: X Index] [Flags: ZN]
	and $0028FF.l,X		; 3F FF 28 00 ; AND accumulator with memory (long,X) $0028FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $00FF0F.l,X		; FF 0F FF 00 ; Subtract with carry (long,X) $00FF0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $59.b,Y		; B6 59 ; Load X register $59.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	lda $5D.b,S		; A3 5D ; Load accumulator (stack relative) $5D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $9D11.w		; EE 11 9D ; Increment $9D11.w [Flags: ZN]
	ror $AE51.w		; 6E 51 AE ; Rotate right $AE51.w [Flags: ZNC]
	ldx $D1D1.w		; AE D1 D1 ; Load $D1D1.w into X register [Writes: X Index] [Flags: ZN]
	sbc $0A0024.l,X		; FF 24 00 0A ; Subtract with carry (long,X) $0A0024.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $D1		; 80 D1 ; Branch always to $80, $D1 [Flow: branch]
	sbc $B600FF.l,X		; FF FF 00 B6 ; Subtract with carry (long,X) $B600FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $DD23.w,Y		; D9 23 DD ; Compare accumulator $DD23.w,Y [Reads: Y Index] [Flags: ZNC]
	ror $8491.w		; 6E 91 84 ; Rotate right $8491.w [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E00025.l,X		; FF 25 00 E0 ; Subtract with carry (long,X) $E00025.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $51.b		; 24 51 ; Test bits $51.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sbc $DD40BF.l,X		; FF BF 40 DD ; Subtract with carry (long,X) $DD40BF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $F012ED.l		; 22 ED 12 F0 ; Jump to subroutine long $F012ED.l [Writes: Stack Pointer] [Flow: call]
	ora $9748B7.l		; 0F B7 48 97 ; OR accumulator with memory (long) $9748B7.l [Writes: Accumulator] [Flags: ZN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cmp [$38.b]		; C7 38 ; Compare accumulator (long) [$38.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc [$18.b]		; E7 18 ; Subtract with carry (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsl $4F0F12.l		; 22 12 0F 4F ; Jump to subroutine long $4F0F12.l [Writes: Stack Pointer] [Flow: call]
	adc $FF1F3F.l		; 6F 3F 1F FF ; Add with carry (long) $FF1F3F.l [Writes: Accumulator] [Flags: ZVNC]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	stx $69.b,Y		; 96 69 ; Store X register $69.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	cmp ($7F.b,X)		; C1 7F ; Compare accumulator ($7F.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
.ACCU 16
.INDEX 16
	rep #$7F		; C2 7F
	ldy $7F44.w,X		; BC 44 7F ; Load Y register $7F44.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sty $27.b		; 84 27 ; Store Y register to $27.b [Reads: Y Index]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $600300.l,X		; FF 00 03 60 ; Subtract with carry (long,X) $600300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $47B0CF.l,X		; 9F CF B0 47 ; Store accumulator (long,X) $47B0CF.l,X [Reads: Accumulator, X Index]
	eor $28B2.w		; 4D B2 28 ; Exclusive OR $28B2.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF2500.l,X		; FF 00 25 FF ; Subtract with carry (long,X) $FF2500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $9F3FBF.l,X		; 7F BF 3F 9F ; Add long $9F3FBF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $22FFFF.l,X		; 3F FF FF 22 ; AND accumulator with memory (long,X) $22FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	adc $3F5F40.l,X		; 7F 40 5F 3F ; Add long $3F5F40.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$A060.w		; C0 60 A0 ; Compare #$A060.w with Y register [Reads: Y Index] [Flags: ZNC]
	cmp $58D84F.l		; CF 4F D8 58 ; Compare accumulator (long) $58D84F.l [Reads: Accumulator] [Flags: ZNC]
	eor ($92.b)		; 52 92 ; Exclusive OR accumulator with memory (indirect) ($92.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$97.b],Y		; 57 97 ; Exclusive OR accumulator with memory (long indexed) [$97.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $95.b,X		; 55 95 ; Exclusive OR accumulator with memory $95.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$97.b],Y		; 57 97 ; Exclusive OR accumulator with memory (long indexed) [$97.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$309F.w		; C0 9F 30 ; Compare #$309F.w with Y register [Reads: Y Index] [Flags: ZNC]
	and [$2D.b]		; 27 2D ; AND accumulator with memory (long) [$2D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cmp $3C.b,S		; C3 3C ; Compare accumulator (stack relative) $3C.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	inc $28C2.w,X		; FE C2 28 ; Increment memory $28C2.w,X [Reads: X Index] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp ($C1.b,X)		; C1 C1 ; Compare accumulator ($C1.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: ZNC]
	and $8339.w,Y		; 39 39 83 ; AND accumulator with memory $8339.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $39.b,S		; 83 39 ; Store accumulator (stack relative) $39.b,S [Reads: Accumulator, Stack Pointer]
	and $013C.w,Y		; 39 3C 01 ; AND accumulator with memory $013C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp [$3E.b]		; C7 3E ; Compare accumulator (long) [$3E.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sta $7CC6.w,Y		; 99 C6 7C ; Store accumulator to $7CC6.w,Y [Reads: Accumulator, Y Index]
	dec $7F.b		; C6 7F ; Decrement $7F.b [Reads: Direct Page] [Flags: ZN]
	jmp ($7B7C.w,X)		; 7C 7C 7B ; Jump indirect indexed to ($7B7C.w,X) [Reads: X Index] [Flow: jump]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	ror $74.b,X		; 76 74 ; Rotate right $74.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	jmp ($5868.w)		; 6C 68 58 ; Jump indirect to ($5868.w) [Flow: jump]
	.db $50, $30		; 50 30 ; Branch if overflow clear to $50, $30 [Flow: branch]
	eor ($31.b),Y		; 51 31 ; Exclusive OR accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $50, $B1		; 50 B1 ; Branch if overflow clear to $50, $B1 [Flow: branch]
	jmp ($7178.w,X)		; 7C 78 71 ; Jump indirect indexed to ($7178.w,X) [Reads: X Index] [Flow: jump]
	adc $47.b,S		; 63 47 ; Add with carry (stack relative) $47.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ora $FF8E0E.l		; 0F 0E 8E FF ; OR accumulator with memory (long) $FF8E0E.l [Writes: Accumulator] [Flags: ZN]
	sta $5E.b,S		; 83 5E ; Store accumulator (stack relative) $5E.b,S [Reads: Accumulator, Stack Pointer]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($01.b,X)		; 21 01 ; Logical AND ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sty $7F.b		; 84 7F ; Store Y register to $7F.b [Reads: Y Index]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $DE.b		; 00 DE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $22DC.w,X		; DE DC 22 ; Decrement memory $22DC.w,X [Reads: X Index] [Flags: ZN]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $E010F0.l		; 0F F0 10 E0 ; OR accumulator with memory (long) $E010F0.l [Writes: Accumulator] [Flags: ZN]
	sbc $9BDBCF.l		; EF CF DB 9B ; Subtract with carry (long) $9BDBCF.l [Writes: Accumulator] [Flags: ZVNC]
	lda [$36.b],Y		; B7 36 ; Load accumulator (long indexed) [$36.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $DD6D.w		; EE 6D DD ; Increment $DD6D.w [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and [$F0.b],Y		; 37 F0 ; AND accumulator with memory (long indexed) [$F0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $783C1F.l		; EF 1F 3C 78 ; Subtract with carry (long) $783C1F.l [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $61		; 70 61 ; Branch if overflow set to $70, $61 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $2300FF.l,X		; FF FF 00 23 ; Subtract with carry (long,X) $2300FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF0002.l,X		; FF 02 00 FF ; Subtract with carry (long,X) $FF0002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $000028.l,X		; FF 28 00 00 ; Subtract with carry (long,X) $000028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$44.b]		; 07 44 ; OR accumulator with memory (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $63026F.l,X		; FF 6F 02 63 ; Subtract with carry (long,X) $63026F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF440C.l,X		; FF 0C 44 FF ; Subtract with carry (long,X) $FF440C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $E001.w		; EE 01 E0 ; Increment $E001.w [Flags: ZN]
	sbc $0B002B.l,X		; FF 2B 00 0B ; Subtract with carry (long,X) $0B002B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $2100.w,X		; 1E 00 21 ; Arithmetic shift left $2100.w,X [Reads: X Index] [Flags: ZNC]
	asl $3140.w,X		; 1E 40 31 ; Arithmetic shift left $3140.w,X [Reads: X Index] [Flags: ZNC]
	stx $9F60.w		; 8E 60 9F ; Store X register to $9F60.w [Reads: X Index]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	bit $0022.w,X		; 3C 22 00 ; Test bits $0022.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	tsb $1E.b		; 04 1E ; Test and set bits $1E.b [Reads: Accumulator] [Flags: Z]
	and $5B7F7F.l,X		; 3F 7F 7F 5B ; AND accumulator with memory (long,X) $5B7F7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	.db $90, $60		; 90 60 ; Branch if carry clear to $90, $60 [Flow: branch]
	ora ($80.b),Y		; 11 80 ; OR accumulator with memory ($80.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($01.b)		; 72 01 ; Add with carry (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpx $03.b		; E4 03 ; Compare $03.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	asl $22.b		; 06 22 ; Arithmetic shift left $22.b [Reads: Direct Page] [Flags: ZNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpx #$C3E1.w		; E0 E1 C3 ; Compare #$C3E1.w with X register [Reads: X Index] [Flags: ZNC]
	cmp [$23.b]		; C7 23 ; Compare accumulator (long) [$23.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7E8100.l,X		; FF 00 81 7E ; Subtract with carry (long,X) $7E8100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($C0.b,X)		; 01 C0 ; Logical OR ($C0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $007F80.l,X		; 3F 80 7F 00 ; AND accumulator with memory (long,X) $007F80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $002201.l,X		; FF 01 22 00 ; Subtract with carry (long,X) $002201.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $C102FE.l		; 22 FE 02 C1 ; Jump to subroutine long $C102FE.l [Writes: Stack Pointer] [Flow: call]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	eor #$7EB9.w		; 49 B9 7E ; Exclusive OR #$7EB9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $81.b		; 04 81 ; Test and set bits $81.b [Reads: Accumulator] [Flags: Z]
	ror $00FF.w,X		; 7E FF 00 ; Rotate right $00FF.w,X [Reads: X Index] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	mvp $7D,$0A		; 44 0A 7D ; Move block positive $7D,$0A [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $82, $7C, $83		; 82 7C 83 ; Branch always long to $82, $7C, $83 [Flow: branch]
	and ($DE.b,X)		; 21 DE ; Logical AND ($DE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	stz $00.b,X		; 74 00 ; Store zero to $00.b,X [Reads: X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	mvp $FF,$24		; 44 24 FF ; Move block positive $FF,$24 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $1F.b,S		; 03 1F ; OR accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $524B.w		; 0D 4B 52 ; Logical OR $524B.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $0001.w		; 2D 01 00 ; Logical AND $0001.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $0F3F25.l,X		; 1F 25 3F 0F ; Logical OR long $0F3F25.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sty $7F.b		; 84 7F ; Store Y register to $7F.b [Reads: Y Index]
	cmp [$7F.b]		; C7 7F ; Compare accumulator (long) [$7F.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ldy $7F.b		; A4 7F ; Load $7F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	stz $B27F.w		; 9C 7F B2 ; Store zero to $B27F.w
	eor $B6B649.l		; 4F 49 B6 B6 ; Exclusive OR accumulator with memory (long) $B6B649.l [Writes: Accumulator] [Flags: ZN]
	sbc $FFF1.w,Y		; F9 F1 FF ; Subtract with carry $FFF1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($B0.b)		; 12 B0 ; OR accumulator with memory (indirect) ($B0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $4DFF.w,Y		; F9 FF 4D ; Subtract with carry $4DFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($CF.b)		; B2 CF ; Load accumulator (indirect) ($CF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $9F60.w,X		; BD 60 9F ; Load $9F60.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $FF00C0.l,X		; 3F C0 00 FF ; AND accumulator with memory (long,X) $FF00C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $BA.b		; 45 BA ; Exclusive OR $BA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	nop		; EA ; No operation
	eor $75.b,X		; 55 75 ; Exclusive OR accumulator with memory $75.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $050025.l		; EF 25 00 05 ; Subtract with carry (long) $050025.l [Writes: Accumulator] [Flags: ZVNC]
	eor $EF.b		; 45 EF ; Exclusive OR $EF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $2F882F.l		; 8F 2F 88 2F ; Store accumulator (long) $2F882F.l [Reads: Accumulator]
	sta $F8.b,S		; 83 F8 ; Store accumulator (stack relative) $F8.b,S [Reads: Accumulator, Stack Pointer]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $2F892F.l		; 8F 2F 89 2F ; Store accumulator (long) $2F892F.l [Reads: Accumulator]
	sta $6FC82F.l		; 8F 2F C8 6F ; Store accumulator (long) $6FC82F.l [Reads: Accumulator]
	rol $50.b		; 26 50 ; Rotate left $50.b [Reads: Direct Page] [Flags: ZNC]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	lda ($7E.b),Y		; B1 7E ; Load accumulator ($7E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($7F.b,X)		; E1 7F ; Subtract with carry ($7F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$CC7F.w		; C0 7F CC ; Compare #$CC7F.w with Y register [Reads: Y Index] [Flags: ZNC]
	adc $987F8C.l,X		; 7F 8C 7F 98 ; Add long $987F8C.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$67.b]		; 67 67 ; Add with carry (long) [$67.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$26.b]		; 27 26 ; AND accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$6D.b]		; 27 6D ; AND accumulator with memory (long) [$6D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($00.b)		; 92 00 ; Store accumulator (indirect) ($00.b) [Reads: Accumulator, Direct Page]
	jsl $0109FF.l		; 22 FF 09 01 ; Jump to subroutine long $0109FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $89FF00.l,X		; FF 00 FF 89 ; Subtract with carry (long,X) $89FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $76.b,X		; 76 76 ; Rotate right $76.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit #$7600.w		; 89 00 76 ; Test bits #$7600.w with accumulator [Reads: Accumulator] [Flags: Z]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $89.b,S		; 03 89 ; OR accumulator with stack relative $89.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ror $4E.b,X		; 76 4E ; Rotate right $4E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	lda $B15045.l,X		; BF 45 50 B1 ; Load long $B15045.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor ($B3.b)		; 52 B3 ; Exclusive OR accumulator with memory (indirect) ($B3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $50, $B1		; 50 B1 ; Branch if overflow clear to $50, $B1 [Flow: branch]
	lsr $58BF.w		; 4E BF 58 ; Logical shift right $58BF.w [Flags: ZNC]
	lda $2280.w,Y		; B9 80 22 ; Load $2280.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stx $8C05.w		; 8E 05 8C ; Store X register to $8C05.w [Reads: X Index]
	stx $8680.w		; 8E 80 86 ; Store X register to $8680.w [Reads: X Index]
	sbc $2125FF.l,X		; FF FF 25 21 ; Subtract with carry (long,X) $2125FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dec $00FF.w,X		; DE FF 00 ; Decrement memory $00FF.w,X [Reads: X Index] [Flags: ZN]
	sbc $7B3BC4.l,X		; FF C4 3B 7B ; Subtract with carry (long,X) $7B3BC4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	jsl $0022DE.l		; 22 DE 22 00 ; Jump to subroutine long $0022DE.l [Writes: Stack Pointer] [Flow: call]
	cpx #$C432.w		; E0 32 C4 ; Compare #$C432.w with X register [Reads: X Index] [Flags: ZNC]
	ldy #$F06F.w		; A0 6F F0 ; Load #$F06F.w into Y register [Writes: Y Index] [Flags: ZN]
	and [$D0.b],Y		; 37 D0 ; AND accumulator with memory (long indexed) [$D0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$F8.b],Y		; 37 F8 ; AND accumulator with memory (long indexed) [$F8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $0FF60F.l,X		; FF 0F F6 0F ; Subtract with carry (long,X) $0FF60F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $081000.l,X		; FF 00 10 08 ; Subtract with carry (long,X) $081000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sty $C7.b		; 84 C7 ; Store Y register to $C7.b [Reads: Y Index]
	cpy #$E0E0.w		; C0 E0 E0 ; Compare #$E0E0.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc ($1E.b,X)		; E1 1E ; Subtract with carry ($1E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	and $C300FF.l,X		; 3F FF 00 C3 ; AND accumulator with memory (long,X) $C300FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $7F96.w,X		; 3C 96 7F ; Test bits $7F96.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cpy #$733F.w		; C0 3F 73 ; Compare #$733F.w with Y register [Reads: Y Index] [Flags: ZNC]
	sty $F3CD.w		; 8C CD F3 ; Store Y register to $F3CD.w [Reads: Y Index]
	asl $003F.w,X		; 1E 3F 00 ; Arithmetic shift left $003F.w,X [Reads: X Index] [Flags: ZNC]
	bit $3F7F.w,X		; 3C 7F 3F ; Test bits $3F7F.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sty $C1F3.w		; 8C F3 C1 ; Store Y register to $C1F3.w [Reads: Y Index]
	cmp ($29.b,X)		; C1 29 ; Compare accumulator ($29.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	cmp #$FFC9.w		; C9 C9 FF ; Compare #$FFC9.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	sbc $7F243E.l,X		; FF 3E 24 7F ; Subtract with carry (long,X) $7F243E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0036.w		; 0D 36 00 ; Logical OR $0036.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $3CDB24.l,X		; FF 24 DB 3C ; Subtract with carry (long,X) $3CDB24.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $60F140.l,X		; FF 40 F1 60 ; Subtract with carry (long,X) $60F140.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor $EC.b,S		; 43 EC ; Exclusive OR accumulator with stack relative $EC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	mvp $67,$18		; 44 18 67 ; Move block positive $67,$18 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	eor $47476F.l,X		; 5F 6F 47 47 ; Exclusive OR accumulator with memory (long,X) $47476F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc ($1C.b,X)		; E1 1C ; Subtract with carry ($1C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00.b,S		; E3 00 ; Subtract stack-relative $00.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $00C000.l,X		; FF 00 C0 00 ; Subtract with carry (long,X) $00C000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $00FF00.l,X		; BF 00 FF 00 ; Load long $00FF00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $1D.b,S		; E3 1D ; Subtract stack-relative $1D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	inc $DF82.w,X		; FE 82 DF ; Increment memory $DF82.w,X [Reads: X Index] [Flags: ZN]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx #$6022.w		; E0 22 60 ; Compare #$6022.w with X register [Reads: X Index] [Flags: ZNC]
	jmp ($C339.w,X)		; 7C 39 C3 ; Jump indirect indexed to ($C339.w,X) [Reads: X Index] [Flow: jump]
	and $40BF.w,X		; 3D BF 40 ; AND accumulator with memory $40BF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc $FC00.w,X		; FE 00 FC ; Increment memory $FC00.w,X [Reads: X Index] [Flags: ZN]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ldy #$6080.w		; A0 80 60 ; Load #$6080.w into Y register [Writes: Y Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	lda $FC7C.w,X		; BD 7C FC ; Load $FC7C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $E0		; F0 E0 ; Branch if equal to $F0, $E0 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $BB		; 80 BB ; Branch always to $80, $BB [Flow: branch]
	mvp $27,$D8		; 44 D8 27 ; Move block positive $27,$D8 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc [$08.b],Y		; F7 08 ; Subtract with carry (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $0F		; 70 0F ; Branch if overflow set to $70, $0F [Flow: branch]
	and $2F4F00.l,X		; 3F 00 4F 2F ; AND accumulator with memory (long,X) $2F4F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $004483.l,X		; 1F 83 44 00 ; Logical OR long $004483.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	bit $24C3.w,X		; 3C C3 24 ; Test bits $24C3.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cmp $45.b,S		; C3 45 ; Compare accumulator (stack relative) $45.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc [$18.b],Y		; F7 18 ; Subtract with carry (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C3.b		; 00 C3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $81.b,S		; C3 81 ; Compare accumulator (stack relative) $81.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	eor ($20.b)		; 52 20 ; Exclusive OR accumulator with memory (indirect) ($20.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $0F7F00.l,X		; 5F 00 7F 0F ; Exclusive OR accumulator with memory (long,X) $0F7F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $3F.b,S		; 43 3F ; Exclusive OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$38.b]		; 07 38 ; OR accumulator with memory (long) [$38.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $010200.l,X		; 3F 00 02 01 ; AND accumulator with memory (long,X) $010200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $002220.l,X		; 3F 20 22 00 ; AND accumulator with memory (long,X) $002220.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $0007.w		; 0E 07 00 ; Arithmetic shift left $0007.w [Flags: ZNC]
	brk $BB.b		; 00 BB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $84,$7B		; 44 7B 84 ; Move block positive $84,$7B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp [$93.b]		; C7 93 ; Compare accumulator (long) [$93.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	jmp ($38C7.w)		; 6C C7 38 ; Jump indirect to ($38C7.w) [Flow: jump]
	cmp $0C8330.l		; CF 30 83 0C ; Compare accumulator (long) $0C8330.l [Reads: Accumulator] [Flags: ZNC]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $090026.l,X		; FF 26 00 09 ; Subtract with carry (long,X) $090026.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $070E07.l		; 0F 07 0E 07 ; OR accumulator with memory (long) $070E07.l [Writes: Accumulator] [Flags: ZN]
	trb $230F.w		; 1C 0F 23 ; Test and reset bits $230F.w [Reads: Accumulator] [Flags: Z]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $335F07.l,X		; 7F 07 5F 33 ; Add long $335F07.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $106F31.l		; 4F 31 6F 10 ; Exclusive OR accumulator with memory (long) $106F31.l [Writes: Accumulator] [Flags: ZN]
	and $1C02.w,X		; 3D 02 1C ; AND accumulator with memory $1C02.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1E.b,S		; 03 1E ; OR accumulator with stack relative $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($1F.b,X)		; 01 1F ; Logical OR ($1F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $47.b		; 00 47 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsr $1822.w		; 20 22 18 ; Jump to subroutine at $1822.w [Writes: Stack Pointer] [Flow: call]
	ora $00FF.w,X		; 1D FF 00 ; OR accumulator with memory $00FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($31.b),Y		; B1 31 ; Load accumulator ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $80, $1F		; 80 1F ; Branch always to $80, $1F [Flow: branch]
	cpy #$EF5F.w		; C0 5F EF ; Compare #$EF5F.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $70, $AF		; 70 AF ; Branch if overflow set to $70, $AF [Flow: branch]
	.db $30, $8F		; 30 8F ; Branch if minus to $30, $8F [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	lsr $6067.w		; 4E 67 60 ; Logical shift right $6067.w [Flags: ZNC]
	jsr $4F0F.w		; 20 0F 4F ; Jump to subroutine at $4F0F.w [Writes: Stack Pointer] [Flow: call]
	adc $8C00FF.l		; 6F FF 00 8C ; Add with carry (long) $8C00FF.l [Writes: Accumulator] [Flags: ZVNC]
	sty $C7C7.w		; 8C C7 C7 ; Store Y register to $C7C7.w [Reads: Y Index]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $00FF45.l,X		; FF 45 FF 00 ; Subtract with carry (long,X) $00FF45.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	adc ($38.b,S),Y		; 73 38 ; Add with carry (stack relative indirect indexed) ($38.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $501AFF.l		; 22 FF 1A 50 ; Jump to subroutine long $501AFF.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $48		; B0 48 ; Branch if carry set to $B0, $48 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	mvp $22,$BC		; 44 BC 22 ; Move block positive $22,$BC [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	dec $4739.w,X		; DE 39 47 ; Decrement memory $4739.w,X [Reads: X Index] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora [$04.b],Y		; 17 04 ; OR accumulator with memory (long indexed) [$04.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0C.b,S		; 03 0C ; OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $C18387.l		; 8F 87 83 C1 ; Store accumulator (long) $C18387.l [Reads: Accumulator]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $10, $78		; 10 78 ; Branch if plus to $10, $78 [Flow: branch]
	tsb $FF4D.w		; 0C 4D FF ; Test and set bits $FF4D.w [Reads: Accumulator] [Flags: Z]
	eor #$FF43.w		; 49 43 FF ; Exclusive OR #$FF43.w with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $43807F.l,X		; FF 7F 80 43 ; Subtract with carry (long,X) $43807F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $4D0300.l,X		; FF 00 03 4D ; Subtract with carry (long,X) $4D0300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor #$FF00.w		; 49 00 FF ; Exclusive OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $7F0E00.l		; 22 00 0E 7F ; Jump to subroutine long $7F0E00.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	sbc $D0E9B0.l,X		; FF B0 E9 D0 ; Subtract with carry (long,X) $D0E9B0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F6FFC6.l,X		; FF C6 FF F6 ; Subtract with carry (long,X) $F6FFC6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $0B0B50.l,X		; 5F 50 0B 0B ; Exclusive OR accumulator with memory (long,X) $0B0B50.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $800700.l		; 22 00 07 80 ; Jump to subroutine long $800700.l [Writes: Stack Pointer] [Flow: call]
	dec $C0.b		; C6 C0 ; Decrement $C0.b [Reads: Direct Page] [Flags: ZN]
	.db $F0, $50		; F0 50 ; Branch if equal to $F0, $50 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $0C85FF.l		; 22 FF 85 0C ; Jump to subroutine long $0C85FF.l [Writes: Stack Pointer] [Flow: call]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: ZNC]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $22FF.w		; ED FF 22 ; Subtract $22FF.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	tsb $40.b		; 04 40 ; Test and set bits $40.b [Reads: Accumulator] [Flags: Z]
	and $FF7F8C.l,X		; 3F 8C 7F FF ; AND accumulator with memory (long,X) $FF7F8C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $42.b		; E6 42 ; Increment $42.b [Reads: Direct Page] [Flags: ZN]
	cmp $01.b,S		; C3 01 ; Compare accumulator (stack relative) $01.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	ora ($2A.b,X)		; 01 2A ; Logical OR ($2A.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $7D.b		; 26 7D ; Rotate left $7D.b [Reads: Direct Page] [Flags: ZNC]
	eor $3B.b		; 45 3B ; Exclusive OR $3B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sta [$85.b]		; 87 85 ; Store accumulator (long) [$85.b] [Reads: Accumulator, Direct Page]
	sbc $037E79.l,X		; FF 79 7E 03 ; Subtract with carry (long,X) $037E79.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $82, $C4, $78		; 82 C4 78 ; Branch always long to $82, $C4, $78 [Flow: branch]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $E0		; 80 E0 ; Branch always to $80, $E0 [Flow: branch]
	.db $80, $60		; 80 60 ; Branch always to $80, $60 [Flow: branch]
	cpy #$C0A0.w		; C0 A0 C0 ; Compare #$C0A0.w with Y register [Reads: Y Index] [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $40.b		; 04 40 ; Test and set bits $40.b [Reads: Accumulator] [Flags: Z]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $FF2400.l		; 22 00 24 FF ; Jump to subroutine long $FF2400.l [Writes: Stack Pointer] [Flow: call]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc $79838C.l,X		; FF 8C 83 79 ; Subtract with carry (long,X) $79838C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sty $8043.w		; 8C 43 80 ; Store Y register to $8043.w [Reads: Y Index]
	eor $7E.b,S		; 43 7E ; Exclusive OR accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta ($05.b,X)		; 81 05 ; Store accumulator ($05.b,X) [Reads: Accumulator, X Index, Direct Page]
	ldy $5B.b,X		; B4 5B ; Load Y register $5B.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $7E43.w,X		; BC 43 7E ; Load Y register $7E43.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sta ($83.b,X)		; 81 83 ; Store accumulator ($83.b,X) [Reads: Accumulator, X Index, Direct Page]
	tsb $0B01.w		; 0C 01 0B ; Test and set bits $0B01.w [Reads: Accumulator] [Flags: Z]
	lda $8181.w,X		; BD 81 81 ; Load $8181.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc $1600FF.l,X		; FF FF 00 16 ; Subtract with carry (long,X) $1600FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $3F.b,X		; 15 3F ; OR accumulator with memory $3F.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $3D43.w,X		; 3D 43 3D ; AND accumulator with memory $3D43.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($3F.b,X)		; 01 3F ; Logical OR ($3F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $3F23.w,X		; 3C 23 3F ; Test bits $3F23.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ora ($16.b),Y		; 11 16 ; OR accumulator with memory ($16.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $14.b,X		; 16 14 ; Arithmetic shift left $14.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	bit $3838.w,X		; 3C 38 38 ; Test bits $3838.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	bit $3F3F.w,X		; 3C 3F 3F ; Test bits $3F3F.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	asl $EF.b,X		; 16 EF ; Arithmetic shift left $EF.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lda #$8E7E.w		; A9 7E 8E ; Load #$8E7E.w into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $1BE5.w,X		; 7D E5 1B ; Add $1BE5.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FD.b,S		; 43 FD ; Exclusive OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $0301.w,X		; 3E 01 03 ; Rotate left $0301.w,X [Reads: X Index] [Flags: ZNC]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	tsb $C0.b		; 04 C0 ; Test and set bits $C0.b [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	bit $1C02.w,X		; 3C 02 1C ; Test bits $1C02.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	mvp $1F,$0F		; 44 0F 1F ; Move block positive $1F,$0F [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $3F.b		; 02 3F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0F443E.l		; 0F 3E 44 0F ; OR accumulator with memory (long) $0F443E.l [Writes: Accumulator] [Flags: ZN]
	bit $3F01.w,X		; 3C 01 3F ; Test bits $3F01.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ora [$22.b]		; 07 22 ; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $092F23.l		; 0F 23 2F 09 ; OR accumulator with memory (long) $092F23.l [Writes: Accumulator] [Flags: ZN]
	and [$0C.b]		; 27 0C ; AND accumulator with memory (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0A.b,S		; 03 0A ; OR accumulator with stack relative $0A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$0C.b]		; 07 0C ; OR accumulator with memory (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $070000.l		; 22 00 00 07 ; Jump to subroutine long $070000.l [Writes: Stack Pointer] [Flow: call]
	jsl $CE1700.l		; 22 00 17 CE ; Jump to subroutine long $CE1700.l [Writes: Stack Pointer] [Flow: call]
	eor ($EE.b),Y		; 51 EE ; Exclusive OR accumulator with memory ($EE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($AE.b),Y		; 71 AE ; Add with carry ($AE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($8E.b),Y		; 31 8E ; AND accumulator with memory ($8E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($CE.b),Y		; 11 CE ; OR accumulator with memory ($CE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($EF.b),Y		; 51 EF ; Exclusive OR accumulator with memory ($EF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $70, $87		; 70 87 ; Branch if overflow set to $70, $87 [Flow: branch]
	ora [$8C.b]		; 07 8C ; OR accumulator with memory (long) [$8C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $0F2F.w		; 0C 2F 0F ; Test and set bits $0F2F.w [Reads: Accumulator] [Flags: Z]
	eor $0F2F6F.l		; 4F 6F 2F 0F ; Exclusive OR accumulator with memory (long) $0F2F6F.l [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc ($49.b,S),Y		; 73 49 ; Add with carry (stack relative indirect indexed) ($49.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF.b		; 05 FF ; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx #$E72D.w		; E0 2D E7 ; Compare #$E72D.w with X register [Reads: X Index] [Flags: ZNC]
	dec $9252.w		; CE 52 92 ; Decrement $9252.w [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cmp $20E04F.l		; CF 4F E0 20 ; Compare accumulator (long) $20E04F.l [Reads: Accumulator] [Flags: ZNC]
	lda $5DA240.l,X		; BF 40 A2 5D ; Load long $5DA240.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $62, $9D, $3F		; 62 9D 3F ; Push effective relative address $62, $9D, $3F [Writes: Stack Pointer]
	cpy #$272D.w		; C0 2D 27 ; Compare #$272D.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $30, $1F		; 30 1F ; Branch if minus to $30, $1F [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	stz $64.b		; 64 64 ; Store zero to $64.b
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ror $E7.b		; 66 E7 ; Rotate right $E7.b [Reads: Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $DB.b		; 24 DB ; Test bits $DB.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $E7C3.w,X		; 3C C3 E7 ; Test bits $E7C3.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	bit $3C9B.w,X		; 3C 9B 3C ; Test bits $3C9B.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sbc [$81.b]		; E7 81 ; Subtract with carry (long) [$81.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsl $3C0000.l		; 22 00 00 3C ; Jump to subroutine long $3C0000.l [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $0A00.w		; 1C 00 0A ; Test and reset bits $0A00.w [Reads: Accumulator] [Flags: Z]
	tsb $0D00.w		; 0C 00 0D ; Test and set bits $0D00.w [Reads: Accumulator] [Flags: Z]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $63637F.l,X		; 7F 7F 63 63 ; Add long $63637F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($32.b,S),Y		; 73 32 ; Add with carry (stack relative indirect indexed) ($32.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $0F,$00		; 44 00 0F ; Move block positive $0F,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $1E.b		; 02 1E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $30.b		; 06 30 ; Arithmetic shift left $30.b [Reads: Direct Page] [Flags: ZNC]
	.db $70, $61		; 70 61 ; Branch if overflow set to $70, $61 [Flow: branch]
	adc $7F.b,S		; 63 7F ; Add with carry (stack relative) $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc $00273E.l,X		; 7F 3E 27 00 ; Add long $00273E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $0C,$00		; 44 00 0C ; Move block positive $0C,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $7F3E00.l		; 0F 00 3E 7F ; OR accumulator with memory (long) $7F3E00.l [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $70, $73		; 70 73 ; Branch if overflow set to $70, $73 [Flow: branch]
	adc ($30.b,S),Y		; 73 30 ; Add with carry (stack relative indirect indexed) ($30.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	tsb $E0.b		; 04 E0 ; Test and set bits $E0.b [Reads: Accumulator] [Flags: Z]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $E00900.l		; 22 00 09 E0 ; Jump to subroutine long $E00900.l [Writes: Stack Pointer] [Flow: call]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0E1E.w,X		; FE 1E 0E ; Increment memory $0E1E.w,X [Reads: X Index] [Flags: ZN]
	dec $1CFE.w		; CE FE 1C ; Decrement $1CFE.w [Flags: ZN]
	rol $FF4A.w,X		; 3E 4A FF ; Rotate left $FF4A.w,X [Reads: X Index] [Flags: ZNC]
	adc $FF3602.l,X		; 7F 02 36 FF ; Add long $FF3602.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $020026.l,X		; FF 26 00 02 ; Subtract with carry (long,X) $020026.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$E000.w		; E0 00 E0 ; Compare #$E000.w with X register [Reads: X Index] [Flags: ZNC]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $C8.b,S		; 83 C8 ; Store accumulator (stack relative) $C8.b,S [Reads: Accumulator, Stack Pointer]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $FEFE.w,X		; 1E FE FE ; Arithmetic shift left $FEFE.w,X [Reads: X Index] [Flags: ZNC]
	bit $11FF.w,X		; 3C FF 11 ; Test bits $11FF.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $807FC0.l,X		; 3F C0 7F 80 ; AND accumulator with memory (long,X) $807FC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $788770.l		; 8F 70 87 78 ; Store accumulator (long) $788770.l [Reads: Accumulator]
	sta $7C.b,S		; 83 7C ; Store accumulator (stack relative) $7C.b,S [Reads: Accumulator, Stack Pointer]
	cpy #$C3BF.w		; C0 BF C3 ; Compare #$C3BF.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda $DBE7.w,X		; BD E7 DB ; Load $DBE7.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$2280.w		; C0 80 22 ; Compare #$2280.w with Y register [Reads: Y Index] [Flags: ZNC]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	cpy #$F00F.w		; C0 0F F0 ; Compare #$F00F.w with Y register [Reads: Y Index] [Flags: ZNC]
	and [$C8.b],Y		; 37 C8 ; AND accumulator with memory (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $F7.b		; 45 F7 ; Exclusive OR $F7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$08.b],Y		; F7 08 ; Subtract with carry (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($F7.b),Y		; 11 F7 ; OR accumulator with memory ($F7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $D1.b,X		; D5 D1 ; Compare accumulator $D1.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	and $F11FE1.l		; 2F E1 1F F1 ; AND accumulator with memory (long) $F11FE1.l [Writes: Accumulator] [Flags: ZN]
	ora $FD07F9.l		; 0F F9 07 FD ; OR accumulator with memory (long) $FD07F9.l [Writes: Accumulator] [Flags: ZN]
	ora $09.b,S		; 03 09 ; OR accumulator with stack relative $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc [$08.b],Y		; F7 08 ; Subtract with carry (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit #$2589.w		; 89 89 25 ; Test bits #$2589.w with accumulator [Reads: Accumulator] [Flags: Z]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$76.b],Y		; F7 76 ; Subtract with carry (long indexed) [$76.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($B1.b),Y		; 71 B1 ; Add with carry ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $AC.b,X		; 74 AC ; Store zero to $AC.b,X [Reads: X Index]
	jmp ($5FA3.w,X)		; 7C A3 5F ; Jump indirect indexed to ($5FA3.w,X) [Reads: X Index] [Flow: jump]
	.db $B0, $AF		; B0 AF ; Branch if carry set to $B0, $AF [Flow: branch]
	cmp $172718.l,X		; DF 18 27 17 ; Compare accumulator (long,X) $172718.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $30, $F0		; 30 F0 ; Branch if minus to $30, $F0 [Flow: branch]
	asl $2203.w		; 0E 03 22 ; Arithmetic shift left $2203.w [Flags: ZNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$0F80.w		; C0 80 0F ; Compare #$0F80.w with Y register [Reads: Y Index] [Flags: ZNC]
	and [$CF.b],Y		; 37 CF ; AND accumulator with memory (long indexed) [$CF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor [$39.b]		; 47 39 ; Exclusive OR accumulator with memory (long) [$39.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp #$3506.w		; C9 06 35 ; Compare #$3506.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp $CF33.w		; CD 33 CF ; Compare $CF33.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	.db $30, $CF		; 30 CF ; Branch if minus to $30, $CF [Flow: branch]
	cpy #$C623.w		; C0 23 C6 ; Compare #$C623.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora ($C2.b,S),Y		; 13 C2 ; OR accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cpy #$7F84.w		; C0 84 7F ; Compare #$7F84.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $82, $7E, $8C		; 82 7E 8C ; Branch always long to $82, $7E, $8C [Flow: branch]
	stz $B6.b,X		; 74 B6 ; Store zero to $B6.b,X [Reads: X Index]
	lsr $3CC4.w		; 4E C4 3C ; Logical shift right $3CC4.w [Flags: ZNC]
	ldx $7E.b		; A6 7E ; Load $7E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	adc $FF.b,S		; 63 FF ; Add with carry (stack relative) $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	adc ($FF.b),Y		; 71 FF ; Add with carry ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $CE.b		; 00 CE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $39FE1D.l,X		; 3F 1D FE 39 ; AND accumulator with memory (long,X) $39FE1D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc $FE71.w,X		; FE 71 FE ; Increment memory $FE71.w,X [Reads: X Index] [Flags: ZN]
	sbc #$FDF6.w		; E9 F6 FD ; Subtract #$FDF6.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
.INDEX 8
	sep #$DF		; E2 DF
	cpx #$D8.b		; E0 D8 ; Compare #$D8.b with X register [Reads: X Index] [Flags: ZNC]
	sbc [$27.b]		; E7 27 ; Subtract with carry (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$EF.b],Y		; 17 EF ; OR accumulator with memory (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor #$E9D9.w		; 49 D9 E9 ; Exclusive OR #$E9D9.w with accumulator [Writes: Accumulator] [Flags: ZN]
	tsb $39.b		; 04 39 ; Test and set bits $39.b [Reads: Accumulator] [Flags: Z]
	cmp #$09F9.w		; C9 F9 09 ; Compare #$09F9.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $E0.b		; 06 E0 ; Arithmetic shift left $E0.b [Reads: Direct Page] [Flags: ZNC]
	and $B930DF.l,X		; 3F DF 30 B9 ; AND accumulator with memory (long,X) $B930DF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc #$E878.w		; 69 78 E8 ; Add #$E878.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsr ($F6EC.w,X)		; FC EC F6 ; Jump to subroutine indirect indexed ($F6EC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $E7FB.w		; EE FB E7 ; Increment $E7FB.w [Flags: ZN]
	jsr ($E6C3.w,X)		; FC C3 E6 ; Jump to subroutine indirect indexed ($E6C3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sta $6630.w,Y		; 99 30 66 ; Store accumulator to $6630.w,Y [Reads: Accumulator, Y Index]
	sbc [$E3.b]		; E7 E3 ; Subtract with carry (long) [$E3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($E0.b,X)		; E1 E0 ; Subtract with carry ($E0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $71FEFC.l,X		; FF FC FE 71 ; Subtract with carry (long,X) $71FEFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta [$71.b]		; 87 71 ; Store accumulator (long) [$71.b] [Reads: Accumulator, Direct Page]
	eor $3A201F.l		; 4F 1F 20 3A ; Exclusive OR accumulator with memory (long) $3A201F.l [Writes: Accumulator] [Flags: ZN]
	rol $4A.b,X		; 36 4A ; Rotate left $4A.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	dec $C7C1.w		; CE C1 C7 ; Decrement $C7C1.w [Flags: ZN]
	jsr ($0070.w,X)		; FC 70 00 ; Jump to subroutine indirect indexed ($0070.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	cmp ($31.b,X)		; C1 31 ; Compare accumulator ($31.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	dec $39.b		; C6 39 ; Decrement $39.b [Reads: Direct Page] [Flags: ZN]
	rol $B3D5.w		; 2E D5 B3 ; Rotate left $B3D5.w [Flags: ZNC]
	dec $3EC2.w		; CE C2 3E ; Decrement $3EC2.w [Flags: ZN]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $3F5F7F.l,X		; 9F 7F 5F 3F ; Store accumulator (long,X) $3F5F7F.l,X [Reads: Accumulator, X Index]
	adc $00225F.l		; 6F 5F 22 00 ; Add with carry (long) $00225F.l [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $13.b,S		; 83 13 ; Store accumulator (stack relative) $13.b,S [Reads: Accumulator, Stack Pointer]
	brk $37.b		; 00 37 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $DCFFE3.l,X		; FF E3 FF DC ; Subtract with carry (long,X) $DCFFE3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($D2.b,S),Y		; F3 D2 ; Subtract with carry (stack relative indirect indexed) ($D2.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $83D9.w,Y		; F9 D9 83 ; Subtract with carry $83D9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc [$FD.b],Y		; F7 FD ; Subtract with carry (long indexed) [$FD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($E3.b,S),Y		; F3 E3 ; Subtract with carry (stack relative indirect indexed) ($E3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$CC.b		; C0 CC ; Compare #$CC.b with Y register [Reads: Y Index] [Flags: ZNC]
	dec $E3.b		; C6 E3 ; Decrement $E3.b [Reads: Direct Page] [Flags: ZN]
	sbc ($F0.b,X)		; E1 F0 ; Subtract with carry ($F0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $9A		; F0 9A ; Branch if equal to $F0, $9A [Flow: branch]
	adc $79B6.w,X		; 7D B6 79 ; Add $79B6.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc #$89F6.w		; 69 F6 89 ; Add #$89F6.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	adc [$7D.b],Y		; 77 7D ; Add with carry (long indexed) [$7D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $6F.b,S		; 83 6F ; Store accumulator (stack relative) $6F.b,S [Reads: Accumulator, Stack Pointer]
	cmp $AEB7.w,X		; DD B7 AE ; Compare accumulator $AEB7.w,X [Reads: X Index] [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sta ($25.b)		; 92 25 ; Store accumulator (indirect) ($25.b) [Reads: Accumulator, Direct Page]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	stz $0C.b		; 64 0C ; Store zero to $0C.b
	sbc $FF441F.l,X		; FF 1F 44 FF ; Subtract with carry (long,X) $FF441F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $783801.l,X		; 7F 01 38 78 ; Add long $783801.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $C0.b,S		; 43 C0 ; Exclusive OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: ZNC]
	sta ($91.b),Y		; 91 91 ; Store accumulator ($91.b),Y [Reads: Accumulator, Direct Page, Y Index]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx #$2D.b		; E0 2D ; Compare #$2D.b with X register [Reads: X Index] [Flags: ZNC]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Accumulator, Direct Page]
	ora $98FF6E.l,X		; 1F 6E FF 98 ; Logical OR long $98FF6E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $FE82.w,X		; DE 82 FE ; Decrement memory $FE82.w,X [Reads: X Index] [Flags: ZN]
	stx $C2E0.w		; 8E E0 C2 ; Store X register to $C2E0.w [Reads: X Index]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	ldy $F22D.w,X		; BC 2D F2 ; Load Y register $F22D.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	adc ($E4.b)		; 72 E4 ; Add with carry (indirect) ($E4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	and [$0F.b]		; 27 0F ; AND accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $7A3E.w,X		; 1D 3E 7A ; OR accumulator with memory $7A3E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $ED39.w,X		; 3D 39 ED ; AND accumulator with memory $ED39.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp [$D9.b],Y		; D7 D9 ; Compare accumulator (long indexed) [$D9.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	lda $A15FB1.l		; AF B1 5F A1 ; Load long $A15FB1.l into accumulator [Writes: Accumulator] [Flags: ZN]
	adc $877F82.l,X		; 7F 82 7F 87 ; Add long $877F82.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $7B8F.w,X		; 7D 8F 7B ; Add $7B8F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $C077.w,X		; 9D 77 C0 ; Store accumulator to $C077.w,X [Reads: Accumulator, X Index]
	.db $80, $25		; 80 25 ; Branch always to $80, $25 [Flow: branch]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr $4720.w		; 20 20 47 ; Jump to subroutine at $4720.w [Writes: Stack Pointer] [Flow: call]
	eor [$8B.b]		; 47 8B ; Exclusive OR accumulator with memory (long) [$8B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $0D0F0B.l		; 8F 0B 0F 0D ; Store accumulator (long) $0D0F0B.l [Reads: Accumulator]
	ora $0D2F2C.l		; 0F 2C 2F 0D ; OR accumulator with memory (long) $0D2F2C.l [Writes: Accumulator] [Flags: ZN]
	asl $DFEE.w		; 0E EE DF ; Arithmetic shift left $DFEE.w [Flags: ZNC]
	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $70, $F0		; 70 F0 ; Branch if overflow set to $70, $F0 [Flow: branch]
	.db $F0, $D0		; F0 D0 ; Branch if equal to $F0, $D0 [Flow: branch]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	cmp [$D7.b]		; C7 D7 ; Compare accumulator (long) [$D7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	eor $EF.b		; 45 EF ; Exclusive OR $EF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FF0006.l,X		; FF 06 00 FF ; Subtract with carry (long,X) $FF0006.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $EFEF00.l,X		; FF 00 EF EF ; Subtract with carry (long,X) $EFEF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	eor $0D.b,S		; 43 0D ; Exclusive OR accumulator with stack relative $0D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $F501.w		; 0E 01 F5 ; Arithmetic shift left $F501.w [Flags: ZNC]
	inc $43.b,X		; F6 43 ; Increment memory $43.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc $0AFA.w,Y		; F9 FA 0A ; Subtract with carry $0AFA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $01FE.w,X		; FD FE 01 ; Subtract with carry $01FE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $00FF.w,X		; FE FF 00 ; Increment memory $00FF.w,X [Reads: X Index] [Flags: ZN]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	jsl $780700.l		; 22 00 07 78 ; Jump to subroutine long $780700.l [Writes: Stack Pointer] [Flow: call]
	sta [$74.b]		; 87 74 ; Store accumulator (long) [$74.b] [Reads: Accumulator, Direct Page]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	adc ($8C.b,S),Y		; 73 8C ; Add with carry (stack relative indirect indexed) ($8C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($8F.b,S),Y		; 73 8F ; Add with carry (stack relative indirect indexed) ($8F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor [$F0.b]		; 47 F0 ; Exclusive OR accumulator with memory (long) [$F0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $238023.l		; 0F 23 80 23 ; OR accumulator with memory (long) $238023.l [Writes: Accumulator] [Flags: ZN]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $FF		; 70 FF ; Branch if overflow set to $70, $FF [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sbc $7AFE79.l,X		; FF 79 FE 7A ; Subtract with carry (long,X) $7AFE79.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FA36.w,X		; FD 36 FA ; Subtract with carry $FA36.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $19F4.w		; 0C F4 19 ; Test and set bits $19F4.w [Reads: Accumulator] [Flags: Z]
	sbc #$DB2B.w		; E9 2B DB ; Subtract #$DB2B.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,S),Y		; 13 01 ; OR accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $06.b,S		; 03 06 ; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $62.b		; 04 62 ; Test and set bits $62.b [Reads: Accumulator] [Flags: Z]
	sbc $61.b,S		; E3 61 ; Subtract stack-relative $61.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
.ACCU 8
	sep #$23		; E2 23
	sbc ($33.b,X)		; E1 33 ; Subtract with carry ($33.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($13.b),Y		; F1 13 ; Subtract with carry ($13.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($9B.b),Y		; F1 9B ; Subtract with carry ($9B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $B9CA.w,Y		; 79 CA B9 ; Add $B9CA.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $DC.b		; E5 DC ; Subtract $DC.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsl $0C191C.l		; 22 1C 19 0C ; Jump to subroutine long $0C191C.l [Writes: Stack Pointer] [Flow: call]
	tsb $0404.w		; 0C 04 04 ; Test and set bits $0404.w [Reads: Accumulator] [Flags: Z]
	cop $C1.b		; 02 C1 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($81.b,X)		; 41 81 ; Exclusive OR accumulator with memory ($81.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta ($88.b,X)		; 81 88 ; Store accumulator ($88.b,X) [Reads: Accumulator, X Index, Direct Page]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$50.b		; A0 50 ; Load #$50.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $B0, $AF		; B0 AF ; Branch if carry set to $B0, $AF [Flow: branch]
	cmp $6FE0DF.l,X		; DF DF E0 6F ; Compare accumulator (long,X) $6FE0DF.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	.db $F0, $3E		; F0 3E ; Branch if equal to $F0, $3E [Flow: branch]
	ror $1F77.w,X		; 7E 77 1F ; Rotate right $1F77.w,X [Reads: X Index] [Flags: ZNC]
	ora $130022.l		; 0F 22 00 13 ; OR accumulator with memory (long) $130022.l [Writes: Accumulator] [Flags: ZN]
	adc $E7.b		; 65 E7 ; Add $E7.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $D97F.w,X		; BD 7F D9 ; Load $D97F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $47827E.l,X		; 3F 7E 82 47 ; AND accumulator with memory (long,X) $47827E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $3EFF7F.l,X		; FF 7F FF 3E ; Subtract with carry (long,X) $3EFF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $18FC03.l,X		; FF 03 FC 18 ; Subtract with carry (long,X) $18FC03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $435E.w		; 6E 5E 43 ; Rotate right $435E.w [Flags: ZNC]
	adc $0C5D.w		; 6D 5D 0C ; Add $0C5D.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cld		; D8 ; Clear decimal flag [Flags: D]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $B0, $70		; B0 70 ; Branch if carry set to $B0, $70 [Flow: branch]
	adc ($F1.b),Y		; 71 F1 ; Add with carry ($F1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($82.b,X)		; 81 82 ; Store accumulator ($82.b,X) [Reads: Accumulator, X Index, Direct Page]
	.db $82, $22, $07		; 82 22 07 ; Branch always long to $82, $22, $07 [Flow: branch]
	ora ($0F.b,X)		; 01 0F ; Logical OR ($0F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $FF22.w		; 0E 22 FF ; Arithmetic shift left $FF22.w [Flags: ZNC]
	cpx #$25.b		; E0 25 ; Compare #$25.b with X register [Reads: X Index] [Flags: ZNC]
	inc $F8FF.w,X		; FE FF F8 ; Increment memory $F8FF.w,X [Reads: X Index] [Flags: ZN]
	jsr ($F8F3.w,X)		; FC F3 F8 ; Jump to subroutine indirect indexed ($F8F3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc [$F1.b]		; E7 F1 ; Subtract with carry (long) [$F1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $C59FE2.l		; CF E2 9F C5 ; Compare accumulator (long) $C59FE2.l [Reads: Accumulator] [Flags: ZNC]
	rol $FEFF.w,X		; 3E FF FE ; Rotate left $FEFF.w,X [Reads: X Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $E0		; F0 E0 ; Branch if equal to $F0, $E0 [Flow: branch]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $D0		; 80 D0 ; Branch always to $80, $D0 [Flow: branch]
	and $17EF10.l		; 2F 10 EF 17 ; AND accumulator with memory (long) $17EF10.l [Writes: Accumulator] [Flags: ZN]
	sbc $3FEFD0.l		; EF D0 EF 3F ; Subtract with carry (long) $3FEFD0.l [Writes: Accumulator] [Flags: ZVNC]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZNC]
	and $80FF00.l,X		; 3F 00 FF 80 ; AND accumulator with memory (long,X) $80FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	ora $FE.b		; 05 FE ; Logical OR $FE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc ($F2.b,X)		; E1 F2 ; Subtract with carry ($F2.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $CCF3.w		; CD F3 CC ; Compare $CCF3.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	eor $F6.b		; 45 F6 ; Exclusive OR $F6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $F704.w		; CD 04 F7 ; Compare $F704.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cpy $CEF5.w		; CC F5 CE ; Compare $CEF5.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpx #$26.b		; E0 26 ; Compare #$26.b with X register [Reads: X Index] [Flags: ZNC]
	cpy #$E0.b		; C0 E0 ; Compare #$E0.b with Y register [Reads: Y Index] [Flags: ZNC]
	eor [$DB.b],Y		; 57 DB ; Exclusive OR accumulator with memory (long indexed) [$DB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp ($7B.b)		; D2 7B ; Compare accumulator (indirect) ($7B.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc ($1B.b)		; F2 1B ; Subtract with carry (indirect) ($1B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	nop		; EA ; No operation
	sbc $16.b,X		; F5 16 ; Subtract $16.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and $FA3EFD.l,X		; 3F FD 3E FA ; AND accumulator with memory (long,X) $FA3EFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $F4F4.w		; 0C F4 F4 ; Test and set bits $F4F4.w [Reads: Accumulator] [Flags: Z]
	tsb $0424.w		; 0C 24 04 ; Test and set bits $0424.w [Reads: Accumulator] [Flags: Z]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $90, $90		; 90 90 ; Branch if carry clear to $90, $90 [Flow: branch]
	ora $302F1F.l		; 0F 1F 2F 30 ; OR accumulator with memory (long) $302F1F.l [Writes: Accumulator] [Flags: ZN]
	eor [$6F.b],Y		; 57 6F ; Exclusive OR accumulator with memory (long indexed) [$6F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cld		; D8 ; Clear decimal flag [Flags: D]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$EE.b		; A0 EE ; Load #$EE.b into Y register [Writes: Y Index] [Flags: ZN]
	sbc $C0E06F.l		; EF 6F E0 C0 ; Subtract with carry (long) $C0E06F.l [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	ora $EEA0DE.l,X		; 1F DE A0 EE ; Logical OR long $EEA0DE.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stz $08FF.w		; 9C FF 08 ; Store zero to $08FF.w
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $FF9BDC.l,X		; 1F DC 9B FF ; Logical OR long $FF9BDC.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $90, $FE		; 90 FE ; Branch if carry clear to $90, $FE [Flow: branch]
	ldx #$FF.b		; A2 FF ; Load #$FF.b into X register [Writes: X Index] [Flags: ZN]
	and $21.b,S		; 23 21 ; AND accumulator with stack relative $21.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $7F3E.w,X		; 3D 3E 7F ; AND accumulator with memory $7F3E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $363717.l,X		; 3F 17 37 36 ; AND accumulator with memory (long,X) $363717.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $B16F.w,Y		; 99 6F B1 ; Store accumulator to $B16F.w,Y [Reads: Accumulator, Y Index]
	eor $C1BFE1.l,X		; 5F E1 BF C1 ; Exclusive OR accumulator with memory (long,X) $C1BFE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $E2DFE1.l,X		; BF E1 DF E2 ; Load long $E2DFE1.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $EFDDE7.l,X		; DF E7 DD EF ; Compare accumulator (long,X) $EFDDE7.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sta $13.b,S		; 83 13 ; Store accumulator (stack relative) $13.b,S [Reads: Accumulator, Stack Pointer]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$19.b		; C0 19 ; Compare #$19.b with Y register [Reads: Y Index] [Flags: ZNC]
	eor $0D4E.w		; 4D 4E 0D ; Exclusive OR $0D4E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	asl $1E1D.w		; 0E 1D 1E ; Arithmetic shift left $1E1D.w [Flags: ZNC]
	ora $FD0E.w		; 0D 0E FD ; Logical OR $FD0E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	inc $0E05.w,X		; FE 05 0E ; Increment memory $0E05.w,X [Reads: X Index] [Flags: ZN]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $F0B00C.l		; 0F 0C B0 F0 ; OR accumulator with memory (long) $F0B00C.l [Writes: Accumulator] [Flags: ZN]
	cpx #$F0.b		; E0 F0 ; Compare #$F0.b with X register [Reads: X Index] [Flags: ZNC]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc [$07.b],Y		; F7 07 ; Subtract with carry (long indexed) [$07.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc [$B7.b],Y		; F7 B7 ; Subtract with carry (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0C.b,X		; F5 0C ; Subtract $0C.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pea $F41C.w		; F4 1C F4 ; Push absolute address $F41C.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc [$4F.b],Y		; F7 4F ; Subtract with carry (long indexed) [$4F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $44		; F0 44 ; Branch if equal to $F0, $44 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stz $10.b,X		; 74 10 ; Store zero to $10.b,X [Reads: X Index]
	adc [$0F.b],Y		; 77 0F ; Add with carry (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $03		; 70 03 ; Branch if overflow set to $70, $03 [Flow: branch]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $80.b,S		; 83 80 ; Store accumulator (stack relative) $80.b,S [Reads: Accumulator, Stack Pointer]
	.db $80, $F0		; 80 F0 ; Branch always to $80, $F0 [Flow: branch]
	ora $F70FF6.l		; 0F F6 0F F7 ; OR accumulator with memory (long) $F70FF6.l [Writes: Accumulator] [Flags: ZN]
	ora $0DF545.l		; 0F 45 F5 0D ; OR accumulator with memory (long) $0DF545.l [Writes: Accumulator] [Flags: ZN]
	ora $75.b,S		; 03 75 ; OR accumulator with stack relative $75.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0D35.w		; 0D 35 0D ; Logical OR $0D35.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $022200.l		; 22 00 22 02 ; Jump to subroutine long $022200.l [Writes: Stack Pointer] [Flow: call]
	ora ($82.b)		; 12 82 ; OR accumulator with memory (indirect) ($82.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
.ACCU 16
	rep #$E0		; C2 E0
	sbc $8FF8C7.l,X		; FF C7 F8 8F ; Subtract with carry (long,X) $8FF8C7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $1B		; F0 1B ; Branch if equal to $F0, $1B [Flow: branch]
	sbc [$34.b]		; E7 34 ; Subtract with carry (long) [$34.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $64986F.l		; CF 6F 98 64 ; Compare accumulator (long) $64986F.l [Reads: Accumulator] [Flags: ZNC]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	nop		; EA ; No operation
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	sty $82.b		; 84 82 ; Store Y register to $82.b [Reads: Y Index]
	cop $E0.b		; 02 E0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$0583.w		; 29 83 05 ; Logical AND #$0583.w with accumulator [Writes: Accumulator] [Flags: ZN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	trb $EB.b		; 14 EB ; Test and reset bits $EB.b [Reads: Accumulator] [Flags: Z]
	asl $65.b,X		; 16 65 ; Arithmetic shift left $65.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	and ($CC.b,S),Y		; 33 CC ; AND accumulator (stack relative indirect indexed) ($CC.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc [$0F.b]		; E7 0F ; Subtract with carry (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $C7		; F0 C7 ; Branch if equal to $F0, $C7 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	sta $C0.b,S		; 83 C0 ; Store accumulator (stack relative) $C0.b,S [Reads: Accumulator, Stack Pointer]
	cpx #$F0.b		; E0 F0 ; Compare #$F0.b with X register [Reads: X Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $5F7FB0.l,X		; FF B0 7F 5F ; Subtract with carry (long,X) $5F7FB0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $105F67.l,X		; 3F 67 5F 10 ; AND accumulator with memory (long,X) $105F67.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $87D09F.l		; 2F 9F D0 87 ; AND accumulator with memory (long) $87D09F.l [Writes: Accumulator] [Flags: ZN]
	ora [$E0.b]		; 07 E0 ; OR accumulator with memory (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx #$3F.b		; E0 3F ; Compare #$3F.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $001483.l,X		; FF 83 14 00 ; Subtract with carry (long,X) $001483.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($20.b),Y		; 11 20 ; OR accumulator with memory ($20.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora $E11E00.l,X		; 1F 00 1E E1 ; Logical OR long $E11E00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
.INDEX 8
	sep #$1D		; E2 1D
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc $FD7A.w,X		; FD 7A FD ; Subtract with carry $FD7A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF7E00.l,X		; FF 00 7E FF ; Subtract with carry (long,X) $FF7E00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($81.b,X)		; 81 81 ; Store accumulator ($81.b,X) [Reads: Accumulator, X Index, Direct Page]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($7E.b,X)		; 01 7E ; Logical OR ($7E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $02108F.l,X		; FF 8F 10 02 ; Subtract with carry (long,X) $02108F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $23841C.l		; 22 1C 84 23 ; Jump to subroutine long $23841C.l [Writes: Stack Pointer] [Flow: call]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($7E.b,X)		; 41 7E ; Exclusive OR accumulator with memory ($7E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$850E.w		; 09 0E 85 ; Logical OR #$850E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	stx $C5.b		; 86 C5 ; Store X register to $C5.b [Reads: X Index]
	dec $65.b		; C6 65 ; Decrement $65.b [Reads: Direct Page] [Flags: ZN]
	inc $45.b		; E6 45 ; Increment $45.b [Reads: Direct Page] [Flags: ZN]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $80.b,S		; 03 80 ; OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $78		; F0 78 ; Branch if equal to $F0, $78 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	and $18.b,S		; 23 18 ; AND accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $CE.b,S		; 43 CE ; Exclusive OR accumulator with stack relative $CE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $CF0B.w,X		; 3D 0B CF ; AND accumulator with memory $CF0B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $3ECD.w,X		; 3C CD 3E ; Test bits $3ECD.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cpy $CE3F.w		; CC 3F CE ; Compare $CE3F.w with Y register [Reads: Y Index] [Flags: ZNC]
	and $C43DC5.l,X		; 3F C5 3D C4 ; AND accumulator with memory (long,X) $C43DC5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $0025.w,X		; 3C 25 00 ; Test bits $0025.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $3C.b,S		; C3 3C ; Compare accumulator (stack relative) $3C.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sta ($7E.b,X)		; 81 7E ; Store accumulator ($7E.b,X) [Reads: Accumulator, X Index, Direct Page]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	ldy $7F48.w,X		; BC 48 7F ; Load Y register $7F48.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldx $0027.w,Y		; BE 27 00 ; Load X register $0027.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	asl $009F.w,X		; 1E 9F 00 ; Arithmetic shift left $009F.w,X [Reads: X Index] [Flags: ZNC]
	cmp $987F90.l,X		; DF 90 7F 98 ; Compare accumulator (long,X) $987F90.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	inc $FF1A.w,X		; FE 1A FF ; Increment memory $FF1A.w,X [Reads: X Index] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc $E1DF82.l,X		; 7F 82 DF E1 ; Add long $E1DF82.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$F8.b],Y		; F7 F8 ; Subtract with carry (long indexed) [$F8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C1.b		; 00 C1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $7F80.w,X		; 3E 80 7F ; Rotate left $7F80.w,X [Reads: X Index] [Flags: ZNC]
	ldy $7F48.w,X		; BC 48 7F ; Load Y register $7F48.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldx $0027.w,Y		; BE 27 00 ; Load X register $0027.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ora $83.b,S		; 03 83 ; OR accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jmp ($7C93.w,X)		; 7C 93 7C ; Jump indirect indexed to ($7C93.w,X) [Reads: X Index] [Flow: jump]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ldx $79.b,Y		; B6 79 ; Load X register $79.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stx $80.b		; 86 80 ; Store X register to $80.b [Reads: X Index]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $830581.l,X		; 7F 81 05 83 ; Add long $830581.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $C07F87.l,X		; 7F 87 7F C0 ; Add long $C07F87.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $25		; 80 25 ; Branch always to $80, $25 [Flow: branch]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $2C0E.w		; 0D 0E 2C ; Logical OR $2C0E.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $000F08.l		; 2F 08 0F 00 ; AND accumulator with memory (long) $000F08.l [Writes: Accumulator] [Flags: ZN]
	ora $804F4F.l		; 0F 4F 4F 80 ; OR accumulator with memory (long) $804F4F.l [Writes: Accumulator] [Flags: ZN]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsr $F020.w		; 20 20 F0 ; Jump to subroutine at $F020.w [Writes: Stack Pointer] [Flow: call]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
	.db $F0, $B0		; F0 B0 ; Branch if equal to $F0, $B0 [Flow: branch]
	adc $28DFBF.l,X		; 7F BF DF 28 ; Add long $28DFBF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp $CB.b,S		; C3 CB ; Compare accumulator (stack relative) $CB.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	eor [$F7.b]		; 47 F7 ; Exclusive OR accumulator with memory (long) [$F7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $F5D703.l,X		; FF 03 D7 F5 ; Subtract with carry (long,X) $F5D703.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$34.b],Y		; F7 34 ; Subtract with carry (long indexed) [$34.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $0E.b,S		; 43 0E ; Exclusive OR accumulator with stack relative $0E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc ($04.b)		; 72 04 ; Add with carry (indirect) ($04.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tsb $CF73.w		; 0C 73 CF ; Test and set bits $CF73.w [Reads: Accumulator] [Flags: Z]
	.db $F0, $CA		; F0 CA ; Branch if equal to $F0, $CA [Flow: branch]
	eor $F4.b,S		; 43 F4 ; Exclusive OR accumulator with stack relative $F4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	nop		; EA ; No operation
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $FB.b,X		; F5 FB ; Subtract $FB.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	pea $8181.w		; F4 81 81 ; Push absolute address $8181.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $35.b,S		; 43 35 ; Exclusive OR accumulator with stack relative $35.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $28E0.w		; 0D E0 28 ; Logical OR $28E0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	bit $0C.b,X		; 34 0C ; Test bits $0C.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	rol $0E.b,X		; 36 0E ; Rotate left $0E.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora [$3D.b]		; 07 3D ; OR accumulator with memory (long) [$3D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1E.b,S		; 03 1E ; OR accumulator with stack relative $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($0F.b,X)		; 01 0F ; Logical OR ($0F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rep #$C3		; C2 C3 ; Reset processor status bits #$C3 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	cmp ($00.b,X)		; C1 00 ; Compare accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cpy #$E0.b		; C0 E0 ; Compare #$E0.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $9F		; F0 9F ; Branch if equal to $F0, $9F [Flow: branch]
	.db $90, $CB		; 90 CB ; Branch if carry clear to $90, $CB [Flow: branch]
	cpy $E6E5.w		; CC E5 E6 ; Compare $E6E5.w with Y register [Reads: Y Index] [Flags: ZNC]
	and ($F1.b),Y		; 31 F1 ; AND accumulator with memory ($F1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit $3FFC.w,X		; 3C FC 3F ; Test bits $3FFC.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sbc $703FC7.l,X		; FF C7 3F 70 ; Subtract with carry (long,X) $703FC7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $183060.l		; 8F 60 30 18 ; Store accumulator (long) $183060.l [Reads: Accumulator]
	asl $2203.w		; 0E 03 22 ; Arithmetic shift left $2203.w [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $F2.b,S		; 03 F2 ; OR accumulator with stack relative $F2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc [$43.b],Y		; F7 43 ; Subtract with carry (long indexed) [$43.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $09FD.w		; 0E FD 09 ; Arithmetic shift left $09FD.w [Flags: ZNC]
	inc $0D0A.w,X		; FE 0A 0D ; Increment memory $0D0A.w,X [Reads: X Index] [Flags: ZN]
	sbc $FB.b,X		; F5 FB ; Subtract $FB.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	inc $37.b,X		; F6 37 ; Increment memory $37.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	cmp $00220C.l		; CF 0C 22 00 ; Compare accumulator (long) $00220C.l [Reads: Accumulator] [Flags: ZNC]
	ora ($F0.b,S),Y		; 13 F0 ; OR accumulator (stack relative indirect indexed) ($F0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $9F00FF.l,X		; 7F FF 00 9F ; Add long $9F00FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $80E060.l,X		; 7F 60 E0 80 ; Add long $80E060.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $3F		; 80 3F ; Branch always to $80, $3F [Flow: branch]
	adc $7FFFC0.l,X		; 7F C0 FF 7F ; Add long $7FFFC0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $053683.l,X		; 1F 83 36 05 ; Logical OR long $053683.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	dec $433D.w		; CE 3D 43 ; Decrement $433D.w [Flags: ZN]
	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $F5CEF1.l		; 0F F1 CE F5 ; OR accumulator with memory (long) $F5CEF1.l [Writes: Accumulator] [Flags: ZN]
	dec $CEFD.w		; CE FD CE ; Decrement $CEFD.w [Flags: ZN]
	sbc $CD9E.w		; ED 9E CD ; Subtract $CD9E.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ldx $3ECD.w,Y		; BE CD 3E ; Load X register $3ECD.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	cmp $DE3E.w,X		; DD 3E DE ; Compare accumulator $DE3E.w,X [Reads: X Index] [Flags: ZNC]
	and $C022.w,X		; 3D 22 C0 ; AND accumulator with memory $C022.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $76.b,X		; B5 76 ; Load $76.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $8D7E.w,X		; 9D 7E 8D ; Store accumulator to $8D7E.w,X [Reads: Accumulator, X Index]
	ror $7E81.w,X		; 7E 81 7E ; Rotate right $7E81.w,X [Reads: X Index] [Flags: ZNC]
	cmp ($3E.b,X)		; C1 3E ; Compare accumulator ($3E.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc ($9E.b,X)		; E1 9E ; Subtract with carry ($9E.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($CE.b),Y		; F1 CE ; Subtract with carry ($CE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $2308E0.l,X		; FF E0 08 23 ; Subtract with carry (long,X) $2308E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	cpx #$C6.b		; E0 C6 ; Compare #$C6.b with X register [Reads: X Index] [Flags: ZNC]
	rol $3FC3.w,X		; 3E C3 3F ; Rotate left $3FC3.w,X [Reads: X Index] [Flags: ZNC]
	cpx #$9F.b		; E0 9F ; Compare #$9F.b with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $CF		; F0 CF ; Branch if equal to $F0, $CF [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc [$FC.b]		; E7 FC ; Subtract with carry (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($FF.b,S),Y		; F3 FF ; Subtract with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $8301FC.l,X		; FF FC 01 83 ; Subtract with carry (long,X) $8301FC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $05.b		; 84 05 ; Store Y register to $05.b [Reads: Y Index]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($BE4F.w,X)		; FC 4F BE ; Jump to subroutine indirect indexed ($BE4F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc $0A0027.l,X		; 7F 27 00 0A ; Add long $0A0027.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $70907F.l,X		; 9F 7F 90 70 ; Store accumulator (long,X) $70907F.l,X [Reads: Accumulator, X Index]
	cmp $9F603F.l		; CF 3F 60 9F ; Compare accumulator (long) $9F603F.l [Reads: Accumulator] [Flags: ZNC]
	lda $84C0C0.l,X		; BF C0 C0 84 ; Load long $84C0C0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $BE.b		; 05 BE ; Logical OR $BE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $A27BBA.l,X		; 7F BA 7B A2 ; Add long $A27BBA.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $43.b,S		; 63 43 ; Add with carry (stack relative) $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ldx $437F.w,Y		; BE 7F 43 ; Load X register $437F.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $1C.b		; 04 1C ; Test and set bits $1C.b [Reads: Accumulator] [Flags: Z]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $A578B7.l		; 0F B7 78 A5 ; OR accumulator with memory (long) $A578B7.l [Writes: Accumulator] [Flags: ZN]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	sty $7B.b,X		; 94 7B ; Store Y register $7B.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	ldy $7B.b,X		; B4 7B ; Load Y register $7B.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	lda $7A.b,X		; B5 7A ; Load $7A.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda [$78.b]		; A7 78 ; Load accumulator (long) [$78.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldx $79.b		; A6 79 ; Load $79.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	lda $2773.w,X		; BD 73 27 ; Load $2773.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$2B.b		; E0 2B ; Compare #$2B.b with X register [Reads: X Index] [Flags: ZNC]
	cmp $CC39.w,Y		; D9 39 CC ; Compare accumulator $CC39.w,Y [Reads: Y Index] [Flags: ZNC]
	bit $9EE6.w,X		; 3C E6 9E ; Test bits $9EE6.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sbc $9F.b,S		; E3 9F ; Subtract stack-relative $9F.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $FCC7.w,Y		; F9 C7 FC ; Subtract with carry $FCC7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FC.b,S		; E3 FC ; Subtract stack-relative $FC.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $0306F8.l,X		; FF F8 06 03 ; Subtract with carry (long,X) $0306F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($80.b,X)		; 81 80 ; Store accumulator ($80.b,X) [Reads: Accumulator, X Index, Direct Page]
	cpy #$E0.b		; C0 E0 ; Compare #$E0.b with Y register [Reads: Y Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora $FE81E0.l,X		; 1F E0 81 FE ; Logical OR long $FE81E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $62, $7D, $16		; 62 7D 16 ; Push effective relative address $62, $7D, $16 [Writes: Stack Pointer]
	ora $FBF4.w,Y		; 19 F4 FB ; OR accumulator with memory $FBF4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	stz $FB.b,X		; 74 FB ; Store zero to $FB.b,X [Reads: X Index]
	asl $F9.b		; 06 F9 ; Arithmetic shift left $F9.b [Reads: Direct Page] [Flags: ZNC]
	sta $7A.b		; 85 7A ; Store accumulator to $7A.b [Reads: Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $E0		; 80 E0 ; Branch always to $80, $E0 [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $24E0FF.l		; 22 FF E0 24 ; Jump to subroutine long $24E0FF.l [Writes: Stack Pointer] [Flow: call]
	cpx #$E9.b		; E0 E9 ; Compare #$E9.b with X register [Reads: X Index] [Flags: ZNC]
	cmp $B2DB.w,Y		; D9 DB B2 ; Compare accumulator $B2DB.w,Y [Reads: Y Index] [Flags: ZNC]
	inc $A1.b,X		; F6 A1 ; Increment memory $A1.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor [$93.b]		; 47 93 ; Exclusive OR accumulator with memory (long) [$93.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $005FA7.l		; 4F A7 5F 00 ; Exclusive OR accumulator with memory (long) $005FA7.l [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $3018.w		; 0C 18 30 ; Test and set bits $3018.w [Reads: Accumulator] [Flags: Z]
	jsr $FD00.w		; 20 00 FD ; Jump to subroutine at $FD00.w [Writes: Stack Pointer] [Flow: call]
	rep #$C2		; C2 C2 ; Reset processor status bits #$C2 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	and $7F9D.w,X		; 3D 9D 7F ; AND accumulator with memory $7F9D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $E6.b		; 66 E6 ; Rotate right $E6.b [Reads: Direct Page] [Flags: ZNC]
	cmp $C2.b,S		; C3 C2 ; Compare accumulator (stack relative) $C2.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	eor $0DC0.w		; 4D C0 0D ; Exclusive OR $0DC0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cpy #$ED.b		; C0 ED ; Compare #$ED.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpx #$22.b		; E0 22 ; Compare #$22.b with X register [Reads: X Index] [Flags: ZNC]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $3F3D.w,Y		; 19 3D 3F ; OR accumulator with memory $3F3D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $FFDF1F.l,X		; 3F 1F DF FF ; AND accumulator with memory (long,X) $FFDF1F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $EFB3DF.l		; AF DF B3 EF ; Load long $EFB3DF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	jmp.w [$FFF7]		; DC F7 FF ; Jump long indirect [$FFF7] [Flow: jump]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sty $C7F4.w		; 8C F4 C7 ; Store Y register to $C7F4.w [Reads: Y Index]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	sbc $DF2DE0.l,X		; FF E0 2D DF ; Subtract with carry (long,X) $DF2DE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc [$F3.b]		; E7 F3 ; Subtract with carry (long) [$F3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $D9FFE1.l,X		; FF E1 FF D9 ; Subtract with carry (long,X) $D9FFE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E43F.w,X		; FD 3F E4 ; Subtract with carry $E43F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $9E88.w		; ED 88 9E ; Subtract $9E88.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $7E		; 10 7E ; Branch if plus to $10, $7E [Flow: branch]
	.db $70, $FF		; 70 FF ; Branch if overflow set to $70, $FF [Flow: branch]
	ora ($3E.b),Y		; 11 3E ; OR accumulator with memory ($3E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $FF		; D0 FF ; Branch if not equal to $D0, $FF [Flow: branch]
	inc $DB.b		; E6 DB ; Increment $DB.b [Reads: Direct Page] [Flags: ZN]
	adc [$EF.b],Y		; 77 EF ; Add with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cop $C7.b		; 02 C7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $8C73.w		; 8D 73 8C ; Store accumulator to $8C73.w [Reads: Accumulator]
	adc ($8E.b,S),Y		; 73 8E ; Add with carry (stack relative indirect indexed) ($8E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($86.b),Y		; 71 86 ; Add with carry ($86.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $7C83.w,Y		; 79 83 7C ; Add $7C83.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $B37F.w		; 9C 7F B3 ; Store zero to $B37F.w
	adc ($B1.b,S),Y		; 73 B1 ; Add with carry (stack relative indirect indexed) ($B1.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($25.b),Y		; 71 25 ; Add with carry ($25.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $E00E.w		; 0C 0E E0 ; Test and set bits $E00E.w [Reads: Accumulator] [Flags: Z]
	sta $7FA0FF.l,X		; 9F FF A0 7F ; Store accumulator (long,X) $7FA0FF.l,X [Reads: Accumulator, X Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	eor $DB2DBB.l,X		; 5F BB 2D DB ; Exclusive OR accumulator with memory (long,X) $DB2DBB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $655B.w		; AD 5B 65 ; Load $655B.w into accumulator [Writes: Accumulator] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ldy $DB.b		; A4 DB ; Load $DB.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $F7.b,S		; 43 F7 ; Exclusive OR accumulator with stack relative $F7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $47.b		; 00 47 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$00.b],Y		; F7 00 ; Subtract with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$3F.b]		; 27 3F ; AND accumulator with memory (long) [$3F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $92.b		; 14 92 ; Test and reset bits $92.b [Reads: Accumulator] [Flags: Z]
	eor ($A9.b,X)		; 41 A9 ; Exclusive OR accumulator with memory ($A9.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $70.b,X		; B4 70 ; Load Y register $70.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cpy $E73C.w		; CC 3C E7 ; Compare $E73C.w with Y register [Reads: Y Index] [Flags: ZNC]
	sta $FFCFF0.l,X		; 9F F0 CF FF ; Store accumulator (long,X) $FFCFF0.l,X [Reads: Accumulator, X Index]
	cpx #$3C.b		; E0 3C ; Compare #$3C.b with X register [Reads: X Index] [Flags: ZNC]
	asl $070F.w,X		; 1E 0F 07 ; Arithmetic shift left $070F.w,X [Reads: X Index] [Flags: ZNC]
	ora $3A.b,S		; 03 3A ; OR accumulator with stack relative $3A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $70		; 90 70 ; Branch if carry clear to $90, $70 [Flow: branch]
	ora $E0.b,S		; 03 E0 ; OR accumulator with stack relative $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $4300FF.l,X		; 1F FF 00 43 ; Logical OR long $4300FF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $90, $70		; 90 70 ; Branch if carry clear to $90, $70 [Flow: branch]
	sta $0C.b,S		; 83 0C ; Store accumulator (stack relative) $0C.b,S [Reads: Accumulator, Stack Pointer]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $83000F.l		; 0F 0F 00 83 ; OR accumulator with memory (long) $83000F.l [Writes: Accumulator] [Flags: ZN]
	ora [$01.b],Y		; 17 01 ; OR accumulator with memory (long indexed) [$01.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr ($F8FF.w,X)		; FC FF F8 ; Jump to subroutine indirect indexed ($F8FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor $FE.b,S		; 43 FE ; Exclusive OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	jsr ($FCF0.w,X)		; FC F0 FC ; Jump to subroutine indirect indexed ($FCF0.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	inc $FFF8.w,X		; FE F8 FF ; Increment memory $FFF8.w,X [Reads: X Index] [Flags: ZN]
	jsr ($FF2E.w,X)		; FC 2E FF ; Jump to subroutine indirect indexed ($FF2E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora #$FFE3.w		; 09 E3 FF ; Logical OR #$FFE3.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp ($FF.b,X)		; C1 FF ; Compare accumulator ($FF.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	brk $C3.b		; 00 C3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $07.b,S		; 43 07 ; Exclusive OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1E0000.l		; 0F 00 00 1E ; OR accumulator with memory (long) $1E0000.l [Writes: Accumulator] [Flags: ZN]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($F000.w,X)		; FC 00 F0 ; Jump to subroutine indirect indexed ($F000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $80, $23		; 80 23 ; Branch always to $80, $23 [Flow: branch]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $76BA43.l,X		; FF 43 BA 76 ; Subtract with carry (long,X) $76BA43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $BB.b		; 45 BB ; Exclusive OR $BB.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$07.b],Y		; 77 07 ; Add with carry (long indexed) [$07.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ror $98.b,X		; 76 98 ; Rotate right $98.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ror $99.b,X		; 76 99 ; Rotate right $99.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	adc [$01.b],Y		; 77 01 ; Add with carry (long indexed) [$01.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $C5.b		; 00 C5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FD83.w,X		; FD 83 FD ; Subtract with carry $FD83.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $43.b,S		; C3 43 ; Compare accumulator (stack relative) $43.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc $08FB.w,X		; FD FB 08 ; Subtract with carry $08FB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($FEFB.w,X)		; FC FB FE ; Jump to subroutine indirect indexed ($FEFB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FEFF.w,X		; FD FF FE ; Subtract with carry $FEFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$22.b		; C0 22 ; Compare #$22.b with Y register [Reads: Y Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora ($FC.b,S),Y		; 13 FC ; OR accumulator (stack relative indirect indexed) ($FC.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	inc $58A0.w,X		; FE A0 58 ; Increment memory $58A0.w,X [Reads: X Index] [Flags: ZN]
	ldx $A95E.w		; AE 5E A9 ; Load $A95E.w into X register [Writes: X Index] [Flags: ZN]
	eor $AB58AF.l,X		; 5F AF 58 AB ; Exclusive OR accumulator with memory (long,X) $AB58AF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp $A25DAA.l		; 5C AA 5D A2 ; Jump long to $A25DAA.l [Flow: jump]
	jmp $0758A6.l		; 5C A6 58 07 ; Jump long to $0758A6.l [Flow: jump]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda [$49.b],Y		; B7 49 ; Load accumulator (long indexed) [$49.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $AD62.w,X		; 9D 62 AD ; Store accumulator to $AD62.w,X [Reads: Accumulator, X Index]
	adc ($9E.b,S),Y		; 73 9E ; Add with carry (stack relative indirect indexed) ($9E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $9D.b,X		; 55 9D ; Exclusive OR accumulator with memory $9D.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvn $56,$9E		; 54 9E 56 ; Move block negative $56,$9E [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	eor [$9D.b]		; 47 9D ; Exclusive OR accumulator with memory (long) [$9D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	jsl $200A00.l		; 22 00 0A 20 ; Jump to subroutine long $200A00.l [Writes: Stack Pointer] [Flow: call]
	jsl $303021.l		; 22 21 30 30 ; Jump to subroutine long $303021.l [Writes: Stack Pointer] [Flow: call]
	rol $D2.b,X		; 36 D2 ; Rotate left $D2.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp $F1EFED.l,X		; DF ED EF F1 ; Compare accumulator (long,X) $F1EFED.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	eor $F6.b,S		; 43 F6 ; Exclusive OR accumulator with stack relative $F6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	cpx #$41.b		; E0 41 ; Compare #$41.b with X register [Reads: X Index] [Flags: ZNC]
	sbc [$F9.b],Y		; F7 F9 ; Subtract with carry (long indexed) [$F9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$FA.b],Y		; F7 FA ; Subtract with carry (long indexed) [$FA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $E2CD.w,X		; FD CD E2 ; Subtract with carry $E2CD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($FB.b)		; F2 FB ; Subtract with carry (indirect) ($FB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $FEF1.w,X		; FD F1 FE ; Subtract with carry $FEF1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $DFF1.w		; ED F1 DF ; Subtract $DFF1.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	inc $D0BD.w		; EE BD D0 ; Increment $D0BD.w [Flags: ZN]
	lda ($E1.b),Y		; B1 E1 ; Load accumulator ($E1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $CE.b,S		; 23 CE ; AND accumulator with stack relative $CE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $5390.w		; 6D 90 53 ; Add $5390.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	lda ($FF.b,X)		; A1 FF ; Load accumulator ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $EFF1.w,X		; FE F1 EF ; Increment memory $EFF1.w,X [Reads: X Index] [Flags: ZN]
	dec $FFFD.w,X		; DE FD FF ; Decrement memory $FFFD.w,X [Reads: X Index] [Flags: ZN]
	inc $7898.w,X		; FE 98 78 ; Increment memory $7898.w,X [Reads: X Index] [Flags: ZN]
	cpy $C63C.w		; CC 3C C6 ; Compare $C63C.w with Y register [Reads: Y Index] [Flags: ZNC]
	rol $9FE3.w,X		; 3E E3 9F ; Rotate left $9FE3.w,X [Reads: X Index] [Flags: ZNC]
	sbc ($AF.b),Y		; F1 AF ; Subtract with carry ($AF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc [$FD.b]		; E7 FD ; Subtract with carry (long) [$FD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
.ACCU 8
.INDEX 8
	sep #$FF		; E2 FF
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ldy #$E0.b		; A0 E0 ; Load #$E0.b into Y register [Writes: Y Index] [Flags: ZN]
	cpx #$F8.b		; E0 F8 ; Compare #$F8.b with X register [Reads: X Index] [Flags: ZNC]
	cmp $7F7FE0.l,X		; DF E0 7F 7F ; Compare accumulator (long,X) $7F7FE0.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $10, $FF		; 10 FF ; Branch if plus to $10, $FF [Flow: branch]
	sbc $9DF708.l,X		; FF 08 F7 9D ; Subtract with carry (long,X) $9DF708.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $800099.l,X		; FF 99 00 80 ; Subtract with carry (long,X) $800099.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $44F0.w,Y		; 99 F0 44 ; Store accumulator to $44F0.w,Y [Reads: Accumulator, Y Index]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $C0.b		; 04 C0 ; Test and set bits $C0.b [Reads: Accumulator] [Flags: Z]
	and $FF00C0.l,X		; 3F C0 00 FF ; AND accumulator with memory (long,X) $FF00C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $3F.b,S		; 43 3F ; Exclusive OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy #$23.b		; C0 23 ; Compare #$23.b with Y register [Reads: Y Index] [Flags: ZNC]
	and $3F0001.l,X		; 3F 01 00 3F ; AND accumulator with memory (long,X) $3F0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $151400.l		; 22 00 14 15 ; Jump to subroutine long $151400.l [Writes: Stack Pointer] [Flow: call]
	cpx $0EF3.w		; EC F3 0E ; Compare $0EF3.w with X register [Reads: X Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $FC.b		; 06 FC ; Arithmetic shift left $FC.b [Reads: Direct Page] [Flags: ZNC]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FE.b		; 05 FE ; Logical OR $FE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FE01.w,X		; FD 01 FE ; Subtract with carry $FE01.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $010300.l,X		; FF 00 03 01 ; Subtract with carry (long,X) $010300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($F9.b),Y		; F1 F9 ; Subtract with carry ($F9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsl $9E0500.l		; 22 00 05 9E ; Jump to subroutine long $9E0500.l [Writes: Stack Pointer] [Flow: call]
	eor $DE61A0.l,X		; 5F A0 61 DE ; Exclusive OR accumulator with memory (long,X) $DE61A0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $3EC143.l,X		; 3F 43 C1 3E ; AND accumulator with memory (long,X) $3EC143.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$61.b]		; 07 61 ; OR accumulator with memory (long) [$61.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stz $C03F.w,X		; 9E 3F C0 ; Store zero to $C03F.w,X [Reads: X Index]
	ora $1E20E0.l,X		; 1F E0 20 1E ; Logical OR long $1E20E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $800200.l		; 22 00 02 80 ; Jump to subroutine long $800200.l [Writes: Stack Pointer] [Flow: call]
	cpy #$E0.b		; C0 E0 ; Compare #$E0.b with Y register [Reads: Y Index] [Flags: ZNC]
	and $08.b,S		; 23 08 ; AND accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $2400FF.l,X		; FF FF 00 24 ; Subtract with carry (long,X) $2400FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	adc $F700FF.l,X		; 7F FF 00 F7 ; Add long $F700FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$00.b],Y		; F7 00 ; Subtract with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cop $2B.b		; 02 2B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFE02.l,X		; FF 02 FE FF ; Subtract with carry (long,X) $FFFE02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($FF28.w,X)		; FC 28 FF ; Jump to subroutine indirect indexed ($FF28.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $C0.b		; 05 C0 ; Logical OR $C0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $00FE80.l,X		; FF 80 FE 00 ; Subtract with carry (long,X) $00FE80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$48.b		; E0 48 ; Compare #$48.b with X register [Reads: X Index] [Flags: ZNC]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rol $7E00.w,X		; 3E 00 7E ; Rotate left $7E00.w,X [Reads: X Index] [Flags: ZNC]
	mvp $FC,$00		; 44 00 FC ; Move block positive $FC,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	asl $F8.b		; 06 F8 ; Arithmetic shift left $F8.b [Reads: Direct Page] [Flags: ZNC]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $007F00.l,X		; 1F 00 7F 00 ; Logical OR long $007F00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc $FF27.w,X		; FE 27 FF ; Increment memory $FF27.w,X [Reads: X Index] [Flags: ZN]
	ora ($B9.b,X)		; 01 B9 ; Logical OR ($B9.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc [$43.b],Y		; 77 43 ; Add with carry (long indexed) [$43.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy $7B.b,X		; B4 7B ; Load Y register $7B.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ora #$B2.b		; 09 B2 ; Logical OR #$B2.b with accumulator [Writes: Accumulator] [Flags: ZN]
	adc $7DAA.w,X		; 7D AA 7D ; Add $7DAA.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $B67E.w,X		; 9D 7E B6 ; Store accumulator to $B67E.w,X [Reads: Accumulator, X Index]
	adc [$92.b],Y		; 77 92 ; Add with carry (long indexed) [$92.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($25.b,S),Y		; 73 25 ; Add with carry (stack relative indirect indexed) ($25.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $DF2E.w		; 0C 2E DF ; Test and set bits $DF2E.w [Reads: Accumulator] [Flags: Z]
	and ($CE.b),Y		; 31 CE ; AND accumulator with memory ($CE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $5CA3D0.l		; 2F D0 A3 5C ; AND accumulator with memory (long) $5CA3D0.l [Writes: Accumulator] [Flags: ZN]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	adc $9C.b,S		; 63 9C ; Add with carry (stack relative) $9C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	and [$C8.b],Y		; 37 C8 ; AND accumulator with memory (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $27E2.w,X		; 9D E2 27 ; Store accumulator to $27E2.w,X [Reads: Accumulator, X Index]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: ZNC]
	eor $F6.b,S		; 43 F6 ; Exclusive OR accumulator with stack relative $F6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta $01EA.w		; 8D EA 01 ; Store accumulator to $01EA.w [Reads: Accumulator]
	ora [$3C.b],Y		; 17 3C ; OR accumulator with memory (long indexed) [$3C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $5A.b,S		; C3 5A ; Compare accumulator (stack relative) $5A.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	lda $6EAD.w,X		; BD AD 6E ; Load $6EAD.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $D56E.w		; ED 6E D5 ; Subtract $D56E.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ror $46A9.w		; 6E A9 46 ; Rotate right $46A9.w [Flags: ZNC]
	sbc $22.b		; E5 22 ; Subtract $22.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$20.b]		; E7 20 ; Subtract with carry (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $81.b,S		; C3 81 ; Compare accumulator (stack relative) $81.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $47.b		; 00 47 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $7F2500.l,X		; 7F 00 25 7F ; Add long $7F2500.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$22.b		; E0 22 ; Compare #$22.b with X register [Reads: X Index] [Flags: ZNC]
	brk $A3.b		; 00 A3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $9C05.w		; CE 05 9C ; Decrement $9C05.w [Flags: ZN]
	eor $5EB1.w		; 4D B1 5E ; Exclusive OR $5EB1.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ldx $98.b		; A6 98 ; Load $98.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: ZN]
	and $F89F50.l		; 2F 50 9F F8 ; AND accumulator with memory (long) $F89F50.l [Writes: Accumulator] [Flags: ZN]
	sta [$B7.b],Y		; 97 B7 ; Store accumulator (long indexed) [$B7.b],Y [Reads: Accumulator, Direct Page, Y Index]
	cmp $FEFBFD.l		; CF FD FB FE ; Compare accumulator (long) $FEFBFD.l [Reads: Accumulator] [Flags: ZNC]
	sbc $AF77.w,Y		; F9 77 AF ; Subtract with carry $AF77.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda [$CF.b]		; A7 CF ; Load accumulator (long) [$CF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $3B.b,X		; B5 3B ; Load $3B.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $BC3B.w,X		; BD 3B BC ; Load $BC3B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	bit $0080.w,X		; 3C 80 00 ; Test bits $0080.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	eor $80.b,S		; 43 80 ; Exclusive OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $00FF01.l,X		; 7F 01 FF 00 ; Add long $00FF01.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $40.b,S		; 23 40 ; AND accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $680700.l		; 22 00 07 68 ; Jump to subroutine long $680700.l [Writes: Stack Pointer] [Flow: call]
	adc [$D7.b],Y		; 77 D7 ; Add with carry (long indexed) [$D7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $DFDFAF.l		; EF AF DF DF ; Subtract with carry (long) $DFDFAF.l [Writes: Accumulator] [Flags: ZVNC]
	and $000022.l,X		; 3F 22 00 00 ; AND accumulator with memory (long,X) $000022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $028C84.l,X		; FF 84 8C 02 ; Subtract with carry (long,X) $028C84.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $FF0000.l		; 22 00 00 FF ; Jump to subroutine long $FF0000.l [Writes: Stack Pointer] [Flow: call]
	jsl $E00200.l		; 22 00 02 E0 ; Jump to subroutine long $E00200.l [Writes: Stack Pointer] [Flow: call]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $DF,$00		; 44 00 DF ; Move block positive $DF,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $DE.b,S		; 43 DE ; Exclusive OR accumulator with stack relative $DE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $2201.w		; EE 01 22 ; Increment $2201.w [Flags: ZN]
	sbc $E0FC24.l,X		; FF 24 FC E0 ; Subtract with carry (long,X) $E0FC24.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $C67C8C.l		; 2F 8C 7C C6 ; AND accumulator with memory (long) $C67C8C.l [Writes: Accumulator] [Flags: ZN]
	ldx $BFC3.w,Y		; BE C3 BF ; Load X register $BFC3.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sbc ($DF.b,X)		; E1 DF ; Subtract with carry ($DF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $AF		; B0 AF ; Branch if carry set to $B0, $AF [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$8E.b],Y		; 97 8E ; Store accumulator (long indexed) [$8E.b],Y [Reads: Accumulator, Direct Page, Y Index]
	bit #$FD.b		; 89 FD ; Test bits #$FD.b with accumulator [Reads: Accumulator] [Flags: Z]
	inc $0103.w,X		; FE 03 01 ; Increment memory $0103.w,X [Reads: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	pei ($7E.b)		; D4 7E ; Push effective indirect address ($7E.b) [Reads: Direct Page] [Writes: Stack Pointer]
	sta ($33.b,X)		; 81 33 ; Store accumulator ($33.b,X) [Reads: Accumulator, X Index, Direct Page]
	cpy $857A.w		; CC 7A 85 ; Compare $857A.w with Y register [Reads: Y Index] [Flags: ZNC]
	eor $847BA0.l,X		; 5F A0 7B 84 ; Exclusive OR accumulator with memory (long,X) $847BA0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $80D1.w		; 2E D1 80 ; Rotate left $80D1.w [Flags: ZNC]
	and #$7E.b		; 29 7E ; Logical AND #$7E.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($7A.b,S),Y		; 13 7A ; OR accumulator (stack relative indirect indexed) ($7A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $2E7B.w,X		; 5D 7B 2E ; Exclusive OR accumulator with memory $2E7B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $0800FF.l		; 4F FF 00 08 ; Exclusive OR accumulator with memory (long) $0800FF.l [Writes: Accumulator] [Flags: ZN]
	cmp $03C8.w,X		; DD C8 03 ; Compare accumulator $03C8.w,X [Reads: X Index] [Flags: ZNC]
	and [$77.b],Y		; 37 77 ; AND accumulator with memory (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $81.b,X		; 36 81 ; Rotate left $81.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $BFBF0B.l,X		; FF 0B BF BF ; Subtract with carry (long,X) $BFBF0B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $8F8F9F.l,X		; 9F 9F 8F 8F ; Store accumulator (long,X) $8F8F9F.l,X [Reads: Accumulator, X Index]
	sta [$87.b]		; 87 87 ; Store accumulator (long) [$87.b] [Reads: Accumulator, Direct Page]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	sta ($81.b,X)		; 81 81 ; Store accumulator ($81.b,X) [Reads: Accumulator, X Index, Direct Page]
	sty $EA.b		; 84 EA ; Store Y register to $EA.b [Reads: Y Index]
	ora $0E.b,S		; 03 0E ; OR accumulator with stack relative $0E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jmp ($FF7E.w,X)		; 7C 7E FF ; Jump indirect indexed to ($FF7E.w,X) [Reads: X Index] [Flow: jump]
	sbc $C0E4E4.l,X		; FF E4 E4 C0 ; Subtract with carry (long,X) $C0E4E4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$81.b		; C0 81 ; Compare #$81.b with Y register [Reads: Y Index] [Flags: ZNC]
	sta ($DD.b,X)		; 81 DD ; Store accumulator ($DD.b,X) [Reads: Accumulator, X Index, Direct Page]
	cmp $9898.w,X		; DD 98 98 ; Compare accumulator $9898.w,X [Reads: X Index] [Flags: ZNC]
	sta $3C.b,S		; 83 3C ; Store accumulator (stack relative) $3C.b,S [Reads: Accumulator, Stack Pointer]
	tsb $22.b		; 04 22 ; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
	sbc $E2FE13.l,X		; FF 13 FE E2 ; Subtract with carry (long,X) $E2FE13.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $12ED.w,X		; FE ED 12 ; Increment memory $12ED.w,X [Reads: X Index] [Flags: ZN]
	sbc ($0C.b,S),Y		; F3 0C ; Subtract with carry (stack relative indirect indexed) ($0C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $C361.w,X		; DE 61 C3 ; Decrement memory $C361.w,X [Reads: X Index] [Flags: ZN]
	jmp ($FFFF.w,X)		; 7C FF FF ; Jump indirect indexed to ($FFFF.w,X) [Reads: X Index] [Flow: jump]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $9C.b,S		; 63 9C ; Add with carry (stack relative) $9C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0E0028.l,X		; FF 28 00 0E ; Subtract with carry (long,X) $0E0028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFF1FF.l,X		; FF FF F1 FF ; Subtract with carry (long,X) $FFF1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F3.b		; E5 F3 ; Subtract $F3.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sbc [$55.b]		; E7 55 ; Subtract with carry (long) [$55.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $AA9D6A.l		; 8F 6A 9D AA ; Store accumulator (long) $AA9D6A.l [Reads: Accumulator]
	cmp $28DD.w,X		; DD DD 28 ; Compare accumulator $28DD.w,X [Reads: X Index] [Flags: ZNC]
	sbc $F4FB01.l,X		; FF 01 FB F4 ; Subtract with carry (long,X) $F4FB01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $F3.b,S		; 43 F3 ; Exclusive OR accumulator with stack relative $F3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr ($FB45.w,X)		; FC 45 FB ; Jump to subroutine indirect indexed ($FB45.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($0302.w,X)		; FC 02 03 ; Jump to subroutine indirect indexed ($0302.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($28FF.w,X)		; FC FF 28 ; Jump to subroutine indirect indexed ($28FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta [$44.b]		; 87 44 ; Store accumulator (long) [$44.b] [Reads: Accumulator, Direct Page]
	adc $9F438F.l,X		; 7F 8F 43 9F ; Add long $9F438F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $BFCF05.l,X		; 7F 05 CF BF ; Add long $BFCF05.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$DF.b		; E0 DF ; Compare #$DF.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $0024E0.l,X		; FF E0 24 00 ; Subtract with carry (long,X) $0024E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $80.b		; 02 80 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$E0.b		; C0 E0 ; Compare #$E0.b with Y register [Reads: Y Index] [Flags: ZNC]
	eor [$EF.b]		; 47 EF ; Exclusive OR accumulator with memory (long) [$EF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FFE807.l,X		; FF 07 E8 FF ; Subtract with carry (long,X) $FFE807.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$F8.b]		; C7 F8 ; Compare accumulator (long) [$F8.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $1FFFE7.l,X		; 1F E7 FF 1F ; Logical OR long $1FFFE7.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($07.b,S),Y		; 13 07 ; OR accumulator (stack relative indirect indexed) ($07.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $D724C7.l,X		; 1F C7 24 D7 ; Logical OR long $D724C7.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $ED.b,X		; 34 ED ; Test bits $ED.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	asl $8E75.w,X		; 1E 75 8E ; Arithmetic shift left $8E75.w,X [Reads: X Index] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	dec $9D.b		; C6 9D ; Decrement $9D.b [Reads: Direct Page] [Flags: ZN]
	sep #$CF		; E2 CF ; Set processor status bits #$CF [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	.db $F0, $67		; F0 67 ; Branch if equal to $F0, $67 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $84.b,S		; 83 84 ; Store accumulator (stack relative) $84.b,S [Reads: Accumulator, Stack Pointer]
	cop $E0.b		; 02 E0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $F8F0.w,X		; 5D F0 F8 ; Exclusive OR accumulator with memory $F8F0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	rep #$C2		; C2 C2 ; Reset processor status bits #$C2 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	cpy #$20.b		; C0 20 ; Compare #$20.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpx #$10.b		; E0 10 ; Compare #$10.b with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $88		; F0 88 ; Branch if equal to $F0, $88 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	mvp $23,$3D		; 44 3D 23 ; Move block positive $23,$3D [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc $1F3DF9.l,X		; FF F9 3D 1F ; Subtract with carry (long,X) $1F3DF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $C08307.l		; 0F 07 83 C0 ; OR accumulator with memory (long) $C08307.l [Writes: Accumulator] [Flags: ZN]
	stz $6C.b,X		; 74 6C ; Store zero to $6C.b,X [Reads: X Index]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	rol $3D.b,X		; 36 3D ; Rotate left $3D.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $05060D.l		; 0F 0D 06 05 ; OR accumulator with memory (long) $05060D.l [Writes: Accumulator] [Flags: ZN]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $C1.b,S		; 83 C1 ; Store accumulator (stack relative) $C1.b,S [Reads: Accumulator, Stack Pointer]
	cpy #$F0.b		; C0 F0 ; Compare #$F0.b with Y register [Reads: Y Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($FCF4.w,X)		; FC F4 FC ; Jump to subroutine indirect indexed ($FCF4.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpy #$20.b		; C0 20 ; Compare #$20.b with Y register [Reads: Y Index] [Flags: ZNC]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	asl $1894.w		; 0E 94 18 ; Arithmetic shift left $1894.w [Flags: ZNC]
	lda #$31.b		; A9 31 ; Load #$31.b into accumulator [Writes: Accumulator] [Flags: ZN]
	lda ($23.b)		; B2 23 ; Load accumulator (indirect) ($23.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $26.b,X		; 95 26 ; Store accumulator to $26.b,X [Reads: Accumulator, X Index]
	sta [$64.b],Y		; 97 64 ; Store accumulator (long indexed) [$64.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	bit $311F.w		; 2C 1F 31 ; Test bits $311F.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	adc $46.b,S		; 63 46 ; Add with carry (stack relative) $46.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	jmp $0848.w		; 4C 48 08 ; Jump to $0848.w [Flow: jump]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ldx $6B.b,Y		; B6 6B ; Load X register $6B.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: ZN]
	eor [$29.b],Y		; 57 29 ; Exclusive OR accumulator with memory (long indexed) [$29.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$28.b],Y		; 17 28 ; OR accumulator with memory (long indexed) [$28.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta [$6C.b],Y		; 97 6C ; Store accumulator (long indexed) [$6C.b],Y [Reads: Accumulator, Direct Page, Y Index]
	eor ($4E.b,S),Y		; 53 4E ; XOR accumulator (stack relative indirect indexed) ($4E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($57.b),Y		; 71 57 ; Add with carry ($57.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	lda [$C8.b],Y		; B7 C8 ; Load accumulator (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$40.b		; C0 40 ; Compare #$40.b with Y register [Reads: Y Index] [Flags: ZNC]
	jsl $000080.l		; 22 80 00 00 ; Jump to subroutine long $000080.l [Writes: Stack Pointer] [Flow: call]
	eor $AA.b,S		; 43 AA ; Exclusive OR accumulator with stack relative $AA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ora [$AB.b]		; 07 AB ; OR accumulator with memory (long) [$AB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lda $40BF5F.l		; AF 5F BF 40 ; Load long $40BF5F.l into accumulator [Writes: Accumulator] [Flags: ZN]
	sta $94.b,S		; 83 94 ; Store accumulator (stack relative) $94.b,S [Reads: Accumulator, Stack Pointer]
	cop $23.b		; 02 23 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$23.b]		; 07 23 ; OR accumulator with memory (long) [$23.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $022984.l,X		; FF 84 29 02 ; Subtract with carry (long,X) $022984.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $80.b		; 02 80 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	mvp $00,$FF		; 44 FF 00 ; Move block positive $00,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $FF.b		; 05 FF ; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	adc $450023.l,X		; 7F 23 00 45 ; Add long $450023.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F80000.l,X		; FF 00 00 F8 ; Subtract with carry (long,X) $F80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $FB,$00		; 44 00 FB ; Move block positive $FB,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $F7.b,S		; 43 F7 ; Exclusive OR accumulator with stack relative $F7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00FF44.l,X		; 3F 44 FF 00 ; AND accumulator with memory (long,X) $00FF44.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $CF0400.l		; 22 00 04 CF ; Jump to subroutine long $CF0400.l [Writes: Stack Pointer] [Flow: call]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7B.b		; 00 7B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $BB.b,S		; 83 BB ; Store accumulator (stack relative) $BB.b,S [Reads: Accumulator, Stack Pointer]
	ora $26.b,S		; 03 26 ; OR accumulator with stack relative $26.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $7F23E0.l,X		; FF E0 23 7F ; Subtract with carry (long,X) $7F23E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7CFE7E.l,X		; FF 7E FE 7C ; Subtract with carry (long,X) $7CFE7E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($F878.w,X)		; FC 78 F8 ; Jump to subroutine indirect indexed ($F878.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $70, $F0		; 70 F0 ; Branch if overflow set to $70, $F0 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpx #$40.b		; E0 40 ; Compare #$40.b with X register [Reads: X Index] [Flags: ZNC]
	cpy #$7F.b		; C0 7F ; Compare #$7F.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $030100.l,X		; FF 00 01 03 ; Subtract with carry (long,X) $030100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $E3003F.l,X		; 1F 3F 00 E3 ; Logical OR long $E3003F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $D8.b,S		; E3 D8 ; Subtract stack-relative $D8.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cld		; D8 ; Clear decimal flag [Flags: D]
	stz $CD9C.w		; 9C 9C CD ; Store zero to $CD9C.w
	cmp $C0C0.w		; CD C0 C0 ; Compare $C0C0.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cpx $E4.b		; E4 E4 ; Compare $E4.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $FC.b		; 06 FC ; Arithmetic shift left $FC.b [Reads: Direct Page] [Flags: ZNC]
	sbc [$E3.b]		; E7 E3 ; Subtract with carry (long) [$E3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($BF.b)		; F2 BF ; Subtract with carry (indirect) ($BF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $FF4CE6.l,X		; BF E6 4C FF ; Load long $FF4CE6.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $FF1D03.l,X		; 7F 03 1D FF ; Add long $FF1D03.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $7F25FF.l,X		; FF FF 25 7F ; Subtract with carry (long,X) $7F25FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($3F.b,X)		; 01 3F ; Logical OR ($3F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$23.b		; E0 23 ; Compare #$23.b with X register [Reads: X Index] [Flags: ZNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $FB.b		; 05 FB ; Logical OR $FB.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	inc $15.b,X		; F6 15 ; Increment memory $15.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc $CD35.w		; ED 35 CD ; Subtract $CD35.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	adc ($AE.b)		; 72 AE ; Add with carry (indirect) ($AE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $50, $8E		; 50 8E ; Branch if overflow clear to $50, $8E [Flow: branch]
	sbc $F1F8FC.l,X		; FF FC F8 F1 ; Subtract with carry (long,X) $F1F8FC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sep #$C2		; E2 C2 ; Set processor status bits #$C2 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sta ($21.b,X)		; 81 21 ; Store accumulator ($21.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta $70806F.l		; 8F 6F 80 70 ; Store accumulator (long) $70806F.l [Reads: Accumulator]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	lda $13D32C.l,X		; BF 2C D3 13 ; Load long $13D32C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpx $FD02.w		; EC 02 FD ; Compare $FD02.w with X register [Reads: X Index] [Flags: ZNC]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $0F1007.l,X		; FF 07 10 0F ; Subtract with carry (long,X) $0F1007.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	cpx $FFFD.w		; EC FD FF ; Compare $FFFD.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $3F204F.l,X		; FF 4F 20 3F ; Subtract with carry (long,X) $3F204F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$C0.b]		; 27 C0 ; AND accumulator with memory (long) [$C0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$30.b		; 09 30 ; Logical OR #$30.b with accumulator [Writes: Accumulator] [Flags: ZN]
	and $0C1F18.l,X		; 3F 18 1F 0C ; AND accumulator with memory (long,X) $0C1F18.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $000707.l		; 0F 07 07 00 ; OR accumulator with memory (long) $000707.l [Writes: Accumulator] [Flags: ZN]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0011.w		; 0E 11 00 ; Arithmetic shift left $0011.w [Flags: ZNC]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$F0.b		; E0 F0 ; Compare #$F0.b with X register [Reads: X Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $FFF1F1.l,X		; FF F1 F1 FF ; Subtract with carry (long,X) $FFF1F1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$00.b]		; C7 00 ; Compare accumulator (long) [$00.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cmp [$FF.b],Y		; D7 FF ; Compare accumulator (long indexed) [$FF.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sbc $EF4710.l		; EF 10 47 EF ; Subtract with carry (long) $EF4710.l [Writes: Accumulator] [Flags: ZVNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp [$00.b],Y		; D7 00 ; Compare accumulator (long indexed) [$00.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sta $62.b		; 85 62 ; Store accumulator to $62.b [Reads: Accumulator]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8304C7.l		; EF C7 04 83 ; Subtract with carry (long) $8304C7.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $0000D7.l,X		; FF D7 00 00 ; Subtract with carry (long,X) $0000D7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $9301D7.l		; 22 D7 01 93 ; Jump to subroutine long $9301D7.l [Writes: Stack Pointer] [Flow: call]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $28.b		; 45 28 ; Exclusive OR $28.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($6F84.w)		; 6C 84 6F ; Jump indirect to ($6F84.w) [Flow: jump]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	jmp ($3EFC.w,X)		; 7C FC 3E ; Jump indirect indexed to ($3EFC.w,X) [Reads: X Index] [Flow: jump]
	inc $7FBF.w,X		; FE BF 7F ; Increment memory $7FBF.w,X [Reads: X Index] [Flags: ZN]
	eor $9F69BF.l,X		; 5F BF 69 9F ; Exclusive OR accumulator with memory (long,X) $9F69BF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda ($CF.b),Y		; B1 CF ; Load accumulator ($CF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	cmp [$5C.b]		; C7 5C ; Compare accumulator (long) [$5C.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	adc $03.b,S		; 63 03 ; Add with carry (stack relative) $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $7C		; 80 7C ; Branch always to $80, $7C [Flow: branch]
	jsr ($FE7E.w,X)		; FC 7E FE ; Jump to subroutine indirect indexed ($FE7E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rol $FE.b		; 26 FE ; Rotate left $FE.b [Reads: Direct Page] [Flags: ZNC]
	sta $7F.b,S		; 83 7F ; Store accumulator (stack relative) $7F.b,S [Reads: Accumulator, Stack Pointer]
	cmp $3F.b,S		; C3 3F ; Compare accumulator (stack relative) $3F.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc ($1F.b,X)		; E1 1F ; Subtract with carry ($1F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora #$61.b		; 09 61 ; Logical OR #$61.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc ($33.b,X)		; E1 33 ; Subtract with carry ($33.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($DF.b,S),Y		; F3 DF ; Subtract with carry (stack relative indirect indexed) ($DF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FC1FE7.l,X		; 3F E7 1F FC ; AND accumulator with memory (long,X) $FC1FE7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $45.b,S		; 03 45 ; OR accumulator with stack relative $45.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $1E0100.l,X		; FF 00 01 1E ; Subtract with carry (long,X) $1E0100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0027.w		; 0C 27 00 ; Test and set bits $0027.w [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	tsb $C60C.w		; 0C 0C C6 ; Test and set bits $C60C.w [Reads: Accumulator] [Flags: Z]
	dec $E3.b		; C6 E3 ; Decrement $E3.b [Reads: Direct Page] [Flags: ZN]
	sbc $31.b,S		; E3 31 ; Subtract stack-relative $31.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc ($18.b),Y		; F1 18 ; Subtract with carry ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $F3E70F.l,X		; FF 0F E7 F3 ; Subtract with carry (long,X) $F3E70F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $0E1C.w,Y		; 39 1C 0E ; AND accumulator with memory $0E1C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $433FFF.l,X		; 1F FF 3F 43 ; Logical OR long $433FFF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $0A8400.l,X		; FF 00 84 0A ; Subtract with carry (long,X) $0A8400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($28.b,X)		; 01 28 ; Logical OR ($28.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $3F		; F0 3F ; Branch if equal to $F0, $3F [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $E01FC7.l,X		; 3F C7 1F E0 ; AND accumulator with memory (long,X) $E01FC7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $C78003.l,X		; FF 03 80 C7 ; Subtract with carry (long,X) $C78003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$F8.b		; E0 F8 ; Compare #$F8.b with X register [Reads: X Index] [Flags: ZNC]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $6C.b,S		; 43 6C ; Exclusive OR accumulator with stack relative $6C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	ora $399292.l		; 0F 92 92 39 ; OR accumulator with memory (long) $399292.l [Writes: Accumulator] [Flags: ZN]
	eor $C7.b		; 45 C7 ; Exclusive OR $C7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	jmp ($4C38.w)		; 6C 38 4C ; Jump indirect to ($4C38.w) [Flow: jump]
	sec		; 38 ; Set carry flag [Flags: C]
	jmp $101038.l		; 5C 38 10 10 ; Jump long to $101038.l [Flow: jump]
	jmp ($2382.w)		; 6C 82 23 ; Jump indirect to ($2382.w) [Flow: jump]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $9301AB.l		; EF AB 01 93 ; Subtract with carry (long) $9301AB.l [Writes: Accumulator] [Flags: ZVNC]
	sta ($83.b,S),Y		; 93 83 ; Store accumulator (stack relative indirect indexed) ($83.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	rol $0A01.w,X		; 3E 01 0A ; Rotate left $0A01.w,X [Reads: X Index] [Flags: ZNC]
	sbc $BBCFBB.l		; EF BB CF BB ; Subtract with carry (long) $BBCFBB.l [Writes: Accumulator] [Flags: ZVNC]
	cmp $9393BB.l,X		; DF BB 93 93 ; Compare accumulator (long,X) $9393BB.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	adc $0082.w		; 6D 82 00 ; Add $0082.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	jsl $AB4383.l		; 22 83 43 AB ; Jump to subroutine long $AB4383.l [Writes: Stack Pointer] [Flow: call]
	jmp ($9300.w)		; 6C 00 93 ; Jump indirect to ($9300.w) [Flow: jump]
	sty $3D.b		; 84 3D ; Store Y register to $3D.b [Reads: Y Index]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jmp ($7C8B.w,X)		; 7C 8B 7C ; Jump indirect indexed to ($7C8B.w,X) [Reads: X Index] [Flow: jump]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	jmp ($4883.w,X)		; 7C 83 48 ; Jump indirect indexed to ($4883.w,X) [Reads: X Index] [Flow: jump]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $49.b,X		; 95 49 ; Store accumulator to $49.b,X [Reads: Accumulator, X Index]
	sta $AD55.w		; 8D 55 AD ; Store accumulator to $AD55.w [Reads: Accumulator]
	adc $8D.b		; 65 8D ; Add $8D.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $CA.b		; 65 CA ; Add $CA.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $49.b		; 26 49 ; Rotate left $49.b [Reads: Direct Page] [Flags: ZNC]
	sta [$43.b],Y		; 97 43 ; Store accumulator (long indexed) [$43.b],Y [Reads: Accumulator, Direct Page, Y Index]
	eor ($8F.b),Y		; 51 8F ; Exclusive OR accumulator with memory ($8F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $122222.l,X		; 1F 22 22 12 ; Logical OR long $122222.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr $A0A0.w		; 20 A0 A0 ; Jump to subroutine at $A0A0.w [Writes: Stack Pointer] [Flow: call]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $5FB03F.l		; EF 3F B0 5F ; Subtract with carry (long) $5FB03F.l [Writes: Accumulator] [Flags: ZVNC]
	cmp $906FAF.l,X		; DF AF 6F 90 ; Compare accumulator (long,X) $906FAF.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	.db $70, $90		; 70 90 ; Branch if overflow set to $70, $90 [Flow: branch]
	adc $31B15E.l,X		; 7F 5E B1 31 ; Add long $31B15E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $4000.w		; CE 00 40 ; Decrement $4000.w [Flags: ZN]
	jsr $0F10.w		; 20 10 0F ; Jump to subroutine at $0F10.w [Writes: Stack Pointer] [Flow: call]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $0044.w		; CE 44 00 ; Decrement $0044.w [Flags: ZN]
	sbc $01FF22.l,X		; FF 22 FF 01 ; Subtract with carry (long,X) $01FF22.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $18.b,S		; 23 18 ; AND accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FEE7E7.l,X		; FF E7 E7 FE ; Subtract with carry (long,X) $FEE7E7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$DF.b		; E0 DF ; Compare #$DF.b with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $CF		; F0 CF ; Branch if equal to $F0, $CF [Flow: branch]
	sbc ($CD.b)		; F2 CD ; Subtract with carry (indirect) ($CD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	cpx $FF.b		; E4 FF ; Compare $FF.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$FC.b]		; 07 FC ; OR accumulator with memory (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $E005C0.l		; 22 C0 05 E0 ; Jump to subroutine long $E005C0.l [Writes: Stack Pointer] [Flow: call]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	jsr ($B3FF.w,X)		; FC FF B3 ; Jump to subroutine indirect indexed ($B3FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor $7C.b,S		; 43 7C ; Exclusive OR accumulator with stack relative $7C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $22.b,S		; 83 22 ; Store accumulator (stack relative) $22.b,S [Reads: Accumulator, Stack Pointer]
	mvp $BB,$03		; 44 03 BB ; Move block positive $BB,$03 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc $4310EF.l,X		; FF EF 10 43 ; Subtract with carry (long,X) $4310EF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $6C.b,S		; 83 6C ; Store accumulator (stack relative) $6C.b,S [Reads: Accumulator, Stack Pointer]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sta $72.b,S		; 83 72 ; Store accumulator (stack relative) $72.b,S [Reads: Accumulator, Stack Pointer]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$38.b],Y		; D7 38 ; Compare accumulator (long indexed) [$38.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sbc $228300.l,X		; FF 00 83 22 ; Subtract with carry (long,X) $228300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $E8,$83		; 44 83 E8 ; Move block positive $E8,$83 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cmp [$28.b]		; C7 28 ; Compare accumulator (long) [$28.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora ($83.b,X)		; 01 83 ; Logical OR ($83.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	sbc ($01.b)		; F2 01 ; Subtract with carry (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl $93.b		; 06 93 ; Arithmetic shift left $93.b [Reads: Direct Page] [Flags: ZNC]
	sta ($54.b,S),Y		; 93 54 ; Store accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sec		; 38 ; Set carry flag [Flags: C]
	jmp ($8300.w,X)		; 7C 00 83 ; Jump indirect indexed to ($8300.w,X) [Reads: X Index] [Flow: jump]
	jsl $E88344.l		; 22 44 83 E8 ; Jump to subroutine long $E88344.l [Writes: Stack Pointer] [Flow: call]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	mvp $87,$28		; 44 28 87 ; Move block positive $87,$28 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: ZNC]
	rol $1F31.w		; 2E 31 1F ; Rotate left $1F31.w [Flags: ZNC]
	.db $10, $17		; 10 17 ; Branch if plus to $10, $17 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $0C0B08.l		; 0F 08 0B 0C ; OR accumulator with memory (long) $0C0B08.l [Writes: Accumulator] [Flags: ZN]
	sta [$84.b]		; 87 84 ; Store accumulator (long) [$84.b] [Reads: Accumulator, Direct Page]
	cmp $C6.b		; C5 C6 ; Compare $C6.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	rep #$C3		; C2 C3 ; Reset processor status bits #$C3 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	cpy #$E0.b		; C0 E0 ; Compare #$E0.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpx #$F0.b		; E0 F0 ; Compare #$F0.b with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $78		; F0 78 ; Branch if equal to $F0, $78 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $01FE.w,X		; 3C FE 01 ; Test bits $01FE.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sbc $807F00.l,X		; FF 00 7F 80 ; Subtract with carry (long,X) $807F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$D8.b]		; 27 D8 ; AND accumulator with memory (long) [$D8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $62, $FC, $03		; 62 FC 03 ; Push effective relative address $62, $FC, $03 [Writes: Stack Pointer]
.ACCU 8
	sep #$E3		; E2 E3
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx #$21.b		; E0 21 ; Compare #$21.b with X register [Reads: X Index] [Flags: ZNC]
	trb $BFFE.w		; 1C FE BF ; Test and reset bits $BFFE.w [Reads: Accumulator] [Flags: Z]
	cpy #$5F.b		; C0 5F ; Compare #$5F.b with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and [$38.b]		; 27 38 ; AND accumulator with memory (long) [$38.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $C00707.l,X		; 1F 07 07 C0 ; Logical OR long $C00707.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy #$E3.b		; C0 E3 ; Compare #$E3.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $C08000.l,X		; FF 00 80 C0 ; Subtract with carry (long,X) $C08000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$F8.b		; E0 F8 ; Compare #$F8.b with X register [Reads: X Index] [Flags: ZNC]
	and $8E001C.l,X		; 3F 1C 00 8E ; AND accumulator with memory (long,X) $8E001C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $7F83.w,X		; 7E 83 7F ; Rotate right $7F83.w,X [Reads: X Index] [Flags: ZNC]
	cmp $3B.b		; C5 3B ; Compare $3B.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cpy $3B.b		; C4 3B ; Compare $3B.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	eor $E2.b,S		; 43 E2 ; Exclusive OR accumulator with stack relative $E2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $F904.w,X		; 1D 04 F9 ; OR accumulator with memory $F904.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $0EFD.w		; 0E FD 0E ; Arithmetic shift left $0EFD.w [Flags: ZNC]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $3FDF00.l,X		; FF 00 DF 3F ; Subtract with carry (long,X) $3FDF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $3FC03F.l,X		; FF 3F C0 3F ; Subtract with carry (long,X) $3FC03F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$88.b]		; 87 88 ; Store accumulator (long) [$88.b] [Reads: Accumulator, Direct Page]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $7E.b,S		; C3 7E ; Compare accumulator (stack relative) $7E.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	ora $7E.b,S		; 03 7E ; OR accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $C33C.w,X		; BD 3C C3 ; Load $C33C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor [$00.b]		; 47 00 ; Exclusive OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $425A03.l,X		; FF 03 5A 42 ; Subtract with carry (long,X) $425A03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $23C3.w,X		; BD C3 23 ; Load $23C3.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $387402.l,X		; FF 02 74 38 ; Subtract with carry (long,X) $387402.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	stz $84.b		; 64 84 ; Store zero to $84.b
	eor $01.b,S		; 43 01 ; Exclusive OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $74.b		; 00 74 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $41.b		; 86 41 ; Store X register to $41.b [Reads: X Index]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$BB.b],Y		; F7 BB ; Subtract with carry (long indexed) [$BB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$83.b]		; E7 83 ; Subtract with carry (long) [$83.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc [$38.b],Y		; F7 38 ; Subtract with carry (long indexed) [$38.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $38CF38.l		; EF 38 CF 38 ; Subtract with carry (long) $38CF38.l [Writes: Accumulator] [Flags: ZVNC]
	cmp $832738.l,X		; DF 38 27 83 ; Compare accumulator (long,X) $832738.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cop $B3.b		; 02 B3 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($84A3.w,X)		; 7C A3 84 ; Jump indirect indexed to ($84A3.w,X) [Reads: X Index] [Flow: jump]
	adc ($01.b,S),Y		; 73 01 ; Add with carry (stack relative indirect indexed) ($01.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($B3.b,X)		; 01 B3 ; Logical OR ($B3.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jmp ($7285.w,X)		; 7C 85 72 ; Jump indirect indexed to ($7285.w,X) [Reads: X Index] [Flow: jump]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $6D97.w,Y		; 59 97 6D ; Exclusive OR accumulator with memory $6D97.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	eor [$B4.b],Y		; 57 B4 ; Exclusive OR accumulator with memory (long indexed) [$B4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	wai		; CB ; Wait for interrupt
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ldy $1F.b		; A4 1F ; Load $1F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $2F.b,X		; B4 2F ; Load Y register $2F.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	ldy $9F37.w,X		; BC 37 9F ; Load Y register $9F37.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ldy #$90.b		; A0 90 ; Load #$90.b into Y register [Writes: Y Index] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $22.b		; 04 22 ; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $10, $20		; 10 20 ; Branch if plus to $10, $20 [Flow: branch]
	cmp $EB66.w,Y		; D9 66 EB ; Compare accumulator $EB66.w,Y [Reads: Y Index] [Flags: ZNC]
	sbc $BF.b,X		; F5 BF ; Subtract $BF.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($1E.b,S),Y		; F3 1E ; Subtract with carry (stack relative indirect indexed) ($1E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$8C.b],Y		; F7 8C ; Subtract with carry (long indexed) [$8C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$E8.b],Y		; 77 E8 ; Add with carry (long indexed) [$E8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$7F.b],Y		; 97 7F ; Store accumulator (long indexed) [$7F.b],Y [Reads: Accumulator, Direct Page, Y Index]
	cpx #$18.b		; E0 18 ; Compare #$18.b with X register [Reads: X Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr ($F7FC.w,X)		; FC FC F7 ; Jump to subroutine indirect indexed ($F7FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc [$1F.b],Y		; F7 1F ; Subtract with carry (long indexed) [$1F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $EFFBFB.l,X		; 1F FB FB EF ; Logical OR long $EFFBFB.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $22B8B8.l		; EF B8 B8 22 ; Subtract with carry (long) $22B8B8.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $E0F804.l,X		; FF 04 F8 E0 ; Subtract with carry (long,X) $E0F804.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$1F.b]		; 07 1F ; OR accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $EFFF43.l,X		; 7F 43 FF EF ; Add long $EFFF43.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: ZNC]
	mvp $F0,$EF		; 44 EF F0 ; Move block positive $F0,$EF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $70.b		; 02 70 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E0223F.l		; EF 3F 22 E0 ; Subtract with carry (long) $E0223F.l [Writes: Accumulator] [Flags: ZVNC]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $E0.b		; 24 E0 ; Test bits $E0.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($81.b),Y		; 11 81 ; OR accumulator with memory ($81.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $63		; 42 63 ; Reserved instruction
	ldy $7C9B.w,X		; BC 9B 7C ; Load Y register $7C9B.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	jmp ($5493.w,X)		; 7C 93 54 ; Jump indirect indexed to ($5493.w,X) [Reads: X Index] [Flow: jump]
	sta $7C.b,S		; 83 7C ; Store accumulator (stack relative) $7C.b,S [Reads: Accumulator, Stack Pointer]
	sbc $817E00.l,X		; FF 00 7E 81 ; Subtract with carry (long,X) $817E00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $280700.l		; 22 00 07 28 ; Jump to subroutine long $280700.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$44.b]		; C7 44 ; Compare accumulator (long) [$44.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $10D703.l,X		; FF 03 D7 10 ; Subtract with carry (long,X) $10D703.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$38.b]		; C7 38 ; Compare accumulator (long) [$38.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sty $6E.b		; 84 6E ; Store Y register to $6E.b [Reads: Y Index]
	ora $10.b,S		; 03 10 ; OR accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Accumulator, Stack Pointer]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $E717F0.l		; 0F F0 17 E7 ; OR accumulator with memory (long) $E717F0.l [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cmp $AD9D55.l		; CF 55 9D AD ; Compare accumulator (long) $AD9D55.l [Reads: Accumulator] [Flags: ZNC]
	and $AC43.w,X		; 3D 43 AC ; AND accumulator with memory $AC43.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $FF04.w,X		; 3C 04 FF ; Test bits $FF04.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	.db $F0, $EF		; F0 EF ; Branch if equal to $F0, $EF [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	lda ($22.b,S),Y		; B3 22 ; Load accumulator (stack relative indirect indexed) ($22.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $05.b,S		; 63 05 ; Add with carry (stack relative) $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	inc $FC01.w,X		; FE 01 FC ; Increment memory $FC01.w,X [Reads: X Index] [Flags: ZN]
	ora $F9.b,S		; 03 F9 ; OR accumulator with stack relative $F9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$43.b]		; 07 43 ; OR accumulator with memory (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc ($0F.b,S),Y		; F3 0F ; Subtract with carry (stack relative indirect indexed) ($0F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $E3.b,S		; 43 E3 ; Exclusive OR accumulator with stack relative $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $0FF101.l,X		; 1F 01 F1 0F ; Logical OR long $0FF101.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $4AE7.w,X		; 3C E7 4A ; Test bits $4AE7.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ror $0CC3.w,X		; 7E C3 0C ; Rotate right $0CC3.w,X [Reads: X Index] [Flags: ZNC]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $4A.b		; 66 4A ; Rotate right $4A.b [Reads: Direct Page] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor ($52.b)		; 52 52 ; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $38C700.l,X		; FF 00 C7 38 ; Subtract with carry (long,X) $38C700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $22.b,S		; 83 22 ; Store accumulator (stack relative) $22.b,S [Reads: Accumulator, Stack Pointer]
	mvp $BB,$01		; 44 01 BB ; Move block positive $BB,$01 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc $00EF44.l,X		; FF 44 EF 00 ; Subtract with carry (long,X) $00EF44.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $380200.l		; 22 00 02 38 ; Jump to subroutine long $380200.l [Writes: Stack Pointer] [Flow: call]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $0C.b,S		; 23 0C ; AND accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx #$22.b		; E0 22 ; Compare #$22.b with X register [Reads: X Index] [Flags: ZNC]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: ZNC]
	adc $BFFF7F.l,X		; 7F 7F FF BF ; Add long $BFFF7F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7FF3F3.l,X		; FF F3 F3 7F ; Subtract with carry (long,X) $7FF3F3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FF0480.l,X		; 1F 80 04 FF ; Logical OR long $FF0480.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $FF		; 10 FF ; Branch if plus to $10, $FF [Flow: branch]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lsr $FF.b		; 46 FF ; Logical shift right $FF.b [Reads: Direct Page] [Flags: ZNC]
	eor $CCFF.w		; 4D FF CC ; Exclusive OR $CCFF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $C7FFCE.l,X		; FF CE FF C7 ; Subtract with carry (long,X) $C7FFCE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C0E0F8.l,X		; FF F8 E0 C0 ; Subtract with carry (long,X) $C0E0F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	jsl $0E0600.l		; 22 00 06 0E ; Jump to subroutine long $0E0600.l [Writes: Stack Pointer] [Flow: call]
	sbc $333F18.l,X		; FF 18 3F 33 ; Subtract with carry (long,X) $333F18.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $0F8866.l,X		; 7F 66 88 0F ; Add long $0F8866.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $24		; 80 24 ; Branch always to $80, $24 [Flow: branch]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $30FF.w		; 1C FF 30 ; Test and reset bits $30FF.w [Reads: Accumulator] [Flags: Z]
	sbc $46FF63.l,X		; FF 63 FF 46 ; Subtract with carry (long,X) $46FF63.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1186CD.l,X		; FF CD 86 11 ; Subtract with carry (long,X) $1186CD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $27.b		; 04 27 ; Test and set bits $27.b [Reads: Accumulator] [Flags: Z]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $D50100.l,X		; FF 00 01 D5 ; Subtract with carry (long,X) $D50100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	eor $C0.b,S		; 43 C0 ; Exclusive OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $028C84.l,X		; 3F 84 8C 02 ; AND accumulator with memory (long,X) $028C84.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $00FF.w		; 4D FF 00 ; Exclusive OR $00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $DF200F.l,X		; FF 0F 20 DF ; Subtract with carry (long,X) $DF200F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $CF		; 30 CF ; Branch if minus to $30, $CF [Flow: branch]
	and ($CD.b)		; 32 CD ; AND accumulator with memory (indirect) ($CD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cpx $0F.b		; E4 0F ; Compare $0F.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $10, $07		; 10 07 ; Branch if plus to $10, $07 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $DB.b,S		; 83 DB ; Store accumulator (stack relative) $DB.b,S [Reads: Accumulator, Stack Pointer]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $440C7F.l		; 8F 7F 0C 44 ; Store accumulator (long) $440C7F.l [Reads: Accumulator]
	sbc $8F437C.l,X		; FF 7C 43 8F ; Subtract with carry (long,X) $8F437C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $7F8002.l,X		; 7F 02 80 7F ; Add long $7F8002.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0F0028.l,X		; FF 28 00 0F ; Subtract with carry (long,X) $0F0028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $09.b,X		; F6 09 ; Increment memory $09.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tsb $7D.b		; 04 7D ; Test and set bits $7D.b [Reads: Accumulator] [Flags: Z]
	.db $82, $3E, $C1		; 82 3E C1 ; Branch always long to $82, $3E, $C1 [Flow: branch]
	ora $F00FE0.l,X		; 1F E0 0F F0 ; Logical OR long $F00FE0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $04FB43.l,X		; FF 43 FB 04 ; Subtract with carry (long,X) $04FB43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $00FF47.l,X		; FF 47 FF 00 ; Subtract with carry (long,X) $00FF47.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sta $CE.b,S		; 83 CE ; Store accumulator (stack relative) $CE.b,S [Reads: Accumulator, Stack Pointer]
	tsb $84.b		; 04 84 ; Test and set bits $84.b [Reads: Accumulator] [Flags: Z]
	lda $FD0C04.l		; AF 04 0C FD ; Load long $FD0C04.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $82, $FE, $C1		; 82 FE C1 ; Branch always long to $82, $FE, $C1 [Flow: branch]
	sbc $F0FFE0.l,X		; FF E0 FF F0 ; Subtract with carry (long,X) $F0FFE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FCFFF8.l,X		; FF F8 FF FC ; Subtract with carry (long,X) $FCFFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Accumulator, Stack Pointer] [Flags: ZN]
	cop $14.b		; 02 14 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	jsr ($8100.w,X)		; FC 00 81 ; Jump to subroutine indirect indexed ($8100.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $C742.w,X		; 3C 42 C7 ; Test bits $C742.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	jmp $387C38.l		; 5C 38 7C 38 ; Jump long to $387C38.l [Flow: jump]
	mvn $44,$10		; 54 10 44 ; Move block negative $44,$10 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sec		; 38 ; Set carry flag [Flags: C]
	jmp ($7E00.w,X)		; 7C 00 7E ; Jump indirect indexed to ($7E00.w,X) [Reads: X Index] [Flow: jump]
	sta ($22.b,X)		; 81 22 ; Store accumulator ($22.b,X) [Reads: Accumulator, X Index, Direct Page]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $3FB73F.l		; AF 3F B7 3F ; Load long $3FB73F.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $E36FCF.l,X		; 5F CF 6F E3 ; Exclusive OR accumulator with memory (long,X) $E36FCF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc ($A0.b,S),Y		; 73 A0 ; Add with carry (stack relative indirect indexed) ($A0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp ($73D0.w)		; 6C D0 73 ; Jump indirect to ($73D0.w) [Flow: jump]
	cpx $607C.w		; EC 7C 60 ; Compare $607C.w with X register [Reads: X Index] [Flags: ZNC]
	.db $70, $38		; 70 38 ; Branch if overflow set to $70, $38 [Flow: branch]
	ora $0C130F.l,X		; 1F 0F 13 0C ; Logical OR long $0C130F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $08.b,S		; 03 08 ; OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc [$C8.b],Y		; F7 C8 ; Subtract with carry (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$CC.b],Y		; F7 CC ; Subtract with carry (long indexed) [$CC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	asl $F5.b		; 06 F5 ; Arithmetic shift left $F5.b [Reads: Direct Page] [Flags: ZNC]
	ora $FA.b,S		; 03 FA ; OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $040023.l,X		; FF 23 00 04 ; Subtract with carry (long,X) $040023.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	eor $037EC3.l		; 4F C3 7E 03 ; Exclusive OR accumulator with memory (long) $037EC3.l [Writes: Accumulator] [Flags: ZN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $62, $6A, $6A		; 62 6A 6A ; Push effective relative address $62, $6A, $6A [Writes: Stack Pointer]
	jsl $4A0B52.l		; 22 52 0B 4A ; Jump to subroutine long $4A0B52.l [Writes: Stack Pointer] [Flow: call]
	sbc [$0E.b],Y		; F7 0E ; Subtract with carry (long indexed) [$0E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	asl $ED.b,X		; 16 ED ; Arithmetic shift left $ED.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc [$1C.b]		; E7 1C ; Subtract with carry (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc ($44.b,X)		; E1 44 ; Subtract with carry ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $0029E0.l,X		; 1F E0 29 00 ; Logical OR long $0029E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $80.b		; 05 80 ; Logical OR $80.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	sbc $45FF6F.l,X		; FF 6F FF 45 ; Subtract with carry (long,X) $45FF6F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $EF		; 10 EF ; Branch if plus to $10, $EF [Flow: branch]
	ora $70.b,S		; 03 70 ; OR accumulator with stack relative $70.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $257FFF.l		; 8F FF 7F 25 ; Store accumulator (long) $257FFF.l [Reads: Accumulator]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C3		; 80 C3 ; Branch always to $80, $C3 [Flow: branch]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsr ($FE0C.w,X)		; FC 0C FE ; Jump to subroutine indirect indexed ($FE0C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	asl $46.b		; 06 46 ; Arithmetic shift left $46.b [Reads: Direct Page] [Flags: ZNC]
	sbc $3C0400.l,X		; FF 00 04 3C ; Subtract with carry (long,X) $3C0400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $F8F183.l,X		; BF 83 F1 F8 ; Load long $F8F183.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $E30FFF.l		; 22 FF 0F E3 ; Jump to subroutine long $E30FFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $78FFF0.l,X		; FF F0 FF 78 ; Subtract with carry (long,X) $78FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1FFF3C.l,X		; FF 3C FF 1F ; Subtract with carry (long,X) $1FFF3C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $03BF07.l,X		; FF 07 BF 03 ; Subtract with carry (long,X) $03BF07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $248F00.l,X		; 9F 00 8F 24 ; Store accumulator (long,X) $248F00.l,X [Reads: Accumulator, X Index]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $70, $E3		; 70 E3 ; Branch if overflow set to $70, $E3 [Flow: branch]
	sbc $A38670.l,X		; FF 70 86 A3 ; Subtract with carry (long,X) $A38670.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF03FF.l		; 0F FF 03 FF ; OR accumulator with memory (long) $FF03FF.l [Writes: Accumulator] [Flags: ZN]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: ZNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $7F.b		; 02 7F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $BF843F.l,X		; FF 3F 84 BF ; Subtract with carry (long,X) $BF843F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$45.b]		; 07 45 ; OR accumulator with memory (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FF3200.l,X		; FF 00 32 FF ; Subtract with carry (long,X) $FF3200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $FF,$00		; 44 00 FF ; Move block positive $FF,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $004EFF.l,X		; FF FF 4E 00 ; Subtract with carry (long,X) $004EFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0EFF28.l,X		; FF 28 FF 0E ; Subtract with carry (long,X) $0EFF28.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$3F.b		; C0 3F ; Compare #$3F.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	adc [$98.b]		; 67 98 ; Add with carry (long) [$98.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $F10EF0.l		; 0F F0 0E F1 ; OR accumulator with memory (long) $F10EF0.l [Writes: Accumulator] [Flags: ZN]
	tsb $00F3.w		; 0C F3 00 ; Test and set bits $00F3.w [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $FF0045.l,X		; FF 45 00 FF ; Subtract with carry (long,X) $FF0045.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $38.b,S		; 03 38 ; OR accumulator with stack relative $38.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp [$FC.b]		; C7 FC ; Compare accumulator (long) [$FC.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	ora $45.b,S		; 03 45 ; OR accumulator with stack relative $45.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF2700.l,X		; FF 00 27 FF ; Subtract with carry (long,X) $FF2700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0CFF00.l		; 0F 00 FF 0C ; OR accumulator with memory (long) $0CFF00.l [Writes: Accumulator] [Flags: ZN]
	sbc ($0E.b,S),Y		; F3 0E ; Subtract with carry (stack relative indirect indexed) ($0E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($1F.b),Y		; F1 1F ; Subtract with carry ($1F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$3F.b		; E0 3F ; Compare #$3F.b with X register [Reads: X Index] [Flags: ZNC]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $CF.b		; 00 CF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $37		; 30 37 ; Branch if minus to $30, $37 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	asl $CF.b		; 06 CF ; Arithmetic shift left $CF.b [Reads: Direct Page] [Flags: ZNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $1EC3.w,X		; 3C C3 1E ; Test bits $1EC3.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sbc ($46.b,X)		; E1 46 ; Subtract with carry ($46.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $F102F0.l		; 0F F0 02 F1 ; OR accumulator with memory (long) $F102F0.l [Writes: Accumulator] [Flags: ZN]
	ora $FF27F3.l		; 0F F3 27 FF ; OR accumulator with memory (long) $FF27F3.l [Writes: Accumulator] [Flags: ZN]
	ora $0FFF00.l		; 0F 00 FF 0F ; OR accumulator with memory (long) $0FFF00.l [Writes: Accumulator] [Flags: ZN]
	.db $F0, $7F		; F0 7F ; Branch if equal to $F0, $7F [Flow: branch]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $FC7CFF.l,X		; 1F FF 7C FC ; Logical OR long $FC7CFF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FC.b,S		; E3 FC ; Subtract stack-relative $FC.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora $01FF24.l,X		; 1F 24 FF 01 ; Logical OR long $01FF24.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($24E0.w,X)		; FC E0 24 ; Jump to subroutine indirect indexed ($24E0.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $063F03.l		; 0F 03 3F 06 ; OR accumulator with memory (long) $063F03.l [Writes: Accumulator] [Flags: ZN]
	eor $0022A4.l,X		; 5F A4 22 00 ; Exclusive OR accumulator with memory (long,X) $0022A4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	trb $0301.w		; 1C 01 03 ; Test and reset bits $0301.w [Reads: Accumulator] [Flags: Z]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta [$00.b]		; 87 00 ; Store accumulator (long) [$00.b] [Reads: Accumulator, Direct Page]
	and $BB007F.l,X		; 3F 7F 00 BB ; AND accumulator with memory (long,X) $BB007F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($4487.w,X)		; 7C 87 44 ; Jump indirect indexed to ($4487.w,X) [Reads: X Index] [Flow: jump]
	sta ($70.b,S),Y		; 93 70 ; Store accumulator (stack relative indirect indexed) ($70.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	dec $C23C.w		; CE 3C C2 ; Decrement $C23C.w [Flags: ZN]
	bit $1C62.w,X		; 3C 62 1C ; Test bits $1C62.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $380000.l,X		; 3F 00 00 38 ; AND accumulator with memory (long,X) $380000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsb $8101.w		; 0C 01 81 ; Test and set bits $8101.w [Reads: Accumulator] [Flags: Z]
	eor ($44.b,X)		; 41 44 ; Exclusive OR accumulator with memory ($44.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$FE.b]		; 07 FE ; OR accumulator with memory (long) [$FE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $FC.b,S		; 43 FC ; Exclusive OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$18.b]		; 07 18 ; OR accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	inc $FA07.w,X		; FE 07 FA ; Increment memory $FA07.w,X [Reads: X Index] [Flags: ZN]
	ora [$FB.b]		; 07 FB ; OR accumulator with memory (long) [$FB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $FCFE.w,X		; FE FE FC ; Increment memory $FCFE.w,X [Reads: X Index] [Flags: ZN]
	jsr ($FEFE.w,X)		; FC FE FE ; Jump to subroutine indirect indexed ($FEFE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $DC3FFF.l,X		; FF FF 3F DC ; Subtract with carry (long,X) $DC3FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $F60FFC.l		; 0F FC 0F F6 ; OR accumulator with memory (long) $F60FFC.l [Writes: Accumulator] [Flags: ZN]
	ora [$FB.b]		; 07 FB ; OR accumulator with memory (long) [$FB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FCFC02.l,X		; FF 02 FC FC ; Subtract with carry (long,X) $FCFC02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FF24.w,X		; FE 24 FF ; Increment memory $FF24.w,X [Reads: X Index] [Flags: ZN]
	and [$00.b],Y		; 37 00 ; AND accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	asl $807F.w		; 0E 7F 80 ; Arithmetic shift left $807F.w [Flags: ZNC]
	and $E09FC0.l,X		; 3F C0 9F E0 ; AND accumulator with memory (long,X) $E09FC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr $5F7F.w		; 20 7F 5F ; Jump to subroutine at $5F7F.w [Writes: Stack Pointer] [Flow: call]
	adc $903F2F.l,X		; 7F 2F 3F 90 ; Add long $903F2F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0023C0.l,X		; 1F C0 23 00 ; Logical OR long $0023C0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($80.b)		; 12 80 ; OR accumulator with memory (indirect) ($80.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $F7FFFF.l,X		; 3F FF FF F7 ; AND accumulator with memory (long,X) $F7FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$E7.b],Y		; F7 E7 ; Subtract with carry (long indexed) [$E7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$C3.b]		; E7 C3 ; Subtract with carry (long) [$C3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $81.b,S		; C3 81 ; Compare accumulator (stack relative) $81.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sta ($E3.b,X)		; 81 E3 ; Store accumulator ($E3.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $F7.b,S		; E3 F7 ; Subtract stack-relative $F7.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc [$22.b],Y		; F7 22 ; Subtract with carry (long indexed) [$22.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E7F705.l,X		; FF 05 F7 E7 ; Subtract with carry (long,X) $E7F705.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $81.b,S		; C3 81 ; Compare accumulator (stack relative) $81.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc $F7.b,S		; E3 F7 ; Subtract stack-relative $F7.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	jsl $EF23FF.l		; 22 FF 23 EF ; Jump to subroutine long $EF23FF.l [Writes: Stack Pointer] [Flow: call]
	and $C7.b,S		; 23 C7 ; AND accumulator with stack relative $C7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $83.b		; 06 83 ; Arithmetic shift left $83.b [Reads: Direct Page] [Flags: ZNC]
	sta $81.b,S		; 83 81 ; Store accumulator (stack relative) $81.b,S [Reads: Accumulator, Stack Pointer]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $3C.b,S		; 83 3C ; Store accumulator (stack relative) $3C.b,S [Reads: Accumulator, Stack Pointer]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $81.b,S		; 83 81 ; Store accumulator (stack relative) $81.b,S [Reads: Accumulator, Stack Pointer]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $FC.b,S		; 23 FC ; AND accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $3E7E7E.l		; 0F 7E 7E 3E ; OR accumulator with memory (long) $3E7E7E.l [Writes: Accumulator] [Flags: ZN]
	rol $0E0E.w,X		; 3E 0E 0E ; Rotate left $0E0E.w,X [Reads: X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	jsr ($7EFC.w,X)		; FC FC 7E ; Jump to subroutine indirect indexed ($7EFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rol $000E.w,X		; 3E 0E 00 ; Rotate left $000E.w,X [Reads: X Index] [Flags: ZNC]
	sta $D0.b,S		; 83 D0 ; Store accumulator (stack relative) $D0.b,S [Reads: Accumulator, Stack Pointer]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E1F9.w,Y		; F9 F9 E1 ; Subtract with carry $E1F9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($81.b,X)		; E1 81 ; Subtract with carry ($81.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($E1.b,X)		; 81 E1 ; Store accumulator ($E1.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc ($F8.b,X)		; E1 F8 ; Subtract with carry ($F8.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsl $FC12FE.l		; 22 FE 12 FC ; Jump to subroutine long $FC12FE.l [Writes: Stack Pointer] [Flow: call]
	sbc $81E1.w,Y		; F9 E1 81 ; Subtract with carry $81E1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($F8.b,X)		; E1 F8 ; Subtract with carry ($F8.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $000F.w,X		; FE 0F 00 ; Increment memory $000F.w,X [Reads: X Index] [Flags: ZN]
	and $007F00.l,X		; 3F 00 7F 00 ; AND accumulator with memory (long,X) $007F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $07F800.l,X		; FF 00 F8 07 ; Subtract with carry (long,X) $07F800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$38.b]		; C7 38 ; Compare accumulator (long) [$38.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sta $50.b,S		; 83 50 ; Store accumulator (stack relative) $50.b,S [Reads: Accumulator, Stack Pointer]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $C06038.l		; 0F 38 60 C0 ; OR accumulator with memory (long) $C06038.l [Writes: Accumulator] [Flags: ZN]
	ora [$3F.b]		; 07 3F ; OR accumulator with memory (long) [$3F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $0CF3FF.l,X		; FF FF F3 0C ; Subtract with carry (long,X) $0CF3FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $40BF30.l		; CF 30 BF 40 ; Compare accumulator (long) $40BF30.l [Reads: Accumulator] [Flags: ZNC]
	adc ($8C.b,S),Y		; 73 8C ; Add with carry (stack relative indirect indexed) ($8C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $60.b,S		; 43 60 ; Exclusive OR accumulator with stack relative $60.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $1FE043.l,X		; 9F 43 E0 1F ; Store accumulator (long,X) $1FE043.l,X [Reads: Accumulator, X Index]
	cop $0F.b		; 02 0F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF257F.l,X		; 3F 7F 25 FF ; AND accumulator with memory (long,X) $FF257F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $80.b,X		; 16 80 ; Arithmetic shift left $80.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sta $08F770.l		; 8F 70 F7 08 ; Store accumulator (long) $08F770.l [Reads: Accumulator]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	bit $FB.b		; 24 FB ; Test bits $FB.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	bit $FD.b		; 24 FD ; Test bits $FD.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	jsl $FD32CD.l		; 22 CD 32 FD ; Jump to subroutine long $FD32CD.l [Writes: Stack Pointer] [Flow: call]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $07070F.l,X		; 7F 0F 07 07 ; Add long $07070F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $83.b,S		; 03 83 ; OR accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $45.b,S		; C3 45 ; Compare accumulator (stack relative) $45.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cpx #$1F.b		; E0 1F ; Compare #$1F.b with X register [Reads: X Index] [Flags: ZNC]
	ora ($F0.b,X)		; 01 F0 ; Logical OR ($F0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $07F847.l		; 0F 47 F8 07 ; OR accumulator with memory (long) $07F847.l [Writes: Accumulator] [Flags: ZN]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $70.b		; 05 70 ; Logical OR $70.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $3F817E.l		; 8F 7E 81 3F ; Store accumulator (long) $3F817E.l [Reads: Accumulator]
	cpy #$44.b		; C0 44 ; Compare #$44.b with Y register [Reads: Y Index] [Flags: ZNC]
	ora $E104E0.l,X		; 1F E0 04 E1 ; Logical OR long $E104E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $E21FE3.l,X		; 1F E3 1F E2 ; Logical OR long $E21FE3.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	.db $10, $FE		; 10 FE ; Branch if plus to $10, $FE [Flow: branch]
	ora $C63FE2.l,X		; 1F E2 3F C6 ; Logical OR long $C63FE2.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $0DFE06.l,X		; FF 06 FE 0D ; Subtract with carry (long,X) $0DFE06.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FEFB.w,X		; FE FB FE ; Increment memory $FEFB.w,X [Reads: X Index] [Flags: ZN]
	sta [$C6.b]		; 87 C6 ; Store accumulator (long) [$C6.b] [Reads: Accumulator, Direct Page]
	and $227F86.l,X		; 3F 86 7F 22 ; AND accumulator with memory (long,X) $227F86.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc $FC05.w,X		; FE 05 FC ; Increment memory $FC05.w,X [Reads: X Index] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $5F,$AC		; 44 AC 5F ; Move block positive $5F,$AC [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy $3F43.w		; CC 43 3F ; Compare $3F43.w with Y register [Reads: Y Index] [Flags: ZNC]
	jmp ($7F03.w)		; 6C 03 7F ; Jump indirect to ($7F03.w) [Flow: jump]
	dec $AEFF.w		; CE FF AE ; Decrement $AEFF.w [Flags: ZN]
	jsl $CF158F.l		; 22 8F 15 CF ; Jump to subroutine long $CF158F.l [Writes: Stack Pointer] [Flow: call]
	adc $8FCF6F.l		; 6F 6F CF 8F ; Add with carry (long) $8FCF6F.l [Writes: Accumulator] [Flags: ZVNC]
	ror $FA00.w,X		; 7E 00 FA ; Rotate right $FA00.w,X [Reads: X Index] [Flags: ZNC]
	adc $F2.b		; 65 F2 ; Add $F2.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $6CF3.w		; 6D F3 6C ; Add $6CF3.w to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	sbc ($6C.b)		; F2 6C ; Subtract with carry (indirect) ($6C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $E340.w,X		; FE 40 E3 ; Increment memory $E340.w,X [Reads: X Index] [Flags: ZN]
	eor $BECD.w,X		; 5D CD BE ; Exclusive OR accumulator with memory $BECD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor ($22.b,X)		; 41 22 ; Exclusive OR accumulator with memory ($22.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx #$19.b		; E0 19 ; Compare #$19.b with X register [Reads: X Index] [Flags: ZNC]
	sbc ($C1.b,X)		; E1 C1 ; Subtract with carry ($C1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: ZNC]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $E01FF0.l		; 0F F0 1F E0 ; OR accumulator with memory (long) $E01FF0.l [Writes: Accumulator] [Flags: ZN]
	and $C33FC1.l,X		; 3F C1 3F C3 ; AND accumulator with memory (long,X) $C33FC1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $8F7F87.l,X		; 7F 87 7F 8F ; Add long $8F7F87.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $FFFF8E.l,X		; 7F 8E FF FF ; Add long $FFFF8E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($E3F1.w,X)		; FC F1 E3 ; Jump to subroutine indirect indexed ($E3F1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc [$22.b]		; E7 22 ; Subtract with carry (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $C23016.l		; CF 16 30 C2 ; Compare accumulator (long) $C23016.l [Reads: Accumulator] [Flags: ZNC]
	and $9BE5.w,X		; 3D E5 9B ; AND accumulator with memory $9BE5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc $FFC1.w,X		; FE C1 FF ; Increment memory $FFC1.w,X [Reads: X Index] [Flags: ZN]
	.db $30, $7F		; 30 7F ; Branch if minus to $30, $7F [Flow: branch]
	stz $CF3F.w		; 9C 3F CF ; Store zero to $CF3F.w
	ora $0000E0.l,X		; 1F E0 00 00 ; Logical OR long $0000E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	.db $F0, $FC		; F0 FC ; Branch if equal to $F0, $FC [Flow: branch]
	sbc $0037FF.l,X		; FF FF 37 00 ; Subtract with carry (long,X) $0037FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $60		; 10 60 ; Branch if plus to $10, $60 [Flow: branch]
	.db $80, $3F		; 80 3F ; Branch always to $80, $3F [Flow: branch]
	cpy #$18.b		; C0 18 ; Compare #$18.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc [$F3.b]		; E7 F3 ; Subtract with carry (long) [$F3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $E71FE0.l		; 0F E0 1F E7 ; OR accumulator with memory (long) $E71FE0.l [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta [$F3.b],Y		; 97 F3 ; Store accumulator (long indexed) [$F3.b],Y [Reads: Accumulator, Direct Page, Y Index]
	cmp $00241F.l		; CF 1F 24 00 ; Compare accumulator (long) $00241F.l [Reads: Accumulator] [Flags: ZNC]
	ora $80.b,S		; 03 80 ; OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $00D083.l,X		; FF 83 D0 00 ; Subtract with carry (long,X) $00D083.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $F8.b,S		; 03 F8 ; OR accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: ZNC]
	sta $74.b,S		; 83 74 ; Store accumulator (stack relative) $74.b,S [Reads: Accumulator, Stack Pointer]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $FCFE08.l,X		; FF 08 FE FC ; Subtract with carry (long,X) $FCFE08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	cpx #$F8.b		; E0 F8 ; Compare #$F8.b with X register [Reads: X Index] [Flags: ZNC]
	inc $80FF.w,X		; FE FF 80 ; Increment memory $80FF.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $83		; 80 83 ; Branch always to $80, $83 [Flow: branch]
	.db $50, $01		; 50 01 ; Branch if overflow clear to $50, $01 [Flow: branch]
	ora ($F0.b,X)		; 01 F0 ; Logical OR ($F0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $F0, $87		; F0 87 ; Branch if equal to $F0, $87 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $F0		; 80 F0 ; Branch always to $80, $F0 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $83		; F0 83 ; Branch if equal to $F0, $83 [Flow: branch]
	ldy $02.b,X		; B4 02 ; Load Y register $02.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	and $EF.b,S		; 23 EF ; AND accumulator with stack relative $EF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $E7.b		; 05 E7 ; Logical OR $E7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$E2.b]		; E7 E2 ; Subtract with carry (long) [$E2.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
.ACCU 8
	sep #$E0		; E2 E0
	cpx #$23.b		; E0 23 ; Compare #$23.b with X register [Reads: X Index] [Flags: ZNC]
	cpy #$0F.b		; C0 0F ; Compare #$0F.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	sbc $E2E7EF.l		; EF EF E7 E2 ; Subtract with carry (long) $E2E7EF.l [Writes: Accumulator] [Flags: ZVNC]
	cpx #$C0.b		; E0 C0 ; Compare #$C0.b with X register [Reads: X Index] [Flags: ZNC]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: ZNC]
	bit $813C.w,X		; 3C 3C 81 ; Test bits $813C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sta ($C1.b,X)		; 81 C1 ; Store accumulator ($C1.b,X) [Reads: Accumulator, X Index, Direct Page]
	cmp ($23.b,X)		; C1 23 ; Compare accumulator ($23.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc $23.b,S		; E3 23 ; Subtract stack-relative $23.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc [$04.b],Y		; F7 04 ; Subtract with carry (long indexed) [$04.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $813CFF.l,X		; FF FF 3C 81 ; Subtract with carry (long,X) $813CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($85.b,X)		; C1 85 ; Compare accumulator ($85.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $F8.b,S		; 03 F8 ; OR accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$30.b]		; 07 30 ; OR accumulator with memory (long) [$30.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cmp $FF0046.l		; CF 46 00 FF ; Compare accumulator (long) $FF0046.l [Reads: Accumulator] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $3FC045.l,X		; FF 45 C0 3F ; Subtract with carry (long,X) $3FC045.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $07F843.l,X		; 1F 43 F8 07 ; Logical OR long $07F843.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $80.b		; 02 80 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $FF2800.l,X		; 7F 00 28 FF ; Add long $FF2800.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	jsr $2103.w		; 20 03 21 ; Jump to subroutine at $2103.w [Writes: Stack Pointer] [Flow: call]
	ora ($73.b)		; 12 73 ; OR accumulator with memory (indirect) ($73.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $436E.w		; 0C 6E 43 ; Test and set bits $436E.w [Reads: Accumulator] [Flags: Z]
	ora ($62.b,X)		; 01 62 ; Logical OR ($62.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	ora $0F.b		; 05 0F ; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $0C1C.w		; 0E 1C 0C ; Arithmetic shift left $0C1C.w [Flags: ZNC]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $FF18.w		; 1C 18 FF ; Test and reset bits $FF18.w [Reads: Accumulator] [Flags: Z]
	.db $80, $43		; 80 43 ; Branch always to $80, $43 [Flow: branch]
	sbc $7F0900.l,X		; FF 00 09 7F ; Subtract with carry (long,X) $7F0900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $BF		; 80 BF ; Branch always to $80, $BF [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor $9E61A0.l,X		; 5F A0 61 9E ; Exclusive OR accumulator with memory (long,X) $9E61A0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $2321.w,X		; DE 21 23 ; Decrement memory $2321.w,X [Reads: X Index] [Flags: ZN]
	sbc $3F7F16.l,X		; FF 16 7F 3F ; Subtract with carry (long,X) $3F7F16.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $021D01.l,X		; 1F 01 1D 02 ; Logical OR long $021D01.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $77.b		; 04 77 ; Test and set bits $77.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc [$08.b],Y		; F7 08 ; Subtract with carry (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$28.b],Y		; D7 28 ; Compare accumulator (long indexed) [$28.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sbc [$28.b],Y		; F7 28 ; Subtract with carry (long indexed) [$28.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	bit $FD.b		; 24 FD ; Test bits $FD.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($13.b)		; 12 13 ; OR accumulator with memory (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and [$4F.b]		; 27 4F ; AND accumulator with memory (long) [$4F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $87058F.l		; 22 8F 05 87 ; Jump to subroutine long $87058F.l [Writes: Stack Pointer] [Flow: call]
	sta $F0.b,S		; 83 F0 ; Store accumulator (stack relative) $F0.b,S [Reads: Accumulator, Stack Pointer]
	ora $457F80.l		; 0F 80 7F 45 ; OR accumulator with memory (long) $457F80.l [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $01CC83.l,X		; 7F 83 CC 01 ; Add long $01CC83.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $AF67BF.l		; 0F BF 67 AF ; OR accumulator with memory (long) $AF67BF.l [Writes: Accumulator] [Flags: ZN]
	adc [$9F.b],Y		; 77 9F ; Add with carry (long indexed) [$9F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($FF.b,S),Y		; 73 FF ; Add with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $7F.b,S		; 03 7F ; OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and ($3F.b,X)		; 21 3F ; Logical AND ($3F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $1B		; 10 1B ; Branch if plus to $10, $1B [Flow: branch]
	tsb $11.b		; 04 11 ; Test and set bits $11.b [Reads: Accumulator] [Flags: Z]
	asl $C383.w		; 0E 83 C3 ; Arithmetic shift left $C383.w [Flags: ZNC]
	ora ($0E.b,X)		; 01 0E ; Logical OR ($0E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc ($30.b,X)		; 61 30 ; Add with carry ($30.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	cmp $E63E.w		; CD 3E E6 ; Compare $E63E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	cmp $D2EFD6.l,X		; DF D6 EF D2 ; Compare accumulator (long,X) $D2EFD6.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	sbc $0AF78A.l		; EF 8A F7 0A ; Subtract with carry (long) $0AF78A.l [Writes: Accumulator] [Flags: ZVNC]
	mvp $08,$F7		; 44 F7 08 ; Move block positive $08,$F7 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $703FE7.l,X		; 1F E7 3F 70 ; Logical OR long $703FE7.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $40502F.l		; 0F 2F 50 40 ; OR accumulator with memory (long) $40502F.l [Writes: Accumulator] [Flags: ZN]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $B0, $40		; B0 40 ; Branch if carry set to $B0, $40 [Flow: branch]
	lda $009867.l,X		; BF 67 98 00 ; Load long $009867.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	ora $000F3F.l,X		; 1F 3F 0F 00 ; Logical OR long $000F3F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($3F.b,X)		; A1 3F ; Load accumulator ($3F.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $D0, $1F		; D0 1F ; Branch if not equal to $D0, $1F [Flow: branch]
	sbc $47F00F.l		; EF 0F F0 47 ; Subtract with carry (long) $47F00F.l [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	sbc $870025.l,X		; FF 25 00 87 ; Subtract with carry (long,X) $870025.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $01		; 80 01 ; Branch always to $80, $01 [Flow: branch]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $C0703F.l		; 0F 3F 70 C0 ; OR accumulator with memory (long) $C0703F.l [Writes: Accumulator] [Flags: ZN]
	sta $0D.b,S		; 83 0D ; Store accumulator (stack relative) $0D.b,S [Reads: Accumulator, Stack Pointer]
	cop $1D.b		; 02 1D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $3D.b		; 02 3D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $FD,$02		; 44 02 FD ; Move block positive $FD,$02 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $04FB.w		; 0D FB 04 ; Logical OR $04FB.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc [$08.b],Y		; F7 08 ; Subtract with carry (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $1B0BF0.l		; 0F F0 0B 1B ; OR accumulator with memory (long) $1B0BF0.l [Writes: Accumulator] [Flags: ZN]
	and ($E3.b,S),Y		; 33 E3 ; AND accumulator (stack relative indirect indexed) ($E3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $07.b,S		; C3 07 ; Compare accumulator (stack relative) $07.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	ora $0027FF.l		; 0F FF 27 00 ; OR accumulator with memory (long) $0027FF.l [Writes: Accumulator] [Flags: ZN]
	eor $01.b,S		; 43 01 ; Exclusive OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$7E.b		; 09 7E ; Logical OR #$7E.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	stz $F00F.w,X		; 9E 0F F0 ; Store zero to $F00F.w,X [Reads: X Index]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	ror $60FE.w,X		; 7E FE 60 ; Rotate right $60FE.w,X [Reads: X Index] [Flags: ZNC]
	brk $E6.b		; 00 E6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $A7E3.w		; AE E3 A7 ; Load $A7E3.w into X register [Writes: X Index] [Flags: ZN]
	cpy #$A3.b		; C0 A3 ; Compare #$A3.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$B0.b		; C0 B0 ; Compare #$B0.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpx #$D8.b		; E0 D8 ; Compare #$D8.b with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $EF		; F0 EF ; Branch if equal to $F0, $EF [Flow: branch]
	sbc $FFFFF0.l,X		; FF F0 FF FF ; Subtract with carry (long,X) $FFFFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($98.b),Y		; 91 98 ; Store accumulator ($98.b),Y [Reads: Accumulator, Direct Page, Y Index]
	stz $C78F.w		; 9C 8F C7 ; Store zero to $C78F.w
	cpx #$F0.b		; E0 F0 ; Compare #$F0.b with X register [Reads: X Index] [Flags: ZNC]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($F0.b)		; 12 F0 ; OR accumulator with memory (indirect) ($F0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	.db $F0, $D3		; F0 D3 ; Branch if equal to $F0, $D3 [Flow: branch]
.ACCU 8
	sep #$A6		; E2 A6
	sbc $AC.b		; E5 AC ; Subtract $AC.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpx $AC.b		; E4 AC ; Compare $AC.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $E7F0FF.l,X		; FF FF F0 E7 ; Subtract with carry (long,X) $E7F0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy $9299.w		; CC 99 92 ; Compare $9299.w with Y register [Reads: Y Index] [Flags: ZNC]
	sta ($83.b,S),Y		; 93 83 ; Store accumulator (stack relative indirect indexed) ($83.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	eor ($00.b)		; 52 00 ; Exclusive OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($82.b,X)		; 01 82 ; Logical OR ($82.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $0048.w,X		; 7D 48 00 ; Add $0048.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $01FF28.l,X		; FF 28 FF 01 ; Subtract with carry (long,X) $01FF28.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $C7,$00		; 44 00 C7 ; Move block positive $C7,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $39.b,S		; 43 39 ; Exclusive OR accumulator with stack relative $39.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$00.b]		; C7 00 ; Compare accumulator (long) [$00.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $45A248.l,X		; FF 48 A2 45 ; Subtract with carry (long,X) $45A248.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $41.b		; 06 41 ; Arithmetic shift left $41.b [Reads: Direct Page] [Flags: ZNC]
	ldx #$41.b		; A2 41 ; Load #$41.b into X register [Writes: X Index] [Flags: ZN]
	lda $4C.b,S		; A3 4C ; Load accumulator (stack relative) $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor ($A8.b),Y		; 51 A8 ; Exclusive OR accumulator with memory ($A8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $18.b,S		; 23 18 ; AND accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1C.b,S		; 03 1C ; OR accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $8610.w		; 1C 10 86 ; Test and reset bits $8610.w [Reads: Accumulator] [Flags: Z]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sbc $F70300.l,X		; FF 00 03 F7 ; Subtract with carry (long,X) $F70300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc [$18.b]		; E7 18 ; Subtract with carry (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($FA.b,X)		; 01 FA ; Logical OR ($FA.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $43.b		; 05 43 ; Logical OR $43.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $3B1304.l,X		; 7F 04 13 3B ; Add long $3B1304.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $1D.b		; 04 1D ; Test and set bits $1D.b [Reads: Accumulator] [Flags: Z]
	cop $1F.b		; 02 1F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($81.b,X)		; 01 81 ; Logical OR ($81.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta ($40.b,X)		; 81 40 ; Store accumulator ($40.b,X) [Reads: Accumulator, X Index, Direct Page]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsr $1010.w		; 20 10 10 ; Jump to subroutine at $1010.w [Writes: Stack Pointer] [Flow: call]
	ora ($F0.b),Y		; 11 F0 ; OR accumulator with memory ($F0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $451FE0.l		; 0F E0 1F 45 ; OR accumulator with memory (long) $451FE0.l [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $8F7043.l,X		; 9F 43 70 8F ; Store accumulator (long,X) $8F7043.l,X [Reads: Accumulator, X Index]
	ora ($F0.b,X)		; 01 F0 ; Logical OR ($F0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $08FF27.l		; 0F 27 FF 08 ; OR accumulator with memory (long) $08FF27.l [Writes: Accumulator] [Flags: ZN]
	asl $0F.b,X		; 16 0F ; Arithmetic shift left $0F.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	trb $0F.b		; 14 0F ; Test and reset bits $0F.b [Reads: Accumulator] [Flags: Z]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	ora $2A0100.l		; 0F 00 01 2A ; OR accumulator with memory (long) $2A0100.l [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $3C.b,S		; C3 3C ; Compare accumulator (stack relative) $3C.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	adc $9B.b		; 65 9B ; Add $9B.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F907.w,Y		; F9 07 F9 ; Subtract with carry $F907.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $FA.b		; 06 FA ; Arithmetic shift left $FA.b [Reads: Direct Page] [Flags: ZNC]
	adc $7D.b		; 65 7D ; Add $7D.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $0305.w,X		; 1E 05 03 ; Arithmetic shift left $0305.w,X [Reads: X Index] [Flags: ZNC]
	cop $23.b		; 02 23 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$78.b		; E0 78 ; Compare #$78.b with X register [Reads: X Index] [Flags: ZNC]
	trb $2302.w		; 1C 02 23 ; Test and reset bits $2302.w [Reads: Accumulator] [Flags: Z]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $2100.w,X		; 1E 00 21 ; Arithmetic shift left $2100.w,X [Reads: X Index] [Flags: ZNC]
	asl $3F4C.w,X		; 1E 4C 3F ; Arithmetic shift left $3F4C.w,X [Reads: X Index] [Flags: ZNC]
	eor $B846BE.l		; 4F BE 46 B8 ; Exclusive OR accumulator with memory (long) $B846BE.l [Writes: Accumulator] [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ldy #$24.b		; A0 24 ; Load #$24.b into Y register [Writes: Y Index] [Flags: ZN]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $81		; 80 81 ; Branch always to $80, $81 [Flow: branch]
	sta [$03.b]		; 87 03 ; Store accumulator (long) [$03.b] [Reads: Accumulator, Direct Page]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0D.b,X)		; 01 0D ; Logical OR ($0D.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $1F.b,S		; 03 1F ; OR accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $80, $0C		; 80 0C ; Branch always to $80, $0C [Flow: branch]
	ora $033C00.l		; 0F 00 3C 03 ; OR accumulator with memory (long) $033C00.l [Writes: Accumulator] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $07.b		; 14 07 ; Test and reset bits $07.b [Reads: Accumulator] [Flags: Z]
	adc ($F0.b,S),Y		; 73 F0 ; Add with carry (stack relative indirect indexed) ($F0.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$E8.b		; C0 E8 ; Compare #$E8.b with Y register [Reads: Y Index] [Flags: ZNC]
	ora [$BF.b],Y		; 17 BF ; OR accumulator with memory (long indexed) [$BF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $50, $FA		; 50 FA ; Branch if overflow clear to $50, $FA [Flow: branch]
	eor $AE.b,X		; 55 AE ; Exclusive OR accumulator with memory $AE.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $DE.b,X		; 75 DE ; Add $DE.b,X to accumulator with carry [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and ($E7.b,S),Y		; 33 E7 ; AND accumulator (stack relative indirect indexed) ($E7.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $00FF.w,Y		; 19 FF 00 ; OR accumulator with memory $00FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $240700.l,X		; 3F 00 07 24 ; AND accumulator with memory (long,X) $240700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$3F.b		; C0 3F ; Compare #$3F.b with Y register [Reads: Y Index] [Flags: ZNC]
	cmp $DD36.w,Y		; D9 36 DD ; Compare accumulator $DD36.w,Y [Reads: Y Index] [Flags: ZNC]
	rol $EE.b,X		; 36 EE ; Rotate left $EE.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($7E.b,S),Y		; 13 7E ; OR accumulator (stack relative indirect indexed) ($7E.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $3F.b,S		; 03 3F ; OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $802200.l		; 22 00 22 80 ; Jump to subroutine long $802200.l [Writes: Stack Pointer] [Flow: call]
	cop $40.b		; 02 40 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $8318.w		; 20 18 83 ; Jump to subroutine at $8318.w [Writes: Stack Pointer] [Flow: call]
	asl $05.b,X		; 16 05 ; Arithmetic shift left $05.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $07,$00		; 44 00 07 ; Move block positive $07,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $0F.b,S		; 43 0F ; Exclusive OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0701.w		; 0E 01 07 ; Arithmetic shift left $0701.w [Flags: ZNC]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $1E.b,S		; 43 1E ; Exclusive OR accumulator with stack relative $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0E0F02.l,X		; 1F 02 0F 0E ; Logical OR long $0E0F02.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $0F.b,S		; 03 0F ; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	and [$FF.b],Y		; 37 FF ; AND accumulator with memory (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$00.b],Y		; 37 00 ; AND accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $00FF0F.l,X		; FF 0F FF 00 ; Subtract with carry (long,X) $00FF0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $54BB10.l,X		; FF 10 BB 54 ; Subtract with carry (long,X) $54BB10.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$28.b]		; C7 28 ; Compare accumulator (long) [$28.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp [$D6.b],Y		; D7 D6 ; Compare accumulator (long indexed) [$D6.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp [$28.b]		; C7 28 ; Compare accumulator (long) [$28.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	mvn $10,$FF		; 54 FF 10 ; Move block negative $10,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	jsl $100300.l		; 22 00 03 10 ; Jump to subroutine long $100300.l [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	mvp $FF,$00		; 44 00 FF ; Move block positive $FF,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $EF.b,S		; 43 EF ; Exclusive OR accumulator with stack relative $EF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	sta ($7C.b,S),Y		; 93 7C ; Store accumulator (stack relative indirect indexed) ($7C.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	eor $EF.b,S		; 43 EF ; Exclusive OR accumulator with stack relative $EF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	sbc $0050E4.l,X		; FF E4 50 00 ; Subtract with carry (long,X) $0050E4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $810601.l,X		; FF 01 06 81 ; Subtract with carry (long,X) $810601.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $41FF01.l,X		; FF 01 FF 41 ; Subtract with carry (long,X) $41FF01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF2303.l,X		; FF 03 23 FF ; Subtract with carry (long,X) $FF2303.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $7F.b,S		; 03 7F ; OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $473F3F.l,X		; 7F 3F 3F 47 ; Add long $473F3F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FC0600.l,X		; FF 00 06 FC ; Subtract with carry (long,X) $FC0600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $003FC0.l		; 0F C0 3F 00 ; OR accumulator with memory (long) $003FC0.l [Writes: Accumulator] [Flags: ZN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $01FE45.l,X		; FF 45 FE 01 ; Subtract with carry (long,X) $01FE45.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FC.b,S		; 43 FC ; Exclusive OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$E0.b]		; 07 E0 ; OR accumulator with memory (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF2900.l,X		; 1F 00 29 FF ; Logical OR long $FF2900.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $3F.b		; 02 3F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF4B07.l,X		; FF 07 4B FF ; Subtract with carry (long,X) $FF4B07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFE43.l,X		; FF 43 FE FF ; Subtract with carry (long,X) $FFFE43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $FC.b		; 06 FC ; Arithmetic shift left $FC.b [Reads: Direct Page] [Flags: ZNC]
	sbc $F0FFF8.l,X		; FF F8 FF F0 ; Subtract with carry (long,X) $F0FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF27C0.l,X		; FF C0 27 FF ; Subtract with carry (long,X) $FF27C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $C0.b		; 04 C0 ; Test and set bits $C0.b [Reads: Accumulator] [Flags: Z]
	sbc $FCFFF0.l,X		; FF F0 FF FC ; Subtract with carry (long,X) $FCFFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($FF.b)		; 32 FF ; AND accumulator with memory (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF43FC.l,X		; FF FC 43 FF ; Subtract with carry (long,X) $FF43FC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FF37.w,X		; FE 37 FF ; Increment memory $FF37.w,X [Reads: X Index] [Flags: ZN]
	eor $FE.b,S		; 43 FE ; Exclusive OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FFFC04.l,X		; FF 04 FC FF ; Subtract with carry (long,X) $FFFC04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	inc $27E1.w,X		; FE E1 27 ; Increment memory $27E1.w,X [Reads: X Index] [Flags: ZN]
	sbc $03FC01.l,X		; FF 01 FC 03 ; Subtract with carry (long,X) $03FC01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $F8.b,S		; 43 F8 ; Exclusive OR accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($4303.w,X)		; FC 03 43 ; Jump to subroutine indirect indexed ($4303.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $4301.w,X		; FE 01 43 ; Increment memory $4301.w,X [Reads: X Index] [Flags: ZN]
	sbc $FF2700.l,X		; FF 00 27 FF ; Subtract with carry (long,X) $FF2700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx $2F.b		; E4 2F ; Compare $2F.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $04FF10.l,X		; FF 10 FF 04 ; Subtract with carry (long,X) $04FF10.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $00,$FF		; 44 FF 00 ; Move block positive $00,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sed		; F8 ; Set decimal flag [Flags: D]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF4620.l,X		; FF 20 46 FF ; Subtract with carry (long,X) $FF4620.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($23.b,X)		; 81 23 ; Store accumulator ($23.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $1F0701.l,X		; FF 01 07 1F ; Subtract with carry (long,X) $1F0701.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	eor $01.b,S		; 43 01 ; Exclusive OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF0343.l,X		; FF 43 03 FF ; Subtract with carry (long,X) $FF0343.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $E0FF.w		; 2D FF E0 ; Logical AND $E0FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	and $1F.b,S		; 23 1F ; AND accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpx #$3F.b		; E0 3F ; Compare #$3F.b with X register [Reads: X Index] [Flags: ZNC]
	cpy #$7F.b		; C0 7F ; Compare #$7F.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $82, $FF, $00		; 82 FF 00 ; Branch always long to $82, $FF, $00 [Flow: branch]
	sbc $08FF04.l,X		; FF 04 FF 08 ; Subtract with carry (long,X) $08FF04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $01FF21.l,X		; FF 21 FF 01 ; Subtract with carry (long,X) $01FF21.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $03FF7F.l,X		; 1F 7F FF 03 ; Logical OR long $03FF7F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $47FF07.l,X		; FF 07 FF 47 ; Subtract with carry (long,X) $47FF07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $87FF07.l,X		; FF 07 FF 87 ; Subtract with carry (long,X) $87FF07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF4307.l,X		; FF 07 43 FF ; Subtract with carry (long,X) $FF4307.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $7F7F01.l,X		; 3F 01 7F 7F ; AND accumulator with memory (long,X) $7F7F01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $4002FF.l		; 22 FF 02 40 ; Jump to subroutine long $4002FF.l [Writes: Stack Pointer] [Flow: call]
	adc $FF44C0.l,X		; 7F C0 44 FF ; Add long $FF44C0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $F7.b		; 04 F7 ; Test and set bits $F7.b [Reads: Accumulator] [Flags: Z]
	tsb $FF44.w		; 0C 44 FF ; Test and set bits $FF44.w [Reads: Accumulator] [Flags: Z]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $F3FF3F.l,X		; BF 3F FF F3 ; Load long $F3FF3F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc #$E1.b		; E9 E1 ; Subtract #$E1.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sbc ($FF.b,S),Y		; F3 FF ; Subtract with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor [$FF.b]		; 47 FF ; Exclusive OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($F000.w,X)		; FC 00 F0 ; Jump to subroutine indirect indexed ($F000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $FF2300.l		; 22 00 23 FF ; Jump to subroutine long $FF2300.l [Writes: Stack Pointer] [Flow: call]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $C0		; F0 C0 ; Branch if equal to $F0, $C0 [Flow: branch]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: ZNC]
	inc $FC43.w,X		; FE 43 FC ; Increment memory $FC43.w,X [Reads: X Index] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $FE2200.l		; 22 00 22 FE ; Jump to subroutine long $FE2200.l [Writes: Stack Pointer] [Flow: call]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	jsr ($E0F8.w,X)		; FC F8 E0 ; Jump to subroutine indirect indexed ($E0F8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sbc $FF2C00.l,X		; FF 00 2C FF ; Subtract with carry (long,X) $FF2C00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FE.b,S		; 43 FE ; Exclusive OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $00E186.l,X		; FF 86 E1 00 ; Subtract with carry (long,X) $00E186.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $C0.b		; 05 C0 ; Logical OR $C0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy #$F0.b		; C0 F0 ; Compare #$F0.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $FC		; F0 FC ; Branch if equal to $F0, $FC [Flow: branch]
	jsr ($FF29.w,X)		; FC 29 FF ; Jump to subroutine indirect indexed ($FF29.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cop $C0.b		; 02 C0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $FC		; F0 FC ; Branch if equal to $F0, $FC [Flow: branch]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sta $72.b,S		; 83 72 ; Store accumulator (stack relative) $72.b,S [Reads: Accumulator, Stack Pointer]
	cop $23.b		; 02 23 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF27.w,X		; FE 27 FF ; Increment memory $FF27.w,X [Reads: X Index] [Flags: ZN]
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr ($FEFE.w,X)		; FC FE FE ; Jump to subroutine indirect indexed ($FEFE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $FFFE43.l,X		; FF 43 FE FF ; Subtract with carry (long,X) $FFFE43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $2B.b,S		; 83 2B ; Store accumulator (stack relative) $2B.b,S [Reads: Accumulator, Stack Pointer]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpx #$26.b		; E0 26 ; Compare #$26.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $FCFE01.l,X		; FF 01 FE FC ; Subtract with carry (long,X) $FCFE01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $F8,$00		; 44 00 F8 ; Move block positive $F8,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $FE,$00		; 44 00 FE ; Move block positive $FE,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($F8F8.w,X)		; FC F8 F8 ; Jump to subroutine indirect indexed ($F8F8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sta $99.b,S		; 83 99 ; Store accumulator (stack relative) $99.b,S [Reads: Accumulator, Stack Pointer]
	cop $45.b		; 02 45 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E30700.l,X		; FF 00 07 E3 ; Subtract with carry (long,X) $E30700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $C5.b		; 04 C5 ; Test and set bits $C5.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	trb $1CDD.w		; 1C DD 1C ; Test and reset bits $1CDD.w [Reads: Accumulator] [Flags: Z]
	sta $CE.b,S		; 83 CE ; Store accumulator (stack relative) $CE.b,S [Reads: Accumulator, Stack Pointer]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $DD.b,S		; E3 DD ; Subtract stack-relative $DD.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	ldy $A2.b,X		; B4 A2 ; Load Y register $A2.b,X [Reads: X Index, Direct Page] [Writes: Y Index] [Flags: ZN]
	cmp ($E3.b,X)		; C1 E3 ; Compare accumulator ($E3.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc $78C800.l,X		; FF 00 C8 78 ; Subtract with carry (long,X) $78C800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $77.b,X		; 95 77 ; Store accumulator to $77.b,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ror $5ED2.w		; 6E D2 5E ; Rotate right $5ED2.w [Flags: ZNC]
	lda $3D.b		; A5 3D ; Load $3D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $27.b		; A5 27 ; Load $27.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($21.b),Y		; 11 21 ; OR accumulator with memory ($21.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $44		; 42 44 ; Reserved instruction
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $930110.l		; EF 10 01 93 ; Subtract with carry (long) $930110.l [Writes: Accumulator] [Flags: ZVNC]
	jmp ($EF43.w,X)		; 7C 43 EF ; Jump indirect indexed to ($EF43.w,X) [Reads: X Index] [Flow: jump]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	sbc $430028.l,X		; FF 28 00 43 ; Subtract with carry (long,X) $430028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $BB0A00.l,X		; FF 00 0A BB ; Subtract with carry (long,X) $BB0A00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $28,$FF		; 44 FF 28 ; Move block positive $28,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc $28FF00.l		; EF 00 FF 28 ; Subtract with carry (long) $28FF00.l [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	mvp $24,$FF		; 44 FF 24 ; Move block positive $24,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $E4		; 10 E4 ; Branch if plus to $10, $E4 [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $43.b		; 02 43 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF4403.l,X		; FF 03 44 FF ; Subtract with carry (long,X) $FF4403.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$04.b]		; 07 04 ; OR accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$FF.b]		; 47 FF ; Exclusive OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $7F.b,S		; 03 7F ; OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $003F24.l,X		; 7F 24 3F 00 ; Add long $003F24.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $00FF47.l,X		; 7F 47 FF 00 ; Add long $00FF47.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $AC.b,S		; 83 AC ; Store accumulator (stack relative) $AC.b,S [Reads: Accumulator, Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$1F.b		; E0 1F ; Compare #$1F.b with X register [Reads: X Index] [Flags: ZNC]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $01FE01.l,X		; FF 01 FE 01 ; Subtract with carry (long,X) $01FE01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FC.b,S		; 43 FC ; Exclusive OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $08.b,S		; 03 08 ; OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$F0.b]		; 07 F0 ; OR accumulator with memory (long) [$F0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $801FE0.l		; 0F E0 1F 80 ; OR accumulator with memory (long) $801FE0.l [Writes: Accumulator] [Flags: ZN]
	adc $FF2B00.l,X		; 7F 00 2B FF ; Add long $FF2B00.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $7F.b		; 06 7F ; Arithmetic shift left $7F.b [Reads: Direct Page] [Flags: ZNC]
	sbc $0FFF3F.l,X		; FF 3F FF 0F ; Subtract with carry (long,X) $0FFF3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF4503.l,X		; FF 03 45 FF ; Subtract with carry (long,X) $FF4503.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $44FE00.l,X		; FF 00 FE 44 ; Subtract with carry (long,X) $44FE00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E383FC.l,X		; FF FC 83 E3 ; Subtract with carry (long,X) $E383FC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: ZNC]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFF002.l,X		; FF 02 F0 FF ; Subtract with carry (long,X) $FFF002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FF34.w,X		; FE 34 FF ; Increment memory $FF34.w,X [Reads: X Index] [Flags: ZN]
	sta $F0.b,S		; 83 F0 ; Store accumulator (stack relative) $F0.b,S [Reads: Accumulator, Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $FF43FC.l,X		; FF FC 43 FF ; Subtract with carry (long,X) $FF43FC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FF2D.w,X		; FE 2D FF ; Increment memory $FF2D.w,X [Reads: X Index] [Flags: ZN]
	eor [$FE.b]		; 47 FE ; Exclusive OR accumulator with memory (long) [$FE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $012B84.l,X		; FF 84 2B 01 ; Subtract with carry (long,X) $012B84.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta ($27.b,X)		; 81 27 ; Store accumulator ($27.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $00B083.l,X		; FF 83 B0 00 ; Subtract with carry (long,X) $00B083.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $49.b,S		; 03 49 ; OR accumulator with stack relative $49.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $2701.w,X		; FE 01 27 ; Increment memory $2701.w,X [Reads: X Index] [Flags: ZN]
	sbc $002FE4.l,X		; FF E4 2F 00 ; Subtract with carry (long,X) $002FE4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr $C0FF.w		; 20 FF C0 ; Jump to subroutine at $C0FF.w [Writes: Stack Pointer] [Flow: call]
	mvp $00,$FF		; 44 FF 00 ; Move block positive $00,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF231F.l,X		; FF 1F 23 FF ; Subtract with carry (long,X) $FF231F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($1F.b,X)		; 01 1F ; Logical OR ($1F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $02FF26.l,X		; 3F 26 FF 02 ; AND accumulator with memory (long,X) $02FF26.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sbc $FF4411.l,X		; FF 11 44 FF ; Subtract with carry (long,X) $FF4411.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpx #$26.b		; E0 26 ; Compare #$26.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $01B383.l,X		; FF 83 B3 01 ; Subtract with carry (long,X) $01B383.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $84FF2D.l,X		; 7F 2D FF 84 ; Add long $84FF2D.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sty $FF.b		; 84 FF ; Store Y register to $FF.b [Reads: Y Index]
	.db $10, $84		; 10 84 ; Branch if plus to $10, $84 [Flow: branch]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sbc $020022.l,X		; FF 22 00 02 ; Subtract with carry (long,X) $020022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $0F.b,S		; 03 0F ; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $038D83.l,X		; 1F 83 8D 03 ; Logical OR long $038D83.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $01,$FF		; 44 FF 01 ; Move block positive $01,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	cop $40.b		; 02 40 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $FF44C0.l,X		; 7F C0 44 FF ; Add long $FF44C0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $43FF.w		; 0C FF 43 ; Test and set bits $43FF.w [Reads: Accumulator] [Flags: Z]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $08.b,S		; 83 08 ; Store accumulator (stack relative) $08.b,S [Reads: Accumulator, Stack Pointer]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($E1.b,X)		; E1 E1 ; Subtract with carry ($E1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($FF.b,S),Y		; F3 FF ; Subtract with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor [$FF.b]		; 47 FF ; Exclusive OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $0002.w		; 2C 02 00 ; Test bits $0002.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	cpx #$22.b		; E0 22 ; Compare #$22.b with X register [Reads: X Index] [Flags: ZNC]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FCFE04.l,X		; FF 04 FE FC ; Subtract with carry (long,X) $FCFE04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: ZNC]
	inc $0044.w,X		; FE 44 00 ; Increment memory $0044.w,X [Reads: X Index] [Flags: ZN]
	jsr ($F806.w,X)		; FC 06 F8 ; Jump to subroutine indirect indexed ($F806.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $3A8300.l		; 22 00 83 3A ; Jump to subroutine long $3A8300.l [Writes: Stack Pointer] [Flow: call]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $E0		; F0 E0 ; Branch if equal to $F0, $E0 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	jsl $C386FF.l		; 22 FF 86 C3 ; Jump to subroutine long $C386FF.l [Writes: Stack Pointer] [Flow: call]
	ora $45.b,S		; 03 45 ; OR accumulator with stack relative $45.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF2800.l,X		; FF 00 28 FF ; Subtract with carry (long,X) $FF2800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $FC,$FF		; 44 FF FC ; Move block positive $FC,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp $FF2703.l,X		; DF 03 27 FF ; Compare accumulator (long,X) $FF2703.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $FE		; F0 FE ; Branch if equal to $F0, $FE [Flow: branch]
	inc $FF2B.w,X		; FE 2B FF ; Increment memory $FF2B.w,X [Reads: X Index] [Flags: ZN]
	ora ($F0.b,X)		; 01 F0 ; Logical OR ($F0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $FF25.w,X		; FE 25 FF ; Increment memory $FF25.w,X [Reads: X Index] [Flags: ZN]
	sta $70.b,S		; 83 70 ; Store accumulator (stack relative) $70.b,S [Reads: Accumulator, Stack Pointer]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($23FC.w,X)		; FC FC 23 ; Jump to subroutine indirect indexed ($23FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $FF23.w,X		; FE 23 FF ; Increment memory $FF23.w,X [Reads: X Index] [Flags: ZN]
	ora ($C0.b,X)		; 01 C0 ; Logical OR ($C0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $F0, $83		; F0 83 ; Branch if equal to $F0, $83 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFE47.l,X		; FF 47 FE FF ; Subtract with carry (long,X) $FFFE47.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $AB.b		; 84 AB ; Store Y register to $AB.b [Reads: Y Index]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $2580.w,X		; FE 80 25 ; Increment memory $2580.w,X [Reads: X Index] [Flags: ZN]
	sbc $84FE00.l,X		; FF 00 FE 84 ; Subtract with carry (long,X) $84FE00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda [$02.b],Y		; B7 02 ; Load accumulator (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($FE24.w,X)		; FC 24 FE ; Jump to subroutine indirect indexed ($FE24.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $E70408.l,X		; FF 08 04 E7 ; Subtract with carry (long,X) $E70408.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	cmp $32DF14.l		; CF 14 DF 32 ; Compare accumulator (long) $32DF14.l [Reads: Accumulator] [Flags: ZNC]
	sbc $DD8410.l,X		; FF 10 84 DD ; Subtract with carry (long,X) $DD8410.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $A0B0.w,Y		; D9 B0 A0 ; Compare accumulator $A0B0.w,Y [Reads: Y Index] [Flags: ZNC]
	.db $80, $83		; 80 83 ; Branch always to $80, $83 [Flow: branch]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: ZN]
	ora ($A6.b,X)		; 01 A6 ; Logical OR ($A6.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ror $83.b		; 66 83 ; Rotate right $83.b [Reads: Direct Page] [Flags: ZNC]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ora $DA3D84.l		; 0F 84 3D DA ; OR accumulator with memory (long) $DA3D84.l [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $67.b		; E5 67 ; Subtract $67.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($1E.b)		; 92 1E ; Store accumulator (indirect) ($1E.b) [Reads: Accumulator, Direct Page]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($42.b,X)		; 21 42 ; Logical AND ($42.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $42, $04		; 42 04 ; Reserved instruction
	clc		; 18 ; Clear carry flag [Flags: C]
	adc ($FF.b,X)		; 61 FF ; Add with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	mvp $28,$FF		; 44 FF 28 ; Move block positive $28,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sbc $28FF00.l		; EF 00 FF 28 ; Subtract with carry (long) $28FF00.l [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	mvp $24,$FF		; 44 FF 24 ; Move block positive $24,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $22		; 10 22 ; Branch if plus to $10, $22 [Flow: branch]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $10FF00.l,X		; FF 00 FF 10 ; Subtract with carry (long,X) $10FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	mvn $28,$C7		; 54 C7 28 ; Move block negative $28,$C7 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cmp [$D6.b],Y		; D7 D6 ; Compare accumulator (long indexed) [$D6.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	cmp [$28.b]		; C7 28 ; Compare accumulator (long) [$28.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	mvn $10,$FF		; 54 FF 10 ; Move block negative $10,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	jsl $100200.l		; 22 00 02 10 ; Jump to subroutine long $100200.l [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $10, $E4		; 10 E4 ; Branch if plus to $10, $E4 [Flow: branch]
	eor #$00.b		; 49 00 ; Exclusive OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora #$FF.b		; 09 FF ; Logical OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$FF.b]		; 47 FF ; Exclusive OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $FF.b,S		; 83 FF ; Store accumulator (stack relative) $FF.b,S [Reads: Accumulator, Stack Pointer]
	sta ($45.b,X)		; 81 45 ; Store accumulator ($45.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $3F0101.l,X		; FF 01 01 3F ; Subtract with carry (long,X) $3F0101.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $237F22.l,X		; 3F 22 7F 23 ; AND accumulator with memory (long,X) $237F22.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FF004A.l,X		; FF 4A 00 FF ; Subtract with carry (long,X) $FF004A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $F8.b,S		; 03 F8 ; OR accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$E0.b]		; 07 E0 ; OR accumulator with memory (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $46FF28.l,X		; 1F 28 FF 46 ; Logical OR long $46FF28.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FE.b,S		; 43 FE ; Exclusive OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr ($F003.w,X)		; FC 03 F0 ; Jump to subroutine indirect indexed ($F003.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $04FF28.l		; 0F 28 FF 04 ; OR accumulator with memory (long) $04FF28.l [Writes: Accumulator] [Flags: ZN]
	and $FF0FFF.l,X		; 3F FF 0F FF ; AND accumulator with memory (long,X) $FF0FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $49.b,S		; 03 49 ; OR accumulator with stack relative $49.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF3200.l,X		; FF 00 32 FF ; Subtract with carry (long,X) $FF3200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $FE.b		; 04 FE ; Test and set bits $FE.b [Reads: Accumulator] [Flags: Z]
	sbc $F8FFFC.l,X		; FF FC FF F8 ; Subtract with carry (long,X) $F8FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: ZNC]
	sbc $FCFFF0.l,X		; FF F0 FF FC ; Subtract with carry (long,X) $FCFFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF30FE.l,X		; FF FE 30 FF ; Subtract with carry (long,X) $FF30FE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	mvp $FC,$FF		; 44 FF FC ; Move block positive $FC,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	eor $FE.b,S		; 43 FE ; Exclusive OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FEFC0A.l,X		; FF 0A FC FE ; Subtract with carry (long,X) $FEFC0A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($FE.b,X)		; E1 FE ; Subtract with carry ($FE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($FC.b,X)		; C1 FC ; Compare accumulator ($FC.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sta $F8.b,S		; 83 F8 ; Store accumulator (stack relative) $F8.b,S [Reads: Accumulator, Stack Pointer]
	sta [$F0.b]		; 87 F0 ; Store accumulator (long) [$F0.b] [Reads: Accumulator, Direct Page]
	ora $03FF27.l		; 0F 27 FF 03 ; OR accumulator with memory (long) $03FF27.l [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$43.b]		; 07 43 ; OR accumulator with memory (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($4703.w,X)		; FC 03 47 ; Jump to subroutine indirect indexed ($4703.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $2701.w,X		; FE 01 27 ; Increment memory $2701.w,X [Reads: X Index] [Flags: ZN]
	sbc $002FE4.l,X		; FF E4 2F 00 ; Subtract with carry (long,X) $002FE4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	.db $10, $46		; 10 46 ; Branch if plus to $10, $46 [Flow: branch]
	sbc $0A8300.l,X		; FF 00 83 0A ; Subtract with carry (long,X) $0A8300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $260F03.l,X		; FF 03 0F 26 ; Subtract with carry (long,X) $260F03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF0802.l,X		; FF 02 08 FF ; Subtract with carry (long,X) $FF0802.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $46.b		; 02 46 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $1F0600.l,X		; FF 00 06 1F ; Subtract with carry (long,X) $1F0600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFF7F.l,X		; FF 7F FF FF ; Subtract with carry (long,X) $FFFF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $FC		; F0 FC ; Branch if equal to $F0, $FC [Flow: branch]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $FF.b		; 46 FF ; Logical shift right $FF.b [Reads: Direct Page] [Flags: ZNC]
	ora $251F00.l		; 0F 00 1F 25 ; OR accumulator with memory (long) $251F00.l [Writes: Accumulator] [Flags: ZN]
	sbc $263F00.l,X		; FF 00 3F 26 ; Subtract with carry (long,X) $263F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E01F07.l,X		; FF 07 1F E0 ; Subtract with carry (long,X) $E01F07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $847FC1.l,X		; 3F C1 7F 84 ; AND accumulator with memory (long,X) $847FC1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $188308.l,X		; FF 08 83 18 ; Subtract with carry (long,X) $188308.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $03FF00.l,X		; FF 00 FF 03 ; Subtract with carry (long,X) $03FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1F1F0F.l		; 0F 0F 1F 1F ; OR accumulator with memory (long) $1F1F0F.l [Writes: Accumulator] [Flags: ZN]
	lsr $FF.b		; 46 FF ; Logical shift right $FF.b [Reads: Direct Page] [Flags: ZNC]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $FF.b,S		; 83 FF ; Store accumulator (stack relative) $FF.b,S [Reads: Accumulator, Stack Pointer]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF2207.l,X		; FF 07 22 FF ; Subtract with carry (long,X) $FF2207.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $023F22.l,X		; 7F 22 3F 02 ; Add long $023F22.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	adc $FF45C0.l,X		; 7F C0 45 FF ; Add long $FF45C0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($0C.b,S),Y		; F3 0C ; Subtract with carry (stack relative indirect indexed) ($0C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $00,$FF		; 44 FF 00 ; Move block positive $00,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora [$BF.b]		; 07 BF ; OR accumulator with memory (long) [$BF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $EDF3FF.l,X		; 3F FF F3 ED ; AND accumulator with memory (long,X) $EDF3FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($F3.b,X)		; E1 F3 ; Subtract with carry ($F3.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FF4B.l,X		; FF 4B FF 00 ; Subtract with carry (long,X) $00FF4B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $F8.b,S		; 03 F8 ; OR accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E0F801.l,X		; FF 01 F8 E0 ; Subtract with carry (long,X) $E0F801.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor [$FF.b]		; 47 FF ; Exclusive OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0300.w,X		; FE 00 03 ; Increment memory $0300.w,X [Reads: X Index] [Flags: ZN]
	jsr ($F000.w,X)		; FC 00 F0 ; Jump to subroutine indirect indexed ($F000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FEFE03.l,X		; FF 03 FE FE ; Subtract with carry (long,X) $FEFE03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($85F0.w,X)		; FC F0 85 ; Jump to subroutine indirect indexed ($85F0.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: ZNC]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00E384.l,X		; FF 84 E3 00 ; Subtract with carry (long,X) $00E384.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $FC		; F0 FC ; Branch if equal to $F0, $FC [Flow: branch]
	jsr ($FEFE.w,X)		; FC FE FE ; Jump to subroutine indirect indexed ($FEFE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $FC		; F0 FC ; Branch if equal to $F0, $FC [Flow: branch]
	inc $FF23.w,X		; FE 23 FF ; Increment memory $FF23.w,X [Reads: X Index] [Flags: ZN]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $E0		; 80 E0 ; Branch always to $80, $E0 [Flow: branch]
	cpx #$F0.b		; E0 F0 ; Compare #$F0.b with X register [Reads: X Index] [Flags: ZNC]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $FC.b,S		; 23 FC ; AND accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $00FE.w,X		; FE FE 00 ; Increment memory $00FE.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $E0		; 80 E0 ; Branch always to $80, $E0 [Flow: branch]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	jsr ($45FC.w,X)		; FC FC 45 ; Jump to subroutine indirect indexed ($45FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $0AFF.w,X		; FE FF 0A ; Increment memory $0AFF.w,X [Reads: X Index] [Flags: ZN]
	jsr ($E0FE.w,X)		; FC FE E0 ; Jump to subroutine indirect indexed ($E0FE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $FCC0.w,X		; FE C0 FC ; Increment memory $FCC0.w,X [Reads: X Index] [Flags: ZN]
	.db $80, $F8		; 80 F8 ; Branch always to $80, $F8 [Flow: branch]
	.db $80, $F0		; 80 F0 ; Branch always to $80, $F0 [Flow: branch]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FEFE07.l,X		; FF 07 FE FE ; Subtract with carry (long,X) $FEFE07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($F0F8.w,X)		; FC F8 F0 ; Jump to subroutine indirect indexed ($F0F8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	mvp $FC,$00		; 44 00 FC ; Move block positive $FC,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor [$FE.b]		; 47 FE ; Exclusive OR accumulator with memory (long) [$FE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	cop $23.b		; 02 23 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0043.w,X		; FE 43 00 ; Increment memory $0043.w,X [Reads: X Index] [Flags: ZN]
	sbc $FF0843.l,X		; FF 43 08 FF ; Subtract with carry (long,X) $FF0843.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $1C.b		; 02 1C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF4422.l,X		; FF 22 44 FF ; Subtract with carry (long,X) $FF4422.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $22C1E3.l,X		; FF E3 C1 22 ; Subtract with carry (long,X) $22C1E3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $19		; 80 19 ; Branch always to $80, $19 [Flow: branch]
	cmp ($E3.b,X)		; C1 E3 ; Compare accumulator ($E3.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc $4ECE00.l,X		; FF 00 CE 4E ; Subtract with carry (long,X) $4ECE00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $3D.b		; A5 3D ; Load $3D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $77.b,X		; D5 77 ; Compare accumulator $77.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	nop		; EA ; No operation
	ror $5DD5.w		; 6E D5 5D ; Rotate right $5DD5.w [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $31.b		; 00 31 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $44		; 42 44 ; Reserved instruction
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($22.b),Y		; 11 22 ; OR accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvp $FF,$4B		; 44 4B FF ; Move block positive $FF,$4B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $F00FE0.l,X		; 1F E0 0F F0 ; Logical OR long $F00FE0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $C7FCE3.l,X		; FF E3 FC C7 ; Subtract with carry (long,X) $C7FCE3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sta $EDBFF7.l,X		; 9F F7 BF ED ; Store accumulator (long,X) $EDBFF7.l,X [Reads: Accumulator, X Index]
	and $3F43EB.l,X		; 3F EB 43 3F ; AND accumulator with memory (long,X) $3F43EB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $83.b,S		; E3 83 ; Subtract stack-relative $83.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0F0707.l		; 0F 07 07 0F ; OR accumulator with memory (long) $0F0707.l [Writes: Accumulator] [Flags: ZN]
	sbc ($37.b)		; F2 37 ; Subtract with carry (indirect) ($37.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $FF480E.l,X		; FF 0E 48 FF ; Subtract with carry (long,X) $FF480E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$3E.b]		; 27 3E ; AND accumulator with memory (long) [$3E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $170027.l,X		; FF 27 00 17 ; Subtract with carry (long,X) $170027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy #$60.b		; A0 60 ; Load #$60.b into Y register [Writes: Y Index] [Flags: ZN]
	.db $90, $70		; 90 70 ; Branch if carry clear to $90, $70 [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	and $3FC8.w,Y		; 39 C8 3F ; AND accumulator with memory $3FC8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx $E41F.w		; EC 1F E4 ; Compare $E41F.w with X register [Reads: X Index] [Flags: ZNC]
	ora $F20FF6.l,X		; 1F F6 0F F2 ; Logical OR long $F20FF6.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $070F1F.l		; 0F 1F 0F 07 ; OR accumulator with memory (long) $070F1F.l [Writes: Accumulator] [Flags: ZN]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $70, $FF		; 70 FF ; Branch if overflow set to $70, $FF [Flow: branch]
	eor $B8.b,S		; 43 B8 ; Exclusive OR accumulator with stack relative $B8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $3FD803.l,X		; 7F 03 D8 3F ; Add long $3FD803.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp.w [$433F]		; DC 3F 43 ; Jump long indirect [$433F] [Flow: jump]
	cpx $231F.w		; EC 1F 23 ; Compare $231F.w with X register [Reads: X Index] [Flags: ZNC]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $BE49.w,X		; 3C 49 BE ; Test bits $BE49.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $BF02.w,X		; 3D 02 BF ; AND accumulator with memory $BF02.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $2600.w,X		; 3C 00 26 ; Test bits $2600.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $010103.l,X		; FF 03 01 01 ; Subtract with carry (long,X) $010103.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($FE.b)		; 12 FE ; OR accumulator with memory (indirect) ($FE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsr ($66A5.w,X)		; FC A5 66 ; Jump to subroutine indirect indexed ($66A5.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	bit $98E7.w,X		; 3C E7 98 ; Test bits $98E7.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sbc $A4DB80.l,X		; FF 80 DB A4 ; Subtract with carry (long,X) $A4DB80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $BC.b,S		; C3 BC ; Compare accumulator (stack relative) $BC.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	lda $7887C0.l,X		; BF C0 87 78 ; Load long $7887C0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	asl $FF7C.w		; 0E 7C FF ; Arithmetic shift left $FF7C.w [Flags: ZNC]
	ror $03FF.w,X		; 7E FF 03 ; Rotate right $03FF.w,X [Reads: X Index] [Flags: ZNC]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	.db $80, $78		; 80 78 ; Branch always to $80, $78 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta [$7F.b]		; 87 7F ; Store accumulator (long) [$7F.b] [Reads: Accumulator, Direct Page]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jsl $7C0200.l		; 22 00 02 7C ; Jump to subroutine long $7C0200.l [Writes: Stack Pointer] [Flow: call]
	adc $002207.l,X		; 7F 07 22 00 ; Add long $002207.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($0C.b)		; 12 0C ; OR accumulator with memory (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $311F18.l		; 0F 18 1F 31 ; OR accumulator with memory (long) $311F18.l [Writes: Accumulator] [Flags: ZN]
	rol $FEE1.w,X		; 3E E1 FE ; Rotate left $FEE1.w,X [Reads: X Index] [Flags: ZNC]
	cmp $FC.b,S		; C3 FC ; Compare accumulator (stack relative) $FC.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $F0CFE0.l,X		; 1F E0 CF F0 ; Logical OR long $F0CFE0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $E0		; F0 E0 ; Branch if equal to $F0, $E0 [Flow: branch]
	cpy #$24.b		; C0 24 ; Compare #$24.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $4B.b		; 00 4B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $800100.l,X		; FF 00 01 80 ; Subtract with carry (long,X) $800100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $030983.l,X		; 7F 83 09 03 ; Add long $030983.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $01.b,S		; 43 01 ; Exclusive OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF0243.l,X		; FF 43 02 FF ; Subtract with carry (long,X) $FF0243.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $04.b,S		; 43 04 ; Exclusive OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF0802.l,X		; FF 02 08 FF ; Subtract with carry (long,X) $FF0802.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $00FF.w		; 4E FF 00 ; Logical shift right $00FF.w [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $4E.b		; 00 4E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $002800.l,X		; FF 00 28 00 ; Subtract with carry (long,X) $002800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $0F.b		; 02 0F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0B84C0.l,X		; FF C0 84 0B ; Subtract with carry (long,X) $0B84C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc ($7E.b)		; 72 7E ; Add with carry (indirect) ($7E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	bit $3C.b		; 24 3C ; Test bits $3C.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	mvp $82,$7C		; 44 7C 82 ; Move block positive $82,$7C [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	inc $0022.w,X		; FE 22 00 ; Increment memory $0022.w,X [Reads: X Index] [Flags: ZN]
	.db $10, $80		; 10 80 ; Branch if plus to $10, $80 [Flow: branch]
	cmp ($C3.b,X)		; C1 C3 ; Compare accumulator ($C3.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sta $01.b,S		; 83 01 ; Store accumulator (stack relative) $01.b,S [Reads: Accumulator, Stack Pointer]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$FB.b]		; 07 FB ; OR accumulator with memory (long) [$FB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $ED1FF7.l		; 0F F7 1F ED ; OR accumulator with memory (long) $ED1FF7.l [Writes: Accumulator] [Flags: ZN]
	ora $1F43EB.l,X		; 1F EB 43 1F ; Logical OR long $1F43EB.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $03.b,S		; E3 03 ; Subtract stack-relative $03.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $17.b,S		; 03 17 ; OR accumulator with stack relative $17.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $27132F.l		; 22 2F 13 27 ; Jump to subroutine long $27132F.l [Writes: Stack Pointer] [Flow: call]
	ror $7F79.w,X		; 7E 79 7F ; Rotate right $7F79.w,X [Reads: X Index] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lda $E11EB0.l,X		; BF B0 1E E1 ; Load long $E11EB0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $3D03.w,X		; FD 03 3D ; Subtract with carry $3D03.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ror $E5.b		; 66 E5 ; Rotate right $E5.b [Reads: Direct Page] [Flags: ZNC]
	eor $8080CC.l		; 4F CC 80 80 ; Exclusive OR accumulator with memory (long) $8080CC.l [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsl $180100.l		; 22 00 01 18 ; Jump to subroutine long $180100.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $43		; 30 43 ; Branch if minus to $30, $43 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	adc $FFE043.l,X		; 7F 43 E0 FF ; Add long $FFE043.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$F0.b		; 09 F0 ; Logical OR #$F0.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $9FBFB9.l,X		; FF B9 BF 9F ; Subtract with carry (long,X) $9FBFB9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $804ECE.l,X		; 1F CE 4E 80 ; Logical OR long $804ECE.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($78.b),Y		; 31 78 ; AND accumulator with memory ($78.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvp $70,$FF		; 44 FF 70 ; Move block positive $70,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $B0.b		; 45 B0 ; Exclusive OR $B0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FFD043.l,X		; FF 43 D0 FF ; Subtract with carry (long,X) $FFD043.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $402280.l		; 22 80 22 40 ; Jump to subroutine long $402280.l [Writes: Stack Pointer] [Flow: call]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: ZN]
	jsr $07FB.w		; 20 FB 07 ; Jump to subroutine at $07FB.w [Writes: Stack Pointer] [Flow: call]
	sbc $FD07.w,Y		; F9 07 FD ; Subtract with carry $FD07.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $43.b,S		; 03 43 ; OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $4301.w,X		; FE 01 43 ; Increment memory $4301.w,X [Reads: X Index] [Flags: ZN]
	sbc $C00400.l,X		; FF 00 04 C0 ; Subtract with carry (long,X) $C00400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$E0.b		; C0 E0 ; Compare #$E0.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	jsl $F603F8.l		; 22 F8 03 F6 ; Jump to subroutine long $F603F8.l [Writes: Stack Pointer] [Flow: call]
	ora $430FF7.l		; 0F F7 0F 43 ; OR accumulator with memory (long) $430FF7.l [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora [$43.b]		; 07 43 ; OR accumulator with memory (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $4303.w,X		; FD 03 43 ; Subtract with carry $4303.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $2301.w,X		; FE 01 23 ; Increment memory $2301.w,X [Reads: X Index] [Flags: ZN]
	cpy #$03.b		; C0 03 ; Compare #$03.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpx #$F8.b		; E0 F8 ; Compare #$F8.b with X register [Reads: X Index] [Flags: ZNC]
	jsr ($4BFC.w,X)		; FC FC 4B ; Jump to subroutine indirect indexed ($4BFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	lda $033E.w,X		; BD 3E 03 ; Load $033E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $02831E.l,X		; 9F 1E 83 02 ; Store accumulator (long,X) $02831E.l,X [Reads: Accumulator, X Index]
	and $40.b		; 25 40 ; Logical AND $40.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $60.b		; 04 60 ; Test and set bits $60.b [Reads: Accumulator] [Flags: Z]
	jmp ($FF7C.w,X)		; 7C 7C FF ; Jump indirect indexed to ($FF7C.w,X) [Reads: X Index] [Flow: jump]
	ror $FF44.w,X		; 7E 44 FF ; Rotate right $FF44.w,X [Reads: X Index] [Flags: ZNC]
	adc $FF3F07.l,X		; 7F 07 3F FF ; Add long $FF3F07.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FF3FFF.l,X		; 1F FF 3F FF ; Logical OR long $FF3FFF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $27FF.w,X		; 7E FF 27 ; Rotate right $27FF.w,X [Reads: X Index] [Flags: ZNC]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	sed		; F8 ; Set decimal flag [Flags: D]
	tsb $E7FC.w		; 0C FC E7 ; Test and set bits $E7FC.w [Reads: Accumulator] [Flags: Z]
	sbc $0F1F10.l,X		; FF 10 1F 0F ; Subtract with carry (long,X) $0F1F10.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $060723.l		; 0F 23 07 06 ; OR accumulator with memory (long) $060723.l [Writes: Accumulator] [Flags: ZN]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora ($18.b),Y		; 11 18 ; OR accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $C73F30.l,X		; 1F 30 3F C7 ; Logical OR long $C73F30.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $C3FF07.l,X		; FF 07 FF C3 ; Subtract with carry (long,X) $C3FF07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0CF788.l,X		; FF 88 F7 0C ; Subtract with carry (long,X) $0CF788.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($1F.b,S),Y		; F3 1F ; Subtract with carry (stack relative indirect indexed) ($1F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: ZNC]
	cpy #$25.b		; C0 25 ; Compare #$25.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$78.b]		; 67 78 ; Add with carry (long) [$78.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	eor $27.b,S		; 43 27 ; Exclusive OR accumulator with stack relative $27.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	ora ($67.b,X)		; 01 67 ; Logical OR ($67.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	eor $E7.b,S		; 43 E7 ; Exclusive OR accumulator with stack relative $E7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$CF.b]		; 07 CF ; OR accumulator with memory (long) [$CF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $DF		; F0 DF ; Branch if equal to $F0, $DF [Flow: branch]
	cpx #$80.b		; E0 80 ; Compare #$80.b with X register [Reads: X Index] [Flags: ZNC]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $80, $23		; 80 23 ; Branch always to $80, $23 [Flow: branch]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $F8C7F0.l		; 8F F0 C7 F8 ; Store accumulator (long) $F8C7F0.l [Reads: Accumulator]
	sbc [$F8.b]		; E7 F8 ; Subtract with carry (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc [$78.b]		; 67 78 ; Add with carry (long) [$78.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $E0DF70.l		; 6F 70 DF E0 ; Add with carry (long) $E0DF70.l [Writes: Accumulator] [Flags: ZVNC]
	lda $01FEC0.l,X		; BF C0 FE 01 ; Load long $01FEC0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $811400.l		; 22 00 14 81 ; Jump to subroutine long $811400.l [Writes: Stack Pointer] [Flow: call]
	sta $07.b,S		; 83 07 ; Store accumulator (stack relative) $07.b,S [Reads: Accumulator, Stack Pointer]
	ora $81FF1F.l		; 0F 1F FF 81 ; OR accumulator with memory (long) $81FF1F.l [Writes: Accumulator] [Flags: ZN]
	sbc $18FF00.l,X		; FF 00 FF 18 ; Subtract with carry (long,X) $18FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FF42.l,X		; FF 42 FF 00 ; Subtract with carry (long,X) $00FF42.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $42FF81.l,X		; FF 81 FF 42 ; Subtract with carry (long,X) $42FF81.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $002608.l		; EF 08 26 00 ; Subtract with carry (long) $002608.l [Writes: Accumulator] [Flags: ZVNC]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $0027FF.l		; 2F FF 27 00 ; AND accumulator with memory (long) $0027FF.l [Writes: Accumulator] [Flags: ZN]
	lsr $00FF.w		; 4E FF 00 ; Logical shift right $00FF.w [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$2F.b]		; 07 2F ; OR accumulator with memory (long) [$2F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $4D		; 30 4D ; Branch if minus to $30, $4D [Flow: branch]
	dec $F010.w		; CE 10 F0 ; Decrement $F010.w [Flags: ZN]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FF1005.l,X		; FF 05 10 FF ; Subtract with carry (long,X) $FF1005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$30.b		; C0 30 ; Compare #$30.b with Y register [Reads: Y Index] [Flags: ZNC]
	ora $002303.l		; 0F 03 23 00 ; OR accumulator with memory (long) $002303.l [Writes: Accumulator] [Flags: ZN]
	cpx #$47.b		; E0 47 ; Compare #$47.b with X register [Reads: X Index] [Flags: ZNC]
	cpy #$0F.b		; C0 0F ; Compare #$0F.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $80, $4F		; 80 4F ; Branch always to $80, $4F [Flow: branch]
	.db $D0, $5F		; D0 5F ; Branch if not equal to $D0, $5F [Flow: branch]
	cpy #$5F.b		; C0 5F ; Compare #$5F.b with Y register [Reads: Y Index] [Flags: ZNC]
	and ($BF.b,X)		; 21 BF ; Logical AND ($BF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $80, $BF		; 80 BF ; Branch always to $80, $BF [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	adc $307F00.l,X		; 7F 00 7F 30 ; Add long $307F00.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $20		; 30 20 ; Branch if minus to $30, $20 [Flow: branch]
	jsr $4040.w		; 20 40 40 ; Jump to subroutine at $4040.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	pea $F10C.w		; F4 0C F1 ; Push absolute address $F10C.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ora ($E4.b),Y		; 11 E4 ; OR accumulator with memory ($E4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and [$C8.b]		; 27 C8 ; AND accumulator with memory (long) [$C8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $889F15.l		; 4F 15 9F 88 ; Exclusive OR accumulator with memory (long) $889F15.l [Writes: Accumulator] [Flags: ZN]
	sta $083F20.l,X		; 9F 20 3F 08 ; Store accumulator (long,X) $083F20.l,X [Reads: Accumulator, X Index]
	and $98CEE3.l,X		; 3F E3 CE 98 ; AND accumulator with memory (long,X) $98CEE3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $30, $60		; 30 60 ; Branch if minus to $30, $60 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FFFEFF.l,X		; FF FF FE FF ; Subtract with carry (long,X) $FFFEFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($F8FE.w,X)		; FC FE F8 ; Jump to subroutine indirect indexed ($F8FE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($F9F0.w,X)		; FC F0 F9 ; Jump to subroutine indirect indexed ($F9F0.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $E7.b,S		; E3 E7 ; Subtract stack-relative $E7.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sta $FFFFDF.l		; 8F DF FF FF ; Store accumulator (long) $FFFFDF.l [Reads: Accumulator]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00701C.l		; 0F 1C 70 00 ; OR accumulator with memory (long) $00701C.l [Writes: Accumulator] [Flags: ZN]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $4A.b,S		; 83 4A ; Store accumulator (stack relative) $4A.b,S [Reads: Accumulator, Stack Pointer]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $F9		; F0 F9 ; Branch if equal to $F0, $F9 [Flow: branch]
	cmp $E7.b,S		; C3 E7 ; Compare accumulator (stack relative) $E7.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	ora $00229F.l		; 0F 9F 22 00 ; OR accumulator with memory (long) $00229F.l [Writes: Accumulator] [Flags: ZN]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	ora $0F.b,S		; 03 0F ; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	bit $2DF0.w,X		; 3C F0 2D ; Test bits $2DF0.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sbc $E38001.l,X		; FF 01 80 E3 ; Subtract with carry (long,X) $E38001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	cpx #$2C.b		; E0 2C ; Compare #$2C.b with X register [Reads: X Index] [Flags: ZNC]
	adc $52FF50.l,X		; 7F 50 FF 52 ; Add long $52FF50.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $DE8C.w,X		; DE 8C DE ; Decrement memory $DE8C.w,X [Reads: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $718E.w		; 8E 8E 71 ; Store X register to $718E.w [Reads: X Index]
	sbc $80FC04.l,X		; FF 04 FC 80 ; Subtract with carry (long,X) $80FC04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $732121.l,X		; FF 21 21 73 ; Subtract with carry (long,X) $732121.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $830071.l,X		; FF 71 00 83 ; Subtract with carry (long,X) $830071.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	and ($FF.b,S),Y		; 33 FF ; AND accumulator (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lsr $41FF.w,X		; 5E FF 41 ; Logical shift right $41FF.w,X [Reads: X Index] [Flags: ZNC]
	sbc $1EFF23.l,X		; FF 23 FF 1E ; Subtract with carry (long,X) $1EFF23.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $40FF00.l,X		; FF 00 FF 40 ; Subtract with carry (long,X) $40FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $40FF60.l,X		; FF 60 FF 40 ; Subtract with carry (long,X) $40FF60.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($3E.b,X)		; 21 3E ; Logical AND ($3E.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	trb $0023.w		; 1C 23 00 ; Test and reset bits $0023.w [Reads: Accumulator] [Flags: Z]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $00,$FF		; 44 FF 00 ; Move block positive $00,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $86FF03.l,X		; FF 03 FF 86 ; Subtract with carry (long,X) $86FF03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FDCD.w,X		; FE CD FD ; Increment memory $FDCD.w,X [Reads: X Index] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	trb $01.b		; 14 01 ; Test and reset bits $01.b [Reads: Accumulator] [Flags: Z]
	cop $84.b		; 02 84 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sbc $1FF030.l		; EF 30 F0 1F ; Subtract with carry (long) $1FF030.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $60FF80.l,X		; FF 80 FF 60 ; Subtract with carry (long,X) $60FF80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C0FF18.l,X		; FF 18 FF C0 ; Subtract with carry (long,X) $C0FF18.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $30FFF0.l,X		; FF F0 FF 30 ; Subtract with carry (long,X) $30FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $120022.l		; 0F 22 00 12 ; OR accumulator with memory (long) $120022.l [Writes: Accumulator] [Flags: ZN]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $39FF7F.l,X		; FF 7F FF 39 ; Subtract with carry (long,X) $39FF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C0FF80.l,X		; FF 80 FF C0 ; Subtract with carry (long,X) $C0FF80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $B37F61.l,X		; FF 61 7F B3 ; Subtract with carry (long,X) $B37F61.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $24DEDE.l,X		; BF DE DE 24 ; Load long $24DEDE.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	and ($61.b,X)		; 21 61 ; Logical AND ($61.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc ($32.b,X)		; E1 32 ; Subtract with carry ($32.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($1C.b,S),Y		; F3 1C ; Subtract with carry (stack relative indirect indexed) ($1C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $B1.b		; 84 B1 ; Store Y register to $B1.b [Reads: Y Index]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($FF.b,X)		; 41 FF ; Exclusive OR accumulator with memory ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc ($FF.b,X)		; 61 FF ; Add with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($FF.b,S),Y		; 73 FF ; Add with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $250C.w,X		; 1E 0C 25 ; Arithmetic shift left $250C.w,X [Reads: X Index] [Flags: ZNC]
	brk $93.b		; 00 93 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $97.b		; 00 97 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	ora $203F08.l,X		; 1F 08 3F 20 ; Logical OR long $203F08.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $159F88.l,X		; 3F 88 9F 15 ; AND accumulator with memory (long,X) $159F88.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $E44FC8.l,X		; 9F C8 4F E4 ; Store accumulator (long,X) $E44FC8.l,X [Reads: Accumulator, X Index]
	and [$F1.b]		; 27 F1 ; AND accumulator with memory (long) [$F1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($F4.b),Y		; 11 F4 ; OR accumulator with memory ($F4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsb $C0C0.w		; 0C C0 C0 ; Test and set bits $C0C0.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $30, $98		; 30 98 ; Branch if minus to $30, $98 [Flow: branch]
	dec $0FE3.w		; CE E3 0F ; Decrement $0FE3.w [Flags: ZN]
	cmp ($27.b)		; D2 27 ; Compare accumulator (indirect) ($27.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	ora [$F7.b],Y		; 17 F7 ; OR accumulator with memory (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta $F6.b,S		; 83 F6 ; Store accumulator (stack relative) $F6.b,S [Reads: Accumulator, Stack Pointer]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $081027.l,X		; FF 27 10 08 ; Subtract with carry (long,X) $081027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$23.b]		; 07 23 ; OR accumulator with memory (long) [$23.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $06FF.w		; 0C FF 06 ; Test and set bits $06FF.w [Reads: Accumulator] [Flags: Z]
	sbc $FF4603.l,X		; FF 03 46 FF ; Subtract with carry (long,X) $FF4603.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $00.b		; E4 00 ; Compare $00.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($25.b,X)		; 01 25 ; Logical OR ($25.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $60FF.w		; 20 FF 60 ; Jump to subroutine at $60FF.w [Writes: Stack Pointer] [Flow: call]
	sbc $80FFC0.l,X		; FF C0 FF 80 ; Subtract with carry (long,X) $80FFC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $01,$FF		; 44 FF 01 ; Move block positive $01,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $03.b,S		; 43 03 ; Exclusive OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $264000.l,X		; FF 00 40 26 ; Subtract with carry (long,X) $264000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $50, $7F		; 50 7F ; Branch if overflow clear to $50, $7F [Flow: branch]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sbc $02FF82.l,X		; FF 82 FF 02 ; Subtract with carry (long,X) $02FF82.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $19FF04.l,X		; FF 04 FF 19 ; Subtract with carry (long,X) $19FF04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $80FF03.l,X		; FF 03 FF 80 ; Subtract with carry (long,X) $80FF03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $20		; 10 20 ; Branch if plus to $10, $20 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $07.b,S		; 43 07 ; Exclusive OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF0F43.l,X		; FF 43 0F FF ; Subtract with carry (long,X) $FF0F43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $1F.b		; 02 1F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF247F.l,X		; FF 7F 24 FF ; Subtract with carry (long,X) $FF247F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $19FF03.l		; 0F 03 FF 19 ; OR accumulator with memory (long) $19FF03.l [Writes: Accumulator] [Flags: ZN]
	sbc $02FF04.l,X		; FF 04 FF 02 ; Subtract with carry (long,X) $02FF04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $40FF82.l,X		; FF 82 FF 40 ; Subtract with carry (long,X) $40FF82.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $50FFA0.l,X		; FF A0 FF 50 ; Subtract with carry (long,X) $50FFA0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $040023.l,X		; 7F 23 00 04 ; Add long $040023.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsr $8010.w		; 20 10 80 ; Jump to subroutine at $8010.w [Writes: Stack Pointer] [Flow: call]
	sta [$46.b]		; 87 46 ; Store accumulator (long) [$46.b] [Reads: Accumulator, Direct Page]
	sbc $3C00C3.l,X		; FF C3 00 3C ; Subtract with carry (long,X) $3C00C3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $FF.b		; 46 FF ; Logical shift right $FF.b [Reads: Direct Page] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $1CFF00.l,X		; FF 00 FF 1C ; Subtract with carry (long,X) $1CFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $4EFF26.l,X		; FF 26 FF 4E ; Subtract with carry (long,X) $4EFF26.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $24FF7E.l		; EF 7E FF 24 ; Subtract with carry (long) $24FF7E.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF9F1C.l,X		; FF 1C 9F FF ; Subtract with carry (long,X) $FF9F1C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $D9.b,S		; E3 D9 ; Subtract stack-relative $D9.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	lda ($81.b),Y		; B1 81 ; Load accumulator ($81.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $00.b,S		; C3 00 ; Compare accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	mvp $30,$FF		; 44 FF 30 ; Move block positive $30,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $431800.l,X		; FF 00 18 43 ; Subtract with carry (long,X) $431800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FD0600.l,X		; FF 00 06 FD ; Subtract with carry (long,X) $FD0600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFCFCF.l,X		; FF CF CF FF ; Subtract with carry (long,X) $FFCFCF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF2DE7.l,X		; FF E7 2D FF ; Subtract with carry (long,X) $FF2DE7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $F8.b,S		; 03 F8 ; OR accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $25FFC0.l,X		; FF C0 FF 25 ; Subtract with carry (long,X) $25FFC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$3F.b]		; 07 3F ; OR accumulator with memory (long) [$3F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $48.b,S		; 83 48 ; Store accumulator (stack relative) $48.b,S [Reads: Accumulator, Stack Pointer]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $E0FFF0.l,X		; FF F0 FF E0 ; Subtract with carry (long,X) $E0FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $C0,$FF		; 44 FF C0 ; Move block positive $C0,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora #$80.b		; 09 80 ; Logical OR #$80.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $070100.l,X		; FF 00 01 07 ; Subtract with carry (long,X) $070100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $3F3F1F.l		; 0F 1F 3F 3F ; OR accumulator with memory (long) $3F3F1F.l [Writes: Accumulator] [Flags: ZN]
	adc $45FF23.l,X		; 7F 23 FF 45 ; Add long $45FF23.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $45FF.w,X		; FE FF 45 ; Increment memory $45FF.w,X [Reads: X Index] [Flags: ZN]
	jsr ($01FF.w,X)		; FC FF 01 ; Jump to subroutine indirect indexed ($01FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $032201.l		; 22 01 22 03 ; Jump to subroutine long $032201.l [Writes: Stack Pointer] [Flow: call]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9C.b		; 00 9C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($9C.b,X)		; 41 9C ; Exclusive OR accumulator with memory ($9C.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $80.b,S		; 63 80 ; Add with carry (stack relative) $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	eor $1C.b,S		; 43 1C ; Exclusive OR accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $22.b,S		; E3 22 ; Subtract stack-relative $22.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc $E3E301.l,X		; FF 01 E3 E3 ; Subtract with carry (long,X) $E3E301.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $0400FF.l		; 22 FF 00 04 ; Jump to subroutine long $0400FF.l [Writes: Stack Pointer] [Flow: call]
	sty $81.b		; 84 81 ; Store Y register to $81.b [Reads: Y Index]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $C04380.l,X		; FF 80 43 C0 ; Subtract with carry (long,X) $C04380.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $270200.l,X		; FF 00 02 27 ; Subtract with carry (long,X) $270200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $38FF00.l,X		; FF 00 FF 38 ; Subtract with carry (long,X) $38FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$4C.b]		; C7 4C ; Compare accumulator (long) [$4C.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda ($7C.b,S),Y		; B3 7C ; Load accumulator (stack relative indirect indexed) ($7C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $38.b,S		; 83 38 ; Store accumulator (stack relative) $38.b,S [Reads: Accumulator, Stack Pointer]
	cmp [$00.b]		; C7 00 ; Compare accumulator (long) [$00.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc $FF2800.l,X		; FF 00 28 FF ; Subtract with carry (long,X) $FF2800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$3A.b		; E0 3A ; Compare #$3A.b with X register [Reads: X Index] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $1400.w		; 0C 00 14 ; Test and set bits $1400.w [Reads: Accumulator] [Flags: Z]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $1410.w,X		; 3C 10 14 ; Test bits $1410.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $67.b		; 00 67 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sbc $78C800.l,X		; FF 00 C8 78 ; Subtract with carry (long,X) $78C800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $77.b,X		; 95 77 ; Store accumulator to $77.b,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	ror $5ED2.w		; 6E D2 5E ; Rotate right $5ED2.w [Flags: ZNC]
	lda $3D.b		; A5 3D ; Load $3D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $27.b		; A5 27 ; Load $27.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($21.b),Y		; 11 21 ; OR accumulator with memory ($21.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $42, $44		; 42 44 ; Reserved instruction
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lda $302FC0.l,X		; BF C0 2F 30 ; Load long $302FC0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sty $E020.w		; 8C 20 E0 ; Store Y register to $E020.w [Reads: Y Index]
	tsb $01FC.w		; 0C FC 01 ; Test and set bits $01FC.w [Reads: Accumulator] [Flags: Z]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$70.b		; C0 70 ; Compare #$70.b with Y register [Reads: Y Index] [Flags: ZNC]
	ora $002203.l,X		; 1F 03 22 00 ; Logical OR long $002203.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$E4.b]		; 07 E4 ; OR accumulator with memory (long) [$E4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$E0.b]		; 07 E0 ; OR accumulator with memory (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$C8.b]		; 07 C8 ; OR accumulator with memory (long) [$C8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $832FE8.l		; 2F E8 2F 83 ; AND accumulator with memory (long) $832FE8.l [Writes: Accumulator] [Flags: ZN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$BF.b		; A0 BF ; Load #$BF.b into Y register [Writes: Y Index] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $30, $20		; 30 20 ; Branch if minus to $30, $20 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sbc $8503.w,X		; FD 03 85 ; Subtract with carry $8503.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor $045FD2.l		; 4F D2 5F 04 ; Exclusive OR accumulator with memory (long) $045FD2.l [Writes: Accumulator] [Flags: ZN]
	sta $F0BFA0.l,X		; 9F A0 BF F0 ; Store accumulator (long,X) $F0BFA0.l,X [Reads: Accumulator, X Index]
	sta $40.b,S		; 83 40 ; Store accumulator (stack relative) $40.b,S [Reads: Accumulator, Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $4060.w		; 20 60 40 ; Jump to subroutine at $4060.w [Writes: Stack Pointer] [Flow: call]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit #$66.b		; 89 66 ; Test bits #$66.b with accumulator [Reads: Accumulator] [Flags: Z]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($00.b,S),Y		; 73 00 ; Add with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	sbc $FCFC03.l,X		; FF 03 FC FC ; Subtract with carry (long,X) $FCFC03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $C3		; 80 C3 ; Branch always to $80, $C3 [Flow: branch]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $07FF27.l,X		; 7F 27 FF 07 ; Add long $07FF27.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$E7.b]		; E7 E7 ; Subtract with carry (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $DB.b,S		; C3 DB ; Compare accumulator (stack relative) $DB.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda $FFFF.w,X		; BD FF FF ; Load $FFFF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $E73C18.l,X		; 1F 18 3C E7 ; Logical OR long $E73C18.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $54.b		; 00 54 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $02B7A0.l,X		; FF A0 B7 02 ; Subtract with carry (long,X) $02B7A0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: ZN]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $D9.b		; 26 D9 ; Rotate left $D9.b [Reads: Direct Page] [Flags: ZNC]
	sbc $04FB18.l,X		; FF 18 FB 04 ; Subtract with carry (long,X) $04FB18.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($5D08.w,X)		; FC 08 5D ; Jump to subroutine indirect indexed ($5D08.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $D9FF.w,X		; FD FF D9 ; Subtract with carry $D9FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $40.b,S		; 03 40 ; OR accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $83FF61.l,X		; FF 61 FF 83 ; Subtract with carry (long,X) $83FF61.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $13FF.w		; 20 FF 13 ; Jump to subroutine at $13FF.w [Writes: Stack Pointer] [Flow: call]
	sbc $FF430E.l,X		; FF 0E 43 FF ; Subtract with carry (long,X) $FF430E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($1F.b,X)		; 21 1F ; Logical AND ($1F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $0000.w		; 0C 00 00 ; Test and set bits $0000.w [Reads: Accumulator] [Flags: Z]
	ora ($46.b,X)		; 01 46 ; Logical OR ($46.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $C68700.l,X		; FF 00 87 C6 ; Subtract with carry (long,X) $C68700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $4FBF00.l,X		; FF 00 BF 4F ; Subtract with carry (long,X) $4FBF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $4FF0B0.l		; CF B0 F0 4F ; Compare accumulator (long) $4FF0B0.l [Reads: Accumulator] [Flags: ZNC]
	sbc $CEFFB0.l,X		; FF B0 FF CE ; Subtract with carry (long,X) $CEFFB0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $80FFF8.l,X		; FF F8 FF 80 ; Subtract with carry (long,X) $80FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sta $E8.b,S		; 83 E8 ; Store accumulator (stack relative) $E8.b,S [Reads: Accumulator, Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($84.b,X)		; 01 84 ; Logical OR ($84.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $3B0200.l		; EF 00 02 3B ; Subtract with carry (long) $3B0200.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $F58811.l,X		; FF 11 88 F5 ; Subtract with carry (long,X) $F58811.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	stz $CC9E.w,X		; 9E 9E CC ; Store zero to $CC9E.w,X [Reads: X Index]
	cmp $E141.w		; CD 41 E1 ; Compare $E141.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	adc ($F3.b,X)		; 61 F3 ; Add with carry ($F3.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc ($FF.b,S),Y		; 73 FF ; Add with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FF1FFF.l,X		; 3F FF 1F FF ; AND accumulator with memory (long,X) $FF1FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $3361FF.l		; 0F FF 61 33 ; OR accumulator with memory (long) $3361FF.l [Writes: Accumulator] [Flags: ZN]
	rol $0C1E.w,X		; 3E 1E 0C ; Rotate left $0C1E.w,X [Reads: X Index] [Flags: ZNC]
	jsl $A88C00.l		; 22 00 8C A8 ; Jump to subroutine long $A88C00.l [Writes: Stack Pointer] [Flow: call]
	ora $43.b,S		; 03 43 ; OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $B98600.l,X		; FF 00 86 B9 ; Subtract with carry (long,X) $B98600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $97.b,S		; 03 97 ; OR accumulator with stack relative $97.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	asl $A0.b		; 06 A0 ; Arithmetic shift left $A0.b [Reads: Direct Page] [Flags: ZNC]
	lda $D29F04.l,X		; BF 04 9F D2 ; Load long $D29F04.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $598688.l,X		; 5F 88 86 59 ; Exclusive OR accumulator with memory (long,X) $598688.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $4003.w,X		; FD 03 40 ; Subtract with carry $4003.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $6483.w		; 20 83 64 ; Jump to subroutine at $6483.w [Writes: Stack Pointer] [Flow: call]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	cmp ($2F.b)		; D2 2F ; Compare accumulator (indirect) ($2F.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sta ($F3.b,S),Y		; 93 F3 ; Store accumulator (stack relative indirect indexed) ($F3.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sty $FC.b		; 84 FC ; Store Y register to $FC.b [Reads: Y Index]
	sta $72.b,S		; 83 72 ; Store accumulator (stack relative) $72.b,S [Reads: Accumulator, Stack Pointer]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsr ($27FF.w,X)		; FC FF 27 ; Jump to subroutine indirect indexed ($27FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	ora $24.b,S		; 03 24 ; OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0CFF10.l,X		; FF 10 FF 0C ; Subtract with carry (long,X) $0CFF10.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $83.b		; 84 83 ; Store Y register to $83.b [Reads: Y Index]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsl $0027FF.l		; 22 FF 27 00 ; Jump to subroutine long $0027FF.l [Writes: Stack Pointer] [Flow: call]
	eor $11.b,S		; 43 11 ; Exclusive OR accumulator with stack relative $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF2106.l,X		; FF 06 21 FF ; Subtract with carry (long,X) $FF2106.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $44.b,S		; 03 44 ; OR accumulator with stack relative $44.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $002707.l,X		; FF 07 27 00 ; Subtract with carry (long,X) $002707.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $187F08.l,X		; 3F 08 7F 18 ; AND accumulator with memory (long,X) $187F08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E0FF20.l,X		; FF 20 FF E0 ; Subtract with carry (long,X) $E0FF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $A18400.l,X		; FF 00 84 A1 ; Subtract with carry (long,X) $A18400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $0F,$FF		; 44 FF 0F ; Move block positive $0F,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cop $1F.b		; 02 1F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF263F.l,X		; FF 3F 26 FF ; Subtract with carry (long,X) $FF263F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $83.b		; 84 83 ; Store Y register to $83.b [Reads: Y Index]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: ZNC]
	jsr $18FF.w		; 20 FF 18 ; Jump to subroutine at $18FF.w [Writes: Stack Pointer] [Flow: call]
	sbc $087F08.l,X		; FF 08 7F 08 ; Subtract with carry (long,X) $087F08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $030023.l,X		; 3F 23 00 03 ; AND accumulator with memory (long,X) $030023.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	eor $87.b		; 45 87 ; Exclusive OR $87.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $46C300.l,X		; FF 00 C3 46 ; Subtract with carry (long,X) $46C300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $78013C.l,X		; FF 3C 01 78 ; Subtract with carry (long,X) $78013C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1C0027.l,X		; FF 27 00 1C ; Subtract with carry (long,X) $1C0027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($FF.b,X)		; 61 FF ; Add with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: ZNC]
	tsb $3EFF.w		; 0C FF 3E ; Test and set bits $3EFF.w [Reads: Accumulator] [Flags: Z]
	sbc $46FF22.l,X		; FF 22 FF 46 ; Subtract with carry (long,X) $46FF22.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $46FF3C.l,X		; FF 3C FF 46 ; Subtract with carry (long,X) $46FF3C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F33F9E.l,X		; FF 9E 3F F3 ; Subtract with carry (long,X) $F33F9E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($DD.b,X)		; C1 DD ; Compare accumulator ($DD.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	lda $81C3.w,Y		; B9 C3 81 ; Load $81C3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $FF		; 70 FF ; Branch if overflow set to $70, $FF [Flow: branch]
	.db $30, $44		; 30 44 ; Branch if minus to $30, $44 [Flow: branch]
	sbc $380000.l,X		; FF 00 00 38 ; Subtract with carry (long,X) $380000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $FFCF8F.l,X		; FF 8F CF FF ; Subtract with carry (long,X) $FFCF8F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF2BC7.l,X		; FF C7 2B FF ; Subtract with carry (long,X) $FF2BC7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $B7.b		; 84 B7 ; Store Y register to $B7.b [Reads: Y Index]
	tsb $24.b		; 04 24 ; Test and set bits $24.b [Reads: Accumulator] [Flags: Z]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1F.b,S		; 03 1F ; OR accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sty $77.b		; 84 77 ; Store Y register to $77.b [Reads: Y Index]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	cpx #$44.b		; E0 44 ; Compare #$44.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $8000C0.l,X		; FF C0 00 80 ; Subtract with carry (long,X) $8000C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $C3.b,S		; 83 C3 ; Store accumulator (stack relative) $C3.b,S [Reads: Accumulator, Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $84.b,S		; 03 84 ; OR accumulator with stack relative $84.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $46.b		; 02 46 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FC45FE.l,X		; FF FE 45 FC ; Subtract with carry (long,X) $FC45FE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFF843.l,X		; FF 43 F8 FF ; Subtract with carry (long,X) $FFF843.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $032201.l		; 22 01 22 03 ; Jump to subroutine long $032201.l [Writes: Stack Pointer] [Flow: call]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $E30044.l,X		; FF 44 00 E3 ; Subtract with carry (long,X) $E30044.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stz $9C00.w		; 9C 00 9C ; Store zero to $9C00.w
	adc $80.b,S		; 63 80 ; Add with carry (stack relative) $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $22E3.w		; 1C E3 22 ; Test and reset bits $22E3.w [Reads: Accumulator] [Flags: Z]
	sbc $E3E301.l,X		; FF 01 E3 E3 ; Subtract with carry (long,X) $E3E301.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $8843FF.l		; 22 FF 43 88 ; Jump to subroutine long $8843FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $FF8406.l,X		; FF 06 84 FF ; Subtract with carry (long,X) $FF8406.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy $FF.b		; C4 FF ; Compare $FF.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
.ACCU 16
.INDEX 16
	rep #$FF		; C2 FF
	cpy #$FF44.w		; C0 44 FF ; Compare #$FF44.w with Y register [Reads: Y Index] [Flags: ZNC]
	cpx #$0028.w		; E0 28 00 ; Compare #$0028.w with X register [Reads: X Index] [Flags: ZNC]
	sta $02B9.w		; 8D B9 02 ; Store accumulator to $02B9.w [Reads: Accumulator]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $02D086.l,X		; FF 86 D0 02 ; Subtract with carry (long,X) $02D086.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $0BBF18.l,X		; 7F 18 BF 0B ; Add long $0BBF18.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $08.b,S		; 43 08 ; Exclusive OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $66A600.l,X		; FF 00 A6 66 ; Subtract with carry (long,X) $66A600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $F0.b,S		; 83 F0 ; Store accumulator (stack relative) $F0.b,S [Reads: Accumulator, Stack Pointer]
	cop $0F.b		; 02 0F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $3D.b		; 84 3D ; Store Y register to $3D.b [Reads: Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $67.b		; E5 67 ; Subtract $67.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta ($1E.b)		; 92 1E ; Store accumulator (indirect) ($1E.b) [Reads: Accumulator, Direct Page]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($42.b,X)		; 21 42 ; Logical AND ($42.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $42, $04		; 42 04 ; Reserved instruction
	clc		; 18 ; Clear carry flag [Flags: C]
	adc ($FF.b,X)		; 61 FF ; Add with carry ($FF.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($1B.b)		; 12 1B ; OR accumulator with memory (indirect) ($1B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	trb $E362.w		; 1C 62 E3 ; Test and reset bits $E362.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $10, $FF		; 10 FF ; Branch if plus to $10, $FF [Flow: branch]
	ora $FF02FF.l		; 0F FF 02 FF ; OR accumulator with memory (long) $FF02FF.l [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$071C.w		; E0 1C 07 ; Compare #$071C.w with X register [Reads: X Index] [Flags: ZNC]
	jsl $011600.l		; 22 00 16 01 ; Jump to subroutine long $011600.l [Writes: Stack Pointer] [Flow: call]
	brk $94.b		; 00 94 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $045FD6.l,X		; 5F D6 5F 04 ; Exclusive OR accumulator with memory (long,X) $045FD6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $88BFA4.l,X		; 9F A4 BF 88 ; Store accumulator (long,X) $88BFA4.l,X [Reads: Accumulator, X Index]
	lda $407F50.l,X		; BF 50 7F 40 ; Load long $407F50.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $227F00.l,X		; 7F 00 7F 22 ; Add long $227F00.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $4060.w		; 20 60 40 ; Jump to subroutine at $4060.w [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	jsl $FA1780.l		; 22 80 17 FA ; Jump to subroutine long $FA1780.l [Writes: Stack Pointer] [Flow: call]
	asl $E8.b		; 06 E8 ; Arithmetic shift left $E8.b [Reads: Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
.ACCU 8
	sep #$23		; E2 23
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	eor $809F10.l		; 4F 10 9F 80 ; Exclusive OR accumulator with memory (long) $809F10.l [Writes: Accumulator] [Flags: ZN]
	sta $423F21.l,X		; 9F 21 3F 42 ; Store accumulator (long,X) $423F21.l,X [Reads: Accumulator, X Index]
	adc $9CC7F1.l,X		; 7F F1 C7 9C ; Add long $9CC7F1.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $60		; 30 60 ; Branch if minus to $30, $60 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpy #$2B80.w		; C0 80 2B ; Compare #$2B80.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FCFC03.l,X		; FF 03 FC FC ; Subtract with carry (long,X) $FCFC03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $C3		; 80 C3 ; Branch always to $80, $C3 [Flow: branch]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $7F03.w,Y		; 19 03 7F ; OR accumulator with memory $7F03.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FFFEFF.l,X		; FF FF FE FF ; Subtract with carry (long,X) $FFFEFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($F8FE.w,X)		; FC FE F8 ; Jump to subroutine indirect indexed ($F8FE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($F9F0.w,X)		; FC F0 F9 ; Jump to subroutine indirect indexed ($F9F0.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $E7.b,S		; E3 E7 ; Subtract stack-relative $E7.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sta $FFFFDF.l		; 8F DF FF FF ; Store accumulator (long) $FFFFDF.l [Reads: Accumulator]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $00701C.l		; 0F 1C 70 00 ; OR accumulator with memory (long) $00701C.l [Writes: Accumulator] [Flags: ZN]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $F7.b		; 05 F7 ; Logical OR $F7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$E3.b],Y		; F7 E3 ; Subtract with carry (long indexed) [$E3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	stz $24FF.w		; 9C FF 24 ; Store zero to $24FF.w
	brk $1D.b		; 00 1D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $2063.w		; 1C 63 20 ; Test and reset bits $2063.w [Reads: Accumulator] [Flags: Z]
	sbc $DD54.w,X		; FD 54 DD ; Subtract with carry $DD54.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	cmp $8080.w,X		; DD 80 80 ; Compare accumulator $8080.w,X [Reads: X Index] [Flags: ZNC]
	sbc $E3.b,S		; E3 E3 ; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	jmp $EF20FF.l		; 5C FF 20 EF ; Jump long to $EF20FF.l [Flow: jump]
	ora ($F3.b,S),Y		; 13 F3 ; OR accumulator (stack relative indirect indexed) ($F3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $7F7722.l		; 0F 22 77 7F ; OR accumulator with memory (long) $7F7722.l [Writes: Accumulator] [Flags: ZN]
	trb $1000.w		; 1C 00 10 ; Test and reset bits $1000.w [Reads: Accumulator] [Flags: Z]
	tsb $FF13.w		; 0C 13 FF ; Test and set bits $FF13.w [Reads: Accumulator] [Flags: Z]
	asl $FF44.w		; 0E 44 FF ; Arithmetic shift left $FF44.w [Flags: ZNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and ($FF.b,X)		; 21 FF ; Logical AND ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($FF.b)		; 12 FF ; OR accumulator with memory (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp $21FF.w		; 4C FF 21 ; Jump to $21FF.w [Flow: jump]
	sbc $00220C.l,X		; FF 0C 22 00 ; Subtract with carry (long,X) $00220C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $40.b		; 04 40 ; Test and set bits $40.b [Reads: Accumulator] [Flags: Z]
	adc ($33.b,X)		; 61 33 ; Add with carry ($33.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl $4801.w,X		; 1E 01 48 ; Arithmetic shift left $4801.w,X [Reads: X Index] [Flags: ZNC]
	sbc $010500.l,X		; FF 00 05 01 ; Subtract with carry (long,X) $010500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $4DFE86.l,X		; FF 86 FE 4D ; Subtract with carry (long,X) $4DFE86.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $0025.w,X		; 7D 25 00 ; Add $0025.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $8201.w		; 0E 01 82 ; Arithmetic shift left $8201.w [Flags: ZNC]
	trb $47FC.w		; 1C FC 47 ; Test and reset bits $47FC.w [Reads: Accumulator] [Flags: Z]
	sbc $4CFF00.l,X		; FF 00 FF 4C ; Subtract with carry (long,X) $4CFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $87FF10.l,X		; FF 10 FF 87 ; Subtract with carry (long,X) $87FF10.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF22E0.l,X		; FF E0 22 FF ; Subtract with carry (long,X) $FF22E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $30, $0F		; 30 0F ; Branch if minus to $30, $0F [Flow: branch]
	jsl $FF2300.l		; 22 00 23 FF ; Jump to subroutine long $FF2300.l [Writes: Stack Pointer] [Flow: call]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $31FF79.l,X		; FF 79 FF 31 ; Subtract with carry (long,X) $31FF79.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $61FF80.l,X		; FF 80 FF 61 ; Subtract with carry (long,X) $61FF80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $25BEB2.l,X		; 7F B2 BE 25 ; Add long $25BEB2.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $41		; 80 41 ; Branch always to $80, $41 [Flow: branch]
	cpy $61CC.w		; CC CC 61 ; Compare $61CC.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc ($32.b,X)		; E1 32 ; Subtract with carry ($32.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($1C.b,S),Y		; F3 1C ; Subtract with carry (stack relative indirect indexed) ($1C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $33FF41.l,X		; FF 41 FF 33 ; Subtract with carry (long,X) $33FF41.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $4FFF1F.l,X		; FF 1F FF 4F ; Subtract with carry (long,X) $4FFF1F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0C1E33.l,X		; FF 33 1E 0C ; Subtract with carry (long,X) $0C1E33.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $30, $13		; 30 13 ; Branch if minus to $30, $13 [Flow: branch]
	sbc $FF440E.l,X		; FF 0E 44 FF ; Subtract with carry (long,X) $FF440E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	jsl $BC8300.l		; 22 00 83 BC ; Jump to subroutine long $BC8300.l [Writes: Stack Pointer] [Flow: call]
	brk $97.b		; 00 97 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	cpx #$4224.w		; E0 24 42 ; Compare #$4224.w with X register [Reads: X Index] [Flags: ZNC]
	adc $803F21.l,X		; 7F 21 3F 80 ; Add long $803F21.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $C89F10.l,X		; 9F 10 9F C8 ; Store accumulator (long,X) $C89F10.l,X [Reads: Accumulator, X Index]
	eor $E823E2.l		; 4F E2 23 E8 ; Exclusive OR accumulator with memory (long) $E823E2.l [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	asl $80.b		; 06 80 ; Arithmetic shift left $80.b [Reads: Direct Page] [Flags: ZNC]
	cpy #$6060.w		; C0 60 60 ; Compare #$6060.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $30, $9C		; 30 9C ; Branch if minus to $30, $9C [Flow: branch]
	cmp [$F1.b]		; C7 F1 ; Compare accumulator (long) [$F1.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	and $F017E2.l		; 2F E2 17 F0 ; AND accumulator with memory (long) $F017E2.l [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta [$FF.b]		; 87 FF ; Store accumulator (long) [$FF.b] [Reads: Accumulator, Direct Page]
	cpy #$E0FF.w		; C0 FF E0 ; Compare #$E0FF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FF22F8.l,X		; FF F8 22 FF ; Subtract with carry (long,X) $FF22F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $17.b		; 02 17 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$25.b]		; 07 25 ; OR accumulator with memory (long) [$25.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $040600.l,X		; FF 00 06 04 ; Subtract with carry (long,X) $040600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $C0FF03.l,X		; FF 03 FF C0 ; Subtract with carry (long,X) $C0FF03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF22FC.l,X		; FF FC 22 FF ; Subtract with carry (long,X) $FF22FC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $09.b,S		; 43 09 ; Exclusive OR accumulator with stack relative $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $461300.l,X		; FF 00 13 46 ; Subtract with carry (long,X) $461300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $074303.l,X		; FF 03 43 07 ; Subtract with carry (long,X) $074303.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0A0027.l,X		; FF 27 00 0A ; Subtract with carry (long,X) $0A0027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr $447F.w		; 20 7F 44 ; Jump to subroutine at $447F.w [Writes: Stack Pointer] [Flow: call]
	sbc $08FF84.l,X		; FF 84 FF 08 ; Subtract with carry (long,X) $08FF84.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $63FF10.l,X		; FF 10 FF 63 ; Subtract with carry (long,X) $63FF10.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $07,$FF		; 44 FF 07 ; Move block positive $07,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	sbc $1FFF0F.l,X		; FF 0F FF 1F ; Subtract with carry (long,X) $1FFF0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF283F.l,X		; FF 3F 28 FF ; Subtract with carry (long,X) $FF283F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $07.b,S		; 43 07 ; Exclusive OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF630B.l,X		; FF 0B 63 FF ; Subtract with carry (long,X) $FF630B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $FF		; 10 FF ; Branch if plus to $10, $FF [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $44FF84.l,X		; FF 84 FF 44 ; Subtract with carry (long,X) $44FF84.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $267F20.l,X		; FF 20 7F 26 ; Subtract with carry (long,X) $267F20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $43		; 80 43 ; Branch always to $80, $43 [Flow: branch]
	cmp $FF.b,S		; C3 FF ; Compare accumulator (stack relative) $FF.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	eor $87.b,S		; 43 87 ; Exclusive OR accumulator with stack relative $87.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF7843.l,X		; FF 43 78 FF ; Subtract with carry (long,X) $FF7843.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $3C.b,S		; 43 3C ; Exclusive OR accumulator with stack relative $3C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $1C0027.l,X		; FF 27 00 1C ; Subtract with carry (long,X) $1C0027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
.ACCU 16
.INDEX 16
	rep #$FF		; C2 FF
	cpy #$08FF.w		; C0 FF 08 ; Compare #$08FF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $66FF1C.l,X		; FF 1C FF 66 ; Subtract with carry (long,X) $66FF1C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7EF724.l,X		; FF 24 F7 7E ; Subtract with carry (long,X) $7EF724.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $3DFF10.l,X		; FF 10 FF 3D ; Subtract with carry (long,X) $3DFF10.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $99E3F7.l,X		; 3F F7 E3 99 ; AND accumulator with memory (long,X) $99E3F7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sta ($C3.b,X)		; 81 C3 ; Store accumulator ($C3.b,X) [Reads: Accumulator, X Index, Direct Page]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $FF4430.l,X		; FF 30 44 FF ; Subtract with carry (long,X) $FF4430.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $43		; 30 43 ; Branch if minus to $30, $43 [Flow: branch]
	sbc $F90600.l,X		; FF 00 06 F9 ; Subtract with carry (long,X) $F90600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFCFE7.l,X		; FF E7 CF FF ; Subtract with carry (long,X) $FFCFE7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF29CF.l,X		; FF CF 29 FF ; Subtract with carry (long,X) $FF29CF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$FC.b]		; 07 FC ; OR accumulator with memory (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $C0FFF0.l,X		; FF F0 FF C0 ; Subtract with carry (long,X) $C0FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $23FF00.l,X		; FF 00 FF 23 ; Subtract with carry (long,X) $23FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0F.b,S		; 03 0F ; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $FFFEFF.l,X		; 3F FF FE FF ; AND accumulator with memory (long,X) $FFFEFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $FF44E0.l,X		; FF E0 44 FF ; Subtract with carry (long,X) $FF44E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$8043.w		; C0 43 80 ; Compare #$8043.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $FF0008.l,X		; FF 08 00 FF ; Subtract with carry (long,X) $FF0008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $7F3F3F.l,X		; 1F 3F 3F 7F ; Logical OR long $7F3F3F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $FEFF44.l,X		; 7F 44 FF FE ; Add long $FEFF44.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FC.b,S		; 43 FC ; Exclusive OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FFF843.l,X		; FF 43 F8 FF ; Subtract with carry (long,X) $FFF843.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $F0.b,S		; 43 F0 ; Exclusive OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $010107.l,X		; FF 07 01 01 ; Subtract with carry (long,X) $010107.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $00440F.l		; 0F 0F 44 00 ; OR accumulator with memory (long) $00440F.l [Writes: Accumulator] [Flags: ZN]
	sbc $02.b,S		; E3 02 ; Subtract stack-relative $02.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	stz $9C00.w		; 9C 00 9C ; Store zero to $9C00.w
	eor $63.b,S		; 43 63 ; Exclusive OR accumulator with stack relative $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $80, $43		; 80 43 ; Branch always to $80, $43 [Flow: branch]
	trb $03E3.w		; 1C E3 03 ; Test and reset bits $03E3.w [Reads: Accumulator] [Flags: Z]
	sbc $E3E3FF.l,X		; FF FF E3 E3 ; Subtract with carry (long,X) $E3E3FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	eor $90.b,S		; 43 90 ; Exclusive OR accumulator with stack relative $90.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $46C800.l,X		; FF 00 C8 46 ; Subtract with carry (long,X) $46C800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E043C0.l,X		; FF C0 43 E0 ; Subtract with carry (long,X) $E043C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0D0028.l,X		; FF 28 00 0D ; Subtract with carry (long,X) $0D0028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $38FF00.l,X		; FF 00 FF 38 ; Subtract with carry (long,X) $38FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$4C.b]		; C7 4C ; Compare accumulator (long) [$4C.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	lda ($7C.b,S),Y		; B3 7C ; Load accumulator (stack relative indirect indexed) ($7C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sta $38.b,S		; 83 38 ; Store accumulator (stack relative) $38.b,S [Reads: Accumulator, Stack Pointer]
	cmp [$00.b]		; C7 00 ; Compare accumulator (long) [$00.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc $FF2800.l,X		; FF 00 28 FF ; Subtract with carry (long,X) $FF2800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $24,$00		; 44 00 24 ; Move block positive $24,$00 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cpx #$1C27.w		; E0 27 1C ; Compare #$1C27.w with X register [Reads: X Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $7700.w		; 1C 00 77 ; Test and reset bits $7700.w [Reads: Accumulator] [Flags: Z]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sbc $4ECE00.l,X		; FF 00 CE 4E ; Subtract with carry (long,X) $4ECE00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $3D.b		; A5 3D ; Load $3D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp $77.b,X		; D5 77 ; Compare accumulator $77.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	nop		; EA ; No operation
	ror $5DD5.w		; 6E D5 5D ; Rotate right $5DD5.w [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $31.b		; 00 31 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $44		; 42 44 ; Reserved instruction
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($22.b),Y		; 11 22 ; OR accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvp $FF,$4B		; 44 4B FF ; Move block positive $FF,$4B [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $F00FE0.l,X		; 1F E0 0F F0 ; Logical OR long $F00FE0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $C7FCE3.l,X		; FF E3 FC C7 ; Subtract with carry (long,X) $C7FCE3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sta $EDBFF7.l,X		; 9F F7 BF ED ; Store accumulator (long,X) $EDBFF7.l,X [Reads: Accumulator, X Index]
	and $3F43EB.l,X		; 3F EB 43 3F ; AND accumulator with memory (long,X) $3F43EB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $03.b,S		; E3 03 ; Subtract stack-relative $03.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $07070F.l		; 22 0F 07 07 ; Jump to subroutine long $07070F.l [Writes: Stack Pointer] [Flow: call]
	ora $F837F2.l		; 0F F2 37 F8 ; OR accumulator with memory (long) $F837F2.l [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $FF480E.l,X		; FF 0E 48 FF ; Subtract with carry (long,X) $FF480E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$3E.b]		; 27 3E ; AND accumulator with memory (long) [$3E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $170027.l,X		; FF 27 00 17 ; Subtract with carry (long,X) $170027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy #$9060.w		; A0 60 90 ; Load #$9060.w into Y register [Writes: Y Index] [Flags: ZN]
	.db $70, $D8		; 70 D8 ; Branch if overflow set to $70, $D8 [Flow: branch]
	and $3FC8.w,Y		; 39 C8 3F ; AND accumulator with memory $3FC8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx $E41F.w		; EC 1F E4 ; Compare $E41F.w with X register [Reads: X Index] [Flags: ZNC]
	ora $F20FF6.l,X		; 1F F6 0F F2 ; Logical OR long $F20FF6.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $070F1F.l		; 0F 1F 0F 07 ; OR accumulator with memory (long) $070F1F.l [Writes: Accumulator] [Flags: ZN]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $70, $FF		; 70 FF ; Branch if overflow set to $70, $FF [Flow: branch]
	eor $B8.b,S		; 43 B8 ; Exclusive OR accumulator with stack relative $B8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $3FD803.l,X		; 7F 03 D8 3F ; Add long $3FD803.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp.w [$433F]		; DC 3F 43 ; Jump long indirect [$433F] [Flow: jump]
	cpx $231F.w		; EC 1F 23 ; Compare $231F.w with X register [Reads: X Index] [Flags: ZNC]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	cpy #$00FF.w		; C0 FF 00 ; Compare #$00FF.w with Y register [Reads: Y Index] [Flags: ZNC]
	lda $44FE7C.l,X		; BF 7C FE 44 ; Load long $44FE7C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $43E6.w,X		; 7D E6 43 ; Add $43E6.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $017D.w,X		; FE 7D 01 ; Increment memory $017D.w,X [Reads: X Index] [Flags: ZN]
	sta $277E.w,X		; 9D 7E 27 ; Store accumulator to $277E.w,X [Reads: Accumulator, X Index]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004600.l,X		; FF 00 46 00 ; Subtract with carry (long,X) $004600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $27FF24.l,X		; FF 24 FF 27 ; Subtract with carry (long,X) $27FF24.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $430E.w		; 8D 0E 43 ; Store accumulator to $430E.w [Reads: Accumulator]
	sta ($7E.b,X)		; 81 7E ; Store accumulator ($7E.b,X) [Reads: Accumulator, X Index, Direct Page]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $80, $43		; 80 43 ; Branch always to $80, $43 [Flow: branch]
	cmp $BC.b,S		; C3 BC ; Compare accumulator (stack relative) $BC.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	tsb $BD.b		; 04 BD ; Test and set bits $BD.b [Reads: Accumulator] [Flags: Z]
.ACCU 16
.INDEX 16
	rep #$FF		; C2 FF
	jmp ($2770.w,X)		; 7C 70 27 ; Jump indirect indexed to ($2770.w,X) [Reads: X Index] [Flow: jump]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: ZN] [SNES: Stack operation: pulls DP register]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$22.b]		; 07 22 ; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FF0004.l,X		; FF 04 00 FF ; Subtract with carry (long,X) $FF0004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $28FF00.l,X		; FF 00 FF 28 ; Subtract with carry (long,X) $28FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $02.b,X		; 76 02 ; Rotate right $02.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	eor $01.b,S		; 43 01 ; Exclusive OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $0307.w,X		; FE 07 03 ; Increment memory $0307.w,X [Reads: X Index] [Flags: ZN]
	jsr ($FC83.w,X)		; FC 83 FC ; Jump to subroutine indirect indexed ($FC83.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cmp [$F8.b]		; C7 F8 ; Compare accumulator (long) [$F8.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	adc [$78.b]		; 67 78 ; Add with carry (long) [$78.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sbc $800100.l,X		; FF 00 01 80 ; Subtract with carry (long,X) $800100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $030983.l,X		; 7F 83 09 03 ; Add long $030983.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $FF01FE.l		; 0F FE 01 FF ; OR accumulator with memory (long) $FF01FE.l [Writes: Accumulator] [Flags: ZN]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FB.b		; 02 FB ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	tsb $F7.b		; 04 F7 ; Test and set bits $F7.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $002708.l,X		; FF 08 27 00 ; Subtract with carry (long,X) $002708.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $00FF.w		; 4E FF 00 ; Logical shift right $00FF.w [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $4E.b		; 00 4E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $002800.l,X		; FF 00 28 00 ; Subtract with carry (long,X) $002800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $F3.b,S		; 83 F3 ; Store accumulator (stack relative) $F3.b,S [Reads: Accumulator, Stack Pointer]
	ora $0A.b,S		; 03 0A ; OR accumulator with stack relative $0A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	tsb $1BF3.w		; 0C F3 1B ; Test and set bits $1BF3.w [Reads: Accumulator] [Flags: Z]
	sbc [$F7.b]		; E7 F7 ; Subtract with carry (long) [$F7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $F21FE6.l		; 0F E6 1F F2 ; OR accumulator with memory (long) $F21FE6.l [Writes: Accumulator] [Flags: ZN]
	ora $0A0028.l		; 0F 28 00 0A ; OR accumulator with memory (long) $0A0028.l [Writes: Accumulator] [Flags: ZN]
	sbc $07FC03.l,X		; FF 03 FC 07 ; Subtract with carry (long,X) $07FC03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora $ED1FF7.l		; 0F F7 1F ED ; OR accumulator with memory (long) $ED1FF7.l [Writes: Accumulator] [Flags: ZN]
	ora $1F43EB.l,X		; 1F EB 43 1F ; Logical OR long $1F43EB.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $03.b,S		; E3 03 ; Subtract stack-relative $03.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $17.b,S		; 03 17 ; OR accumulator with stack relative $17.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $27002F.l		; 22 2F 00 27 ; Jump to subroutine long $27002F.l [Writes: Stack Pointer] [Flow: call]
	eor $E3.b,S		; 43 E3 ; Exclusive OR accumulator with stack relative $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsr ($C343.w,X)		; FC 43 C3 ; Jump to subroutine indirect indexed ($C343.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($8303.w,X)		; FC 03 83 ; Jump to subroutine indirect indexed ($8303.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($F887.w,X)		; FC 87 F8 ; Jump to subroutine indirect indexed ($F887.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor $8F.b,S		; 43 8F ; Exclusive OR accumulator with stack relative $8F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $27		; F0 27 ; Branch if equal to $F0, $27 [Flow: branch]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	adc $FFE043.l,X		; 7F 43 E0 FF ; Add long $FFE043.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$FFF0.w		; 09 F0 FF ; Logical OR #$FFF0.w with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $9FBF.w,Y		; B9 BF 9F ; Load $9FBF.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $804ECE.l,X		; 1F CE 4E 80 ; Logical OR long $804ECE.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($78.b),Y		; 31 78 ; AND accumulator with memory ($78.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	mvp $70,$FF		; 44 FF 70 ; Move block positive $70,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	eor $B0.b		; 45 B0 ; Exclusive OR $B0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FFD043.l,X		; FF 43 D0 FF ; Subtract with carry (long,X) $FFD043.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsl $402280.l		; 22 80 22 40 ; Jump to subroutine long $402280.l [Writes: Stack Pointer] [Flow: call]
	ora #$2020.w		; 09 20 20 ; Logical OR #$2020.w with accumulator [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora [$F9.b]		; 07 F9 ; OR accumulator with memory (long) [$F9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$FD.b]		; 07 FD ; OR accumulator with memory (long) [$FD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $43.b,S		; 03 43 ; OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $4301.w,X		; FE 01 43 ; Increment memory $4301.w,X [Reads: X Index] [Flags: ZN]
	sbc $C00400.l,X		; FF 00 04 C0 ; Subtract with carry (long,X) $C00400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpy #$F0E0.w		; C0 E0 F0 ; Compare #$F0E0.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora $F6.b,S		; 03 F6 ; OR accumulator with stack relative $F6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $430FF7.l		; 0F F7 0F 43 ; OR accumulator with memory (long) $430FF7.l [Writes: Accumulator] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora [$43.b]		; 07 43 ; OR accumulator with memory (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $4303.w,X		; FD 03 43 ; Subtract with carry $4303.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $2301.w,X		; FE 01 23 ; Increment memory $2301.w,X [Reads: X Index] [Flags: ZN]
	cpy #$E003.w		; C0 03 E0 ; Compare #$E003.w with Y register [Reads: Y Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($43FC.w,X)		; FC FC 43 ; Jump to subroutine indirect indexed ($43FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sta $007E.w,X		; 9D 7E 00 ; Store accumulator to $007E.w,X [Reads: Accumulator, X Index]
	sbc $7E44.w,X		; FD 44 7E ; Subtract with carry $7E44.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $45.b		; E5 45 ; Subtract $45.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $287E.w,X		; FD 7E 28 ; Subtract with carry $287E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF4400.l,X		; FF 00 44 FF ; Subtract with carry (long,X) $FF4400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $0047.w		; 0C 47 00 ; Test and set bits $0047.w [Reads: Accumulator] [Flags: Z]
	sbc $030027.l,X		; FF 27 00 03 ; Subtract with carry (long,X) $030027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sta $80.b		; 85 80 ; Store accumulator to $80.b [Reads: Accumulator]
	cop $23.b		; 02 23 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1F1E0D.l		; 0F 0D 1E 1F ; OR accumulator with memory (long) $1F1E0D.l [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $FCFE.w,X		; 3C FE FC ; Test bits $FCFE.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	cpx #$E1E1.w		; E0 E1 E1 ; Compare #$E1E1.w with X register [Reads: X Index] [Flags: ZNC]
	sbc ($F1.b),Y		; F1 F1 ; Subtract with carry ($F1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $63.b		; 84 63 ; Store Y register to $63.b [Reads: Y Index]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0E1EE0.l,X		; 1F E0 1E 0E ; Logical OR long $0E1EE0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $27.b		; 45 27 ; Exclusive OR $27.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	ora ($67.b,X)		; 01 67 ; Logical OR ($67.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	eor $E7.b,S		; 43 E7 ; Exclusive OR accumulator with stack relative $E7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	eor $C7.b,S		; 43 C7 ; Exclusive OR accumulator with stack relative $C7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsl $8000C0.l		; 22 C0 00 80 ; Jump to subroutine long $8000C0.l [Writes: Stack Pointer] [Flow: call]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora #$F887.w		; 09 87 F8 ; Logical OR #$F887.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $E01FF0.l		; 0F F0 1F E0 ; OR accumulator with memory (long) $E01FF0.l [Writes: Accumulator] [Flags: ZN]
	and $FF43C0.l,X		; 3F C0 43 FF ; AND accumulator with memory (long,X) $FF43C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $2201.w,X		; FE 01 22 ; Increment memory $2201.w,X [Reads: X Index] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$1F.b]		; 07 1F ; OR accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $FF81FF.l,X		; FF FF 81 FF ; Subtract with carry (long,X) $FF81FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $28.b,S		; 83 28 ; Store accumulator (stack relative) $28.b,S [Reads: Accumulator, Stack Pointer]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $FF		; 42 FF ; Reserved instruction
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($FF.b,X)		; 81 FF ; Store accumulator ($FF.b,X) [Reads: Accumulator, X Index, Direct Page]
	.db $42, $EF		; 42 EF ; Reserved instruction
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $0027FF.l		; 2F FF 27 00 ; AND accumulator with memory (long) $0027FF.l [Writes: Accumulator] [Flags: ZN]
	lsr $00FF.w		; 4E FF 00 ; Logical shift right $00FF.w [Flags: ZNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $C0.b,S		; 03 C0 ; OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy #$9F8F.w		; C0 8F 9F ; Compare #$9F8F.w with Y register [Reads: Y Index] [Flags: ZNC]
	eor $1F.b,S		; 43 1F ; Exclusive OR accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	lda $431C00.l,X		; BF 00 1C 43 ; Load long $431C00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $BE0318.l,X		; BF 18 03 BE ; Load long $BE0318.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx $263F.w,Y		; BE 3F 26 ; Load X register $263F.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	adc $BF181E.l,X		; 7F 1E 18 BF ; Add long $BF181E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $C0409F.l		; 0F 9F 40 C0 ; OR accumulator with memory (long) $C0409F.l [Writes: Accumulator] [Flags: ZN]
	and $FF06FF.l,X		; 3F FF 06 FF ; AND accumulator with memory (long,X) $FF06FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $A639D9.l		; 4F D9 39 A6 ; Exclusive OR accumulator with memory (long) $A639D9.l [Writes: Accumulator] [Flags: ZN]
	sbc $7F7FC0.l,X		; FF C0 7F 7F ; Subtract with carry (long,X) $7F7FC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $200000.l,X		; 3F 00 00 20 ; AND accumulator with memory (long,X) $200000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sta $44971F.l		; 8F 1F 97 44 ; Store accumulator (long) $44971F.l [Reads: Accumulator]
	and $9E059F.l,X		; 3F 9F 05 9E ; AND accumulator with memory (long,X) $9E059F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $003F9C.l,X		; 3F 9C 3F 00 ; AND accumulator with memory (long,X) $003F9C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $0E7F25.l,X		; 3F 25 7F 0E ; AND accumulator with memory (long,X) $0E7F25.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $801E88.l,X		; 3F 88 1E 80 ; AND accumulator with memory (long,X) $801E88.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	lda $7FA07F.l,X		; BF 7F A0 7F ; Load long $7FA07F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ldy $AF7E.w,X		; BC 7E AF ; Load Y register $AF7E.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	and $7F.b,S		; 23 7F ; AND accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $3F.b		; 04 3F ; Test and set bits $3F.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF431F.l,X		; 1F 1F 43 FF ; Logical OR long $FF431F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $04C708.l		; EF 08 C7 04 ; Subtract with carry (long) $04C708.l [Writes: Accumulator] [Flags: ZVNC]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	.db $10, $B7		; 10 B7 ; Branch if plus to $10, $B7 [Flow: branch]
	.db $30, $43		; 30 43 ; Branch if minus to $30, $43 [Flow: branch]
	lda [$02.b]		; A7 02 ; Load accumulator (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	sbc [$DB.b]		; E7 DB ; Subtract with carry (long) [$DB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	lda $227C.w,X		; BD 7C 22 ; Load $227C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ror $AF09.w,X		; 7E 09 AF ; Rotate right $AF09.w,X [Reads: X Index] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $58DF18.l,X		; BF 18 DF 58 ; Load long $58DF18.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $10FF30.l,X		; FF 30 FF 10 ; Subtract with carry (long,X) $10FF30.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $BD0B.w,X		; 7E 0B BD ; Rotate right $BD0B.w,X [Reads: X Index] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFF00.l,X		; FF 00 FF FF ; Subtract with carry (long,X) $FFFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $C743FF.l		; EF FF 43 C7 ; Subtract with carry (long) $C743FF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $EF0016.l		; EF 16 00 EF ; Subtract with carry (long) $EF0016.l [Writes: Accumulator] [Flags: ZVNC]
	mvp $00,$C7		; 44 C7 00 ; Move block positive $00,$C7 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	jmp ($FE7C.w,X)		; 7C 7C FE ; Jump indirect indexed to ($FE7C.w,X) [Reads: X Index] [Flow: jump]
	inc $5FDC.w,X		; FE DC 5F ; Increment memory $5FDC.w,X [Reads: X Index] [Flags: ZN]
	cmp $F05F.w,X		; DD 5F F0 ; Compare accumulator $F05F.w,X [Reads: X Index] [Flags: ZNC]
	ror $70C0.w,X		; 7E C0 70 ; Rotate right $70C0.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $7E		; F0 7E ; Branch if equal to $F0, $7E [Flow: branch]
	cmp $5F44.w,X		; DD 44 5F ; Compare accumulator $5F44.w,X [Reads: X Index] [Flags: ZNC]
	jmp.w [$2301]		; DC 01 23 ; Jump long indirect [$2301] [Flow: jump]
	and $063F22.l		; 2F 22 3F 06 ; AND accumulator with memory (long) $063F22.l [Writes: Accumulator] [Flags: ZN]
	and $832023.l		; 2F 23 20 83 ; AND accumulator with memory (long) $832023.l [Writes: Accumulator] [Flags: ZN]
	ora ($8F.b,X)		; 01 8F ; Logical OR ($8F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($49.b,X)		; 01 49 ; Logical OR ($49.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $61.b,S		; E3 61 ; Subtract stack-relative $61.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	ora $9F.b,S		; 03 9F ; OR accumulator with stack relative $9F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $247E7E.l,X		; 7F 7E 7E 24 ; Add long $247E7E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $0002.w,X		; 1E 02 00 ; Arithmetic shift left $0002.w,X [Reads: X Index] [Flags: ZNC]
	sbc $3E4300.l,X		; FF 00 43 3E ; Subtract with carry (long,X) $3E4300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $440100.l,X		; 3F 00 01 44 ; AND accumulator with memory (long,X) $440100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($41.b,X)		; 01 41 ; Logical OR ($41.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: ZNC]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $C0C000.l,X		; FF 00 C0 C0 ; Subtract with carry (long,X) $C0C000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $FE.b,S		; 23 FE ; AND accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $E34500.l,X		; 9F 00 45 E3 ; Store accumulator (long,X) $E34500.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $7CFD0E.l,X		; FF 0E FD 7C ; Subtract with carry (long,X) $7CFD0E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$7E.b]		; 87 7E ; Store accumulator (long) [$7E.b] [Reads: Accumulator, Direct Page]
	sta ($7E.b,X)		; 81 7E ; Store accumulator ($7E.b,X) [Reads: Accumulator, X Index, Direct Page]
	ror $1E22.w,X		; 7E 22 1E ; Rotate right $1E22.w,X [Reads: X Index] [Flags: ZNC]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($0C77.w,X)		; 7C 77 0C ; Jump indirect indexed to ($0C77.w,X) [Reads: X Index] [Flow: jump]
	sty $8C07.w		; 8C 07 8C ; Store Y register to $8C07.w [Reads: Y Index]
	ora $FA0F8E.l		; 0F 8E 0F FA ; OR accumulator with memory (long) $FA0F8E.l [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $800000.l,X		; FF 00 00 80 ; Subtract with carry (long,X) $800000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	pea $0045.w		; F4 45 00 ; Push absolute address $0045.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sbc $F1040A.l,X		; FF 0A 04 F1 ; Subtract with carry (long,X) $F1040A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	lda $0E.b,X		; B5 0E ; Load $0E.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $E05FAE.l,X		; 1F AE 5F E0 ; Logical OR long $E05FAE.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $0022E0.l,X		; FF E0 22 00 ; Subtract with carry (long,X) $0022E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sta $06.b,S		; 83 06 ; Store accumulator (stack relative) $06.b,S [Reads: Accumulator, Stack Pointer]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rol $FB.b		; 26 FB ; Rotate left $FB.b [Reads: Direct Page] [Flags: ZNC]
	ora [$F7.b],Y		; 17 F7 ; OR accumulator with memory (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $F65AEE.l		; 2F EE 5A F6 ; AND accumulator with memory (long) $F65AEE.l [Writes: Accumulator] [Flags: ZN]
	jmp $F957FB.l		; 5C FB 57 F9 ; Jump long to $F957FB.l [Flow: jump]
	eor ($F8.b,S),Y		; 53 F8 ; XOR accumulator (stack relative indirect indexed) ($F8.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor ($C0.b),Y		; 51 C0 ; Exclusive OR accumulator with memory ($C0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $60		; B0 60 ; Branch if carry set to $B0, $60 [Flow: branch]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	mvp $FE,$46		; 44 46 FE ; Move block positive $FE,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	.db $50, $FF		; 50 FF ; Branch if overflow clear to $50, $FF [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sbc $5FE75C.l		; EF 5C E7 5F ; Subtract with carry (long) $5FE75C.l [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $4F		; F0 4F ; Branch if equal to $F0, $4F [Flow: branch]
	sbc $1FFF20.l,X		; FF 20 FF 1F ; Subtract with carry (long,X) $1FFF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $224100.l,X		; FF 00 41 22 ; Subtract with carry (long,X) $224100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	trb $60.b		; 14 60 ; Test and reset bits $60.b [Reads: Accumulator] [Flags: Z]
	.db $70, $BF		; 70 BF ; Branch if overflow set to $70, $BF [Flow: branch]
	cpy #$00FF.w		; C0 FF 00 ; Compare #$00FF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	eor $EE1DF7.l		; 4F F7 1D EE ; Exclusive OR accumulator with memory (long) $EE1DF7.l [Writes: Accumulator] [Flags: ZN]
	and $73DE.w,Y		; 39 DE 73 ; AND accumulator with memory $73DE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $BB67.w,X		; BD 67 BB ; Load $BB67.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $7DA7.w		; 4E A7 7D ; Logical shift right $7DA7.w [Flags: ZNC]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $000083.l,X		; 7F 83 00 00 ; Add long $000083.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $07.b,S		; 83 07 ; Store accumulator (stack relative) $07.b,S [Reads: Accumulator, Stack Pointer]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $0310.w,Y		; BE 10 03 ; Load X register $0310.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	ldy $BE10.w,X		; BC 10 BE ; Load Y register $BE10.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	and $9D7F26.l,X		; [PATTERN: Memory clearing operation] 3F 26 7F 9D ; AND accumulator with memory (long,X) $9D7F26.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $3F44.w,X		; 9E 44 3F ; Store zero to $3F44.w,X [Reads: X Index]
	stz $9405.w		; 9C 05 94 ; Store zero to $9405.w
	and $003E98.l,X		; 3F 98 3E 00 ; AND accumulator with memory (long,X) $003E98.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $037F25.l,X		; 3F 25 7F 03 ; AND accumulator with memory (long,X) $037F25.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	rol $1C88.w,X		; 3E 88 1C ; Rotate left $1C88.w,X [Reads: X Index] [Flags: ZNC]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp $2300.w		; 4C 00 23 ; Jump to $2300.w [Flow: jump]
	adc $005B84.l,X		; 7F 84 5B 00 ; Add long $005B84.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $00,$FF		; 44 FF 00 ; Move block positive $00,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	asl $10.b		; 06 10 ; Arithmetic shift left $10.b [Reads: Direct Page] [Flags: ZNC]
	sbc $46FF24.l,X		; FF 24 FF 46 ; Subtract with carry (long,X) $46FF24.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $4348.w,X		; FD 48 43 ; Subtract with carry $4348.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $8318.w,X		; FD 18 83 ; Subtract with carry $8318.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	and $7E.b,S		; 23 7E ; AND accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $10.b,X		; F5 10 ; Subtract $10.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FD08.w		; ED 08 FD ; Subtract $FD08.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	mvn $6A,$FB		; 54 FB 6A ; Move block negative $6A,$FB [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cmp [$14.b],Y		; D7 14 ; Compare accumulator (long indexed) [$14.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	sbc $FF4308.l		; EF 08 43 FF ; Subtract with carry (long) $FF4308.l [Writes: Accumulator] [Flags: ZVNC]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $8C84.w,X		; 7E 84 8C ; Rotate right $8C84.w,X [Reads: X Index] [Flags: ZNC]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $C7		; 10 C7 ; Branch if plus to $10, $C7 [Flow: branch]
	sbc $457C44.l,X		; FF 44 7C 45 ; Subtract with carry (long,X) $457C44.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp [$EF.b]		; C7 EF ; Compare accumulator (long) [$EF.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $C7.b		; 00 C7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $10,$C7		; 44 C7 10 ; Move block positive $10,$C7 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $227C7C.l,X		; FF 7C 7C 22 ; Subtract with carry (long,X) $227C7C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $DC0B.w,X		; FE 0B DC ; Increment memory $DC0B.w,X [Reads: X Index] [Flags: ZN]
	eor $807FFD.l,X		; 5F FD 7F 80 ; Exclusive OR accumulator with memory (long,X) $807FFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp ($E080.w,X)		; 7C 80 E0 ; Jump indirect indexed to ($E080.w,X) [Reads: X Index] [Flow: jump]
	.db $80, $7C		; 80 7C ; Branch always to $80, $7C [Flow: branch]
	sbc $437F.w,X		; FD 7F 43 ; Subtract with carry $437F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp.w [$0A5F]		; DC 5F 0A ; Jump long indirect [$0A5F] [Flow: jump]
	and [$3F.b]		; 27 3F ; AND accumulator with memory (long) [$3F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc $3F7FFF.l,X		; 7F FF 7F 3F ; Add long $3F7FFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and [$20.b]		; 27 20 ; AND accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $01.b,S		; 83 01 ; Store accumulator (stack relative) $01.b,S [Reads: Accumulator, Stack Pointer]
	lda $83014A.l,X		; BF 4A 01 83 ; Load long $83014A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($BF.b,X)		; 01 BF ; Logical OR ($BF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $037E26.l,X		; 7F 26 7E 03 ; Add long $037E26.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($41.b,X)		; 01 41 ; Logical OR ($41.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sty $E4.b		; 84 E4 ; Store Y register to $E4.b [Reads: Y Index]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0001.w,X		; FE 01 00 ; Increment memory $0001.w,X [Reads: X Index] [Flags: ZN]
	sbc $830044.l,X		; FF 44 00 83 ; Subtract with carry (long,X) $830044.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora #$40C3.w		; 09 C3 40 ; Logical OR #$40C3.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $60E33E.l,X		; FF 3E E3 60 ; Subtract with carry (long,X) $60E33E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($70.b,S),Y		; 93 70 ; Store accumulator (stack relative indirect indexed) ($70.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	sta $227C.w		; 8D 7C 22 ; Store accumulator to $227C.w [Reads: Accumulator]
	ror $3E0C.w,X		; 7E 0C 3E ; Rotate right $3E0C.w,X [Reads: X Index] [Flags: ZNC]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $FF02.w		; 0E 02 FF ; Arithmetic shift left $FF02.w [Flags: ZNC]
	brk $9C.b		; 00 9C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$8C.b],Y		; 17 8C ; OR accumulator with memory (long indexed) [$8C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $430B8A.l		; 0F 8A 0B 43 ; OR accumulator with memory (long) $430B8A.l [Writes: Accumulator] [Flags: ZN]
	bit #$0D09.w		; 89 09 0D ; Test bits #$0D09.w with accumulator [Reads: Accumulator] [Flags: Z]
	inc $FF08.w,X		; FE 08 FF ; Increment memory $FF08.w,X [Reads: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$F4F0.w		; E0 F0 F4 ; Compare #$F4F0.w with X register [Reads: X Index] [Flags: ZNC]
	inc $F6.b,X		; F6 F6 ; Increment memory $F6.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc [$00.b],Y		; F7 00 ; Subtract with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FB4304.l,X		; FF 04 43 FB ; Subtract with carry (long,X) $FB4304.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($0A.b),Y		; F1 0A ; Subtract with carry ($0A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $4E.b,X		; F5 4E ; Subtract $4E.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stx $2A.b		; 86 2A ; Store X register to $2A.b [Reads: X Index]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1F.b		; 06 1F ; Arithmetic shift left $1F.b [Reads: Direct Page] [Flags: ZNC]
	sbc $47FB20.l,X		; FF 20 FB 47 ; Subtract with carry (long,X) $47FB20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$4F.b],Y		; F7 4F ; Subtract with carry (long indexed) [$4F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $3E.b		; 85 3E ; Store accumulator to $3E.b [Reads: Accumulator]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cpy #$78BF.w		; C0 BF 78 ; Compare #$78BF.w with Y register [Reads: Y Index] [Flags: ZNC]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sta $44.b,S		; 83 44 ; Store accumulator (stack relative) $44.b,S [Reads: Accumulator, Stack Pointer]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $E750.w		; EE 50 E7 ; Increment $E750.w [Flags: ZN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sbc ($4C.b,S),Y		; F3 4C ; Subtract with carry (stack relative indirect indexed) ($4C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $5A.b		; 85 5A ; Store accumulator to $5A.b [Reads: Accumulator]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	mvp $41,$46		; 44 46 41 ; Move block positive $41,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	stx $63.b		; 86 63 ; Store X register to $63.b [Reads: X Index]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $3F.b		; E6 3F ; Increment $3F.b [Reads: Direct Page] [Flags: ZN]
	sta $70.b,S		; 83 70 ; Store accumulator (stack relative) $70.b,S [Reads: Accumulator, Stack Pointer]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $FB46.w,X		; BD 46 FB ; Load $FB46.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $7DE7.w,X		; 5E E7 7D ; Logical shift right $7DE7.w,X [Reads: X Index] [Flags: ZNC]
	stz $0073.w,X		; 9E 73 00 ; Store zero to $0073.w,X [Reads: X Index]
	rol $7F.b		; 26 7F ; Rotate left $7F.b [Reads: Direct Page] [Flags: ZNC]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Accumulator, Stack Pointer]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1C00BF.l,X		; 1F BF 00 1C ; Logical OR long $1C00BF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $BF.b,S		; 43 BF ; Exclusive OR accumulator with stack relative $BF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($BE.b,X)		; 01 BE ; Logical OR ($BE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $9C7F26.l,X		; 3F 26 7F 9C ; AND accumulator with memory (long,X) $9C7F26.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1F9F43.l		; 0F 43 9F 1F ; OR accumulator with memory (long) $1F9F43.l [Writes: Accumulator] [Flags: ZN]
	brk $9B.b		; 00 9B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $9F,$1F		; 44 1F 9F ; Move block positive $9F,$1F [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $037F25.l,X		; 3F 25 7F 03 ; AND accumulator with memory (long,X) $037F25.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stz $8C1F.w,X		; 9E 1F 8C ; Store zero to $8C1F.w,X [Reads: X Index]
	ora $004C88.l		; 0F 88 4C 00 ; OR accumulator with memory (long) $004C88.l [Writes: Accumulator] [Flags: ZN]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $847F23.l		; AF 23 7F 84 ; Load long $847F23.l into accumulator [Writes: Accumulator] [Flags: ZN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $180600.l,X		; FF 00 06 18 ; Subtract with carry (long,X) $180600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $60FF30.l,X		; FF 30 FF 60 ; Subtract with carry (long,X) $60FF30.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF4440.l,X		; FF 40 44 FF ; Subtract with carry (long,X) $FF4440.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $02, $E7		; 62 02 E7 ; Push effective relative address $62, $02, $E7 [Writes: Stack Pointer]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	lda $7E23.w,X		; BD 23 7E ; Load $7E23.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$42FF.w		; 09 FF 42 ; Logical OR #$42FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $64FF40.l,X		; FF 40 FF 64 ; Subtract with carry (long,X) $64FF40.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $10FF08.l,X		; FF 08 FF 10 ; Subtract with carry (long,X) $10FF08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $8C87.w,X		; 7E 87 8C ; Rotate right $8C87.w,X [Reads: X Index] [Flags: ZNC]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C7FF44.l		; EF 44 FF C7 ; Subtract with carry (long) $C7FF44.l [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $009E8D.l,X		; FF 8D 9E 00 ; Subtract with carry (long,X) $009E8D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $D0.b		; 06 D0 ; Arithmetic shift left $D0.b [Reads: Direct Page] [Flags: ZNC]
	lsr $5EC0.w,X		; 5E C0 5E ; Logical shift right $5EC0.w,X [Reads: X Index] [Flags: ZNC]
	.db $D0, $5E		; D0 5E ; Branch if not equal to $D0, $5E [Flow: branch]
	cmp $5F44.w,X		; DD 44 5F ; Compare accumulator $5F44.w,X [Reads: X Index] [Flags: ZNC]
	jmp.w [$2301]		; DC 01 23 ; Jump long indirect [$2301] [Flow: jump]
	and $023F22.l		; 2F 22 3F 02 ; AND accumulator with memory (long) $023F22.l [Writes: Accumulator] [Flags: ZN]
	and $432023.l		; 2F 23 20 43 ; AND accumulator with memory (long) $432023.l [Writes: Accumulator] [Flags: ZN]
	sta $01.b,S		; 83 01 ; Store accumulator (stack relative) $01.b,S [Reads: Accumulator, Stack Pointer]
	ora ($FB.b,X)		; 01 FB ; Logical OR ($FB.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $F347.w,Y		; 79 47 F3 ; Add $F347.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($04.b),Y		; 71 04 ; Add with carry ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $7E7E7F.l		; 8F 7F 7E 7E ; Store accumulator (long) $7E7E7F.l [Reads: Accumulator]
	asl $23.b		; 06 23 ; Arithmetic shift left $23.b [Reads: Direct Page] [Flags: ZNC]
	asl $0002.w		; 0E 02 00 ; Arithmetic shift left $0002.w [Flags: ZNC]
	sbc $3E4500.l,X		; FF 00 45 3E ; Subtract with carry (long,X) $3E4500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $212102.l,X		; 3F 02 21 21 ; AND accumulator with memory (long,X) $212102.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$DE0E.w		; C0 0E DE ; Compare #$DE0E.w with Y register [Reads: Y Index] [Flags: ZNC]
	inc $00FE.w,X		; FE FE 00 ; Increment memory $00FE.w,X [Reads: X Index] [Flags: ZN]
	sta $70F300.l		; 8F 00 F3 70 ; Store accumulator (long) $70F300.l [Reads: Accumulator]
	sbc $FD78.w,Y		; F9 78 FD ; Subtract with carry $FD78.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp ($02FD.w,X)		; 7C FD 02 ; Jump indirect indexed to ($02FD.w,X) [Reads: X Index] [Flow: jump]
	sbc $817E44.l,X		; FF 44 7E 81 ; Subtract with carry (long,X) $817E44.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $7E.b,S		; 03 7E ; OR accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl $0206.w		; 0E 06 02 ; Arithmetic shift left $0206.w [Flags: ZNC]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($0877.w,X)		; 7C 77 08 ; Jump indirect indexed to ($0877.w,X) [Reads: X Index] [Flow: jump]
	ldy $9C37.w,X		; BC 37 9C ; Load Y register $9C37.w,X [Reads: X Index] [Writes: Y Index] [Flags: ZN]
	ora [$C4.b],Y		; 17 C4 ; OR accumulator with memory (long indexed) [$C4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $0000FF.l		; 0F FF 00 00 ; OR accumulator with memory (long) $0000FF.l [Writes: Accumulator] [Flags: ZN]
	jsl $C00280.l		; 22 80 02 C0 ; Jump to subroutine long $C00280.l [Writes: Stack Pointer] [Flow: call]
	cpx #$43F0.w		; E0 F0 43 ; Compare #$43F0.w with X register [Reads: X Index] [Flags: ZNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	lda ($0A.b),Y		; B1 0A ; Load accumulator ($0A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	bit #$0128.w		; 89 28 01 ; Test bits #$0128.w with accumulator [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	mvp $40,$40		; 44 40 40 ; Move block positive $40,$40 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $1F.b		; 02 1F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF4320.l,X		; FF 20 43 FF ; Subtract with carry (long,X) $FF4320.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sta $BE.b		; 85 BE ; Store accumulator to $BE.b [Reads: Accumulator]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$7FBF.w		; C0 BF 7F ; Compare #$7FBF.w with Y register [Reads: Y Index] [Flags: ZNC]
	.db $70, $60		; 70 60 ; Branch if overflow set to $70, $60 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor ($83.b,X)		; 41 83 ; Exclusive OR accumulator with memory ($83.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc #$E853.w		; E9 53 E8 ; Subtract #$E853.w from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	eor ($FE.b),Y		; 51 FE ; Exclusive OR accumulator with memory ($FE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	sta [$5A.b]		; 87 5A ; Store accumulator (long) [$5A.b] [Reads: Accumulator, Direct Page]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	mvp $61,$46		; 44 46 61 ; Move block positive $61,$46 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sty $65.b		; 84 65 ; Store Y register to $65.b [Reads: Y Index]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	dec $837F.w		; CE 7F 83 ; Decrement $837F.w [Flags: ZN]
	adc ($01.b)		; 72 01 ; Add with carry (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc [$5D.b],Y		; F7 5D ; Subtract with carry (long indexed) [$5D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $DD7B.w		; EE 7B DD ; Increment $DD7B.w [Flags: ZN]
	adc [$BB.b],Y		; 77 BB ; Add with carry (long indexed) [$BB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ror $2600.w		; 6E 00 26 ; Rotate right $2600.w [Flags: ZNC]
	adc $007FE5.l,X		; 7F E5 7F 00 ; Add long $007FE5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF0E04.l,X		; FF 04 0E FF ; Subtract with carry (long,X) $FF0E04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $3CFF.w,X		; 1E FF 3C ; Arithmetic shift left $3CFF.w,X [Reads: X Index] [Flags: ZNC]
	lsr $FF.b		; 46 FF ; Logical shift right $FF.b [Reads: Direct Page] [Flags: ZNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	asl $3C.b		; 06 3C ; Arithmetic shift left $3C.b [Reads: Direct Page] [Flags: ZNC]
	sbc $00FF1E.l,X		; FF 1E FF 00 ; Subtract with carry (long,X) $00FF1E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $100420.l		; 22 20 04 10 ; Jump to subroutine long $100420.l [Writes: Stack Pointer] [Flow: call]
	.db $10, $1C		; 10 1C ; Branch if plus to $10, $1C [Flow: branch]
	sbc $FF463C.l,X		; FF 3C 46 FF ; Subtract with carry (long,X) $FF463C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $1E,$FF		; 44 FF 1E ; Move block positive $1E,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $10, $22		; 10 22 ; Branch if plus to $10, $22 [Flow: branch]
	jsr $1012.w		; 20 12 10 ; Jump to subroutine at $1012.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	sta ($7E.b,X)		; 81 7E ; Store accumulator ($7E.b,X) [Reads: Accumulator, X Index, Direct Page]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	bit $7E.b		; 24 7E ; Test bits $7E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sta ($8D.b,X)		; 81 8D ; Store accumulator ($8D.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc ($3A.b,S),Y		; F3 3A ; Subtract with carry (stack relative indirect indexed) ($3A.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $B174D5.l,X		; BF D5 74 B1 ; Load long $B174D5.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lsr $FF26.w		; 4E 26 FF ; Logical shift right $FF26.w [Flags: ZNC]
	asl $7E.b		; 06 7E ; Arithmetic shift left $7E.b [Reads: Direct Page] [Flags: ZNC]
	sbc $C33C00.l,X		; FF 00 3C C3 ; Subtract with carry (long,X) $C33C00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	eor #$00FF.w		; 49 FF 00 ; Exclusive OR #$00FF.w with accumulator [Writes: Accumulator] [Flags: ZN]
	ora $C3.b		; 05 C3 ; Logical OR $C3.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $00FF1C.l,X		; FF 1C FF 00 ; Subtract with carry (long,X) $00FF1C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $FF43.w		; 1C 43 FF ; Test and reset bits $FF43.w [Reads: Accumulator] [Flags: Z]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $7E66.w,Y		; 99 66 7E ; Store accumulator to $7E66.w,Y [Reads: Accumulator, Y Index]
	sta ($43.b,X)		; 81 43 ; Store accumulator ($43.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $E70100.l,X		; FF 00 01 E7 ; Subtract with carry (long,X) $E70100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $67.b		; 00 67 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $3CC300.l,X		; FF 00 C3 3C ; Subtract with carry (long,X) $3CC300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $38.b,S		; C3 38 ; Compare accumulator (stack relative) $38.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sbc $FFDB22.l,X		; FF 22 DB FF ; Subtract with carry (long,X) $FFDB22.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $B7.b,X		; 34 B7 ; Test bits $B7.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	sta ($7D.b)		; 92 7D ; Store accumulator (indirect) ($7D.b) [Reads: Accumulator, Direct Page]
	and [$D8.b]		; 27 D8 ; AND accumulator with memory (long) [$D8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	dec $FF63.w,X		; DE 63 FF ; Decrement memory $FF63.w,X [Reads: X Index] [Flags: ZN]
	bit $817E.w,X		; 3C 7E 81 ; Test bits $817E.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and ($26.b,S),Y		; 33 26 ; AND accumulator (stack relative indirect indexed) ($26.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FF3843.l,X		; FF 43 38 FF ; Subtract with carry (long,X) $FF3843.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $1C.b		; 04 1C ; Test and set bits $1C.b [Reads: Accumulator] [Flags: Z]
	sbc $78FF3F.l,X		; FF 3F FF 78 ; Subtract with carry (long,X) $78FF3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $E0,$FF		; 44 FF E0 ; Move block positive $E0,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	ora $C0.b		; 05 C0 ; Logical OR $C0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $081000.l,X		; FF 00 10 08 ; Subtract with carry (long,X) $081000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $22		; 10 22 ; Branch if plus to $10, $22 [Flow: branch]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $18		; 80 18 ; Branch always to $80, $18 [Flow: branch]
	sbc $78FF38.l,X		; FF 38 FF 78 ; Subtract with carry (long,X) $78FF38.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $38FFF8.l,X		; FF F8 FF 38 ; Subtract with carry (long,X) $38FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $06FF0C.l,X		; FF 0C FF 06 ; Subtract with carry (long,X) $06FF0C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0F8307.l,X		; FF 07 83 0F ; Subtract with carry (long,X) $0F8307.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $08		; 30 08 ; Branch if minus to $30, $08 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $E0.b		; 02 E0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $18FF70.l,X		; FF 70 FF 18 ; Subtract with carry (long,X) $18FF70.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0FFF0C.l,X		; FF 0C FF 0F ; Subtract with carry (long,X) $0FFF0C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $3CFF1F.l,X		; FF 1F FF 3C ; Subtract with carry (long,X) $3CFF1F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $23FF30.l,X		; FF 30 FF 23 ; Subtract with carry (long,X) $23FF30.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: ZNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $07.b,S		; 43 07 ; Exclusive OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF0E0E.l,X		; FF 0E 0E FF ; Subtract with carry (long,X) $FF0E0E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $98FF.w		; 0C FF 98 ; Test and set bits $98FF.w [Reads: Accumulator] [Flags: Z]
	sbc $70FFF8.l,X		; FF F8 FF 70 ; Subtract with carry (long,X) $70FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $01FF30.l,X		; FF 30 FF 01 ; Subtract with carry (long,X) $01FF30.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $10.b,S		; 83 10 ; Store accumulator (stack relative) $10.b,S [Reads: Accumulator, Stack Pointer]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FC83.w,X		; FE 83 FC ; Increment memory $FC83.w,X [Reads: X Index] [Flags: ZN]
	sta [$7B.b]		; 87 7B ; Store accumulator (long) [$7B.b] [Reads: Accumulator, Direct Page]
	cpx $7C97.w		; EC 97 7C ; Compare $7C97.w with X register [Reads: X Index] [Flags: ZNC]
	sbc [$1E.b]		; E7 1E ; Subtract with carry (long) [$1E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF27E0.l,X		; 1F E0 27 FF ; Logical OR long $FF27E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$FE81.w		; 09 81 FE ; Logical OR #$FE81.w with accumulator [Writes: Accumulator] [Flags: ZN]
	sta ($7E.b,X)		; 81 7E ; Store accumulator ($7E.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $9C.b,S		; E3 9C ; Subtract stack-relative $9C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	adc $FB1EE3.l,X		; 7F E3 1E FB ; Add long $FB1EE3.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $03.b,S		; 43 03 ; Exclusive OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $0601.w,X		; FD 01 06 ; Subtract with carry $0601.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $61DE3F.l		; 0F 3F DE 61 ; OR accumulator with memory (long) $61DE3F.l [Writes: Accumulator] [Flags: ZN]
	lda $007FC0.l,X		; BF C0 7F 00 ; Load long $007FC0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E3FE01.l,X		; FF 01 FE E3 ; Subtract with carry (long,X) $E3FE01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $E3FE.w,X		; 1D FE E3 ; OR accumulator with memory $E3FE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$F9.b]		; 87 F9 ; Store accumulator (long) [$F9.b] [Reads: Accumulator, Direct Page]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $84FB06.l		; 0F 06 FB 84 ; OR accumulator with memory (long) $84FB06.l [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $7FA1.w,X		; 5E A1 7F ; Logical shift right $7FA1.w,X [Reads: X Index] [Flags: ZNC]
	stz $7EE3.w,X		; 9E E3 7E ; Store zero to $7EE3.w,X [Reads: X Index]
	sta $FE.b,S		; 83 FE ; Store accumulator (stack relative) $FE.b,S [Reads: Accumulator, Stack Pointer]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $DB0010.l,X		; FF 10 00 DB ; Subtract with carry (long,X) $DB0010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sbc [$A5.b]		; E7 A5 ; Subtract with carry (long) [$A5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $3CDB.w,X		; 7E DB 3C ; Rotate right $3CDB.w,X [Reads: X Index] [Flags: ZNC]
	adc [$98.b]		; 67 98 ; Add with carry (long) [$98.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $18C1.w,X		; 3E C1 18 ; Rotate left $18C1.w,X [Reads: X Index] [Flags: ZNC]
	lda $25.b		; A5 25 ; Load $25.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $33CC05.l,X		; FF 05 CC 33 ; Subtract with carry (long,X) $33CC05.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	dec $39.b,X		; D6 39 ; Decrement memory $39.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	jmp $2ED543.l		; 5C 43 D5 2E ; Jump long to $2ED543.l [Flow: jump]
	ora $5CAB.w		; 0D AB 5C ; Logical OR $5CAB.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp [$38.b],Y		; D7 38 ; Compare accumulator (long indexed) [$38.b],Y [Reads: Accumulator, Direct Page, Y Index] [Flags: ZNC]
	dec $7F31.w		; CE 31 7F ; Decrement $7F31.w [Flags: ZN]
	and $BFBF7F.l,X		; 3F 7F BF BF ; AND accumulator with memory (long,X) $BFBF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $837F3F.l,X		; 7F 3F 7F 83 ; Add long $837F3F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($44.b),Y		; F1 44 ; Subtract with carry ($44.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $E110E3.l,X		; FF E3 10 E1 ; Subtract with carry (long,X) $E110E3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $78FFF0.l,X		; FF F0 FF 78 ; Subtract with carry (long,X) $78FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $402010.l,X		; FF 10 20 40 ; Subtract with carry (long,X) $402010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($81.b,X)		; 81 81 ; Store accumulator ($81.b,X) [Reads: Accumulator, X Index, Direct Page]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF46E0.l,X		; FF E0 46 FF ; Subtract with carry (long,X) $FF46E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($00.b,X)		; C1 00 ; Compare accumulator ($00.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cpx #$8B84.w		; E0 84 8B ; Compare #$8B84.w with X register [Reads: X Index] [Flags: ZNC]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	jsr $FE01.w		; 20 01 FE ; Jump to subroutine at $FE01.w [Writes: Stack Pointer] [Flow: call]
	sta ($7E.b,X)		; 81 7E ; Store accumulator ($7E.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc [$18.b]		; E7 18 ; Subtract with carry (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	rol $C9C1.w,X		; 3E C1 C9 ; Rotate left $C9C1.w,X [Reads: X Index] [Flags: ZNC]
	sbc $E377B6.l,X		; FF B6 77 E3 ; Subtract with carry (long,X) $E377B6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $08F7.w		; 1C F7 08 ; Test and reset bits $08F7.w [Reads: Accumulator] [Flags: Z]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $E7E3.w		; 1C E3 E7 ; Test and reset bits $E7E3.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $E33FC0.l		; 0F C0 3F E3 ; OR accumulator with memory (long) $E33FC0.l [Writes: Accumulator] [Flags: ZN]
	sbc $F80738.l,X		; FF 38 07 F8 ; Subtract with carry (long,X) $F80738.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $00, $43		; 62 00 43 ; Push effective relative address $62, $00, $43 [Writes: Stack Pointer]
	sbc $761C00.l,X		; FF 00 1C 76 ; Subtract with carry (long,X) $761C00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit #$00FF.w		; 89 FF 00 ; Test bits #$00FF.w with accumulator [Reads: Accumulator] [Flags: Z]
	sbc $00.b,S		; E3 00 ; Subtract stack-relative $00.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	adc [$FF.b],Y		; 77 FF ; Add with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $F700.w,X		; DD 00 F7 ; Compare accumulator $F700.w,X [Reads: X Index] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: ZN]
	lda $A9F555.l,X		; BF 55 F5 A9 ; Load long $A9F555.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $6F3BC4.l,X		; FF C4 3B 6F ; Subtract with carry (long,X) $6F3BC4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $90, $7F		; 90 7F ; Branch if carry clear to $90, $7F [Flow: branch]
	cmp ($A7.b,X)		; C1 A7 ; Compare accumulator ($A7.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	ror $266B.w,X		; 7E 6B 26 ; Rotate right $266B.w,X [Reads: X Index] [Flags: ZNC]
	sbc $FFE008.l,X		; FF 08 E0 FF ; Subtract with carry (long,X) $FFE008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $3CFF3F.l,X		; FF 3F FF 3C ; Subtract with carry (long,X) $3CFF3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF4438.l,X		; FF 38 44 FF ; Subtract with carry (long,X) $FF4438.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $0F.b,S		; 83 0F ; Store accumulator (stack relative) $0F.b,S [Reads: Accumulator, Stack Pointer]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $22		; 10 22 ; Branch if plus to $10, $22 [Flow: branch]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $18FF.w		; 0C FF 18 ; Test and set bits $18FF.w [Reads: Accumulator] [Flags: Z]
	sbc $78FFF8.l,X		; FF F8 FF 78 ; Subtract with carry (long,X) $78FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $10FF30.l,X		; FF 30 FF 10 ; Subtract with carry (long,X) $10FF30.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sty $A9.b		; 84 A9 ; Store Y register to $A9.b [Reads: Y Index]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $1F43.w		; 20 43 1F ; Jump to subroutine at $1F43.w [Writes: Stack Pointer] [Flow: call]
	sbc $FF0E06.l,X		; FF 06 0E FF ; Subtract with carry (long,X) $FF0E06.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $E0FFF0.l,X		; FF F0 FF E0 ; Subtract with carry (long,X) $E0FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $C0,$FF		; 44 FF C0 ; Move block positive $C0,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	asl $0408.w		; 0E 08 04 ; Arithmetic shift left $0408.w [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $0CFF9C.l,X		; FF 9C FF 0C ; Subtract with carry (long,X) $0CFF9C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF480E.l,X		; FF 0E 48 FF ; Subtract with carry (long,X) $FF480E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $50, $22		; 50 22 ; Branch if overflow clear to $50, $22 [Flow: branch]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $070B00.l		; EF 00 0B 07 ; Subtract with carry (long) $070B00.l [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	cpy $F837.w		; CC 37 F8 ; Compare $F837.w with Y register [Reads: Y Index] [Flags: ZNC]
	cmp $08EF38.l		; CF 38 EF 08 ; Compare accumulator (long) $08EF38.l [Reads: Accumulator] [Flags: ZNC]
	sbc [$1E.b],Y		; F7 1E ; Subtract with carry (long indexed) [$1E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($27.b,X)		; E1 27 ; Subtract with carry ($27.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $010887.l,X		; FF 87 08 01 ; Subtract with carry (long,X) $010887.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $F7.b		; 46 F7 ; Logical shift right $F7.b [Reads: Direct Page] [Flags: ZNC]
	tsb $FF27.w		; 0C 27 FF ; Test and set bits $FF27.w [Reads: Accumulator] [Flags: Z]
	sta [$20.b]		; 87 20 ; Store accumulator (long) [$20.b] [Reads: Accumulator, Direct Page]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta [$FD.b]		; 87 FD ; Store accumulator (long) [$FD.b] [Reads: Accumulator, Direct Page]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	cmp $7C.b,S		; C3 7C ; Compare accumulator (stack relative) $7C.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $38.b		; 85 38 ; Store accumulator to $38.b [Reads: Accumulator]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $0201.w		; 20 01 02 ; Jump to subroutine at $0201.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	.db $80, $29		; 80 29 ; Branch always to $80, $29 [Flow: branch]
	sbc $DB0010.l,X		; FF 10 00 DB ; Subtract with carry (long,X) $DB0010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $66.b		; 24 66 ; Test bits $66.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	lda $D93E.w,X		; BD 3E D9 ; Load $D93E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jmp $7EA3E3.l		; 5C E3 A3 7E ; Jump long to $7EA3E3.l [Flow: jump]
	cmp $633E.w,X		; DD 3E 63 ; Compare accumulator $633E.w,X [Reads: X Index] [Flags: ZNC]
	stz $6618.w		; 9C 18 66 ; Store zero to $6618.w
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $C6.b		; 05 C6 ; Logical OR $C6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $1CEB.w,Y		; 39 EB 1C ; AND accumulator with memory $1CEB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $6E.b,X		; B5 6E ; Load $6E.b,X into accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $DA.b,S		; 43 DA ; Exclusive OR accumulator with stack relative $DA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and [$07.b],Y		; 37 07 ; AND accumulator with memory (long indexed) [$07.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: ZN]
	adc [$F5.b]		; 67 F5 ; Add with carry (long) [$F5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	asl $38C7.w		; 0E C7 38 ; Arithmetic shift left $38C7.w [Flags: ZNC]
	and $7A837F.l,X		; 3F 7F 83 7A ; AND accumulator with memory (long,X) $7A837F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $FFF03F.l,X		; 7F 3F F0 FF ; Add long $FFF03F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	cmp [$46.b]		; C7 46 ; Compare accumulator (long) [$46.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sbc $C30487.l,X		; FF 87 04 C3 ; Subtract with carry (long,X) $C30487.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FFE1.l,X		; FF E1 FF 00 ; Subtract with carry (long,X) $00FFE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $62, $00, $83		; 62 00 83 ; Push effective relative address $62, $00, $83 [Writes: Stack Pointer]
	jmp ($4302.w)		; 6C 02 43 ; Jump indirect to ($4302.w) [Flow: jump]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $C7,$FF		; 44 FF C7 ; Move block positive $C7,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sta $0C.b,S		; 83 0C ; Store accumulator (stack relative) $0C.b,S [Reads: Accumulator, Stack Pointer]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsl $011202.l		; 22 02 12 01 ; Jump to subroutine long $011202.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $7C.b,S		; 83 7C ; Store accumulator (stack relative) $7C.b,S [Reads: Accumulator, Stack Pointer]
	cmp $3C.b,S		; C3 3C ; Compare accumulator (stack relative) $3C.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	dec $29.b,X		; D6 29 ; Decrement memory $29.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	adc $A283.w,X		; 7D 83 A2 ; Add $A283.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $DB56D5.l,X		; FF D5 56 DB ; Subtract with carry (long,X) $DB56D5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $FF28.w		; 2C 28 FF ; Test bits $FF28.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $4A.b		; 84 4A ; Store Y register to $4A.b [Reads: Y Index]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($1C.b,X)		; C1 1C ; Compare accumulator ($1C.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	sbc $FFE700.l,X		; FF 00 E7 FF ; Subtract with carry (long,X) $FFE700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	trb $FF45.w		; 1C 45 FF ; Test and reset bits $FF45.w [Reads: Accumulator] [Flags: Z]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $00, $43		; 62 00 43 ; Push effective relative address $62, $00, $43 [Writes: Stack Pointer]
	sbc $661A00.l,X		; FF 00 1A 66 ; Subtract with carry (long,X) $661A00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $E781.w,Y		; 99 81 E7 ; Store accumulator to $E781.w,Y [Reads: Accumulator, Y Index]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $9900.w,Y		; 99 00 99 ; Store accumulator to $9900.w,Y [Reads: Accumulator, Y Index]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sbc $FDD552.l		; EF 52 D5 FD ; Subtract with carry (long) $FDD552.l [Writes: Accumulator] [Flags: ZVNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	lda $DFDDA3.l		; AF A3 DD DF ; Load long $DFDDA3.l into accumulator [Writes: Accumulator] [Flags: ZN]
	.db $62, $FD, $3E		; 62 FD 3E ; Push effective relative address $62, $FD, $3E [Writes: Stack Pointer]
	ror $DB81.w,X		; 7E 81 DB ; Rotate right $DB81.w,X [Reads: X Index] [Flags: ZNC]
	ror $D6.b		; 66 D6 ; Rotate right $D6.b [Reads: Direct Page] [Flags: ZNC]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $FF.b		; 46 FF ; Logical shift right $FF.b [Reads: Direct Page] [Flags: ZNC]
	cpx #$600A.w		; E0 0A 60 ; Compare #$600A.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $3CFF30.l,X		; FF 30 FF 3C ; Subtract with carry (long,X) $3CFF30.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $00FF1F.l,X		; FF 1F FF 00 ; Subtract with carry (long,X) $00FF1F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $5D.b,S		; 83 5D ; Store accumulator (stack relative) $5D.b,S [Reads: Accumulator, Stack Pointer]
	cop $44.b		; 02 44 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $070503.l,X		; FF 03 05 07 ; Subtract with carry (long,X) $070503.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FCFF1E.l,X		; FF 1E FF FC ; Subtract with carry (long,X) $FCFF1E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $000022.l,X		; FF 22 00 00 ; Subtract with carry (long,X) $000022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	mvp $30,$FF		; 44 FF 30 ; Move block positive $30,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($FF.b,S),Y		; 73 FF ; Add with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$10FF.w		; E0 FF 10 ; Compare #$10FF.w with X register [Reads: X Index] [Flags: ZNC]
	sta $20.b,S		; 83 20 ; Store accumulator (stack relative) $20.b,S [Reads: Accumulator, Stack Pointer]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $0E,$FF		; 44 FF 0E ; Move block positive $0E,$FF [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: ZNC]
	asl $F8FF.w		; 0E FF F8 ; Arithmetic shift left $F8FF.w [Flags: ZNC]
	sbc $30FFF0.l,X		; FF F0 FF 30 ; Subtract with carry (long,X) $30FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $220408.l,X		; FF 08 04 22 ; Subtract with carry (long,X) $220408.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $60		; 10 60 ; Branch if plus to $10, $60 [Flow: branch]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F00F.w,X		; FD 0F F0 ; Subtract with carry $F00F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $7687F7.l		; 0F F7 87 76 ; OR accumulator with memory (long) $7687F7.l [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF27E0.l,X		; 1F E0 27 FF ; Logical OR long $FF27E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $14.b,S		; 83 14 ; Store accumulator (stack relative) $14.b,S [Reads: Accumulator, Stack Pointer]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $19.b		; E6 19 ; Increment $19.b [Reads: Direct Page] [Flags: ZN]
	sbc $441CE3.l,X		; FF E3 1C 44 ; Subtract with carry (long,X) $441CE3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$0C.b],Y		; F7 0C ; Subtract with carry (long indexed) [$0C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$EF1F.w		; 09 1F EF ; Logical OR #$EF1F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	.db $30, $DF		; 30 DF ; Branch if minus to $30, $DF [Flow: branch]
	.db $70, $9F		; 70 9F ; Branch if overflow set to $70, $9F [Flow: branch]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	cpy #$83BF.w		; C0 BF 83 ; Compare #$83BF.w with Y register [Reads: Y Index] [Flags: ZNC]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $FC.b,S		; 83 FC ; Store accumulator (stack relative) $FC.b,S [Reads: Accumulator, Stack Pointer]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $E27D83.l		; 0F 83 7D E2 ; OR accumulator with memory (long) $E27D83.l [Writes: Accumulator] [Flags: ZN]
	sta $E01F.w,X		; 9D 1F E0 ; Store accumulator to $E01F.w,X [Reads: Accumulator, X Index]
	ora $9F70EF.l,X		; 1F EF 70 9F ; Logical OR long $9F70EF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpx #$807F.w		; E0 7F 80 ; Compare #$807F.w with X register [Reads: X Index] [Flags: ZNC]
	sbc $28FE81.l,X		; FF 81 FE 28 ; Subtract with carry (long,X) $28FE81.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $BD0010.l,X		; FF 10 00 BD ; Subtract with carry (long,X) $BD0010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $42, $99		; 42 99 ; Reserved instruction
	ror $E7.b		; 66 E7 ; Rotate right $E7.b [Reads: Direct Page] [Flags: ZNC]
	bit $997E.w,X		; 3C 7E 99 ; Test bits $997E.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	bit $81C3.w,X		; 3C C3 81 ; Test bits $81C3.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	ror $BC43.w,X		; 7E 43 BC ; Rotate right $BC43.w,X [Reads: X Index] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	ror $25.b		; 66 25 ; Rotate right $25.b [Reads: Direct Page] [Flags: ZNC]
	sbc $0DF205.l,X		; FF 05 F2 0D ; Subtract with carry (long,X) $0DF205.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $DC66.w,Y		; 99 66 DC ; Store accumulator to $DC66.w,Y [Reads: Accumulator, Y Index]
	and ($43.b,S),Y		; 33 43 ; AND accumulator (stack relative indirect indexed) ($43.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx $051B.w		; EC 1B 05 ; Compare $051B.w with X register [Reads: X Index] [Flags: ZNC]
	jmp.w [$9933]		; DC 33 99 ; Jump long indirect [$9933] [Flow: jump]
	ror $F3.b		; 66 F3 ; Rotate right $F3.b [Reads: Direct Page] [Flags: ZNC]
	tsb $F887.w		; 0C 87 F8 ; Test and set bits $F887.w [Reads: Accumulator] [Flags: Z]
	cop $E5.b		; 02 E5 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $05FF00.l,X		; 7F 00 FF 05 ; Add long $05FF00.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $EFD700.l,X		; FF 00 D7 EF ; Subtract with carry (long,X) $EFD700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sbc [$43.b],Y		; F7 43 ; Subtract with carry (long indexed) [$43.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FB.b,X		; F5 FB ; Subtract $FB.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $D7F7EB.l		; 0F EB F7 D7 ; OR accumulator with memory (long) $D7F7EB.l [Writes: Accumulator] [Flags: ZN]
	sbc $00DFAF.l		; EF AF DF 00 ; Subtract with carry (long) $00DFAF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $FBFBF7.l		; EF F7 FB FB ; Subtract with carry (long) $FBFBF7.l [Writes: Accumulator] [Flags: ZVNC]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $8300FF.l,X		; DF FF 00 83 ; Compare accumulator (long,X) $8300FF.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0285DF.l		; AF DF 85 02 ; Load long $0285DF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $EFDFDF.l		; EF DF DF EF ; Subtract with carry (long) $EFDFDF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc [$FB.b],Y		; F7 FB ; Subtract with carry (long indexed) [$FB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF2418.l,X		; FF 18 24 FF ; Subtract with carry (long,X) $FF2418.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $42, $43		; 42 43 ; Reserved instruction
	ror $C3.b		; 66 C3 ; Rotate right $C3.b [Reads: Direct Page] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror $FFE7.w,X		; 7E E7 FF ; Rotate right $FFE7.w,X [Reads: X Index] [Flags: ZNC]
	sbc $DBFFE7.l,X		; FF E7 FF DB ; Subtract with carry (long,X) $DBFFE7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $FF22.w,X		; 3C 22 FF ; Test bits $FF22.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cpx #$3C2A.w		; E0 2A 3C ; Compare #$3C2A.w with X register [Reads: X Index] [Flags: ZNC]
	bit $FF18.w,X		; 3C 18 FF ; Test bits $FF18.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	jsr $07FF.w		; 20 FF 07 ; Jump to subroutine at $07FF.w [Writes: Stack Pointer] [Flow: call]
	sbc $17FF5B.l,X		; FF 5B FF 17 ; Subtract with carry (long,X) $17FF5B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($F87F.w,X)		; FC 7F F8 ; Jump to subroutine indirect indexed ($F87F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	lsr $FCC0.w,X		; 5E C0 FC ; Logical shift right $FCC0.w,X [Reads: X Index] [Flags: ZNC]
	.db $80, $CC		; 80 CC ; Branch always to $80, $CC [Flow: branch]
	jsr $5B07.w		; 20 07 5B ; Jump to subroutine at $5B07.w [Writes: Stack Pointer] [Flow: call]
	ora [$7F.b],Y		; 17 7F ; OR accumulator with memory (long indexed) [$7F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $84FFFF.l,X		; 5F FF FF 84 ; Exclusive OR accumulator with memory (long,X) $84FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dec $FF84.w		; CE 84 FF ; Decrement $FF84.w [Flags: ZN]
	cpy #$E2FF.w		; C0 FF E2 ; Compare #$E2FF.w with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $E07EF4.l,X		; FF F4 7E E0 ; Subtract with carry (long,X) $E07EF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jmp ($FEE4.w,X)		; 7C E4 FE ; Jump indirect indexed to ($FEE4.w,X) [Reads: X Index] [Flow: jump]
.ACCU 16
	rep #$E7		; C2 E7
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $0EFF22.l,X		; 7F 22 FF 0E ; Add long $0EFF22.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp [$7C.b]		; C7 7C ; Compare accumulator (long) [$7C.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sta $FE.b,S		; 83 FE ; Store accumulator (stack relative) $FE.b,S [Reads: Accumulator, Stack Pointer]
	sta ($FE.b,X)		; 81 FE ; Store accumulator ($FE.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta $FC.b,S		; 83 FC ; Store accumulator (stack relative) $FC.b,S [Reads: Accumulator, Stack Pointer]
	stx $7B.b		; 86 7B ; Store X register to $7B.b [Reads: X Index]
	sty $F977.w		; 8C 77 F9 ; Store Y register to $F977.w [Reads: Y Index]
	asl $27.b		; 06 27 ; Arithmetic shift left $27.b [Reads: Direct Page] [Flags: ZNC]
	sbc $1F1E05.l,X		; FF 05 1E 1F ; Subtract with carry (long,X) $1F1E05.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	and $C0.b,S		; 23 C0 ; AND accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $E161.w		; 0D 61 E1 ; Logical OR $E161.w with accumulator [Writes: Accumulator] [Flags: ZN]
	adc ($F3.b,S),Y		; 73 F3 ; Add with carry (stack relative indirect indexed) ($F3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	and $CCE0FF.l,X		; 3F FF E0 CC ; AND accumulator with memory (long,X) $CCE0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stz $3F3F.w,X		; 9E 3F 3F ; Store zero to $3F3F.w,X [Reads: X Index]
	asl $000C.w,X		; 1E 0C 00 ; Arithmetic shift left $000C.w,X [Reads: X Index] [Flags: ZNC]
	eor $70.b,S		; 43 70 ; Exclusive OR accumulator with stack relative $70.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $FF9FFF.l,X		; FF FF 9F FF ; Subtract with carry (long,X) $FF9FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $FFFCFF.l,X		; BF FF FC FF ; Load long $FFFCFF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpy $0FCF.w		; CC CF 0F ; Compare $0FCF.w with Y register [Reads: Y Index] [Flags: ZNC]
	ora $002307.l		; 0F 07 23 00 ; OR accumulator with memory (long) $002307.l [Writes: Accumulator] [Flags: ZN]
	ora $30.b		; 05 30 ; Logical OR $30.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $6DFF.w,Y		; 39 FF 6D ; AND accumulator with memory $6DFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc $C72247.l		; EF 47 22 C7 ; Subtract with carry (long) $C72247.l [Writes: Accumulator] [Flags: ZVNC]
	cpx #$CF22.w		; E0 22 CF ; Compare #$CF22.w with X register [Reads: X Index] [Flags: ZNC]
	cmp $7CFFFE.l		; CF FE FF 7C ; Compare accumulator (long) $7CFFFE.l [Reads: Accumulator] [Flags: ZNC]
	adc $003F3C.l,X		; 7F 3C 3F 00 ; Add long $003F3C.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	stx $87.b		; 86 87 ; Store X register to $87.b [Reads: X Index]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: ZNC]
	tsb $FC0F.w		; 0C 0F FC ; Test and set bits $FC0F.w [Reads: Accumulator] [Flags: Z]
	sbc $1FFFFB.l,X		; FF FB FF 1F ; Subtract with carry (long,X) $1FFFFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $30F838.l,X		; FF 38 F8 30 ; Subtract with carry (long,X) $30F838.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $78		; F0 78 ; Branch if equal to $F0, $78 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	cpy #$9F1F.w		; C0 1F 9F ; Compare #$9F1F.w with Y register [Reads: Y Index] [Flags: ZNC]
	and $3F47AF.l		; 2F AF 47 3F ; AND accumulator with memory (long) $3F47AF.l [Writes: Accumulator] [Flags: ZN]
	lda $3F0003.l,X		; BF 03 00 3F ; Load long $3F0003.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $50, $23		; 50 23 ; Branch if overflow clear to $50, $23 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $F80302.l,X		; FF 02 03 F8 ; Subtract with carry (long,X) $F80302.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $DC43.w,Y		; F9 43 DC ; Subtract with carry $DC43.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $0401.w,X		; DD 01 04 ; Compare accumulator $0401.w,X [Reads: X Index] [Flags: ZNC]
	ora $43.b		; 05 43 ; Logical OR $43.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	jmp.w [$07DD]		; DC DD 07 ; Jump long indirect [$07DD] [Flow: jump]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $22.b		; 06 22 ; Arithmetic shift left $22.b [Reads: Direct Page] [Flags: ZNC]
	jsl $2222FA.l		; 22 FA 22 22 ; Jump to subroutine long $2222FA.l [Writes: Stack Pointer] [Flow: call]
	eor [$3F.b]		; 47 3F ; Exclusive OR accumulator with memory (long) [$3F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $BB3B07.l,X		; BF 07 3B BB ; Load long $BB3B07.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $C0409F.l,X		; 1F 9F 40 C0 ; Logical OR long $C0409F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $40.b,S		; 23 40 ; AND accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $44.b,S		; 03 44 ; OR accumulator with stack relative $44.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $FC4900.l,X		; 3F 00 49 FC ; AND accumulator with memory (long,X) $FC4900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $F805.w,X		; FD 05 F8 ; Subtract with carry $F805.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0302.w,Y		; F9 02 03 ; Subtract with carry $0302.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $02.b		; 24 02 ; Test bits $02.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora ($06.b),Y		; 11 06 ; OR accumulator with memory ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($FF00.w,X)		; FC 00 FF ; Jump to subroutine indirect indexed ($FF00.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc $DB7FE7.l,X		; 7F E7 7F DB ; Add long $DB7FE7.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$A5.b]		; 67 A5 ; Add with carry (long) [$A5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	and $7EBD.w,X		; 3D BD 7E ; AND accumulator with memory $7EBD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc $FF7F.w,X		; FE 7F FF ; Increment memory $FF7F.w,X [Reads: X Index] [Flags: ZN]
	jsl $67147F.l		; 22 7F 14 67 ; Jump to subroutine long $67147F.l [Writes: Stack Pointer] [Flow: call]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	and $7F7E.w,X		; 3D 7E 7F ; AND accumulator with memory $7F7E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $FE7FFF.l,X		; 7F FF 7F FE ; Add long $FE7FFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $DA7EBD.l,X		; 7F BD 7E DA ; Add long $DA7EBD.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $5BA5.w,X		; 3D A5 5B ; AND accumulator with memory $5BA5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	adc [$E7.b]		; 67 E7 ; Add with carry (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $7F22FF.l,X		; 7F FF 22 7F ; Add long $7F22FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ror $5B3D.w,X		; 7E 3D 5B ; Rotate right $5B3D.w,X [Reads: X Index] [Flags: ZNC]
	adc [$7F.b]		; 67 7F ; Add with carry (long) [$7F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $FA00FF.l,X		; 7F FF 00 FA ; Add long $FA00FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FE7D.w,X		; FD 7D FE ; Subtract with carry $FE7D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $BE.b,S		; 43 BE ; Exclusive OR accumulator with stack relative $BE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $FE7D13.l,X		; 7F 13 7D FE ; Add long $FE7D13.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $FBF5.w,X		; FD F5 FB ; Subtract with carry $FBF5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $7F7F.w,X		; FE 7F 7F ; Increment memory $7F7F.w,X [Reads: X Index] [Flags: ZN]
	inc $FBFD.w,X		; FE FD FB ; Increment memory $FBFD.w,X [Reads: X Index] [Flags: ZN]
	sbc $BF5F00.l,X		; FF 00 5F BF ; Subtract with carry (long,X) $BF5F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $437F.w,Y		; BE 7F 43 ; Load X register $437F.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	adc $18FE.w,X		; 7D FE 18 ; Add $18FE.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $5F7F.w,Y		; BE 7F 5F ; Load X register $5F7F.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda $00DFAF.l,X		; BF AF DF 00 ; Load long $00DFAF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $FEFE7F.l,X		; BF 7F FE FE ; Load long $FEFE7F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $FFDFBF.l,X		; 7F BF DF FF ; Add long $FFDFBF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E73C24.l,X		; FF 24 3C E7 ; Subtract with carry (long,X) $E73C24.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $C3.b		; 24 C3 ; Test bits $C3.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ror $C3.b		; 66 C3 ; Rotate right $C3.b [Reads: Direct Page] [Flags: ZNC]
	sty $3B.b		; 84 3B ; Store Y register to $3B.b [Reads: Y Index]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $2DE0FF.l		; 22 FF E0 2D ; Jump to subroutine long $2DE0FF.l [Writes: Stack Pointer] [Flow: call]
	ror $183C.w,X		; 7E 3C 18 ; Rotate right $183C.w,X [Reads: X Index] [Flags: ZNC]
	sbc $40FF02.l,X		; FF 02 FF 40 ; Subtract with carry (long,X) $40FF02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $8FFF13.l,X		; FF 13 FF 8F ; Subtract with carry (long,X) $8FFF13.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $1F.b,X		; F6 1F ; Increment memory $1F.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	jsr ($D83E.w,X)		; FC 3E D8 ; Jump to subroutine indirect indexed ($D83E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jmp ($FC88.w,X)		; 7C 88 FC ; Jump indirect indexed to ($FC88.w,X) [Reads: X Index] [Flow: jump]
	cop $40.b		; 02 40 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($8F.b,S),Y		; 13 8F ; OR accumulator (stack relative indirect indexed) ($8F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $FF7F3F.l,X		; 1F 3F 7F FF ; Logical OR long $FF7F3F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dec $FFDC.w,X		; DE DC FF ; Decrement memory $FFDC.w,X [Reads: X Index] [Flags: ZN]
	sbc $7F.b,S		; E3 7F ; Subtract stack-relative $7F.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
.ACCU 8
.INDEX 8
	sep #$F7		; E2 F7
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: ZNC]
	cpy #$FE.b		; C0 FE ; Compare #$FE.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $80, $E7		; 80 E7 ; Branch always to $80, $E7 [Flow: branch]
	.db $80, $C3		; 80 C3 ; Branch always to $80, $C3 [Flow: branch]
	sbc $247FFF.l,X		; FF FF 7F 24 ; Subtract with carry (long,X) $247FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $38F703.l,X		; FF 03 F7 38 ; Subtract with carry (long,X) $38F703.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $7C.b,S		; C3 7C ; Compare accumulator (stack relative) $7C.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	eor $81.b,S		; 43 81 ; Exclusive OR accumulator with stack relative $81.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	inc $8307.w,X		; FE 07 83 ; Increment memory $8307.w,X [Reads: X Index] [Flags: ZN]
	jsr ($7BC4.w,X)		; FC C4 7B ; Jump to subroutine indirect indexed ($7BC4.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: ZN]
	adc [$FF.b],Y		; 77 FF ; Add with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $27.b		; 06 27 ; Arithmetic shift left $27.b [Reads: Direct Page] [Flags: ZNC]
	sbc $3F3617.l,X		; FF 17 36 3F ; Subtract with carry (long,X) $3F3617.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $E3E37F.l,X		; 7F 7F E3 E3 ; Add long $E3E37F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	eor $C3.b,S		; 43 C3 ; Exclusive OR accumulator with stack relative $C3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc [$E7.b]		; 67 E7 ; Add with carry (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ror $3CFF.w,X		; 7E FF 3C ; Rotate right $3CFF.w,X [Reads: X Index] [Flags: ZNC]
	sbc $1C80C0.l,X		; FF C0 80 1C ; Subtract with carry (long,X) $1C80C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $183C.w,X		; 3C 3C 18 ; Test bits $183C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $70.b,S		; 43 70 ; Exclusive OR accumulator with stack relative $70.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	sbc $FFF9.w,Y		; F9 F9 FF ; Subtract with carry $FFF9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1FFFBF.l,X		; FF BF FF 1F ; Subtract with carry (long,X) $1FFFBF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FCFF78.l,X		; FF 78 FF FC ; Subtract with carry (long,X) $FCFF78.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $060F0F.l,X		; FF 0F 0F 06 ; Subtract with carry (long,X) $060F0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $19.b,S		; 03 19 ; OR accumulator with stack relative $19.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $43EF6D.l,X		; FF 6D EF 43 ; Subtract with carry (long,X) $43EF6D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $C7.b		; C5 C7 ; Compare $C7.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZNC]
	asl $6C.b		; 06 6C ; Arithmetic shift left $6C.b [Reads: Direct Page] [Flags: ZNC]
	sbc $60FFF8.l		; EF F8 FF 60 ; Subtract with carry (long) $60FFF8.l [Writes: Accumulator] [Flags: ZVNC]
	adc $CF8430.l,X		; 7F 30 84 CF ; Add long $CF8430.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	eor $8E.b,S		; 43 8E ; Exclusive OR accumulator with stack relative $8E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $FFFC0D.l		; 8F 0D FC FF ; Store accumulator (long) $FFFC0D.l [Reads: Accumulator]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $1FFFE7.l,X		; FF E7 FF 1F ; Subtract with carry (long,X) $1FFFE7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $38FC3C.l,X		; FF 3C FC 38 ; Subtract with carry (long,X) $38FC3C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$85.b]		; 07 85 ; OR accumulator with memory (long) [$85.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	eor #$3F.b		; 49 3F ; Exclusive OR #$3F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	lda $3F0002.l,X		; BF 02 00 3F ; Load long $3F0002.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $40.b		; 24 40 ; Test bits $40.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr ($ACFD.w,X)		; FC FD AC ; Jump to subroutine indirect indexed ($ACFD.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	lda $DDDC.w		; AD DC DD ; Load $DDDC.w into accumulator [Writes: Accumulator] [Flags: ZN]
	ldy $FCAD.w		; AC AD FC ; Load $FCAD.w into Y register [Writes: Y Index] [Flags: ZN]
	sbc $FC00.w,X		; FD 00 FC ; Subtract with carry $FC00.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: ZNC]
	eor ($22.b)		; 52 22 ; Exclusive OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor ($02.b)		; 52 02 ; Exclusive OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $3F.b		; 45 3F ; Exclusive OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $BA3A05.l,X		; BF 05 3A BA ; Load long $BA3A05.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $1ABD.w,X		; 3D BD 1A ; AND accumulator with memory $1ABD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sta $2C.b,S		; 83 2C ; Store accumulator (stack relative) $2C.b,S [Reads: Accumulator, Stack Pointer]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	tsb $45.b		; 04 45 ; Test and set bits $45.b [Reads: Accumulator] [Flags: Z]
	.db $42, $65		; 42 65 ; Reserved instruction
	and $FC4900.l,X		; 3F 00 49 FC ; AND accumulator with memory (long,X) $FC4900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $4285.w,X		; FD 85 42 ; Subtract with carry $4285.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $FC.b		; 06 FC ; Arithmetic shift left $FC.b [Reads: Direct Page] [Flags: ZNC]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $01.b,X		; 56 01 ; Logical shift right $01.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	mvp $FF,$7F		; 44 7F FF ; Move block positive $FF,$7F [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sta $52.b,S		; 83 52 ; Store accumulator (stack relative) $52.b,S [Reads: Accumulator, Stack Pointer]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	and $237E.w,X		; 3D 7E 23 ; AND accumulator with memory $237E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $DB6703.l,X		; 7F 03 67 DB ; Add long $DB6703.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$E7.b]		; 67 E7 ; Add with carry (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	mvp $FF,$7F		; 44 7F FF ; Move block positive $FF,$7F [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sta [$6A.b]		; 87 6A ; Store accumulator (long) [$6A.b] [Reads: Accumulator, Direct Page]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc [$23.b]		; 67 23 ; Add with carry (long) [$23.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $3D7E04.l,X		; 7F 04 7E 3D ; Add long $3D7E04.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	sbc $A28300.l,X		; FF 00 83 A2 ; Subtract with carry (long,X) $A28300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $9A85DF.l		; AF DF 85 9A ; Load long $9A85DF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $BFDFDF.l,X		; BF DF DF BF ; Load long $BFDFDF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $00FFFE.l,X		; 7F FE FF 00 ; Add long $00FFFE.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $8A.b,S		; 83 8A ; Store accumulator (stack relative) $8A.b,S [Reads: Accumulator, Stack Pointer]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $FB.b,X		; F5 FB ; Subtract $FB.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $82.b		; 85 82 ; Store accumulator to $82.b [Reads: Accumulator]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FBFB.w,X		; FD FB FB ; Subtract with carry $FBFB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7FFE.w,X		; FD FE 7F ; Subtract with carry $7FFE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF0000.l,X		; FF 00 00 FF ; Subtract with carry (long,X) $FF0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $24E718.l,X		; FF 18 E7 24 ; Subtract with carry (long,X) $24E718.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $4583FF.l		; 22 FF 83 45 ; Jump to subroutine long $4583FF.l [Writes: Stack Pointer] [Flow: call]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	sbc $2FFF05.l,X		; FF 05 FF 2F ; Subtract with carry (long,X) $2FFF05.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $3FE79F.l,X		; FF 9F E7 3F ; Subtract with carry (long,X) $3FE79F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $7F.b		; E6 7F ; Increment $7F.b [Reads: Direct Page] [Flags: ZN]
	jsr ($DC7E.w,X)		; FC 7E DC ; Jump to subroutine indirect indexed ($DC7E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $0500.w,X		; FE 00 05 ; Increment memory $0500.w,X [Reads: X Index] [Flags: ZN]
	and $7F3F9F.l		; 2F 9F 3F 7F ; AND accumulator with memory (long) $7F3F9F.l [Writes: Accumulator] [Flags: ZN]
	adc $FF8CFF.l,X		; 7F FF 8C FF ; Add long $FF8CFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($FF.b,S),Y		; D3 FF ; Compare accumulator (stack relative indirect indexed) ($FF.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index] [Flags: ZNC]
	cmp ($77.b,X)		; C1 77 ; Compare accumulator ($77.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	cpy #$E3.b		; C0 E3 ; Compare #$E3.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpx #$F6.b		; E0 F6 ; Compare #$F6.b with X register [Reads: X Index] [Flags: ZNC]
	cpy #$FC.b		; C0 FC ; Compare #$FC.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$E6.b		; C0 E6 ; Compare #$E6.b with Y register [Reads: Y Index] [Flags: ZNC]
	sty $EE.b		; 84 EE ; Store Y register to $EE.b [Reads: Y Index]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $38DF0F.l,X		; FF 0F DF 38 ; Subtract with carry (long,X) $38DF0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$7C.b]		; 87 7C ; Store accumulator (long) [$7C.b] [Reads: Accumulator, Direct Page]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sta $FC.b,S		; 83 FC ; Store accumulator (stack relative) $FC.b,S [Reads: Accumulator, Stack Pointer]
	cmp $77B87B.l		; CF 7B B8 77 ; Compare accumulator (long) $77B87B.l [Reads: Accumulator] [Flags: ZNC]
	sbc $2706.w,Y		; F9 06 27 ; Subtract with carry $2706.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $6029E0.l,X		; FF E0 29 60 ; Subtract with carry (long,X) $6029E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $9EFFCE.l,X		; 7F CE FF 9E ; Add long $9EFFCE.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $63F333.l,X		; FF 33 F3 63 ; Subtract with carry (long,X) $63F333.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $76.b,S		; E3 76 ; Subtract stack-relative $76.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	sbc [$3C.b],Y		; F7 3C ; Subtract with carry (long indexed) [$3C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $80FF18.l,X		; FF 18 FF 80 ; Subtract with carry (long,X) $80FF18.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $081C.w		; 0C 1C 08 ; Test and set bits $081C.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sed		; F8 ; Set decimal flag [Flags: D]
	jmp ($3FFC.w,X)		; 7C FC 3F ; Jump indirect indexed to ($3FFC.w,X) [Reads: X Index] [Flow: jump]
	sbc $0FFF1F.l,X		; FF 1F FF 0F ; Subtract with carry (long,X) $0FFF1F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $70FF00.l,X		; FF 00 FF 70 ; Subtract with carry (long,X) $70FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $07FFFC.l,X		; FF FC FF 07 ; Subtract with carry (long,X) $07FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $25.b,S		; 03 25 ; OR accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $43FF.w,Y		; 39 FF 43 ; AND accumulator with memory $43FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $E7.b		; 65 E7 ; Add $E7.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $C0FF00.l,X		; FF 00 FF C0 ; Subtract with carry (long,X) $C0FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $007F60.l,X		; FF 60 7F 00 ; Subtract with carry (long,X) $007F60.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsl $800000.l		; 22 00 00 80 ; Jump to subroutine long $800000.l [Writes: Stack Pointer] [Flow: call]
	eor $9C.b,S		; 43 9C ; Exclusive OR accumulator with stack relative $9C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $025C83.l,X		; 9F 83 5C 02 ; Store accumulator (long,X) $025C83.l,X [Reads: Accumulator, X Index]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $61.b		; 86 61 ; Store X register to $61.b [Reads: X Index]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta [$6E.b]		; 87 6E ; Store accumulator (long) [$6E.b] [Reads: Accumulator, Direct Page]
	cop $49.b		; 02 49 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $0002BF.l,X		; 3F BF 02 00 ; AND accumulator with memory (long,X) $0002BF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $402460.l,X		; 3F 60 24 40 ; AND accumulator with memory (long,X) $402460.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr ($01FD.w,X)		; FC FD 01 ; Jump to subroutine indirect indexed ($01FD.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jmp.w [$43DD]		; DC DD 43 ; Jump long indirect [$43DD] [Flow: jump]
	jsr ($83FD.w,X)		; FC FD 83 ; Jump to subroutine indirect indexed ($83FD.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $3F.b		; 45 3F ; Exclusive OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lda $BD3D05.l,X		; BF 05 3D BD ; Load long $BD3D05.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora $839D.w,X		; 1D 9D 83 ; OR accumulator with memory $839D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $2201.w		; 2C 01 22 ; Test bits $2201.w with accumulator [Reads: Accumulator] [Flags: ZVN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	tsb $42.b		; 04 42 ; Test and set bits $42.b [Reads: Accumulator] [Flags: Z]
	eor [$62.b]		; 47 62 ; Exclusive OR accumulator with memory (long) [$62.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and $FC4900.l,X		; 3F 00 49 FC ; AND accumulator with memory (long,X) $FC4900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $4285.w,X		; FD 85 42 ; Subtract with carry $4285.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	cop $05.b		; 02 05 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $FC.b		; 06 FC ; Arithmetic shift left $FC.b [Reads: Direct Page] [Flags: ZNC]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $44FE.w,X		; 7E FE 44 ; Rotate right $44FE.w,X [Reads: X Index] [Flags: ZNC]
	adc $5285FF.l,X		; 7F FF 85 52 ; Add long $5285FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and $237E.w,X		; 3D 7E 23 ; AND accumulator with memory $237E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $5B6702.l,X		; 7F 02 67 5B ; Add long $5B6702.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $6E86.w,X		; 3D 86 6E ; AND accumulator with memory $6E86.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $6A83FF.l,X		; 7F FF 83 6A ; Add long $6A83FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $675B.w,X		; 3D 5B 67 ; AND accumulator with memory $675B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $7F.b,S		; 23 7F ; AND accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7F.b		; E5 7F ; Subtract $7F.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF.b		; 05 FF ; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $D7.b		; 00 D7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $43F7EB.l		; EF EB F7 43 ; Subtract with carry (long) $43F7EB.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $FB.b,X		; F5 FB ; Subtract $FB.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $D7F7EB.l		; 0F EB F7 D7 ; OR accumulator with memory (long) $D7F7EB.l [Writes: Accumulator] [Flags: ZN]
	sbc $00DFAF.l		; EF AF DF 00 ; Subtract with carry (long) $00DFAF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc $FBFBF7.l		; EF F7 FB FB ; Subtract with carry (long) $FBFBF7.l [Writes: Accumulator] [Flags: ZVNC]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cmp $8300FF.l,X		; DF FF 00 83 ; Compare accumulator (long,X) $8300FF.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0285DF.l		; AF DF 85 02 ; Load long $0285DF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $EFDFDF.l		; EF DF DF EF ; Subtract with carry (long) $EFDFDF.l [Writes: Accumulator] [Flags: ZVNC]
	sbc [$FB.b],Y		; F7 FB ; Subtract with carry (long indexed) [$FB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $1FE000.l,X		; 1F 00 E0 1F ; Logical OR long $1FE000.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $1FFFEF.l,X		; 1F EF FF 1F ; Logical OR long $1FFFEF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $E0.b,S		; 03 E0 ; OR accumulator with stack relative $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$23.b		; E0 23 ; Compare #$23.b with X register [Reads: X Index] [Flags: ZNC]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $BF443F.l,X		; 5F 3F 44 BF ; Exclusive OR accumulator with memory (long,X) $BF443F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $BF7F43.l,X		; 5F 43 7F BF ; Exclusive OR accumulator with memory (long,X) $BF7F43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $805FBF.l,X		; 5F BF 5F 80 ; Exclusive OR accumulator with memory (long,X) $805FBF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $20		; 80 20 ; Branch always to $80, $20 [Flow: branch]
	jsr $0000.w		; 20 00 00 ; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	sta $5A.b,S		; 83 5A ; Store accumulator (stack relative) $5A.b,S [Reads: Accumulator, Stack Pointer]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$17.b]		; 07 17 ; OR accumulator with memory (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $1F2F43.l		; 0F 43 2F 1F ; OR accumulator with memory (long) $1F2F43.l [Writes: Accumulator] [Flags: ZN]
	ora $FF3F5F.l		; 0F 5F 3F FF ; OR accumulator with memory (long) $FF3F5F.l [Writes: Accumulator] [Flags: ZN]
	jsr ($F0F8.w,X)		; FC F8 F0 ; Jump to subroutine indirect indexed ($F0F8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpx #$C0.b		; E0 C0 ; Compare #$C0.b with X register [Reads: X Index] [Flags: ZNC]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: ZNC]
	lda $FF7F7F.l,X		; BF 7F 7F FF ; Load long $FF7F7F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $FF297F.l,X		; FF 7F 29 FF ; Subtract with carry (long,X) $FF297F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: ZNC]
	ora $01.b,X		; 15 01 ; OR accumulator with memory $01.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $0B.b,S		; 03 0B ; OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$33.b]		; 07 33 ; OR accumulator with memory (long) [$33.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $5F3F4F.l		; 0F 4F 3F 5F ; OR accumulator with memory (long) $5F3F4F.l [Writes: Accumulator] [Flags: ZN]
	and $FCFEFF.l,X		; 3F FF FE FC ; AND accumulator with memory (long,X) $FCFEFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $C0		; F0 C0 ; Branch if equal to $F0, $C0 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: ZN]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $5F112F.l		; 0F 2F 11 5F ; OR accumulator with memory (long) $5F112F.l [Writes: Accumulator] [Flags: ZN]
	and $04FF22.l		; 2F 22 FF 04 ; AND accumulator with memory (long) $04FF22.l [Writes: Accumulator] [Flags: ZN]
	inc $E0F0.w,X		; FE F0 E0 ; Increment memory $E0F0.w,X [Reads: X Index] [Flags: ZN]
	dec $2590.w		; CE 90 25 ; Decrement $2590.w [Flags: ZN]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$22.b]		; 07 22 ; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $0500.w		; AE 00 05 ; Load $0500.w into X register [Writes: X Index] [Flags: ZN]
	and ($0E.b),Y		; 31 0E ; AND accumulator with memory ($0E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	cmp $CF3F3F.l		; CF 3F 3F CF ; Compare accumulator (long) $CF3F3F.l [Reads: Accumulator] [Flags: ZNC]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl $FE.b,X		; 16 FE ; Arithmetic shift left $FE.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	.db $F0, $C1		; F0 C1 ; Branch if equal to $F0, $C1 [Flow: branch]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($FE.b,X)		; 81 FE ; Store accumulator ($FE.b,X) [Reads: Accumulator, X Index, Direct Page]
	sta $FC.b,S		; 83 FC ; Store accumulator (stack relative) $FC.b,S [Reads: Accumulator, Stack Pointer]
	sta [$7B.b]		; 87 7B ; Store accumulator (long) [$7B.b] [Reads: Accumulator, Direct Page]
	cpx $7C97.w		; EC 97 7C ; Compare $7C97.w with X register [Reads: X Index] [Flags: ZNC]
	sbc [$1E.b]		; E7 1E ; Subtract with carry (long) [$1E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF27E0.l,X		; 1F E0 27 FF ; Logical OR long $FF27E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora #$81.b		; 09 81 ; Logical OR #$81.b with accumulator [Writes: Accumulator] [Flags: ZN]
	inc $7E81.w,X		; FE 81 7E ; Increment memory $7E81.w,X [Reads: X Index] [Flags: ZN]
	sbc $9C.b,S		; E3 9C ; Subtract stack-relative $9C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC] [SNES: Stack-relative addressing]
	adc $FB1EE3.l,X		; 7F E3 1E FB ; Add long $FB1EE3.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $03.b,S		; 43 03 ; Exclusive OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $0601.w,X		; FD 01 06 ; Subtract with carry $0601.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $61DE3F.l		; 0F 3F DE 61 ; OR accumulator with memory (long) $61DE3F.l [Writes: Accumulator] [Flags: ZN]
	lda $007FC0.l,X		; BF C0 7F 00 ; Load long $007FC0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $E3FE01.l,X		; FF 01 FE E3 ; Subtract with carry (long,X) $E3FE01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $E3FE.w,X		; 1D FE E3 ; OR accumulator with memory $E3FE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta [$F9.b]		; 87 F9 ; Store accumulator (long) [$F9.b] [Reads: Accumulator, Direct Page]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $84FB06.l		; 0F 06 FB 84 ; OR accumulator with memory (long) $84FB06.l [Writes: Accumulator] [Flags: ZN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	lsr $7FA1.w,X		; 5E A1 7F ; Logical shift right $7FA1.w,X [Reads: X Index] [Flags: ZNC]
	stz $7EE3.w,X		; 9E E3 7E ; Store zero to $7EE3.w,X [Reads: X Index]
	sta $FE.b,S		; 83 FE ; Store accumulator (stack relative) $FE.b,S [Reads: Accumulator, Stack Pointer]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $E77F0D.l,X		; FF 0D 7F E7 ; Subtract with carry (long,X) $E77F0D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $A567DB.l,X		; 7F DB 67 A5 ; Add long $A567DB.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	and $7EBD.w,X		; 3D BD 7E ; AND accumulator with memory $7EBD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	inc $FF7F.w,X		; FE 7F FF ; Increment memory $FF7F.w,X [Reads: X Index] [Flags: ZN]
	jsl $67147F.l		; 22 7F 14 67 ; Jump to subroutine long $67147F.l [Writes: Stack Pointer] [Flow: call]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	and $7F7E.w,X		; 3D 7E 7F ; AND accumulator with memory $7F7E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $FE7FFF.l,X		; 7F FF 7F FE ; Add long $FE7FFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $DA7EBD.l,X		; 7F BD 7E DA ; Add long $DA7EBD.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $5BA5.w,X		; 3D A5 5B ; AND accumulator with memory $5BA5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	adc [$E7.b]		; 67 E7 ; Add with carry (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $7F22FF.l,X		; 7F FF 22 7F ; Add long $7F22FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ror $5B3D.w,X		; 7E 3D 5B ; Rotate right $5B3D.w,X [Reads: X Index] [Flags: ZNC]
	adc [$7F.b]		; 67 7F ; Add with carry (long) [$7F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $FA00FF.l,X		; 7F FF 00 FA ; Add long $FA00FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FE7D.w,X		; FD 7D FE ; Subtract with carry $FE7D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $BE.b,S		; 43 BE ; Exclusive OR accumulator with stack relative $BE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $FE7D13.l,X		; 7F 13 7D FE ; Add long $FE7D13.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: X Index, Stack Pointer] [Flags: ZN]
	sbc $FBF5.w,X		; FD F5 FB ; Subtract with carry $FBF5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $7F7F.w,X		; FE 7F 7F ; Increment memory $7F7F.w,X [Reads: X Index] [Flags: ZN]
	inc $FBFD.w,X		; FE FD FB ; Increment memory $FBFD.w,X [Reads: X Index] [Flags: ZN]
	sbc $BF5F00.l,X		; FF 00 5F BF ; Subtract with carry (long,X) $BF5F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $437F.w,Y		; BE 7F 43 ; Load X register $437F.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	adc $0FFE.w,X		; 7D FE 0F ; Add $0FFE.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ldx $5F7F.w,Y		; BE 7F 5F ; Load X register $5F7F.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	lda $00DFAF.l,X		; BF AF DF 00 ; Load long $00DFAF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	lda $FEFE7F.l,X		; BF 7F FE FE ; Load long $FEFE7F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $00DFBF.l,X		; 7F BF DF 00 ; Add long $00DFBF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $00E002.l,X		; FF 02 E0 00 ; Subtract with carry (long,X) $00E002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$23.b]		; 07 23 ; OR accumulator with memory (long) [$23.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $5F011F.l		; 2F 1F 01 5F ; AND accumulator with memory (long) $5F011F.l [Writes: Accumulator] [Flags: ZN]
	and $3F5F44.l		; 2F 44 5F 3F ; AND accumulator with memory (long) $3F5F44.l [Writes: Accumulator] [Flags: ZN]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $5F.b,S		; 43 5F ; Exclusive OR accumulator with stack relative $5F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $C0C005.l,X		; 3F 05 C0 C0 ; AND accumulator with memory (long,X) $C0C005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $90, $80		; 90 80 ; Branch if carry clear to $90, $80 [Flow: branch]
	.db $80, $90		; 80 90 ; Branch always to $80, $90 [Flow: branch]
	sta $A6.b,S		; 83 A6 ; Store accumulator (stack relative) $A6.b,S [Reads: Accumulator, Stack Pointer]
	brk $87.b		; 00 87 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($00.b)		; 92 00 ; Store accumulator (indirect) ($00.b) [Reads: Accumulator, Direct Page]
	ora ($17.b,X)		; 01 17 ; Logical OR ($17.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta $68.b,S		; 83 68 ; Store accumulator (stack relative) $68.b,S [Reads: Accumulator, Stack Pointer]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	ora [$E4.b]		; 07 E4 ; OR accumulator with memory (long) [$E4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpx #$C0.b		; E0 C0 ; Compare #$C0.b with X register [Reads: X Index] [Flags: ZNC]
	eor $5FBF2F.l,X		; 5F 2F BF 5F ; Exclusive OR accumulator with memory (long,X) $5FBF2F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $01FF2A.l,X		; 7F 2A FF 01 ; Add long $01FF2A.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $90, $20		; 90 20 ; Branch if carry clear to $90, $20 [Flow: branch]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $27.b		; 05 27 ; Logical OR $27.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and $83FF1F.l		; 2F 1F FF 83 ; AND accumulator with memory (long) $83FF1F.l [Writes: Accumulator] [Flags: ZN]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: ZN]
	cop $E2.b		; 02 E2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $C0.b		; C4 C0 ; Compare $C0.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sty $AE.b		; 84 AE ; Store Y register to $AE.b [Reads: Y Index]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1F2F.w		; 0E 2F 1F ; Arithmetic shift left $1F2F.w [Flags: ZNC]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	.db $F0, $E1		; F0 E1 ; Branch if equal to $F0, $E1 [Flow: branch]
	cpy #$27.b		; C0 27 ; Compare #$27.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: ZN]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	asl $0F.b		; 06 0F ; Arithmetic shift left $0F.b [Reads: Direct Page] [Flags: ZNC]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $3F33CF.l		; 0F CF 33 3F ; OR accumulator with memory (long) $3F33CF.l [Writes: Accumulator] [Flags: ZN]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: ZNC]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$0C.b		; C0 0C ; Compare #$0C.b with Y register [Reads: Y Index] [Flags: ZNC]
	jsl $F08300.l		; 22 00 83 F0 ; Jump to subroutine long $F08300.l [Writes: Stack Pointer] [Flow: call]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$FB.b]		; 07 FB ; OR accumulator with memory (long) [$FB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cpy $F837.w		; CC 37 F8 ; Compare $F837.w with Y register [Reads: Y Index] [Flags: ZNC]
	cmp $08EF38.l		; CF 38 EF 08 ; Compare accumulator (long) $08EF38.l [Reads: Accumulator] [Flags: ZNC]
	sbc [$1E.b],Y		; F7 1E ; Subtract with carry (long indexed) [$1E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($27.b,X)		; E1 27 ; Subtract with carry ($27.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $010887.l,X		; FF 87 08 01 ; Subtract with carry (long,X) $010887.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $F7.b		; 46 F7 ; Logical shift right $F7.b [Reads: Direct Page] [Flags: ZNC]
	tsb $FF27.w		; 0C 27 FF ; Test and set bits $FF27.w [Reads: Accumulator] [Flags: Z]
	sta [$20.b]		; 87 20 ; Store accumulator (long) [$20.b] [Reads: Accumulator, Direct Page]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta [$FD.b]		; 87 FD ; Store accumulator (long) [$FD.b] [Reads: Accumulator, Direct Page]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Stack Pointer, Y Index] [Flags: ZN]
	cmp $7C.b,S		; C3 7C ; Compare accumulator (stack relative) $7C.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sta $38.b		; 85 38 ; Store accumulator to $38.b [Reads: Accumulator]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr $0201.w		; 20 01 02 ; Jump to subroutine at $0201.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	.db $80, $28		; 80 28 ; Branch always to $80, $28 [Flow: branch]
	sbc $015686.l,X		; FF 86 56 01 ; Subtract with carry (long,X) $015686.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	mvp $FF,$7F		; 44 7F FF ; Move block positive $FF,$7F [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sta $52.b,S		; 83 52 ; Store accumulator (stack relative) $52.b,S [Reads: Accumulator, Stack Pointer]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	and $237E.w,X		; 3D 7E 23 ; AND accumulator with memory $237E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $DB6703.l,X		; 7F 03 67 DB ; Add long $DB6703.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc [$E7.b]		; 67 E7 ; Add with carry (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	mvp $FF,$7F		; 44 7F FF ; Move block positive $FF,$7F [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	sta [$6A.b]		; 87 6A ; Store accumulator (long) [$6A.b] [Reads: Accumulator, Direct Page]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc [$23.b]		; 67 23 ; Add with carry (long) [$23.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc $3D7E04.l,X		; 7F 04 7E 3D ; Add long $3D7E04.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	sbc $A28300.l,X		; FF 00 83 A2 ; Subtract with carry (long,X) $A28300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	lda $9A85DF.l		; AF DF 85 9A ; Load long $9A85DF.l into accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $BFDFDF.l,X		; BF DF DF BF ; Load long $BFDFDF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $00FFFE.l,X		; 7F FE FF 00 ; Add long $00FFFE.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $8A.b,S		; 83 8A ; Store accumulator (stack relative) $8A.b,S [Reads: Accumulator, Stack Pointer]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $FB.b,X		; F5 FB ; Subtract $FB.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sta $82.b		; 85 82 ; Store accumulator to $82.b [Reads: Accumulator]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FBFB.w,X		; FD FB FB ; Subtract with carry $FBFB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7FFE.w,X		; FD FE 7F ; Subtract with carry $7FFE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sty $30.b		; 84 30 ; Store Y register to $30.b [Reads: Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $E0.b		; 02 E0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $170300.l		; 22 00 03 17 ; Jump to subroutine long $170300.l [Writes: Stack Pointer] [Flow: call]
	ora $4B0B17.l		; 0F 17 0B 4B ; OR accumulator with memory (long) $4B0B17.l [Writes: Accumulator] [Flags: ZN]
	and $E0011F.l		; 2F 1F 01 E0 ; AND accumulator with memory (long) $E0011F.l [Writes: Accumulator] [Flags: ZN]
	cpx $25.b		; E4 25 ; Compare $25.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cpy #$23.b		; C0 23 ; Compare #$23.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($00.b)		; 92 00 ; Store accumulator (indirect) ($00.b) [Reads: Accumulator, Direct Page]
	eor $0B.b,S		; 43 0B ; Exclusive OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$0F.b],Y		; 17 0F ; OR accumulator with memory (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	sty $20.b		; 84 20 ; Store Y register to $20.b [Reads: Y Index]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	cpx #$83.b		; E0 83 ; Compare #$83.b with X register [Reads: X Index] [Flags: ZNC]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $FF29BF.l,X		; 7F BF 29 FF ; Add long $FF29BF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cop $80.b		; 02 80 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2A40.w		; 20 40 2A ; Jump to subroutine at $2A40.w [Writes: Stack Pointer] [Flow: call]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($00.b)		; 92 00 ; Store accumulator (indirect) ($00.b) [Reads: Accumulator, Direct Page]
	ora $0C.b		; 05 0C ; Logical OR $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $13.b,S		; 03 13 ; OR accumulator with stack relative $13.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $1F2F.w		; 0D 2F 1F ; Logical OR $1F2F.w with accumulator [Writes: Accumulator] [Flags: ZN]
	jsl $FE04FF.l		; 22 FF 04 FE ; Jump to subroutine long $FE04FF.l [Writes: Stack Pointer] [Flow: call]
	jsr ($E2F0.w,X)		; FC F0 E2 ; Jump to subroutine indirect indexed ($E2F0.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpy #$29.b		; C0 29 ; Compare #$29.b with Y register [Reads: Y Index] [Flags: ZNC]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $2400.w		; AE 00 24 ; Load $2400.w into X register [Writes: X Index] [Flags: ZN]
	sbc $F0FE02.l,X		; FF 02 FE F0 ; Subtract with carry (long,X) $F0FE02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$29.b		; E0 29 ; Compare #$29.b with X register [Reads: X Index] [Flags: ZNC]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: ZN]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sty $5C.b		; 84 5C ; Store Y register to $5C.b [Reads: Y Index]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $24E73F.l,X		; 3F 3F E7 24 ; AND accumulator with memory (long,X) $24E73F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $C0F00A.l,X		; FF 0A F0 C0 ; Subtract with carry (long,X) $C0F00A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F00F.w,X		; FD 0F F0 ; Subtract with carry $F00F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $7687F7.l		; 0F F7 87 76 ; OR accumulator with memory (long) $7687F7.l [Writes: Accumulator] [Flags: ZN]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF27E0.l,X		; 1F E0 27 FF ; Logical OR long $FF27E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sta $14.b,S		; 83 14 ; Store accumulator (stack relative) $14.b,S [Reads: Accumulator, Stack Pointer]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	inc $19.b		; E6 19 ; Increment $19.b [Reads: Direct Page] [Flags: ZN]
	sbc $441CE3.l,X		; FF E3 1C 44 ; Subtract with carry (long,X) $441CE3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$0C.b],Y		; F7 0C ; Subtract with carry (long indexed) [$0C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora #$1F.b		; 09 1F ; Logical OR #$1F.b with accumulator [Writes: Accumulator] [Flags: ZN]
	sbc $70DF30.l		; EF 30 DF 70 ; Subtract with carry (long) $70DF30.l [Writes: Accumulator] [Flags: ZVNC]
	sta $C07F80.l,X		; 9F 80 7F C0 ; Store accumulator (long,X) $C07F80.l,X [Reads: Accumulator, X Index]
	lda $02AA83.l,X		; BF 83 AA 02 ; Load long $02AA83.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($83.b,X)		; 01 83 ; Logical OR ($83.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	jsr ($FF27.w,X)		; FC 27 FF ; Jump to subroutine indirect indexed ($FF27.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $E27D83.l		; 0F 83 7D E2 ; OR accumulator with memory (long) $E27D83.l [Writes: Accumulator] [Flags: ZN]
	sta $E01F.w,X		; 9D 1F E0 ; Store accumulator to $E01F.w,X [Reads: Accumulator, X Index]
	ora $9F70EF.l,X		; 1F EF 70 9F ; Logical OR long $9F70EF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpx #$7F.b		; E0 7F ; Compare #$7F.b with X register [Reads: X Index] [Flags: ZNC]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	sta ($FE.b,X)		; 81 FE ; Store accumulator ($FE.b,X) [Reads: Accumulator, X Index, Direct Page]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	cop $BD.b		; 02 BD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $44FE.w,X		; 7E FE 44 ; Rotate right $44FE.w,X [Reads: X Index] [Flags: ZNC]
	adc $5285FF.l,X		; 7F FF 85 52 ; Add long $5285FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and $237E.w,X		; 3D 7E 23 ; AND accumulator with memory $237E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $5B6702.l,X		; 7F 02 67 5B ; Add long $5B6702.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $6E86.w,X		; 3D 86 6E ; AND accumulator with memory $6E86.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc $6A83FF.l,X		; 7F FF 83 6A ; Add long $6A83FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $675B.w,X		; 3D 5B 67 ; AND accumulator with memory $675B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $7F.b,S		; 23 7F ; AND accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7F.b		; E5 7F ; Subtract $7F.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FC00FF.l		; 0F FF 00 FC ; OR accumulator with memory (long) $FC00FF.l [Writes: Accumulator] [Flags: ZN]
	ora $F8.b,S		; 03 F8 ; OR accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$F3.b]		; 07 F3 ; OR accumulator with memory (long) [$F3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $CF1FE7.l		; 0F E7 1F CF ; OR accumulator with memory (long) $CF1FE7.l [Writes: Accumulator] [Flags: ZN]
	and $B77F98.l,X		; 3F 98 7F B7 ; AND accumulator with memory (long,X) $B77F98.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($DC.b,X)		; 01 DC ; Logical OR ($DC.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	and $E32343.l,X		; 3F 43 23 E3 ; AND accumulator with memory (long,X) $E32343.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $DC.b,S		; 43 DC ; Exclusive OR accumulator with stack relative $DC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy #$08.b		; C0 08 ; Compare #$08.b with Y register [Reads: Y Index] [Flags: ZNC]
	dec $27C0.w		; CE C0 27 ; Decrement $27C0.w [Flags: ZN]
	cpx #$D3.b		; E0 D3 ; Compare #$D3.b with X register [Reads: X Index] [Flags: ZNC]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	trb $221C.w		; 1C 1C 22 ; Test and reset bits $221C.w [Reads: Accumulator] [Flags: Z]
	and $0F1F11.l,X		; 3F 11 1F 0F ; AND accumulator with memory (long,X) $0F1F11.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $C0BF80.l,X		; 7F 80 BF C0 ; Add long $C0BF80.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta $704FE0.l,X		; 9F E0 4F 70 ; Store accumulator (long,X) $704FE0.l,X [Reads: Accumulator, X Index]
	adc [$78.b]		; 67 78 ; Add with carry (long) [$78.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $30, $3F		; 30 3F ; Branch if minus to $30, $3F [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $220F8F.l,X		; 1F 8F 0F 22 ; Logical OR long $220F8F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	cpy #$E0.b		; C0 E0 ; Compare #$E0.b with Y register [Reads: Y Index] [Flags: ZNC]
	.db $F0, $F7		; F0 F7 ; Branch if equal to $F0, $F7 [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc [$4C.b],Y		; F7 4C ; Subtract with carry (long indexed) [$4C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ror $EC.b		; 66 EC ; Rotate right $EC.b [Reads: Direct Page] [Flags: ZNC]
	adc ($B7.b,S),Y		; 73 B7 ; Add with carry (stack relative indirect indexed) ($B7.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $E73FCF.l,X		; 7F CF 3F E7 ; Add long $E73FCF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $010000.l,X		; 1F 00 00 01 ; Logical OR long $010000.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cpx #$21.b		; E0 21 ; Compare #$21.b with X register [Reads: X Index] [Flags: ZNC]
	sep #$0E		; E2 0E ; Set processor status bits #$0E [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	cpy $1C.b		; C4 1C ; Compare $1C.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	eor #$79.b		; 49 79 ; Exclusive OR #$79.b with accumulator [Writes: Accumulator] [Flags: ZN]
	ora ($F3.b,S),Y		; 13 F3 ; OR accumulator (stack relative indirect indexed) ($F3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda [$67.b]		; A7 67 ; Load accumulator (long) [$67.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor $9E9ECF.l		; 4F CF 9E 9E ; Exclusive OR accumulator with memory (long) $9E9ECF.l [Writes: Accumulator] [Flags: ZN]
	bit $113C.w,X		; 3C 3C 11 ; Test bits $113C.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	and $86.b,S		; 23 86 ; AND accumulator with stack relative $86.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $3018.w		; 0C 18 30 ; Test and set bits $3018.w [Reads: Accumulator] [Flags: Z]
	adc ($C3.b,X)		; 61 C3 ; Add with carry ($C3.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	sbc [$F0.b],Y		; F7 F0 ; Subtract with carry (long indexed) [$F0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$E0.b]		; E7 E0 ; Subtract with carry (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp $809FC0.l		; CF C0 9F 80 ; Compare accumulator (long) $809FC0.l [Reads: Accumulator] [Flags: ZNC]
	eor $3F.b		; 45 3F ; Exclusive OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $3F1F0F.l		; 8F 0F 1F 3F ; Store accumulator (long) $3F1F0F.l [Reads: Accumulator]
	adc $09FF22.l,X		; 7F 22 FF 09 ; Add long $09FF22.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $B0, $4F		; B0 4F ; Branch if carry set to $B0, $4F [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc [$3C.b]		; E7 3C ; Subtract with carry (long) [$3C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($7F.b,S),Y		; F3 7F ; Subtract with carry (stack relative indirect indexed) ($7F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $2F		; F0 2F ; Branch if equal to $F0, $2F [Flow: branch]
	.db $F0, $43		; F0 43 ; Branch if equal to $F0, $43 [Flow: branch]
	tsb $E0F3.w		; 0C F3 E0 ; Test and set bits $E0F3.w [Reads: Accumulator] [Flags: Z]
	and ($F8.b,X)		; 21 F8 ; Logical AND ($F8.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora [$4F.b]		; 07 4F ; OR accumulator with memory (long) [$4F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc [$C3.b]		; E7 C3 ; Subtract with carry (long) [$C3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $D0		; 80 D0 ; Branch always to $80, $D0 [Flow: branch]
	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: ZNC]
	ora $08.b,S		; 03 08 ; OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc [$0C.b],Y		; F7 0C ; Subtract with carry (long indexed) [$0C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($1F.b,S),Y		; F3 1F ; Subtract with carry (stack relative indirect indexed) ($1F.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: ZNC]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($FE01.w,X)		; 7C 01 FE ; Jump indirect indexed to ($FE01.w,X) [Reads: X Index] [Flow: jump]
	and $FF7FFF.l,X		; 3F FF 7F FF ; AND accumulator with memory (long,X) $FF7FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$F3.b],Y		; F7 F3 ; Subtract with carry (long indexed) [$F3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: ZNC]
	jmp ($C0FE.w,X)		; 7C FE C0 ; Jump indirect indexed to ($C0FE.w,X) [Reads: X Index] [Flow: jump]
	.db $80, $43		; 80 43 ; Branch always to $80, $43 [Flow: branch]
	eor ($BE.b,X)		; 41 BE ; Exclusive OR accumulator with memory ($BE.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $E33EC1.l		; 0F C1 3E E3 ; OR accumulator with memory (long) $E33EC1.l [Writes: Accumulator] [Flags: ZN]
	trb $00FF.w		; 1C FF 00 ; Test and reset bits $00FF.w [Reads: Accumulator] [Flags: Z]
	cmp [$38.b]		; C7 38 ; Compare accumulator (long) [$38.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	sta $FE9F7C.l,X		; 9F 7C 9F FE ; Store accumulator (long,X) $FE9F7C.l,X [Reads: Accumulator, X Index]
	ldx $3EBE.w,Y		; BE BE 3E ; Load X register $3EBE.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	trb $0023.w		; 1C 23 00 ; Test and reset bits $0023.w [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $F00F00.l,X		; FF 00 0F F0 ; Subtract with carry (long,X) $F00F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: ZNC]
	ora $80801F.l,X		; 1F 1F 80 80 ; Logical OR long $80801F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	sbc $FF00.w,Y		; F9 00 FF ; Subtract with carry $FF00.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1FF000.l,X		; FF 00 F0 1F ; Subtract with carry (long,X) $1FF000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$7F.b		; E0 7F ; Compare #$7F.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $00FF.w,Y		; F9 FF 00 ; Subtract with carry $00FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ldy #$60.b		; A0 60 ; Load #$60.b into Y register [Writes: Y Index] [Flags: ZN]
	cmp [$40.b]		; C7 40 ; Compare accumulator (long) [$40.b] [Reads: Accumulator, Direct Page] [Flags: ZNC]
	eor [$C7.b]		; 47 C7 ; Exclusive OR accumulator with memory (long) [$C7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $42, $05		; 42 05 ; Reserved instruction
	lda $3CBD02.l,X		; BF 02 BD 3C ; Load long $3CBD02.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora $3C233F.l,X		; 1F 3F 23 3C ; Logical OR long $3C233F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $7C.b		; 02 7C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $C0		; 42 C0 ; Reserved instruction
	eor $7F.b,S		; 43 7F ; Exclusive OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sbc $FF3F05.l,X		; FF 05 3F FF ; Subtract with carry (long,X) $FF3F05.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $7F43FE.l,X		; 7F FE 43 7F ; Add long $7F43FE.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0030E0.l,X		; FF E0 30 00 ; Subtract with carry (long,X) $0030E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	and $414000.l,X		; 3F 00 40 41 ; AND accumulator with memory (long,X) $414000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc $E61800.l,X		; 7F 00 18 E6 ; Add long $E61800.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $18E7.w,X		; 1D E7 18 ; OR accumulator with memory $18E7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc $0E.b		; E5 0E ; Subtract $0E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($07.b)		; F2 07 ; Subtract with carry (indirect) ($07.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FC03.w,Y		; F9 03 FC ; Subtract with carry $FC03.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($E0.b,X)		; E1 E0 ; Subtract with carry ($E0.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
.ACCU 8
.INDEX 8
	sep #$F1		; E2 F1
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($FFFE.w,X)		; FC FE FF ; Jump to subroutine indirect indexed ($FFFE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $86C3.w,X		; FD C3 86 ; Subtract with carry $86C3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FC33.w,Y		; F9 33 FC ; Subtract with carry $FC33.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($7E.b),Y		; 71 7E ; Add with carry ($7E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx $FB.b		; E4 FB ; Compare $FB.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	asl $FFF1.w		; 0E F1 FF ; Arithmetic shift left $FFF1.w [Flags: ZNC]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($0022.w,X)		; FC 22 00 ; Jump to subroutine indirect indexed ($0022.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $3AE000.l		; 22 00 E0 3A ; Jump to subroutine long $3AE000.l [Writes: Stack Pointer] [Flow: call]
	jsr ($C3C3.w,X)		; FC C3 C3 ; Jump to subroutine indirect indexed ($C3C3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: ZNC]
	.db $70, $F0		; 70 F0 ; Branch if overflow set to $70, $F0 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jmp.w [$663C]		; DC 3C 66 ; Jump long indirect [$663C] [Flow: jump]
	stz $CF33.w,X		; 9E 33 CF ; Store zero to $CF33.w,X [Reads: X Index]
	sbc $1F3C00.l,X		; FF 00 3C 1F ; Subtract with carry (long,X) $1F3C00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $010307.l		; 0F 07 03 01 ; OR accumulator with memory (long) $010307.l [Writes: Accumulator] [Flags: ZN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc ($0A.b)		; F2 0A ; Subtract with carry (indirect) ($0A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($0D.b,S),Y		; F3 0D ; Subtract with carry (stack relative indirect indexed) ($0D.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0A.b,X		; F5 0A ; Subtract $0A.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $05.b,X		; F6 05 ; Increment memory $05.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	asl $FCF2.w		; 0E F2 FC ; Arithmetic shift left $FCF2.w [Flags: ZNC]
	sbc $F4F5.w,Y		; F9 F5 F4 ; Subtract with carry $F4F5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($F1.b)		; F2 F1 ; Subtract with carry (indirect) ($F1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $F1		; F0 F1 ; Branch if equal to $F0, $F1 [Flow: branch]
	lda $679B70.l		; AF 70 9B 67 ; Load long $679B70.l into accumulator [Writes: Accumulator] [Flags: ZN]
	lda [$48.b],Y		; B7 48 ; Load accumulator (long indexed) [$48.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	lda $43BF50.l		; AF 50 BF 43 ; Load long $43BF50.l into accumulator [Writes: Accumulator] [Flags: ZN]
	eor $BF.b		; 45 BF ; Exclusive OR $BF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	mvp $00,$27		; 44 27 00 ; Move block positive $00,$27 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	cpx #$28.b		; E0 28 ; Compare #$28.b with X register [Reads: X Index] [Flags: ZNC]
	sbc #$18.b		; E9 18 ; Subtract #$18.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	sty $AC.b,X		; 94 AC ; Store Y register $AC.b,X [Reads: X Index, Direct Page] [Writes: Y Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	lsr $F7.b,X		; 56 F7 ; Logical shift right $F7.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc $0B7F1B.l,X		; 7F 1B 7F 0B ; Add long $0B7F1B.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $0B7F83.l,X		; FF 83 7F 0B ; Subtract with carry (long,X) $0B7F83.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora [$43.b]		; 07 43 ; OR accumulator with memory (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	and ($00.b,X)		; 21 00 ; Logical AND ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $80, $C7		; 80 C7 ; Branch always to $80, $C7 [Flow: branch]
	ora [$E0.b]		; 07 E0 ; OR accumulator with memory (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5F.b		; 00 5F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	adc $707060.l		; 6F 60 70 70 ; Add with carry (long) $707060.l [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	tsb $BF.b		; 04 BF ; Test and set bits $BF.b [Reads: Accumulator] [Flags: Z]
	sta $1FE38F.l,X		; 9F 8F E3 1F ; Store accumulator (long,X) $1FE38F.l,X [Reads: Accumulator, X Index]
	eor $9B.b,S		; 43 9B ; Exclusive OR accumulator with stack relative $9B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc [$43.b]		; 67 43 ; Add with carry (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$45.b]		; 07 45 ; OR accumulator with memory (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $0024E0.l,X		; 1F E0 24 00 ; Logical OR long $0024E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsl $51E001.l		; 22 01 E0 51 ; Jump to subroutine long $51E001.l [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	ldy $0E3C.w		; AC 3C 0E ; Load $0E3C.w into Y register [Writes: Y Index] [Flags: ZN]
	rol $4F77.w,X		; 3E 77 4F ; Rotate left $4F77.w,X [Reads: X Index] [Flags: ZNC]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	eor [$07.b]		; 47 07 ; Exclusive OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora [$27.b]		; 07 27 ; OR accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	adc [$C3.b]		; 67 C3 ; Add with carry (long) [$C3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($80.b,X)		; C1 80 ; Compare accumulator ($80.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	.db $80, $3F		; 80 3F ; Branch always to $80, $3F [Flow: branch]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $7E.b		; 24 7E ; Test bits $7E.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	.db $42, $7E		; 42 7E ; Reserved instruction
	eor ($2E.b)		; 52 2E ; Exclusive OR accumulator with memory (indirect) ($2E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: ZNC]
	sta [$87.b]		; 87 87 ; Store accumulator (long) [$87.b] [Reads: Accumulator, Direct Page]
	sbc $81C3FF.l,X		; FF FF C3 81 ; Subtract with carry (long,X) $81C3FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($D1.b,X)		; 81 D1 ; Store accumulator ($D1.b,X) [Reads: Accumulator, X Index, Direct Page]
	sbc $F078.w,Y		; F9 78 F0 ; Subtract with carry $F078.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $4F9F61.l		; 0F 61 9F 4F ; OR accumulator with memory (long) $4F9F61.l [Writes: Accumulator] [Flags: ZN]
	lda $C933D3.l,X		; BF D3 33 C9 ; Load long $C933D3.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	and $3CC4.w,Y		; 39 C4 3C ; AND accumulator with memory $3CC4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
.INDEX 8
	sep #$1E		; E2 1E
	adc $9F.b,S		; 63 9F ; Add with carry (stack relative) $9F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZVNC]
	ora [$9E.b]		; 07 9E ; OR accumulator with memory (long) [$9E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $B0, $2C		; B0 2C ; Branch if carry set to $B0, $2C [Flow: branch]
	rol $3B.b,X		; 36 3B ; Rotate left $3B.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $FC1C.w,X		; 1D 1C FC ; OR accumulator with memory $FC1C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	jsr ($F8F8.w,X)		; FC F8 F8 ; Jump to subroutine indirect indexed ($F8F8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: ZNC]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: ZNC]
	sta $49.b,S		; 83 49 ; Store accumulator (stack relative) $49.b,S [Reads: Accumulator, Stack Pointer]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $FF223F.l,X		; 1F 3F 22 FF ; Logical OR long $FF223F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	ora [$F7.b]		; 07 F7 ; OR accumulator with memory (long) [$F7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ror $F6.b		; 66 F6 ; Rotate right $F6.b [Reads: Direct Page] [Flags: ZNC]
	adc [$F7.b]		; 67 F7 ; Add with carry (long) [$F7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	adc [$F4.b]		; 67 F4 ; Add with carry (long) [$F4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	stz $43.b		; 64 43 ; Store zero to $43.b
	.db $F0, $60		; F0 60 ; Branch if equal to $F0, $60 [Flow: branch]
	ora [$F1.b]		; 07 F1 ; OR accumulator with memory (long) [$F1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $1860.w,X		; FE 60 18 ; Increment memory $1860.w,X [Reads: X Index] [Flags: ZN]
	ora $1B18.w,Y		; 19 18 1B ; OR accumulator with memory $1B18.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $1F.b,S		; 23 1F ; AND accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$E0.b],Y		; 17 E0 ; OR accumulator with memory (long indexed) [$E0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $F09FE0.l,X		; 1F E0 9F F0 ; Logical OR long $F09FE0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cmp $1CA7B8.l		; CF B8 A7 1C ; Compare accumulator (long) $1CA7B8.l [Reads: Accumulator] [Flags: ZNC]
	ora ($8C.b,S),Y		; 13 8C ; OR accumulator (stack relative indirect indexed) ($8C.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	dec $EEC9.w		; CE C9 EE ; Decrement $EEC9.w [Flags: ZN]
	sbc #$1F.b		; E9 1F ; Subtract #$1F.b from accumulator with borrow [Writes: Accumulator] [Flags: ZVNC]
	ora $E3470F.l,X		; 1F 0F 47 E3 ; Logical OR long $E3470F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	adc ($31.b,S),Y		; 73 31 ; Add with carry (stack relative indirect indexed) ($31.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $37.b,X		; 15 37 ; OR accumulator with memory $37.b,X [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $60A07F.l,X		; DF 7F A0 60 ; Compare accumulator (long,X) $60A07F.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	cpy #$7F.b		; C0 7F ; Compare #$7F.b with Y register [Reads: Y Index] [Flags: ZNC]
	sbc $028787.l,X		; FF 87 87 02 ; Subtract with carry (long,X) $028787.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	ora $978340.l,X		; 1F 40 83 97 ; Logical OR long $978340.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cop $0A.b		; 02 0A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DF.b		; 00 DF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $26EF.w		; 0E EF 26 ; Arithmetic shift left $26EF.w [Flags: ZNC]
	adc [$93.b],Y		; 77 93 ; Add with carry (long indexed) [$93.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cmp #$1D.b		; C9 1D ; Compare #$1D.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	cpx $85.b		; E4 85 ; Compare $85.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	rol $01.b		; 26 01 ; Rotate left $01.b [Reads: Direct Page] [Flags: ZNC]
	cpx #$27.b		; E0 27 ; Compare #$27.b with X register [Reads: X Index] [Flags: ZNC]
	.db $30, $18		; 30 18 ; Branch if minus to $30, $18 [Flow: branch]
	sty $E3C6.w		; 8C C6 E3 ; Store Y register to $E3C6.w [Reads: Y Index]
	sbc ($F8.b),Y		; F1 F8 ; Subtract with carry ($F8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($CE6F.w,X)		; FC 6F CE ; Jump to subroutine indirect indexed ($CE6F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor $6EEFCE.l		; 4F CE EF 6E ; Exclusive OR accumulator with memory (long) $6EEFCE.l [Writes: Accumulator] [Flags: ZN]
	sbc [$B6.b],Y		; F7 B6 ; Subtract with carry (long indexed) [$B6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sbc $FF6C.w,X		; FD 6C FF ; Subtract with carry $FF6C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	ora [$30.b]		; 07 30 ; OR accumulator with memory (long) [$30.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $30, $10		; 30 10 ; Branch if minus to $30, $10 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $82.b		; 04 82 ; Test and set bits $82.b [Reads: Accumulator] [Flags: Z]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $70FF00.l,X		; FF 00 FF 70 ; Subtract with carry (long,X) $70FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	jsr ($F063.w,X)		; FC 63 F0 ; Jump to subroutine indirect indexed ($F063.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor $1FE043.l		; 4F 43 E0 1F ; Exclusive OR accumulator with memory (long) $1FE043.l [Writes: Accumulator] [Flags: ZN]
	ora ($C6.b,S),Y		; 13 C6 ; OR accumulator (stack relative indirect indexed) ($C6.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $30CF.w,Y		; 39 CF 30 ; AND accumulator with memory $30CF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $2010.w		; 0C 10 20 ; Test and set bits $2010.w [Reads: Accumulator] [Flags: Z]
	jsr $4F46.w		; 20 46 4F ; Jump to subroutine at $4F46.w [Writes: Stack Pointer] [Flow: call]
	sbc $0EFF00.l,X		; FF 00 FF 0E ; Subtract with carry (long,X) $0EFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $F20FC6.l,X		; 3F C6 0F F2 ; AND accumulator with memory (long,X) $F20FC6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $07.b,S		; 43 07 ; Exclusive OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora $EC13.w,X		; 1D 13 EC ; OR accumulator with memory $EC13.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: ZNC]
	cpy #$30.b		; C0 30 ; Compare #$30.b with Y register [Reads: Y Index] [Flags: ZNC]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora ($3A.b)		; 12 3A ; OR accumulator with memory (indirect) ($3A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	bit $DC.b,X		; 34 DC ; Test bits $DC.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	bit $D4.b,X		; 34 D4 ; Test bits $D4.b,X [Reads: X Index, Direct Page] [Flags: ZVN] [Flow: branch]
	and ($D0.b),Y		; 31 D0 ; AND accumulator with memory ($D0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	and $1DC8.w,Y		; 39 C8 1D ; AND accumulator with memory $1DC8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	cpx $1E.b		; E4 1E ; Compare $1E.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	inc $1A.b		; E6 1A ; Increment $1A.b [Reads: Direct Page] [Flags: ZN]
	nop		; EA ; No operation
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cmp $CB.b,S		; C3 CB ; Compare accumulator (stack relative) $CB.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	sta $62.b,S		; 83 62 ; Store accumulator (stack relative) $62.b,S [Reads: Accumulator, Stack Pointer]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $07.b		; 05 07 ; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $7FFF00.l,X		; FF 00 FF 7F ; Subtract with carry (long,X) $7FFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: ZN]
	sbc [$80.b],Y		; F7 80 ; Subtract with carry (long indexed) [$80.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$7F.b],Y		; F7 7F ; Subtract with carry (long indexed) [$7F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFFAC0.l,X		; FF C0 FA FF ; Subtract with carry (long,X) $FFFAC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	adc $7F7780.l,X		; 7F 80 77 7F ; Add long $7F7780.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $30		; 80 30 ; Branch always to $80, $30 [Flow: branch]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $5BAA45.l,X		; FF 45 AA 5B ; Subtract with carry (long,X) $5BAA45.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $5F.b		; 46 5F ; Logical shift right $5F.b [Reads: Direct Page] [Flags: ZNC]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: ZN]
	lda $042240.l,X		; BF 40 22 04 ; Load long $042240.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Accumulator, Direct Page] [Flags: ZVN]
	cpx #$29.b		; E0 29 ; Compare #$29.b with X register [Reads: X Index] [Flags: ZNC]
	asl $EA.b,X		; 16 EA ; Arithmetic shift left $EA.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc $EA1A.w		; EE 1A EA ; Increment $EA1A.w [Flags: ZN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	pea $E61B.w		; F4 1B E6 ; Push absolute address $E61B.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	dec $2E.b,X		; D6 2E ; Decrement memory $2E.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	dec $E1.b,X		; D6 E1 ; Decrement memory $E1.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	sbc ($E5.b,X)		; E1 E5 ; Subtract with carry ($E5.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$E3.b]		; E7 E3 ; Subtract with carry (long) [$E3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($C1.b,X)		; E1 C1 ; Subtract with carry ($C1.b,X) [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	cmp ($CE.b,X)		; C1 CE ; Compare accumulator ($CE.b,X) [Reads: Accumulator, X Index, Direct Page] [Flags: ZNC]
	bit $7C8D.w,X		; 3C 8D 7C ; Test bits $7C8D.w,X [Reads: X Index] [Flags: ZVN] [Flow: branch]
	cmp #$78.b		; C9 78 ; Compare #$78.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	wai		; CB ; Wait for interrupt
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cmp $4C8D5C.l,X		; DF 5C 8D 4C ; Compare accumulator (long,X) $4C8D5C.l,X [Reads: Accumulator, X Index] [Flags: ZNC]
	lda $64.b		; A5 64 ; Load $64.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jsl $230207.l		; 22 07 02 23 ; Jump to subroutine long $230207.l [Writes: Stack Pointer] [Flow: call]
	and ($1B.b,S),Y		; 33 1B ; AND accumulator (stack relative indirect indexed) ($1B.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $63.b,S		; 43 63 ; Exclusive OR accumulator with stack relative $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	sta $3FDF10.l,X		; 9F 10 DF 3F ; Store accumulator (long,X) $3FDF10.l,X [Reads: Accumulator, X Index]
	lda $70B07F.l,X		; BF 7F B0 70 ; Load long $70B07F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	cpx #$60.b		; E0 60 ; Compare #$60.b with X register [Reads: X Index] [Flags: ZNC]
	sbc $60E060.l		; EF 60 E0 60 ; Subtract with carry (long) $60E060.l [Writes: Accumulator] [Flags: ZVNC]
	trb $201C.w		; 1C 1C 20 ; Test and reset bits $201C.w [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	eor $451F22.l		; 4F 22 1F 45 ; Exclusive OR accumulator with memory (long) $451F22.l [Writes: Accumulator] [Flags: ZN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($7F00.w,X)		; 7C 00 7F ; Jump indirect indexed to ($7F00.w,X) [Reads: X Index] [Flow: jump]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsr ($25FC.w,X)		; FC FC 25 ; Jump to subroutine indirect indexed ($25FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $038701.l,X		; FF 01 87 03 ; Subtract with carry (long,X) $038701.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	and $F3.b,S		; 23 F3 ; AND accumulator with stack relative $F3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc ($76.b,S),Y		; F3 76 ; Subtract with carry (stack relative indirect indexed) ($76.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($F6.b,X)		; 01 F6 ; Logical OR ($F6.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	adc ($22.b,S),Y		; 73 22 ; Add with carry (stack relative indirect indexed) ($22.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	tsb $8C00.w		; 0C 00 8C ; Test and set bits $8C00.w [Reads: Accumulator] [Flags: Z]
	and $0C.b,S		; 23 0C ; AND accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZNC]
	sbc $FEC1FE.l,X		; FF FE C1 FE ; Subtract with carry (long,X) $FEC1FE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sta ($FE.b,X)		; 81 FE ; Store accumulator ($FE.b,X) [Reads: Accumulator, X Index, Direct Page]
	ora $F033FC.l,X		; 1F FC 33 F0 ; Logical OR long $F033FC.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	sbc ($44.b,S),Y		; F3 44 ; Subtract with carry (stack relative indirect indexed) ($44.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $70, $FB		; 70 FB ; Branch if overflow set to $70, $FB [Flow: branch]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	trb $001C.w		; 1C 1C 00 ; Test and reset bits $001C.w [Reads: Accumulator] [Flags: Z]
	and $0C.b,S		; 23 0C ; AND accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $F77CFB.l		; 0F FB 7C F7 ; OR accumulator with memory (long) $F77CFB.l [Writes: Accumulator] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc [$7A.b],Y		; F7 7A ; Subtract with carry (long indexed) [$7A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lda ($72.b),Y		; B1 72 ; Load accumulator ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	eor $EDBE.w,X		; 5D BE ED ; Exclusive OR accumulator with memory $EDBE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	asl $1EAD.w,X		; 1E AD 1E ; Arithmetic shift left $1EAD.w,X [Reads: X Index] [Flags: ZNC]
	cmp $224E.w		; CD 4E 22 ; Compare $224E.w with accumulator [Reads: Accumulator] [Flags: ZNC]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0000.w		; 0C 00 00 ; Test and set bits $0000.w [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: XVNMZIDC] [Flow: return]

	.db $30, $05		; 30 05 ; Branch if minus to $30, $05 [Flow: branch]
	sbc $3EFF1C.l,X		; FF 1C FF 3E ; Subtract with carry (long,X) $3EFF1C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FDFF7F.l,X		; FF 7F FF FD ; Subtract with carry (long,X) $FDFF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F9FEFA.l,X		; FF FA FE F9 ; Subtract with carry (long,X) $F9FEFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $F8FFFC.l,X		; FF FC FF F8 ; Subtract with carry (long,X) $F8FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	cpx #$C0.b		; E0 C0 ; Compare #$C0.b with X register [Reads: X Index] [Flags: ZNC]
	.db $80, $83		; 80 83 ; Branch always to $80, $83 [Flow: branch]
	eor $E000.w,Y		; 59 00 E0 ; Exclusive OR accumulator with memory $E000.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and ($01.b,X)		; 21 01 ; Logical AND ($01.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sbc $26FF30.l,X		; FF 30 FF 26 ; Subtract with carry (long,X) $26FF30.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $3C7F0F.l		; EF 0F 7F 3C ; Subtract with carry (long) $3C7F0F.l [Writes: Accumulator] [Flags: ZVNC]
	inc $FEBA.w,X		; FE BA FE ; Increment memory $FEBA.w,X [Reads: X Index] [Flags: ZN]
	eor $5C7F.w,Y		; 59 7F 5C ; Exclusive OR accumulator with memory $5C7F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	adc $100000.l,X		; 7F 00 00 10 ; Add long $100000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $01		; 80 01 ; Branch always to $80, $01 [Flow: branch]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	.db $80, $01		; 80 01 ; Branch always to $80, $01 [Flow: branch]
	sbc $36DF14.l,X		; FF 14 DF 36 ; Subtract with carry (long,X) $36DF14.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $7DFF0F.l,X		; FF 0F FF 7D ; Subtract with carry (long,X) $7DFF0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $042A86.l,X		; FF 86 2A 04 ; Subtract with carry (long,X) $042A86.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $011A00.l		; 22 00 1A 01 ; Jump to subroutine long $011A00.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$F9.b]		; 07 F9 ; OR accumulator with memory (long) [$F9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	asl $1DF2.w		; 0E F2 1D ; Arithmetic shift left $1DF2.w [Flags: ZNC]
	cpx $3B.b		; E4 3B ; Compare $3B.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	cmp #$77.b		; C9 77 ; Compare #$77.b with accumulator [Reads: Accumulator] [Flags: ZNC]
	sta ($EF.b,S),Y		; 93 EF ; Store accumulator (stack relative indirect indexed) ($EF.b,S),Y [Reads: Accumulator, Stack Pointer, Y Index]
	rol $DF.b		; 26 DF ; Rotate left $DF.b [Reads: Direct Page] [Flags: ZNC]
	asl $0000.w		; 0E 00 00 ; Arithmetic shift left $0000.w [Flags: ZNC]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: ZNC]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $30, $4E		; 30 4E ; Branch if minus to $30, $4E [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: XVNMZIDC]
	sbc $B8480F.l,X		; FF 0F 48 B8 ; Subtract with carry (long,X) $B8480F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	clv		; B8 ; Clear overflow flag [Flags: V]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clv		; B8 ; Clear overflow flag [Flags: V]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	adc #$A8.b		; 69 A8 ; Add #$A8.b to accumulator with carry [Writes: Accumulator] [Flags: ZVNC]
	mvp $DA,$A4		; 44 A4 DA ; Move block positive $DA,$A4 [Reads: Accumulator, X Index, Y Index] [Writes: Accumulator, X Index, Y Index]
	and ($CC.b)		; 32 CC ; AND accumulator with memory (indirect) ($CC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sec		; 38 ; Set carry flag [Flags: C]
	and $07.b,S		; 23 07 ; AND accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$1B.b],Y		; 17 1B ; OR accumulator with memory (long indexed) [$1B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora $B007.w		; 0D 07 B0 ; Logical OR $B007.w with accumulator [Writes: Accumulator] [Flags: ZN]
	cmp $AB.b,S		; C3 AB ; Compare accumulator (stack relative) $AB.b,S [Reads: Accumulator, Stack Pointer] [Flags: ZNC]
	cpy #$AD.b		; C0 AD ; Compare #$AD.b with Y register [Reads: Y Index] [Flags: ZNC]
	cpy #$BD.b		; C0 BD ; Compare #$BD.b with Y register [Reads: Y Index] [Flags: ZNC]
	cmp ($9A.b)		; D2 9A ; Compare accumulator (indirect) ($9A.b) [Reads: Accumulator, Direct Page] [Flags: ZNC]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: ZN]
	sbc $7CFFF3.l,X		; FF F3 FF 7C ; Subtract with carry (long,X) $7CFFF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $171C00.l,X		; FF 00 1C 17 ; Subtract with carry (long,X) $171C00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $22.b		; 05 22 ; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0E0800.l,X		; FF 00 08 0E ; Subtract with carry (long,X) $0E0800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1FFB1F.l,X		; FF 1F FB 1F ; Subtract with carry (long,X) $1FFB1F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($1F.b),Y		; F1 1F ; Subtract with carry ($1F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $1F.b,X		; F5 1F ; Subtract $1F.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	jsl $0E0400.l		; 22 00 04 0E ; Jump to subroutine long $0E0400.l [Writes: Stack Pointer] [Flow: call]
	ora $11111B.l,X		; 1F 1B 11 11 ; Logical OR long $11111B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	eor $275BAA.l		; 4F AA 5B 27 ; Exclusive OR accumulator with memory (long) $275BAA.l [Writes: Accumulator] [Flags: ZN]
	tsb $4D.b		; 04 4D ; Test and set bits $4D.b [Reads: Accumulator] [Flags: Z]
	sbc $1F.b,X		; F5 1F ; Subtract $1F.b,X from accumulator with borrow [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora ($BB.b,X)		; 01 BB ; Logical OR ($BB.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: ZN] [SNES: Sets DP register from accumulator]
	rol $11.b		; 26 11 ; Rotate left $11.b [Reads: Direct Page] [Flags: ZNC]
	asl $15.b		; 06 15 ; Arithmetic shift left $15.b [Reads: Direct Page] [Flags: ZNC]
	bit #$60.b		; 89 60 ; Test bits #$60.b with accumulator [Reads: Accumulator] [Flags: Z]
	sta [$70.b],Y		; 97 70 ; Store accumulator (long indexed) [$70.b],Y [Reads: Accumulator, Direct Page, Y Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	eor $BD.b,S		; 43 BD ; Exclusive OR accumulator with stack relative $BD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	jmp ($9E05.w,X)		; 7C 05 9E ; Jump indirect indexed to ($9E05.w,X) [Reads: X Index] [Flow: jump]
	ror $3EC6.w,X		; 7E C6 3E ; Rotate right $3EC6.w,X [Reads: X Index] [Flags: ZNC]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	sta $61.b,S		; 83 61 ; Store accumulator (stack relative) $61.b,S [Reads: Accumulator, Stack Pointer]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $14.b,S		; 03 14 ; OR accumulator with stack relative $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$2C.b]		; 07 2C ; OR accumulator with memory (long) [$2C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora $B91F5C.l		; 0F 5C 1F B9 ; OR accumulator with memory (long) $B91F5C.l [Writes: Accumulator] [Flags: ZN]
	ldx $FF22.w,Y		; BE 22 FF ; Load X register $FF22.w,Y [Reads: Y Index] [Writes: X Index] [Flags: ZN]
	asl $FBFC.w		; 0E FC FB ; Arithmetic shift left $FBFC.w [Flags: ZNC]
	sbc ($E3.b,S),Y		; F3 E3 ; Subtract with carry (stack relative indirect indexed) ($E3.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $FF.b		; 46 FF ; Logical shift right $FF.b [Reads: Direct Page] [Flags: ZNC]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF5FDF.l,X		; 3F DF 5F FF ; AND accumulator with memory (long,X) $FF5FDF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $F0, $60		; F0 60 ; Branch if equal to $F0, $60 [Flow: branch]
	eor $F7.b,S		; 43 F7 ; Exclusive OR accumulator with stack relative $F7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	adc [$11.b]		; 67 11 ; Add with carry (long) [$11.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	inc $66.b,X		; F6 66 ; Increment memory $66.b,X [Reads: X Index, Direct Page] [Flags: ZN]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $1F1F.w		; 20 1F 1F ; Jump to subroutine at $1F1F.w [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $1FE0.w,Y		; 19 E0 1F ; OR accumulator with memory $1FE0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	sbc [$08.b],Y		; F7 08 ; Subtract with carry (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $30CF00.l,X		; FF 00 CF 30 ; Subtract with carry (long,X) $30CF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $E7.b,S		; 43 E7 ; Exclusive OR accumulator with stack relative $E7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $EE.b		; 05 EE ; Logical OR $EE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ora ($FF.b),Y		; 11 FF ; OR accumulator with memory ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZN]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc ($FC.b,S),Y		; 73 FC ; Add with carry (stack relative indirect indexed) ($FC.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sta [$78.b]		; 87 78 ; Store accumulator (long) [$78.b] [Reads: Accumulator, Direct Page]
	sbc $0CF300.l,X		; FF 00 F3 0C ; Subtract with carry (long,X) $0CF300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc ($0E.b),Y		; F1 0E ; Subtract with carry ($0E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	adc ($8E.b),Y		; 71 8E ; Add with carry ($8E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	eor $3F.b,S		; 43 3F ; Exclusive OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	cpy #$01.b		; C0 01 ; Compare #$01.b with Y register [Reads: Y Index] [Flags: ZNC]
	sty $2578.w		; 8C 78 25 ; Store Y register to $2578.w [Reads: Y Index]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FD7E.w,X		; FD 7E FD ; Subtract with carry $FD7E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lsr $FD.b		; 46 FD ; Logical shift right $FD.b [Reads: Direct Page] [Flags: ZNC]
	lsr $45.b,X		; 56 45 ; Logical shift right $45.b,X [Reads: X Index, Direct Page] [Flags: ZNC]
	sbc $0246.w,X		; FD 46 02 ; Subtract with carry $0246.w,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	lda $FF46.w,Y		; B9 46 FF ; Load $FF46.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: ZN]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	and $10.b,S		; 23 10 ; AND accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	ldy $3FEF.w		; AC EF 3F ; Load $3FEF.w into Y register [Writes: Y Index] [Flags: ZN]
	sbc $01FE02.l,X		; FF 02 FE 01 ; Subtract with carry (long,X) $01FE02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $100400.l,X		; FF 00 04 10 ; Subtract with carry (long,X) $100400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $80, $C1		; 80 C1 ; Branch always to $80, $C1 [Flow: branch]
	jsr ($22FE.w,X)		; FC FE 22 ; Jump to subroutine indirect indexed ($22FE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FF9E0F.l,X		; FF 0F 9E FF ; Subtract with carry (long,X) $FF9E0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	ora $FF0FFF.l,X		; 1F FF 0F FF ; Logical OR long $FF0FFF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: ZN]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	lda #$EF.b		; A9 EF ; Load #$EF.b into accumulator [Writes: Accumulator] [Flags: ZN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: ZN]
	inc $BF01.w,X		; FE 01 BF ; Increment memory $BF01.w,X [Reads: X Index] [Flags: ZN]
	brk $C7.b		; 00 C7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($10.b,S),Y		; 13 10 ; OR accumulator (stack relative indirect indexed) ($10.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZN]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	sec		; 38 ; Set carry flag [Flags: C]
	stz $3FFF.w,X		; 9E FF 3F ; Store zero to $3FFF.w,X [Reads: X Index]
	sbc $26FF0F.l,X		; FF 0F FF 26 ; Subtract with carry (long,X) $26FF0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $32DF51.l,X		; FF 51 DF 32 ; Subtract with carry (long,X) $32DF51.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	inc $FF01.w,X		; FE 01 FF ; Increment memory $FF01.w,X [Reads: X Index] [Flags: ZN]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: ZNC]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: ZN]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: X Index, Direct Page] [Writes: Accumulator] [Flags: ZN] [SNES: Indexed indirect addressing]
	brk $49.b		; 00 49 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $FB.b		; E4 FB ; Compare $FB.b with X register [Reads: X Index, Direct Page] [Flags: ZNC]
	ora $CC.b		; 05 CC ; Logical OR $CC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc ($18.b,S),Y		; F3 18 ; Subtract with carry (stack relative indirect indexed) ($18.b,S),Y [Reads: Stack Pointer, Y Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc [$F0.b]		; E7 F0 ; Subtract with carry (long) [$F0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	ora $011824.l		; 0F 24 18 01 ; OR accumulator with memory (long) $011824.l [Writes: Accumulator] [Flags: ZN]
	.db $30, $E0		; 30 E0 ; Branch if minus to $30, $E0 [Flow: branch]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	sbc $00FFE7.l,X		; FF E7 FF 00 ; Subtract with carry (long,X) $00FFE7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FF.b		; E5 FF ; Subtract $FF.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E7FF00.l,X		; FF 00 FF E7 ; Subtract with carry (long,X) $E7FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFE500.l,X		; FF 00 E5 FF ; Subtract with carry (long,X) $FFE500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E7FF00.l,X		; FF 00 FF E7 ; Subtract with carry (long,X) $E7FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFE500.l,X		; FF 00 E5 FF ; Subtract with carry (long,X) $FFE500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E7FF00.l,X		; FF 00 FF E7 ; Subtract with carry (long,X) $E7FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFE500.l,X		; FF 00 E5 FF ; Subtract with carry (long,X) $FFE500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E7FF00.l,X		; FF 00 FF E7 ; Subtract with carry (long,X) $E7FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFE500.l,X		; FF 00 E5 FF ; Subtract with carry (long,X) $FFE500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E7FF00.l,X		; FF 00 FF E7 ; Subtract with carry (long,X) $E7FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFE500.l,X		; FF 00 E5 FF ; Subtract with carry (long,X) $FFE500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E7FF00.l,X		; FF 00 FF E7 ; Subtract with carry (long,X) $E7FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFE500.l,X		; FF 00 E5 FF ; Subtract with carry (long,X) $FFE500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E7FF00.l,X		; FF 00 FF E7 ; Subtract with carry (long,X) $E7FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	sbc $FFE500.l,X		; FF 00 E5 FF ; Subtract with carry (long,X) $FFE500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: ZVNC]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E0FF00.l,X		; FF 00 FF E0 ; Subtract with carry (long,X) $E0FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: ZVNC]
	.db $2F		; Opcode 2F overrunning bank boundry at 0A7FFD. Skipping. ; AND accumulator with memory (long) $2F [Writes: Accumulator] [Flags: ZN]
	.db $07		; Opcode 07 overrunning bank boundry at 0A7FFE. Skipping. ; OR accumulator with memory (long) $07 [Reads: Direct Page] [Writes: Accumulator] [Flags: ZN]
	.db $00		; Opcode 00 overrunning bank boundry at 0A7FFF. Skipping. ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
.ENDS
